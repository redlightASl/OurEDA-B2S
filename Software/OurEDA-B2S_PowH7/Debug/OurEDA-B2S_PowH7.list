
OurEDA-B2S_PowH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f370  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800f610  0800f610  0001f610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f7c8  0800f7c8  0001f7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f7d0  0800f7d0  0001f7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f7d4  0800f7d4  0001f7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800f7d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000075c4  24000014  0800f7ec  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240075d8  0800f7ec  000275d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003202b  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050d6  00000000  00000000  0005206d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017b8  00000000  00000000  00057148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001610  00000000  00000000  00058900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a1ae  00000000  00000000  00059f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002157b  00000000  00000000  000940be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f21c  00000000  00000000  000b5639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00224855  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000622c  00000000  00000000  002248a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f5f8 	.word	0x0800f5f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800f5f8 	.word	0x0800f5f8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 f90f 	bl	8000802 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e4:	f003 ffac 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_Init+0x68>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	f003 030f 	and.w	r3, r3, #15
 80005f4:	4913      	ldr	r1, [pc, #76]	; (8000644 <HAL_Init+0x6c>)
 80005f6:	5ccb      	ldrb	r3, [r1, r3]
 80005f8:	f003 031f 	and.w	r3, r3, #31
 80005fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000600:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_Init+0x6c>)
 800060c:	5cd3      	ldrb	r3, [r2, r3]
 800060e:	f003 031f 	and.w	r3, r3, #31
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	fa22 f303 	lsr.w	r3, r2, r3
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_Init+0x70>)
 800061a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800061c:	4a0b      	ldr	r2, [pc, #44]	; (800064c <HAL_Init+0x74>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	200f      	movs	r0, #15
 8000624:	f00d f958 	bl	800d8d8 <HAL_InitTick>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e002      	b.n	8000638 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000632:	f00d f933 	bl	800d89c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58024400 	.word	0x58024400
 8000644:	0800f7b8 	.word	0x0800f7b8
 8000648:	24000010 	.word	0x24000010
 800064c:	2400000c 	.word	0x2400000c

08000650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	24000004 	.word	0x24000004
 8000674:	2400408c 	.word	0x2400408c

08000678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2400408c 	.word	0x2400408c

08000690 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_GetREVID+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	0c1b      	lsrs	r3, r3, #16
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	5c001000 	.word	0x5c001000

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <__NVIC_SetPriorityGrouping+0x40>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x40>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	05fa0000 	.word	0x05fa0000

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff4c 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000826:	f7ff ff63 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 800082a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	68b9      	ldr	r1, [r7, #8]
 8000830:	6978      	ldr	r0, [r7, #20]
 8000832:	f7ff ffb3 	bl	800079c <NVIC_EncodePriority>
 8000836:	4602      	mov	r2, r0
 8000838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff82 	bl	8000748 <__NVIC_SetPriority>
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff56 	bl	800070c <__NVIC_EnableIRQ>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff ff02 	bl	8000678 <HAL_GetTick>
 8000874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	e316      	b.n	8000eae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a66      	ldr	r2, [pc, #408]	; (8000a20 <HAL_DMA_Init+0x1b8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d04a      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a65      	ldr	r2, [pc, #404]	; (8000a24 <HAL_DMA_Init+0x1bc>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d045      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a63      	ldr	r2, [pc, #396]	; (8000a28 <HAL_DMA_Init+0x1c0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d040      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a62      	ldr	r2, [pc, #392]	; (8000a2c <HAL_DMA_Init+0x1c4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d03b      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_DMA_Init+0x1c8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d036      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a5f      	ldr	r2, [pc, #380]	; (8000a34 <HAL_DMA_Init+0x1cc>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d031      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a5d      	ldr	r2, [pc, #372]	; (8000a38 <HAL_DMA_Init+0x1d0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d02c      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a5c      	ldr	r2, [pc, #368]	; (8000a3c <HAL_DMA_Init+0x1d4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d027      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a5a      	ldr	r2, [pc, #360]	; (8000a40 <HAL_DMA_Init+0x1d8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d022      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a59      	ldr	r2, [pc, #356]	; (8000a44 <HAL_DMA_Init+0x1dc>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d01d      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a57      	ldr	r2, [pc, #348]	; (8000a48 <HAL_DMA_Init+0x1e0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d018      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a56      	ldr	r2, [pc, #344]	; (8000a4c <HAL_DMA_Init+0x1e4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d013      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a54      	ldr	r2, [pc, #336]	; (8000a50 <HAL_DMA_Init+0x1e8>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d00e      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a53      	ldr	r2, [pc, #332]	; (8000a54 <HAL_DMA_Init+0x1ec>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d009      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a51      	ldr	r2, [pc, #324]	; (8000a58 <HAL_DMA_Init+0x1f0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d004      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a50      	ldr	r2, [pc, #320]	; (8000a5c <HAL_DMA_Init+0x1f4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d101      	bne.n	8000924 <HAL_DMA_Init+0xbc>
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <HAL_DMA_Init+0xbe>
 8000924:	2300      	movs	r3, #0
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 813b 	beq.w	8000ba2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2202      	movs	r2, #2
 8000930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a37      	ldr	r2, [pc, #220]	; (8000a20 <HAL_DMA_Init+0x1b8>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d04a      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a36      	ldr	r2, [pc, #216]	; (8000a24 <HAL_DMA_Init+0x1bc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d045      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a34      	ldr	r2, [pc, #208]	; (8000a28 <HAL_DMA_Init+0x1c0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d040      	beq.n	80009dc <HAL_DMA_Init+0x174>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <HAL_DMA_Init+0x1c4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d03b      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <HAL_DMA_Init+0x1c8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d036      	beq.n	80009dc <HAL_DMA_Init+0x174>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <HAL_DMA_Init+0x1cc>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d031      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <HAL_DMA_Init+0x1d0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d02c      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a2d      	ldr	r2, [pc, #180]	; (8000a3c <HAL_DMA_Init+0x1d4>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d027      	beq.n	80009dc <HAL_DMA_Init+0x174>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2b      	ldr	r2, [pc, #172]	; (8000a40 <HAL_DMA_Init+0x1d8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d022      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <HAL_DMA_Init+0x1dc>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d01d      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <HAL_DMA_Init+0x1e0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d018      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <HAL_DMA_Init+0x1e4>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d013      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <HAL_DMA_Init+0x1e8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d00e      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a24      	ldr	r2, [pc, #144]	; (8000a54 <HAL_DMA_Init+0x1ec>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d009      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <HAL_DMA_Init+0x1f0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d004      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <HAL_DMA_Init+0x1f4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d108      	bne.n	80009ee <HAL_DMA_Init+0x186>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 0201 	bic.w	r2, r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e007      	b.n	80009fe <HAL_DMA_Init+0x196>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f022 0201 	bic.w	r2, r2, #1
 80009fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80009fe:	e02f      	b.n	8000a60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000a00:	f7ff fe3a 	bl	8000678 <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b05      	cmp	r3, #5
 8000a0c:	d928      	bls.n	8000a60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2220      	movs	r2, #32
 8000a12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2203      	movs	r2, #3
 8000a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e246      	b.n	8000eae <HAL_DMA_Init+0x646>
 8000a20:	40020010 	.word	0x40020010
 8000a24:	40020028 	.word	0x40020028
 8000a28:	40020040 	.word	0x40020040
 8000a2c:	40020058 	.word	0x40020058
 8000a30:	40020070 	.word	0x40020070
 8000a34:	40020088 	.word	0x40020088
 8000a38:	400200a0 	.word	0x400200a0
 8000a3c:	400200b8 	.word	0x400200b8
 8000a40:	40020410 	.word	0x40020410
 8000a44:	40020428 	.word	0x40020428
 8000a48:	40020440 	.word	0x40020440
 8000a4c:	40020458 	.word	0x40020458
 8000a50:	40020470 	.word	0x40020470
 8000a54:	40020488 	.word	0x40020488
 8000a58:	400204a0 	.word	0x400204a0
 8000a5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1c8      	bne.n	8000a00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	4b83      	ldr	r3, [pc, #524]	; (8000c88 <HAL_DMA_Init+0x420>)
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000a86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a1b      	ldr	r3, [r3, #32]
 8000aa4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d107      	bne.n	8000ac4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4313      	orrs	r3, r2
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8000ac4:	4b71      	ldr	r3, [pc, #452]	; (8000c8c <HAL_DMA_Init+0x424>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b71      	ldr	r3, [pc, #452]	; (8000c90 <HAL_DMA_Init+0x428>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ad0:	d328      	bcc.n	8000b24 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b28      	cmp	r3, #40	; 0x28
 8000ad8:	d903      	bls.n	8000ae2 <HAL_DMA_Init+0x27a>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b2e      	cmp	r3, #46	; 0x2e
 8000ae0:	d917      	bls.n	8000b12 <HAL_DMA_Init+0x2aa>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8000ae8:	d903      	bls.n	8000af2 <HAL_DMA_Init+0x28a>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b42      	cmp	r3, #66	; 0x42
 8000af0:	d90f      	bls.n	8000b12 <HAL_DMA_Init+0x2aa>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b46      	cmp	r3, #70	; 0x46
 8000af8:	d903      	bls.n	8000b02 <HAL_DMA_Init+0x29a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b48      	cmp	r3, #72	; 0x48
 8000b00:	d907      	bls.n	8000b12 <HAL_DMA_Init+0x2aa>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b4e      	cmp	r3, #78	; 0x4e
 8000b08:	d905      	bls.n	8000b16 <HAL_DMA_Init+0x2ae>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2b52      	cmp	r3, #82	; 0x52
 8000b10:	d801      	bhi.n	8000b16 <HAL_DMA_Init+0x2ae>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <HAL_DMA_Init+0x2b0>
 8000b16:	2300      	movs	r3, #0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b22:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	f023 0307 	bic.w	r3, r3, #7
 8000b3a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d117      	bne.n	8000b7e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00e      	beq.n	8000b7e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f002 fb4b 	bl	80031fc <DMA_CheckFifoParam>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d008      	beq.n	8000b7e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2240      	movs	r2, #64	; 0x40
 8000b70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e197      	b.n	8000eae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f002 fa86 	bl	8003098 <DMA_CalcBaseAndBitshift>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	223f      	movs	r2, #63	; 0x3f
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	e0cd      	b.n	8000d3e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a3b      	ldr	r2, [pc, #236]	; (8000c94 <HAL_DMA_Init+0x42c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d022      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a39      	ldr	r2, [pc, #228]	; (8000c98 <HAL_DMA_Init+0x430>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d01d      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a38      	ldr	r2, [pc, #224]	; (8000c9c <HAL_DMA_Init+0x434>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d018      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <HAL_DMA_Init+0x438>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d013      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <HAL_DMA_Init+0x43c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00e      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <HAL_DMA_Init+0x440>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d009      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a32      	ldr	r2, [pc, #200]	; (8000cac <HAL_DMA_Init+0x444>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d004      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <HAL_DMA_Init+0x448>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_DMA_Init+0x38e>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <HAL_DMA_Init+0x390>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 8097 	beq.w	8000d2c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a24      	ldr	r2, [pc, #144]	; (8000c94 <HAL_DMA_Init+0x42c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d021      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a22      	ldr	r2, [pc, #136]	; (8000c98 <HAL_DMA_Init+0x430>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d01c      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <HAL_DMA_Init+0x434>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d017      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a1f      	ldr	r2, [pc, #124]	; (8000ca0 <HAL_DMA_Init+0x438>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d012      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_DMA_Init+0x43c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d00d      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_DMA_Init+0x440>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d008      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <HAL_DMA_Init+0x444>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d003      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_DMA_Init+0x448>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2202      	movs	r2, #2
 8000c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_DMA_Init+0x44c>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b40      	cmp	r3, #64	; 0x40
 8000c74:	d020      	beq.n	8000cb8 <HAL_DMA_Init+0x450>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b80      	cmp	r3, #128	; 0x80
 8000c7c:	d102      	bne.n	8000c84 <HAL_DMA_Init+0x41c>
 8000c7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c82:	e01a      	b.n	8000cba <HAL_DMA_Init+0x452>
 8000c84:	2300      	movs	r3, #0
 8000c86:	e018      	b.n	8000cba <HAL_DMA_Init+0x452>
 8000c88:	fe10803f 	.word	0xfe10803f
 8000c8c:	5c001000 	.word	0x5c001000
 8000c90:	ffff0000 	.word	0xffff0000
 8000c94:	58025408 	.word	0x58025408
 8000c98:	5802541c 	.word	0x5802541c
 8000c9c:	58025430 	.word	0x58025430
 8000ca0:	58025444 	.word	0x58025444
 8000ca4:	58025458 	.word	0x58025458
 8000ca8:	5802546c 	.word	0x5802546c
 8000cac:	58025480 	.word	0x58025480
 8000cb0:	58025494 	.word	0x58025494
 8000cb4:	fffe000f 	.word	0xfffe000f
 8000cb8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68d2      	ldr	r2, [r2, #12]
 8000cbe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000cc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ce8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <HAL_DMA_Init+0x650>)
 8000d00:	4413      	add	r3, r2
 8000d02:	4a6e      	ldr	r2, [pc, #440]	; (8000ebc <HAL_DMA_Init+0x654>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	009a      	lsls	r2, r3, #2
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f002 f9c1 	bl	8003098 <DMA_CalcBaseAndBitshift>
 8000d16:	4603      	mov	r3, r0
 8000d18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	2201      	movs	r2, #1
 8000d24:	409a      	lsls	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	e008      	b.n	8000d3e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2240      	movs	r2, #64	; 0x40
 8000d30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2203      	movs	r2, #3
 8000d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e0b7      	b.n	8000eae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a5f      	ldr	r2, [pc, #380]	; (8000ec0 <HAL_DMA_Init+0x658>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d072      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a5d      	ldr	r2, [pc, #372]	; (8000ec4 <HAL_DMA_Init+0x65c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d06d      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a5c      	ldr	r2, [pc, #368]	; (8000ec8 <HAL_DMA_Init+0x660>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d068      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a5a      	ldr	r2, [pc, #360]	; (8000ecc <HAL_DMA_Init+0x664>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d063      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a59      	ldr	r2, [pc, #356]	; (8000ed0 <HAL_DMA_Init+0x668>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d05e      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <HAL_DMA_Init+0x66c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d059      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a56      	ldr	r2, [pc, #344]	; (8000ed8 <HAL_DMA_Init+0x670>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d054      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a54      	ldr	r2, [pc, #336]	; (8000edc <HAL_DMA_Init+0x674>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d04f      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a53      	ldr	r2, [pc, #332]	; (8000ee0 <HAL_DMA_Init+0x678>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d04a      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a51      	ldr	r2, [pc, #324]	; (8000ee4 <HAL_DMA_Init+0x67c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d045      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a50      	ldr	r2, [pc, #320]	; (8000ee8 <HAL_DMA_Init+0x680>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d040      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a4e      	ldr	r2, [pc, #312]	; (8000eec <HAL_DMA_Init+0x684>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d03b      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a4d      	ldr	r2, [pc, #308]	; (8000ef0 <HAL_DMA_Init+0x688>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d036      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a4b      	ldr	r2, [pc, #300]	; (8000ef4 <HAL_DMA_Init+0x68c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d031      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a4a      	ldr	r2, [pc, #296]	; (8000ef8 <HAL_DMA_Init+0x690>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d02c      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a48      	ldr	r2, [pc, #288]	; (8000efc <HAL_DMA_Init+0x694>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d027      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a47      	ldr	r2, [pc, #284]	; (8000f00 <HAL_DMA_Init+0x698>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d022      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <HAL_DMA_Init+0x69c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01d      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <HAL_DMA_Init+0x6a0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d018      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a42      	ldr	r2, [pc, #264]	; (8000f0c <HAL_DMA_Init+0x6a4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a41      	ldr	r2, [pc, #260]	; (8000f10 <HAL_DMA_Init+0x6a8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d00e      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a3f      	ldr	r2, [pc, #252]	; (8000f14 <HAL_DMA_Init+0x6ac>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d009      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a3e      	ldr	r2, [pc, #248]	; (8000f18 <HAL_DMA_Init+0x6b0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d004      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a3c      	ldr	r2, [pc, #240]	; (8000f1c <HAL_DMA_Init+0x6b4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_DMA_Init+0x5ca>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_DMA_Init+0x5cc>
 8000e32:	2300      	movs	r3, #0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d032      	beq.n	8000e9e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f002 fa5b 	bl	80032f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b80      	cmp	r3, #128	; 0x80
 8000e44:	d102      	bne.n	8000e4c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000e60:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d010      	beq.n	8000e8c <HAL_DMA_Init+0x624>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d80c      	bhi.n	8000e8c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f002 fad8 	bl	8003428 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	e008      	b.n	8000e9e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	a7fdabf8 	.word	0xa7fdabf8
 8000ebc:	cccccccd 	.word	0xcccccccd
 8000ec0:	40020010 	.word	0x40020010
 8000ec4:	40020028 	.word	0x40020028
 8000ec8:	40020040 	.word	0x40020040
 8000ecc:	40020058 	.word	0x40020058
 8000ed0:	40020070 	.word	0x40020070
 8000ed4:	40020088 	.word	0x40020088
 8000ed8:	400200a0 	.word	0x400200a0
 8000edc:	400200b8 	.word	0x400200b8
 8000ee0:	40020410 	.word	0x40020410
 8000ee4:	40020428 	.word	0x40020428
 8000ee8:	40020440 	.word	0x40020440
 8000eec:	40020458 	.word	0x40020458
 8000ef0:	40020470 	.word	0x40020470
 8000ef4:	40020488 	.word	0x40020488
 8000ef8:	400204a0 	.word	0x400204a0
 8000efc:	400204b8 	.word	0x400204b8
 8000f00:	58025408 	.word	0x58025408
 8000f04:	5802541c 	.word	0x5802541c
 8000f08:	58025430 	.word	0x58025430
 8000f0c:	58025444 	.word	0x58025444
 8000f10:	58025458 	.word	0x58025458
 8000f14:	5802546c 	.word	0x5802546c
 8000f18:	58025480 	.word	0x58025480
 8000f1c:	58025494 	.word	0x58025494

08000f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e226      	b.n	800138a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_DMA_Start_IT+0x2a>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e21f      	b.n	800138a <HAL_DMA_Start_IT+0x46a>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	f040 820a 	bne.w	8001374 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2202      	movs	r2, #2
 8000f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a68      	ldr	r2, [pc, #416]	; (8001114 <HAL_DMA_Start_IT+0x1f4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d04a      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a66      	ldr	r2, [pc, #408]	; (8001118 <HAL_DMA_Start_IT+0x1f8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d045      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a65      	ldr	r2, [pc, #404]	; (800111c <HAL_DMA_Start_IT+0x1fc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d040      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a63      	ldr	r2, [pc, #396]	; (8001120 <HAL_DMA_Start_IT+0x200>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d03b      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a62      	ldr	r2, [pc, #392]	; (8001124 <HAL_DMA_Start_IT+0x204>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d036      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a60      	ldr	r2, [pc, #384]	; (8001128 <HAL_DMA_Start_IT+0x208>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d031      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_DMA_Start_IT+0x20c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d02c      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a5d      	ldr	r2, [pc, #372]	; (8001130 <HAL_DMA_Start_IT+0x210>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d027      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a5c      	ldr	r2, [pc, #368]	; (8001134 <HAL_DMA_Start_IT+0x214>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d022      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a5a      	ldr	r2, [pc, #360]	; (8001138 <HAL_DMA_Start_IT+0x218>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01d      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a59      	ldr	r2, [pc, #356]	; (800113c <HAL_DMA_Start_IT+0x21c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d018      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a57      	ldr	r2, [pc, #348]	; (8001140 <HAL_DMA_Start_IT+0x220>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a56      	ldr	r2, [pc, #344]	; (8001144 <HAL_DMA_Start_IT+0x224>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d00e      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a54      	ldr	r2, [pc, #336]	; (8001148 <HAL_DMA_Start_IT+0x228>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d009      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a53      	ldr	r2, [pc, #332]	; (800114c <HAL_DMA_Start_IT+0x22c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d004      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a51      	ldr	r2, [pc, #324]	; (8001150 <HAL_DMA_Start_IT+0x230>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d108      	bne.n	8001020 <HAL_DMA_Start_IT+0x100>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 0201 	bic.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e007      	b.n	8001030 <HAL_DMA_Start_IT+0x110>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f001 fe82 	bl	8002d40 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a34      	ldr	r2, [pc, #208]	; (8001114 <HAL_DMA_Start_IT+0x1f4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d04a      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <HAL_DMA_Start_IT+0x1f8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d045      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a31      	ldr	r2, [pc, #196]	; (800111c <HAL_DMA_Start_IT+0x1fc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d040      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a30      	ldr	r2, [pc, #192]	; (8001120 <HAL_DMA_Start_IT+0x200>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d03b      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <HAL_DMA_Start_IT+0x204>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d036      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <HAL_DMA_Start_IT+0x208>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d031      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a2b      	ldr	r2, [pc, #172]	; (800112c <HAL_DMA_Start_IT+0x20c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d02c      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a2a      	ldr	r2, [pc, #168]	; (8001130 <HAL_DMA_Start_IT+0x210>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d027      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <HAL_DMA_Start_IT+0x214>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d022      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a27      	ldr	r2, [pc, #156]	; (8001138 <HAL_DMA_Start_IT+0x218>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d01d      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a25      	ldr	r2, [pc, #148]	; (800113c <HAL_DMA_Start_IT+0x21c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d018      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a24      	ldr	r2, [pc, #144]	; (8001140 <HAL_DMA_Start_IT+0x220>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <HAL_DMA_Start_IT+0x224>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00e      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_DMA_Start_IT+0x228>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d009      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1f      	ldr	r2, [pc, #124]	; (800114c <HAL_DMA_Start_IT+0x22c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d004      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <HAL_DMA_Start_IT+0x230>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d101      	bne.n	80010e0 <HAL_DMA_Start_IT+0x1c0>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_DMA_Start_IT+0x1c2>
 80010e0:	2300      	movs	r3, #0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d036      	beq.n	8001154 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 021e 	bic.w	r2, r3, #30
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0216 	orr.w	r2, r2, #22
 80010f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d03e      	beq.n	8001180 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0208 	orr.w	r2, r2, #8
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e035      	b.n	8001180 <HAL_DMA_Start_IT+0x260>
 8001114:	40020010 	.word	0x40020010
 8001118:	40020028 	.word	0x40020028
 800111c:	40020040 	.word	0x40020040
 8001120:	40020058 	.word	0x40020058
 8001124:	40020070 	.word	0x40020070
 8001128:	40020088 	.word	0x40020088
 800112c:	400200a0 	.word	0x400200a0
 8001130:	400200b8 	.word	0x400200b8
 8001134:	40020410 	.word	0x40020410
 8001138:	40020428 	.word	0x40020428
 800113c:	40020440 	.word	0x40020440
 8001140:	40020458 	.word	0x40020458
 8001144:	40020470 	.word	0x40020470
 8001148:	40020488 	.word	0x40020488
 800114c:	400204a0 	.word	0x400204a0
 8001150:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 020e 	bic.w	r2, r3, #14
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 020a 	orr.w	r2, r2, #10
 8001166:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0204 	orr.w	r2, r2, #4
 800117e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a83      	ldr	r2, [pc, #524]	; (8001394 <HAL_DMA_Start_IT+0x474>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d072      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a82      	ldr	r2, [pc, #520]	; (8001398 <HAL_DMA_Start_IT+0x478>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d06d      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a80      	ldr	r2, [pc, #512]	; (800139c <HAL_DMA_Start_IT+0x47c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d068      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a7f      	ldr	r2, [pc, #508]	; (80013a0 <HAL_DMA_Start_IT+0x480>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d063      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a7d      	ldr	r2, [pc, #500]	; (80013a4 <HAL_DMA_Start_IT+0x484>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d05e      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a7c      	ldr	r2, [pc, #496]	; (80013a8 <HAL_DMA_Start_IT+0x488>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d059      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a7a      	ldr	r2, [pc, #488]	; (80013ac <HAL_DMA_Start_IT+0x48c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d054      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a79      	ldr	r2, [pc, #484]	; (80013b0 <HAL_DMA_Start_IT+0x490>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d04f      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a77      	ldr	r2, [pc, #476]	; (80013b4 <HAL_DMA_Start_IT+0x494>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d04a      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a76      	ldr	r2, [pc, #472]	; (80013b8 <HAL_DMA_Start_IT+0x498>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d045      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a74      	ldr	r2, [pc, #464]	; (80013bc <HAL_DMA_Start_IT+0x49c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d040      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a73      	ldr	r2, [pc, #460]	; (80013c0 <HAL_DMA_Start_IT+0x4a0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d03b      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a71      	ldr	r2, [pc, #452]	; (80013c4 <HAL_DMA_Start_IT+0x4a4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d036      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a70      	ldr	r2, [pc, #448]	; (80013c8 <HAL_DMA_Start_IT+0x4a8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d031      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_DMA_Start_IT+0x4ac>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d02c      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6d      	ldr	r2, [pc, #436]	; (80013d0 <HAL_DMA_Start_IT+0x4b0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d027      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6b      	ldr	r2, [pc, #428]	; (80013d4 <HAL_DMA_Start_IT+0x4b4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d022      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6a      	ldr	r2, [pc, #424]	; (80013d8 <HAL_DMA_Start_IT+0x4b8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d01d      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a68      	ldr	r2, [pc, #416]	; (80013dc <HAL_DMA_Start_IT+0x4bc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d018      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a67      	ldr	r2, [pc, #412]	; (80013e0 <HAL_DMA_Start_IT+0x4c0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d013      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a65      	ldr	r2, [pc, #404]	; (80013e4 <HAL_DMA_Start_IT+0x4c4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00e      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a64      	ldr	r2, [pc, #400]	; (80013e8 <HAL_DMA_Start_IT+0x4c8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d009      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a62      	ldr	r2, [pc, #392]	; (80013ec <HAL_DMA_Start_IT+0x4cc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d004      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a61      	ldr	r2, [pc, #388]	; (80013f0 <HAL_DMA_Start_IT+0x4d0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_DMA_Start_IT+0x354>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <HAL_DMA_Start_IT+0x356>
 8001274:	2300      	movs	r3, #0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d01a      	beq.n	80012b0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001296:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a37      	ldr	r2, [pc, #220]	; (8001394 <HAL_DMA_Start_IT+0x474>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d04a      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a36      	ldr	r2, [pc, #216]	; (8001398 <HAL_DMA_Start_IT+0x478>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d045      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a34      	ldr	r2, [pc, #208]	; (800139c <HAL_DMA_Start_IT+0x47c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d040      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a33      	ldr	r2, [pc, #204]	; (80013a0 <HAL_DMA_Start_IT+0x480>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d03b      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a31      	ldr	r2, [pc, #196]	; (80013a4 <HAL_DMA_Start_IT+0x484>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d036      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <HAL_DMA_Start_IT+0x488>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d031      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <HAL_DMA_Start_IT+0x48c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d02c      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a2d      	ldr	r2, [pc, #180]	; (80013b0 <HAL_DMA_Start_IT+0x490>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d027      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a2b      	ldr	r2, [pc, #172]	; (80013b4 <HAL_DMA_Start_IT+0x494>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d022      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <HAL_DMA_Start_IT+0x498>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d01d      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_DMA_Start_IT+0x49c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d018      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <HAL_DMA_Start_IT+0x4a0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d013      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <HAL_DMA_Start_IT+0x4a4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00e      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <HAL_DMA_Start_IT+0x4a8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d009      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_DMA_Start_IT+0x4ac>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d004      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_DMA_Start_IT+0x4b0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d108      	bne.n	8001362 <HAL_DMA_Start_IT+0x442>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e012      	b.n	8001388 <HAL_DMA_Start_IT+0x468>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e009      	b.n	8001388 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001388:	7dfb      	ldrb	r3, [r7, #23]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020010 	.word	0x40020010
 8001398:	40020028 	.word	0x40020028
 800139c:	40020040 	.word	0x40020040
 80013a0:	40020058 	.word	0x40020058
 80013a4:	40020070 	.word	0x40020070
 80013a8:	40020088 	.word	0x40020088
 80013ac:	400200a0 	.word	0x400200a0
 80013b0:	400200b8 	.word	0x400200b8
 80013b4:	40020410 	.word	0x40020410
 80013b8:	40020428 	.word	0x40020428
 80013bc:	40020440 	.word	0x40020440
 80013c0:	40020458 	.word	0x40020458
 80013c4:	40020470 	.word	0x40020470
 80013c8:	40020488 	.word	0x40020488
 80013cc:	400204a0 	.word	0x400204a0
 80013d0:	400204b8 	.word	0x400204b8
 80013d4:	58025408 	.word	0x58025408
 80013d8:	5802541c 	.word	0x5802541c
 80013dc:	58025430 	.word	0x58025430
 80013e0:	58025444 	.word	0x58025444
 80013e4:	58025458 	.word	0x58025458
 80013e8:	5802546c 	.word	0x5802546c
 80013ec:	58025480 	.word	0x58025480
 80013f0:	58025494 	.word	0x58025494

080013f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff f93c 	bl	8000678 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e2dc      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d008      	beq.n	800142a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e2cd      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a76      	ldr	r2, [pc, #472]	; (8001608 <HAL_DMA_Abort+0x214>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d04a      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a74      	ldr	r2, [pc, #464]	; (800160c <HAL_DMA_Abort+0x218>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d045      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a73      	ldr	r2, [pc, #460]	; (8001610 <HAL_DMA_Abort+0x21c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d040      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a71      	ldr	r2, [pc, #452]	; (8001614 <HAL_DMA_Abort+0x220>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d03b      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a70      	ldr	r2, [pc, #448]	; (8001618 <HAL_DMA_Abort+0x224>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d036      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a6e      	ldr	r2, [pc, #440]	; (800161c <HAL_DMA_Abort+0x228>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d031      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6d      	ldr	r2, [pc, #436]	; (8001620 <HAL_DMA_Abort+0x22c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d02c      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6b      	ldr	r2, [pc, #428]	; (8001624 <HAL_DMA_Abort+0x230>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d027      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6a      	ldr	r2, [pc, #424]	; (8001628 <HAL_DMA_Abort+0x234>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a68      	ldr	r2, [pc, #416]	; (800162c <HAL_DMA_Abort+0x238>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01d      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a67      	ldr	r2, [pc, #412]	; (8001630 <HAL_DMA_Abort+0x23c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d018      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_DMA_Abort+0x240>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a64      	ldr	r2, [pc, #400]	; (8001638 <HAL_DMA_Abort+0x244>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00e      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a62      	ldr	r2, [pc, #392]	; (800163c <HAL_DMA_Abort+0x248>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d009      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a61      	ldr	r2, [pc, #388]	; (8001640 <HAL_DMA_Abort+0x24c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d004      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a5f      	ldr	r2, [pc, #380]	; (8001644 <HAL_DMA_Abort+0x250>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_DMA_Abort+0xda>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_DMA_Abort+0xdc>
 80014ce:	2300      	movs	r3, #0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 021e 	bic.w	r2, r2, #30
 80014e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e00a      	b.n	8001512 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 020e 	bic.w	r2, r2, #14
 800150a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <HAL_DMA_Abort+0x214>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d072      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a3a      	ldr	r2, [pc, #232]	; (800160c <HAL_DMA_Abort+0x218>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d06d      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a39      	ldr	r2, [pc, #228]	; (8001610 <HAL_DMA_Abort+0x21c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d068      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a37      	ldr	r2, [pc, #220]	; (8001614 <HAL_DMA_Abort+0x220>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d063      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a36      	ldr	r2, [pc, #216]	; (8001618 <HAL_DMA_Abort+0x224>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d05e      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a34      	ldr	r2, [pc, #208]	; (800161c <HAL_DMA_Abort+0x228>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d059      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a33      	ldr	r2, [pc, #204]	; (8001620 <HAL_DMA_Abort+0x22c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d054      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a31      	ldr	r2, [pc, #196]	; (8001624 <HAL_DMA_Abort+0x230>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d04f      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a30      	ldr	r2, [pc, #192]	; (8001628 <HAL_DMA_Abort+0x234>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d04a      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2e      	ldr	r2, [pc, #184]	; (800162c <HAL_DMA_Abort+0x238>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d045      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <HAL_DMA_Abort+0x23c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d040      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <HAL_DMA_Abort+0x240>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d03b      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <HAL_DMA_Abort+0x244>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d036      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a28      	ldr	r2, [pc, #160]	; (800163c <HAL_DMA_Abort+0x248>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d031      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a27      	ldr	r2, [pc, #156]	; (8001640 <HAL_DMA_Abort+0x24c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d02c      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a25      	ldr	r2, [pc, #148]	; (8001644 <HAL_DMA_Abort+0x250>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d027      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_DMA_Abort+0x254>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d022      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a22      	ldr	r2, [pc, #136]	; (800164c <HAL_DMA_Abort+0x258>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01d      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <HAL_DMA_Abort+0x25c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d018      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_DMA_Abort+0x260>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_DMA_Abort+0x264>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00e      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_DMA_Abort+0x268>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d009      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_DMA_Abort+0x26c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_DMA_Abort+0x270>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d132      	bne.n	8001668 <HAL_DMA_Abort+0x274>
 8001602:	2301      	movs	r3, #1
 8001604:	e031      	b.n	800166a <HAL_DMA_Abort+0x276>
 8001606:	bf00      	nop
 8001608:	40020010 	.word	0x40020010
 800160c:	40020028 	.word	0x40020028
 8001610:	40020040 	.word	0x40020040
 8001614:	40020058 	.word	0x40020058
 8001618:	40020070 	.word	0x40020070
 800161c:	40020088 	.word	0x40020088
 8001620:	400200a0 	.word	0x400200a0
 8001624:	400200b8 	.word	0x400200b8
 8001628:	40020410 	.word	0x40020410
 800162c:	40020428 	.word	0x40020428
 8001630:	40020440 	.word	0x40020440
 8001634:	40020458 	.word	0x40020458
 8001638:	40020470 	.word	0x40020470
 800163c:	40020488 	.word	0x40020488
 8001640:	400204a0 	.word	0x400204a0
 8001644:	400204b8 	.word	0x400204b8
 8001648:	58025408 	.word	0x58025408
 800164c:	5802541c 	.word	0x5802541c
 8001650:	58025430 	.word	0x58025430
 8001654:	58025444 	.word	0x58025444
 8001658:	58025458 	.word	0x58025458
 800165c:	5802546c 	.word	0x5802546c
 8001660:	58025480 	.word	0x58025480
 8001664:	58025494 	.word	0x58025494
 8001668:	2300      	movs	r3, #0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800167c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6d      	ldr	r2, [pc, #436]	; (8001838 <HAL_DMA_Abort+0x444>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d04a      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a6b      	ldr	r2, [pc, #428]	; (800183c <HAL_DMA_Abort+0x448>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d045      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6a      	ldr	r2, [pc, #424]	; (8001840 <HAL_DMA_Abort+0x44c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d040      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a68      	ldr	r2, [pc, #416]	; (8001844 <HAL_DMA_Abort+0x450>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d03b      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a67      	ldr	r2, [pc, #412]	; (8001848 <HAL_DMA_Abort+0x454>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d036      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a65      	ldr	r2, [pc, #404]	; (800184c <HAL_DMA_Abort+0x458>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d031      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a64      	ldr	r2, [pc, #400]	; (8001850 <HAL_DMA_Abort+0x45c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d02c      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a62      	ldr	r2, [pc, #392]	; (8001854 <HAL_DMA_Abort+0x460>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d027      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a61      	ldr	r2, [pc, #388]	; (8001858 <HAL_DMA_Abort+0x464>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d022      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a5f      	ldr	r2, [pc, #380]	; (800185c <HAL_DMA_Abort+0x468>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01d      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5e      	ldr	r2, [pc, #376]	; (8001860 <HAL_DMA_Abort+0x46c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d018      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5c      	ldr	r2, [pc, #368]	; (8001864 <HAL_DMA_Abort+0x470>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5b      	ldr	r2, [pc, #364]	; (8001868 <HAL_DMA_Abort+0x474>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d00e      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a59      	ldr	r2, [pc, #356]	; (800186c <HAL_DMA_Abort+0x478>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d009      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_DMA_Abort+0x47c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d004      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a56      	ldr	r2, [pc, #344]	; (8001874 <HAL_DMA_Abort+0x480>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d108      	bne.n	8001730 <HAL_DMA_Abort+0x33c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e007      	b.n	8001740 <HAL_DMA_Abort+0x34c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001740:	e013      	b.n	800176a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001742:	f7fe ff99 	bl	8000678 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b05      	cmp	r3, #5
 800174e:	d90c      	bls.n	800176a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2220      	movs	r2, #32
 8001754:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e12d      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1e5      	bne.n	8001742 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <HAL_DMA_Abort+0x444>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d04a      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a2d      	ldr	r2, [pc, #180]	; (800183c <HAL_DMA_Abort+0x448>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d045      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <HAL_DMA_Abort+0x44c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d040      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2a      	ldr	r2, [pc, #168]	; (8001844 <HAL_DMA_Abort+0x450>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d03b      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_DMA_Abort+0x454>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d036      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <HAL_DMA_Abort+0x458>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d031      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a26      	ldr	r2, [pc, #152]	; (8001850 <HAL_DMA_Abort+0x45c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d02c      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a24      	ldr	r2, [pc, #144]	; (8001854 <HAL_DMA_Abort+0x460>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d027      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_DMA_Abort+0x464>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d022      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a21      	ldr	r2, [pc, #132]	; (800185c <HAL_DMA_Abort+0x468>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01d      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a20      	ldr	r2, [pc, #128]	; (8001860 <HAL_DMA_Abort+0x46c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d018      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_DMA_Abort+0x470>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_DMA_Abort+0x474>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00e      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_DMA_Abort+0x478>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d009      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_DMA_Abort+0x47c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d004      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <HAL_DMA_Abort+0x480>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_DMA_Abort+0x426>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_DMA_Abort+0x428>
 800181a:	2300      	movs	r3, #0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02b      	beq.n	8001878 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	223f      	movs	r2, #63	; 0x3f
 8001830:	409a      	lsls	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	e02a      	b.n	800188e <HAL_DMA_Abort+0x49a>
 8001838:	40020010 	.word	0x40020010
 800183c:	40020028 	.word	0x40020028
 8001840:	40020040 	.word	0x40020040
 8001844:	40020058 	.word	0x40020058
 8001848:	40020070 	.word	0x40020070
 800184c:	40020088 	.word	0x40020088
 8001850:	400200a0 	.word	0x400200a0
 8001854:	400200b8 	.word	0x400200b8
 8001858:	40020410 	.word	0x40020410
 800185c:	40020428 	.word	0x40020428
 8001860:	40020440 	.word	0x40020440
 8001864:	40020458 	.word	0x40020458
 8001868:	40020470 	.word	0x40020470
 800186c:	40020488 	.word	0x40020488
 8001870:	400204a0 	.word	0x400204a0
 8001874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	2201      	movs	r2, #1
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_DMA_Abort+0x5dc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d072      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4d      	ldr	r2, [pc, #308]	; (80019d4 <HAL_DMA_Abort+0x5e0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d06d      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_DMA_Abort+0x5e4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d068      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a4a      	ldr	r2, [pc, #296]	; (80019dc <HAL_DMA_Abort+0x5e8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d063      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a49      	ldr	r2, [pc, #292]	; (80019e0 <HAL_DMA_Abort+0x5ec>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d05e      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_DMA_Abort+0x5f0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d059      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_DMA_Abort+0x5f4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d054      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a44      	ldr	r2, [pc, #272]	; (80019ec <HAL_DMA_Abort+0x5f8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d04f      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a43      	ldr	r2, [pc, #268]	; (80019f0 <HAL_DMA_Abort+0x5fc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04a      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a41      	ldr	r2, [pc, #260]	; (80019f4 <HAL_DMA_Abort+0x600>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d045      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a40      	ldr	r2, [pc, #256]	; (80019f8 <HAL_DMA_Abort+0x604>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d040      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <HAL_DMA_Abort+0x608>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d03b      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <HAL_DMA_Abort+0x60c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d036      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3b      	ldr	r2, [pc, #236]	; (8001a04 <HAL_DMA_Abort+0x610>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d031      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <HAL_DMA_Abort+0x614>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d02c      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_DMA_Abort+0x618>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d027      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a37      	ldr	r2, [pc, #220]	; (8001a10 <HAL_DMA_Abort+0x61c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d022      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a35      	ldr	r2, [pc, #212]	; (8001a14 <HAL_DMA_Abort+0x620>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01d      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <HAL_DMA_Abort+0x624>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d018      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a32      	ldr	r2, [pc, #200]	; (8001a1c <HAL_DMA_Abort+0x628>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <HAL_DMA_Abort+0x62c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00e      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_DMA_Abort+0x630>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d009      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <HAL_DMA_Abort+0x634>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d004      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <HAL_DMA_Abort+0x638>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_DMA_Abort+0x58e>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_DMA_Abort+0x590>
 8001982:	2300      	movs	r3, #0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d015      	beq.n	80019b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001990:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40020010 	.word	0x40020010
 80019d4:	40020028 	.word	0x40020028
 80019d8:	40020040 	.word	0x40020040
 80019dc:	40020058 	.word	0x40020058
 80019e0:	40020070 	.word	0x40020070
 80019e4:	40020088 	.word	0x40020088
 80019e8:	400200a0 	.word	0x400200a0
 80019ec:	400200b8 	.word	0x400200b8
 80019f0:	40020410 	.word	0x40020410
 80019f4:	40020428 	.word	0x40020428
 80019f8:	40020440 	.word	0x40020440
 80019fc:	40020458 	.word	0x40020458
 8001a00:	40020470 	.word	0x40020470
 8001a04:	40020488 	.word	0x40020488
 8001a08:	400204a0 	.word	0x400204a0
 8001a0c:	400204b8 	.word	0x400204b8
 8001a10:	58025408 	.word	0x58025408
 8001a14:	5802541c 	.word	0x5802541c
 8001a18:	58025430 	.word	0x58025430
 8001a1c:	58025444 	.word	0x58025444
 8001a20:	58025458 	.word	0x58025458
 8001a24:	5802546c 	.word	0x5802546c
 8001a28:	58025480 	.word	0x58025480
 8001a2c:	58025494 	.word	0x58025494

08001a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e205      	b.n	8001e4e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d004      	beq.n	8001a58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e1fa      	b.n	8001e4e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a8c      	ldr	r2, [pc, #560]	; (8001c90 <HAL_DMA_Abort_IT+0x260>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d04a      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a8b      	ldr	r2, [pc, #556]	; (8001c94 <HAL_DMA_Abort_IT+0x264>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d045      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a89      	ldr	r2, [pc, #548]	; (8001c98 <HAL_DMA_Abort_IT+0x268>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d040      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a88      	ldr	r2, [pc, #544]	; (8001c9c <HAL_DMA_Abort_IT+0x26c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d03b      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a86      	ldr	r2, [pc, #536]	; (8001ca0 <HAL_DMA_Abort_IT+0x270>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d036      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a85      	ldr	r2, [pc, #532]	; (8001ca4 <HAL_DMA_Abort_IT+0x274>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d031      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a83      	ldr	r2, [pc, #524]	; (8001ca8 <HAL_DMA_Abort_IT+0x278>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d02c      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a82      	ldr	r2, [pc, #520]	; (8001cac <HAL_DMA_Abort_IT+0x27c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d027      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a80      	ldr	r2, [pc, #512]	; (8001cb0 <HAL_DMA_Abort_IT+0x280>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d022      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a7f      	ldr	r2, [pc, #508]	; (8001cb4 <HAL_DMA_Abort_IT+0x284>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d01d      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a7d      	ldr	r2, [pc, #500]	; (8001cb8 <HAL_DMA_Abort_IT+0x288>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d018      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7c      	ldr	r2, [pc, #496]	; (8001cbc <HAL_DMA_Abort_IT+0x28c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d013      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a7a      	ldr	r2, [pc, #488]	; (8001cc0 <HAL_DMA_Abort_IT+0x290>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00e      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a79      	ldr	r2, [pc, #484]	; (8001cc4 <HAL_DMA_Abort_IT+0x294>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d009      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a77      	ldr	r2, [pc, #476]	; (8001cc8 <HAL_DMA_Abort_IT+0x298>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d004      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a76      	ldr	r2, [pc, #472]	; (8001ccc <HAL_DMA_Abort_IT+0x29c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_DMA_Abort_IT+0xcc>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_DMA_Abort_IT+0xce>
 8001afc:	2300      	movs	r3, #0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d065      	beq.n	8001bce <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2204      	movs	r2, #4
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a60      	ldr	r2, [pc, #384]	; (8001c90 <HAL_DMA_Abort_IT+0x260>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d04a      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a5e      	ldr	r2, [pc, #376]	; (8001c94 <HAL_DMA_Abort_IT+0x264>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d045      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_DMA_Abort_IT+0x268>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d040      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <HAL_DMA_Abort_IT+0x26c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d03b      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a5a      	ldr	r2, [pc, #360]	; (8001ca0 <HAL_DMA_Abort_IT+0x270>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d036      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_DMA_Abort_IT+0x274>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d031      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_DMA_Abort_IT+0x278>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d02c      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a55      	ldr	r2, [pc, #340]	; (8001cac <HAL_DMA_Abort_IT+0x27c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d027      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a54      	ldr	r2, [pc, #336]	; (8001cb0 <HAL_DMA_Abort_IT+0x280>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d022      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_DMA_Abort_IT+0x284>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01d      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a51      	ldr	r2, [pc, #324]	; (8001cb8 <HAL_DMA_Abort_IT+0x288>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d018      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_DMA_Abort_IT+0x28c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <HAL_DMA_Abort_IT+0x290>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00e      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a4c      	ldr	r2, [pc, #304]	; (8001cc4 <HAL_DMA_Abort_IT+0x294>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d009      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a4b      	ldr	r2, [pc, #300]	; (8001cc8 <HAL_DMA_Abort_IT+0x298>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d004      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_DMA_Abort_IT+0x29c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d108      	bne.n	8001bbc <HAL_DMA_Abort_IT+0x18c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	e147      	b.n	8001e4c <HAL_DMA_Abort_IT+0x41c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e13e      	b.n	8001e4c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 020e 	bic.w	r2, r2, #14
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <HAL_DMA_Abort_IT+0x260>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d04a      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a29      	ldr	r2, [pc, #164]	; (8001c94 <HAL_DMA_Abort_IT+0x264>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d045      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a28      	ldr	r2, [pc, #160]	; (8001c98 <HAL_DMA_Abort_IT+0x268>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d040      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a26      	ldr	r2, [pc, #152]	; (8001c9c <HAL_DMA_Abort_IT+0x26c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d03b      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <HAL_DMA_Abort_IT+0x270>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d036      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_DMA_Abort_IT+0x274>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d031      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <HAL_DMA_Abort_IT+0x278>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d02c      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <HAL_DMA_Abort_IT+0x27c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d027      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_DMA_Abort_IT+0x280>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d022      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_DMA_Abort_IT+0x284>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01d      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_DMA_Abort_IT+0x288>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d018      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_DMA_Abort_IT+0x28c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_DMA_Abort_IT+0x290>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00e      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_DMA_Abort_IT+0x294>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_DMA_Abort_IT+0x298>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d004      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_DMA_Abort_IT+0x29c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d128      	bne.n	8001cd0 <HAL_DMA_Abort_IT+0x2a0>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e027      	b.n	8001ce0 <HAL_DMA_Abort_IT+0x2b0>
 8001c90:	40020010 	.word	0x40020010
 8001c94:	40020028 	.word	0x40020028
 8001c98:	40020040 	.word	0x40020040
 8001c9c:	40020058 	.word	0x40020058
 8001ca0:	40020070 	.word	0x40020070
 8001ca4:	40020088 	.word	0x40020088
 8001ca8:	400200a0 	.word	0x400200a0
 8001cac:	400200b8 	.word	0x400200b8
 8001cb0:	40020410 	.word	0x40020410
 8001cb4:	40020428 	.word	0x40020428
 8001cb8:	40020440 	.word	0x40020440
 8001cbc:	40020458 	.word	0x40020458
 8001cc0:	40020470 	.word	0x40020470
 8001cc4:	40020488 	.word	0x40020488
 8001cc8:	400204a0 	.word	0x400204a0
 8001ccc:	400204b8 	.word	0x400204b8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_DMA_Abort_IT+0x428>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d072      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <HAL_DMA_Abort_IT+0x42c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d06d      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <HAL_DMA_Abort_IT+0x430>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d068      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_DMA_Abort_IT+0x434>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d063      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_DMA_Abort_IT+0x438>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d05e      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a55      	ldr	r2, [pc, #340]	; (8001e6c <HAL_DMA_Abort_IT+0x43c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d059      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_DMA_Abort_IT+0x440>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d054      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_DMA_Abort_IT+0x444>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d04f      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <HAL_DMA_Abort_IT+0x448>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d04a      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_DMA_Abort_IT+0x44c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d045      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_DMA_Abort_IT+0x450>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d040      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <HAL_DMA_Abort_IT+0x454>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d03b      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a4a      	ldr	r2, [pc, #296]	; (8001e88 <HAL_DMA_Abort_IT+0x458>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d036      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a49      	ldr	r2, [pc, #292]	; (8001e8c <HAL_DMA_Abort_IT+0x45c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d031      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_DMA_Abort_IT+0x460>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02c      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a46      	ldr	r2, [pc, #280]	; (8001e94 <HAL_DMA_Abort_IT+0x464>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d027      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a44      	ldr	r2, [pc, #272]	; (8001e98 <HAL_DMA_Abort_IT+0x468>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d022      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <HAL_DMA_Abort_IT+0x46c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d01d      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a41      	ldr	r2, [pc, #260]	; (8001ea0 <HAL_DMA_Abort_IT+0x470>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d018      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a40      	ldr	r2, [pc, #256]	; (8001ea4 <HAL_DMA_Abort_IT+0x474>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <HAL_DMA_Abort_IT+0x478>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00e      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a3d      	ldr	r2, [pc, #244]	; (8001eac <HAL_DMA_Abort_IT+0x47c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_DMA_Abort_IT+0x480>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <HAL_DMA_Abort_IT+0x484>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_DMA_Abort_IT+0x3a4>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_DMA_Abort_IT+0x3a6>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d028      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2201      	movs	r2, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e08:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00c      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e20:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e2a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40020010 	.word	0x40020010
 8001e5c:	40020028 	.word	0x40020028
 8001e60:	40020040 	.word	0x40020040
 8001e64:	40020058 	.word	0x40020058
 8001e68:	40020070 	.word	0x40020070
 8001e6c:	40020088 	.word	0x40020088
 8001e70:	400200a0 	.word	0x400200a0
 8001e74:	400200b8 	.word	0x400200b8
 8001e78:	40020410 	.word	0x40020410
 8001e7c:	40020428 	.word	0x40020428
 8001e80:	40020440 	.word	0x40020440
 8001e84:	40020458 	.word	0x40020458
 8001e88:	40020470 	.word	0x40020470
 8001e8c:	40020488 	.word	0x40020488
 8001e90:	400204a0 	.word	0x400204a0
 8001e94:	400204b8 	.word	0x400204b8
 8001e98:	58025408 	.word	0x58025408
 8001e9c:	5802541c 	.word	0x5802541c
 8001ea0:	58025430 	.word	0x58025430
 8001ea4:	58025444 	.word	0x58025444
 8001ea8:	58025458 	.word	0x58025458
 8001eac:	5802546c 	.word	0x5802546c
 8001eb0:	58025480 	.word	0x58025480
 8001eb4:	58025494 	.word	0x58025494

08001eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec4:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_DMA_IRQHandler+0x1ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	; (8002068 <HAL_DMA_IRQHandler+0x1b0>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0a9b      	lsrs	r3, r3, #10
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5f      	ldr	r2, [pc, #380]	; (800206c <HAL_DMA_IRQHandler+0x1b4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d04a      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <HAL_DMA_IRQHandler+0x1b8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d045      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5c      	ldr	r2, [pc, #368]	; (8002074 <HAL_DMA_IRQHandler+0x1bc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d040      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a5a      	ldr	r2, [pc, #360]	; (8002078 <HAL_DMA_IRQHandler+0x1c0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d03b      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a59      	ldr	r2, [pc, #356]	; (800207c <HAL_DMA_IRQHandler+0x1c4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d036      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a57      	ldr	r2, [pc, #348]	; (8002080 <HAL_DMA_IRQHandler+0x1c8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d031      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_DMA_IRQHandler+0x1cc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d02c      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a54      	ldr	r2, [pc, #336]	; (8002088 <HAL_DMA_IRQHandler+0x1d0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d027      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a53      	ldr	r2, [pc, #332]	; (800208c <HAL_DMA_IRQHandler+0x1d4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d022      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_DMA_IRQHandler+0x1d8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01d      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_DMA_IRQHandler+0x1dc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d018      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a4e      	ldr	r2, [pc, #312]	; (8002098 <HAL_DMA_IRQHandler+0x1e0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a4d      	ldr	r2, [pc, #308]	; (800209c <HAL_DMA_IRQHandler+0x1e4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00e      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4b      	ldr	r2, [pc, #300]	; (80020a0 <HAL_DMA_IRQHandler+0x1e8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_DMA_IRQHandler+0x1ec>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a48      	ldr	r2, [pc, #288]	; (80020a8 <HAL_DMA_IRQHandler+0x1f0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_IRQHandler+0xd6>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_DMA_IRQHandler+0xd8>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 842b 	beq.w	80027ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80a2 	beq.w	80020f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2e      	ldr	r2, [pc, #184]	; (800206c <HAL_DMA_IRQHandler+0x1b4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d04a      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2d      	ldr	r2, [pc, #180]	; (8002070 <HAL_DMA_IRQHandler+0x1b8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d045      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	; (8002074 <HAL_DMA_IRQHandler+0x1bc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d040      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <HAL_DMA_IRQHandler+0x1c0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d03b      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_DMA_IRQHandler+0x1c4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d036      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_DMA_IRQHandler+0x1c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d031      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a25      	ldr	r2, [pc, #148]	; (8002084 <HAL_DMA_IRQHandler+0x1cc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02c      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a24      	ldr	r2, [pc, #144]	; (8002088 <HAL_DMA_IRQHandler+0x1d0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d027      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_DMA_IRQHandler+0x1d4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d022      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_DMA_IRQHandler+0x1d8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d01d      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_DMA_IRQHandler+0x1dc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d018      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_DMA_IRQHandler+0x1e0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_DMA_IRQHandler+0x1e4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00e      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_DMA_IRQHandler+0x1e8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_DMA_IRQHandler+0x1ec>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d004      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_DMA_IRQHandler+0x1f0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d12f      	bne.n	80020ac <HAL_DMA_IRQHandler+0x1f4>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e02e      	b.n	80020c0 <HAL_DMA_IRQHandler+0x208>
 8002062:	bf00      	nop
 8002064:	2400000c 	.word	0x2400000c
 8002068:	1b4e81b5 	.word	0x1b4e81b5
 800206c:	40020010 	.word	0x40020010
 8002070:	40020028 	.word	0x40020028
 8002074:	40020040 	.word	0x40020040
 8002078:	40020058 	.word	0x40020058
 800207c:	40020070 	.word	0x40020070
 8002080:	40020088 	.word	0x40020088
 8002084:	400200a0 	.word	0x400200a0
 8002088:	400200b8 	.word	0x400200b8
 800208c:	40020410 	.word	0x40020410
 8002090:	40020428 	.word	0x40020428
 8002094:	40020440 	.word	0x40020440
 8002098:	40020458 	.word	0x40020458
 800209c:	40020470 	.word	0x40020470
 80020a0:	40020488 	.word	0x40020488
 80020a4:	400204a0 	.word	0x400204a0
 80020a8:	400204b8 	.word	0x400204b8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2208      	movs	r2, #8
 80020de:	409a      	lsls	r2, r3
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d06e      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a69      	ldr	r2, [pc, #420]	; (80022b0 <HAL_DMA_IRQHandler+0x3f8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d04a      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a67      	ldr	r2, [pc, #412]	; (80022b4 <HAL_DMA_IRQHandler+0x3fc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d045      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_DMA_IRQHandler+0x400>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d040      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a64      	ldr	r2, [pc, #400]	; (80022bc <HAL_DMA_IRQHandler+0x404>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d03b      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_DMA_IRQHandler+0x408>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d036      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a61      	ldr	r2, [pc, #388]	; (80022c4 <HAL_DMA_IRQHandler+0x40c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d031      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a60      	ldr	r2, [pc, #384]	; (80022c8 <HAL_DMA_IRQHandler+0x410>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d02c      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a5e      	ldr	r2, [pc, #376]	; (80022cc <HAL_DMA_IRQHandler+0x414>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d027      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5d      	ldr	r2, [pc, #372]	; (80022d0 <HAL_DMA_IRQHandler+0x418>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <HAL_DMA_IRQHandler+0x41c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01d      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <HAL_DMA_IRQHandler+0x420>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d018      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_DMA_IRQHandler+0x424>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_DMA_IRQHandler+0x428>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_DMA_IRQHandler+0x42c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a54      	ldr	r2, [pc, #336]	; (80022e8 <HAL_DMA_IRQHandler+0x430>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d004      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a52      	ldr	r2, [pc, #328]	; (80022ec <HAL_DMA_IRQHandler+0x434>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10a      	bne.n	80021bc <HAL_DMA_IRQHandler+0x304>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e003      	b.n	80021c4 <HAL_DMA_IRQHandler+0x30c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2201      	movs	r2, #1
 80021d2:	409a      	lsls	r2, r3
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0202 	orr.w	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2204      	movs	r2, #4
 80021ee:	409a      	lsls	r2, r3
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 808f 	beq.w	8002318 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <HAL_DMA_IRQHandler+0x3f8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04a      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <HAL_DMA_IRQHandler+0x3fc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d045      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a29      	ldr	r2, [pc, #164]	; (80022b8 <HAL_DMA_IRQHandler+0x400>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d040      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_DMA_IRQHandler+0x404>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d03b      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <HAL_DMA_IRQHandler+0x408>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d036      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_DMA_IRQHandler+0x40c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <HAL_DMA_IRQHandler+0x410>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d02c      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_DMA_IRQHandler+0x414>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d027      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <HAL_DMA_IRQHandler+0x418>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_DMA_IRQHandler+0x41c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_DMA_IRQHandler+0x420>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d018      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_DMA_IRQHandler+0x424>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_DMA_IRQHandler+0x428>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_DMA_IRQHandler+0x42c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_DMA_IRQHandler+0x430>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a15      	ldr	r2, [pc, #84]	; (80022ec <HAL_DMA_IRQHandler+0x434>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12a      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x438>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e023      	b.n	80022f8 <HAL_DMA_IRQHandler+0x440>
 80022b0:	40020010 	.word	0x40020010
 80022b4:	40020028 	.word	0x40020028
 80022b8:	40020040 	.word	0x40020040
 80022bc:	40020058 	.word	0x40020058
 80022c0:	40020070 	.word	0x40020070
 80022c4:	40020088 	.word	0x40020088
 80022c8:	400200a0 	.word	0x400200a0
 80022cc:	400200b8 	.word	0x400200b8
 80022d0:	40020410 	.word	0x40020410
 80022d4:	40020428 	.word	0x40020428
 80022d8:	40020440 	.word	0x40020440
 80022dc:	40020458 	.word	0x40020458
 80022e0:	40020470 	.word	0x40020470
 80022e4:	40020488 	.word	0x40020488
 80022e8:	400204a0 	.word	0x400204a0
 80022ec:	400204b8 	.word	0x400204b8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2204      	movs	r2, #4
 8002306:	409a      	lsls	r2, r3
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f043 0204 	orr.w	r2, r3, #4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	2210      	movs	r2, #16
 8002322:	409a      	lsls	r2, r3
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a6 	beq.w	800247a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a85      	ldr	r2, [pc, #532]	; (8002548 <HAL_DMA_IRQHandler+0x690>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04a      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a83      	ldr	r2, [pc, #524]	; (800254c <HAL_DMA_IRQHandler+0x694>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d045      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a82      	ldr	r2, [pc, #520]	; (8002550 <HAL_DMA_IRQHandler+0x698>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d040      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a80      	ldr	r2, [pc, #512]	; (8002554 <HAL_DMA_IRQHandler+0x69c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d03b      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7f      	ldr	r2, [pc, #508]	; (8002558 <HAL_DMA_IRQHandler+0x6a0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d036      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7d      	ldr	r2, [pc, #500]	; (800255c <HAL_DMA_IRQHandler+0x6a4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d031      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7c      	ldr	r2, [pc, #496]	; (8002560 <HAL_DMA_IRQHandler+0x6a8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d02c      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a7a      	ldr	r2, [pc, #488]	; (8002564 <HAL_DMA_IRQHandler+0x6ac>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d027      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a79      	ldr	r2, [pc, #484]	; (8002568 <HAL_DMA_IRQHandler+0x6b0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a77      	ldr	r2, [pc, #476]	; (800256c <HAL_DMA_IRQHandler+0x6b4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01d      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a76      	ldr	r2, [pc, #472]	; (8002570 <HAL_DMA_IRQHandler+0x6b8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d018      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a74      	ldr	r2, [pc, #464]	; (8002574 <HAL_DMA_IRQHandler+0x6bc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a73      	ldr	r2, [pc, #460]	; (8002578 <HAL_DMA_IRQHandler+0x6c0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_DMA_IRQHandler+0x6c4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a70      	ldr	r2, [pc, #448]	; (8002580 <HAL_DMA_IRQHandler+0x6c8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_DMA_IRQHandler+0x6cc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10a      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x52c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e009      	b.n	80023f8 <HAL_DMA_IRQHandler+0x540>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03e      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2210      	movs	r2, #16
 8002406:	409a      	lsls	r2, r3
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d108      	bne.n	800243a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d024      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e01f      	b.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01b      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
 800244a:	e016      	b.n	800247a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0208 	bic.w	r2, r2, #8
 8002468:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2220      	movs	r2, #32
 8002484:	409a      	lsls	r2, r3
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8110 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2c      	ldr	r2, [pc, #176]	; (8002548 <HAL_DMA_IRQHandler+0x690>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d04a      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_DMA_IRQHandler+0x694>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d045      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a29      	ldr	r2, [pc, #164]	; (8002550 <HAL_DMA_IRQHandler+0x698>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d040      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a28      	ldr	r2, [pc, #160]	; (8002554 <HAL_DMA_IRQHandler+0x69c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d03b      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <HAL_DMA_IRQHandler+0x6a0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d036      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a25      	ldr	r2, [pc, #148]	; (800255c <HAL_DMA_IRQHandler+0x6a4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d031      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a23      	ldr	r2, [pc, #140]	; (8002560 <HAL_DMA_IRQHandler+0x6a8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02c      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a22      	ldr	r2, [pc, #136]	; (8002564 <HAL_DMA_IRQHandler+0x6ac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d027      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_DMA_IRQHandler+0x6b0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d022      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_DMA_IRQHandler+0x6b4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d01d      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_DMA_IRQHandler+0x6b8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d018      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_DMA_IRQHandler+0x6bc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <HAL_DMA_IRQHandler+0x6c0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_DMA_IRQHandler+0x6c4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_DMA_IRQHandler+0x6c8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a16      	ldr	r2, [pc, #88]	; (8002584 <HAL_DMA_IRQHandler+0x6cc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d12b      	bne.n	8002588 <HAL_DMA_IRQHandler+0x6d0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf14      	ite	ne
 800253e:	2301      	movne	r3, #1
 8002540:	2300      	moveq	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	e02a      	b.n	800259c <HAL_DMA_IRQHandler+0x6e4>
 8002546:	bf00      	nop
 8002548:	40020010 	.word	0x40020010
 800254c:	40020028 	.word	0x40020028
 8002550:	40020040 	.word	0x40020040
 8002554:	40020058 	.word	0x40020058
 8002558:	40020070 	.word	0x40020070
 800255c:	40020088 	.word	0x40020088
 8002560:	400200a0 	.word	0x400200a0
 8002564:	400200b8 	.word	0x400200b8
 8002568:	40020410 	.word	0x40020410
 800256c:	40020428 	.word	0x40020428
 8002570:	40020440 	.word	0x40020440
 8002574:	40020458 	.word	0x40020458
 8002578:	40020470 	.word	0x40020470
 800257c:	40020488 	.word	0x40020488
 8002580:	400204a0 	.word	0x400204a0
 8002584:	400204b8 	.word	0x400204b8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8087 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2220      	movs	r2, #32
 80025ac:	409a      	lsls	r2, r3
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d139      	bne.n	8002632 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0216 	bic.w	r2, r2, #22
 80025cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_DMA_IRQHandler+0x736>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0208 	bic.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	223f      	movs	r2, #63	; 0x3f
 8002608:	409a      	lsls	r2, r3
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 834a 	beq.w	8002cbc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
          }
          return;
 8002630:	e344      	b.n	8002cbc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d018      	beq.n	8002672 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02c      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
 800265e:	e027      	b.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d023      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
 8002670:	e01e      	b.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10f      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0210 	bic.w	r2, r2, #16
 800268e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8306 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8088 	beq.w	80027d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7a      	ldr	r2, [pc, #488]	; (80028c0 <HAL_DMA_IRQHandler+0xa08>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d04a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a79      	ldr	r2, [pc, #484]	; (80028c4 <HAL_DMA_IRQHandler+0xa0c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d045      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_DMA_IRQHandler+0xa10>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d040      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a76      	ldr	r2, [pc, #472]	; (80028cc <HAL_DMA_IRQHandler+0xa14>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d03b      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a74      	ldr	r2, [pc, #464]	; (80028d0 <HAL_DMA_IRQHandler+0xa18>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d036      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a73      	ldr	r2, [pc, #460]	; (80028d4 <HAL_DMA_IRQHandler+0xa1c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d031      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a71      	ldr	r2, [pc, #452]	; (80028d8 <HAL_DMA_IRQHandler+0xa20>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02c      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_DMA_IRQHandler+0xa24>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d027      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6e      	ldr	r2, [pc, #440]	; (80028e0 <HAL_DMA_IRQHandler+0xa28>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d022      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6d      	ldr	r2, [pc, #436]	; (80028e4 <HAL_DMA_IRQHandler+0xa2c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d01d      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6b      	ldr	r2, [pc, #428]	; (80028e8 <HAL_DMA_IRQHandler+0xa30>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d018      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6a      	ldr	r2, [pc, #424]	; (80028ec <HAL_DMA_IRQHandler+0xa34>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <HAL_DMA_IRQHandler+0xa38>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00e      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a67      	ldr	r2, [pc, #412]	; (80028f4 <HAL_DMA_IRQHandler+0xa3c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a65      	ldr	r2, [pc, #404]	; (80028f8 <HAL_DMA_IRQHandler+0xa40>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a64      	ldr	r2, [pc, #400]	; (80028fc <HAL_DMA_IRQHandler+0xa44>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <HAL_DMA_IRQHandler+0x8ca>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e007      	b.n	8002792 <HAL_DMA_IRQHandler+0x8da>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	429a      	cmp	r2, r3
 800279c:	d307      	bcc.n	80027ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f2      	bne.n	8002792 <HAL_DMA_IRQHandler+0x8da>
 80027ac:	e000      	b.n	80027b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80027ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80027c6:	e003      	b.n	80027d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8272 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
 80027ea:	e26c      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_DMA_IRQHandler+0xa48>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d022      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a42      	ldr	r2, [pc, #264]	; (8002904 <HAL_DMA_IRQHandler+0xa4c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d01d      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a40      	ldr	r2, [pc, #256]	; (8002908 <HAL_DMA_IRQHandler+0xa50>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d018      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3f      	ldr	r2, [pc, #252]	; (800290c <HAL_DMA_IRQHandler+0xa54>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d013      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3d      	ldr	r2, [pc, #244]	; (8002910 <HAL_DMA_IRQHandler+0xa58>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00e      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3c      	ldr	r2, [pc, #240]	; (8002914 <HAL_DMA_IRQHandler+0xa5c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a3a      	ldr	r2, [pc, #232]	; (8002918 <HAL_DMA_IRQHandler+0xa60>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_DMA_IRQHandler+0xa64>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_DMA_IRQHandler+0x988>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_DMA_IRQHandler+0x98a>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 823f 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2204      	movs	r2, #4
 800285a:	409a      	lsls	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80cd 	beq.w	8002a00 <HAL_DMA_IRQHandler+0xb48>
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80c7 	beq.w	8002a00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	2204      	movs	r2, #4
 800287c:	409a      	lsls	r2, r3
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d049      	beq.n	8002920 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8210 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028a8:	e20a      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8206 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028bc:	e200      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
 80028be:	bf00      	nop
 80028c0:	40020010 	.word	0x40020010
 80028c4:	40020028 	.word	0x40020028
 80028c8:	40020040 	.word	0x40020040
 80028cc:	40020058 	.word	0x40020058
 80028d0:	40020070 	.word	0x40020070
 80028d4:	40020088 	.word	0x40020088
 80028d8:	400200a0 	.word	0x400200a0
 80028dc:	400200b8 	.word	0x400200b8
 80028e0:	40020410 	.word	0x40020410
 80028e4:	40020428 	.word	0x40020428
 80028e8:	40020440 	.word	0x40020440
 80028ec:	40020458 	.word	0x40020458
 80028f0:	40020470 	.word	0x40020470
 80028f4:	40020488 	.word	0x40020488
 80028f8:	400204a0 	.word	0x400204a0
 80028fc:	400204b8 	.word	0x400204b8
 8002900:	58025408 	.word	0x58025408
 8002904:	5802541c 	.word	0x5802541c
 8002908:	58025430 	.word	0x58025430
 800290c:	58025444 	.word	0x58025444
 8002910:	58025458 	.word	0x58025458
 8002914:	5802546c 	.word	0x5802546c
 8002918:	58025480 	.word	0x58025480
 800291c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d160      	bne.n	80029ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a8c      	ldr	r2, [pc, #560]	; (8002b60 <HAL_DMA_IRQHandler+0xca8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d04a      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a8a      	ldr	r2, [pc, #552]	; (8002b64 <HAL_DMA_IRQHandler+0xcac>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d045      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a89      	ldr	r2, [pc, #548]	; (8002b68 <HAL_DMA_IRQHandler+0xcb0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d040      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a87      	ldr	r2, [pc, #540]	; (8002b6c <HAL_DMA_IRQHandler+0xcb4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d03b      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a86      	ldr	r2, [pc, #536]	; (8002b70 <HAL_DMA_IRQHandler+0xcb8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d036      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a84      	ldr	r2, [pc, #528]	; (8002b74 <HAL_DMA_IRQHandler+0xcbc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d031      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a83      	ldr	r2, [pc, #524]	; (8002b78 <HAL_DMA_IRQHandler+0xcc0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d02c      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a81      	ldr	r2, [pc, #516]	; (8002b7c <HAL_DMA_IRQHandler+0xcc4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d027      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a80      	ldr	r2, [pc, #512]	; (8002b80 <HAL_DMA_IRQHandler+0xcc8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7e      	ldr	r2, [pc, #504]	; (8002b84 <HAL_DMA_IRQHandler+0xccc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01d      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7d      	ldr	r2, [pc, #500]	; (8002b88 <HAL_DMA_IRQHandler+0xcd0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d018      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a7b      	ldr	r2, [pc, #492]	; (8002b8c <HAL_DMA_IRQHandler+0xcd4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7a      	ldr	r2, [pc, #488]	; (8002b90 <HAL_DMA_IRQHandler+0xcd8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a78      	ldr	r2, [pc, #480]	; (8002b94 <HAL_DMA_IRQHandler+0xcdc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a77      	ldr	r2, [pc, #476]	; (8002b98 <HAL_DMA_IRQHandler+0xce0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a75      	ldr	r2, [pc, #468]	; (8002b9c <HAL_DMA_IRQHandler+0xce4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d108      	bne.n	80029dc <HAL_DMA_IRQHandler+0xb24>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0208 	bic.w	r2, r2, #8
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e007      	b.n	80029ec <HAL_DMA_IRQHandler+0xb34>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0204 	bic.w	r2, r2, #4
 80029ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8165 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029fe:	e15f      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2202      	movs	r2, #2
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80c5 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0xce8>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80bf 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 813a 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a58:	e134      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8130 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a6c:	e12a      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d168      	bne.n	8002b4a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a38      	ldr	r2, [pc, #224]	; (8002b60 <HAL_DMA_IRQHandler+0xca8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d04a      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a37      	ldr	r2, [pc, #220]	; (8002b64 <HAL_DMA_IRQHandler+0xcac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d045      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <HAL_DMA_IRQHandler+0xcb0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d040      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <HAL_DMA_IRQHandler+0xcb4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d03b      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <HAL_DMA_IRQHandler+0xcb8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d036      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_DMA_IRQHandler+0xcbc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d031      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <HAL_DMA_IRQHandler+0xcc0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02c      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <HAL_DMA_IRQHandler+0xcc4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d027      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2c      	ldr	r2, [pc, #176]	; (8002b80 <HAL_DMA_IRQHandler+0xcc8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <HAL_DMA_IRQHandler+0xccc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_DMA_IRQHandler+0xcd0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <HAL_DMA_IRQHandler+0xcd4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_DMA_IRQHandler+0xcd8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <HAL_DMA_IRQHandler+0xcdc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_DMA_IRQHandler+0xce0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_DMA_IRQHandler+0xce4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <HAL_DMA_IRQHandler+0xc72>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0214 	bic.w	r2, r2, #20
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e007      	b.n	8002b3a <HAL_DMA_IRQHandler+0xc82>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 020a 	bic.w	r2, r2, #10
 8002b38:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80b8 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b5c:	e0b2      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
 8002b5e:	bf00      	nop
 8002b60:	40020010 	.word	0x40020010
 8002b64:	40020028 	.word	0x40020028
 8002b68:	40020040 	.word	0x40020040
 8002b6c:	40020058 	.word	0x40020058
 8002b70:	40020070 	.word	0x40020070
 8002b74:	40020088 	.word	0x40020088
 8002b78:	400200a0 	.word	0x400200a0
 8002b7c:	400200b8 	.word	0x400200b8
 8002b80:	40020410 	.word	0x40020410
 8002b84:	40020428 	.word	0x40020428
 8002b88:	40020440 	.word	0x40020440
 8002b8c:	40020458 	.word	0x40020458
 8002b90:	40020470 	.word	0x40020470
 8002b94:	40020488 	.word	0x40020488
 8002b98:	400204a0 	.word	0x400204a0
 8002b9c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2208      	movs	r2, #8
 8002baa:	409a      	lsls	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8088 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8082 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a41      	ldr	r2, [pc, #260]	; (8002ccc <HAL_DMA_IRQHandler+0xe14>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d04a      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_DMA_IRQHandler+0xe18>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d045      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3e      	ldr	r2, [pc, #248]	; (8002cd4 <HAL_DMA_IRQHandler+0xe1c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d040      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3c      	ldr	r2, [pc, #240]	; (8002cd8 <HAL_DMA_IRQHandler+0xe20>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d03b      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a3b      	ldr	r2, [pc, #236]	; (8002cdc <HAL_DMA_IRQHandler+0xe24>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d036      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_DMA_IRQHandler+0xe28>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d031      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a38      	ldr	r2, [pc, #224]	; (8002ce4 <HAL_DMA_IRQHandler+0xe2c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d02c      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a36      	ldr	r2, [pc, #216]	; (8002ce8 <HAL_DMA_IRQHandler+0xe30>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d027      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a35      	ldr	r2, [pc, #212]	; (8002cec <HAL_DMA_IRQHandler+0xe34>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <HAL_DMA_IRQHandler+0xe38>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01d      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a32      	ldr	r2, [pc, #200]	; (8002cf4 <HAL_DMA_IRQHandler+0xe3c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d018      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a30      	ldr	r2, [pc, #192]	; (8002cf8 <HAL_DMA_IRQHandler+0xe40>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <HAL_DMA_IRQHandler+0xe44>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00e      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_DMA_IRQHandler+0xe48>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <HAL_DMA_IRQHandler+0xe4c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <HAL_DMA_IRQHandler+0xe50>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d108      	bne.n	8002c74 <HAL_DMA_IRQHandler+0xdbc>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 021c 	bic.w	r2, r2, #28
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e007      	b.n	8002c84 <HAL_DMA_IRQHandler+0xdcc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 020e 	bic.w	r2, r2, #14
 8002c82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
 8002cba:	e004      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002cbc:	bf00      	nop
 8002cbe:	e002      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002cc6:	3728      	adds	r7, #40	; 0x28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40020010 	.word	0x40020010
 8002cd0:	40020028 	.word	0x40020028
 8002cd4:	40020040 	.word	0x40020040
 8002cd8:	40020058 	.word	0x40020058
 8002cdc:	40020070 	.word	0x40020070
 8002ce0:	40020088 	.word	0x40020088
 8002ce4:	400200a0 	.word	0x400200a0
 8002ce8:	400200b8 	.word	0x400200b8
 8002cec:	40020410 	.word	0x40020410
 8002cf0:	40020428 	.word	0x40020428
 8002cf4:	40020440 	.word	0x40020440
 8002cf8:	40020458 	.word	0x40020458
 8002cfc:	40020470 	.word	0x40020470
 8002d00:	40020488 	.word	0x40020488
 8002d04:	400204a0 	.word	0x400204a0
 8002d08:	400204b8 	.word	0x400204b8

08002d0c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d1a:	b2db      	uxtb	r3, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a84      	ldr	r2, [pc, #528]	; (8002f70 <DMA_SetConfig+0x230>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d072      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a82      	ldr	r2, [pc, #520]	; (8002f74 <DMA_SetConfig+0x234>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d06d      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a81      	ldr	r2, [pc, #516]	; (8002f78 <DMA_SetConfig+0x238>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d068      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a7f      	ldr	r2, [pc, #508]	; (8002f7c <DMA_SetConfig+0x23c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d063      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a7e      	ldr	r2, [pc, #504]	; (8002f80 <DMA_SetConfig+0x240>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d05e      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a7c      	ldr	r2, [pc, #496]	; (8002f84 <DMA_SetConfig+0x244>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d059      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a7b      	ldr	r2, [pc, #492]	; (8002f88 <DMA_SetConfig+0x248>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d054      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a79      	ldr	r2, [pc, #484]	; (8002f8c <DMA_SetConfig+0x24c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d04f      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a78      	ldr	r2, [pc, #480]	; (8002f90 <DMA_SetConfig+0x250>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d04a      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a76      	ldr	r2, [pc, #472]	; (8002f94 <DMA_SetConfig+0x254>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d045      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a75      	ldr	r2, [pc, #468]	; (8002f98 <DMA_SetConfig+0x258>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d040      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a73      	ldr	r2, [pc, #460]	; (8002f9c <DMA_SetConfig+0x25c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d03b      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a72      	ldr	r2, [pc, #456]	; (8002fa0 <DMA_SetConfig+0x260>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d036      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a70      	ldr	r2, [pc, #448]	; (8002fa4 <DMA_SetConfig+0x264>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d031      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6f      	ldr	r2, [pc, #444]	; (8002fa8 <DMA_SetConfig+0x268>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d02c      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6d      	ldr	r2, [pc, #436]	; (8002fac <DMA_SetConfig+0x26c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d027      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6c      	ldr	r2, [pc, #432]	; (8002fb0 <DMA_SetConfig+0x270>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a6a      	ldr	r2, [pc, #424]	; (8002fb4 <DMA_SetConfig+0x274>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01d      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <DMA_SetConfig+0x278>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d018      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <DMA_SetConfig+0x27c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a66      	ldr	r2, [pc, #408]	; (8002fc0 <DMA_SetConfig+0x280>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a64      	ldr	r2, [pc, #400]	; (8002fc4 <DMA_SetConfig+0x284>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a63      	ldr	r2, [pc, #396]	; (8002fc8 <DMA_SetConfig+0x288>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <DMA_SetConfig+0x10a>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a61      	ldr	r2, [pc, #388]	; (8002fcc <DMA_SetConfig+0x28c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <DMA_SetConfig+0x10e>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <DMA_SetConfig+0x110>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e5c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e6e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a3e      	ldr	r2, [pc, #248]	; (8002f70 <DMA_SetConfig+0x230>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d04a      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a3d      	ldr	r2, [pc, #244]	; (8002f74 <DMA_SetConfig+0x234>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d045      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3b      	ldr	r2, [pc, #236]	; (8002f78 <DMA_SetConfig+0x238>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d040      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a3a      	ldr	r2, [pc, #232]	; (8002f7c <DMA_SetConfig+0x23c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d03b      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a38      	ldr	r2, [pc, #224]	; (8002f80 <DMA_SetConfig+0x240>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d036      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a37      	ldr	r2, [pc, #220]	; (8002f84 <DMA_SetConfig+0x244>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d031      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a35      	ldr	r2, [pc, #212]	; (8002f88 <DMA_SetConfig+0x248>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d02c      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <DMA_SetConfig+0x24c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d027      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a32      	ldr	r2, [pc, #200]	; (8002f90 <DMA_SetConfig+0x250>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d022      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a31      	ldr	r2, [pc, #196]	; (8002f94 <DMA_SetConfig+0x254>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d01d      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2f      	ldr	r2, [pc, #188]	; (8002f98 <DMA_SetConfig+0x258>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d018      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2e      	ldr	r2, [pc, #184]	; (8002f9c <DMA_SetConfig+0x25c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2c      	ldr	r2, [pc, #176]	; (8002fa0 <DMA_SetConfig+0x260>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00e      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2b      	ldr	r2, [pc, #172]	; (8002fa4 <DMA_SetConfig+0x264>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d009      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a29      	ldr	r2, [pc, #164]	; (8002fa8 <DMA_SetConfig+0x268>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <DMA_SetConfig+0x1d0>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a28      	ldr	r2, [pc, #160]	; (8002fac <DMA_SetConfig+0x26c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <DMA_SetConfig+0x1d4>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <DMA_SetConfig+0x1d6>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d05a      	beq.n	8002fd0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	223f      	movs	r2, #63	; 0x3f
 8002f24:	409a      	lsls	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f38:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b40      	cmp	r3, #64	; 0x40
 8002f48:	d108      	bne.n	8002f5c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f5a:	e087      	b.n	800306c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]
}
 8002f6c:	e07e      	b.n	800306c <DMA_SetConfig+0x32c>
 8002f6e:	bf00      	nop
 8002f70:	40020010 	.word	0x40020010
 8002f74:	40020028 	.word	0x40020028
 8002f78:	40020040 	.word	0x40020040
 8002f7c:	40020058 	.word	0x40020058
 8002f80:	40020070 	.word	0x40020070
 8002f84:	40020088 	.word	0x40020088
 8002f88:	400200a0 	.word	0x400200a0
 8002f8c:	400200b8 	.word	0x400200b8
 8002f90:	40020410 	.word	0x40020410
 8002f94:	40020428 	.word	0x40020428
 8002f98:	40020440 	.word	0x40020440
 8002f9c:	40020458 	.word	0x40020458
 8002fa0:	40020470 	.word	0x40020470
 8002fa4:	40020488 	.word	0x40020488
 8002fa8:	400204a0 	.word	0x400204a0
 8002fac:	400204b8 	.word	0x400204b8
 8002fb0:	58025408 	.word	0x58025408
 8002fb4:	5802541c 	.word	0x5802541c
 8002fb8:	58025430 	.word	0x58025430
 8002fbc:	58025444 	.word	0x58025444
 8002fc0:	58025458 	.word	0x58025458
 8002fc4:	5802546c 	.word	0x5802546c
 8002fc8:	58025480 	.word	0x58025480
 8002fcc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <DMA_SetConfig+0x338>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d022      	beq.n	8003020 <DMA_SetConfig+0x2e0>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a27      	ldr	r2, [pc, #156]	; (800307c <DMA_SetConfig+0x33c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d01d      	beq.n	8003020 <DMA_SetConfig+0x2e0>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a25      	ldr	r2, [pc, #148]	; (8003080 <DMA_SetConfig+0x340>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d018      	beq.n	8003020 <DMA_SetConfig+0x2e0>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a24      	ldr	r2, [pc, #144]	; (8003084 <DMA_SetConfig+0x344>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <DMA_SetConfig+0x2e0>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a22      	ldr	r2, [pc, #136]	; (8003088 <DMA_SetConfig+0x348>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00e      	beq.n	8003020 <DMA_SetConfig+0x2e0>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a21      	ldr	r2, [pc, #132]	; (800308c <DMA_SetConfig+0x34c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d009      	beq.n	8003020 <DMA_SetConfig+0x2e0>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <DMA_SetConfig+0x350>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <DMA_SetConfig+0x2e0>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <DMA_SetConfig+0x354>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <DMA_SetConfig+0x2e4>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <DMA_SetConfig+0x2e6>
 8003024:	2300      	movs	r3, #0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d020      	beq.n	800306c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2201      	movs	r2, #1
 8003034:	409a      	lsls	r2, r3
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d108      	bne.n	800305c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	60da      	str	r2, [r3, #12]
}
 800305a:	e007      	b.n	800306c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	60da      	str	r2, [r3, #12]
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	58025408 	.word	0x58025408
 800307c:	5802541c 	.word	0x5802541c
 8003080:	58025430 	.word	0x58025430
 8003084:	58025444 	.word	0x58025444
 8003088:	58025458 	.word	0x58025458
 800308c:	5802546c 	.word	0x5802546c
 8003090:	58025480 	.word	0x58025480
 8003094:	58025494 	.word	0x58025494

08003098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a42      	ldr	r2, [pc, #264]	; (80031b0 <DMA_CalcBaseAndBitshift+0x118>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d04a      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a41      	ldr	r2, [pc, #260]	; (80031b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d045      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a3f      	ldr	r2, [pc, #252]	; (80031b8 <DMA_CalcBaseAndBitshift+0x120>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d040      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a3e      	ldr	r2, [pc, #248]	; (80031bc <DMA_CalcBaseAndBitshift+0x124>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d03b      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a3c      	ldr	r2, [pc, #240]	; (80031c0 <DMA_CalcBaseAndBitshift+0x128>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d036      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3b      	ldr	r2, [pc, #236]	; (80031c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d031      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a39      	ldr	r2, [pc, #228]	; (80031c8 <DMA_CalcBaseAndBitshift+0x130>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02c      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a38      	ldr	r2, [pc, #224]	; (80031cc <DMA_CalcBaseAndBitshift+0x134>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d027      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a36      	ldr	r2, [pc, #216]	; (80031d0 <DMA_CalcBaseAndBitshift+0x138>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d022      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a35      	ldr	r2, [pc, #212]	; (80031d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d01d      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a33      	ldr	r2, [pc, #204]	; (80031d8 <DMA_CalcBaseAndBitshift+0x140>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d018      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a32      	ldr	r2, [pc, #200]	; (80031dc <DMA_CalcBaseAndBitshift+0x144>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a30      	ldr	r2, [pc, #192]	; (80031e0 <DMA_CalcBaseAndBitshift+0x148>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00e      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2f      	ldr	r2, [pc, #188]	; (80031e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2d      	ldr	r2, [pc, #180]	; (80031e8 <DMA_CalcBaseAndBitshift+0x150>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <DMA_CalcBaseAndBitshift+0xa8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a2c      	ldr	r2, [pc, #176]	; (80031ec <DMA_CalcBaseAndBitshift+0x154>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <DMA_CalcBaseAndBitshift+0xac>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <DMA_CalcBaseAndBitshift+0xae>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d024      	beq.n	8003194 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3b10      	subs	r3, #16
 8003152:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <DMA_CalcBaseAndBitshift+0x158>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003164:	5cd3      	ldrb	r3, [r2, r3]
 8003166:	461a      	mov	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d908      	bls.n	8003184 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <DMA_CalcBaseAndBitshift+0x160>)
 800317a:	4013      	ands	r3, r2
 800317c:	1d1a      	adds	r2, r3, #4
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	659a      	str	r2, [r3, #88]	; 0x58
 8003182:	e00d      	b.n	80031a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <DMA_CalcBaseAndBitshift+0x160>)
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6593      	str	r3, [r2, #88]	; 0x58
 8003192:	e005      	b.n	80031a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40020010 	.word	0x40020010
 80031b4:	40020028 	.word	0x40020028
 80031b8:	40020040 	.word	0x40020040
 80031bc:	40020058 	.word	0x40020058
 80031c0:	40020070 	.word	0x40020070
 80031c4:	40020088 	.word	0x40020088
 80031c8:	400200a0 	.word	0x400200a0
 80031cc:	400200b8 	.word	0x400200b8
 80031d0:	40020410 	.word	0x40020410
 80031d4:	40020428 	.word	0x40020428
 80031d8:	40020440 	.word	0x40020440
 80031dc:	40020458 	.word	0x40020458
 80031e0:	40020470 	.word	0x40020470
 80031e4:	40020488 	.word	0x40020488
 80031e8:	400204a0 	.word	0x400204a0
 80031ec:	400204b8 	.word	0x400204b8
 80031f0:	aaaaaaab 	.word	0xaaaaaaab
 80031f4:	0800f788 	.word	0x0800f788
 80031f8:	fffffc00 	.word	0xfffffc00

080031fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d120      	bne.n	8003252 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	2b03      	cmp	r3, #3
 8003216:	d858      	bhi.n	80032ca <DMA_CheckFifoParam+0xce>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <DMA_CheckFifoParam+0x24>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003231 	.word	0x08003231
 8003224:	08003243 	.word	0x08003243
 8003228:	08003231 	.word	0x08003231
 800322c:	080032cb 	.word	0x080032cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d048      	beq.n	80032ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003240:	e045      	b.n	80032ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800324a:	d142      	bne.n	80032d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003250:	e03f      	b.n	80032d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325a:	d123      	bne.n	80032a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	2b03      	cmp	r3, #3
 8003262:	d838      	bhi.n	80032d6 <DMA_CheckFifoParam+0xda>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <DMA_CheckFifoParam+0x70>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	0800327d 	.word	0x0800327d
 8003270:	08003283 	.word	0x08003283
 8003274:	0800327d 	.word	0x0800327d
 8003278:	08003295 	.word	0x08003295
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
        break;
 8003280:	e030      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d025      	beq.n	80032da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003292:	e022      	b.n	80032da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800329c:	d11f      	bne.n	80032de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032a2:	e01c      	b.n	80032de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d902      	bls.n	80032b2 <DMA_CheckFifoParam+0xb6>
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d003      	beq.n	80032b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80032b0:	e018      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
        break;
 80032b6:	e015      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
    break;
 80032c8:	e00b      	b.n	80032e2 <DMA_CheckFifoParam+0xe6>
        break;
 80032ca:	bf00      	nop
 80032cc:	e00a      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
        break;
 80032ce:	bf00      	nop
 80032d0:	e008      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
        break;
 80032d2:	bf00      	nop
 80032d4:	e006      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
        break;
 80032d6:	bf00      	nop
 80032d8:	e004      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
        break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
        break;
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
    break;
 80032e2:	bf00      	nop
    }
  }

  return status;
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a38      	ldr	r2, [pc, #224]	; (80033e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d022      	beq.n	8003352 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a36      	ldr	r2, [pc, #216]	; (80033ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01d      	beq.n	8003352 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a35      	ldr	r2, [pc, #212]	; (80033f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d018      	beq.n	8003352 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a33      	ldr	r2, [pc, #204]	; (80033f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a32      	ldr	r2, [pc, #200]	; (80033f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00e      	beq.n	8003352 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a30      	ldr	r2, [pc, #192]	; (80033fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d009      	beq.n	8003352 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d004      	beq.n	8003352 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2d      	ldr	r2, [pc, #180]	; (8003404 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01a      	beq.n	8003392 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	3b08      	subs	r3, #8
 8003364:	4a28      	ldr	r2, [pc, #160]	; (8003408 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4b26      	ldr	r3, [pc, #152]	; (800340c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a24      	ldr	r2, [pc, #144]	; (8003410 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003380:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2201      	movs	r2, #1
 800338a:	409a      	lsls	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003390:	e024      	b.n	80033dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3b10      	subs	r3, #16
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d806      	bhi.n	80033ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4a1b      	ldr	r2, [pc, #108]	; (800341c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d902      	bls.n	80033ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3308      	adds	r3, #8
 80033b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	461a      	mov	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a16      	ldr	r2, [pc, #88]	; (8003424 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80033cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2201      	movs	r2, #1
 80033d6:	409a      	lsls	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	58025408 	.word	0x58025408
 80033ec:	5802541c 	.word	0x5802541c
 80033f0:	58025430 	.word	0x58025430
 80033f4:	58025444 	.word	0x58025444
 80033f8:	58025458 	.word	0x58025458
 80033fc:	5802546c 	.word	0x5802546c
 8003400:	58025480 	.word	0x58025480
 8003404:	58025494 	.word	0x58025494
 8003408:	cccccccd 	.word	0xcccccccd
 800340c:	16009600 	.word	0x16009600
 8003410:	58025880 	.word	0x58025880
 8003414:	aaaaaaab 	.word	0xaaaaaaab
 8003418:	400204b8 	.word	0x400204b8
 800341c:	4002040f 	.word	0x4002040f
 8003420:	10008200 	.word	0x10008200
 8003424:	40020880 	.word	0x40020880

08003428 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d04a      	beq.n	80034d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d847      	bhi.n	80034d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d022      	beq.n	8003494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a24      	ldr	r2, [pc, #144]	; (80034e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d01d      	beq.n	8003494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a22      	ldr	r2, [pc, #136]	; (80034e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d018      	beq.n	8003494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a21      	ldr	r2, [pc, #132]	; (80034ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d009      	beq.n	8003494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1b      	ldr	r2, [pc, #108]	; (80034fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d101      	bne.n	8003498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003498:	2300      	movs	r3, #0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4b17      	ldr	r3, [pc, #92]	; (8003500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a15      	ldr	r2, [pc, #84]	; (8003504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80034b0:	671a      	str	r2, [r3, #112]	; 0x70
 80034b2:	e009      	b.n	80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	461a      	mov	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a11      	ldr	r2, [pc, #68]	; (800350c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80034c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	2201      	movs	r2, #1
 80034ce:	409a      	lsls	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	58025408 	.word	0x58025408
 80034e4:	5802541c 	.word	0x5802541c
 80034e8:	58025430 	.word	0x58025430
 80034ec:	58025444 	.word	0x58025444
 80034f0:	58025458 	.word	0x58025458
 80034f4:	5802546c 	.word	0x5802546c
 80034f8:	58025480 	.word	0x58025480
 80034fc:	58025494 	.word	0x58025494
 8003500:	1600963f 	.word	0x1600963f
 8003504:	58025940 	.word	0x58025940
 8003508:	1000823f 	.word	0x1000823f
 800350c:	40020940 	.word	0x40020940

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800351e:	4b89      	ldr	r3, [pc, #548]	; (8003744 <HAL_GPIO_Init+0x234>)
 8003520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003522:	e194      	b.n	800384e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8186 	beq.w	8003848 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d005      	beq.n	8003554 <HAL_GPIO_Init+0x44>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d130      	bne.n	80035b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800358a:	2201      	movs	r2, #1
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	f003 0201 	and.w	r2, r3, #1
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d017      	beq.n	80035f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	2203      	movs	r2, #3
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d123      	bne.n	8003646 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	08da      	lsrs	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3208      	adds	r2, #8
 8003606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	08da      	lsrs	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3208      	adds	r2, #8
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0203 	and.w	r2, r3, #3
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80e0 	beq.w	8003848 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003688:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <HAL_GPIO_Init+0x238>)
 800368a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800368e:	4a2e      	ldr	r2, [pc, #184]	; (8003748 <HAL_GPIO_Init+0x238>)
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003698:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_GPIO_Init+0x238>)
 800369a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036a6:	4a29      	ldr	r2, [pc, #164]	; (800374c <HAL_GPIO_Init+0x23c>)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	220f      	movs	r2, #15
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a20      	ldr	r2, [pc, #128]	; (8003750 <HAL_GPIO_Init+0x240>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d052      	beq.n	8003778 <HAL_GPIO_Init+0x268>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <HAL_GPIO_Init+0x244>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <HAL_GPIO_Init+0x22e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_GPIO_Init+0x248>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02b      	beq.n	800373a <HAL_GPIO_Init+0x22a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <HAL_GPIO_Init+0x24c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d025      	beq.n	8003736 <HAL_GPIO_Init+0x226>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <HAL_GPIO_Init+0x250>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <HAL_GPIO_Init+0x222>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_GPIO_Init+0x254>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x21e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <HAL_GPIO_Init+0x258>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x21a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_GPIO_Init+0x25c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x216>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <HAL_GPIO_Init+0x260>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x212>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a17      	ldr	r2, [pc, #92]	; (8003774 <HAL_GPIO_Init+0x264>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x20e>
 800371a:	2309      	movs	r3, #9
 800371c:	e02d      	b.n	800377a <HAL_GPIO_Init+0x26a>
 800371e:	230a      	movs	r3, #10
 8003720:	e02b      	b.n	800377a <HAL_GPIO_Init+0x26a>
 8003722:	2308      	movs	r3, #8
 8003724:	e029      	b.n	800377a <HAL_GPIO_Init+0x26a>
 8003726:	2307      	movs	r3, #7
 8003728:	e027      	b.n	800377a <HAL_GPIO_Init+0x26a>
 800372a:	2306      	movs	r3, #6
 800372c:	e025      	b.n	800377a <HAL_GPIO_Init+0x26a>
 800372e:	2305      	movs	r3, #5
 8003730:	e023      	b.n	800377a <HAL_GPIO_Init+0x26a>
 8003732:	2304      	movs	r3, #4
 8003734:	e021      	b.n	800377a <HAL_GPIO_Init+0x26a>
 8003736:	2303      	movs	r3, #3
 8003738:	e01f      	b.n	800377a <HAL_GPIO_Init+0x26a>
 800373a:	2302      	movs	r3, #2
 800373c:	e01d      	b.n	800377a <HAL_GPIO_Init+0x26a>
 800373e:	2301      	movs	r3, #1
 8003740:	e01b      	b.n	800377a <HAL_GPIO_Init+0x26a>
 8003742:	bf00      	nop
 8003744:	58000080 	.word	0x58000080
 8003748:	58024400 	.word	0x58024400
 800374c:	58000400 	.word	0x58000400
 8003750:	58020000 	.word	0x58020000
 8003754:	58020400 	.word	0x58020400
 8003758:	58020800 	.word	0x58020800
 800375c:	58020c00 	.word	0x58020c00
 8003760:	58021000 	.word	0x58021000
 8003764:	58021400 	.word	0x58021400
 8003768:	58021800 	.word	0x58021800
 800376c:	58021c00 	.word	0x58021c00
 8003770:	58022000 	.word	0x58022000
 8003774:	58022400 	.word	0x58022400
 8003778:	2300      	movs	r3, #0
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	f002 0203 	and.w	r2, r2, #3
 8003780:	0092      	lsls	r2, r2, #2
 8003782:	4093      	lsls	r3, r2
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800378a:	4938      	ldr	r1, [pc, #224]	; (800386c <HAL_GPIO_Init+0x35c>)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	3302      	adds	r3, #2
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80037be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80037ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	3301      	adds	r3, #1
 800384c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	f47f ae63 	bne.w	8003524 <HAL_GPIO_Init+0x14>
  }
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	3724      	adds	r7, #36	; 0x24
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	58000400 	.word	0x58000400

08003870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	887b      	ldrh	r3, [r7, #2]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	e001      	b.n	8003892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
 80038ac:	4613      	mov	r3, r2
 80038ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038b0:	787b      	ldrb	r3, [r7, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038bc:	e003      	b.n	80038c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038be:	887b      	ldrh	r3, [r7, #2]
 80038c0:	041a      	lsls	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	619a      	str	r2, [r3, #24]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b085      	sub	sp, #20
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038e4:	887a      	ldrh	r2, [r7, #2]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4013      	ands	r3, r2
 80038ea:	041a      	lsls	r2, r3, #16
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	400b      	ands	r3, r1
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	619a      	str	r2, [r3, #24]
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_PWREx_ConfigSupply+0x70>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b04      	cmp	r3, #4
 800391a:	d00a      	beq.n	8003932 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_PWREx_ConfigSupply+0x70>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e01f      	b.n	800396e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e01d      	b.n	800396e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_PWREx_ConfigSupply+0x70>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f023 0207 	bic.w	r2, r3, #7
 800393a:	490f      	ldr	r1, [pc, #60]	; (8003978 <HAL_PWREx_ConfigSupply+0x70>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4313      	orrs	r3, r2
 8003940:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003942:	f7fc fe99 	bl	8000678 <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003948:	e009      	b.n	800395e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800394a:	f7fc fe95 	bl	8000678 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003958:	d901      	bls.n	800395e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e007      	b.n	800396e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_PWREx_ConfigSupply+0x70>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396a:	d1ee      	bne.n	800394a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	58024800 	.word	0x58024800

0800397c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f000 bc1c 	b.w	80041c8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8087 	beq.w	8003aac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399e:	4b9e      	ldr	r3, [pc, #632]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039a8:	4b9b      	ldr	r3, [pc, #620]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d007      	beq.n	80039c4 <HAL_RCC_OscConfig+0x48>
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	2b18      	cmp	r3, #24
 80039b8:	d110      	bne.n	80039dc <HAL_RCC_OscConfig+0x60>
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d10b      	bne.n	80039dc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	4b94      	ldr	r3, [pc, #592]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d06c      	beq.n	8003aaa <HAL_RCC_OscConfig+0x12e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d168      	bne.n	8003aaa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e3f5      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e4:	d106      	bne.n	80039f4 <HAL_RCC_OscConfig+0x78>
 80039e6:	4b8c      	ldr	r3, [pc, #560]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a8b      	ldr	r2, [pc, #556]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e02e      	b.n	8003a52 <HAL_RCC_OscConfig+0xd6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10c      	bne.n	8003a16 <HAL_RCC_OscConfig+0x9a>
 80039fc:	4b86      	ldr	r3, [pc, #536]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a85      	ldr	r2, [pc, #532]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b83      	ldr	r3, [pc, #524]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a82      	ldr	r2, [pc, #520]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	e01d      	b.n	8003a52 <HAL_RCC_OscConfig+0xd6>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCC_OscConfig+0xbe>
 8003a20:	4b7d      	ldr	r3, [pc, #500]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b7a      	ldr	r3, [pc, #488]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a79      	ldr	r2, [pc, #484]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	e00b      	b.n	8003a52 <HAL_RCC_OscConfig+0xd6>
 8003a3a:	4b77      	ldr	r3, [pc, #476]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a76      	ldr	r2, [pc, #472]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b74      	ldr	r3, [pc, #464]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a73      	ldr	r2, [pc, #460]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d013      	beq.n	8003a82 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fc fe0d 	bl	8000678 <HAL_GetTick>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a62:	f7fc fe09 	bl	8000678 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b64      	cmp	r3, #100	; 0x64
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e3a9      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a74:	4b68      	ldr	r3, [pc, #416]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0xe6>
 8003a80:	e014      	b.n	8003aac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fc fdf9 	bl	8000678 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8a:	f7fc fdf5 	bl	8000678 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b64      	cmp	r3, #100	; 0x64
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e395      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a9c:	4b5e      	ldr	r3, [pc, #376]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x10e>
 8003aa8:	e000      	b.n	8003aac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aaa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80ca 	beq.w	8003c4e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aba:	4b57      	ldr	r3, [pc, #348]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ac2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ac4:	4b54      	ldr	r3, [pc, #336]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x164>
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	2b18      	cmp	r3, #24
 8003ad4:	d156      	bne.n	8003b84 <HAL_RCC_OscConfig+0x208>
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d151      	bne.n	8003b84 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae0:	4b4d      	ldr	r3, [pc, #308]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_OscConfig+0x17c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e367      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003af8:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 0219 	bic.w	r2, r3, #25
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4944      	ldr	r1, [pc, #272]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b0a:	f7fc fdb5 	bl	8000678 <HAL_GetTick>
 8003b0e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fc fdb1 	bl	8000678 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e351      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b24:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	f7fc fdae 	bl	8000690 <HAL_GetREVID>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d817      	bhi.n	8003b6e <HAL_RCC_OscConfig+0x1f2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d108      	bne.n	8003b58 <HAL_RCC_OscConfig+0x1dc>
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b4e:	4a32      	ldr	r2, [pc, #200]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b56:	e07a      	b.n	8003c4e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	031b      	lsls	r3, r3, #12
 8003b66:	492c      	ldr	r1, [pc, #176]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6c:	e06f      	b.n	8003c4e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	061b      	lsls	r3, r3, #24
 8003b7c:	4926      	ldr	r1, [pc, #152]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b82:	e064      	b.n	8003c4e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d047      	beq.n	8003c1c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b8c:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 0219 	bic.w	r2, r3, #25
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	491f      	ldr	r1, [pc, #124]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fc fd6b 	bl	8000678 <HAL_GetTick>
 8003ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7fc fd67 	bl	8000678 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e307      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bb8:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	f7fc fd64 	bl	8000690 <HAL_GetREVID>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d817      	bhi.n	8003c02 <HAL_RCC_OscConfig+0x286>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d108      	bne.n	8003bec <HAL_RCC_OscConfig+0x270>
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003be2:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be8:	6053      	str	r3, [r2, #4]
 8003bea:	e030      	b.n	8003c4e <HAL_RCC_OscConfig+0x2d2>
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	031b      	lsls	r3, r3, #12
 8003bfa:	4907      	ldr	r1, [pc, #28]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
 8003c00:	e025      	b.n	8003c4e <HAL_RCC_OscConfig+0x2d2>
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	4901      	ldr	r1, [pc, #4]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
 8003c16:	e01a      	b.n	8003c4e <HAL_RCC_OscConfig+0x2d2>
 8003c18:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1c:	4b9e      	ldr	r3, [pc, #632]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a9d      	ldr	r2, [pc, #628]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fc fd26 	bl	8000678 <HAL_GetTick>
 8003c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fc fd22 	bl	8000678 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e2c2      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c42:	4b95      	ldr	r3, [pc, #596]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80a9 	beq.w	8003dae <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c5c:	4b8e      	ldr	r3, [pc, #568]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c64:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c66:	4b8c      	ldr	r3, [pc, #560]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d007      	beq.n	8003c82 <HAL_RCC_OscConfig+0x306>
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b18      	cmp	r3, #24
 8003c76:	d13a      	bne.n	8003cee <HAL_RCC_OscConfig+0x372>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d135      	bne.n	8003cee <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c82:	4b85      	ldr	r3, [pc, #532]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_RCC_OscConfig+0x31e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	2b80      	cmp	r3, #128	; 0x80
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e296      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c9a:	f7fc fcf9 	bl	8000690 <HAL_GetREVID>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d817      	bhi.n	8003cd8 <HAL_RCC_OscConfig+0x35c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d108      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x346>
 8003cb0:	4b79      	ldr	r3, [pc, #484]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003cb8:	4a77      	ldr	r2, [pc, #476]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cbe:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cc0:	e075      	b.n	8003dae <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cc2:	4b75      	ldr	r3, [pc, #468]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	069b      	lsls	r3, r3, #26
 8003cd0:	4971      	ldr	r1, [pc, #452]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cd6:	e06a      	b.n	8003dae <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cd8:	4b6f      	ldr	r3, [pc, #444]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	496c      	ldr	r1, [pc, #432]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cec:	e05f      	b.n	8003dae <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d042      	beq.n	8003d7c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003cf6:	4b68      	ldr	r3, [pc, #416]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a67      	ldr	r2, [pc, #412]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fc fcb9 	bl	8000678 <HAL_GetTick>
 8003d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d0a:	f7fc fcb5 	bl	8000678 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e255      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d1c:	4b5e      	ldr	r3, [pc, #376]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d28:	f7fc fcb2 	bl	8000690 <HAL_GetREVID>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d817      	bhi.n	8003d66 <HAL_RCC_OscConfig+0x3ea>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d108      	bne.n	8003d50 <HAL_RCC_OscConfig+0x3d4>
 8003d3e:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d46:	4a54      	ldr	r2, [pc, #336]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003d48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d4c:	6053      	str	r3, [r2, #4]
 8003d4e:	e02e      	b.n	8003dae <HAL_RCC_OscConfig+0x432>
 8003d50:	4b51      	ldr	r3, [pc, #324]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	069b      	lsls	r3, r3, #26
 8003d5e:	494e      	ldr	r1, [pc, #312]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
 8003d64:	e023      	b.n	8003dae <HAL_RCC_OscConfig+0x432>
 8003d66:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	061b      	lsls	r3, r3, #24
 8003d74:	4948      	ldr	r1, [pc, #288]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60cb      	str	r3, [r1, #12]
 8003d7a:	e018      	b.n	8003dae <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d7c:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a45      	ldr	r2, [pc, #276]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fc fc76 	bl	8000678 <HAL_GetTick>
 8003d8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d90:	f7fc fc72 	bl	8000678 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e212      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003da2:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d036      	beq.n	8003e28 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d019      	beq.n	8003df6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	4a34      	ldr	r2, [pc, #208]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fc fc53 	bl	8000678 <HAL_GetTick>
 8003dd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd6:	f7fc fc4f 	bl	8000678 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1ef      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003de8:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x45a>
 8003df4:	e018      	b.n	8003e28 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df6:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfa:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e02:	f7fc fc39 	bl	8000678 <HAL_GetTick>
 8003e06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fc fc35 	bl	8000678 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e1d5      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d039      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d019      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e3c:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e48:	f7fc fc16 	bl	8000678 <HAL_GetTick>
 8003e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e50:	f7fc fc12 	bl	8000678 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e1b2      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4d4>
 8003e6e:	e01b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <HAL_RCC_OscConfig+0x51c>)
 8003e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e7c:	f7fc fbfc 	bl	8000678 <HAL_GetTick>
 8003e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e84:	f7fc fbf8 	bl	8000678 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d904      	bls.n	8003e9c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e198      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
 8003e96:	bf00      	nop
 8003e98:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e9c:	4ba3      	ldr	r3, [pc, #652]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ed      	bne.n	8003e84 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8081 	beq.w	8003fb8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003eb6:	4b9e      	ldr	r3, [pc, #632]	; (8004130 <HAL_RCC_OscConfig+0x7b4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a9d      	ldr	r2, [pc, #628]	; (8004130 <HAL_RCC_OscConfig+0x7b4>)
 8003ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ec2:	f7fc fbd9 	bl	8000678 <HAL_GetTick>
 8003ec6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eca:	f7fc fbd5 	bl	8000678 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b64      	cmp	r3, #100	; 0x64
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e175      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003edc:	4b94      	ldr	r3, [pc, #592]	; (8004130 <HAL_RCC_OscConfig+0x7b4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d106      	bne.n	8003efe <HAL_RCC_OscConfig+0x582>
 8003ef0:	4b8e      	ldr	r3, [pc, #568]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	4a8d      	ldr	r2, [pc, #564]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	6713      	str	r3, [r2, #112]	; 0x70
 8003efc:	e02d      	b.n	8003f5a <HAL_RCC_OscConfig+0x5de>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x5a4>
 8003f06:	4b89      	ldr	r3, [pc, #548]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a88      	ldr	r2, [pc, #544]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70
 8003f12:	4b86      	ldr	r3, [pc, #536]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	4a85      	ldr	r2, [pc, #532]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1e:	e01c      	b.n	8003f5a <HAL_RCC_OscConfig+0x5de>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b05      	cmp	r3, #5
 8003f26:	d10c      	bne.n	8003f42 <HAL_RCC_OscConfig+0x5c6>
 8003f28:	4b80      	ldr	r3, [pc, #512]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	4a7f      	ldr	r2, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f2e:	f043 0304 	orr.w	r3, r3, #4
 8003f32:	6713      	str	r3, [r2, #112]	; 0x70
 8003f34:	4b7d      	ldr	r3, [pc, #500]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	4a7c      	ldr	r2, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f40:	e00b      	b.n	8003f5a <HAL_RCC_OscConfig+0x5de>
 8003f42:	4b7a      	ldr	r3, [pc, #488]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4a79      	ldr	r2, [pc, #484]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4e:	4b77      	ldr	r3, [pc, #476]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	4a76      	ldr	r2, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f54:	f023 0304 	bic.w	r3, r3, #4
 8003f58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d015      	beq.n	8003f8e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fc fb89 	bl	8000678 <HAL_GetTick>
 8003f66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fc fb85 	bl	8000678 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e123      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f80:	4b6a      	ldr	r3, [pc, #424]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ee      	beq.n	8003f6a <HAL_RCC_OscConfig+0x5ee>
 8003f8c:	e014      	b.n	8003fb8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fc fb73 	bl	8000678 <HAL_GetTick>
 8003f92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f94:	e00a      	b.n	8003fac <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fc fb6f 	bl	8000678 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e10d      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fac:	4b5f      	ldr	r3, [pc, #380]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ee      	bne.n	8003f96 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8102 	beq.w	80041c6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003fc2:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fca:	2b18      	cmp	r3, #24
 8003fcc:	f000 80bd 	beq.w	800414a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	f040 8095 	bne.w	8004104 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b54      	ldr	r3, [pc, #336]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a53      	ldr	r2, [pc, #332]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8003fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fc fb47 	bl	8000678 <HAL_GetTick>
 8003fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fc fb43 	bl	8000678 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e0e3      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004000:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400c:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 800400e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004010:	4b48      	ldr	r3, [pc, #288]	; (8004134 <HAL_RCC_OscConfig+0x7b8>)
 8004012:	4013      	ands	r3, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800401c:	0112      	lsls	r2, r2, #4
 800401e:	430a      	orrs	r2, r1
 8004020:	4942      	ldr	r1, [pc, #264]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	628b      	str	r3, [r1, #40]	; 0x28
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	3b01      	subs	r3, #1
 800402c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004034:	3b01      	subs	r3, #1
 8004036:	025b      	lsls	r3, r3, #9
 8004038:	b29b      	uxth	r3, r3
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	3b01      	subs	r3, #1
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	3b01      	subs	r3, #1
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004056:	4935      	ldr	r1, [pc, #212]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800405c:	4b33      	ldr	r3, [pc, #204]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4a32      	ldr	r2, [pc, #200]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004068:	4b30      	ldr	r3, [pc, #192]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 800406a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406c:	4b32      	ldr	r3, [pc, #200]	; (8004138 <HAL_RCC_OscConfig+0x7bc>)
 800406e:	4013      	ands	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004074:	00d2      	lsls	r2, r2, #3
 8004076:	492d      	ldr	r1, [pc, #180]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	f023 020c 	bic.w	r2, r3, #12
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	4928      	ldr	r1, [pc, #160]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800408e:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	f023 0202 	bic.w	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	4924      	ldr	r1, [pc, #144]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 800409c:	4313      	orrs	r3, r2
 800409e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040a0:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4a21      	ldr	r2, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ac:	4b1f      	ldr	r3, [pc, #124]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	4a1e      	ldr	r2, [pc, #120]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040d0:	4b16      	ldr	r3, [pc, #88]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a15      	ldr	r2, [pc, #84]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fc facc 	bl	8000678 <HAL_GetTick>
 80040e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fc fac8 	bl	8000678 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e068      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x768>
 8004102:	e060      	b.n	80041c6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a08      	ldr	r2, [pc, #32]	; (800412c <HAL_RCC_OscConfig+0x7b0>)
 800410a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800410e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fc fab2 	bl	8000678 <HAL_GetTick>
 8004114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004116:	e011      	b.n	800413c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004118:	f7fc faae 	bl	8000678 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d90a      	bls.n	800413c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e04e      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400
 8004130:	58024800 	.word	0x58024800
 8004134:	fffffc0c 	.word	0xfffffc0c
 8004138:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCC_OscConfig+0x854>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e7      	bne.n	8004118 <HAL_RCC_OscConfig+0x79c>
 8004148:	e03d      	b.n	80041c6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800414a:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <HAL_RCC_OscConfig+0x854>)
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004150:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <HAL_RCC_OscConfig+0x854>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2b01      	cmp	r3, #1
 800415c:	d031      	beq.n	80041c2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f003 0203 	and.w	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d12a      	bne.n	80041c2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d122      	bne.n	80041c2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d11a      	bne.n	80041c2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	0a5b      	lsrs	r3, r3, #9
 8004190:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d111      	bne.n	80041c2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d108      	bne.n	80041c2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	0e1b      	lsrs	r3, r3, #24
 80041b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041be:	429a      	cmp	r2, r3
 80041c0:	d001      	beq.n	80041c6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3730      	adds	r7, #48	; 0x30
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	58024400 	.word	0x58024400

080041d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e19c      	b.n	8004522 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e8:	4b8a      	ldr	r3, [pc, #552]	; (8004414 <HAL_RCC_ClockConfig+0x240>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d910      	bls.n	8004218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b87      	ldr	r3, [pc, #540]	; (8004414 <HAL_RCC_ClockConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 020f 	bic.w	r2, r3, #15
 80041fe:	4985      	ldr	r1, [pc, #532]	; (8004414 <HAL_RCC_ClockConfig+0x240>)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b83      	ldr	r3, [pc, #524]	; (8004414 <HAL_RCC_ClockConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e184      	b.n	8004522 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	4b7b      	ldr	r3, [pc, #492]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004230:	429a      	cmp	r2, r3
 8004232:	d908      	bls.n	8004246 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004234:	4b78      	ldr	r3, [pc, #480]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	4975      	ldr	r1, [pc, #468]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004242:	4313      	orrs	r3, r2
 8004244:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d010      	beq.n	8004274 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	4b70      	ldr	r3, [pc, #448]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800425e:	429a      	cmp	r2, r3
 8004260:	d908      	bls.n	8004274 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004262:	4b6d      	ldr	r3, [pc, #436]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	496a      	ldr	r1, [pc, #424]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004270:	4313      	orrs	r3, r2
 8004272:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b00      	cmp	r3, #0
 800427e:	d010      	beq.n	80042a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	4b64      	ldr	r3, [pc, #400]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800428c:	429a      	cmp	r2, r3
 800428e:	d908      	bls.n	80042a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004290:	4b61      	ldr	r3, [pc, #388]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	495e      	ldr	r1, [pc, #376]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d010      	beq.n	80042d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d908      	bls.n	80042d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80042be:	4b56      	ldr	r3, [pc, #344]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	4953      	ldr	r1, [pc, #332]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	4b4d      	ldr	r3, [pc, #308]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d908      	bls.n	80042fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ec:	4b4a      	ldr	r3, [pc, #296]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f023 020f 	bic.w	r2, r3, #15
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4947      	ldr	r1, [pc, #284]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d055      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800430a:	4b43      	ldr	r3, [pc, #268]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4940      	ldr	r1, [pc, #256]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004318:	4313      	orrs	r3, r2
 800431a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d107      	bne.n	8004334 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004324:	4b3c      	ldr	r3, [pc, #240]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d121      	bne.n	8004374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0f6      	b.n	8004522 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d107      	bne.n	800434c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800433c:	4b36      	ldr	r3, [pc, #216]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d115      	bne.n	8004374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0ea      	b.n	8004522 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d107      	bne.n	8004364 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004354:	4b30      	ldr	r3, [pc, #192]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0de      	b.n	8004522 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004364:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0d6      	b.n	8004522 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004374:	4b28      	ldr	r3, [pc, #160]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f023 0207 	bic.w	r2, r3, #7
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4925      	ldr	r1, [pc, #148]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 8004382:	4313      	orrs	r3, r2
 8004384:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004386:	f7fc f977 	bl	8000678 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438c:	e00a      	b.n	80043a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438e:	f7fc f973 	bl	8000678 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f241 3288 	movw	r2, #5000	; 0x1388
 800439c:	4293      	cmp	r3, r2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e0be      	b.n	8004522 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d1eb      	bne.n	800438e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d010      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d208      	bcs.n	80043e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f023 020f 	bic.w	r2, r3, #15
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	490e      	ldr	r1, [pc, #56]	; (8004418 <HAL_RCC_ClockConfig+0x244>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_ClockConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d214      	bcs.n	800441c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <HAL_RCC_ClockConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 020f 	bic.w	r2, r3, #15
 80043fa:	4906      	ldr	r1, [pc, #24]	; (8004414 <HAL_RCC_ClockConfig+0x240>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <HAL_RCC_ClockConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d005      	beq.n	800441c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e086      	b.n	8004522 <HAL_RCC_ClockConfig+0x34e>
 8004414:	52002000 	.word	0x52002000
 8004418:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d010      	beq.n	800444a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	4b3f      	ldr	r3, [pc, #252]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004434:	429a      	cmp	r2, r3
 8004436:	d208      	bcs.n	800444a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004438:	4b3c      	ldr	r3, [pc, #240]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	4939      	ldr	r1, [pc, #228]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 8004446:	4313      	orrs	r3, r2
 8004448:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d010      	beq.n	8004478 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	4b34      	ldr	r3, [pc, #208]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004462:	429a      	cmp	r2, r3
 8004464:	d208      	bcs.n	8004478 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004466:	4b31      	ldr	r3, [pc, #196]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	492e      	ldr	r1, [pc, #184]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 8004474:	4313      	orrs	r3, r2
 8004476:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	d010      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	4b28      	ldr	r3, [pc, #160]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004490:	429a      	cmp	r2, r3
 8004492:	d208      	bcs.n	80044a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004494:	4b25      	ldr	r3, [pc, #148]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	4922      	ldr	r1, [pc, #136]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d010      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	4b1d      	ldr	r3, [pc, #116]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044be:	429a      	cmp	r2, r3
 80044c0:	d208      	bcs.n	80044d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80044c2:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	4917      	ldr	r1, [pc, #92]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044d4:	f000 f834 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b14      	ldr	r3, [pc, #80]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	4912      	ldr	r1, [pc, #72]	; (8004530 <HAL_RCC_ClockConfig+0x35c>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
 80044f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044f2:	4b0e      	ldr	r3, [pc, #56]	; (800452c <HAL_RCC_ClockConfig+0x358>)
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	4a0d      	ldr	r2, [pc, #52]	; (8004530 <HAL_RCC_ClockConfig+0x35c>)
 80044fc:	5cd3      	ldrb	r3, [r2, r3]
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
 8004508:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <HAL_RCC_ClockConfig+0x360>)
 800450a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800450c:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <HAL_RCC_ClockConfig+0x364>)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <HAL_RCC_ClockConfig+0x368>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f009 f9de 	bl	800d8d8 <HAL_InitTick>
 800451c:	4603      	mov	r3, r0
 800451e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004520:	7bfb      	ldrb	r3, [r7, #15]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	58024400 	.word	0x58024400
 8004530:	0800f7b8 	.word	0x0800f7b8
 8004534:	24000010 	.word	0x24000010
 8004538:	2400000c 	.word	0x2400000c
 800453c:	24000000 	.word	0x24000000

08004540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004540:	b480      	push	{r7}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004546:	4bb3      	ldr	r3, [pc, #716]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454e:	2b18      	cmp	r3, #24
 8004550:	f200 8155 	bhi.w	80047fe <HAL_RCC_GetSysClockFreq+0x2be>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	080045c1 	.word	0x080045c1
 8004560:	080047ff 	.word	0x080047ff
 8004564:	080047ff 	.word	0x080047ff
 8004568:	080047ff 	.word	0x080047ff
 800456c:	080047ff 	.word	0x080047ff
 8004570:	080047ff 	.word	0x080047ff
 8004574:	080047ff 	.word	0x080047ff
 8004578:	080047ff 	.word	0x080047ff
 800457c:	080045e7 	.word	0x080045e7
 8004580:	080047ff 	.word	0x080047ff
 8004584:	080047ff 	.word	0x080047ff
 8004588:	080047ff 	.word	0x080047ff
 800458c:	080047ff 	.word	0x080047ff
 8004590:	080047ff 	.word	0x080047ff
 8004594:	080047ff 	.word	0x080047ff
 8004598:	080047ff 	.word	0x080047ff
 800459c:	080045ed 	.word	0x080045ed
 80045a0:	080047ff 	.word	0x080047ff
 80045a4:	080047ff 	.word	0x080047ff
 80045a8:	080047ff 	.word	0x080047ff
 80045ac:	080047ff 	.word	0x080047ff
 80045b0:	080047ff 	.word	0x080047ff
 80045b4:	080047ff 	.word	0x080047ff
 80045b8:	080047ff 	.word	0x080047ff
 80045bc:	080045f3 	.word	0x080045f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045c0:	4b94      	ldr	r3, [pc, #592]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045cc:	4b91      	ldr	r3, [pc, #580]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	4a90      	ldr	r2, [pc, #576]	; (8004818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
 80045dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80045de:	e111      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80045e0:	4b8d      	ldr	r3, [pc, #564]	; (8004818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045e2:	61bb      	str	r3, [r7, #24]
    break;
 80045e4:	e10e      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80045e6:	4b8d      	ldr	r3, [pc, #564]	; (800481c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045e8:	61bb      	str	r3, [r7, #24]
    break;
 80045ea:	e10b      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80045ec:	4b8c      	ldr	r3, [pc, #560]	; (8004820 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045ee:	61bb      	str	r3, [r7, #24]
    break;
 80045f0:	e108      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045f2:	4b88      	ldr	r3, [pc, #544]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80045fc:	4b85      	ldr	r3, [pc, #532]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004606:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004608:	4b82      	ldr	r3, [pc, #520]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004612:	4b80      	ldr	r3, [pc, #512]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	08db      	lsrs	r3, r3, #3
 8004618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	fb02 f303 	mul.w	r3, r2, r3
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80e1 	beq.w	80047f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b02      	cmp	r3, #2
 800463a:	f000 8083 	beq.w	8004744 <HAL_RCC_GetSysClockFreq+0x204>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b02      	cmp	r3, #2
 8004642:	f200 80a1 	bhi.w	8004788 <HAL_RCC_GetSysClockFreq+0x248>
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x114>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d056      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004652:	e099      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004654:	4b6f      	ldr	r3, [pc, #444]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d02d      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004660:	4b6c      	ldr	r3, [pc, #432]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	08db      	lsrs	r3, r3, #3
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	4a6b      	ldr	r2, [pc, #428]	; (8004818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
 8004670:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	ee07 3a90 	vmov	s15, r3
 8004678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b62      	ldr	r3, [pc, #392]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a02 	vldr	s12, [r7, #8]
 800469e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004824 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80046ba:	e087      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004828 <HAL_RCC_GetSysClockFreq+0x2e8>
 80046ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ce:	4b51      	ldr	r3, [pc, #324]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046de:	ed97 6a02 	vldr	s12, [r7, #8]
 80046e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004824 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046fe:	e065      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800482c <HAL_RCC_GetSysClockFreq+0x2ec>
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004712:	4b40      	ldr	r3, [pc, #256]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004722:	ed97 6a02 	vldr	s12, [r7, #8]
 8004726:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004824 <HAL_RCC_GetSysClockFreq+0x2e4>
 800472a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004742:	e043      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004830 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004756:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004766:	ed97 6a02 	vldr	s12, [r7, #8]
 800476a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004824 <HAL_RCC_GetSysClockFreq+0x2e4>
 800476e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800477a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004786:	e021      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	eddf 6a26 	vldr	s13, [pc, #152]	; 800482c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479a:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004824 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	0a5b      	lsrs	r3, r3, #9
 80047d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d6:	3301      	adds	r3, #1
 80047d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047f0:	ee17 3a90 	vmov	r3, s15
 80047f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80047f6:	e005      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
    break;
 80047fc:	e002      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80047fe:	4b07      	ldr	r3, [pc, #28]	; (800481c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004800:	61bb      	str	r3, [r7, #24]
    break;
 8004802:	bf00      	nop
  }

  return sysclockfreq;
 8004804:	69bb      	ldr	r3, [r7, #24]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3724      	adds	r7, #36	; 0x24
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	58024400 	.word	0x58024400
 8004818:	03d09000 	.word	0x03d09000
 800481c:	003d0900 	.word	0x003d0900
 8004820:	017d7840 	.word	0x017d7840
 8004824:	46000000 	.word	0x46000000
 8004828:	4c742400 	.word	0x4c742400
 800482c:	4a742400 	.word	0x4a742400
 8004830:	4bbebc20 	.word	0x4bbebc20

08004834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800483a:	f7ff fe81 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 800483e:	4602      	mov	r2, r0
 8004840:	4b10      	ldr	r3, [pc, #64]	; (8004884 <HAL_RCC_GetHCLKFreq+0x50>)
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	490f      	ldr	r1, [pc, #60]	; (8004888 <HAL_RCC_GetHCLKFreq+0x54>)
 800484c:	5ccb      	ldrb	r3, [r1, r3]
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	fa22 f303 	lsr.w	r3, r2, r3
 8004856:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <HAL_RCC_GetHCLKFreq+0x50>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	4a09      	ldr	r2, [pc, #36]	; (8004888 <HAL_RCC_GetHCLKFreq+0x54>)
 8004862:	5cd3      	ldrb	r3, [r2, r3]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	4a07      	ldr	r2, [pc, #28]	; (800488c <HAL_RCC_GetHCLKFreq+0x58>)
 8004870:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004872:	4a07      	ldr	r2, [pc, #28]	; (8004890 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004878:	4b04      	ldr	r3, [pc, #16]	; (800488c <HAL_RCC_GetHCLKFreq+0x58>)
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	58024400 	.word	0x58024400
 8004888:	0800f7b8 	.word	0x0800f7b8
 800488c:	24000010 	.word	0x24000010
 8004890:	2400000c 	.word	0x2400000c

08004894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004898:	f7ff ffcc 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	4904      	ldr	r1, [pc, #16]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80048aa:	5ccb      	ldrb	r3, [r1, r3]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	58024400 	.word	0x58024400
 80048bc:	0800f7b8 	.word	0x0800f7b8

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80048c4:	f7ff ffb6 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	0a1b      	lsrs	r3, r3, #8
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4904      	ldr	r1, [pc, #16]	; (80048e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	58024400 	.word	0x58024400
 80048e8:	0800f7b8 	.word	0x0800f7b8

080048ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	223f      	movs	r2, #63	; 0x3f
 80048fa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048fc:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <HAL_RCC_GetClockConfig+0x7c>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f003 0207 	and.w	r2, r3, #7
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004908:	4b17      	ldr	r3, [pc, #92]	; (8004968 <HAL_RCC_GetClockConfig+0x7c>)
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004914:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_RCC_GetClockConfig+0x7c>)
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004920:	4b11      	ldr	r3, [pc, #68]	; (8004968 <HAL_RCC_GetClockConfig+0x7c>)
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <HAL_RCC_GetClockConfig+0x7c>)
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_GetClockConfig+0x7c>)
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <HAL_RCC_GetClockConfig+0x7c>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_RCC_GetClockConfig+0x80>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 020f 	and.w	r2, r3, #15
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	601a      	str	r2, [r3, #0]
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	58024400 	.word	0x58024400
 800496c:	52002000 	.word	0x52002000

08004970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004978:	2300      	movs	r3, #0
 800497a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800497c:	2300      	movs	r3, #0
 800497e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d03f      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004994:	d02a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004996:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800499a:	d824      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800499c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a0:	d018      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a6:	d81e      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b0:	d007      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049b2:	e018      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4bab      	ldr	r3, [pc, #684]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4aaa      	ldr	r2, [pc, #680]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049c0:	e015      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 f9cf 	bl	8005d6c <RCCEx_PLL2_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049d2:	e00c      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3324      	adds	r3, #36	; 0x24
 80049d8:	2102      	movs	r1, #2
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 fa78 	bl	8005ed0 <RCCEx_PLL3_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049e4:	e003      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
      break;
 80049ea:	e000      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d109      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049f4:	4b9b      	ldr	r3, [pc, #620]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a00:	4998      	ldr	r1, [pc, #608]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	650b      	str	r3, [r1, #80]	; 0x50
 8004a06:	e001      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d03d      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d826      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a20:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a3d 	.word	0x08004a3d
 8004a2c:	08004a4b 	.word	0x08004a4b
 8004a30:	08004a5d 	.word	0x08004a5d
 8004a34:	08004a75 	.word	0x08004a75
 8004a38:	08004a75 	.word	0x08004a75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a3c:	4b89      	ldr	r3, [pc, #548]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	4a88      	ldr	r2, [pc, #544]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a48:	e015      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 f98b 	bl	8005d6c <RCCEx_PLL2_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a5a:	e00c      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3324      	adds	r3, #36	; 0x24
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fa34 	bl	8005ed0 <RCCEx_PLL3_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a6c:	e003      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
      break;
 8004a72:	e000      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a7c:	4b79      	ldr	r3, [pc, #484]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a80:	f023 0207 	bic.w	r2, r3, #7
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a88:	4976      	ldr	r1, [pc, #472]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a8e:	e001      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d042      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa8:	d02b      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aae:	d825      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004ab0:	2bc0      	cmp	r3, #192	; 0xc0
 8004ab2:	d028      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ab4:	2bc0      	cmp	r3, #192	; 0xc0
 8004ab6:	d821      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d016      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d81d      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d007      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004ac8:	e018      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aca:	4b66      	ldr	r3, [pc, #408]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	4a65      	ldr	r2, [pc, #404]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ad6:	e017      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 f944 	bl	8005d6c <RCCEx_PLL2_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ae8:	e00e      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3324      	adds	r3, #36	; 0x24
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 f9ed 	bl	8005ed0 <RCCEx_PLL3_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004afa:	e005      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	75fb      	strb	r3, [r7, #23]
      break;
 8004b00:	e002      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004b02:	bf00      	nop
 8004b04:	e000      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b0e:	4b55      	ldr	r3, [pc, #340]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	4952      	ldr	r1, [pc, #328]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	650b      	str	r3, [r1, #80]	; 0x50
 8004b20:	e001      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d049      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b3c:	d030      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b42:	d82a      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b48:	d02c      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004b4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b4e:	d824      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b54:	d018      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5a:	d81e      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b64:	d007      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004b66:	e018      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b68:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4a3d      	ldr	r2, [pc, #244]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b74:	e017      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 f8f5 	bl	8005d6c <RCCEx_PLL2_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b86:	e00e      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3324      	adds	r3, #36	; 0x24
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 f99e 	bl	8005ed0 <RCCEx_PLL3_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b98:	e005      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ba0:	bf00      	nop
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004bac:	4b2d      	ldr	r3, [pc, #180]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bba:	492a      	ldr	r1, [pc, #168]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	658b      	str	r3, [r1, #88]	; 0x58
 8004bc0:	e001      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d04c      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bdc:	d030      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004be2:	d82a      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004be4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004be8:	d02c      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004bea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bee:	d824      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf4:	d018      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bfa:	d81e      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c04:	d007      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004c06:	e018      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c08:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c14:	e017      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f8a5 	bl	8005d6c <RCCEx_PLL2_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c26:	e00e      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3324      	adds	r3, #36	; 0x24
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 f94e 	bl	8005ed0 <RCCEx_PLL3_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c38:	e005      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10d      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c5a:	4902      	ldr	r1, [pc, #8]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	658b      	str	r3, [r1, #88]	; 0x58
 8004c60:	e004      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004c62:	bf00      	nop
 8004c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d032      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7c:	2b30      	cmp	r3, #48	; 0x30
 8004c7e:	d01c      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004c80:	2b30      	cmp	r3, #48	; 0x30
 8004c82:	d817      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d00c      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d813      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d016      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d10f      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c94:	4baf      	ldr	r3, [pc, #700]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4aae      	ldr	r2, [pc, #696]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ca0:	e00e      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 f85f 	bl	8005d6c <RCCEx_PLL2_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004cb2:	e005      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb8:	e002      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e000      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cc6:	4ba3      	ldr	r3, [pc, #652]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd2:	49a0      	ldr	r1, [pc, #640]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004cd8:	e001      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d047      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cf2:	d030      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cf8:	d82a      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004cfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cfe:	d02c      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d04:	d824      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0a:	d018      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d10:	d81e      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1a:	d007      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004d1c:	e018      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d1e:	4b8d      	ldr	r3, [pc, #564]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	4a8c      	ldr	r2, [pc, #560]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d2a:	e017      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 f81a 	bl	8005d6c <RCCEx_PLL2_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d3c:	e00e      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3324      	adds	r3, #36	; 0x24
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 f8c3 	bl	8005ed0 <RCCEx_PLL3_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d4e:	e005      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
      break;
 8004d54:	e002      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004d56:	bf00      	nop
 8004d58:	e000      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d5c:	7dfb      	ldrb	r3, [r7, #23]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d62:	4b7c      	ldr	r3, [pc, #496]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6e:	4979      	ldr	r1, [pc, #484]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	650b      	str	r3, [r1, #80]	; 0x50
 8004d74:	e001      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d049      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d8e:	d02e      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d94:	d828      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d9a:	d02a      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004da0:	d822      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004da2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004da6:	d026      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004da8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dac:	d81c      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db2:	d010      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db8:	d816      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01d      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc2:	d111      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	2101      	movs	r1, #1
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 ffce 	bl	8005d6c <RCCEx_PLL2_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004dd4:	e012      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3324      	adds	r3, #36	; 0x24
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 f877 	bl	8005ed0 <RCCEx_PLL3_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004de6:	e009      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	75fb      	strb	r3, [r7, #23]
      break;
 8004dec:	e006      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004dee:	bf00      	nop
 8004df0:	e004      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004df2:	bf00      	nop
 8004df4:	e002      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004df6:	bf00      	nop
 8004df8:	e000      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e02:	4b54      	ldr	r3, [pc, #336]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e06:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0e:	4951      	ldr	r1, [pc, #324]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	650b      	str	r3, [r1, #80]	; 0x50
 8004e14:	e001      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
 8004e18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d04b      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e30:	d02e      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e36:	d828      	bhi.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3c:	d02a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e42:	d822      	bhi.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e48:	d026      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e4e:	d81c      	bhi.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e54:	d010      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e5a:	d816      	bhi.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01d      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e64:	d111      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 ff7d 	bl	8005d6c <RCCEx_PLL2_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e76:	e012      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3324      	adds	r3, #36	; 0x24
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 f826 	bl	8005ed0 <RCCEx_PLL3_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e88:	e009      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8e:	e006      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e90:	bf00      	nop
 8004e92:	e004      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e94:	bf00      	nop
 8004e96:	e002      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e98:	bf00      	nop
 8004e9a:	e000      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ea4:	4b2b      	ldr	r3, [pc, #172]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004eb2:	4928      	ldr	r1, [pc, #160]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	658b      	str	r3, [r1, #88]	; 0x58
 8004eb8:	e001      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d02f      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed2:	d00e      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed8:	d814      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d015      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ee2:	d10f      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ef0:	e00c      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 ff37 	bl	8005d6c <RCCEx_PLL2_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f02:	e003      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	75fb      	strb	r3, [r7, #23]
      break;
 8004f08:	e000      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f1e:	490d      	ldr	r1, [pc, #52]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	650b      	str	r3, [r1, #80]	; 0x50
 8004f24:	e001      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d033      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d81c      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004f3e:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004f7f 	.word	0x08004f7f
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f67 	.word	0x08004f67
 8004f50:	08004f7f 	.word	0x08004f7f
 8004f54:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f58:	4bb8      	ldr	r3, [pc, #736]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4ab7      	ldr	r2, [pc, #732]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f64:	e00c      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fefd 	bl	8005d6c <RCCEx_PLL2_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f76:	e003      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f7c:	e000      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f86:	4bad      	ldr	r3, [pc, #692]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8a:	f023 0203 	bic.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	49aa      	ldr	r1, [pc, #680]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f98:	e001      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
 8004f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8086 	beq.w	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fac:	4ba4      	ldr	r3, [pc, #656]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4aa3      	ldr	r2, [pc, #652]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb8:	f7fb fb5e 	bl	8000678 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fbe:	e009      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc0:	f7fb fb5a 	bl	8000678 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b64      	cmp	r3, #100	; 0x64
 8004fcc:	d902      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	75fb      	strb	r3, [r7, #23]
        break;
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fd4:	4b9a      	ldr	r3, [pc, #616]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ef      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d166      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fe6:	4b95      	ldr	r3, [pc, #596]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ff0:	4053      	eors	r3, r2
 8004ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d013      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ffa:	4b90      	ldr	r3, [pc, #576]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005002:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005004:	4b8d      	ldr	r3, [pc, #564]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	4a8c      	ldr	r2, [pc, #560]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800500a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005010:	4b8a      	ldr	r3, [pc, #552]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	4a89      	ldr	r2, [pc, #548]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800501c:	4a87      	ldr	r2, [pc, #540]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502c:	d115      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fb fb23 	bl	8000678 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005034:	e00b      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fb fb1f 	bl	8000678 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f241 3288 	movw	r2, #5000	; 0x1388
 8005044:	4293      	cmp	r3, r2
 8005046:	d902      	bls.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	75fb      	strb	r3, [r7, #23]
            break;
 800504c:	e005      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800504e:	4b7b      	ldr	r3, [pc, #492]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0ed      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d126      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800506e:	d10d      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005070:	4b72      	ldr	r3, [pc, #456]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800507e:	0919      	lsrs	r1, r3, #4
 8005080:	4b70      	ldr	r3, [pc, #448]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005082:	400b      	ands	r3, r1
 8005084:	496d      	ldr	r1, [pc, #436]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	610b      	str	r3, [r1, #16]
 800508a:	e005      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800508c:	4b6b      	ldr	r3, [pc, #428]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	4a6a      	ldr	r2, [pc, #424]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005092:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005096:	6113      	str	r3, [r2, #16]
 8005098:	4b68      	ldr	r3, [pc, #416]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800509a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a6:	4965      	ldr	r1, [pc, #404]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	670b      	str	r3, [r1, #112]	; 0x70
 80050ac:	e004      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
 80050b0:	75bb      	strb	r3, [r7, #22]
 80050b2:	e001      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d07e      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050c8:	2b28      	cmp	r3, #40	; 0x28
 80050ca:	d867      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80050cc:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	080051a3 	.word	0x080051a3
 80050d8:	0800519d 	.word	0x0800519d
 80050dc:	0800519d 	.word	0x0800519d
 80050e0:	0800519d 	.word	0x0800519d
 80050e4:	0800519d 	.word	0x0800519d
 80050e8:	0800519d 	.word	0x0800519d
 80050ec:	0800519d 	.word	0x0800519d
 80050f0:	0800519d 	.word	0x0800519d
 80050f4:	08005179 	.word	0x08005179
 80050f8:	0800519d 	.word	0x0800519d
 80050fc:	0800519d 	.word	0x0800519d
 8005100:	0800519d 	.word	0x0800519d
 8005104:	0800519d 	.word	0x0800519d
 8005108:	0800519d 	.word	0x0800519d
 800510c:	0800519d 	.word	0x0800519d
 8005110:	0800519d 	.word	0x0800519d
 8005114:	0800518b 	.word	0x0800518b
 8005118:	0800519d 	.word	0x0800519d
 800511c:	0800519d 	.word	0x0800519d
 8005120:	0800519d 	.word	0x0800519d
 8005124:	0800519d 	.word	0x0800519d
 8005128:	0800519d 	.word	0x0800519d
 800512c:	0800519d 	.word	0x0800519d
 8005130:	0800519d 	.word	0x0800519d
 8005134:	080051a3 	.word	0x080051a3
 8005138:	0800519d 	.word	0x0800519d
 800513c:	0800519d 	.word	0x0800519d
 8005140:	0800519d 	.word	0x0800519d
 8005144:	0800519d 	.word	0x0800519d
 8005148:	0800519d 	.word	0x0800519d
 800514c:	0800519d 	.word	0x0800519d
 8005150:	0800519d 	.word	0x0800519d
 8005154:	080051a3 	.word	0x080051a3
 8005158:	0800519d 	.word	0x0800519d
 800515c:	0800519d 	.word	0x0800519d
 8005160:	0800519d 	.word	0x0800519d
 8005164:	0800519d 	.word	0x0800519d
 8005168:	0800519d 	.word	0x0800519d
 800516c:	0800519d 	.word	0x0800519d
 8005170:	0800519d 	.word	0x0800519d
 8005174:	080051a3 	.word	0x080051a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3304      	adds	r3, #4
 800517c:	2101      	movs	r1, #1
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fdf4 	bl	8005d6c <RCCEx_PLL2_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005188:	e00c      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3324      	adds	r3, #36	; 0x24
 800518e:	2101      	movs	r1, #1
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fe9d 	bl	8005ed0 <RCCEx_PLL3_Config>
 8005196:	4603      	mov	r3, r0
 8005198:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800519a:	e003      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	75fb      	strb	r3, [r7, #23]
      break;
 80051a0:	e000      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80051a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051aa:	4b24      	ldr	r3, [pc, #144]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051b6:	4921      	ldr	r1, [pc, #132]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	654b      	str	r3, [r1, #84]	; 0x54
 80051bc:	e001      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051be:	7dfb      	ldrb	r3, [r7, #23]
 80051c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d03e      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d2:	2b05      	cmp	r3, #5
 80051d4:	d820      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	0800521f 	.word	0x0800521f
 80051e0:	080051f5 	.word	0x080051f5
 80051e4:	08005207 	.word	0x08005207
 80051e8:	0800521f 	.word	0x0800521f
 80051ec:	0800521f 	.word	0x0800521f
 80051f0:	0800521f 	.word	0x0800521f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3304      	adds	r3, #4
 80051f8:	2101      	movs	r1, #1
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fdb6 	bl	8005d6c <RCCEx_PLL2_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005204:	e00c      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3324      	adds	r3, #36	; 0x24
 800520a:	2101      	movs	r1, #1
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fe5f 	bl	8005ed0 <RCCEx_PLL3_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005216:	e003      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
      break;
 800521c:	e000      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800521e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d110      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	f023 0207 	bic.w	r2, r3, #7
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	4902      	ldr	r1, [pc, #8]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005234:	4313      	orrs	r3, r2
 8005236:	654b      	str	r3, [r1, #84]	; 0x54
 8005238:	e008      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800523a:	bf00      	nop
 800523c:	58024400 	.word	0x58024400
 8005240:	58024800 	.word	0x58024800
 8005244:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d039      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525e:	2b05      	cmp	r3, #5
 8005260:	d820      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	080052ab 	.word	0x080052ab
 800526c:	08005281 	.word	0x08005281
 8005270:	08005293 	.word	0x08005293
 8005274:	080052ab 	.word	0x080052ab
 8005278:	080052ab 	.word	0x080052ab
 800527c:	080052ab 	.word	0x080052ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	2101      	movs	r1, #1
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fd70 	bl	8005d6c <RCCEx_PLL2_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005290:	e00c      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3324      	adds	r3, #36	; 0x24
 8005296:	2101      	movs	r1, #1
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fe19 	bl	8005ed0 <RCCEx_PLL3_Config>
 800529e:	4603      	mov	r3, r0
 80052a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80052a2:	e003      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	75fb      	strb	r3, [r7, #23]
      break;
 80052a8:	e000      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80052aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ac:	7dfb      	ldrb	r3, [r7, #23]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052b2:	4bb7      	ldr	r3, [pc, #732]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	f023 0207 	bic.w	r2, r3, #7
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	49b3      	ldr	r1, [pc, #716]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	658b      	str	r3, [r1, #88]	; 0x58
 80052c6:	e001      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
 80052ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d04b      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052e2:	d02e      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80052e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052e8:	d828      	bhi.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ee:	d02a      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80052f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f4:	d822      	bhi.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80052f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052fa:	d026      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80052fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005300:	d81c      	bhi.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005306:	d010      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800530c:	d816      	bhi.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01d      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005316:	d111      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3304      	adds	r3, #4
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fd24 	bl	8005d6c <RCCEx_PLL2_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005328:	e012      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3324      	adds	r3, #36	; 0x24
 800532e:	2102      	movs	r1, #2
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fdcd 	bl	8005ed0 <RCCEx_PLL3_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800533a:	e009      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75fb      	strb	r3, [r7, #23]
      break;
 8005340:	e006      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005342:	bf00      	nop
 8005344:	e004      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005346:	bf00      	nop
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800534e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005356:	4b8e      	ldr	r3, [pc, #568]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005364:	498a      	ldr	r1, [pc, #552]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005366:	4313      	orrs	r3, r2
 8005368:	654b      	str	r3, [r1, #84]	; 0x54
 800536a:	e001      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d04b      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005386:	d02e      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800538c:	d828      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005392:	d02a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005398:	d822      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800539a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800539e:	d026      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80053a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053a4:	d81c      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80053a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053aa:	d010      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80053ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b0:	d816      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01d      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80053b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ba:	d111      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3304      	adds	r3, #4
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fcd2 	bl	8005d6c <RCCEx_PLL2_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053cc:	e012      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3324      	adds	r3, #36	; 0x24
 80053d2:	2102      	movs	r1, #2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fd7b 	bl	8005ed0 <RCCEx_PLL3_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053de:	e009      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	75fb      	strb	r3, [r7, #23]
      break;
 80053e4:	e006      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80053e6:	bf00      	nop
 80053e8:	e004      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80053ea:	bf00      	nop
 80053ec:	e002      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80053f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053fa:	4b65      	ldr	r3, [pc, #404]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005408:	4961      	ldr	r1, [pc, #388]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800540a:	4313      	orrs	r3, r2
 800540c:	658b      	str	r3, [r1, #88]	; 0x58
 800540e:	e001      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541c:	2b00      	cmp	r3, #0
 800541e:	d04b      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005426:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800542a:	d02e      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800542c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005430:	d828      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005436:	d02a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543c:	d822      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800543e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005442:	d026      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005444:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005448:	d81c      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800544a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800544e:	d010      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005454:	d816      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01d      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800545a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545e:	d111      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fc80 	bl	8005d6c <RCCEx_PLL2_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005470:	e012      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3324      	adds	r3, #36	; 0x24
 8005476:	2102      	movs	r1, #2
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fd29 	bl	8005ed0 <RCCEx_PLL3_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005482:	e009      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
      break;
 8005488:	e006      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800548a:	bf00      	nop
 800548c:	e004      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800548e:	bf00      	nop
 8005490:	e002      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005492:	bf00      	nop
 8005494:	e000      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800549e:	4b3c      	ldr	r3, [pc, #240]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ac:	4938      	ldr	r1, [pc, #224]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	658b      	str	r3, [r1, #88]	; 0x58
 80054b2:	e001      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	d10a      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3324      	adds	r3, #36	; 0x24
 80054d4:	2102      	movs	r1, #2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fcfa 	bl	8005ed0 <RCCEx_PLL3_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054e6:	4b2a      	ldr	r3, [pc, #168]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f4:	4926      	ldr	r1, [pc, #152]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01a      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005510:	d10a      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3324      	adds	r3, #36	; 0x24
 8005516:	2102      	movs	r1, #2
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fcd9 	bl	8005ed0 <RCCEx_PLL3_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005536:	4916      	ldr	r1, [pc, #88]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005538:	4313      	orrs	r3, r2
 800553a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d036      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800554e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005552:	d01f      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005558:	d817      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800555e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005562:	d009      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005564:	e011      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fbfd 	bl	8005d6c <RCCEx_PLL2_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005576:	e00e      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3324      	adds	r3, #36	; 0x24
 800557c:	2102      	movs	r1, #2
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fca6 	bl	8005ed0 <RCCEx_PLL3_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005588:	e005      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
      break;
 800558e:	e002      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005590:	58024400 	.word	0x58024400
      break;
 8005594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800559c:	4b93      	ldr	r3, [pc, #588]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800559e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055aa:	4990      	ldr	r1, [pc, #576]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	658b      	str	r3, [r1, #88]	; 0x58
 80055b0:	e001      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d033      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055cc:	d01c      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80055ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055d2:	d816      	bhi.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80055d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d8:	d003      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80055da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055de:	d007      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80055e0:	e00f      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e2:	4b82      	ldr	r3, [pc, #520]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	4a81      	ldr	r2, [pc, #516]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80055ee:	e00c      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3324      	adds	r3, #36	; 0x24
 80055f4:	2101      	movs	r1, #1
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fc6a 	bl	8005ed0 <RCCEx_PLL3_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005600:	e003      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
      break;
 8005606:	e000      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005610:	4b76      	ldr	r3, [pc, #472]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800561e:	4973      	ldr	r1, [pc, #460]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005620:	4313      	orrs	r3, r2
 8005622:	654b      	str	r3, [r1, #84]	; 0x54
 8005624:	e001      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d029      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800563e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005642:	d007      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005644:	e00f      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005646:	4b69      	ldr	r3, [pc, #420]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	4a68      	ldr	r2, [pc, #416]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800564c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005652:	e00b      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	2102      	movs	r1, #2
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fb86 	bl	8005d6c <RCCEx_PLL2_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005664:	e002      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
      break;
 800566a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005672:	4b5e      	ldr	r3, [pc, #376]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567e:	495b      	ldr	r1, [pc, #364]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005680:	4313      	orrs	r3, r2
 8005682:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005684:	e001      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3324      	adds	r3, #36	; 0x24
 800569a:	2102      	movs	r1, #2
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fc17 	bl	8005ed0 <RCCEx_PLL3_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d030      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c0:	d017      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80056c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c6:	d811      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80056c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056cc:	d013      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80056ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d2:	d80b      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80056d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056dc:	d106      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056de:	4b43      	ldr	r3, [pc, #268]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	4a42      	ldr	r2, [pc, #264]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80056ea:	e007      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	75fb      	strb	r3, [r7, #23]
      break;
 80056f0:	e004      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80056f2:	bf00      	nop
 80056f4:	e002      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80056f6:	bf00      	nop
 80056f8:	e000      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80056fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005702:	4b3a      	ldr	r3, [pc, #232]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800570e:	4937      	ldr	r1, [pc, #220]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005710:	4313      	orrs	r3, r2
 8005712:	654b      	str	r3, [r1, #84]	; 0x54
 8005714:	e001      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005716:	7dfb      	ldrb	r3, [r7, #23]
 8005718:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005726:	4b31      	ldr	r3, [pc, #196]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	492e      	ldr	r1, [pc, #184]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d009      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005744:	4b29      	ldr	r3, [pc, #164]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005752:	4926      	ldr	r1, [pc, #152]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005754:	4313      	orrs	r3, r2
 8005756:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005764:	4b21      	ldr	r3, [pc, #132]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005768:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005770:	491e      	ldr	r1, [pc, #120]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00d      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005782:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	4a19      	ldr	r2, [pc, #100]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800578c:	6113      	str	r3, [r2, #16]
 800578e:	4b17      	ldr	r3, [pc, #92]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005790:	691a      	ldr	r2, [r3, #16]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005798:	4914      	ldr	r1, [pc, #80]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800579a:	4313      	orrs	r3, r2
 800579c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	da08      	bge.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057a6:	4b11      	ldr	r3, [pc, #68]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	490e      	ldr	r1, [pc, #56]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057c4:	4b09      	ldr	r3, [pc, #36]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	4906      	ldr	r1, [pc, #24]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80057d8:	7dbb      	ldrb	r3, [r7, #22]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	e000      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	58024400 	.word	0x58024400

080057f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80057f4:	f7ff f81e 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 80057f8:	4602      	mov	r2, r0
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	091b      	lsrs	r3, r3, #4
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	4904      	ldr	r1, [pc, #16]	; (8005818 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005806:	5ccb      	ldrb	r3, [r1, r3]
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd80      	pop	{r7, pc}
 8005814:	58024400 	.word	0x58024400
 8005818:	0800f7b8 	.word	0x0800f7b8

0800581c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800581c:	b480      	push	{r7}
 800581e:	b089      	sub	sp, #36	; 0x24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005824:	4ba1      	ldr	r3, [pc, #644]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800582e:	4b9f      	ldr	r3, [pc, #636]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	0b1b      	lsrs	r3, r3, #12
 8005834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005838:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800583a:	4b9c      	ldr	r3, [pc, #624]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	091b      	lsrs	r3, r3, #4
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005846:	4b99      	ldr	r3, [pc, #612]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	08db      	lsrs	r3, r3, #3
 800584c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	fb02 f303 	mul.w	r3, r2, r3
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8111 	beq.w	8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b02      	cmp	r3, #2
 800586e:	f000 8083 	beq.w	8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	2b02      	cmp	r3, #2
 8005876:	f200 80a1 	bhi.w	80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d056      	beq.n	8005934 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005886:	e099      	b.n	80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005888:	4b88      	ldr	r3, [pc, #544]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	d02d      	beq.n	80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005894:	4b85      	ldr	r3, [pc, #532]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	08db      	lsrs	r3, r3, #3
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	4a84      	ldr	r2, [pc, #528]	; (8005ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
 80058a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058be:	4b7b      	ldr	r3, [pc, #492]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80058d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80058ee:	e087      	b.n	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80058fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005902:	4b6a      	ldr	r3, [pc, #424]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005912:	ed97 6a03 	vldr	s12, [r7, #12]
 8005916:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800591a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800592a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005932:	e065      	b.n	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005abc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005946:	4b59      	ldr	r3, [pc, #356]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005956:	ed97 6a03 	vldr	s12, [r7, #12]
 800595a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800595e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800596a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005976:	e043      	b.n	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005982:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800598a:	4b48      	ldr	r3, [pc, #288]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599a:	ed97 6a03 	vldr	s12, [r7, #12]
 800599e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ba:	e021      	b.n	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005abc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ce:	4b37      	ldr	r3, [pc, #220]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059de:	ed97 6a03 	vldr	s12, [r7, #12]
 80059e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005a00:	4b2a      	ldr	r3, [pc, #168]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	0a5b      	lsrs	r3, r3, #9
 8005a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a26:	ee17 2a90 	vmov	r2, s15
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005a2e:	4b1f      	ldr	r3, [pc, #124]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	0c1b      	lsrs	r3, r3, #16
 8005a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a38:	ee07 3a90 	vmov	s15, r3
 8005a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a54:	ee17 2a90 	vmov	r2, s15
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005a5c:	4b13      	ldr	r3, [pc, #76]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	0e1b      	lsrs	r3, r3, #24
 8005a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a82:	ee17 2a90 	vmov	r2, s15
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a8a:	e008      	b.n	8005a9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	609a      	str	r2, [r3, #8]
}
 8005a9e:	bf00      	nop
 8005aa0:	3724      	adds	r7, #36	; 0x24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	03d09000 	.word	0x03d09000
 8005ab4:	46000000 	.word	0x46000000
 8005ab8:	4c742400 	.word	0x4c742400
 8005abc:	4a742400 	.word	0x4a742400
 8005ac0:	4bbebc20 	.word	0x4bbebc20

08005ac4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	; 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005acc:	4ba1      	ldr	r3, [pc, #644]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005ad6:	4b9f      	ldr	r3, [pc, #636]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	0d1b      	lsrs	r3, r3, #20
 8005adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ae2:	4b9c      	ldr	r3, [pc, #624]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005aee:	4b99      	ldr	r3, [pc, #612]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af2:	08db      	lsrs	r3, r3, #3
 8005af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8111 	beq.w	8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	f000 8083 	beq.w	8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	f200 80a1 	bhi.w	8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d056      	beq.n	8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b2e:	e099      	b.n	8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b30:	4b88      	ldr	r3, [pc, #544]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d02d      	beq.n	8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b3c:	4b85      	ldr	r3, [pc, #532]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	08db      	lsrs	r3, r3, #3
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	4a84      	ldr	r2, [pc, #528]	; (8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b66:	4b7b      	ldr	r3, [pc, #492]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b96:	e087      	b.n	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005baa:	4b6a      	ldr	r3, [pc, #424]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bda:	e065      	b.n	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	4b59      	ldr	r3, [pc, #356]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c1e:	e043      	b.n	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b48      	ldr	r3, [pc, #288]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c62:	e021      	b.n	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c76:	4b37      	ldr	r3, [pc, #220]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ca6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005ca8:	4b2a      	ldr	r3, [pc, #168]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	0a5b      	lsrs	r3, r3, #9
 8005cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cce:	ee17 2a90 	vmov	r2, s15
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005cd6:	4b1f      	ldr	r3, [pc, #124]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfc:	ee17 2a90 	vmov	r2, s15
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	0e1b      	lsrs	r3, r3, #24
 8005d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d2a:	ee17 2a90 	vmov	r2, s15
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d32:	e008      	b.n	8005d46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	609a      	str	r2, [r3, #8]
}
 8005d46:	bf00      	nop
 8005d48:	3724      	adds	r7, #36	; 0x24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	58024400 	.word	0x58024400
 8005d58:	03d09000 	.word	0x03d09000
 8005d5c:	46000000 	.word	0x46000000
 8005d60:	4c742400 	.word	0x4c742400
 8005d64:	4a742400 	.word	0x4a742400
 8005d68:	4bbebc20 	.word	0x4bbebc20

08005d6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d7a:	4b53      	ldr	r3, [pc, #332]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d101      	bne.n	8005d8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e099      	b.n	8005ebe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005d8a:	4b4f      	ldr	r3, [pc, #316]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a4e      	ldr	r2, [pc, #312]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005d90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d96:	f7fa fc6f 	bl	8000678 <HAL_GetTick>
 8005d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d9c:	e008      	b.n	8005db0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d9e:	f7fa fc6b 	bl	8000678 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e086      	b.n	8005ebe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005db0:	4b45      	ldr	r3, [pc, #276]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1f0      	bne.n	8005d9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005dbc:	4b42      	ldr	r3, [pc, #264]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	031b      	lsls	r3, r3, #12
 8005dca:	493f      	ldr	r1, [pc, #252]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	628b      	str	r3, [r1, #40]	; 0x28
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	025b      	lsls	r3, r3, #9
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	041b      	lsls	r3, r3, #16
 8005dee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	061b      	lsls	r3, r3, #24
 8005dfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e00:	4931      	ldr	r1, [pc, #196]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e06:	4b30      	ldr	r3, [pc, #192]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	492d      	ldr	r1, [pc, #180]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e18:	4b2b      	ldr	r3, [pc, #172]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	f023 0220 	bic.w	r2, r3, #32
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	4928      	ldr	r1, [pc, #160]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e2a:	4b27      	ldr	r3, [pc, #156]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	4a26      	ldr	r2, [pc, #152]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e30:	f023 0310 	bic.w	r3, r3, #16
 8005e34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e36:	4b24      	ldr	r3, [pc, #144]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <RCCEx_PLL2_Config+0x160>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	69d2      	ldr	r2, [r2, #28]
 8005e42:	00d2      	lsls	r2, r2, #3
 8005e44:	4920      	ldr	r1, [pc, #128]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e4a:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	4a1e      	ldr	r2, [pc, #120]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e50:	f043 0310 	orr.w	r3, r3, #16
 8005e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d106      	bne.n	8005e6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	4a19      	ldr	r2, [pc, #100]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e68:	e00f      	b.n	8005e8a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d106      	bne.n	8005e7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e70:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e7c:	e005      	b.n	8005e8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e7e:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	4a11      	ldr	r2, [pc, #68]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a0e      	ldr	r2, [pc, #56]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005e90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e96:	f7fa fbef 	bl	8000678 <HAL_GetTick>
 8005e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e9c:	e008      	b.n	8005eb0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e9e:	f7fa fbeb 	bl	8000678 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e006      	b.n	8005ebe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <RCCEx_PLL2_Config+0x15c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0f0      	beq.n	8005e9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	ffff0007 	.word	0xffff0007

08005ed0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ede:	4b53      	ldr	r3, [pc, #332]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d101      	bne.n	8005eee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e099      	b.n	8006022 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005eee:	4b4f      	ldr	r3, [pc, #316]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a4e      	ldr	r2, [pc, #312]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005efa:	f7fa fbbd 	bl	8000678 <HAL_GetTick>
 8005efe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f00:	e008      	b.n	8005f14 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f02:	f7fa fbb9 	bl	8000678 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e086      	b.n	8006022 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f14:	4b45      	ldr	r3, [pc, #276]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1f0      	bne.n	8005f02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f20:	4b42      	ldr	r3, [pc, #264]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	051b      	lsls	r3, r3, #20
 8005f2e:	493f      	ldr	r1, [pc, #252]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	628b      	str	r3, [r1, #40]	; 0x28
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	025b      	lsls	r3, r3, #9
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	061b      	lsls	r3, r3, #24
 8005f60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f64:	4931      	ldr	r1, [pc, #196]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f6a:	4b30      	ldr	r3, [pc, #192]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	492d      	ldr	r1, [pc, #180]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f7c:	4b2b      	ldr	r3, [pc, #172]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	4928      	ldr	r1, [pc, #160]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f8e:	4b27      	ldr	r3, [pc, #156]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	4a26      	ldr	r2, [pc, #152]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9e:	4b24      	ldr	r3, [pc, #144]	; (8006030 <RCCEx_PLL3_Config+0x160>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	69d2      	ldr	r2, [r2, #28]
 8005fa6:	00d2      	lsls	r2, r2, #3
 8005fa8:	4920      	ldr	r1, [pc, #128]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005fae:	4b1f      	ldr	r3, [pc, #124]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	4a1e      	ldr	r2, [pc, #120]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005fc0:	4b1a      	ldr	r3, [pc, #104]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	4a19      	ldr	r2, [pc, #100]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005fc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fcc:	e00f      	b.n	8005fee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d106      	bne.n	8005fe2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	4a14      	ldr	r2, [pc, #80]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005fda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fe0:	e005      	b.n	8005fee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005fe2:	4b12      	ldr	r3, [pc, #72]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe6:	4a11      	ldr	r2, [pc, #68]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005fe8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a0e      	ldr	r2, [pc, #56]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8005ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ffa:	f7fa fb3d 	bl	8000678 <HAL_GetTick>
 8005ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006000:	e008      	b.n	8006014 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006002:	f7fa fb39 	bl	8000678 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e006      	b.n	8006022 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006014:	4b05      	ldr	r3, [pc, #20]	; (800602c <RCCEx_PLL3_Config+0x15c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0f0      	beq.n	8006002 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400
 8006030:	ffff0007 	.word	0xffff0007

08006034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e049      	b.n	80060da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f008 fc50 	bl	800e900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3304      	adds	r3, #4
 8006070:	4619      	mov	r1, r3
 8006072:	4610      	mov	r0, r2
 8006074:	f000 fd72 	bl	8006b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d001      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e054      	b.n	80061a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a26      	ldr	r2, [pc, #152]	; (80061b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d022      	beq.n	8006164 <HAL_TIM_Base_Start_IT+0x80>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006126:	d01d      	beq.n	8006164 <HAL_TIM_Base_Start_IT+0x80>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a22      	ldr	r2, [pc, #136]	; (80061b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d018      	beq.n	8006164 <HAL_TIM_Base_Start_IT+0x80>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a21      	ldr	r2, [pc, #132]	; (80061bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d013      	beq.n	8006164 <HAL_TIM_Base_Start_IT+0x80>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00e      	beq.n	8006164 <HAL_TIM_Base_Start_IT+0x80>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1e      	ldr	r2, [pc, #120]	; (80061c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d009      	beq.n	8006164 <HAL_TIM_Base_Start_IT+0x80>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1c      	ldr	r2, [pc, #112]	; (80061c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d004      	beq.n	8006164 <HAL_TIM_Base_Start_IT+0x80>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1b      	ldr	r2, [pc, #108]	; (80061cc <HAL_TIM_Base_Start_IT+0xe8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d115      	bne.n	8006190 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <HAL_TIM_Base_Start_IT+0xec>)
 800616c:	4013      	ands	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b06      	cmp	r3, #6
 8006174:	d015      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0xbe>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617c:	d011      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0201 	orr.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618e:	e008      	b.n	80061a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	e000      	b.n	80061a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800
 80061c0:	40000c00 	.word	0x40000c00
 80061c4:	40010400 	.word	0x40010400
 80061c8:	40001800 	.word	0x40001800
 80061cc:	40014000 	.word	0x40014000
 80061d0:	00010007 	.word	0x00010007

080061d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e049      	b.n	800627a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f841 	bl	8006282 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f000 fca2 	bl	8006b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <HAL_TIM_PWM_Start+0x24>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	bf14      	ite	ne
 80062b4:	2301      	movne	r3, #1
 80062b6:	2300      	moveq	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	e03c      	b.n	8006336 <HAL_TIM_PWM_Start+0x9e>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d109      	bne.n	80062d6 <HAL_TIM_PWM_Start+0x3e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	bf14      	ite	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	2300      	moveq	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	e02f      	b.n	8006336 <HAL_TIM_PWM_Start+0x9e>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d109      	bne.n	80062f0 <HAL_TIM_PWM_Start+0x58>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	bf14      	ite	ne
 80062e8:	2301      	movne	r3, #1
 80062ea:	2300      	moveq	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	e022      	b.n	8006336 <HAL_TIM_PWM_Start+0x9e>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b0c      	cmp	r3, #12
 80062f4:	d109      	bne.n	800630a <HAL_TIM_PWM_Start+0x72>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b01      	cmp	r3, #1
 8006300:	bf14      	ite	ne
 8006302:	2301      	movne	r3, #1
 8006304:	2300      	moveq	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	e015      	b.n	8006336 <HAL_TIM_PWM_Start+0x9e>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b10      	cmp	r3, #16
 800630e:	d109      	bne.n	8006324 <HAL_TIM_PWM_Start+0x8c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	bf14      	ite	ne
 800631c:	2301      	movne	r3, #1
 800631e:	2300      	moveq	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	e008      	b.n	8006336 <HAL_TIM_PWM_Start+0x9e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	bf14      	ite	ne
 8006330:	2301      	movne	r3, #1
 8006332:	2300      	moveq	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e0a1      	b.n	8006482 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <HAL_TIM_PWM_Start+0xb6>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800634c:	e023      	b.n	8006396 <HAL_TIM_PWM_Start+0xfe>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b04      	cmp	r3, #4
 8006352:	d104      	bne.n	800635e <HAL_TIM_PWM_Start+0xc6>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800635c:	e01b      	b.n	8006396 <HAL_TIM_PWM_Start+0xfe>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b08      	cmp	r3, #8
 8006362:	d104      	bne.n	800636e <HAL_TIM_PWM_Start+0xd6>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800636c:	e013      	b.n	8006396 <HAL_TIM_PWM_Start+0xfe>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b0c      	cmp	r3, #12
 8006372:	d104      	bne.n	800637e <HAL_TIM_PWM_Start+0xe6>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800637c:	e00b      	b.n	8006396 <HAL_TIM_PWM_Start+0xfe>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b10      	cmp	r3, #16
 8006382:	d104      	bne.n	800638e <HAL_TIM_PWM_Start+0xf6>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800638c:	e003      	b.n	8006396 <HAL_TIM_PWM_Start+0xfe>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2201      	movs	r2, #1
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 ffea 	bl	8007378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a38      	ldr	r2, [pc, #224]	; (800648c <HAL_TIM_PWM_Start+0x1f4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <HAL_TIM_PWM_Start+0x13e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a37      	ldr	r2, [pc, #220]	; (8006490 <HAL_TIM_PWM_Start+0x1f8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00e      	beq.n	80063d6 <HAL_TIM_PWM_Start+0x13e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a35      	ldr	r2, [pc, #212]	; (8006494 <HAL_TIM_PWM_Start+0x1fc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d009      	beq.n	80063d6 <HAL_TIM_PWM_Start+0x13e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a34      	ldr	r2, [pc, #208]	; (8006498 <HAL_TIM_PWM_Start+0x200>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d004      	beq.n	80063d6 <HAL_TIM_PWM_Start+0x13e>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a32      	ldr	r2, [pc, #200]	; (800649c <HAL_TIM_PWM_Start+0x204>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d101      	bne.n	80063da <HAL_TIM_PWM_Start+0x142>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_TIM_PWM_Start+0x144>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d007      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a25      	ldr	r2, [pc, #148]	; (800648c <HAL_TIM_PWM_Start+0x1f4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <HAL_TIM_PWM_Start+0x1a8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006402:	d01d      	beq.n	8006440 <HAL_TIM_PWM_Start+0x1a8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a25      	ldr	r2, [pc, #148]	; (80064a0 <HAL_TIM_PWM_Start+0x208>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_TIM_PWM_Start+0x1a8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a24      	ldr	r2, [pc, #144]	; (80064a4 <HAL_TIM_PWM_Start+0x20c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <HAL_TIM_PWM_Start+0x1a8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a22      	ldr	r2, [pc, #136]	; (80064a8 <HAL_TIM_PWM_Start+0x210>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_TIM_PWM_Start+0x1a8>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <HAL_TIM_PWM_Start+0x1f8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_TIM_PWM_Start+0x1a8>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <HAL_TIM_PWM_Start+0x214>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_TIM_PWM_Start+0x1a8>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a16      	ldr	r2, [pc, #88]	; (8006494 <HAL_TIM_PWM_Start+0x1fc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d115      	bne.n	800646c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	4b1a      	ldr	r3, [pc, #104]	; (80064b0 <HAL_TIM_PWM_Start+0x218>)
 8006448:	4013      	ands	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b06      	cmp	r3, #6
 8006450:	d015      	beq.n	800647e <HAL_TIM_PWM_Start+0x1e6>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006458:	d011      	beq.n	800647e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0201 	orr.w	r2, r2, #1
 8006468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646a:	e008      	b.n	800647e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e000      	b.n	8006480 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40010400 	.word	0x40010400
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40001800 	.word	0x40001800
 80064b0:	00010007 	.word	0x00010007

080064b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d122      	bne.n	8006510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d11b      	bne.n	8006510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0202 	mvn.w	r2, #2
 80064e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fb12 	bl	8006b20 <HAL_TIM_IC_CaptureCallback>
 80064fc:	e005      	b.n	800650a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fb04 	bl	8006b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fb15 	bl	8006b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b04      	cmp	r3, #4
 800651c:	d122      	bne.n	8006564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b04      	cmp	r3, #4
 800652a:	d11b      	bne.n	8006564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0204 	mvn.w	r2, #4
 8006534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fae8 	bl	8006b20 <HAL_TIM_IC_CaptureCallback>
 8006550:	e005      	b.n	800655e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fada 	bl	8006b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 faeb 	bl	8006b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b08      	cmp	r3, #8
 8006570:	d122      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b08      	cmp	r3, #8
 800657e:	d11b      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0208 	mvn.w	r2, #8
 8006588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2204      	movs	r2, #4
 800658e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fabe 	bl	8006b20 <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fab0 	bl	8006b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fac1 	bl	8006b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2b10      	cmp	r3, #16
 80065c4:	d122      	bne.n	800660c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d11b      	bne.n	800660c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0210 	mvn.w	r2, #16
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2208      	movs	r2, #8
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa94 	bl	8006b20 <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa86 	bl	8006b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fa97 	bl	8006b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b01      	cmp	r3, #1
 8006618:	d10e      	bne.n	8006638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d107      	bne.n	8006638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0201 	mvn.w	r2, #1
 8006630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f007 f91a 	bl	800d86c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d10e      	bne.n	8006664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006650:	2b80      	cmp	r3, #128	; 0x80
 8006652:	d107      	bne.n	8006664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800665c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 ffc6 	bl	80075f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006672:	d10e      	bne.n	8006692 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667e:	2b80      	cmp	r3, #128	; 0x80
 8006680:	d107      	bne.n	8006692 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800668a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 ffb9 	bl	8007604 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	d10e      	bne.n	80066be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d107      	bne.n	80066be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fa45 	bl	8006b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d10e      	bne.n	80066ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d107      	bne.n	80066ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f06f 0220 	mvn.w	r2, #32
 80066e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 ff79 	bl	80075dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800670e:	2302      	movs	r3, #2
 8006710:	e0ff      	b.n	8006912 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b14      	cmp	r3, #20
 800671e:	f200 80f0 	bhi.w	8006902 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800677d 	.word	0x0800677d
 800672c:	08006903 	.word	0x08006903
 8006730:	08006903 	.word	0x08006903
 8006734:	08006903 	.word	0x08006903
 8006738:	080067bd 	.word	0x080067bd
 800673c:	08006903 	.word	0x08006903
 8006740:	08006903 	.word	0x08006903
 8006744:	08006903 	.word	0x08006903
 8006748:	080067ff 	.word	0x080067ff
 800674c:	08006903 	.word	0x08006903
 8006750:	08006903 	.word	0x08006903
 8006754:	08006903 	.word	0x08006903
 8006758:	0800683f 	.word	0x0800683f
 800675c:	08006903 	.word	0x08006903
 8006760:	08006903 	.word	0x08006903
 8006764:	08006903 	.word	0x08006903
 8006768:	08006881 	.word	0x08006881
 800676c:	08006903 	.word	0x08006903
 8006770:	08006903 	.word	0x08006903
 8006774:	08006903 	.word	0x08006903
 8006778:	080068c1 	.word	0x080068c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fa84 	bl	8006c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0208 	orr.w	r2, r2, #8
 8006796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0204 	bic.w	r2, r2, #4
 80067a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6999      	ldr	r1, [r3, #24]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	619a      	str	r2, [r3, #24]
      break;
 80067ba:	e0a5      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 faf4 	bl	8006db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699a      	ldr	r2, [r3, #24]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6999      	ldr	r1, [r3, #24]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	021a      	lsls	r2, r3, #8
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	619a      	str	r2, [r3, #24]
      break;
 80067fc:	e084      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fb5d 	bl	8006ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0208 	orr.w	r2, r2, #8
 8006818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0204 	bic.w	r2, r2, #4
 8006828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69d9      	ldr	r1, [r3, #28]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	61da      	str	r2, [r3, #28]
      break;
 800683c:	e064      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fbc5 	bl	8006fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69d9      	ldr	r1, [r3, #28]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	021a      	lsls	r2, r3, #8
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	61da      	str	r2, [r3, #28]
      break;
 800687e:	e043      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fc0e 	bl	80070a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0208 	orr.w	r2, r2, #8
 800689a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0204 	bic.w	r2, r2, #4
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068be:	e023      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fc52 	bl	8007170 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	021a      	lsls	r2, r3, #8
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006900:	e002      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
      break;
 8006906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop

0800691c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIM_ConfigClockSource+0x1c>
 8006934:	2302      	movs	r3, #2
 8006936:	e0dc      	b.n	8006af2 <HAL_TIM_ConfigClockSource+0x1d6>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	4b6a      	ldr	r3, [pc, #424]	; (8006afc <HAL_TIM_ConfigClockSource+0x1e0>)
 8006954:	4013      	ands	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a64      	ldr	r2, [pc, #400]	; (8006b00 <HAL_TIM_ConfigClockSource+0x1e4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	f000 80a9 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006974:	4a62      	ldr	r2, [pc, #392]	; (8006b00 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	f200 80ae 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 800697c:	4a61      	ldr	r2, [pc, #388]	; (8006b04 <HAL_TIM_ConfigClockSource+0x1e8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	f000 80a1 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006984:	4a5f      	ldr	r2, [pc, #380]	; (8006b04 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	f200 80a6 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 800698c:	4a5e      	ldr	r2, [pc, #376]	; (8006b08 <HAL_TIM_ConfigClockSource+0x1ec>)
 800698e:	4293      	cmp	r3, r2
 8006990:	f000 8099 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006994:	4a5c      	ldr	r2, [pc, #368]	; (8006b08 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006996:	4293      	cmp	r3, r2
 8006998:	f200 809e 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 800699c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80069a0:	f000 8091 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 80069a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80069a8:	f200 8096 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80069ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b0:	f000 8089 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 80069b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b8:	f200 808e 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80069bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c0:	d03e      	beq.n	8006a40 <HAL_TIM_ConfigClockSource+0x124>
 80069c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c6:	f200 8087 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80069ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ce:	f000 8086 	beq.w	8006ade <HAL_TIM_ConfigClockSource+0x1c2>
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d6:	d87f      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80069d8:	2b70      	cmp	r3, #112	; 0x70
 80069da:	d01a      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0xf6>
 80069dc:	2b70      	cmp	r3, #112	; 0x70
 80069de:	d87b      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80069e0:	2b60      	cmp	r3, #96	; 0x60
 80069e2:	d050      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x16a>
 80069e4:	2b60      	cmp	r3, #96	; 0x60
 80069e6:	d877      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80069e8:	2b50      	cmp	r3, #80	; 0x50
 80069ea:	d03c      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x14a>
 80069ec:	2b50      	cmp	r3, #80	; 0x50
 80069ee:	d873      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	d058      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x18a>
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d86f      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 80069f8:	2b30      	cmp	r3, #48	; 0x30
 80069fa:	d064      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d86b      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d060      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d867      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d05c      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d05a      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006a10:	e062      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6899      	ldr	r1, [r3, #8]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f000 fc89 	bl	8007338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	609a      	str	r2, [r3, #8]
      break;
 8006a3e:	e04f      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6899      	ldr	r1, [r3, #8]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f000 fc72 	bl	8007338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a62:	609a      	str	r2, [r3, #8]
      break;
 8006a64:	e03c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f000 fbe2 	bl	800723c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2150      	movs	r1, #80	; 0x50
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fc3c 	bl	80072fc <TIM_ITRx_SetConfig>
      break;
 8006a84:	e02c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6859      	ldr	r1, [r3, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f000 fc01 	bl	800729a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2160      	movs	r1, #96	; 0x60
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fc2c 	bl	80072fc <TIM_ITRx_SetConfig>
      break;
 8006aa4:	e01c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6859      	ldr	r1, [r3, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f000 fbc2 	bl	800723c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2140      	movs	r1, #64	; 0x40
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fc1c 	bl	80072fc <TIM_ITRx_SetConfig>
      break;
 8006ac4:	e00c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	f000 fc13 	bl	80072fc <TIM_ITRx_SetConfig>
      break;
 8006ad6:	e003      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
      break;
 8006adc:	e000      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	ffceff88 	.word	0xffceff88
 8006b00:	00100040 	.word	0x00100040
 8006b04:	00100030 	.word	0x00100030
 8006b08:	00100020 	.word	0x00100020

08006b0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a40      	ldr	r2, [pc, #256]	; (8006c70 <TIM_Base_SetConfig+0x114>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7a:	d00f      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a3d      	ldr	r2, [pc, #244]	; (8006c74 <TIM_Base_SetConfig+0x118>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00b      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3c      	ldr	r2, [pc, #240]	; (8006c78 <TIM_Base_SetConfig+0x11c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3b      	ldr	r2, [pc, #236]	; (8006c7c <TIM_Base_SetConfig+0x120>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3a      	ldr	r2, [pc, #232]	; (8006c80 <TIM_Base_SetConfig+0x124>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d108      	bne.n	8006bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a2f      	ldr	r2, [pc, #188]	; (8006c70 <TIM_Base_SetConfig+0x114>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01f      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbc:	d01b      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a2c      	ldr	r2, [pc, #176]	; (8006c74 <TIM_Base_SetConfig+0x118>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d017      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2b      	ldr	r2, [pc, #172]	; (8006c78 <TIM_Base_SetConfig+0x11c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d013      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2a      	ldr	r2, [pc, #168]	; (8006c7c <TIM_Base_SetConfig+0x120>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00f      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a29      	ldr	r2, [pc, #164]	; (8006c80 <TIM_Base_SetConfig+0x124>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00b      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a28      	ldr	r2, [pc, #160]	; (8006c84 <TIM_Base_SetConfig+0x128>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d007      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a27      	ldr	r2, [pc, #156]	; (8006c88 <TIM_Base_SetConfig+0x12c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a26      	ldr	r2, [pc, #152]	; (8006c8c <TIM_Base_SetConfig+0x130>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d108      	bne.n	8006c08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a10      	ldr	r2, [pc, #64]	; (8006c70 <TIM_Base_SetConfig+0x114>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00f      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <TIM_Base_SetConfig+0x124>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00b      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a11      	ldr	r2, [pc, #68]	; (8006c84 <TIM_Base_SetConfig+0x128>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d007      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a10      	ldr	r2, [pc, #64]	; (8006c88 <TIM_Base_SetConfig+0x12c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a0f      	ldr	r2, [pc, #60]	; (8006c8c <TIM_Base_SetConfig+0x130>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d103      	bne.n	8006c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	615a      	str	r2, [r3, #20]
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40010400 	.word	0x40010400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800

08006c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f023 0201 	bic.w	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4b37      	ldr	r3, [pc, #220]	; (8006d98 <TIM_OC1_SetConfig+0x108>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f023 0302 	bic.w	r3, r3, #2
 8006cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a2d      	ldr	r2, [pc, #180]	; (8006d9c <TIM_OC1_SetConfig+0x10c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00f      	beq.n	8006d0c <TIM_OC1_SetConfig+0x7c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a2c      	ldr	r2, [pc, #176]	; (8006da0 <TIM_OC1_SetConfig+0x110>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00b      	beq.n	8006d0c <TIM_OC1_SetConfig+0x7c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a2b      	ldr	r2, [pc, #172]	; (8006da4 <TIM_OC1_SetConfig+0x114>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d007      	beq.n	8006d0c <TIM_OC1_SetConfig+0x7c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a2a      	ldr	r2, [pc, #168]	; (8006da8 <TIM_OC1_SetConfig+0x118>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC1_SetConfig+0x7c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a29      	ldr	r2, [pc, #164]	; (8006dac <TIM_OC1_SetConfig+0x11c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d10c      	bne.n	8006d26 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f023 0308 	bic.w	r3, r3, #8
 8006d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f023 0304 	bic.w	r3, r3, #4
 8006d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <TIM_OC1_SetConfig+0x10c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00f      	beq.n	8006d4e <TIM_OC1_SetConfig+0xbe>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <TIM_OC1_SetConfig+0x110>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d00b      	beq.n	8006d4e <TIM_OC1_SetConfig+0xbe>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <TIM_OC1_SetConfig+0x114>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d007      	beq.n	8006d4e <TIM_OC1_SetConfig+0xbe>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a19      	ldr	r2, [pc, #100]	; (8006da8 <TIM_OC1_SetConfig+0x118>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_OC1_SetConfig+0xbe>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a18      	ldr	r2, [pc, #96]	; (8006dac <TIM_OC1_SetConfig+0x11c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d111      	bne.n	8006d72 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	621a      	str	r2, [r3, #32]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	fffeff8f 	.word	0xfffeff8f
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40010400 	.word	0x40010400
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40014400 	.word	0x40014400
 8006dac:	40014800 	.word	0x40014800

08006db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f023 0210 	bic.w	r2, r3, #16
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4b34      	ldr	r3, [pc, #208]	; (8006eac <TIM_OC2_SetConfig+0xfc>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f023 0320 	bic.w	r3, r3, #32
 8006dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a29      	ldr	r2, [pc, #164]	; (8006eb0 <TIM_OC2_SetConfig+0x100>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_OC2_SetConfig+0x68>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a28      	ldr	r2, [pc, #160]	; (8006eb4 <TIM_OC2_SetConfig+0x104>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d10d      	bne.n	8006e34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a1e      	ldr	r2, [pc, #120]	; (8006eb0 <TIM_OC2_SetConfig+0x100>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00f      	beq.n	8006e5c <TIM_OC2_SetConfig+0xac>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <TIM_OC2_SetConfig+0x104>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00b      	beq.n	8006e5c <TIM_OC2_SetConfig+0xac>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a1c      	ldr	r2, [pc, #112]	; (8006eb8 <TIM_OC2_SetConfig+0x108>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d007      	beq.n	8006e5c <TIM_OC2_SetConfig+0xac>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a1b      	ldr	r2, [pc, #108]	; (8006ebc <TIM_OC2_SetConfig+0x10c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_OC2_SetConfig+0xac>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a1a      	ldr	r2, [pc, #104]	; (8006ec0 <TIM_OC2_SetConfig+0x110>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d113      	bne.n	8006e84 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	feff8fff 	.word	0xfeff8fff
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40010400 	.word	0x40010400
 8006eb8:	40014000 	.word	0x40014000
 8006ebc:	40014400 	.word	0x40014400
 8006ec0:	40014800 	.word	0x40014800

08006ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4b33      	ldr	r3, [pc, #204]	; (8006fbc <TIM_OC3_SetConfig+0xf8>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0303 	bic.w	r3, r3, #3
 8006efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a28      	ldr	r2, [pc, #160]	; (8006fc0 <TIM_OC3_SetConfig+0xfc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d003      	beq.n	8006f2a <TIM_OC3_SetConfig+0x66>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a27      	ldr	r2, [pc, #156]	; (8006fc4 <TIM_OC3_SetConfig+0x100>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d10d      	bne.n	8006f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1d      	ldr	r2, [pc, #116]	; (8006fc0 <TIM_OC3_SetConfig+0xfc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00f      	beq.n	8006f6e <TIM_OC3_SetConfig+0xaa>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1c      	ldr	r2, [pc, #112]	; (8006fc4 <TIM_OC3_SetConfig+0x100>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00b      	beq.n	8006f6e <TIM_OC3_SetConfig+0xaa>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a1b      	ldr	r2, [pc, #108]	; (8006fc8 <TIM_OC3_SetConfig+0x104>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d007      	beq.n	8006f6e <TIM_OC3_SetConfig+0xaa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1a      	ldr	r2, [pc, #104]	; (8006fcc <TIM_OC3_SetConfig+0x108>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d003      	beq.n	8006f6e <TIM_OC3_SetConfig+0xaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <TIM_OC3_SetConfig+0x10c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d113      	bne.n	8006f96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	621a      	str	r2, [r3, #32]
}
 8006fb0:	bf00      	nop
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	fffeff8f 	.word	0xfffeff8f
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40010400 	.word	0x40010400
 8006fc8:	40014000 	.word	0x40014000
 8006fcc:	40014400 	.word	0x40014400
 8006fd0:	40014800 	.word	0x40014800

08006fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <TIM_OC4_SetConfig+0xbc>)
 8007000:	4013      	ands	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800701e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	031b      	lsls	r3, r3, #12
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a19      	ldr	r2, [pc, #100]	; (8007094 <TIM_OC4_SetConfig+0xc0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00f      	beq.n	8007054 <TIM_OC4_SetConfig+0x80>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a18      	ldr	r2, [pc, #96]	; (8007098 <TIM_OC4_SetConfig+0xc4>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00b      	beq.n	8007054 <TIM_OC4_SetConfig+0x80>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a17      	ldr	r2, [pc, #92]	; (800709c <TIM_OC4_SetConfig+0xc8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d007      	beq.n	8007054 <TIM_OC4_SetConfig+0x80>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <TIM_OC4_SetConfig+0xcc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_OC4_SetConfig+0x80>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a15      	ldr	r2, [pc, #84]	; (80070a4 <TIM_OC4_SetConfig+0xd0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d109      	bne.n	8007068 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800705a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	019b      	lsls	r3, r3, #6
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	621a      	str	r2, [r3, #32]
}
 8007082:	bf00      	nop
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	feff8fff 	.word	0xfeff8fff
 8007094:	40010000 	.word	0x40010000
 8007098:	40010400 	.word	0x40010400
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400
 80070a4:	40014800 	.word	0x40014800

080070a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4b21      	ldr	r3, [pc, #132]	; (8007158 <TIM_OC5_SetConfig+0xb0>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a18      	ldr	r2, [pc, #96]	; (800715c <TIM_OC5_SetConfig+0xb4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00f      	beq.n	800711e <TIM_OC5_SetConfig+0x76>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a17      	ldr	r2, [pc, #92]	; (8007160 <TIM_OC5_SetConfig+0xb8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00b      	beq.n	800711e <TIM_OC5_SetConfig+0x76>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a16      	ldr	r2, [pc, #88]	; (8007164 <TIM_OC5_SetConfig+0xbc>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d007      	beq.n	800711e <TIM_OC5_SetConfig+0x76>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a15      	ldr	r2, [pc, #84]	; (8007168 <TIM_OC5_SetConfig+0xc0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d003      	beq.n	800711e <TIM_OC5_SetConfig+0x76>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a14      	ldr	r2, [pc, #80]	; (800716c <TIM_OC5_SetConfig+0xc4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d109      	bne.n	8007132 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007124:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	621a      	str	r2, [r3, #32]
}
 800714c:	bf00      	nop
 800714e:	371c      	adds	r7, #28
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	fffeff8f 	.word	0xfffeff8f
 800715c:	40010000 	.word	0x40010000
 8007160:	40010400 	.word	0x40010400
 8007164:	40014000 	.word	0x40014000
 8007168:	40014400 	.word	0x40014400
 800716c:	40014800 	.word	0x40014800

08007170 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4b22      	ldr	r3, [pc, #136]	; (8007224 <TIM_OC6_SetConfig+0xb4>)
 800719c:	4013      	ands	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	051b      	lsls	r3, r3, #20
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a19      	ldr	r2, [pc, #100]	; (8007228 <TIM_OC6_SetConfig+0xb8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00f      	beq.n	80071e8 <TIM_OC6_SetConfig+0x78>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a18      	ldr	r2, [pc, #96]	; (800722c <TIM_OC6_SetConfig+0xbc>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00b      	beq.n	80071e8 <TIM_OC6_SetConfig+0x78>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a17      	ldr	r2, [pc, #92]	; (8007230 <TIM_OC6_SetConfig+0xc0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d007      	beq.n	80071e8 <TIM_OC6_SetConfig+0x78>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a16      	ldr	r2, [pc, #88]	; (8007234 <TIM_OC6_SetConfig+0xc4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_OC6_SetConfig+0x78>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a15      	ldr	r2, [pc, #84]	; (8007238 <TIM_OC6_SetConfig+0xc8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d109      	bne.n	80071fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	feff8fff 	.word	0xfeff8fff
 8007228:	40010000 	.word	0x40010000
 800722c:	40010400 	.word	0x40010400
 8007230:	40014000 	.word	0x40014000
 8007234:	40014400 	.word	0x40014400
 8007238:	40014800 	.word	0x40014800

0800723c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f023 0201 	bic.w	r2, r3, #1
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f023 030a 	bic.w	r3, r3, #10
 8007278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800729a:	b480      	push	{r7}
 800729c:	b087      	sub	sp, #28
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f023 0210 	bic.w	r2, r3, #16
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	031b      	lsls	r3, r3, #12
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	621a      	str	r2, [r3, #32]
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
	...

080072fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <TIM_ITRx_SetConfig+0x38>)
 8007310:	4013      	ands	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4313      	orrs	r3, r2
 800731a:	f043 0307 	orr.w	r3, r3, #7
 800731e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	609a      	str	r2, [r3, #8]
}
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	ffcfff8f 	.word	0xffcfff8f

08007338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	021a      	lsls	r2, r3, #8
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	431a      	orrs	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4313      	orrs	r3, r2
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	609a      	str	r2, [r3, #8]
}
 800736c:	bf00      	nop
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	2201      	movs	r2, #1
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1a      	ldr	r2, [r3, #32]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	43db      	mvns	r3, r3
 800739a:	401a      	ands	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1a      	ldr	r2, [r3, #32]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	fa01 f303 	lsl.w	r3, r1, r3
 80073b0:	431a      	orrs	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	bf00      	nop
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073d8:	2302      	movs	r3, #2
 80073da:	e06d      	b.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a30      	ldr	r2, [pc, #192]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d004      	beq.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a2f      	ldr	r2, [pc, #188]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d108      	bne.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007416:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007428:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a20      	ldr	r2, [pc, #128]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d022      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744e:	d01d      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1d      	ldr	r2, [pc, #116]	; (80074cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d018      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d013      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00e      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a15      	ldr	r2, [pc, #84]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d009      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a16      	ldr	r2, [pc, #88]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d004      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a15      	ldr	r2, [pc, #84]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d10c      	bne.n	80074a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	4313      	orrs	r3, r2
 800749c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	40010000 	.word	0x40010000
 80074c8:	40010400 	.word	0x40010400
 80074cc:	40000400 	.word	0x40000400
 80074d0:	40000800 	.word	0x40000800
 80074d4:	40000c00 	.word	0x40000c00
 80074d8:	40001800 	.word	0x40001800
 80074dc:	40014000 	.word	0x40014000

080074e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e065      	b.n	80075c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	041b      	lsls	r3, r3, #16
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a16      	ldr	r2, [pc, #88]	; (80075d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d004      	beq.n	800758a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a14      	ldr	r2, [pc, #80]	; (80075d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d115      	bne.n	80075b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	051b      	lsls	r3, r3, #20
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40010400 	.word	0x40010400

080075dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e042      	b.n	80076b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f007 fce9 	bl	800f014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2224      	movs	r2, #36	; 0x24
 8007646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0201 	bic.w	r2, r2, #1
 8007658:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fd9a 	bl	8008194 <UART_SetConfig>
 8007660:	4603      	mov	r3, r0
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e022      	b.n	80076b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 faee 	bl	8008c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 fb75 	bl	8008d98 <UART_CheckIdleState>
 80076ae:	4603      	mov	r3, r0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	; 0x28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	4613      	mov	r3, r2
 80076c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d17a      	bne.n	80077c6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <HAL_UART_Transmit_DMA+0x24>
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e073      	b.n	80077c8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <HAL_UART_Transmit_DMA+0x36>
 80076ea:	2302      	movs	r3, #2
 80076ec:	e06c      	b.n	80077c8 <HAL_UART_Transmit_DMA+0x110>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	88fa      	ldrh	r2, [r7, #6]
 8007700:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	88fa      	ldrh	r2, [r7, #6]
 8007708:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2221      	movs	r2, #33	; 0x21
 8007718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007720:	2b00      	cmp	r3, #0
 8007722:	d02c      	beq.n	800777e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007728:	4a29      	ldr	r2, [pc, #164]	; (80077d0 <HAL_UART_Transmit_DMA+0x118>)
 800772a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007730:	4a28      	ldr	r2, [pc, #160]	; (80077d4 <HAL_UART_Transmit_DMA+0x11c>)
 8007732:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007738:	4a27      	ldr	r2, [pc, #156]	; (80077d8 <HAL_UART_Transmit_DMA+0x120>)
 800773a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007740:	2200      	movs	r2, #0
 8007742:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800774c:	4619      	mov	r1, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3328      	adds	r3, #40	; 0x28
 8007754:	461a      	mov	r2, r3
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	f7f9 fbe2 	bl	8000f20 <HAL_DMA_Start_IT>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00d      	beq.n	800777e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2210      	movs	r2, #16
 8007766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2220      	movs	r2, #32
 8007776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e024      	b.n	80077c8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2240      	movs	r2, #64	; 0x40
 8007784:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	613b      	str	r3, [r7, #16]
   return(result);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3308      	adds	r3, #8
 80077ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ae:	623a      	str	r2, [r7, #32]
 80077b0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	69f9      	ldr	r1, [r7, #28]
 80077b4:	6a3a      	ldr	r2, [r7, #32]
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e5      	bne.n	800778e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e000      	b.n	80077c8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80077c6:	2302      	movs	r3, #2
  }
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3728      	adds	r7, #40	; 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	08009261 	.word	0x08009261
 80077d4:	080092f7 	.word	0x080092f7
 80077d8:	0800946d 	.word	0x0800946d

080077dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d142      	bne.n	800787a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_UART_Receive_DMA+0x24>
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e03b      	b.n	800787c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UART_Receive_DMA+0x36>
 800780e:	2302      	movs	r3, #2
 8007810:	e034      	b.n	800787c <HAL_UART_Receive_DMA+0xa0>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a17      	ldr	r2, [pc, #92]	; (8007884 <HAL_UART_Receive_DMA+0xa8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d01f      	beq.n	800786a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d018      	beq.n	800786a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	613b      	str	r3, [r7, #16]
   return(result);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	623b      	str	r3, [r7, #32]
 8007858:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	69f9      	ldr	r1, [r7, #28]
 800785c:	6a3a      	ldr	r2, [r7, #32]
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	61bb      	str	r3, [r7, #24]
   return(result);
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e6      	bne.n	8007838 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800786a:	88fb      	ldrh	r3, [r7, #6]
 800786c:	461a      	mov	r2, r3
 800786e:	68b9      	ldr	r1, [r7, #8]
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f001 fba5 	bl	8008fc0 <UART_Start_Receive_DMA>
 8007876:	4603      	mov	r3, r0
 8007878:	e000      	b.n	800787c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800787a:	2302      	movs	r3, #2
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3728      	adds	r7, #40	; 0x28
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	58000c00 	.word	0x58000c00

08007888 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b090      	sub	sp, #64	; 0x40
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078aa:	2b80      	cmp	r3, #128	; 0x80
 80078ac:	d139      	bne.n	8007922 <HAL_UART_DMAStop+0x9a>
 80078ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b0:	2b21      	cmp	r3, #33	; 0x21
 80078b2:	d136      	bne.n	8007922 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3308      	adds	r3, #8
 80078ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3308      	adds	r3, #8
 80078d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e5      	bne.n	80078b4 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d015      	beq.n	800791c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7f9 fd7d 	bl	80013f4 <HAL_DMA_Abort>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00d      	beq.n	800791c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007904:	4618      	mov	r0, r3
 8007906:	f7fb fa0f 	bl	8002d28 <HAL_DMA_GetError>
 800790a:	4603      	mov	r3, r0
 800790c:	2b20      	cmp	r3, #32
 800790e:	d105      	bne.n	800791c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2210      	movs	r2, #16
 8007914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e044      	b.n	80079a6 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fbf7 	bl	8009110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792c:	2b40      	cmp	r3, #64	; 0x40
 800792e:	d139      	bne.n	80079a4 <HAL_UART_DMAStop+0x11c>
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	2b22      	cmp	r3, #34	; 0x22
 8007934:	d136      	bne.n	80079a4 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	60bb      	str	r3, [r7, #8]
   return(result);
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800794c:	633b      	str	r3, [r7, #48]	; 0x30
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3308      	adds	r3, #8
 8007954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007956:	61ba      	str	r2, [r7, #24]
 8007958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6979      	ldr	r1, [r7, #20]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	613b      	str	r3, [r7, #16]
   return(result);
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d015      	beq.n	800799e <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007976:	4618      	mov	r0, r3
 8007978:	f7f9 fd3c 	bl	80013f4 <HAL_DMA_Abort>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00d      	beq.n	800799e <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007986:	4618      	mov	r0, r3
 8007988:	f7fb f9ce 	bl	8002d28 <HAL_DMA_GetError>
 800798c:	4603      	mov	r3, r0
 800798e:	2b20      	cmp	r3, #32
 8007990:	d105      	bne.n	800799e <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2210      	movs	r2, #16
 8007996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e003      	b.n	80079a6 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 fbf8 	bl	8009194 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3740      	adds	r7, #64	; 0x40
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b0ba      	sub	sp, #232	; 0xe8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079da:	f640 030f 	movw	r3, #2063	; 0x80f
 80079de:	4013      	ands	r3, r2
 80079e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d11b      	bne.n	8007a24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d015      	beq.n	8007a24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d105      	bne.n	8007a10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d009      	beq.n	8007a24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 835a 	beq.w	80080ce <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	4798      	blx	r3
      }
      return;
 8007a22:	e354      	b.n	80080ce <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 811f 	beq.w	8007c6c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a32:	4b8b      	ldr	r3, [pc, #556]	; (8007c60 <HAL_UART_IRQHandler+0x2b0>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a3e:	4b89      	ldr	r3, [pc, #548]	; (8007c64 <HAL_UART_IRQHandler+0x2b4>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8112 	beq.w	8007c6c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d011      	beq.n	8007a78 <HAL_UART_IRQHandler+0xc8>
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2201      	movs	r2, #1
 8007a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a6e:	f043 0201 	orr.w	r2, r3, #1
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d011      	beq.n	8007aa8 <HAL_UART_IRQHandler+0xf8>
 8007a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00b      	beq.n	8007aa8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2202      	movs	r2, #2
 8007a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9e:	f043 0204 	orr.w	r2, r3, #4
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d011      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x128>
 8007ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ace:	f043 0202 	orr.w	r2, r3, #2
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d017      	beq.n	8007b14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d105      	bne.n	8007afc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007af0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007af4:	4b5a      	ldr	r3, [pc, #360]	; (8007c60 <HAL_UART_IRQHandler+0x2b0>)
 8007af6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2208      	movs	r2, #8
 8007b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b0a:	f043 0208 	orr.w	r2, r3, #8
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d012      	beq.n	8007b46 <HAL_UART_IRQHandler+0x196>
 8007b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00c      	beq.n	8007b46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b3c:	f043 0220 	orr.w	r2, r3, #32
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 82c0 	beq.w	80080d2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d013      	beq.n	8007b86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d105      	bne.n	8007b76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d007      	beq.n	8007b86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d005      	beq.n	8007baa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d04f      	beq.n	8007c4a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 faf2 	bl	8009194 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d141      	bne.n	8007c42 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3308      	adds	r3, #8
 8007be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1d9      	bne.n	8007bbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d013      	beq.n	8007c3a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c16:	4a14      	ldr	r2, [pc, #80]	; (8007c68 <HAL_UART_IRQHandler+0x2b8>)
 8007c18:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7f9 ff06 	bl	8001a30 <HAL_DMA_Abort_IT>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d017      	beq.n	8007c5a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c38:	e00f      	b.n	8007c5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa7e 	bl	800813c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c40:	e00b      	b.n	8007c5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa7a 	bl	800813c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c48:	e007      	b.n	8007c5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa76 	bl	800813c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007c58:	e23b      	b.n	80080d2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c5a:	bf00      	nop
    return;
 8007c5c:	e239      	b.n	80080d2 <HAL_UART_IRQHandler+0x722>
 8007c5e:	bf00      	nop
 8007c60:	10000001 	.word	0x10000001
 8007c64:	04000120 	.word	0x04000120
 8007c68:	080094ed 	.word	0x080094ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	f040 81ce 	bne.w	8008012 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 81c7 	beq.w	8008012 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c88:	f003 0310 	and.w	r3, r3, #16
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 81c0 	beq.w	8008012 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2210      	movs	r2, #16
 8007c98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca4:	2b40      	cmp	r3, #64	; 0x40
 8007ca6:	f040 813b 	bne.w	8007f20 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a8b      	ldr	r2, [pc, #556]	; (8007ee0 <HAL_UART_IRQHandler+0x530>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d059      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a89      	ldr	r2, [pc, #548]	; (8007ee4 <HAL_UART_IRQHandler+0x534>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d053      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a87      	ldr	r2, [pc, #540]	; (8007ee8 <HAL_UART_IRQHandler+0x538>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d04d      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a85      	ldr	r2, [pc, #532]	; (8007eec <HAL_UART_IRQHandler+0x53c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d047      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a83      	ldr	r2, [pc, #524]	; (8007ef0 <HAL_UART_IRQHandler+0x540>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d041      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a81      	ldr	r2, [pc, #516]	; (8007ef4 <HAL_UART_IRQHandler+0x544>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d03b      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a7f      	ldr	r2, [pc, #508]	; (8007ef8 <HAL_UART_IRQHandler+0x548>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d035      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a7d      	ldr	r2, [pc, #500]	; (8007efc <HAL_UART_IRQHandler+0x54c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d02f      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a7b      	ldr	r2, [pc, #492]	; (8007f00 <HAL_UART_IRQHandler+0x550>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d029      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a79      	ldr	r2, [pc, #484]	; (8007f04 <HAL_UART_IRQHandler+0x554>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d023      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a77      	ldr	r2, [pc, #476]	; (8007f08 <HAL_UART_IRQHandler+0x558>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d01d      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a75      	ldr	r2, [pc, #468]	; (8007f0c <HAL_UART_IRQHandler+0x55c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d017      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a73      	ldr	r2, [pc, #460]	; (8007f10 <HAL_UART_IRQHandler+0x560>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d011      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a71      	ldr	r2, [pc, #452]	; (8007f14 <HAL_UART_IRQHandler+0x564>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00b      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a6f      	ldr	r2, [pc, #444]	; (8007f18 <HAL_UART_IRQHandler+0x568>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d005      	beq.n	8007d6a <HAL_UART_IRQHandler+0x3ba>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a6d      	ldr	r2, [pc, #436]	; (8007f1c <HAL_UART_IRQHandler+0x56c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d105      	bne.n	8007d76 <HAL_UART_IRQHandler+0x3c6>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	e004      	b.n	8007d80 <HAL_UART_IRQHandler+0x3d0>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 81a4 	beq.w	80080d6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	f080 819c 	bcs.w	80080d6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007da4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db2:	f000 8086 	beq.w	8007ec2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007de0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007de4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1da      	bne.n	8007db6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3308      	adds	r3, #8
 8007e06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e12:	f023 0301 	bic.w	r3, r3, #1
 8007e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e1      	bne.n	8007e00 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3308      	adds	r3, #8
 8007e42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e68:	e841 2300 	strex	r3, r2, [r1]
 8007e6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e3      	bne.n	8007e3c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2220      	movs	r2, #32
 8007e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e92:	f023 0310 	bic.w	r3, r3, #16
 8007e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ea4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ea6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e4      	bne.n	8007e82 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f9 fa99 	bl	80013f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f93a 	bl	8008150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007edc:	e0fb      	b.n	80080d6 <HAL_UART_IRQHandler+0x726>
 8007ede:	bf00      	nop
 8007ee0:	40020010 	.word	0x40020010
 8007ee4:	40020028 	.word	0x40020028
 8007ee8:	40020040 	.word	0x40020040
 8007eec:	40020058 	.word	0x40020058
 8007ef0:	40020070 	.word	0x40020070
 8007ef4:	40020088 	.word	0x40020088
 8007ef8:	400200a0 	.word	0x400200a0
 8007efc:	400200b8 	.word	0x400200b8
 8007f00:	40020410 	.word	0x40020410
 8007f04:	40020428 	.word	0x40020428
 8007f08:	40020440 	.word	0x40020440
 8007f0c:	40020458 	.word	0x40020458
 8007f10:	40020470 	.word	0x40020470
 8007f14:	40020488 	.word	0x40020488
 8007f18:	400204a0 	.word	0x400204a0
 8007f1c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 80cc 	beq.w	80080da <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007f42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80c7 	beq.w	80080da <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e4      	bne.n	8007f4c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	623b      	str	r3, [r7, #32]
   return(result);
 8007f92:	6a3a      	ldr	r2, [r7, #32]
 8007f94:	4b54      	ldr	r3, [pc, #336]	; (80080e8 <HAL_UART_IRQHandler+0x738>)
 8007f96:	4013      	ands	r3, r2
 8007f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e3      	bne.n	8007f82 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0310 	bic.w	r3, r3, #16
 8007fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ff0:	61fb      	str	r3, [r7, #28]
 8007ff2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	69b9      	ldr	r1, [r7, #24]
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	e841 2300 	strex	r3, r2, [r1]
 8007ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e4      	bne.n	8007fce <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f8a0 	bl	8008150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008010:	e063      	b.n	80080da <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00e      	beq.n	800803c <HAL_UART_IRQHandler+0x68c>
 800801e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d008      	beq.n	800803c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008032:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 fa9a 	bl	800956e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800803a:	e051      	b.n	80080e0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800803c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008044:	2b00      	cmp	r3, #0
 8008046:	d014      	beq.n	8008072 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800804c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008050:	2b00      	cmp	r3, #0
 8008052:	d105      	bne.n	8008060 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008064:	2b00      	cmp	r3, #0
 8008066:	d03a      	beq.n	80080de <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	4798      	blx	r3
    }
    return;
 8008070:	e035      	b.n	80080de <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <HAL_UART_IRQHandler+0x6e2>
 800807e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 fa44 	bl	8009518 <UART_EndTransmit_IT>
    return;
 8008090:	e026      	b.n	80080e0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <HAL_UART_IRQHandler+0x702>
 800809e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 fa73 	bl	8009596 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080b0:	e016      	b.n	80080e0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d010      	beq.n	80080e0 <HAL_UART_IRQHandler+0x730>
 80080be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	da0c      	bge.n	80080e0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f001 fa5b 	bl	8009582 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080cc:	e008      	b.n	80080e0 <HAL_UART_IRQHandler+0x730>
      return;
 80080ce:	bf00      	nop
 80080d0:	e006      	b.n	80080e0 <HAL_UART_IRQHandler+0x730>
    return;
 80080d2:	bf00      	nop
 80080d4:	e004      	b.n	80080e0 <HAL_UART_IRQHandler+0x730>
      return;
 80080d6:	bf00      	nop
 80080d8:	e002      	b.n	80080e0 <HAL_UART_IRQHandler+0x730>
      return;
 80080da:	bf00      	nop
 80080dc:	e000      	b.n	80080e0 <HAL_UART_IRQHandler+0x730>
    return;
 80080de:	bf00      	nop
  }
}
 80080e0:	37e8      	adds	r7, #232	; 0xe8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	effffffe 	.word	0xeffffffe

080080ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008176:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	4313      	orrs	r3, r2
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
	...

08008194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008194:	b5b0      	push	{r4, r5, r7, lr}
 8008196:	b08e      	sub	sp, #56	; 0x38
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	4bbf      	ldr	r3, [pc, #764]	; (80084c0 <UART_SetConfig+0x32c>)
 80081c2:	4013      	ands	r3, r2
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6812      	ldr	r2, [r2, #0]
 80081c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081ca:	430b      	orrs	r3, r1
 80081cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4ab5      	ldr	r2, [pc, #724]	; (80084c4 <UART_SetConfig+0x330>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d004      	beq.n	80081fe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fa:	4313      	orrs	r3, r2
 80081fc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	4bb0      	ldr	r3, [pc, #704]	; (80084c8 <UART_SetConfig+0x334>)
 8008206:	4013      	ands	r3, r2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6812      	ldr	r2, [r2, #0]
 800820c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800820e:	430b      	orrs	r3, r1
 8008210:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	f023 010f 	bic.w	r1, r3, #15
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4aa7      	ldr	r2, [pc, #668]	; (80084cc <UART_SetConfig+0x338>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d176      	bne.n	8008320 <UART_SetConfig+0x18c>
 8008232:	4ba7      	ldr	r3, [pc, #668]	; (80084d0 <UART_SetConfig+0x33c>)
 8008234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008236:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800823a:	2b28      	cmp	r3, #40	; 0x28
 800823c:	d86c      	bhi.n	8008318 <UART_SetConfig+0x184>
 800823e:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <UART_SetConfig+0xb0>)
 8008240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008244:	080082e9 	.word	0x080082e9
 8008248:	08008319 	.word	0x08008319
 800824c:	08008319 	.word	0x08008319
 8008250:	08008319 	.word	0x08008319
 8008254:	08008319 	.word	0x08008319
 8008258:	08008319 	.word	0x08008319
 800825c:	08008319 	.word	0x08008319
 8008260:	08008319 	.word	0x08008319
 8008264:	080082f1 	.word	0x080082f1
 8008268:	08008319 	.word	0x08008319
 800826c:	08008319 	.word	0x08008319
 8008270:	08008319 	.word	0x08008319
 8008274:	08008319 	.word	0x08008319
 8008278:	08008319 	.word	0x08008319
 800827c:	08008319 	.word	0x08008319
 8008280:	08008319 	.word	0x08008319
 8008284:	080082f9 	.word	0x080082f9
 8008288:	08008319 	.word	0x08008319
 800828c:	08008319 	.word	0x08008319
 8008290:	08008319 	.word	0x08008319
 8008294:	08008319 	.word	0x08008319
 8008298:	08008319 	.word	0x08008319
 800829c:	08008319 	.word	0x08008319
 80082a0:	08008319 	.word	0x08008319
 80082a4:	08008301 	.word	0x08008301
 80082a8:	08008319 	.word	0x08008319
 80082ac:	08008319 	.word	0x08008319
 80082b0:	08008319 	.word	0x08008319
 80082b4:	08008319 	.word	0x08008319
 80082b8:	08008319 	.word	0x08008319
 80082bc:	08008319 	.word	0x08008319
 80082c0:	08008319 	.word	0x08008319
 80082c4:	08008309 	.word	0x08008309
 80082c8:	08008319 	.word	0x08008319
 80082cc:	08008319 	.word	0x08008319
 80082d0:	08008319 	.word	0x08008319
 80082d4:	08008319 	.word	0x08008319
 80082d8:	08008319 	.word	0x08008319
 80082dc:	08008319 	.word	0x08008319
 80082e0:	08008319 	.word	0x08008319
 80082e4:	08008311 	.word	0x08008311
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ee:	e222      	b.n	8008736 <UART_SetConfig+0x5a2>
 80082f0:	2304      	movs	r3, #4
 80082f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082f6:	e21e      	b.n	8008736 <UART_SetConfig+0x5a2>
 80082f8:	2308      	movs	r3, #8
 80082fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082fe:	e21a      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008300:	2310      	movs	r3, #16
 8008302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008306:	e216      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008308:	2320      	movs	r3, #32
 800830a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800830e:	e212      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008310:	2340      	movs	r3, #64	; 0x40
 8008312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008316:	e20e      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008318:	2380      	movs	r3, #128	; 0x80
 800831a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800831e:	e20a      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a6b      	ldr	r2, [pc, #428]	; (80084d4 <UART_SetConfig+0x340>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d130      	bne.n	800838c <UART_SetConfig+0x1f8>
 800832a:	4b69      	ldr	r3, [pc, #420]	; (80084d0 <UART_SetConfig+0x33c>)
 800832c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	2b05      	cmp	r3, #5
 8008334:	d826      	bhi.n	8008384 <UART_SetConfig+0x1f0>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <UART_SetConfig+0x1a8>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008355 	.word	0x08008355
 8008340:	0800835d 	.word	0x0800835d
 8008344:	08008365 	.word	0x08008365
 8008348:	0800836d 	.word	0x0800836d
 800834c:	08008375 	.word	0x08008375
 8008350:	0800837d 	.word	0x0800837d
 8008354:	2300      	movs	r3, #0
 8008356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800835a:	e1ec      	b.n	8008736 <UART_SetConfig+0x5a2>
 800835c:	2304      	movs	r3, #4
 800835e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008362:	e1e8      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008364:	2308      	movs	r3, #8
 8008366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800836a:	e1e4      	b.n	8008736 <UART_SetConfig+0x5a2>
 800836c:	2310      	movs	r3, #16
 800836e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008372:	e1e0      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008374:	2320      	movs	r3, #32
 8008376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800837a:	e1dc      	b.n	8008736 <UART_SetConfig+0x5a2>
 800837c:	2340      	movs	r3, #64	; 0x40
 800837e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008382:	e1d8      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008384:	2380      	movs	r3, #128	; 0x80
 8008386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800838a:	e1d4      	b.n	8008736 <UART_SetConfig+0x5a2>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a51      	ldr	r2, [pc, #324]	; (80084d8 <UART_SetConfig+0x344>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d130      	bne.n	80083f8 <UART_SetConfig+0x264>
 8008396:	4b4e      	ldr	r3, [pc, #312]	; (80084d0 <UART_SetConfig+0x33c>)
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d826      	bhi.n	80083f0 <UART_SetConfig+0x25c>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <UART_SetConfig+0x214>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083c1 	.word	0x080083c1
 80083ac:	080083c9 	.word	0x080083c9
 80083b0:	080083d1 	.word	0x080083d1
 80083b4:	080083d9 	.word	0x080083d9
 80083b8:	080083e1 	.word	0x080083e1
 80083bc:	080083e9 	.word	0x080083e9
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083c6:	e1b6      	b.n	8008736 <UART_SetConfig+0x5a2>
 80083c8:	2304      	movs	r3, #4
 80083ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ce:	e1b2      	b.n	8008736 <UART_SetConfig+0x5a2>
 80083d0:	2308      	movs	r3, #8
 80083d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083d6:	e1ae      	b.n	8008736 <UART_SetConfig+0x5a2>
 80083d8:	2310      	movs	r3, #16
 80083da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083de:	e1aa      	b.n	8008736 <UART_SetConfig+0x5a2>
 80083e0:	2320      	movs	r3, #32
 80083e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083e6:	e1a6      	b.n	8008736 <UART_SetConfig+0x5a2>
 80083e8:	2340      	movs	r3, #64	; 0x40
 80083ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ee:	e1a2      	b.n	8008736 <UART_SetConfig+0x5a2>
 80083f0:	2380      	movs	r3, #128	; 0x80
 80083f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083f6:	e19e      	b.n	8008736 <UART_SetConfig+0x5a2>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a37      	ldr	r2, [pc, #220]	; (80084dc <UART_SetConfig+0x348>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d130      	bne.n	8008464 <UART_SetConfig+0x2d0>
 8008402:	4b33      	ldr	r3, [pc, #204]	; (80084d0 <UART_SetConfig+0x33c>)
 8008404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b05      	cmp	r3, #5
 800840c:	d826      	bhi.n	800845c <UART_SetConfig+0x2c8>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <UART_SetConfig+0x280>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	0800842d 	.word	0x0800842d
 8008418:	08008435 	.word	0x08008435
 800841c:	0800843d 	.word	0x0800843d
 8008420:	08008445 	.word	0x08008445
 8008424:	0800844d 	.word	0x0800844d
 8008428:	08008455 	.word	0x08008455
 800842c:	2300      	movs	r3, #0
 800842e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008432:	e180      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008434:	2304      	movs	r3, #4
 8008436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800843a:	e17c      	b.n	8008736 <UART_SetConfig+0x5a2>
 800843c:	2308      	movs	r3, #8
 800843e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008442:	e178      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008444:	2310      	movs	r3, #16
 8008446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800844a:	e174      	b.n	8008736 <UART_SetConfig+0x5a2>
 800844c:	2320      	movs	r3, #32
 800844e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008452:	e170      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008454:	2340      	movs	r3, #64	; 0x40
 8008456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800845a:	e16c      	b.n	8008736 <UART_SetConfig+0x5a2>
 800845c:	2380      	movs	r3, #128	; 0x80
 800845e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008462:	e168      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a1d      	ldr	r2, [pc, #116]	; (80084e0 <UART_SetConfig+0x34c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d142      	bne.n	80084f4 <UART_SetConfig+0x360>
 800846e:	4b18      	ldr	r3, [pc, #96]	; (80084d0 <UART_SetConfig+0x33c>)
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	2b05      	cmp	r3, #5
 8008478:	d838      	bhi.n	80084ec <UART_SetConfig+0x358>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <UART_SetConfig+0x2ec>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008499 	.word	0x08008499
 8008484:	080084a1 	.word	0x080084a1
 8008488:	080084a9 	.word	0x080084a9
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084b9 	.word	0x080084b9
 8008494:	080084e5 	.word	0x080084e5
 8008498:	2300      	movs	r3, #0
 800849a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800849e:	e14a      	b.n	8008736 <UART_SetConfig+0x5a2>
 80084a0:	2304      	movs	r3, #4
 80084a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084a6:	e146      	b.n	8008736 <UART_SetConfig+0x5a2>
 80084a8:	2308      	movs	r3, #8
 80084aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ae:	e142      	b.n	8008736 <UART_SetConfig+0x5a2>
 80084b0:	2310      	movs	r3, #16
 80084b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084b6:	e13e      	b.n	8008736 <UART_SetConfig+0x5a2>
 80084b8:	2320      	movs	r3, #32
 80084ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084be:	e13a      	b.n	8008736 <UART_SetConfig+0x5a2>
 80084c0:	cfff69f3 	.word	0xcfff69f3
 80084c4:	58000c00 	.word	0x58000c00
 80084c8:	11fff4ff 	.word	0x11fff4ff
 80084cc:	40011000 	.word	0x40011000
 80084d0:	58024400 	.word	0x58024400
 80084d4:	40004400 	.word	0x40004400
 80084d8:	40004800 	.word	0x40004800
 80084dc:	40004c00 	.word	0x40004c00
 80084e0:	40005000 	.word	0x40005000
 80084e4:	2340      	movs	r3, #64	; 0x40
 80084e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ea:	e124      	b.n	8008736 <UART_SetConfig+0x5a2>
 80084ec:	2380      	movs	r3, #128	; 0x80
 80084ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084f2:	e120      	b.n	8008736 <UART_SetConfig+0x5a2>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4acc      	ldr	r2, [pc, #816]	; (800882c <UART_SetConfig+0x698>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d176      	bne.n	80085ec <UART_SetConfig+0x458>
 80084fe:	4bcc      	ldr	r3, [pc, #816]	; (8008830 <UART_SetConfig+0x69c>)
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008506:	2b28      	cmp	r3, #40	; 0x28
 8008508:	d86c      	bhi.n	80085e4 <UART_SetConfig+0x450>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <UART_SetConfig+0x37c>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	080085b5 	.word	0x080085b5
 8008514:	080085e5 	.word	0x080085e5
 8008518:	080085e5 	.word	0x080085e5
 800851c:	080085e5 	.word	0x080085e5
 8008520:	080085e5 	.word	0x080085e5
 8008524:	080085e5 	.word	0x080085e5
 8008528:	080085e5 	.word	0x080085e5
 800852c:	080085e5 	.word	0x080085e5
 8008530:	080085bd 	.word	0x080085bd
 8008534:	080085e5 	.word	0x080085e5
 8008538:	080085e5 	.word	0x080085e5
 800853c:	080085e5 	.word	0x080085e5
 8008540:	080085e5 	.word	0x080085e5
 8008544:	080085e5 	.word	0x080085e5
 8008548:	080085e5 	.word	0x080085e5
 800854c:	080085e5 	.word	0x080085e5
 8008550:	080085c5 	.word	0x080085c5
 8008554:	080085e5 	.word	0x080085e5
 8008558:	080085e5 	.word	0x080085e5
 800855c:	080085e5 	.word	0x080085e5
 8008560:	080085e5 	.word	0x080085e5
 8008564:	080085e5 	.word	0x080085e5
 8008568:	080085e5 	.word	0x080085e5
 800856c:	080085e5 	.word	0x080085e5
 8008570:	080085cd 	.word	0x080085cd
 8008574:	080085e5 	.word	0x080085e5
 8008578:	080085e5 	.word	0x080085e5
 800857c:	080085e5 	.word	0x080085e5
 8008580:	080085e5 	.word	0x080085e5
 8008584:	080085e5 	.word	0x080085e5
 8008588:	080085e5 	.word	0x080085e5
 800858c:	080085e5 	.word	0x080085e5
 8008590:	080085d5 	.word	0x080085d5
 8008594:	080085e5 	.word	0x080085e5
 8008598:	080085e5 	.word	0x080085e5
 800859c:	080085e5 	.word	0x080085e5
 80085a0:	080085e5 	.word	0x080085e5
 80085a4:	080085e5 	.word	0x080085e5
 80085a8:	080085e5 	.word	0x080085e5
 80085ac:	080085e5 	.word	0x080085e5
 80085b0:	080085dd 	.word	0x080085dd
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ba:	e0bc      	b.n	8008736 <UART_SetConfig+0x5a2>
 80085bc:	2304      	movs	r3, #4
 80085be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085c2:	e0b8      	b.n	8008736 <UART_SetConfig+0x5a2>
 80085c4:	2308      	movs	r3, #8
 80085c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ca:	e0b4      	b.n	8008736 <UART_SetConfig+0x5a2>
 80085cc:	2310      	movs	r3, #16
 80085ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085d2:	e0b0      	b.n	8008736 <UART_SetConfig+0x5a2>
 80085d4:	2320      	movs	r3, #32
 80085d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085da:	e0ac      	b.n	8008736 <UART_SetConfig+0x5a2>
 80085dc:	2340      	movs	r3, #64	; 0x40
 80085de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085e2:	e0a8      	b.n	8008736 <UART_SetConfig+0x5a2>
 80085e4:	2380      	movs	r3, #128	; 0x80
 80085e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ea:	e0a4      	b.n	8008736 <UART_SetConfig+0x5a2>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a90      	ldr	r2, [pc, #576]	; (8008834 <UART_SetConfig+0x6a0>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d130      	bne.n	8008658 <UART_SetConfig+0x4c4>
 80085f6:	4b8e      	ldr	r3, [pc, #568]	; (8008830 <UART_SetConfig+0x69c>)
 80085f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	2b05      	cmp	r3, #5
 8008600:	d826      	bhi.n	8008650 <UART_SetConfig+0x4bc>
 8008602:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <UART_SetConfig+0x474>)
 8008604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008608:	08008621 	.word	0x08008621
 800860c:	08008629 	.word	0x08008629
 8008610:	08008631 	.word	0x08008631
 8008614:	08008639 	.word	0x08008639
 8008618:	08008641 	.word	0x08008641
 800861c:	08008649 	.word	0x08008649
 8008620:	2300      	movs	r3, #0
 8008622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008626:	e086      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008628:	2304      	movs	r3, #4
 800862a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800862e:	e082      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008630:	2308      	movs	r3, #8
 8008632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008636:	e07e      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008638:	2310      	movs	r3, #16
 800863a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800863e:	e07a      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008640:	2320      	movs	r3, #32
 8008642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008646:	e076      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008648:	2340      	movs	r3, #64	; 0x40
 800864a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800864e:	e072      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008650:	2380      	movs	r3, #128	; 0x80
 8008652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008656:	e06e      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a76      	ldr	r2, [pc, #472]	; (8008838 <UART_SetConfig+0x6a4>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d130      	bne.n	80086c4 <UART_SetConfig+0x530>
 8008662:	4b73      	ldr	r3, [pc, #460]	; (8008830 <UART_SetConfig+0x69c>)
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	f003 0307 	and.w	r3, r3, #7
 800866a:	2b05      	cmp	r3, #5
 800866c:	d826      	bhi.n	80086bc <UART_SetConfig+0x528>
 800866e:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0x4e0>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	0800868d 	.word	0x0800868d
 8008678:	08008695 	.word	0x08008695
 800867c:	0800869d 	.word	0x0800869d
 8008680:	080086a5 	.word	0x080086a5
 8008684:	080086ad 	.word	0x080086ad
 8008688:	080086b5 	.word	0x080086b5
 800868c:	2300      	movs	r3, #0
 800868e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008692:	e050      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008694:	2304      	movs	r3, #4
 8008696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800869a:	e04c      	b.n	8008736 <UART_SetConfig+0x5a2>
 800869c:	2308      	movs	r3, #8
 800869e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086a2:	e048      	b.n	8008736 <UART_SetConfig+0x5a2>
 80086a4:	2310      	movs	r3, #16
 80086a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086aa:	e044      	b.n	8008736 <UART_SetConfig+0x5a2>
 80086ac:	2320      	movs	r3, #32
 80086ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086b2:	e040      	b.n	8008736 <UART_SetConfig+0x5a2>
 80086b4:	2340      	movs	r3, #64	; 0x40
 80086b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ba:	e03c      	b.n	8008736 <UART_SetConfig+0x5a2>
 80086bc:	2380      	movs	r3, #128	; 0x80
 80086be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086c2:	e038      	b.n	8008736 <UART_SetConfig+0x5a2>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a5c      	ldr	r2, [pc, #368]	; (800883c <UART_SetConfig+0x6a8>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d130      	bne.n	8008730 <UART_SetConfig+0x59c>
 80086ce:	4b58      	ldr	r3, [pc, #352]	; (8008830 <UART_SetConfig+0x69c>)
 80086d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d2:	f003 0307 	and.w	r3, r3, #7
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d826      	bhi.n	8008728 <UART_SetConfig+0x594>
 80086da:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <UART_SetConfig+0x54c>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	080086f9 	.word	0x080086f9
 80086e4:	08008701 	.word	0x08008701
 80086e8:	08008709 	.word	0x08008709
 80086ec:	08008711 	.word	0x08008711
 80086f0:	08008719 	.word	0x08008719
 80086f4:	08008721 	.word	0x08008721
 80086f8:	2302      	movs	r3, #2
 80086fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086fe:	e01a      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008700:	2304      	movs	r3, #4
 8008702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008706:	e016      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008708:	2308      	movs	r3, #8
 800870a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800870e:	e012      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008710:	2310      	movs	r3, #16
 8008712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008716:	e00e      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008718:	2320      	movs	r3, #32
 800871a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800871e:	e00a      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008720:	2340      	movs	r3, #64	; 0x40
 8008722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008726:	e006      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008728:	2380      	movs	r3, #128	; 0x80
 800872a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800872e:	e002      	b.n	8008736 <UART_SetConfig+0x5a2>
 8008730:	2380      	movs	r3, #128	; 0x80
 8008732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a40      	ldr	r2, [pc, #256]	; (800883c <UART_SetConfig+0x6a8>)
 800873c:	4293      	cmp	r3, r2
 800873e:	f040 80ef 	bne.w	8008920 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008742:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008746:	2b20      	cmp	r3, #32
 8008748:	dc46      	bgt.n	80087d8 <UART_SetConfig+0x644>
 800874a:	2b02      	cmp	r3, #2
 800874c:	f2c0 8081 	blt.w	8008852 <UART_SetConfig+0x6be>
 8008750:	3b02      	subs	r3, #2
 8008752:	2b1e      	cmp	r3, #30
 8008754:	d87d      	bhi.n	8008852 <UART_SetConfig+0x6be>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <UART_SetConfig+0x5c8>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	080087df 	.word	0x080087df
 8008760:	08008853 	.word	0x08008853
 8008764:	080087e7 	.word	0x080087e7
 8008768:	08008853 	.word	0x08008853
 800876c:	08008853 	.word	0x08008853
 8008770:	08008853 	.word	0x08008853
 8008774:	080087f7 	.word	0x080087f7
 8008778:	08008853 	.word	0x08008853
 800877c:	08008853 	.word	0x08008853
 8008780:	08008853 	.word	0x08008853
 8008784:	08008853 	.word	0x08008853
 8008788:	08008853 	.word	0x08008853
 800878c:	08008853 	.word	0x08008853
 8008790:	08008853 	.word	0x08008853
 8008794:	08008807 	.word	0x08008807
 8008798:	08008853 	.word	0x08008853
 800879c:	08008853 	.word	0x08008853
 80087a0:	08008853 	.word	0x08008853
 80087a4:	08008853 	.word	0x08008853
 80087a8:	08008853 	.word	0x08008853
 80087ac:	08008853 	.word	0x08008853
 80087b0:	08008853 	.word	0x08008853
 80087b4:	08008853 	.word	0x08008853
 80087b8:	08008853 	.word	0x08008853
 80087bc:	08008853 	.word	0x08008853
 80087c0:	08008853 	.word	0x08008853
 80087c4:	08008853 	.word	0x08008853
 80087c8:	08008853 	.word	0x08008853
 80087cc:	08008853 	.word	0x08008853
 80087d0:	08008853 	.word	0x08008853
 80087d4:	08008845 	.word	0x08008845
 80087d8:	2b40      	cmp	r3, #64	; 0x40
 80087da:	d036      	beq.n	800884a <UART_SetConfig+0x6b6>
 80087dc:	e039      	b.n	8008852 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80087de:	f7fd f807 	bl	80057f0 <HAL_RCCEx_GetD3PCLK1Freq>
 80087e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80087e4:	e03b      	b.n	800885e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e6:	f107 0314 	add.w	r3, r7, #20
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fd f816 	bl	800581c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087f4:	e033      	b.n	800885e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087f6:	f107 0308 	add.w	r3, r7, #8
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fd f962 	bl	8005ac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008804:	e02b      	b.n	800885e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008806:	4b0a      	ldr	r3, [pc, #40]	; (8008830 <UART_SetConfig+0x69c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d009      	beq.n	8008826 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008812:	4b07      	ldr	r3, [pc, #28]	; (8008830 <UART_SetConfig+0x69c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	08db      	lsrs	r3, r3, #3
 8008818:	f003 0303 	and.w	r3, r3, #3
 800881c:	4a08      	ldr	r2, [pc, #32]	; (8008840 <UART_SetConfig+0x6ac>)
 800881e:	fa22 f303 	lsr.w	r3, r2, r3
 8008822:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008824:	e01b      	b.n	800885e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008826:	4b06      	ldr	r3, [pc, #24]	; (8008840 <UART_SetConfig+0x6ac>)
 8008828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800882a:	e018      	b.n	800885e <UART_SetConfig+0x6ca>
 800882c:	40011400 	.word	0x40011400
 8008830:	58024400 	.word	0x58024400
 8008834:	40007800 	.word	0x40007800
 8008838:	40007c00 	.word	0x40007c00
 800883c:	58000c00 	.word	0x58000c00
 8008840:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008844:	4bc4      	ldr	r3, [pc, #784]	; (8008b58 <UART_SetConfig+0x9c4>)
 8008846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008848:	e009      	b.n	800885e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800884a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800884e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008850:	e005      	b.n	800885e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800885c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 81da 	beq.w	8008c1a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	4abc      	ldr	r2, [pc, #752]	; (8008b5c <UART_SetConfig+0x9c8>)
 800886c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008870:	461a      	mov	r2, r3
 8008872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008874:	fbb3 f3f2 	udiv	r3, r3, r2
 8008878:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	4413      	add	r3, r2
 8008884:	6a3a      	ldr	r2, [r7, #32]
 8008886:	429a      	cmp	r2, r3
 8008888:	d305      	bcc.n	8008896 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008890:	6a3a      	ldr	r2, [r7, #32]
 8008892:	429a      	cmp	r2, r3
 8008894:	d903      	bls.n	800889e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800889c:	e1bd      	b.n	8008c1a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	4618      	mov	r0, r3
 80088a2:	f04f 0100 	mov.w	r1, #0
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	4aac      	ldr	r2, [pc, #688]	; (8008b5c <UART_SetConfig+0x9c8>)
 80088ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	f04f 0300 	mov.w	r3, #0
 80088b6:	f7f7 fd13 	bl	80002e0 <__aeabi_uldivmod>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4610      	mov	r0, r2
 80088c0:	4619      	mov	r1, r3
 80088c2:	f04f 0200 	mov.w	r2, #0
 80088c6:	f04f 0300 	mov.w	r3, #0
 80088ca:	020b      	lsls	r3, r1, #8
 80088cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088d0:	0202      	lsls	r2, r0, #8
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	6849      	ldr	r1, [r1, #4]
 80088d6:	0849      	lsrs	r1, r1, #1
 80088d8:	4608      	mov	r0, r1
 80088da:	f04f 0100 	mov.w	r1, #0
 80088de:	1814      	adds	r4, r2, r0
 80088e0:	eb43 0501 	adc.w	r5, r3, r1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	461a      	mov	r2, r3
 80088ea:	f04f 0300 	mov.w	r3, #0
 80088ee:	4620      	mov	r0, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	f7f7 fcf5 	bl	80002e0 <__aeabi_uldivmod>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4613      	mov	r3, r2
 80088fc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008904:	d308      	bcc.n	8008918 <UART_SetConfig+0x784>
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800890c:	d204      	bcs.n	8008918 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008914:	60da      	str	r2, [r3, #12]
 8008916:	e180      	b.n	8008c1a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800891e:	e17c      	b.n	8008c1a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008928:	f040 80be 	bne.w	8008aa8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800892c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008930:	2b20      	cmp	r3, #32
 8008932:	dc49      	bgt.n	80089c8 <UART_SetConfig+0x834>
 8008934:	2b00      	cmp	r3, #0
 8008936:	db7c      	blt.n	8008a32 <UART_SetConfig+0x89e>
 8008938:	2b20      	cmp	r3, #32
 800893a:	d87a      	bhi.n	8008a32 <UART_SetConfig+0x89e>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <UART_SetConfig+0x7b0>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	080089cf 	.word	0x080089cf
 8008948:	080089d7 	.word	0x080089d7
 800894c:	08008a33 	.word	0x08008a33
 8008950:	08008a33 	.word	0x08008a33
 8008954:	080089df 	.word	0x080089df
 8008958:	08008a33 	.word	0x08008a33
 800895c:	08008a33 	.word	0x08008a33
 8008960:	08008a33 	.word	0x08008a33
 8008964:	080089ef 	.word	0x080089ef
 8008968:	08008a33 	.word	0x08008a33
 800896c:	08008a33 	.word	0x08008a33
 8008970:	08008a33 	.word	0x08008a33
 8008974:	08008a33 	.word	0x08008a33
 8008978:	08008a33 	.word	0x08008a33
 800897c:	08008a33 	.word	0x08008a33
 8008980:	08008a33 	.word	0x08008a33
 8008984:	080089ff 	.word	0x080089ff
 8008988:	08008a33 	.word	0x08008a33
 800898c:	08008a33 	.word	0x08008a33
 8008990:	08008a33 	.word	0x08008a33
 8008994:	08008a33 	.word	0x08008a33
 8008998:	08008a33 	.word	0x08008a33
 800899c:	08008a33 	.word	0x08008a33
 80089a0:	08008a33 	.word	0x08008a33
 80089a4:	08008a33 	.word	0x08008a33
 80089a8:	08008a33 	.word	0x08008a33
 80089ac:	08008a33 	.word	0x08008a33
 80089b0:	08008a33 	.word	0x08008a33
 80089b4:	08008a33 	.word	0x08008a33
 80089b8:	08008a33 	.word	0x08008a33
 80089bc:	08008a33 	.word	0x08008a33
 80089c0:	08008a33 	.word	0x08008a33
 80089c4:	08008a25 	.word	0x08008a25
 80089c8:	2b40      	cmp	r3, #64	; 0x40
 80089ca:	d02e      	beq.n	8008a2a <UART_SetConfig+0x896>
 80089cc:	e031      	b.n	8008a32 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ce:	f7fb ff61 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 80089d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80089d4:	e033      	b.n	8008a3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089d6:	f7fb ff73 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 80089da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80089dc:	e02f      	b.n	8008a3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089de:	f107 0314 	add.w	r3, r7, #20
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fc ff1a 	bl	800581c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089ec:	e027      	b.n	8008a3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ee:	f107 0308 	add.w	r3, r7, #8
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fd f866 	bl	8005ac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089fc:	e01f      	b.n	8008a3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089fe:	4b58      	ldr	r3, [pc, #352]	; (8008b60 <UART_SetConfig+0x9cc>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0320 	and.w	r3, r3, #32
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d009      	beq.n	8008a1e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a0a:	4b55      	ldr	r3, [pc, #340]	; (8008b60 <UART_SetConfig+0x9cc>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	08db      	lsrs	r3, r3, #3
 8008a10:	f003 0303 	and.w	r3, r3, #3
 8008a14:	4a53      	ldr	r2, [pc, #332]	; (8008b64 <UART_SetConfig+0x9d0>)
 8008a16:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a1c:	e00f      	b.n	8008a3e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008a1e:	4b51      	ldr	r3, [pc, #324]	; (8008b64 <UART_SetConfig+0x9d0>)
 8008a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a22:	e00c      	b.n	8008a3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a24:	4b4c      	ldr	r3, [pc, #304]	; (8008b58 <UART_SetConfig+0x9c4>)
 8008a26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a28:	e009      	b.n	8008a3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a30:	e005      	b.n	8008a3e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 80ea 	beq.w	8008c1a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	4a44      	ldr	r2, [pc, #272]	; (8008b5c <UART_SetConfig+0x9c8>)
 8008a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a58:	005a      	lsls	r2, r3, #1
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	085b      	lsrs	r3, r3, #1
 8008a60:	441a      	add	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	2b0f      	cmp	r3, #15
 8008a70:	d916      	bls.n	8008aa0 <UART_SetConfig+0x90c>
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a78:	d212      	bcs.n	8008aa0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f023 030f 	bic.w	r3, r3, #15
 8008a82:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	085b      	lsrs	r3, r3, #1
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a92:	4313      	orrs	r3, r2
 8008a94:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a9c:	60da      	str	r2, [r3, #12]
 8008a9e:	e0bc      	b.n	8008c1a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008aa6:	e0b8      	b.n	8008c1a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	dc4b      	bgt.n	8008b48 <UART_SetConfig+0x9b4>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f2c0 8087 	blt.w	8008bc4 <UART_SetConfig+0xa30>
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	f200 8084 	bhi.w	8008bc4 <UART_SetConfig+0xa30>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0x930>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008b4f 	.word	0x08008b4f
 8008ac8:	08008b69 	.word	0x08008b69
 8008acc:	08008bc5 	.word	0x08008bc5
 8008ad0:	08008bc5 	.word	0x08008bc5
 8008ad4:	08008b71 	.word	0x08008b71
 8008ad8:	08008bc5 	.word	0x08008bc5
 8008adc:	08008bc5 	.word	0x08008bc5
 8008ae0:	08008bc5 	.word	0x08008bc5
 8008ae4:	08008b81 	.word	0x08008b81
 8008ae8:	08008bc5 	.word	0x08008bc5
 8008aec:	08008bc5 	.word	0x08008bc5
 8008af0:	08008bc5 	.word	0x08008bc5
 8008af4:	08008bc5 	.word	0x08008bc5
 8008af8:	08008bc5 	.word	0x08008bc5
 8008afc:	08008bc5 	.word	0x08008bc5
 8008b00:	08008bc5 	.word	0x08008bc5
 8008b04:	08008b91 	.word	0x08008b91
 8008b08:	08008bc5 	.word	0x08008bc5
 8008b0c:	08008bc5 	.word	0x08008bc5
 8008b10:	08008bc5 	.word	0x08008bc5
 8008b14:	08008bc5 	.word	0x08008bc5
 8008b18:	08008bc5 	.word	0x08008bc5
 8008b1c:	08008bc5 	.word	0x08008bc5
 8008b20:	08008bc5 	.word	0x08008bc5
 8008b24:	08008bc5 	.word	0x08008bc5
 8008b28:	08008bc5 	.word	0x08008bc5
 8008b2c:	08008bc5 	.word	0x08008bc5
 8008b30:	08008bc5 	.word	0x08008bc5
 8008b34:	08008bc5 	.word	0x08008bc5
 8008b38:	08008bc5 	.word	0x08008bc5
 8008b3c:	08008bc5 	.word	0x08008bc5
 8008b40:	08008bc5 	.word	0x08008bc5
 8008b44:	08008bb7 	.word	0x08008bb7
 8008b48:	2b40      	cmp	r3, #64	; 0x40
 8008b4a:	d037      	beq.n	8008bbc <UART_SetConfig+0xa28>
 8008b4c:	e03a      	b.n	8008bc4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b4e:	f7fb fea1 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 8008b52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008b54:	e03c      	b.n	8008bd0 <UART_SetConfig+0xa3c>
 8008b56:	bf00      	nop
 8008b58:	003d0900 	.word	0x003d0900
 8008b5c:	0800f790 	.word	0x0800f790
 8008b60:	58024400 	.word	0x58024400
 8008b64:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b68:	f7fb feaa 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8008b6c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008b6e:	e02f      	b.n	8008bd0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b70:	f107 0314 	add.w	r3, r7, #20
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fc fe51 	bl	800581c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b7e:	e027      	b.n	8008bd0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b80:	f107 0308 	add.w	r3, r7, #8
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fc ff9d 	bl	8005ac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b8e:	e01f      	b.n	8008bd0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b90:	4b2c      	ldr	r3, [pc, #176]	; (8008c44 <UART_SetConfig+0xab0>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d009      	beq.n	8008bb0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b9c:	4b29      	ldr	r3, [pc, #164]	; (8008c44 <UART_SetConfig+0xab0>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	08db      	lsrs	r3, r3, #3
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	4a28      	ldr	r2, [pc, #160]	; (8008c48 <UART_SetConfig+0xab4>)
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bae:	e00f      	b.n	8008bd0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008bb0:	4b25      	ldr	r3, [pc, #148]	; (8008c48 <UART_SetConfig+0xab4>)
 8008bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bb4:	e00c      	b.n	8008bd0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bb6:	4b25      	ldr	r3, [pc, #148]	; (8008c4c <UART_SetConfig+0xab8>)
 8008bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bba:	e009      	b.n	8008bd0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bc2:	e005      	b.n	8008bd0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008bce:	bf00      	nop
    }

    if (pclk != 0U)
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d021      	beq.n	8008c1a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bda:	4a1d      	ldr	r2, [pc, #116]	; (8008c50 <UART_SetConfig+0xabc>)
 8008bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be0:	461a      	mov	r2, r3
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	085b      	lsrs	r3, r3, #1
 8008bee:	441a      	add	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	2b0f      	cmp	r3, #15
 8008bfe:	d909      	bls.n	8008c14 <UART_SetConfig+0xa80>
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c06:	d205      	bcs.n	8008c14 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60da      	str	r2, [r3, #12]
 8008c12:	e002      	b.n	8008c1a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008c36:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3738      	adds	r7, #56	; 0x38
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bdb0      	pop	{r4, r5, r7, pc}
 8008c42:	bf00      	nop
 8008c44:	58024400 	.word	0x58024400
 8008c48:	03d09000 	.word	0x03d09000
 8008c4c:	003d0900 	.word	0x003d0900
 8008c50:	0800f790 	.word	0x0800f790

08008c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00a      	beq.n	8008cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc6:	f003 0308 	and.w	r3, r3, #8
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	430a      	orrs	r2, r1
 8008d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01a      	beq.n	8008d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d52:	d10a      	bne.n	8008d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	605a      	str	r2, [r3, #4]
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008da8:	f7f7 fc66 	bl	8000678 <HAL_GetTick>
 8008dac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0308 	and.w	r3, r3, #8
 8008db8:	2b08      	cmp	r3, #8
 8008dba:	d10e      	bne.n	8008dda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f82f 	bl	8008e2e <UART_WaitOnFlagUntilTimeout>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e025      	b.n	8008e26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d10e      	bne.n	8008e06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f819 	bl	8008e2e <UART_WaitOnFlagUntilTimeout>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e00f      	b.n	8008e26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b09c      	sub	sp, #112	; 0x70
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	60f8      	str	r0, [r7, #12]
 8008e36:	60b9      	str	r1, [r7, #8]
 8008e38:	603b      	str	r3, [r7, #0]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e3e:	e0a9      	b.n	8008f94 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e46:	f000 80a5 	beq.w	8008f94 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e4a:	f7f7 fc15 	bl	8000678 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d302      	bcc.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d140      	bne.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e68:	e853 3f00 	ldrex	r3, [r3]
 8008e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e74:	667b      	str	r3, [r7, #100]	; 0x64
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e86:	e841 2300 	strex	r3, r2, [r1]
 8008e8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e6      	bne.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3308      	adds	r3, #8
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	f023 0301 	bic.w	r3, r3, #1
 8008ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008eb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008eb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e5      	bne.n	8008e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e069      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d051      	beq.n	8008f94 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008efe:	d149      	bne.n	8008f94 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f28:	637b      	str	r3, [r7, #52]	; 0x34
 8008f2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e6      	bne.n	8008f0a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	f023 0301 	bic.w	r3, r3, #1
 8008f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f5c:	623a      	str	r2, [r7, #32]
 8008f5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	69f9      	ldr	r1, [r7, #28]
 8008f62:	6a3a      	ldr	r2, [r7, #32]
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e5      	bne.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2220      	movs	r2, #32
 8008f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2220      	movs	r2, #32
 8008f84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e010      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	69da      	ldr	r2, [r3, #28]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2301      	moveq	r3, #1
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	461a      	mov	r2, r3
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	f43f af46 	beq.w	8008e40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3770      	adds	r7, #112	; 0x70
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b096      	sub	sp, #88	; 0x58
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	88fa      	ldrh	r2, [r7, #6]
 8008fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2222      	movs	r2, #34	; 0x22
 8008fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d02c      	beq.n	800904e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff8:	4a42      	ldr	r2, [pc, #264]	; (8009104 <UART_Start_Receive_DMA+0x144>)
 8008ffa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009000:	4a41      	ldr	r2, [pc, #260]	; (8009108 <UART_Start_Receive_DMA+0x148>)
 8009002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009008:	4a40      	ldr	r2, [pc, #256]	; (800910c <UART_Start_Receive_DMA+0x14c>)
 800900a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009010:	2200      	movs	r2, #0
 8009012:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3324      	adds	r3, #36	; 0x24
 800901e:	4619      	mov	r1, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009024:	461a      	mov	r2, r3
 8009026:	88fb      	ldrh	r3, [r7, #6]
 8009028:	f7f7 ff7a 	bl	8000f20 <HAL_DMA_Start_IT>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00d      	beq.n	800904e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2210      	movs	r2, #16
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2220      	movs	r2, #32
 8009046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e055      	b.n	80090fa <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d018      	beq.n	8009090 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009072:	657b      	str	r3, [r7, #84]	; 0x54
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	461a      	mov	r2, r3
 800907a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800907c:	64bb      	str	r3, [r7, #72]	; 0x48
 800907e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009084:	e841 2300 	strex	r3, r2, [r1]
 8009088:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800908a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e6      	bne.n	800905e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3308      	adds	r3, #8
 8009096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	f043 0301 	orr.w	r3, r3, #1
 80090a6:	653b      	str	r3, [r7, #80]	; 0x50
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3308      	adds	r3, #8
 80090ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090b0:	637a      	str	r2, [r7, #52]	; 0x34
 80090b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e5      	bne.n	8009090 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3308      	adds	r3, #8
 80090ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	613b      	str	r3, [r7, #16]
   return(result);
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3308      	adds	r3, #8
 80090e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090e4:	623a      	str	r2, [r7, #32]
 80090e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	69f9      	ldr	r1, [r7, #28]
 80090ea:	6a3a      	ldr	r2, [r7, #32]
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e5      	bne.n	80090c4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3758      	adds	r7, #88	; 0x58
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	08009313 	.word	0x08009313
 8009108:	08009435 	.word	0x08009435
 800910c:	0800946d 	.word	0x0800946d

08009110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009110:	b480      	push	{r7}
 8009112:	b08f      	sub	sp, #60	; 0x3c
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	e853 3f00 	ldrex	r3, [r3]
 8009124:	61fb      	str	r3, [r7, #28]
   return(result);
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800912c:	637b      	str	r3, [r7, #52]	; 0x34
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009138:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800913c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800913e:	e841 2300 	strex	r3, r2, [r1]
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1e6      	bne.n	8009118 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3308      	adds	r3, #8
 8009150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	60bb      	str	r3, [r7, #8]
   return(result);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009160:	633b      	str	r3, [r7, #48]	; 0x30
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3308      	adds	r3, #8
 8009168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800916a:	61ba      	str	r2, [r7, #24]
 800916c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	6979      	ldr	r1, [r7, #20]
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	613b      	str	r3, [r7, #16]
   return(result);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e5      	bne.n	800914a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2220      	movs	r2, #32
 8009182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009186:	bf00      	nop
 8009188:	373c      	adds	r7, #60	; 0x3c
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
	...

08009194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b095      	sub	sp, #84	; 0x54
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ba:	643b      	str	r3, [r7, #64]	; 0x40
 80091bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091c2:	e841 2300 	strex	r3, r2, [r1]
 80091c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1e6      	bne.n	800919c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3308      	adds	r3, #8
 80091d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	e853 3f00 	ldrex	r3, [r3]
 80091dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	4b1e      	ldr	r3, [pc, #120]	; (800925c <UART_EndRxTransfer+0xc8>)
 80091e2:	4013      	ands	r3, r2
 80091e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3308      	adds	r3, #8
 80091ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091f6:	e841 2300 	strex	r3, r2, [r1]
 80091fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1e5      	bne.n	80091ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009206:	2b01      	cmp	r3, #1
 8009208:	d118      	bne.n	800923c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	60bb      	str	r3, [r7, #8]
   return(result);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	f023 0310 	bic.w	r3, r3, #16
 800921e:	647b      	str	r3, [r7, #68]	; 0x44
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6979      	ldr	r1, [r7, #20]
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	613b      	str	r3, [r7, #16]
   return(result);
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e6      	bne.n	800920a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2220      	movs	r2, #32
 8009240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009250:	bf00      	nop
 8009252:	3754      	adds	r7, #84	; 0x54
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	effffffe 	.word	0xeffffffe

08009260 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b090      	sub	sp, #64	; 0x40
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009276:	d037      	beq.n	80092e8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927a:	2200      	movs	r2, #0
 800927c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3308      	adds	r3, #8
 8009286:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	623b      	str	r3, [r7, #32]
   return(result);
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009296:	63bb      	str	r3, [r7, #56]	; 0x38
 8009298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3308      	adds	r3, #8
 800929e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a0:	633a      	str	r2, [r7, #48]	; 0x30
 80092a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092a8:	e841 2300 	strex	r3, r2, [r1]
 80092ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e5      	bne.n	8009280 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c8:	637b      	str	r3, [r7, #52]	; 0x34
 80092ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d2:	61fb      	str	r3, [r7, #28]
 80092d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	69b9      	ldr	r1, [r7, #24]
 80092d8:	69fa      	ldr	r2, [r7, #28]
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	617b      	str	r3, [r7, #20]
   return(result);
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e6      	bne.n	80092b4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092e6:	e002      	b.n	80092ee <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80092e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092ea:	f7fe feff 	bl	80080ec <HAL_UART_TxCpltCallback>
}
 80092ee:	bf00      	nop
 80092f0:	3740      	adds	r7, #64	; 0x40
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f7fe fefb 	bl	8008100 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b09c      	sub	sp, #112	; 0x70
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009328:	d071      	beq.n	800940e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800932a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800932c:	2200      	movs	r2, #0
 800932e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009346:	66bb      	str	r3, [r7, #104]	; 0x68
 8009348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009350:	65bb      	str	r3, [r7, #88]	; 0x58
 8009352:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009356:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800935e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e6      	bne.n	8009332 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	f023 0301 	bic.w	r3, r3, #1
 800937a:	667b      	str	r3, [r7, #100]	; 0x64
 800937c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009384:	647a      	str	r2, [r7, #68]	; 0x44
 8009386:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800938a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e5      	bne.n	8009364 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	623b      	str	r3, [r7, #32]
   return(result);
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ae:	663b      	str	r3, [r7, #96]	; 0x60
 80093b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093b8:	633a      	str	r2, [r7, #48]	; 0x30
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e5      	bne.n	8009398 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ce:	2220      	movs	r2, #32
 80093d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d118      	bne.n	800940e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	e853 3f00 	ldrex	r3, [r3]
 80093e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f023 0310 	bic.w	r3, r3, #16
 80093f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093fa:	61fb      	str	r3, [r7, #28]
 80093fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	69b9      	ldr	r1, [r7, #24]
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	617b      	str	r3, [r7, #20]
   return(result);
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1e6      	bne.n	80093dc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800940e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009412:	2b01      	cmp	r3, #1
 8009414:	d107      	bne.n	8009426 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009418:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800941c:	4619      	mov	r1, r3
 800941e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009420:	f7fe fe96 	bl	8008150 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009424:	e002      	b.n	800942c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8009426:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009428:	f7fe fe74 	bl	8008114 <HAL_UART_RxCpltCallback>
}
 800942c:	bf00      	nop
 800942e:	3770      	adds	r7, #112	; 0x70
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009440:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009446:	2b01      	cmp	r3, #1
 8009448:	d109      	bne.n	800945e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009450:	085b      	lsrs	r3, r3, #1
 8009452:	b29b      	uxth	r3, r3
 8009454:	4619      	mov	r1, r3
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7fe fe7a 	bl	8008150 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800945c:	e002      	b.n	8009464 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f7fe fe62 	bl	8008128 <HAL_UART_RxHalfCpltCallback>
}
 8009464:	bf00      	nop
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009480:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009488:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009494:	2b80      	cmp	r3, #128	; 0x80
 8009496:	d109      	bne.n	80094ac <UART_DMAError+0x40>
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	2b21      	cmp	r3, #33	; 0x21
 800949c:	d106      	bne.n	80094ac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80094a6:	6978      	ldr	r0, [r7, #20]
 80094a8:	f7ff fe32 	bl	8009110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b40      	cmp	r3, #64	; 0x40
 80094b8:	d109      	bne.n	80094ce <UART_DMAError+0x62>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b22      	cmp	r3, #34	; 0x22
 80094be:	d106      	bne.n	80094ce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80094c8:	6978      	ldr	r0, [r7, #20]
 80094ca:	f7ff fe63 	bl	8009194 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d4:	f043 0210 	orr.w	r2, r3, #16
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094de:	6978      	ldr	r0, [r7, #20]
 80094e0:	f7fe fe2c 	bl	800813c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094e4:	bf00      	nop
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7fe fe16 	bl	800813c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	60bb      	str	r3, [r7, #8]
   return(result);
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009534:	61fb      	str	r3, [r7, #28]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	61bb      	str	r3, [r7, #24]
 8009540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6979      	ldr	r1, [r7, #20]
 8009544:	69ba      	ldr	r2, [r7, #24]
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	613b      	str	r3, [r7, #16]
   return(result);
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e6      	bne.n	8009520 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2220      	movs	r2, #32
 8009556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7fe fdc3 	bl	80080ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009566:	bf00      	nop
 8009568:	3720      	adds	r7, #32
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800958a:	bf00      	nop
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800959e:	bf00      	nop
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b085      	sub	sp, #20
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80095bc:	2302      	movs	r3, #2
 80095be:	e027      	b.n	8009610 <HAL_UARTEx_DisableFifoMode+0x66>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2224      	movs	r2, #36	; 0x24
 80095cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0201 	bic.w	r2, r2, #1
 80095e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2220      	movs	r2, #32
 8009602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009630:	2302      	movs	r3, #2
 8009632:	e02d      	b.n	8009690 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2224      	movs	r2, #36	; 0x24
 8009640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 0201 	bic.w	r2, r2, #1
 800965a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f84f 	bl	8009714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2220      	movs	r2, #32
 8009682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d101      	bne.n	80096b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096ac:	2302      	movs	r3, #2
 80096ae:	e02d      	b.n	800970c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2224      	movs	r2, #36	; 0x24
 80096bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0201 	bic.w	r2, r2, #1
 80096d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	430a      	orrs	r2, r1
 80096ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f811 	bl	8009714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2220      	movs	r2, #32
 80096fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009720:	2b00      	cmp	r3, #0
 8009722:	d108      	bne.n	8009736 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009734:	e031      	b.n	800979a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009736:	2310      	movs	r3, #16
 8009738:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800973a:	2310      	movs	r3, #16
 800973c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	0e5b      	lsrs	r3, r3, #25
 8009746:	b2db      	uxtb	r3, r3
 8009748:	f003 0307 	and.w	r3, r3, #7
 800974c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	0f5b      	lsrs	r3, r3, #29
 8009756:	b2db      	uxtb	r3, r3
 8009758:	f003 0307 	and.w	r3, r3, #7
 800975c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	7b3a      	ldrb	r2, [r7, #12]
 8009762:	4911      	ldr	r1, [pc, #68]	; (80097a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009764:	5c8a      	ldrb	r2, [r1, r2]
 8009766:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800976a:	7b3a      	ldrb	r2, [r7, #12]
 800976c:	490f      	ldr	r1, [pc, #60]	; (80097ac <UARTEx_SetNbDataToProcess+0x98>)
 800976e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009770:	fb93 f3f2 	sdiv	r3, r3, r2
 8009774:	b29a      	uxth	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800977c:	7bfb      	ldrb	r3, [r7, #15]
 800977e:	7b7a      	ldrb	r2, [r7, #13]
 8009780:	4909      	ldr	r1, [pc, #36]	; (80097a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009782:	5c8a      	ldrb	r2, [r1, r2]
 8009784:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009788:	7b7a      	ldrb	r2, [r7, #13]
 800978a:	4908      	ldr	r1, [pc, #32]	; (80097ac <UARTEx_SetNbDataToProcess+0x98>)
 800978c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800978e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009792:	b29a      	uxth	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800979a:	bf00      	nop
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	0800f7a8 	.word	0x0800f7a8
 80097ac:	0800f7b0 	.word	0x0800f7b0

080097b0 <MoveControl>:
#include "BasicCtrl.h"
#include <math.h>

void MoveControl(PwmVal_t *ThrusterTemp, uint16_t StraightNum,
		uint16_t RotateNum, uint16_t VerticalNum, uint8_t ModeNum)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	4608      	mov	r0, r1
 80097ba:	4611      	mov	r1, r2
 80097bc:	461a      	mov	r2, r3
 80097be:	4603      	mov	r3, r0
 80097c0:	817b      	strh	r3, [r7, #10]
 80097c2:	460b      	mov	r3, r1
 80097c4:	813b      	strh	r3, [r7, #8]
 80097c6:	4613      	mov	r3, r2
 80097c8:	80fb      	strh	r3, [r7, #6]
	uint8_t AFlag = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	75fb      	strb	r3, [r7, #23]
	uint8_t BFlag = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	75bb      	strb	r3, [r7, #22]
	uint8_t CFlag = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	757b      	strb	r3, [r7, #21]
	uint8_t DFlag = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	753b      	strb	r3, [r7, #20]
	uint8_t SFlag = 0;
 80097da:	2300      	movs	r3, #0
 80097dc:	74fb      	strb	r3, [r7, #19]

#if (NUMBER_OF_VERTICAL_THRUSTER == 2) && (NUMBER_OF_HORIZENTAL_THRUSTER == 4) /* 六轴 */
	switch (ModeNum)
 80097de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	f200 80f2 	bhi.w	80099cc <MoveControl+0x21c>
 80097e8:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <MoveControl+0x40>)
 80097ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ee:	bf00      	nop
 80097f0:	08009805 	.word	0x08009805
 80097f4:	08009997 	.word	0x08009997
 80097f8:	080099cd 	.word	0x080099cd
 80097fc:	080099cd 	.word	0x080099cd
 8009800:	080099cd 	.word	0x080099cd
	{
	case NORMAL_MODE:
		//Horizental Control
		AFlag = (RotateNum > StraightNum);
 8009804:	893a      	ldrh	r2, [r7, #8]
 8009806:	897b      	ldrh	r3, [r7, #10]
 8009808:	429a      	cmp	r2, r3
 800980a:	bf8c      	ite	hi
 800980c:	2301      	movhi	r3, #1
 800980e:	2300      	movls	r3, #0
 8009810:	b2db      	uxtb	r3, r3
 8009812:	75fb      	strb	r3, [r7, #23]
		BFlag = ((RotateNum + StraightNum) > (2 * PWM_MIDDLE_POSITION));
 8009814:	893a      	ldrh	r2, [r7, #8]
 8009816:	897b      	ldrh	r3, [r7, #10]
 8009818:	4413      	add	r3, r2
 800981a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800981e:	4293      	cmp	r3, r2
 8009820:	bfcc      	ite	gt
 8009822:	2301      	movgt	r3, #1
 8009824:	2300      	movle	r3, #0
 8009826:	b2db      	uxtb	r3, r3
 8009828:	75bb      	strb	r3, [r7, #22]
		CFlag = (RotateNum > PWM_MIDDLE_POSITION);
 800982a:	893b      	ldrh	r3, [r7, #8]
 800982c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009830:	4293      	cmp	r3, r2
 8009832:	bf8c      	ite	hi
 8009834:	2301      	movhi	r3, #1
 8009836:	2300      	movls	r3, #0
 8009838:	b2db      	uxtb	r3, r3
 800983a:	757b      	strb	r3, [r7, #21]
		DFlag = (StraightNum > PWM_MIDDLE_POSITION);
 800983c:	897b      	ldrh	r3, [r7, #10]
 800983e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009842:	4293      	cmp	r3, r2
 8009844:	bf8c      	ite	hi
 8009846:	2301      	movhi	r3, #1
 8009848:	2300      	movls	r3, #0
 800984a:	b2db      	uxtb	r3, r3
 800984c:	753b      	strb	r3, [r7, #20]
		SFlag = AFlag * 8 + BFlag * 4 + CFlag * 2 + DFlag;
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	005a      	lsls	r2, r3, #1
 8009852:	7dbb      	ldrb	r3, [r7, #22]
 8009854:	4413      	add	r3, r2
 8009856:	005a      	lsls	r2, r3, #1
 8009858:	7d7b      	ldrb	r3, [r7, #21]
 800985a:	4413      	add	r3, r2
 800985c:	b2db      	uxtb	r3, r3
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	b2da      	uxtb	r2, r3
 8009862:	7d3b      	ldrb	r3, [r7, #20]
 8009864:	4413      	add	r3, r2
 8009866:	74fb      	strb	r3, [r7, #19]
		switch (SFlag)
 8009868:	7cfb      	ldrb	r3, [r7, #19]
 800986a:	2b0f      	cmp	r3, #15
 800986c:	f200 808c 	bhi.w	8009988 <MoveControl+0x1d8>
 8009870:	a201      	add	r2, pc, #4	; (adr r2, 8009878 <MoveControl+0xc8>)
 8009872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009876:	bf00      	nop
 8009878:	080098b9 	.word	0x080098b9
 800987c:	0800994b 	.word	0x0800994b
 8009880:	08009989 	.word	0x08009989
 8009884:	08009989 	.word	0x08009989
 8009888:	08009989 	.word	0x08009989
 800988c:	0800991d 	.word	0x0800991d
 8009890:	08009989 	.word	0x08009989
 8009894:	080098eb 	.word	0x080098eb
 8009898:	080098eb 	.word	0x080098eb
 800989c:	08009989 	.word	0x08009989
 80098a0:	0800991d 	.word	0x0800991d
 80098a4:	08009989 	.word	0x08009989
 80098a8:	08009989 	.word	0x08009989
 80098ac:	08009989 	.word	0x08009989
 80098b0:	0800994b 	.word	0x0800994b
 80098b4:	080098b9 	.word	0x080098b9
		{
		case 0:
		case 15:
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) (RotateNum);
 80098b8:	893a      	ldrh	r2, [r7, #8]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	601a      	str	r2, [r3, #0]
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) (RotateNum);
 80098be:	893a      	ldrh	r2, [r7, #8]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	605a      	str	r2, [r3, #4]
			ThrusterTemp->HorizontalThruster[2] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 80098c4:	893a      	ldrh	r2, [r7, #8]
 80098c6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80098ca:	1a9b      	subs	r3, r3, r2
 80098cc:	897a      	ldrh	r2, [r7, #10]
 80098ce:	4413      	add	r3, r2
 80098d0:	461a      	mov	r2, r3
			ThrusterTemp->HorizontalThruster[2] =
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	609a      	str	r2, [r3, #8]
			ThrusterTemp->HorizontalThruster[3] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 80098d6:	893a      	ldrh	r2, [r7, #8]
 80098d8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80098dc:	1a9b      	subs	r3, r3, r2
 80098de:	897a      	ldrh	r2, [r7, #10]
 80098e0:	4413      	add	r3, r2
 80098e2:	461a      	mov	r2, r3
			ThrusterTemp->HorizontalThruster[3] =
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	60da      	str	r2, [r3, #12]
			break;
 80098e8:	e04e      	b.n	8009988 <MoveControl+0x1d8>
		case 7:
		case 8:
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) (StraightNum);
 80098ea:	897a      	ldrh	r2, [r7, #10]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	601a      	str	r2, [r3, #0]
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) (StraightNum);
 80098f0:	897a      	ldrh	r2, [r7, #10]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	605a      	str	r2, [r3, #4]
			ThrusterTemp->HorizontalThruster[2] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 80098f6:	893a      	ldrh	r2, [r7, #8]
 80098f8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80098fc:	1a9b      	subs	r3, r3, r2
 80098fe:	897a      	ldrh	r2, [r7, #10]
 8009900:	4413      	add	r3, r2
 8009902:	461a      	mov	r2, r3
			ThrusterTemp->HorizontalThruster[2] =
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	609a      	str	r2, [r3, #8]
			ThrusterTemp->HorizontalThruster[3] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 8009908:	893a      	ldrh	r2, [r7, #8]
 800990a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800990e:	1a9b      	subs	r3, r3, r2
 8009910:	897a      	ldrh	r2, [r7, #10]
 8009912:	4413      	add	r3, r2
 8009914:	461a      	mov	r2, r3
			ThrusterTemp->HorizontalThruster[3] =
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	60da      	str	r2, [r3, #12]
			break;
 800991a:	e035      	b.n	8009988 <MoveControl+0x1d8>
		case 5:
		case 10:
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 800991c:	893a      	ldrh	r2, [r7, #8]
 800991e:	897b      	ldrh	r3, [r7, #10]
 8009920:	4413      	add	r3, r2
 8009922:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((RotateNum
 8009926:	461a      	mov	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	601a      	str	r2, [r3, #0]
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 800992c:	893a      	ldrh	r2, [r7, #8]
 800992e:	897b      	ldrh	r3, [r7, #10]
 8009930:	4413      	add	r3, r2
 8009932:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) ((RotateNum
 8009936:	461a      	mov	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	605a      	str	r2, [r3, #4]
			ThrusterTemp->HorizontalThruster[2] = (uint32_t) (StraightNum);
 800993c:	897a      	ldrh	r2, [r7, #10]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	609a      	str	r2, [r3, #8]
			ThrusterTemp->HorizontalThruster[3] = (uint32_t) (StraightNum);
 8009942:	897a      	ldrh	r2, [r7, #10]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	60da      	str	r2, [r3, #12]
			break;
 8009948:	e01e      	b.n	8009988 <MoveControl+0x1d8>
		case 1:
		case 14:
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 800994a:	893a      	ldrh	r2, [r7, #8]
 800994c:	897b      	ldrh	r3, [r7, #10]
 800994e:	4413      	add	r3, r2
 8009950:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((RotateNum
 8009954:	461a      	mov	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	601a      	str	r2, [r3, #0]
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 800995a:	893a      	ldrh	r2, [r7, #8]
 800995c:	897b      	ldrh	r3, [r7, #10]
 800995e:	4413      	add	r3, r2
 8009960:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) ((RotateNum
 8009964:	461a      	mov	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	605a      	str	r2, [r3, #4]
			ThrusterTemp->HorizontalThruster[2] = (uint32_t) (((2
					* PWM_MIDDLE_POSITION) - RotateNum));
 800996a:	893a      	ldrh	r2, [r7, #8]
 800996c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009970:	1a9b      	subs	r3, r3, r2
			ThrusterTemp->HorizontalThruster[2] = (uint32_t) (((2
 8009972:	461a      	mov	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	609a      	str	r2, [r3, #8]
			ThrusterTemp->HorizontalThruster[3] = (uint32_t) (((2
					* PWM_MIDDLE_POSITION) - RotateNum));
 8009978:	893a      	ldrh	r2, [r7, #8]
 800997a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800997e:	1a9b      	subs	r3, r3, r2
			ThrusterTemp->HorizontalThruster[3] = (uint32_t) (((2
 8009980:	461a      	mov	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	60da      	str	r2, [r3, #12]
			break;
 8009986:	bf00      	nop
		}
		//Veritical Control
		ThrusterTemp->VerticalThruster[0] = (uint32_t) (VerticalNum);
 8009988:	88fa      	ldrh	r2, [r7, #6]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	611a      	str	r2, [r3, #16]
		ThrusterTemp->VerticalThruster[1] = (uint32_t) (VerticalNum);
 800998e:	88fa      	ldrh	r2, [r7, #6]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	615a      	str	r2, [r3, #20]
		break;
 8009994:	e01b      	b.n	80099ce <MoveControl+0x21e>
	case SIDEPUSH_MODE:
		//Horizental Control
		ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((2
				* PWM_MIDDLE_POSITION) - RotateNum);
 8009996:	893a      	ldrh	r2, [r7, #8]
 8009998:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800999c:	1a9b      	subs	r3, r3, r2
		ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((2
 800999e:	461a      	mov	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	601a      	str	r2, [r3, #0]
		ThrusterTemp->HorizontalThruster[1] = (uint32_t) (RotateNum);
 80099a4:	893a      	ldrh	r2, [r7, #8]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	605a      	str	r2, [r3, #4]
//		ThrusterTemp->HorizontalThruster[2] = (uint32_t) ((2
//				* PWM_MIDDLE_POSITION) - RotateNum);
//		ThrusterTemp->HorizontalThruster[3] = (uint32_t) (RotateNum);
		ThrusterTemp->HorizontalThruster[2] = (uint32_t) (RotateNum);
 80099aa:	893a      	ldrh	r2, [r7, #8]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	609a      	str	r2, [r3, #8]
		ThrusterTemp->HorizontalThruster[3] = (uint32_t) ((2
				* PWM_MIDDLE_POSITION) - RotateNum);
 80099b0:	893a      	ldrh	r2, [r7, #8]
 80099b2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80099b6:	1a9b      	subs	r3, r3, r2
		ThrusterTemp->HorizontalThruster[3] = (uint32_t) ((2
 80099b8:	461a      	mov	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	60da      	str	r2, [r3, #12]
		//Veritical Control
		ThrusterTemp->VerticalThruster[0] = (uint32_t) (VerticalNum);
 80099be:	88fa      	ldrh	r2, [r7, #6]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	611a      	str	r2, [r3, #16]
		ThrusterTemp->VerticalThruster[1] = (uint32_t) (VerticalNum);
 80099c4:	88fa      	ldrh	r2, [r7, #6]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	615a      	str	r2, [r3, #20]
		break;
 80099ca:	e000      	b.n	80099ce <MoveControl+0x21e>
	case ROLL_MODE: //Unavailable in 6axis ROV
		break;
	case MIX_MODE: //Unavailable in 6axis ROV
		break;
	default:
		break;
 80099cc:	bf00      	nop
        break;
    default:
        break;
    }
#endif
}
 80099ce:	bf00      	nop
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop

080099dc <ControlDataAnalysis>:

void ControlDataAnalysis(ControlData_t controller, PwmVal_t *temp_pwm,
		uint8_t ModeNum)
{
 80099dc:	b084      	sub	sp, #16
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af02      	add	r7, sp, #8
 80099e4:	f107 0c08 	add.w	ip, r7, #8
 80099e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MoveControl(temp_pwm, controller.StraightNum, controller.RotateNum,
 80099ec:	8979      	ldrh	r1, [r7, #10]
 80099ee:	89ba      	ldrh	r2, [r7, #12]
 80099f0:	89f8      	ldrh	r0, [r7, #14]
 80099f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	4603      	mov	r3, r0
 80099fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099fc:	f7ff fed8 	bl	80097b0 <MoveControl>
			controller.VerticalNum, ModeNum);

	temp_pwm->LightServo = controller.LightNum; //light
 8009a00:	8a3b      	ldrh	r3, [r7, #16]
 8009a02:	461a      	mov	r2, r3
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	619a      	str	r2, [r3, #24]
	temp_pwm->PanServo = controller.PanNum; //pan
 8009a08:	8a7b      	ldrh	r3, [r7, #18]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0e:	61da      	str	r2, [r3, #28]
	temp_pwm->ConveyServo = controller.ConveyNum; //convey
 8009a10:	8abb      	ldrh	r3, [r7, #20]
 8009a12:	461a      	mov	r2, r3
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	621a      	str	r2, [r3, #32]
	temp_pwm->ArmServo[0] = controller.ArmNum[0]; //Horizental
 8009a18:	8afb      	ldrh	r3, [r7, #22]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	625a      	str	r2, [r3, #36]	; 0x24
	temp_pwm->ArmServo[1] = controller.ArmNum[1]; //Main
 8009a20:	8b3b      	ldrh	r3, [r7, #24]
 8009a22:	461a      	mov	r2, r3
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	629a      	str	r2, [r3, #40]	; 0x28
	temp_pwm->ArmServo[2] = controller.ArmNum[2]; //Middle
 8009a28:	8b7b      	ldrh	r3, [r7, #26]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	62da      	str	r2, [r3, #44]	; 0x2c
	temp_pwm->ArmServo[3] = controller.ArmNum[3]; //Front
 8009a30:	8bbb      	ldrh	r3, [r7, #28]
 8009a32:	461a      	mov	r2, r3
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	631a      	str	r2, [r3, #48]	; 0x30
	temp_pwm->ArmServo[4] = controller.ArmNum[4]; //Grab
 8009a38:	8bfb      	ldrh	r3, [r7, #30]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	635a      	str	r2, [r3, #52]	; 0x34
	temp_pwm->ArmServo[5] = controller.ArmNum[5]; //rest machine arm
 8009a40:	8c3b      	ldrh	r3, [r7, #32]
 8009a42:	461a      	mov	r2, r3
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	639a      	str	r2, [r3, #56]	; 0x38
	temp_pwm->RestServo = controller.RestNum; //rest pwm
 8009a48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009a50:	bf00      	nop
 8009a52:	46bd      	mov	sp, r7
 8009a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a58:	b004      	add	sp, #16
 8009a5a:	4770      	bx	lr

08009a5c <CaptureReportData>:

void CaptureReportData(ReportData_t SendData, uint8_t *ReportTransmit)
{
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	b490      	push	{r4, r7}
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	f107 0408 	add.w	r4, r7, #8
 8009a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ReportTransmit[0] = (uint8_t) (SendData.FrameHead);
 8009a6a:	7a3a      	ldrb	r2, [r7, #8]
 8009a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a6e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[1] = (uint8_t) ((SendData.CabinFunction)
 8009a70:	7a7b      	ldrb	r3, [r7, #9]
 8009a72:	b25a      	sxtb	r2, r3
			| (SendData.WaterDetect << 1));
 8009a74:	7abb      	ldrb	r3, [r7, #10]
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	b25b      	sxtb	r3, r3
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	b25a      	sxtb	r2, r3
	ReportTransmit[1] = (uint8_t) ((SendData.CabinFunction)
 8009a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a80:	3301      	adds	r3, #1
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	701a      	strb	r2, [r3, #0]
	ReportTransmit[2] = (uint8_t) ((SendData.CabinTemperature & 0xFF00) >> 8);
 8009a86:	89bb      	ldrh	r3, [r7, #12]
 8009a88:	0a1b      	lsrs	r3, r3, #8
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8e:	3302      	adds	r3, #2
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	701a      	strb	r2, [r3, #0]
	ReportTransmit[3] = (uint8_t) (SendData.CabinTemperature & 0x00FF);
 8009a94:	89ba      	ldrh	r2, [r7, #12]
 8009a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a98:	3303      	adds	r3, #3
 8009a9a:	b2d2      	uxtb	r2, r2
 8009a9c:	701a      	strb	r2, [r3, #0]
	ReportTransmit[4] =
			(uint8_t) ((SendData.CabinBarometric & 0xFF000000) >> 24);
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	0e1a      	lsrs	r2, r3, #24
	ReportTransmit[4] =
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa4:	3304      	adds	r3, #4
			(uint8_t) ((SendData.CabinBarometric & 0xFF000000) >> 24);
 8009aa6:	b2d2      	uxtb	r2, r2
	ReportTransmit[4] =
 8009aa8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[5] =
			(uint8_t) ((SendData.CabinBarometric & 0x00FF0000) >> 16);
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	0c1a      	lsrs	r2, r3, #16
	ReportTransmit[5] =
 8009aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab0:	3305      	adds	r3, #5
			(uint8_t) ((SendData.CabinBarometric & 0x00FF0000) >> 16);
 8009ab2:	b2d2      	uxtb	r2, r2
	ReportTransmit[5] =
 8009ab4:	701a      	strb	r2, [r3, #0]
	ReportTransmit[6] =
			(uint8_t) ((SendData.CabinBarometric & 0x0000FF00) >> 8);
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	0a1a      	lsrs	r2, r3, #8
	ReportTransmit[6] =
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	3306      	adds	r3, #6
			(uint8_t) ((SendData.CabinBarometric & 0x0000FF00) >> 8);
 8009abe:	b2d2      	uxtb	r2, r2
	ReportTransmit[6] =
 8009ac0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[7] = (uint8_t) (SendData.CabinBarometric & 0x000000FF);
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac6:	3307      	adds	r3, #7
 8009ac8:	b2d2      	uxtb	r2, r2
 8009aca:	701a      	strb	r2, [r3, #0]
	ReportTransmit[8] = (uint8_t) ((SendData.CabinHumidity & 0xFF00) >> 8);
 8009acc:	8abb      	ldrh	r3, [r7, #20]
 8009ace:	0a1b      	lsrs	r3, r3, #8
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	b2d2      	uxtb	r2, r2
 8009ad8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[9] = (uint8_t) (SendData.CabinHumidity & 0x00FF);
 8009ada:	8aba      	ldrh	r2, [r7, #20]
 8009adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ade:	3309      	adds	r3, #9
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]
	ReportTransmit[10] = (uint8_t) ((SendData.AccNum[0] & 0xFF00) >> 8);
 8009ae4:	8afb      	ldrh	r3, [r7, #22]
 8009ae6:	0a1b      	lsrs	r3, r3, #8
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aec:	330a      	adds	r3, #10
 8009aee:	b2d2      	uxtb	r2, r2
 8009af0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[11] = (uint8_t) (SendData.AccNum[0] & 0x00FF);
 8009af2:	8afa      	ldrh	r2, [r7, #22]
 8009af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af6:	330b      	adds	r3, #11
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	701a      	strb	r2, [r3, #0]
	ReportTransmit[12] = (uint8_t) ((SendData.AccNum[1] & 0xFF00) >> 8);
 8009afc:	8b3b      	ldrh	r3, [r7, #24]
 8009afe:	0a1b      	lsrs	r3, r3, #8
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b04:	330c      	adds	r3, #12
 8009b06:	b2d2      	uxtb	r2, r2
 8009b08:	701a      	strb	r2, [r3, #0]
	ReportTransmit[13] = (uint8_t) (SendData.AccNum[1] & 0x00FF);
 8009b0a:	8b3a      	ldrh	r2, [r7, #24]
 8009b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0e:	330d      	adds	r3, #13
 8009b10:	b2d2      	uxtb	r2, r2
 8009b12:	701a      	strb	r2, [r3, #0]
	ReportTransmit[14] = (uint8_t) ((SendData.AccNum[2] & 0xFF00) >> 8);
 8009b14:	8b7b      	ldrh	r3, [r7, #26]
 8009b16:	0a1b      	lsrs	r3, r3, #8
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1c:	330e      	adds	r3, #14
 8009b1e:	b2d2      	uxtb	r2, r2
 8009b20:	701a      	strb	r2, [r3, #0]
	ReportTransmit[15] = (uint8_t) (SendData.AccNum[2] & 0x00FF);
 8009b22:	8b7a      	ldrh	r2, [r7, #26]
 8009b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b26:	330f      	adds	r3, #15
 8009b28:	b2d2      	uxtb	r2, r2
 8009b2a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[16] = (uint8_t) ((SendData.RotNum[0] & 0xFF00) >> 8);
 8009b2c:	8bbb      	ldrh	r3, [r7, #28]
 8009b2e:	0a1b      	lsrs	r3, r3, #8
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b34:	3310      	adds	r3, #16
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	701a      	strb	r2, [r3, #0]
	ReportTransmit[17] = (uint8_t) (SendData.RotNum[0] & 0x00FF);
 8009b3a:	8bba      	ldrh	r2, [r7, #28]
 8009b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3e:	3311      	adds	r3, #17
 8009b40:	b2d2      	uxtb	r2, r2
 8009b42:	701a      	strb	r2, [r3, #0]
	ReportTransmit[18] = (uint8_t) ((SendData.RotNum[1] & 0xFF00) >> 8);
 8009b44:	8bfb      	ldrh	r3, [r7, #30]
 8009b46:	0a1b      	lsrs	r3, r3, #8
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4c:	3312      	adds	r3, #18
 8009b4e:	b2d2      	uxtb	r2, r2
 8009b50:	701a      	strb	r2, [r3, #0]
	ReportTransmit[19] = (uint8_t) (SendData.RotNum[1] & 0x00FF);
 8009b52:	8bfa      	ldrh	r2, [r7, #30]
 8009b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b56:	3313      	adds	r3, #19
 8009b58:	b2d2      	uxtb	r2, r2
 8009b5a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[20] = (uint8_t) ((SendData.RotNum[2] & 0xFF00) >> 8);
 8009b5c:	8c3b      	ldrh	r3, [r7, #32]
 8009b5e:	0a1b      	lsrs	r3, r3, #8
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b64:	3314      	adds	r3, #20
 8009b66:	b2d2      	uxtb	r2, r2
 8009b68:	701a      	strb	r2, [r3, #0]
	ReportTransmit[21] = (uint8_t) (SendData.RotNum[2] & 0x00FF);
 8009b6a:	8c3a      	ldrh	r2, [r7, #32]
 8009b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6e:	3315      	adds	r3, #21
 8009b70:	b2d2      	uxtb	r2, r2
 8009b72:	701a      	strb	r2, [r3, #0]
	ReportTransmit[22] = (uint8_t) ((SendData.EulNum[0] & 0xFF00) >> 8);
 8009b74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b76:	0a1b      	lsrs	r3, r3, #8
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7c:	3316      	adds	r3, #22
 8009b7e:	b2d2      	uxtb	r2, r2
 8009b80:	701a      	strb	r2, [r3, #0]
	ReportTransmit[23] = (uint8_t) (SendData.EulNum[0] & 0x00FF);
 8009b82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b86:	3317      	adds	r3, #23
 8009b88:	b2d2      	uxtb	r2, r2
 8009b8a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[24] = (uint8_t) ((SendData.EulNum[1] & 0xFF00) >> 8);
 8009b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b8e:	0a1b      	lsrs	r3, r3, #8
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b94:	3318      	adds	r3, #24
 8009b96:	b2d2      	uxtb	r2, r2
 8009b98:	701a      	strb	r2, [r3, #0]
	ReportTransmit[25] = (uint8_t) (SendData.EulNum[1] & 0x00FF);
 8009b9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b9e:	3319      	adds	r3, #25
 8009ba0:	b2d2      	uxtb	r2, r2
 8009ba2:	701a      	strb	r2, [r3, #0]
	ReportTransmit[26] = (uint8_t) ((SendData.EulNum[2] & 0xFF00) >> 8);
 8009ba4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ba6:	0a1b      	lsrs	r3, r3, #8
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bac:	331a      	adds	r3, #26
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[27] = (uint8_t) (SendData.EulNum[2] & 0x00FF);
 8009bb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb6:	331b      	adds	r3, #27
 8009bb8:	b2d2      	uxtb	r2, r2
 8009bba:	701a      	strb	r2, [r3, #0]
	ReportTransmit[28] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 8009bbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bbe:	0a1b      	lsrs	r3, r3, #8
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc4:	331c      	adds	r3, #28
 8009bc6:	b2d2      	uxtb	r2, r2
 8009bc8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[29] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 8009bca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bce:	331d      	adds	r3, #29
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	701a      	strb	r2, [r3, #0]
	ReportTransmit[30] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 8009bd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bd6:	0a1b      	lsrs	r3, r3, #8
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bdc:	331e      	adds	r3, #30
 8009bde:	b2d2      	uxtb	r2, r2
 8009be0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[31] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 8009be2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be6:	331f      	adds	r3, #31
 8009be8:	b2d2      	uxtb	r2, r2
 8009bea:	701a      	strb	r2, [r3, #0]
	ReportTransmit[32] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 8009bec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bee:	0a1b      	lsrs	r3, r3, #8
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf4:	3320      	adds	r3, #32
 8009bf6:	b2d2      	uxtb	r2, r2
 8009bf8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[33] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 8009bfa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfe:	3321      	adds	r3, #33	; 0x21
 8009c00:	b2d2      	uxtb	r2, r2
 8009c02:	701a      	strb	r2, [r3, #0]
//	ReportTransmit[39] = (uint8_t) ((SendData.SonarConfidence & 0xFF00) >> 8);
//	ReportTransmit[40] = (uint8_t) (SendData.WaterTemperature & 0x00FF);
//	ReportTransmit[41] = (uint8_t) ((SendData.WaterTemperature & 0xFF00) >> 8);
//	ReportTransmit[42] = (uint8_t) (SendData.WaterDepth & 0x00FF);
//	ReportTransmit[43] = (uint8_t) ((SendData.WaterDepth & 0xFF00) >> 8);
	ReportTransmit[34] = 0x00;
 8009c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c06:	3322      	adds	r3, #34	; 0x22
 8009c08:	2200      	movs	r2, #0
 8009c0a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[35] = 0x00;
 8009c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0e:	3323      	adds	r3, #35	; 0x23
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]
	ReportTransmit[36] = 0x00;
 8009c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c16:	3324      	adds	r3, #36	; 0x24
 8009c18:	2200      	movs	r2, #0
 8009c1a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[37] = 0x00;
 8009c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1e:	3325      	adds	r3, #37	; 0x25
 8009c20:	2200      	movs	r2, #0
 8009c22:	701a      	strb	r2, [r3, #0]
	ReportTransmit[38] = 0x00;
 8009c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c26:	3326      	adds	r3, #38	; 0x26
 8009c28:	2200      	movs	r2, #0
 8009c2a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[39] = 0x00;
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2e:	3327      	adds	r3, #39	; 0x27
 8009c30:	2200      	movs	r2, #0
 8009c32:	701a      	strb	r2, [r3, #0]
	ReportTransmit[40] = 0x00;
 8009c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c36:	3328      	adds	r3, #40	; 0x28
 8009c38:	2200      	movs	r2, #0
 8009c3a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[41] = 0x00;
 8009c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c3e:	3329      	adds	r3, #41	; 0x29
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
	ReportTransmit[42] = 0x00;
 8009c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c46:	332a      	adds	r3, #42	; 0x2a
 8009c48:	2200      	movs	r2, #0
 8009c4a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[43] = 0x00;
 8009c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4e:	332b      	adds	r3, #43	; 0x2b
 8009c50:	2200      	movs	r2, #0
 8009c52:	701a      	strb	r2, [r3, #0]
	ReportTransmit[44] = (uint8_t) 0x00;
 8009c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c56:	332c      	adds	r3, #44	; 0x2c
 8009c58:	2200      	movs	r2, #0
 8009c5a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[45] = (uint8_t) ((SendData.FrameEnd & 0xFF00) >> 8);
 8009c5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009c5e:	0a1b      	lsrs	r3, r3, #8
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c64:	332d      	adds	r3, #45	; 0x2d
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	701a      	strb	r2, [r3, #0]
	ReportTransmit[46] = (uint8_t) (SendData.FrameEnd & 0x00FF);
 8009c6a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6e:	332e      	adds	r3, #46	; 0x2e
 8009c70:	b2d2      	uxtb	r2, r2
 8009c72:	701a      	strb	r2, [r3, #0]
}
 8009c74:	bf00      	nop
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bc90      	pop	{r4, r7}
 8009c7a:	b004      	add	sp, #16
 8009c7c:	4770      	bx	lr

08009c7e <CaptureControlData>:
//
//	return CaptureData;
//}

void CaptureControlData(ControlData_t *CaptureData, uint8_t *CommandReceive)
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b085      	sub	sp, #20
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < Master_UART_RXLen; i++)
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]
 8009c8c:	e120      	b.n	8009ed0 <CaptureControlData+0x252>
	{
		if ((CommandReceive[i] == 0x25) && (CommandReceive[i + 29] == 0x21)
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	4413      	add	r3, r2
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	2b25      	cmp	r3, #37	; 0x25
 8009c98:	f040 8116 	bne.w	8009ec8 <CaptureControlData+0x24a>
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	331d      	adds	r3, #29
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b21      	cmp	r3, #33	; 0x21
 8009ca8:	f040 810e 	bne.w	8009ec8 <CaptureControlData+0x24a>
				&& (CommandReceive[i + 28] == 0x00))
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	331c      	adds	r3, #28
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f040 8106 	bne.w	8009ec8 <CaptureControlData+0x24a>
		{
			CaptureData->FrameHead = (CommandReceive[i]);
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	781a      	ldrb	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	701a      	strb	r2, [r3, #0]
			CaptureData->StraightNum = ((CommandReceive[i + 1] << 8)
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	4413      	add	r3, r2
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 2]);
 8009cd4:	b21a      	sxth	r2, r3
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	3302      	adds	r3, #2
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	440b      	add	r3, r1
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	b21b      	sxth	r3, r3
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	b21b      	sxth	r3, r3
 8009ce6:	b29a      	uxth	r2, r3
			CaptureData->StraightNum = ((CommandReceive[i + 1] << 8)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	805a      	strh	r2, [r3, #2]
			CaptureData->RotateNum = ((CommandReceive[i + 3] << 8)
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	3303      	adds	r3, #3
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 4]);
 8009cf8:	b21a      	sxth	r2, r3
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	440b      	add	r3, r1
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	b21b      	sxth	r3, r3
 8009d06:	4313      	orrs	r3, r2
 8009d08:	b21b      	sxth	r3, r3
 8009d0a:	b29a      	uxth	r2, r3
			CaptureData->RotateNum = ((CommandReceive[i + 3] << 8)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	809a      	strh	r2, [r3, #4]
			CaptureData->VerticalNum = ((CommandReceive[i + 5] << 8)
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	3305      	adds	r3, #5
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	4413      	add	r3, r2
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 6]);
 8009d1c:	b21a      	sxth	r2, r3
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	3306      	adds	r3, #6
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	440b      	add	r3, r1
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	b21b      	sxth	r3, r3
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	b21b      	sxth	r3, r3
 8009d2e:	b29a      	uxth	r2, r3
			CaptureData->VerticalNum = ((CommandReceive[i + 5] << 8)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	80da      	strh	r2, [r3, #6]
			CaptureData->LightNum = ((CommandReceive[i + 7] << 8)
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	3307      	adds	r3, #7
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 8]);
 8009d40:	b21a      	sxth	r2, r3
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	3308      	adds	r3, #8
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	440b      	add	r3, r1
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	b21b      	sxth	r3, r3
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	b21b      	sxth	r3, r3
 8009d52:	b29a      	uxth	r2, r3
			CaptureData->LightNum = ((CommandReceive[i + 7] << 8)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	811a      	strh	r2, [r3, #8]
			CaptureData->PanNum = ((CommandReceive[i + 9] << 8)
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
 8009d5a:	3309      	adds	r3, #9
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	4413      	add	r3, r2
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 10]);
 8009d64:	b21a      	sxth	r2, r3
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	330a      	adds	r3, #10
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	440b      	add	r3, r1
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	b21b      	sxth	r3, r3
 8009d72:	4313      	orrs	r3, r2
 8009d74:	b21b      	sxth	r3, r3
 8009d76:	b29a      	uxth	r2, r3
			CaptureData->PanNum = ((CommandReceive[i + 9] << 8)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	815a      	strh	r2, [r3, #10]
			CaptureData->ConveyNum = ((CommandReceive[i + 11] << 8)
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
 8009d7e:	330b      	adds	r3, #11
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	4413      	add	r3, r2
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 12]);
 8009d88:	b21a      	sxth	r2, r3
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	330c      	adds	r3, #12
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	440b      	add	r3, r1
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	b21b      	sxth	r3, r3
 8009d96:	4313      	orrs	r3, r2
 8009d98:	b21b      	sxth	r3, r3
 8009d9a:	b29a      	uxth	r2, r3
			CaptureData->ConveyNum = ((CommandReceive[i + 11] << 8)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	819a      	strh	r2, [r3, #12]

			CaptureData->ArmNum[0] = ((CommandReceive[i + 13] << 8)
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	330d      	adds	r3, #13
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	4413      	add	r3, r2
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 14]);
 8009dac:	b21a      	sxth	r2, r3
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
 8009db0:	330e      	adds	r3, #14
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	440b      	add	r3, r1
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	b21b      	sxth	r3, r3
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	b21b      	sxth	r3, r3
 8009dbe:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[0] = ((CommandReceive[i + 13] << 8)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	81da      	strh	r2, [r3, #14]
			CaptureData->ArmNum[1] = ((CommandReceive[i + 15] << 8)
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	330f      	adds	r3, #15
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	4413      	add	r3, r2
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 16]);
 8009dd0:	b21a      	sxth	r2, r3
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	3310      	adds	r3, #16
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	440b      	add	r3, r1
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	b21b      	sxth	r3, r3
 8009dde:	4313      	orrs	r3, r2
 8009de0:	b21b      	sxth	r3, r3
 8009de2:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[1] = ((CommandReceive[i + 15] << 8)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	821a      	strh	r2, [r3, #16]
			CaptureData->ArmNum[2] = ((CommandReceive[i + 17] << 8)
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	3311      	adds	r3, #17
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	4413      	add	r3, r2
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 18]);
 8009df4:	b21a      	sxth	r2, r3
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	3312      	adds	r3, #18
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	440b      	add	r3, r1
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	b21b      	sxth	r3, r3
 8009e02:	4313      	orrs	r3, r2
 8009e04:	b21b      	sxth	r3, r3
 8009e06:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[2] = ((CommandReceive[i + 17] << 8)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	825a      	strh	r2, [r3, #18]
			CaptureData->ArmNum[3] = ((CommandReceive[i + 19] << 8)
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	3313      	adds	r3, #19
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	4413      	add	r3, r2
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 20]);
 8009e18:	b21a      	sxth	r2, r3
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
 8009e1c:	3314      	adds	r3, #20
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	440b      	add	r3, r1
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	b21b      	sxth	r3, r3
 8009e26:	4313      	orrs	r3, r2
 8009e28:	b21b      	sxth	r3, r3
 8009e2a:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[3] = ((CommandReceive[i + 19] << 8)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	829a      	strh	r2, [r3, #20]
			CaptureData->ArmNum[4] = ((CommandReceive[i + 21] << 8)
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	3315      	adds	r3, #21
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	4413      	add	r3, r2
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 22]);
 8009e3c:	b21a      	sxth	r2, r3
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	3316      	adds	r3, #22
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	440b      	add	r3, r1
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	b21b      	sxth	r3, r3
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	b21b      	sxth	r3, r3
 8009e4e:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[4] = ((CommandReceive[i + 21] << 8)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	82da      	strh	r2, [r3, #22]
			CaptureData->ArmNum[5] = ((CommandReceive[i + 23] << 8)
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	3317      	adds	r3, #23
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 24]);
 8009e60:	b21a      	sxth	r2, r3
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
 8009e64:	3318      	adds	r3, #24
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	440b      	add	r3, r1
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	b21b      	sxth	r3, r3
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	b21b      	sxth	r3, r3
 8009e72:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[5] = ((CommandReceive[i + 23] << 8)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	831a      	strh	r2, [r3, #24]
			CaptureData->RestNum = ((CommandReceive[i + 25] << 8)
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	3319      	adds	r3, #25
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	4413      	add	r3, r2
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 26]);
 8009e84:	b21a      	sxth	r2, r3
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	331a      	adds	r3, #26
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	440b      	add	r3, r1
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	b21b      	sxth	r3, r3
 8009e92:	4313      	orrs	r3, r2
 8009e94:	b21b      	sxth	r3, r3
 8009e96:	b29a      	uxth	r2, r3
			CaptureData->RestNum = ((CommandReceive[i + 25] << 8)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	835a      	strh	r2, [r3, #26]
			CaptureData->Mode = CommandReceive[i + 27];
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
 8009e9e:	331b      	adds	r3, #27
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	781a      	ldrb	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	771a      	strb	r2, [r3, #28]
			CaptureData->IdTest = CommandReceive[i + 28];
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	331c      	adds	r3, #28
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	775a      	strb	r2, [r3, #29]
			CaptureData->FrameEnd = (CommandReceive[i + 29]);
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	331d      	adds	r3, #29
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	781a      	ldrb	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	779a      	strb	r2, [r3, #30]
 8009ec6:	e000      	b.n	8009eca <CaptureControlData+0x24c>
		}
		else
		{
			continue;
 8009ec8:	bf00      	nop
	for (uint8_t i = 0; i < Master_UART_RXLen; i++)
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	73fb      	strb	r3, [r7, #15]
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	2b1d      	cmp	r3, #29
 8009ed4:	f67f aedb 	bls.w	8009c8e <CaptureControlData+0x10>
		}
	}
}
 8009ed8:	bf00      	nop
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <InitGY39>:

#endif

#ifdef USING_GY39_SENSOR
void InitGY39(uint8_t *GY39Send)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b083      	sub	sp, #12
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
	*(GY39Send + 0) = 0xA5;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	22a5      	movs	r2, #165	; 0xa5
 8009ef2:	701a      	strb	r2, [r3, #0]
	*(GY39Send + 1) = 0x82;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	2282      	movs	r2, #130	; 0x82
 8009efa:	701a      	strb	r2, [r3, #0]
	*(GY39Send + 2) = 0x27;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3302      	adds	r3, #2
 8009f00:	2227      	movs	r2, #39	; 0x27
 8009f02:	701a      	strb	r2, [r3, #0]
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <ReceiveGY39>:

CarbinData_t ReceiveGY39(uint8_t *GY39Receive)
{
 8009f10:	b490      	push	{r4, r7}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
	CarbinData_t RecvGY39;
	if ((GY39Receive[0] == 0x5A) && (GY39Receive[1] == 0x5A)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	2b5a      	cmp	r3, #90	; 0x5a
 8009f20:	d138      	bne.n	8009f94 <ReceiveGY39+0x84>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	3301      	adds	r3, #1
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b5a      	cmp	r3, #90	; 0x5a
 8009f2a:	d133      	bne.n	8009f94 <ReceiveGY39+0x84>
			&& (GY39Receive[2] == 0x45))
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	3302      	adds	r3, #2
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b45      	cmp	r3, #69	; 0x45
 8009f34:	d12e      	bne.n	8009f94 <ReceiveGY39+0x84>
	{
		RecvGY39.CarbinTemperature = ((GY39Receive[4] << 8) | GY39Receive[5]);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	021b      	lsls	r3, r3, #8
 8009f3e:	b21a      	sxth	r2, r3
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	3305      	adds	r3, #5
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	b21b      	sxth	r3, r3
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	b21b      	sxth	r3, r3
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	81bb      	strh	r3, [r7, #12]
		RecvGY39.CarbinBarometric = ((GY39Receive[6] << 24)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	3306      	adds	r3, #6
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	061a      	lsls	r2, r3, #24
				| (GY39Receive[7] << 16) | (GY39Receive[8] << 8)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	3307      	adds	r3, #7
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	041b      	lsls	r3, r3, #16
 8009f60:	431a      	orrs	r2, r3
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	3308      	adds	r3, #8
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	021b      	lsls	r3, r3, #8
 8009f6a:	4313      	orrs	r3, r2
				| GY39Receive[9]);
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	3209      	adds	r2, #9
 8009f70:	7812      	ldrb	r2, [r2, #0]
 8009f72:	4313      	orrs	r3, r2
		RecvGY39.CarbinBarometric = ((GY39Receive[6] << 24)
 8009f74:	613b      	str	r3, [r7, #16]
		RecvGY39.CarbinHumidity = ((GY39Receive[10] << 8) | GY39Receive[11]);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	330a      	adds	r3, #10
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	021b      	lsls	r3, r3, #8
 8009f7e:	b21a      	sxth	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	330b      	adds	r3, #11
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b21b      	sxth	r3, r3
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	b21b      	sxth	r3, r3
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	81fb      	strh	r3, [r7, #14]
		RecvGY39.CarbinIllumination = 0x0000;
 8009f90:	2300      	movs	r3, #0
 8009f92:	82bb      	strh	r3, [r7, #20]
	}

	return RecvGY39;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	461c      	mov	r4, r3
 8009f98:	f107 030c 	add.w	r3, r7, #12
 8009f9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009fa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bc90      	pop	{r4, r7}
 8009fac:	4770      	bx	lr
	...

08009fb0 <ReceiveWT931>:
#endif

#ifdef USING_WT931_SENSOR
IMUData_t ReceiveWT931(uint8_t *WT931Receive)
{
 8009fb0:	b4b0      	push	{r4, r5, r7}
 8009fb2:	b08b      	sub	sp, #44	; 0x2c
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
	IMUData_t RecvWT931;

	for (uint8_t i = 0; i < 2 * AXIS_UART_RXLen; i++)
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009fc0:	e112      	b.n	800a1e8 <ReceiveWT931+0x238>
	{
		if(i > 2 * AXIS_UART_RXLen - 11)
 8009fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fc6:	2b4d      	cmp	r3, #77	; 0x4d
 8009fc8:	f200 8114 	bhi.w	800a1f4 <ReceiveWT931+0x244>
		{
			break;
		}

		if (WT931Receive[i] == 0x55)
 8009fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	2b55      	cmp	r3, #85	; 0x55
 8009fd8:	f040 80fe 	bne.w	800a1d8 <ReceiveWT931+0x228>
		{
			switch (WT931Receive[i + 1])
 8009fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	3b51      	subs	r3, #81	; 0x51
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	f200 80f6 	bhi.w	800a1dc <ReceiveWT931+0x22c>
 8009ff0:	a201      	add	r2, pc, #4	; (adr r2, 8009ff8 <ReceiveWT931+0x48>)
 8009ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff6:	bf00      	nop
 8009ff8:	0800a009 	.word	0x0800a009
 8009ffc:	0800a07d 	.word	0x0800a07d
 800a000:	0800a0f1 	.word	0x0800a0f1
 800a004:	0800a165 	.word	0x0800a165
			{
			case 0x51:
				RecvWT931.Acceleration[0] = (WT931Receive[i + 2]
 800a008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a00c:	3302      	adds	r3, #2
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	4413      	add	r3, r2
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800a016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a01a:	3303      	adds	r3, #3
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	440b      	add	r3, r1
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	021b      	lsls	r3, r3, #8
 800a024:	b21b      	sxth	r3, r3
 800a026:	4313      	orrs	r3, r2
 800a028:	b21b      	sxth	r3, r3
 800a02a:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[0] = (WT931Receive[i + 2]
 800a02c:	81bb      	strh	r3, [r7, #12]
				RecvWT931.Acceleration[1] = (WT931Receive[i + 4]
 800a02e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a032:	3304      	adds	r3, #4
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	4413      	add	r3, r2
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800a03c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a040:	3305      	adds	r3, #5
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	440b      	add	r3, r1
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	021b      	lsls	r3, r3, #8
 800a04a:	b21b      	sxth	r3, r3
 800a04c:	4313      	orrs	r3, r2
 800a04e:	b21b      	sxth	r3, r3
 800a050:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[1] = (WT931Receive[i + 4]
 800a052:	81fb      	strh	r3, [r7, #14]
				RecvWT931.Acceleration[2] = (WT931Receive[i + 6]
 800a054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a058:	3306      	adds	r3, #6
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	4413      	add	r3, r2
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800a062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a066:	3307      	adds	r3, #7
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	440b      	add	r3, r1
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	021b      	lsls	r3, r3, #8
 800a070:	b21b      	sxth	r3, r3
 800a072:	4313      	orrs	r3, r2
 800a074:	b21b      	sxth	r3, r3
 800a076:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[2] = (WT931Receive[i + 6]
 800a078:	823b      	strh	r3, [r7, #16]
				break;
 800a07a:	e0b0      	b.n	800a1de <ReceiveWT931+0x22e>
			case 0x52:
				RecvWT931.AngularSpeed[0] = (WT931Receive[i + 2]
 800a07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a080:	3302      	adds	r3, #2
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	4413      	add	r3, r2
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800a08a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a08e:	3303      	adds	r3, #3
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	440b      	add	r3, r1
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	021b      	lsls	r3, r3, #8
 800a098:	b21b      	sxth	r3, r3
 800a09a:	4313      	orrs	r3, r2
 800a09c:	b21b      	sxth	r3, r3
 800a09e:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[0] = (WT931Receive[i + 2]
 800a0a0:	827b      	strh	r3, [r7, #18]
				RecvWT931.AngularSpeed[1] = (WT931Receive[i + 4]
 800a0a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	683a      	ldr	r2, [r7, #0]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800a0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0b4:	3305      	adds	r3, #5
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	440b      	add	r3, r1
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	021b      	lsls	r3, r3, #8
 800a0be:	b21b      	sxth	r3, r3
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	b21b      	sxth	r3, r3
 800a0c4:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[1] = (WT931Receive[i + 4]
 800a0c6:	82bb      	strh	r3, [r7, #20]
				RecvWT931.AngularSpeed[2] = (WT931Receive[i + 6]
 800a0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0cc:	3306      	adds	r3, #6
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800a0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0da:	3307      	adds	r3, #7
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	440b      	add	r3, r1
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	b21b      	sxth	r3, r3
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	b21b      	sxth	r3, r3
 800a0ea:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[2] = (WT931Receive[i + 6]
 800a0ec:	82fb      	strh	r3, [r7, #22]
				break;
 800a0ee:	e076      	b.n	800a1de <ReceiveWT931+0x22e>
			case 0x53:
				RecvWT931.EulerAngle[0] = (WT931Receive[i + 2]
 800a0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0f4:	3302      	adds	r3, #2
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800a0fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a102:	3303      	adds	r3, #3
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	440b      	add	r3, r1
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	b21b      	sxth	r3, r3
 800a10e:	4313      	orrs	r3, r2
 800a110:	b21b      	sxth	r3, r3
 800a112:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[0] = (WT931Receive[i + 2]
 800a114:	833b      	strh	r3, [r7, #24]
				RecvWT931.EulerAngle[1] = (WT931Receive[i + 4]
 800a116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a11a:	3304      	adds	r3, #4
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	4413      	add	r3, r2
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800a124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a128:	3305      	adds	r3, #5
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	440b      	add	r3, r1
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	b21b      	sxth	r3, r3
 800a134:	4313      	orrs	r3, r2
 800a136:	b21b      	sxth	r3, r3
 800a138:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[1] = (WT931Receive[i + 4]
 800a13a:	837b      	strh	r3, [r7, #26]
				RecvWT931.EulerAngle[2] = (WT931Receive[i + 6]
 800a13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a140:	3306      	adds	r3, #6
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	4413      	add	r3, r2
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800a14a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a14e:	3307      	adds	r3, #7
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	440b      	add	r3, r1
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	b21b      	sxth	r3, r3
 800a15a:	4313      	orrs	r3, r2
 800a15c:	b21b      	sxth	r3, r3
 800a15e:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[2] = (WT931Receive[i + 6]
 800a160:	83bb      	strh	r3, [r7, #28]
				break;
 800a162:	e03c      	b.n	800a1de <ReceiveWT931+0x22e>
			case 0x54:
				RecvWT931.MagneticValue[0] = (WT931Receive[i + 2]
 800a164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a168:	3302      	adds	r3, #2
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	4413      	add	r3, r2
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800a172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a176:	3303      	adds	r3, #3
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	440b      	add	r3, r1
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	021b      	lsls	r3, r3, #8
 800a180:	b21b      	sxth	r3, r3
 800a182:	4313      	orrs	r3, r2
 800a184:	b21b      	sxth	r3, r3
 800a186:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[0] = (WT931Receive[i + 2]
 800a188:	83fb      	strh	r3, [r7, #30]
				RecvWT931.MagneticValue[1] = (WT931Receive[i + 4]
 800a18a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a18e:	3304      	adds	r3, #4
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	4413      	add	r3, r2
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800a198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a19c:	3305      	adds	r3, #5
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	440b      	add	r3, r1
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	021b      	lsls	r3, r3, #8
 800a1a6:	b21b      	sxth	r3, r3
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	b21b      	sxth	r3, r3
 800a1ac:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[1] = (WT931Receive[i + 4]
 800a1ae:	843b      	strh	r3, [r7, #32]
				RecvWT931.MagneticValue[2] = (WT931Receive[i + 6]
 800a1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1b4:	3306      	adds	r3, #6
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800a1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1c2:	3307      	adds	r3, #7
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	440b      	add	r3, r1
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	021b      	lsls	r3, r3, #8
 800a1cc:	b21b      	sxth	r3, r3
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	b21b      	sxth	r3, r3
 800a1d2:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[2] = (WT931Receive[i + 6]
 800a1d4:	847b      	strh	r3, [r7, #34]	; 0x22
				break;
 800a1d6:	e002      	b.n	800a1de <ReceiveWT931+0x22e>
				break;
			}
		}
		else
		{
			continue;
 800a1d8:	bf00      	nop
 800a1da:	e000      	b.n	800a1de <ReceiveWT931+0x22e>
				continue;
 800a1dc:	bf00      	nop
	for (uint8_t i = 0; i < 2 * AXIS_UART_RXLen; i++)
 800a1de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1ec:	2b57      	cmp	r3, #87	; 0x57
 800a1ee:	f67f aee8 	bls.w	8009fc2 <ReceiveWT931+0x12>
 800a1f2:	e000      	b.n	800a1f6 <ReceiveWT931+0x246>
			break;
 800a1f4:	bf00      	nop
		}
	}

	return RecvWT931;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	461d      	mov	r5, r3
 800a1fa:	f107 040c 	add.w	r4, r7, #12
 800a1fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a200:	6028      	str	r0, [r5, #0]
 800a202:	6069      	str	r1, [r5, #4]
 800a204:	60aa      	str	r2, [r5, #8]
 800a206:	60eb      	str	r3, [r5, #12]
 800a208:	cc03      	ldmia	r4!, {r0, r1}
 800a20a:	6128      	str	r0, [r5, #16]
 800a20c:	6169      	str	r1, [r5, #20]
}
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	372c      	adds	r7, #44	; 0x2c
 800a212:	46bd      	mov	sp, r7
 800a214:	bcb0      	pop	{r4, r5, r7}
 800a216:	4770      	bx	lr

0800a218 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a222:	2300      	movs	r3, #0
 800a224:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a22a:	2b84      	cmp	r3, #132	; 0x84
 800a22c:	d005      	beq.n	800a23a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a22e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4413      	add	r3, r2
 800a236:	3303      	adds	r3, #3
 800a238:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a23a:	68fb      	ldr	r3, [r7, #12]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a24c:	f001 f978 	bl	800b540 <vTaskStartScheduler>
  
  return osOK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	bd80      	pop	{r7, pc}

0800a256 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a256:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a258:	b089      	sub	sp, #36	; 0x24
 800a25a:	af04      	add	r7, sp, #16
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d020      	beq.n	800a2aa <osThreadCreate+0x54>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d01c      	beq.n	800a2aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685c      	ldr	r4, [r3, #4]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681d      	ldr	r5, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	691e      	ldr	r6, [r3, #16]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff ffc8 	bl	800a218 <makeFreeRtosPriority>
 800a288:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a292:	9202      	str	r2, [sp, #8]
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	9100      	str	r1, [sp, #0]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	4632      	mov	r2, r6
 800a29c:	4629      	mov	r1, r5
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 ff86 	bl	800b1b0 <xTaskCreateStatic>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	e01c      	b.n	800a2e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685c      	ldr	r4, [r3, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2b6:	b29e      	uxth	r6, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff ffaa 	bl	800a218 <makeFreeRtosPriority>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	f107 030c 	add.w	r3, r7, #12
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	9200      	str	r2, [sp, #0]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	4632      	mov	r2, r6
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 ffc8 	bl	800b26a <xTaskCreate>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d001      	beq.n	800a2e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	e000      	b.n	800a2e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <osDelay+0x16>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	e000      	b.n	800a306 <osDelay+0x18>
 800a304:	2301      	movs	r3, #1
 800a306:	4618      	mov	r0, r3
 800a308:	f001 f8e6 	bl	800b4d8 <vTaskDelay>
  
  return osOK;
 800a30c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b082      	sub	sp, #8
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d007      	beq.n	800a336 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	4619      	mov	r1, r3
 800a32c:	2001      	movs	r0, #1
 800a32e:	f000 fa84 	bl	800a83a <xQueueCreateMutexStatic>
 800a332:	4603      	mov	r3, r0
 800a334:	e003      	b.n	800a33e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a336:	2001      	movs	r0, #1
 800a338:	f000 fa67 	bl	800a80a <xQueueCreateMutex>
 800a33c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a346:	b580      	push	{r7, lr}
 800a348:	b086      	sub	sp, #24
 800a34a:	af02      	add	r7, sp, #8
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00f      	beq.n	800a378 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d10a      	bne.n	800a374 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2203      	movs	r2, #3
 800a364:	9200      	str	r2, [sp, #0]
 800a366:	2200      	movs	r2, #0
 800a368:	2100      	movs	r1, #0
 800a36a:	2001      	movs	r0, #1
 800a36c:	f000 f962 	bl	800a634 <xQueueGenericCreateStatic>
 800a370:	4603      	mov	r3, r0
 800a372:	e016      	b.n	800a3a2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a374:	2300      	movs	r3, #0
 800a376:	e014      	b.n	800a3a2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d110      	bne.n	800a3a0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a37e:	2203      	movs	r2, #3
 800a380:	2100      	movs	r1, #0
 800a382:	2001      	movs	r0, #1
 800a384:	f000 f9ce 	bl	800a724 <xQueueGenericCreate>
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <osSemaphoreCreate+0x56>
 800a390:	2300      	movs	r3, #0
 800a392:	2200      	movs	r2, #0
 800a394:	2100      	movs	r1, #0
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 fa6a 	bl	800a870 <xQueueGenericSend>
      return sema;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	e000      	b.n	800a3a2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a3a0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a3aa:	b590      	push	{r4, r7, lr}
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	af02      	add	r7, sp, #8
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d011      	beq.n	800a3e0 <osMessageCreate+0x36>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00d      	beq.n	800a3e0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6818      	ldr	r0, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6859      	ldr	r1, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	2400      	movs	r4, #0
 800a3d6:	9400      	str	r4, [sp, #0]
 800a3d8:	f000 f92c 	bl	800a634 <xQueueGenericCreateStatic>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	e008      	b.n	800a3f2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6818      	ldr	r0, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	f000 f99a 	bl	800a724 <xQueueGenericCreate>
 800a3f0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd90      	pop	{r4, r7, pc}

0800a3fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f103 0208 	add.w	r2, r3, #8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f04f 32ff 	mov.w	r2, #4294967295
 800a412:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f103 0208 	add.w	r2, r3, #8
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f103 0208 	add.w	r2, r3, #8
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a42e:	bf00      	nop
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	689a      	ldr	r2, [r3, #8]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	1c5a      	adds	r2, r3, #1
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	601a      	str	r2, [r3, #0]
}
 800a490:	bf00      	nop
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b2:	d103      	bne.n	800a4bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	60fb      	str	r3, [r7, #12]
 800a4ba:	e00c      	b.n	800a4d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3308      	adds	r3, #8
 800a4c0:	60fb      	str	r3, [r7, #12]
 800a4c2:	e002      	b.n	800a4ca <vListInsert+0x2e>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	60fb      	str	r3, [r7, #12]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d2f6      	bcs.n	800a4c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	601a      	str	r2, [r3, #0]
}
 800a502:	bf00      	nop
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	6892      	ldr	r2, [r2, #8]
 800a524:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	6852      	ldr	r2, [r2, #4]
 800a52e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	429a      	cmp	r2, r3
 800a538:	d103      	bne.n	800a542 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	1e5a      	subs	r2, r3, #1
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
	...

0800a564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10a      	bne.n	800a58e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a58a:	bf00      	nop
 800a58c:	e7fe      	b.n	800a58c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a58e:	f001 ff21 	bl	800c3d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59a:	68f9      	ldr	r1, [r7, #12]
 800a59c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a59e:	fb01 f303 	mul.w	r3, r1, r3
 800a5a2:	441a      	add	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	68f9      	ldr	r1, [r7, #12]
 800a5c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5c4:	fb01 f303 	mul.w	r3, r1, r3
 800a5c8:	441a      	add	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	22ff      	movs	r2, #255	; 0xff
 800a5d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	22ff      	movs	r2, #255	; 0xff
 800a5da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d114      	bne.n	800a60e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d01a      	beq.n	800a622 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	3310      	adds	r3, #16
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f001 f9e7 	bl	800b9c4 <xTaskRemoveFromEventList>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d012      	beq.n	800a622 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5fc:	4b0c      	ldr	r3, [pc, #48]	; (800a630 <xQueueGenericReset+0xcc>)
 800a5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	e009      	b.n	800a622 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3310      	adds	r3, #16
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff fef1 	bl	800a3fa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3324      	adds	r3, #36	; 0x24
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff feec 	bl	800a3fa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a622:	f001 ff07 	bl	800c434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a626:	2301      	movs	r3, #1
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	e000ed04 	.word	0xe000ed04

0800a634 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a634:	b580      	push	{r7, lr}
 800a636:	b08e      	sub	sp, #56	; 0x38
 800a638:	af02      	add	r7, sp, #8
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
 800a640:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10a      	bne.n	800a65e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a65a:	bf00      	nop
 800a65c:	e7fe      	b.n	800a65c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <xQueueGenericCreateStatic+0x52>
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <xQueueGenericCreateStatic+0x56>
 800a686:	2301      	movs	r3, #1
 800a688:	e000      	b.n	800a68c <xQueueGenericCreateStatic+0x58>
 800a68a:	2300      	movs	r3, #0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	623b      	str	r3, [r7, #32]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d102      	bne.n	800a6b2 <xQueueGenericCreateStatic+0x7e>
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <xQueueGenericCreateStatic+0x82>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e000      	b.n	800a6b8 <xQueueGenericCreateStatic+0x84>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10a      	bne.n	800a6d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	61fb      	str	r3, [r7, #28]
}
 800a6ce:	bf00      	nop
 800a6d0:	e7fe      	b.n	800a6d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a6d2:	2348      	movs	r3, #72	; 0x48
 800a6d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b48      	cmp	r3, #72	; 0x48
 800a6da:	d00a      	beq.n	800a6f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	61bb      	str	r3, [r7, #24]
}
 800a6ee:	bf00      	nop
 800a6f0:	e7fe      	b.n	800a6f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00d      	beq.n	800a71a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	2201      	movs	r2, #1
 800a702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a706:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	4613      	mov	r3, r2
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	68b9      	ldr	r1, [r7, #8]
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 f83f 	bl	800a798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3730      	adds	r7, #48	; 0x30
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a724:	b580      	push	{r7, lr}
 800a726:	b08a      	sub	sp, #40	; 0x28
 800a728:	af02      	add	r7, sp, #8
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	4613      	mov	r3, r2
 800a730:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	613b      	str	r3, [r7, #16]
}
 800a74a:	bf00      	nop
 800a74c:	e7fe      	b.n	800a74c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	fb02 f303 	mul.w	r3, r2, r3
 800a756:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	3348      	adds	r3, #72	; 0x48
 800a75c:	4618      	mov	r0, r3
 800a75e:	f001 ff5b 	bl	800c618 <pvPortMalloc>
 800a762:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d011      	beq.n	800a78e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	3348      	adds	r3, #72	; 0x48
 800a772:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a77c:	79fa      	ldrb	r2, [r7, #7]
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	4613      	mov	r3, r2
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	68b9      	ldr	r1, [r7, #8]
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 f805 	bl	800a798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a78e:	69bb      	ldr	r3, [r7, #24]
	}
 800a790:	4618      	mov	r0, r3
 800a792:	3720      	adds	r7, #32
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d103      	bne.n	800a7b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	601a      	str	r2, [r3, #0]
 800a7b2:	e002      	b.n	800a7ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	69b8      	ldr	r0, [r7, #24]
 800a7ca:	f7ff fecb 	bl	800a564 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a7ce:	bf00      	nop
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b082      	sub	sp, #8
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00e      	beq.n	800a802 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f837 	bl	800a870 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a802:	bf00      	nop
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b086      	sub	sp, #24
 800a80e:	af00      	add	r7, sp, #0
 800a810:	4603      	mov	r3, r0
 800a812:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a814:	2301      	movs	r3, #1
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	2300      	movs	r3, #0
 800a81a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	461a      	mov	r2, r3
 800a820:	6939      	ldr	r1, [r7, #16]
 800a822:	6978      	ldr	r0, [r7, #20]
 800a824:	f7ff ff7e 	bl	800a724 <xQueueGenericCreate>
 800a828:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f7ff ffd3 	bl	800a7d6 <prvInitialiseMutex>

		return xNewQueue;
 800a830:	68fb      	ldr	r3, [r7, #12]
	}
 800a832:	4618      	mov	r0, r3
 800a834:	3718      	adds	r7, #24
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b088      	sub	sp, #32
 800a83e:	af02      	add	r7, sp, #8
 800a840:	4603      	mov	r3, r0
 800a842:	6039      	str	r1, [r7, #0]
 800a844:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a846:	2301      	movs	r3, #1
 800a848:	617b      	str	r3, [r7, #20]
 800a84a:	2300      	movs	r3, #0
 800a84c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2200      	movs	r2, #0
 800a856:	6939      	ldr	r1, [r7, #16]
 800a858:	6978      	ldr	r0, [r7, #20]
 800a85a:	f7ff feeb 	bl	800a634 <xQueueGenericCreateStatic>
 800a85e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f7ff ffb8 	bl	800a7d6 <prvInitialiseMutex>

		return xNewQueue;
 800a866:	68fb      	ldr	r3, [r7, #12]
	}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b08e      	sub	sp, #56	; 0x38
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a87e:	2300      	movs	r3, #0
 800a880:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10a      	bne.n	800a8a2 <xQueueGenericSend+0x32>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a89e:	bf00      	nop
 800a8a0:	e7fe      	b.n	800a8a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d103      	bne.n	800a8b0 <xQueueGenericSend+0x40>
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <xQueueGenericSend+0x44>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e000      	b.n	800a8b6 <xQueueGenericSend+0x46>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10a      	bne.n	800a8d0 <xQueueGenericSend+0x60>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d103      	bne.n	800a8de <xQueueGenericSend+0x6e>
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d101      	bne.n	800a8e2 <xQueueGenericSend+0x72>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e000      	b.n	800a8e4 <xQueueGenericSend+0x74>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10a      	bne.n	800a8fe <xQueueGenericSend+0x8e>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	623b      	str	r3, [r7, #32]
}
 800a8fa:	bf00      	nop
 800a8fc:	e7fe      	b.n	800a8fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8fe:	f001 fa1d 	bl	800bd3c <xTaskGetSchedulerState>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d102      	bne.n	800a90e <xQueueGenericSend+0x9e>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d101      	bne.n	800a912 <xQueueGenericSend+0xa2>
 800a90e:	2301      	movs	r3, #1
 800a910:	e000      	b.n	800a914 <xQueueGenericSend+0xa4>
 800a912:	2300      	movs	r3, #0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10a      	bne.n	800a92e <xQueueGenericSend+0xbe>
	__asm volatile
 800a918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	61fb      	str	r3, [r7, #28]
}
 800a92a:	bf00      	nop
 800a92c:	e7fe      	b.n	800a92c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a92e:	f001 fd51 	bl	800c3d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d302      	bcc.n	800a944 <xQueueGenericSend+0xd4>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2b02      	cmp	r3, #2
 800a942:	d129      	bne.n	800a998 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	68b9      	ldr	r1, [r7, #8]
 800a948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a94a:	f000 fb21 	bl	800af90 <prvCopyDataToQueue>
 800a94e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	2b00      	cmp	r3, #0
 800a956:	d010      	beq.n	800a97a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95a:	3324      	adds	r3, #36	; 0x24
 800a95c:	4618      	mov	r0, r3
 800a95e:	f001 f831 	bl	800b9c4 <xTaskRemoveFromEventList>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d013      	beq.n	800a990 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a968:	4b3f      	ldr	r3, [pc, #252]	; (800aa68 <xQueueGenericSend+0x1f8>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	e00a      	b.n	800a990 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d007      	beq.n	800a990 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a980:	4b39      	ldr	r3, [pc, #228]	; (800aa68 <xQueueGenericSend+0x1f8>)
 800a982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a990:	f001 fd50 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800a994:	2301      	movs	r3, #1
 800a996:	e063      	b.n	800aa60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d103      	bne.n	800a9a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a99e:	f001 fd49 	bl	800c434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	e05c      	b.n	800aa60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9ac:	f107 0314 	add.w	r3, r7, #20
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f001 f869 	bl	800ba88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9ba:	f001 fd3b 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9be:	f000 fe1f 	bl	800b600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9c2:	f001 fd07 	bl	800c3d4 <vPortEnterCritical>
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d103      	bne.n	800a9dc <xQueueGenericSend+0x16c>
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9e2:	b25b      	sxtb	r3, r3
 800a9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e8:	d103      	bne.n	800a9f2 <xQueueGenericSend+0x182>
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9f2:	f001 fd1f 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9f6:	1d3a      	adds	r2, r7, #4
 800a9f8:	f107 0314 	add.w	r3, r7, #20
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f001 f858 	bl	800bab4 <xTaskCheckForTimeOut>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d124      	bne.n	800aa54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa0c:	f000 fbb8 	bl	800b180 <prvIsQueueFull>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d018      	beq.n	800aa48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	3310      	adds	r3, #16
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 ffac 	bl	800b97c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa26:	f000 fb43 	bl	800b0b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa2a:	f000 fdf7 	bl	800b61c <xTaskResumeAll>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f47f af7c 	bne.w	800a92e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa36:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <xQueueGenericSend+0x1f8>)
 800aa38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	e772      	b.n	800a92e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa4a:	f000 fb31 	bl	800b0b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa4e:	f000 fde5 	bl	800b61c <xTaskResumeAll>
 800aa52:	e76c      	b.n	800a92e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa56:	f000 fb2b 	bl	800b0b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa5a:	f000 fddf 	bl	800b61c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3738      	adds	r7, #56	; 0x38
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	e000ed04 	.word	0xe000ed04

0800aa6c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b08e      	sub	sp, #56	; 0x38
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10a      	bne.n	800aa96 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	623b      	str	r3, [r7, #32]
}
 800aa92:	bf00      	nop
 800aa94:	e7fe      	b.n	800aa94 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00a      	beq.n	800aab4 <xQueueGiveFromISR+0x48>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	61fb      	str	r3, [r7, #28]
}
 800aab0:	bf00      	nop
 800aab2:	e7fe      	b.n	800aab2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d103      	bne.n	800aac4 <xQueueGiveFromISR+0x58>
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <xQueueGiveFromISR+0x5c>
 800aac4:	2301      	movs	r3, #1
 800aac6:	e000      	b.n	800aaca <xQueueGiveFromISR+0x5e>
 800aac8:	2300      	movs	r3, #0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10a      	bne.n	800aae4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	61bb      	str	r3, [r7, #24]
}
 800aae0:	bf00      	nop
 800aae2:	e7fe      	b.n	800aae2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aae4:	f001 fd58 	bl	800c598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aae8:	f3ef 8211 	mrs	r2, BASEPRI
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	617a      	str	r2, [r7, #20]
 800aafe:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab00:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab02:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab08:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d22b      	bcs.n	800ab6c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2e:	d112      	bne.n	800ab56 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d016      	beq.n	800ab66 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	3324      	adds	r3, #36	; 0x24
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 ff41 	bl	800b9c4 <xTaskRemoveFromEventList>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00e      	beq.n	800ab66 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00b      	beq.n	800ab66 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2201      	movs	r2, #1
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	e007      	b.n	800ab66 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	b25a      	sxtb	r2, r3
 800ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab66:	2301      	movs	r3, #1
 800ab68:	637b      	str	r3, [r7, #52]	; 0x34
 800ab6a:	e001      	b.n	800ab70 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ab70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab72:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3738      	adds	r7, #56	; 0x38
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08c      	sub	sp, #48	; 0x30
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab94:	2300      	movs	r3, #0
 800ab96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10a      	bne.n	800abb8 <xQueueReceive+0x30>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	623b      	str	r3, [r7, #32]
}
 800abb4:	bf00      	nop
 800abb6:	e7fe      	b.n	800abb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d103      	bne.n	800abc6 <xQueueReceive+0x3e>
 800abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <xQueueReceive+0x42>
 800abc6:	2301      	movs	r3, #1
 800abc8:	e000      	b.n	800abcc <xQueueReceive+0x44>
 800abca:	2300      	movs	r3, #0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10a      	bne.n	800abe6 <xQueueReceive+0x5e>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	61fb      	str	r3, [r7, #28]
}
 800abe2:	bf00      	nop
 800abe4:	e7fe      	b.n	800abe4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abe6:	f001 f8a9 	bl	800bd3c <xTaskGetSchedulerState>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d102      	bne.n	800abf6 <xQueueReceive+0x6e>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <xQueueReceive+0x72>
 800abf6:	2301      	movs	r3, #1
 800abf8:	e000      	b.n	800abfc <xQueueReceive+0x74>
 800abfa:	2300      	movs	r3, #0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10a      	bne.n	800ac16 <xQueueReceive+0x8e>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	61bb      	str	r3, [r7, #24]
}
 800ac12:	bf00      	nop
 800ac14:	e7fe      	b.n	800ac14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac16:	f001 fbdd 	bl	800c3d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d01f      	beq.n	800ac66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac26:	68b9      	ldr	r1, [r7, #8]
 800ac28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac2a:	f000 fa1b 	bl	800b064 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	1e5a      	subs	r2, r3, #1
 800ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00f      	beq.n	800ac5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac40:	3310      	adds	r3, #16
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 febe 	bl	800b9c4 <xTaskRemoveFromEventList>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d007      	beq.n	800ac5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac4e:	4b3d      	ldr	r3, [pc, #244]	; (800ad44 <xQueueReceive+0x1bc>)
 800ac50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac5e:	f001 fbe9 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e069      	b.n	800ad3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d103      	bne.n	800ac74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac6c:	f001 fbe2 	bl	800c434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac70:	2300      	movs	r3, #0
 800ac72:	e062      	b.n	800ad3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d106      	bne.n	800ac88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac7a:	f107 0310 	add.w	r3, r7, #16
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 ff02 	bl	800ba88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac84:	2301      	movs	r3, #1
 800ac86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac88:	f001 fbd4 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac8c:	f000 fcb8 	bl	800b600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac90:	f001 fba0 	bl	800c3d4 <vPortEnterCritical>
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac9a:	b25b      	sxtb	r3, r3
 800ac9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca0:	d103      	bne.n	800acaa <xQueueReceive+0x122>
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acb0:	b25b      	sxtb	r3, r3
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb6:	d103      	bne.n	800acc0 <xQueueReceive+0x138>
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acc0:	f001 fbb8 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acc4:	1d3a      	adds	r2, r7, #4
 800acc6:	f107 0310 	add.w	r3, r7, #16
 800acca:	4611      	mov	r1, r2
 800accc:	4618      	mov	r0, r3
 800acce:	f000 fef1 	bl	800bab4 <xTaskCheckForTimeOut>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d123      	bne.n	800ad20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acda:	f000 fa3b 	bl	800b154 <prvIsQueueEmpty>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d017      	beq.n	800ad14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace6:	3324      	adds	r3, #36	; 0x24
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	4611      	mov	r1, r2
 800acec:	4618      	mov	r0, r3
 800acee:	f000 fe45 	bl	800b97c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acf4:	f000 f9dc 	bl	800b0b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acf8:	f000 fc90 	bl	800b61c <xTaskResumeAll>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d189      	bne.n	800ac16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad02:	4b10      	ldr	r3, [pc, #64]	; (800ad44 <xQueueReceive+0x1bc>)
 800ad04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	e780      	b.n	800ac16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad16:	f000 f9cb 	bl	800b0b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad1a:	f000 fc7f 	bl	800b61c <xTaskResumeAll>
 800ad1e:	e77a      	b.n	800ac16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad22:	f000 f9c5 	bl	800b0b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad26:	f000 fc79 	bl	800b61c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad2c:	f000 fa12 	bl	800b154 <prvIsQueueEmpty>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f43f af6f 	beq.w	800ac16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3730      	adds	r7, #48	; 0x30
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	e000ed04 	.word	0xe000ed04

0800ad48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08e      	sub	sp, #56	; 0x38
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad52:	2300      	movs	r3, #0
 800ad54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10a      	bne.n	800ad7a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	623b      	str	r3, [r7, #32]
}
 800ad76:	bf00      	nop
 800ad78:	e7fe      	b.n	800ad78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	61fb      	str	r3, [r7, #28]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad98:	f000 ffd0 	bl	800bd3c <xTaskGetSchedulerState>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d102      	bne.n	800ada8 <xQueueSemaphoreTake+0x60>
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <xQueueSemaphoreTake+0x64>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e000      	b.n	800adae <xQueueSemaphoreTake+0x66>
 800adac:	2300      	movs	r3, #0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10a      	bne.n	800adc8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	61bb      	str	r3, [r7, #24]
}
 800adc4:	bf00      	nop
 800adc6:	e7fe      	b.n	800adc6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adc8:	f001 fb04 	bl	800c3d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add4:	2b00      	cmp	r3, #0
 800add6:	d024      	beq.n	800ae22 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	1e5a      	subs	r2, r3, #1
 800addc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adde:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d104      	bne.n	800adf2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ade8:	f001 f950 	bl	800c08c <pvTaskIncrementMutexHeldCount>
 800adec:	4602      	mov	r2, r0
 800adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00f      	beq.n	800ae1a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfc:	3310      	adds	r3, #16
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 fde0 	bl	800b9c4 <xTaskRemoveFromEventList>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d007      	beq.n	800ae1a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae0a:	4b54      	ldr	r3, [pc, #336]	; (800af5c <xQueueSemaphoreTake+0x214>)
 800ae0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae1a:	f001 fb0b 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e097      	b.n	800af52 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d111      	bne.n	800ae4c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00a      	beq.n	800ae44 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	617b      	str	r3, [r7, #20]
}
 800ae40:	bf00      	nop
 800ae42:	e7fe      	b.n	800ae42 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae44:	f001 faf6 	bl	800c434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e082      	b.n	800af52 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d106      	bne.n	800ae60 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae52:	f107 030c 	add.w	r3, r7, #12
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fe16 	bl	800ba88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae60:	f001 fae8 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae64:	f000 fbcc 	bl	800b600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae68:	f001 fab4 	bl	800c3d4 <vPortEnterCritical>
 800ae6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae72:	b25b      	sxtb	r3, r3
 800ae74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae78:	d103      	bne.n	800ae82 <xQueueSemaphoreTake+0x13a>
 800ae7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae88:	b25b      	sxtb	r3, r3
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8e:	d103      	bne.n	800ae98 <xQueueSemaphoreTake+0x150>
 800ae90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae98:	f001 facc 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae9c:	463a      	mov	r2, r7
 800ae9e:	f107 030c 	add.w	r3, r7, #12
 800aea2:	4611      	mov	r1, r2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 fe05 	bl	800bab4 <xTaskCheckForTimeOut>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d132      	bne.n	800af16 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aeb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aeb2:	f000 f94f 	bl	800b154 <prvIsQueueEmpty>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d026      	beq.n	800af0a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d109      	bne.n	800aed8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aec4:	f001 fa86 	bl	800c3d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 ff53 	bl	800bd78 <xTaskPriorityInherit>
 800aed2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aed4:	f001 faae 	bl	800c434 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	3324      	adds	r3, #36	; 0x24
 800aedc:	683a      	ldr	r2, [r7, #0]
 800aede:	4611      	mov	r1, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 fd4b 	bl	800b97c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aee8:	f000 f8e2 	bl	800b0b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aeec:	f000 fb96 	bl	800b61c <xTaskResumeAll>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f47f af68 	bne.w	800adc8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aef8:	4b18      	ldr	r3, [pc, #96]	; (800af5c <xQueueSemaphoreTake+0x214>)
 800aefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	e75e      	b.n	800adc8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af0c:	f000 f8d0 	bl	800b0b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af10:	f000 fb84 	bl	800b61c <xTaskResumeAll>
 800af14:	e758      	b.n	800adc8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af18:	f000 f8ca 	bl	800b0b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af1c:	f000 fb7e 	bl	800b61c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af22:	f000 f917 	bl	800b154 <prvIsQueueEmpty>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f43f af4d 	beq.w	800adc8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00d      	beq.n	800af50 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800af34:	f001 fa4e 	bl	800c3d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af3a:	f000 f811 	bl	800af60 <prvGetDisinheritPriorityAfterTimeout>
 800af3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800af40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af46:	4618      	mov	r0, r3
 800af48:	f001 f812 	bl	800bf70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af4c:	f001 fa72 	bl	800c434 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af52:	4618      	mov	r0, r3
 800af54:	3738      	adds	r7, #56	; 0x38
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d006      	beq.n	800af7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f1c3 0307 	rsb	r3, r3, #7
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	e001      	b.n	800af82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af7e:	2300      	movs	r3, #0
 800af80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af82:	68fb      	ldr	r3, [r7, #12]
	}
 800af84:	4618      	mov	r0, r3
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af9c:	2300      	movs	r3, #0
 800af9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10d      	bne.n	800afca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d14d      	bne.n	800b052 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 ff52 	bl	800be64 <xTaskPriorityDisinherit>
 800afc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	609a      	str	r2, [r3, #8]
 800afc8:	e043      	b.n	800b052 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d119      	bne.n	800b004 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6858      	ldr	r0, [r3, #4]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd8:	461a      	mov	r2, r3
 800afda:	68b9      	ldr	r1, [r7, #8]
 800afdc:	f004 faf6 	bl	800f5cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe8:	441a      	add	r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	685a      	ldr	r2, [r3, #4]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d32b      	bcc.n	800b052 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	605a      	str	r2, [r3, #4]
 800b002:	e026      	b.n	800b052 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	68d8      	ldr	r0, [r3, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00c:	461a      	mov	r2, r3
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	f004 fadc 	bl	800f5cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	68da      	ldr	r2, [r3, #12]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01c:	425b      	negs	r3, r3
 800b01e:	441a      	add	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d207      	bcs.n	800b040 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	689a      	ldr	r2, [r3, #8]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b038:	425b      	negs	r3, r3
 800b03a:	441a      	add	r2, r3
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b02      	cmp	r3, #2
 800b044:	d105      	bne.n	800b052 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	3b01      	subs	r3, #1
 800b050:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	1c5a      	adds	r2, r3, #1
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b05a:	697b      	ldr	r3, [r7, #20]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3718      	adds	r7, #24
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b072:	2b00      	cmp	r3, #0
 800b074:	d018      	beq.n	800b0a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68da      	ldr	r2, [r3, #12]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07e:	441a      	add	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d303      	bcc.n	800b098 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68d9      	ldr	r1, [r3, #12]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	6838      	ldr	r0, [r7, #0]
 800b0a4:	f004 fa92 	bl	800f5cc <memcpy>
	}
}
 800b0a8:	bf00      	nop
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0b8:	f001 f98c 	bl	800c3d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0c4:	e011      	b.n	800b0ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d012      	beq.n	800b0f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3324      	adds	r3, #36	; 0x24
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fc76 	bl	800b9c4 <xTaskRemoveFromEventList>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0de:	f000 fd4b 	bl	800bb78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	dce9      	bgt.n	800b0c6 <prvUnlockQueue+0x16>
 800b0f2:	e000      	b.n	800b0f6 <prvUnlockQueue+0x46>
					break;
 800b0f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	22ff      	movs	r2, #255	; 0xff
 800b0fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0fe:	f001 f999 	bl	800c434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b102:	f001 f967 	bl	800c3d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b10c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b10e:	e011      	b.n	800b134 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d012      	beq.n	800b13e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3310      	adds	r3, #16
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 fc51 	bl	800b9c4 <xTaskRemoveFromEventList>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b128:	f000 fd26 	bl	800bb78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
 800b12e:	3b01      	subs	r3, #1
 800b130:	b2db      	uxtb	r3, r3
 800b132:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	dce9      	bgt.n	800b110 <prvUnlockQueue+0x60>
 800b13c:	e000      	b.n	800b140 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b13e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	22ff      	movs	r2, #255	; 0xff
 800b144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b148:	f001 f974 	bl	800c434 <vPortExitCritical>
}
 800b14c:	bf00      	nop
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b15c:	f001 f93a 	bl	800c3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b164:	2b00      	cmp	r3, #0
 800b166:	d102      	bne.n	800b16e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b168:	2301      	movs	r3, #1
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	e001      	b.n	800b172 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b16e:	2300      	movs	r3, #0
 800b170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b172:	f001 f95f 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800b176:	68fb      	ldr	r3, [r7, #12]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b188:	f001 f924 	bl	800c3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b194:	429a      	cmp	r2, r3
 800b196:	d102      	bne.n	800b19e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b198:	2301      	movs	r3, #1
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	e001      	b.n	800b1a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1a2:	f001 f947 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b08e      	sub	sp, #56	; 0x38
 800b1b4:	af04      	add	r7, sp, #16
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
 800b1bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <xTaskCreateStatic+0x2a>
	__asm volatile
 800b1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c8:	f383 8811 	msr	BASEPRI, r3
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	623b      	str	r3, [r7, #32]
}
 800b1d6:	bf00      	nop
 800b1d8:	e7fe      	b.n	800b1d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10a      	bne.n	800b1f6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	61fb      	str	r3, [r7, #28]
}
 800b1f2:	bf00      	nop
 800b1f4:	e7fe      	b.n	800b1f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1f6:	2354      	movs	r3, #84	; 0x54
 800b1f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	2b54      	cmp	r3, #84	; 0x54
 800b1fe:	d00a      	beq.n	800b216 <xTaskCreateStatic+0x66>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	61bb      	str	r3, [r7, #24]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b216:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d01e      	beq.n	800b25c <xTaskCreateStatic+0xac>
 800b21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b220:	2b00      	cmp	r3, #0
 800b222:	d01b      	beq.n	800b25c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b22c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	2202      	movs	r2, #2
 800b232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b236:	2300      	movs	r3, #0
 800b238:	9303      	str	r3, [sp, #12]
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	9302      	str	r3, [sp, #8]
 800b23e:	f107 0314 	add.w	r3, r7, #20
 800b242:	9301      	str	r3, [sp, #4]
 800b244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	68b9      	ldr	r1, [r7, #8]
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f000 f850 	bl	800b2f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b254:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b256:	f000 f8d5 	bl	800b404 <prvAddNewTaskToReadyList>
 800b25a:	e001      	b.n	800b260 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b25c:	2300      	movs	r3, #0
 800b25e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b260:	697b      	ldr	r3, [r7, #20]
	}
 800b262:	4618      	mov	r0, r3
 800b264:	3728      	adds	r7, #40	; 0x28
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b08c      	sub	sp, #48	; 0x30
 800b26e:	af04      	add	r7, sp, #16
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	60b9      	str	r1, [r7, #8]
 800b274:	603b      	str	r3, [r7, #0]
 800b276:	4613      	mov	r3, r2
 800b278:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b27a:	88fb      	ldrh	r3, [r7, #6]
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 f9ca 	bl	800c618 <pvPortMalloc>
 800b284:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00e      	beq.n	800b2aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b28c:	2054      	movs	r0, #84	; 0x54
 800b28e:	f001 f9c3 	bl	800c618 <pvPortMalloc>
 800b292:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	631a      	str	r2, [r3, #48]	; 0x30
 800b2a0:	e005      	b.n	800b2ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b2a2:	6978      	ldr	r0, [r7, #20]
 800b2a4:	f001 fa84 	bl	800c7b0 <vPortFree>
 800b2a8:	e001      	b.n	800b2ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d017      	beq.n	800b2e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2bc:	88fa      	ldrh	r2, [r7, #6]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9303      	str	r3, [sp, #12]
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	9302      	str	r3, [sp, #8]
 800b2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 f80e 	bl	800b2f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2d8:	69f8      	ldr	r0, [r7, #28]
 800b2da:	f000 f893 	bl	800b404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	61bb      	str	r3, [r7, #24]
 800b2e2:	e002      	b.n	800b2ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2ea:	69bb      	ldr	r3, [r7, #24]
	}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3720      	adds	r7, #32
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b088      	sub	sp, #32
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
 800b300:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b306:	6879      	ldr	r1, [r7, #4]
 800b308:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b30c:	440b      	add	r3, r1
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4413      	add	r3, r2
 800b312:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	f023 0307 	bic.w	r3, r3, #7
 800b31a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	f003 0307 	and.w	r3, r3, #7
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00a      	beq.n	800b33c <prvInitialiseNewTask+0x48>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	617b      	str	r3, [r7, #20]
}
 800b338:	bf00      	nop
 800b33a:	e7fe      	b.n	800b33a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d01f      	beq.n	800b382 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b342:	2300      	movs	r3, #0
 800b344:	61fb      	str	r3, [r7, #28]
 800b346:	e012      	b.n	800b36e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	4413      	add	r3, r2
 800b34e:	7819      	ldrb	r1, [r3, #0]
 800b350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	4413      	add	r3, r2
 800b356:	3334      	adds	r3, #52	; 0x34
 800b358:	460a      	mov	r2, r1
 800b35a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	4413      	add	r3, r2
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d006      	beq.n	800b376 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	3301      	adds	r3, #1
 800b36c:	61fb      	str	r3, [r7, #28]
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	2b0f      	cmp	r3, #15
 800b372:	d9e9      	bls.n	800b348 <prvInitialiseNewTask+0x54>
 800b374:	e000      	b.n	800b378 <prvInitialiseNewTask+0x84>
			{
				break;
 800b376:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b380:	e003      	b.n	800b38a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	2200      	movs	r2, #0
 800b386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38c:	2b06      	cmp	r3, #6
 800b38e:	d901      	bls.n	800b394 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b390:	2306      	movs	r3, #6
 800b392:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b398:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b39e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff f845 	bl	800a43a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b2:	3318      	adds	r3, #24
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7ff f840 	bl	800a43a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c2:	f1c3 0207 	rsb	r2, r3, #7
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	68f9      	ldr	r1, [r7, #12]
 800b3e2:	69b8      	ldr	r0, [r7, #24]
 800b3e4:	f000 fecc 	bl	800c180 <pxPortInitialiseStack>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3fa:	bf00      	nop
 800b3fc:	3720      	adds	r7, #32
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b40c:	f000 ffe2 	bl	800c3d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b410:	4b2a      	ldr	r3, [pc, #168]	; (800b4bc <prvAddNewTaskToReadyList+0xb8>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3301      	adds	r3, #1
 800b416:	4a29      	ldr	r2, [pc, #164]	; (800b4bc <prvAddNewTaskToReadyList+0xb8>)
 800b418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b41a:	4b29      	ldr	r3, [pc, #164]	; (800b4c0 <prvAddNewTaskToReadyList+0xbc>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d109      	bne.n	800b436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b422:	4a27      	ldr	r2, [pc, #156]	; (800b4c0 <prvAddNewTaskToReadyList+0xbc>)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b428:	4b24      	ldr	r3, [pc, #144]	; (800b4bc <prvAddNewTaskToReadyList+0xb8>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d110      	bne.n	800b452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b430:	f000 fbc6 	bl	800bbc0 <prvInitialiseTaskLists>
 800b434:	e00d      	b.n	800b452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b436:	4b23      	ldr	r3, [pc, #140]	; (800b4c4 <prvAddNewTaskToReadyList+0xc0>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d109      	bne.n	800b452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b43e:	4b20      	ldr	r3, [pc, #128]	; (800b4c0 <prvAddNewTaskToReadyList+0xbc>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b448:	429a      	cmp	r2, r3
 800b44a:	d802      	bhi.n	800b452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b44c:	4a1c      	ldr	r2, [pc, #112]	; (800b4c0 <prvAddNewTaskToReadyList+0xbc>)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b452:	4b1d      	ldr	r3, [pc, #116]	; (800b4c8 <prvAddNewTaskToReadyList+0xc4>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3301      	adds	r3, #1
 800b458:	4a1b      	ldr	r2, [pc, #108]	; (800b4c8 <prvAddNewTaskToReadyList+0xc4>)
 800b45a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b460:	2201      	movs	r2, #1
 800b462:	409a      	lsls	r2, r3
 800b464:	4b19      	ldr	r3, [pc, #100]	; (800b4cc <prvAddNewTaskToReadyList+0xc8>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4313      	orrs	r3, r2
 800b46a:	4a18      	ldr	r2, [pc, #96]	; (800b4cc <prvAddNewTaskToReadyList+0xc8>)
 800b46c:	6013      	str	r3, [r2, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b472:	4613      	mov	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4413      	add	r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4a15      	ldr	r2, [pc, #84]	; (800b4d0 <prvAddNewTaskToReadyList+0xcc>)
 800b47c:	441a      	add	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	3304      	adds	r3, #4
 800b482:	4619      	mov	r1, r3
 800b484:	4610      	mov	r0, r2
 800b486:	f7fe ffe5 	bl	800a454 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b48a:	f000 ffd3 	bl	800c434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b48e:	4b0d      	ldr	r3, [pc, #52]	; (800b4c4 <prvAddNewTaskToReadyList+0xc0>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00e      	beq.n	800b4b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b496:	4b0a      	ldr	r3, [pc, #40]	; (800b4c0 <prvAddNewTaskToReadyList+0xbc>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d207      	bcs.n	800b4b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b4a4:	4b0b      	ldr	r3, [pc, #44]	; (800b4d4 <prvAddNewTaskToReadyList+0xd0>)
 800b4a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	24000130 	.word	0x24000130
 800b4c0:	24000030 	.word	0x24000030
 800b4c4:	2400013c 	.word	0x2400013c
 800b4c8:	2400014c 	.word	0x2400014c
 800b4cc:	24000138 	.word	0x24000138
 800b4d0:	24000034 	.word	0x24000034
 800b4d4:	e000ed04 	.word	0xe000ed04

0800b4d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d017      	beq.n	800b51a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4ea:	4b13      	ldr	r3, [pc, #76]	; (800b538 <vTaskDelay+0x60>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00a      	beq.n	800b508 <vTaskDelay+0x30>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	60bb      	str	r3, [r7, #8]
}
 800b504:	bf00      	nop
 800b506:	e7fe      	b.n	800b506 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b508:	f000 f87a 	bl	800b600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b50c:	2100      	movs	r1, #0
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fdd0 	bl	800c0b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b514:	f000 f882 	bl	800b61c <xTaskResumeAll>
 800b518:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d107      	bne.n	800b530 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b520:	4b06      	ldr	r3, [pc, #24]	; (800b53c <vTaskDelay+0x64>)
 800b522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b526:	601a      	str	r2, [r3, #0]
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b530:	bf00      	nop
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	24000158 	.word	0x24000158
 800b53c:	e000ed04 	.word	0xe000ed04

0800b540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b08a      	sub	sp, #40	; 0x28
 800b544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b546:	2300      	movs	r3, #0
 800b548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b54e:	463a      	mov	r2, r7
 800b550:	1d39      	adds	r1, r7, #4
 800b552:	f107 0308 	add.w	r3, r7, #8
 800b556:	4618      	mov	r0, r3
 800b558:	f001 fa90 	bl	800ca7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	9202      	str	r2, [sp, #8]
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	2300      	movs	r3, #0
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	2300      	movs	r3, #0
 800b56c:	460a      	mov	r2, r1
 800b56e:	491e      	ldr	r1, [pc, #120]	; (800b5e8 <vTaskStartScheduler+0xa8>)
 800b570:	481e      	ldr	r0, [pc, #120]	; (800b5ec <vTaskStartScheduler+0xac>)
 800b572:	f7ff fe1d 	bl	800b1b0 <xTaskCreateStatic>
 800b576:	4603      	mov	r3, r0
 800b578:	4a1d      	ldr	r2, [pc, #116]	; (800b5f0 <vTaskStartScheduler+0xb0>)
 800b57a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b57c:	4b1c      	ldr	r3, [pc, #112]	; (800b5f0 <vTaskStartScheduler+0xb0>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d002      	beq.n	800b58a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b584:	2301      	movs	r3, #1
 800b586:	617b      	str	r3, [r7, #20]
 800b588:	e001      	b.n	800b58e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b58a:	2300      	movs	r3, #0
 800b58c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d116      	bne.n	800b5c2 <vTaskStartScheduler+0x82>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	613b      	str	r3, [r7, #16]
}
 800b5a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b5a8:	4b12      	ldr	r3, [pc, #72]	; (800b5f4 <vTaskStartScheduler+0xb4>)
 800b5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b5b0:	4b11      	ldr	r3, [pc, #68]	; (800b5f8 <vTaskStartScheduler+0xb8>)
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b5b6:	4b11      	ldr	r3, [pc, #68]	; (800b5fc <vTaskStartScheduler+0xbc>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b5bc:	f000 fe68 	bl	800c290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b5c0:	e00e      	b.n	800b5e0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c8:	d10a      	bne.n	800b5e0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ce:	f383 8811 	msr	BASEPRI, r3
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	60fb      	str	r3, [r7, #12]
}
 800b5dc:	bf00      	nop
 800b5de:	e7fe      	b.n	800b5de <vTaskStartScheduler+0x9e>
}
 800b5e0:	bf00      	nop
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	0800f610 	.word	0x0800f610
 800b5ec:	0800bb91 	.word	0x0800bb91
 800b5f0:	24000154 	.word	0x24000154
 800b5f4:	24000150 	.word	0x24000150
 800b5f8:	2400013c 	.word	0x2400013c
 800b5fc:	24000134 	.word	0x24000134

0800b600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b600:	b480      	push	{r7}
 800b602:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b604:	4b04      	ldr	r3, [pc, #16]	; (800b618 <vTaskSuspendAll+0x18>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	3301      	adds	r3, #1
 800b60a:	4a03      	ldr	r2, [pc, #12]	; (800b618 <vTaskSuspendAll+0x18>)
 800b60c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b60e:	bf00      	nop
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	24000158 	.word	0x24000158

0800b61c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b622:	2300      	movs	r3, #0
 800b624:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b626:	2300      	movs	r3, #0
 800b628:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b62a:	4b41      	ldr	r3, [pc, #260]	; (800b730 <xTaskResumeAll+0x114>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10a      	bne.n	800b648 <xTaskResumeAll+0x2c>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	603b      	str	r3, [r7, #0]
}
 800b644:	bf00      	nop
 800b646:	e7fe      	b.n	800b646 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b648:	f000 fec4 	bl	800c3d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b64c:	4b38      	ldr	r3, [pc, #224]	; (800b730 <xTaskResumeAll+0x114>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	3b01      	subs	r3, #1
 800b652:	4a37      	ldr	r2, [pc, #220]	; (800b730 <xTaskResumeAll+0x114>)
 800b654:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b656:	4b36      	ldr	r3, [pc, #216]	; (800b730 <xTaskResumeAll+0x114>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d161      	bne.n	800b722 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b65e:	4b35      	ldr	r3, [pc, #212]	; (800b734 <xTaskResumeAll+0x118>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d05d      	beq.n	800b722 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b666:	e02e      	b.n	800b6c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b668:	4b33      	ldr	r3, [pc, #204]	; (800b738 <xTaskResumeAll+0x11c>)
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3318      	adds	r3, #24
 800b674:	4618      	mov	r0, r3
 800b676:	f7fe ff4a 	bl	800a50e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	3304      	adds	r3, #4
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe ff45 	bl	800a50e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b688:	2201      	movs	r2, #1
 800b68a:	409a      	lsls	r2, r3
 800b68c:	4b2b      	ldr	r3, [pc, #172]	; (800b73c <xTaskResumeAll+0x120>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4313      	orrs	r3, r2
 800b692:	4a2a      	ldr	r2, [pc, #168]	; (800b73c <xTaskResumeAll+0x120>)
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b69a:	4613      	mov	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4a27      	ldr	r2, [pc, #156]	; (800b740 <xTaskResumeAll+0x124>)
 800b6a4:	441a      	add	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	f7fe fed1 	bl	800a454 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b6:	4b23      	ldr	r3, [pc, #140]	; (800b744 <xTaskResumeAll+0x128>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d302      	bcc.n	800b6c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b6c0:	4b21      	ldr	r3, [pc, #132]	; (800b748 <xTaskResumeAll+0x12c>)
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6c6:	4b1c      	ldr	r3, [pc, #112]	; (800b738 <xTaskResumeAll+0x11c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1cc      	bne.n	800b668 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d001      	beq.n	800b6d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6d4:	f000 fb12 	bl	800bcfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b6d8:	4b1c      	ldr	r3, [pc, #112]	; (800b74c <xTaskResumeAll+0x130>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d010      	beq.n	800b706 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6e4:	f000 f836 	bl	800b754 <xTaskIncrementTick>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b6ee:	4b16      	ldr	r3, [pc, #88]	; (800b748 <xTaskResumeAll+0x12c>)
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1f1      	bne.n	800b6e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b700:	4b12      	ldr	r3, [pc, #72]	; (800b74c <xTaskResumeAll+0x130>)
 800b702:	2200      	movs	r2, #0
 800b704:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b706:	4b10      	ldr	r3, [pc, #64]	; (800b748 <xTaskResumeAll+0x12c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d009      	beq.n	800b722 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b70e:	2301      	movs	r3, #1
 800b710:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b712:	4b0f      	ldr	r3, [pc, #60]	; (800b750 <xTaskResumeAll+0x134>)
 800b714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b722:	f000 fe87 	bl	800c434 <vPortExitCritical>

	return xAlreadyYielded;
 800b726:	68bb      	ldr	r3, [r7, #8]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	24000158 	.word	0x24000158
 800b734:	24000130 	.word	0x24000130
 800b738:	240000f0 	.word	0x240000f0
 800b73c:	24000138 	.word	0x24000138
 800b740:	24000034 	.word	0x24000034
 800b744:	24000030 	.word	0x24000030
 800b748:	24000144 	.word	0x24000144
 800b74c:	24000140 	.word	0x24000140
 800b750:	e000ed04 	.word	0xe000ed04

0800b754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b086      	sub	sp, #24
 800b758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b75a:	2300      	movs	r3, #0
 800b75c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b75e:	4b4e      	ldr	r3, [pc, #312]	; (800b898 <xTaskIncrementTick+0x144>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	f040 808e 	bne.w	800b884 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b768:	4b4c      	ldr	r3, [pc, #304]	; (800b89c <xTaskIncrementTick+0x148>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3301      	adds	r3, #1
 800b76e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b770:	4a4a      	ldr	r2, [pc, #296]	; (800b89c <xTaskIncrementTick+0x148>)
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d120      	bne.n	800b7be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b77c:	4b48      	ldr	r3, [pc, #288]	; (800b8a0 <xTaskIncrementTick+0x14c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <xTaskIncrementTick+0x48>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	603b      	str	r3, [r7, #0]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <xTaskIncrementTick+0x46>
 800b79c:	4b40      	ldr	r3, [pc, #256]	; (800b8a0 <xTaskIncrementTick+0x14c>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	60fb      	str	r3, [r7, #12]
 800b7a2:	4b40      	ldr	r3, [pc, #256]	; (800b8a4 <xTaskIncrementTick+0x150>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a3e      	ldr	r2, [pc, #248]	; (800b8a0 <xTaskIncrementTick+0x14c>)
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	4a3e      	ldr	r2, [pc, #248]	; (800b8a4 <xTaskIncrementTick+0x150>)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	4b3d      	ldr	r3, [pc, #244]	; (800b8a8 <xTaskIncrementTick+0x154>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	4a3c      	ldr	r2, [pc, #240]	; (800b8a8 <xTaskIncrementTick+0x154>)
 800b7b8:	6013      	str	r3, [r2, #0]
 800b7ba:	f000 fa9f 	bl	800bcfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7be:	4b3b      	ldr	r3, [pc, #236]	; (800b8ac <xTaskIncrementTick+0x158>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d348      	bcc.n	800b85a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7c8:	4b35      	ldr	r3, [pc, #212]	; (800b8a0 <xTaskIncrementTick+0x14c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d104      	bne.n	800b7dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d2:	4b36      	ldr	r3, [pc, #216]	; (800b8ac <xTaskIncrementTick+0x158>)
 800b7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d8:	601a      	str	r2, [r3, #0]
					break;
 800b7da:	e03e      	b.n	800b85a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7dc:	4b30      	ldr	r3, [pc, #192]	; (800b8a0 <xTaskIncrementTick+0x14c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7ec:	693a      	ldr	r2, [r7, #16]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d203      	bcs.n	800b7fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7f4:	4a2d      	ldr	r2, [pc, #180]	; (800b8ac <xTaskIncrementTick+0x158>)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7fa:	e02e      	b.n	800b85a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	3304      	adds	r3, #4
 800b800:	4618      	mov	r0, r3
 800b802:	f7fe fe84 	bl	800a50e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d004      	beq.n	800b818 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	3318      	adds	r3, #24
 800b812:	4618      	mov	r0, r3
 800b814:	f7fe fe7b 	bl	800a50e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	2201      	movs	r2, #1
 800b81e:	409a      	lsls	r2, r3
 800b820:	4b23      	ldr	r3, [pc, #140]	; (800b8b0 <xTaskIncrementTick+0x15c>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4313      	orrs	r3, r2
 800b826:	4a22      	ldr	r2, [pc, #136]	; (800b8b0 <xTaskIncrementTick+0x15c>)
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82e:	4613      	mov	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4413      	add	r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4a1f      	ldr	r2, [pc, #124]	; (800b8b4 <xTaskIncrementTick+0x160>)
 800b838:	441a      	add	r2, r3
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	3304      	adds	r3, #4
 800b83e:	4619      	mov	r1, r3
 800b840:	4610      	mov	r0, r2
 800b842:	f7fe fe07 	bl	800a454 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84a:	4b1b      	ldr	r3, [pc, #108]	; (800b8b8 <xTaskIncrementTick+0x164>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b850:	429a      	cmp	r2, r3
 800b852:	d3b9      	bcc.n	800b7c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b854:	2301      	movs	r3, #1
 800b856:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b858:	e7b6      	b.n	800b7c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b85a:	4b17      	ldr	r3, [pc, #92]	; (800b8b8 <xTaskIncrementTick+0x164>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b860:	4914      	ldr	r1, [pc, #80]	; (800b8b4 <xTaskIncrementTick+0x160>)
 800b862:	4613      	mov	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	440b      	add	r3, r1
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d901      	bls.n	800b876 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b872:	2301      	movs	r3, #1
 800b874:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b876:	4b11      	ldr	r3, [pc, #68]	; (800b8bc <xTaskIncrementTick+0x168>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d007      	beq.n	800b88e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b87e:	2301      	movs	r3, #1
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	e004      	b.n	800b88e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b884:	4b0e      	ldr	r3, [pc, #56]	; (800b8c0 <xTaskIncrementTick+0x16c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3301      	adds	r3, #1
 800b88a:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <xTaskIncrementTick+0x16c>)
 800b88c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b88e:	697b      	ldr	r3, [r7, #20]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	24000158 	.word	0x24000158
 800b89c:	24000134 	.word	0x24000134
 800b8a0:	240000e8 	.word	0x240000e8
 800b8a4:	240000ec 	.word	0x240000ec
 800b8a8:	24000148 	.word	0x24000148
 800b8ac:	24000150 	.word	0x24000150
 800b8b0:	24000138 	.word	0x24000138
 800b8b4:	24000034 	.word	0x24000034
 800b8b8:	24000030 	.word	0x24000030
 800b8bc:	24000144 	.word	0x24000144
 800b8c0:	24000140 	.word	0x24000140

0800b8c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8ca:	4b27      	ldr	r3, [pc, #156]	; (800b968 <vTaskSwitchContext+0xa4>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8d2:	4b26      	ldr	r3, [pc, #152]	; (800b96c <vTaskSwitchContext+0xa8>)
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8d8:	e03f      	b.n	800b95a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b8da:	4b24      	ldr	r3, [pc, #144]	; (800b96c <vTaskSwitchContext+0xa8>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8e0:	4b23      	ldr	r3, [pc, #140]	; (800b970 <vTaskSwitchContext+0xac>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	fab3 f383 	clz	r3, r3
 800b8ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b8ee:	7afb      	ldrb	r3, [r7, #11]
 800b8f0:	f1c3 031f 	rsb	r3, r3, #31
 800b8f4:	617b      	str	r3, [r7, #20]
 800b8f6:	491f      	ldr	r1, [pc, #124]	; (800b974 <vTaskSwitchContext+0xb0>)
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	4413      	add	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	440b      	add	r3, r1
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	607b      	str	r3, [r7, #4]
}
 800b91c:	bf00      	nop
 800b91e:	e7fe      	b.n	800b91e <vTaskSwitchContext+0x5a>
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	4613      	mov	r3, r2
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4a12      	ldr	r2, [pc, #72]	; (800b974 <vTaskSwitchContext+0xb0>)
 800b92c:	4413      	add	r3, r2
 800b92e:	613b      	str	r3, [r7, #16]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	605a      	str	r2, [r3, #4]
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	685a      	ldr	r2, [r3, #4]
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	3308      	adds	r3, #8
 800b942:	429a      	cmp	r2, r3
 800b944:	d104      	bne.n	800b950 <vTaskSwitchContext+0x8c>
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	605a      	str	r2, [r3, #4]
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	4a08      	ldr	r2, [pc, #32]	; (800b978 <vTaskSwitchContext+0xb4>)
 800b958:	6013      	str	r3, [r2, #0]
}
 800b95a:	bf00      	nop
 800b95c:	371c      	adds	r7, #28
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	24000158 	.word	0x24000158
 800b96c:	24000144 	.word	0x24000144
 800b970:	24000138 	.word	0x24000138
 800b974:	24000034 	.word	0x24000034
 800b978:	24000030 	.word	0x24000030

0800b97c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10a      	bne.n	800b9a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60fb      	str	r3, [r7, #12]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9a2:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <vTaskPlaceOnEventList+0x44>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3318      	adds	r3, #24
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7fe fd76 	bl	800a49c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	6838      	ldr	r0, [r7, #0]
 800b9b4:	f000 fb7e 	bl	800c0b4 <prvAddCurrentTaskToDelayedList>
}
 800b9b8:	bf00      	nop
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	24000030 	.word	0x24000030

0800b9c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10a      	bne.n	800b9f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	60fb      	str	r3, [r7, #12]
}
 800b9ec:	bf00      	nop
 800b9ee:	e7fe      	b.n	800b9ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	3318      	adds	r3, #24
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fe fd8a 	bl	800a50e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9fa:	4b1d      	ldr	r3, [pc, #116]	; (800ba70 <xTaskRemoveFromEventList+0xac>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d11c      	bne.n	800ba3c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	3304      	adds	r3, #4
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe fd81 	bl	800a50e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	2201      	movs	r2, #1
 800ba12:	409a      	lsls	r2, r3
 800ba14:	4b17      	ldr	r3, [pc, #92]	; (800ba74 <xTaskRemoveFromEventList+0xb0>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	4a16      	ldr	r2, [pc, #88]	; (800ba74 <xTaskRemoveFromEventList+0xb0>)
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4a13      	ldr	r2, [pc, #76]	; (800ba78 <xTaskRemoveFromEventList+0xb4>)
 800ba2c:	441a      	add	r2, r3
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	3304      	adds	r3, #4
 800ba32:	4619      	mov	r1, r3
 800ba34:	4610      	mov	r0, r2
 800ba36:	f7fe fd0d 	bl	800a454 <vListInsertEnd>
 800ba3a:	e005      	b.n	800ba48 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	3318      	adds	r3, #24
 800ba40:	4619      	mov	r1, r3
 800ba42:	480e      	ldr	r0, [pc, #56]	; (800ba7c <xTaskRemoveFromEventList+0xb8>)
 800ba44:	f7fe fd06 	bl	800a454 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4c:	4b0c      	ldr	r3, [pc, #48]	; (800ba80 <xTaskRemoveFromEventList+0xbc>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d905      	bls.n	800ba62 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba56:	2301      	movs	r3, #1
 800ba58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba5a:	4b0a      	ldr	r3, [pc, #40]	; (800ba84 <xTaskRemoveFromEventList+0xc0>)
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	e001      	b.n	800ba66 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ba62:	2300      	movs	r3, #0
 800ba64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba66:	697b      	ldr	r3, [r7, #20]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3718      	adds	r7, #24
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	24000158 	.word	0x24000158
 800ba74:	24000138 	.word	0x24000138
 800ba78:	24000034 	.word	0x24000034
 800ba7c:	240000f0 	.word	0x240000f0
 800ba80:	24000030 	.word	0x24000030
 800ba84:	24000144 	.word	0x24000144

0800ba88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba90:	4b06      	ldr	r3, [pc, #24]	; (800baac <vTaskInternalSetTimeOutState+0x24>)
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba98:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <vTaskInternalSetTimeOutState+0x28>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	605a      	str	r2, [r3, #4]
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	24000148 	.word	0x24000148
 800bab0:	24000134 	.word	0x24000134

0800bab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10a      	bne.n	800bada <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	613b      	str	r3, [r7, #16]
}
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10a      	bne.n	800baf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800baf6:	f000 fc6d 	bl	800c3d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bafa:	4b1d      	ldr	r3, [pc, #116]	; (800bb70 <xTaskCheckForTimeOut+0xbc>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	69ba      	ldr	r2, [r7, #24]
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb12:	d102      	bne.n	800bb1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb14:	2300      	movs	r3, #0
 800bb16:	61fb      	str	r3, [r7, #28]
 800bb18:	e023      	b.n	800bb62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	4b15      	ldr	r3, [pc, #84]	; (800bb74 <xTaskCheckForTimeOut+0xc0>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d007      	beq.n	800bb36 <xTaskCheckForTimeOut+0x82>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	69ba      	ldr	r2, [r7, #24]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d302      	bcc.n	800bb36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb30:	2301      	movs	r3, #1
 800bb32:	61fb      	str	r3, [r7, #28]
 800bb34:	e015      	b.n	800bb62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d20b      	bcs.n	800bb58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	1ad2      	subs	r2, r2, r3
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff ff9b 	bl	800ba88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb52:	2300      	movs	r3, #0
 800bb54:	61fb      	str	r3, [r7, #28]
 800bb56:	e004      	b.n	800bb62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb62:	f000 fc67 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800bb66:	69fb      	ldr	r3, [r7, #28]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3720      	adds	r7, #32
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	24000134 	.word	0x24000134
 800bb74:	24000148 	.word	0x24000148

0800bb78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb7c:	4b03      	ldr	r3, [pc, #12]	; (800bb8c <vTaskMissedYield+0x14>)
 800bb7e:	2201      	movs	r2, #1
 800bb80:	601a      	str	r2, [r3, #0]
}
 800bb82:	bf00      	nop
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	24000144 	.word	0x24000144

0800bb90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb98:	f000 f852 	bl	800bc40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb9c:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <prvIdleTask+0x28>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d9f9      	bls.n	800bb98 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bba4:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <prvIdleTask+0x2c>)
 800bba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbb4:	e7f0      	b.n	800bb98 <prvIdleTask+0x8>
 800bbb6:	bf00      	nop
 800bbb8:	24000034 	.word	0x24000034
 800bbbc:	e000ed04 	.word	0xe000ed04

0800bbc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	607b      	str	r3, [r7, #4]
 800bbca:	e00c      	b.n	800bbe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	4413      	add	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4a12      	ldr	r2, [pc, #72]	; (800bc20 <prvInitialiseTaskLists+0x60>)
 800bbd8:	4413      	add	r3, r2
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fe fc0d 	bl	800a3fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	607b      	str	r3, [r7, #4]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b06      	cmp	r3, #6
 800bbea:	d9ef      	bls.n	800bbcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbec:	480d      	ldr	r0, [pc, #52]	; (800bc24 <prvInitialiseTaskLists+0x64>)
 800bbee:	f7fe fc04 	bl	800a3fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbf2:	480d      	ldr	r0, [pc, #52]	; (800bc28 <prvInitialiseTaskLists+0x68>)
 800bbf4:	f7fe fc01 	bl	800a3fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbf8:	480c      	ldr	r0, [pc, #48]	; (800bc2c <prvInitialiseTaskLists+0x6c>)
 800bbfa:	f7fe fbfe 	bl	800a3fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbfe:	480c      	ldr	r0, [pc, #48]	; (800bc30 <prvInitialiseTaskLists+0x70>)
 800bc00:	f7fe fbfb 	bl	800a3fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc04:	480b      	ldr	r0, [pc, #44]	; (800bc34 <prvInitialiseTaskLists+0x74>)
 800bc06:	f7fe fbf8 	bl	800a3fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc0a:	4b0b      	ldr	r3, [pc, #44]	; (800bc38 <prvInitialiseTaskLists+0x78>)
 800bc0c:	4a05      	ldr	r2, [pc, #20]	; (800bc24 <prvInitialiseTaskLists+0x64>)
 800bc0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <prvInitialiseTaskLists+0x7c>)
 800bc12:	4a05      	ldr	r2, [pc, #20]	; (800bc28 <prvInitialiseTaskLists+0x68>)
 800bc14:	601a      	str	r2, [r3, #0]
}
 800bc16:	bf00      	nop
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	24000034 	.word	0x24000034
 800bc24:	240000c0 	.word	0x240000c0
 800bc28:	240000d4 	.word	0x240000d4
 800bc2c:	240000f0 	.word	0x240000f0
 800bc30:	24000104 	.word	0x24000104
 800bc34:	2400011c 	.word	0x2400011c
 800bc38:	240000e8 	.word	0x240000e8
 800bc3c:	240000ec 	.word	0x240000ec

0800bc40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc46:	e019      	b.n	800bc7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc48:	f000 fbc4 	bl	800c3d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc4c:	4b10      	ldr	r3, [pc, #64]	; (800bc90 <prvCheckTasksWaitingTermination+0x50>)
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	3304      	adds	r3, #4
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fe fc58 	bl	800a50e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc5e:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <prvCheckTasksWaitingTermination+0x54>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	4a0b      	ldr	r2, [pc, #44]	; (800bc94 <prvCheckTasksWaitingTermination+0x54>)
 800bc66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc68:	4b0b      	ldr	r3, [pc, #44]	; (800bc98 <prvCheckTasksWaitingTermination+0x58>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	4a0a      	ldr	r2, [pc, #40]	; (800bc98 <prvCheckTasksWaitingTermination+0x58>)
 800bc70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc72:	f000 fbdf 	bl	800c434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f810 	bl	800bc9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc7c:	4b06      	ldr	r3, [pc, #24]	; (800bc98 <prvCheckTasksWaitingTermination+0x58>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1e1      	bne.n	800bc48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	24000104 	.word	0x24000104
 800bc94:	24000130 	.word	0x24000130
 800bc98:	24000118 	.word	0x24000118

0800bc9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d108      	bne.n	800bcc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 fd7c 	bl	800c7b0 <vPortFree>
				vPortFree( pxTCB );
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fd79 	bl	800c7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bcbe:	e018      	b.n	800bcf2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d103      	bne.n	800bcd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fd70 	bl	800c7b0 <vPortFree>
	}
 800bcd0:	e00f      	b.n	800bcf2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d00a      	beq.n	800bcf2 <prvDeleteTCB+0x56>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	60fb      	str	r3, [r7, #12]
}
 800bcee:	bf00      	nop
 800bcf0:	e7fe      	b.n	800bcf0 <prvDeleteTCB+0x54>
	}
 800bcf2:	bf00      	nop
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd02:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <prvResetNextTaskUnblockTime+0x38>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d104      	bne.n	800bd16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd0c:	4b0a      	ldr	r3, [pc, #40]	; (800bd38 <prvResetNextTaskUnblockTime+0x3c>)
 800bd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd14:	e008      	b.n	800bd28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd16:	4b07      	ldr	r3, [pc, #28]	; (800bd34 <prvResetNextTaskUnblockTime+0x38>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	4a04      	ldr	r2, [pc, #16]	; (800bd38 <prvResetNextTaskUnblockTime+0x3c>)
 800bd26:	6013      	str	r3, [r2, #0]
}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	240000e8 	.word	0x240000e8
 800bd38:	24000150 	.word	0x24000150

0800bd3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd42:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <xTaskGetSchedulerState+0x34>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d102      	bne.n	800bd50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	607b      	str	r3, [r7, #4]
 800bd4e:	e008      	b.n	800bd62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd50:	4b08      	ldr	r3, [pc, #32]	; (800bd74 <xTaskGetSchedulerState+0x38>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d102      	bne.n	800bd5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd58:	2302      	movs	r3, #2
 800bd5a:	607b      	str	r3, [r7, #4]
 800bd5c:	e001      	b.n	800bd62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd62:	687b      	ldr	r3, [r7, #4]
	}
 800bd64:	4618      	mov	r0, r3
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	2400013c 	.word	0x2400013c
 800bd74:	24000158 	.word	0x24000158

0800bd78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd84:	2300      	movs	r3, #0
 800bd86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d05e      	beq.n	800be4c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd92:	4b31      	ldr	r3, [pc, #196]	; (800be58 <xTaskPriorityInherit+0xe0>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d24e      	bcs.n	800be3a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	699b      	ldr	r3, [r3, #24]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	db06      	blt.n	800bdb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bda4:	4b2c      	ldr	r3, [pc, #176]	; (800be58 <xTaskPriorityInherit+0xe0>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdaa:	f1c3 0207 	rsb	r2, r3, #7
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	6959      	ldr	r1, [r3, #20]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdba:	4613      	mov	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4413      	add	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4a26      	ldr	r2, [pc, #152]	; (800be5c <xTaskPriorityInherit+0xe4>)
 800bdc4:	4413      	add	r3, r2
 800bdc6:	4299      	cmp	r1, r3
 800bdc8:	d12f      	bne.n	800be2a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	3304      	adds	r3, #4
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fe fb9d 	bl	800a50e <uxListRemove>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10a      	bne.n	800bdf0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdde:	2201      	movs	r2, #1
 800bde0:	fa02 f303 	lsl.w	r3, r2, r3
 800bde4:	43da      	mvns	r2, r3
 800bde6:	4b1e      	ldr	r3, [pc, #120]	; (800be60 <xTaskPriorityInherit+0xe8>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4013      	ands	r3, r2
 800bdec:	4a1c      	ldr	r2, [pc, #112]	; (800be60 <xTaskPriorityInherit+0xe8>)
 800bdee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdf0:	4b19      	ldr	r3, [pc, #100]	; (800be58 <xTaskPriorityInherit+0xe0>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfe:	2201      	movs	r2, #1
 800be00:	409a      	lsls	r2, r3
 800be02:	4b17      	ldr	r3, [pc, #92]	; (800be60 <xTaskPriorityInherit+0xe8>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4313      	orrs	r3, r2
 800be08:	4a15      	ldr	r2, [pc, #84]	; (800be60 <xTaskPriorityInherit+0xe8>)
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be10:	4613      	mov	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4a10      	ldr	r2, [pc, #64]	; (800be5c <xTaskPriorityInherit+0xe4>)
 800be1a:	441a      	add	r2, r3
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	3304      	adds	r3, #4
 800be20:	4619      	mov	r1, r3
 800be22:	4610      	mov	r0, r2
 800be24:	f7fe fb16 	bl	800a454 <vListInsertEnd>
 800be28:	e004      	b.n	800be34 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be2a:	4b0b      	ldr	r3, [pc, #44]	; (800be58 <xTaskPriorityInherit+0xe0>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800be34:	2301      	movs	r3, #1
 800be36:	60fb      	str	r3, [r7, #12]
 800be38:	e008      	b.n	800be4c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be3e:	4b06      	ldr	r3, [pc, #24]	; (800be58 <xTaskPriorityInherit+0xe0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be44:	429a      	cmp	r2, r3
 800be46:	d201      	bcs.n	800be4c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be48:	2301      	movs	r3, #1
 800be4a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be4c:	68fb      	ldr	r3, [r7, #12]
	}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	24000030 	.word	0x24000030
 800be5c:	24000034 	.word	0x24000034
 800be60:	24000138 	.word	0x24000138

0800be64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be70:	2300      	movs	r3, #0
 800be72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d06e      	beq.n	800bf58 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be7a:	4b3a      	ldr	r3, [pc, #232]	; (800bf64 <xTaskPriorityDisinherit+0x100>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	429a      	cmp	r2, r3
 800be82:	d00a      	beq.n	800be9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	60fb      	str	r3, [r7, #12]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10a      	bne.n	800beb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	60bb      	str	r3, [r7, #8]
}
 800beb4:	bf00      	nop
 800beb6:	e7fe      	b.n	800beb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bebc:	1e5a      	subs	r2, r3, #1
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beca:	429a      	cmp	r2, r3
 800becc:	d044      	beq.n	800bf58 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d140      	bne.n	800bf58 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	3304      	adds	r3, #4
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe fb17 	bl	800a50e <uxListRemove>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d115      	bne.n	800bf12 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beea:	491f      	ldr	r1, [pc, #124]	; (800bf68 <xTaskPriorityDisinherit+0x104>)
 800beec:	4613      	mov	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	440b      	add	r3, r1
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10a      	bne.n	800bf12 <xTaskPriorityDisinherit+0xae>
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf00:	2201      	movs	r2, #1
 800bf02:	fa02 f303 	lsl.w	r3, r2, r3
 800bf06:	43da      	mvns	r2, r3
 800bf08:	4b18      	ldr	r3, [pc, #96]	; (800bf6c <xTaskPriorityDisinherit+0x108>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	4a17      	ldr	r2, [pc, #92]	; (800bf6c <xTaskPriorityDisinherit+0x108>)
 800bf10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1e:	f1c3 0207 	rsb	r2, r3, #7
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	409a      	lsls	r2, r3
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <xTaskPriorityDisinherit+0x108>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	4a0d      	ldr	r2, [pc, #52]	; (800bf6c <xTaskPriorityDisinherit+0x108>)
 800bf36:	6013      	str	r3, [r2, #0]
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4a08      	ldr	r2, [pc, #32]	; (800bf68 <xTaskPriorityDisinherit+0x104>)
 800bf46:	441a      	add	r2, r3
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	4610      	mov	r0, r2
 800bf50:	f7fe fa80 	bl	800a454 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf54:	2301      	movs	r3, #1
 800bf56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf58:	697b      	ldr	r3, [r7, #20]
	}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	24000030 	.word	0x24000030
 800bf68:	24000034 	.word	0x24000034
 800bf6c:	24000138 	.word	0x24000138

0800bf70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d077      	beq.n	800c078 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	60fb      	str	r3, [r7, #12]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d902      	bls.n	800bfb6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	61fb      	str	r3, [r7, #28]
 800bfb4:	e002      	b.n	800bfbc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc0:	69fa      	ldr	r2, [r7, #28]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d058      	beq.n	800c078 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfca:	697a      	ldr	r2, [r7, #20]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d153      	bne.n	800c078 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bfd0:	4b2b      	ldr	r3, [pc, #172]	; (800c080 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	69ba      	ldr	r2, [r7, #24]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d10a      	bne.n	800bff0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfde:	f383 8811 	msr	BASEPRI, r3
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	60bb      	str	r3, [r7, #8]
}
 800bfec:	bf00      	nop
 800bfee:	e7fe      	b.n	800bfee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	69fa      	ldr	r2, [r7, #28]
 800bffa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	2b00      	cmp	r3, #0
 800c002:	db04      	blt.n	800c00e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	f1c3 0207 	rsb	r2, r3, #7
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	6959      	ldr	r1, [r3, #20]
 800c012:	693a      	ldr	r2, [r7, #16]
 800c014:	4613      	mov	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4a19      	ldr	r2, [pc, #100]	; (800c084 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c01e:	4413      	add	r3, r2
 800c020:	4299      	cmp	r1, r3
 800c022:	d129      	bne.n	800c078 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	3304      	adds	r3, #4
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe fa70 	bl	800a50e <uxListRemove>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	2201      	movs	r2, #1
 800c03a:	fa02 f303 	lsl.w	r3, r2, r3
 800c03e:	43da      	mvns	r2, r3
 800c040:	4b11      	ldr	r3, [pc, #68]	; (800c088 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4013      	ands	r3, r2
 800c046:	4a10      	ldr	r2, [pc, #64]	; (800c088 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c048:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04e:	2201      	movs	r2, #1
 800c050:	409a      	lsls	r2, r3
 800c052:	4b0d      	ldr	r3, [pc, #52]	; (800c088 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4313      	orrs	r3, r2
 800c058:	4a0b      	ldr	r2, [pc, #44]	; (800c088 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c05a:	6013      	str	r3, [r2, #0]
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c060:	4613      	mov	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4a06      	ldr	r2, [pc, #24]	; (800c084 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c06a:	441a      	add	r2, r3
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	3304      	adds	r3, #4
 800c070:	4619      	mov	r1, r3
 800c072:	4610      	mov	r0, r2
 800c074:	f7fe f9ee 	bl	800a454 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c078:	bf00      	nop
 800c07a:	3720      	adds	r7, #32
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	24000030 	.word	0x24000030
 800c084:	24000034 	.word	0x24000034
 800c088:	24000138 	.word	0x24000138

0800c08c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c08c:	b480      	push	{r7}
 800c08e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c090:	4b07      	ldr	r3, [pc, #28]	; (800c0b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d004      	beq.n	800c0a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c098:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c09e:	3201      	adds	r2, #1
 800c0a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c0a2:	4b03      	ldr	r3, [pc, #12]	; (800c0b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
	}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	24000030 	.word	0x24000030

0800c0b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0be:	4b29      	ldr	r3, [pc, #164]	; (800c164 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0c4:	4b28      	ldr	r3, [pc, #160]	; (800c168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe fa1f 	bl	800a50e <uxListRemove>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10b      	bne.n	800c0ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c0d6:	4b24      	ldr	r3, [pc, #144]	; (800c168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0dc:	2201      	movs	r2, #1
 800c0de:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e2:	43da      	mvns	r2, r3
 800c0e4:	4b21      	ldr	r3, [pc, #132]	; (800c16c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	4a20      	ldr	r2, [pc, #128]	; (800c16c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f4:	d10a      	bne.n	800c10c <prvAddCurrentTaskToDelayedList+0x58>
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d007      	beq.n	800c10c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0fc:	4b1a      	ldr	r3, [pc, #104]	; (800c168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3304      	adds	r3, #4
 800c102:	4619      	mov	r1, r3
 800c104:	481a      	ldr	r0, [pc, #104]	; (800c170 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c106:	f7fe f9a5 	bl	800a454 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c10a:	e026      	b.n	800c15a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4413      	add	r3, r2
 800c112:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c114:	4b14      	ldr	r3, [pc, #80]	; (800c168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	429a      	cmp	r2, r3
 800c122:	d209      	bcs.n	800c138 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c124:	4b13      	ldr	r3, [pc, #76]	; (800c174 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	4b0f      	ldr	r3, [pc, #60]	; (800c168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	3304      	adds	r3, #4
 800c12e:	4619      	mov	r1, r3
 800c130:	4610      	mov	r0, r2
 800c132:	f7fe f9b3 	bl	800a49c <vListInsert>
}
 800c136:	e010      	b.n	800c15a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c138:	4b0f      	ldr	r3, [pc, #60]	; (800c178 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	4b0a      	ldr	r3, [pc, #40]	; (800c168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3304      	adds	r3, #4
 800c142:	4619      	mov	r1, r3
 800c144:	4610      	mov	r0, r2
 800c146:	f7fe f9a9 	bl	800a49c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c14a:	4b0c      	ldr	r3, [pc, #48]	; (800c17c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	429a      	cmp	r2, r3
 800c152:	d202      	bcs.n	800c15a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c154:	4a09      	ldr	r2, [pc, #36]	; (800c17c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	6013      	str	r3, [r2, #0]
}
 800c15a:	bf00      	nop
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	24000134 	.word	0x24000134
 800c168:	24000030 	.word	0x24000030
 800c16c:	24000138 	.word	0x24000138
 800c170:	2400011c 	.word	0x2400011c
 800c174:	240000ec 	.word	0x240000ec
 800c178:	240000e8 	.word	0x240000e8
 800c17c:	24000150 	.word	0x24000150

0800c180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	3b04      	subs	r3, #4
 800c190:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3b04      	subs	r3, #4
 800c19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f023 0201 	bic.w	r2, r3, #1
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3b04      	subs	r3, #4
 800c1ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1b0:	4a0c      	ldr	r2, [pc, #48]	; (800c1e4 <pxPortInitialiseStack+0x64>)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3b14      	subs	r3, #20
 800c1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3b04      	subs	r3, #4
 800c1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f06f 0202 	mvn.w	r2, #2
 800c1ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3b20      	subs	r3, #32
 800c1d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3714      	adds	r7, #20
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	0800c1e9 	.word	0x0800c1e9

0800c1e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1f2:	4b12      	ldr	r3, [pc, #72]	; (800c23c <prvTaskExitError+0x54>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fa:	d00a      	beq.n	800c212 <prvTaskExitError+0x2a>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	60fb      	str	r3, [r7, #12]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <prvTaskExitError+0x28>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	60bb      	str	r3, [r7, #8]
}
 800c224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c226:	bf00      	nop
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d0fc      	beq.n	800c228 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	24000008 	.word	0x24000008

0800c240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <pxCurrentTCBConst2>)
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	6808      	ldr	r0, [r1, #0]
 800c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f380 8809 	msr	PSP, r0
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	4770      	bx	lr
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst2>:
 800c260:	24000030 	.word	0x24000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c268:	4808      	ldr	r0, [pc, #32]	; (800c28c <prvPortStartFirstTask+0x24>)
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	f380 8808 	msr	MSP, r0
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8814 	msr	CONTROL, r0
 800c27a:	b662      	cpsie	i
 800c27c:	b661      	cpsie	f
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	df00      	svc	0
 800c288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c28a:	bf00      	nop
 800c28c:	e000ed08 	.word	0xe000ed08

0800c290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c296:	4b46      	ldr	r3, [pc, #280]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a46      	ldr	r2, [pc, #280]	; (800c3b4 <xPortStartScheduler+0x124>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d10a      	bne.n	800c2b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	613b      	str	r3, [r7, #16]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2b6:	4b3e      	ldr	r3, [pc, #248]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a3f      	ldr	r2, [pc, #252]	; (800c3b8 <xPortStartScheduler+0x128>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d10a      	bne.n	800c2d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	60fb      	str	r3, [r7, #12]
}
 800c2d2:	bf00      	nop
 800c2d4:	e7fe      	b.n	800c2d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2d6:	4b39      	ldr	r3, [pc, #228]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c2d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	22ff      	movs	r2, #255	; 0xff
 800c2e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	4b31      	ldr	r3, [pc, #196]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c2fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2fe:	4b31      	ldr	r3, [pc, #196]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c300:	2207      	movs	r2, #7
 800c302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c304:	e009      	b.n	800c31a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c306:	4b2f      	ldr	r3, [pc, #188]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	4a2d      	ldr	r2, [pc, #180]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c30e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c310:	78fb      	ldrb	r3, [r7, #3]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	b2db      	uxtb	r3, r3
 800c318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c31a:	78fb      	ldrb	r3, [r7, #3]
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b80      	cmp	r3, #128	; 0x80
 800c324:	d0ef      	beq.n	800c306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c326:	4b27      	ldr	r3, [pc, #156]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f1c3 0307 	rsb	r3, r3, #7
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d00a      	beq.n	800c348 <xPortStartScheduler+0xb8>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	60bb      	str	r3, [r7, #8]
}
 800c344:	bf00      	nop
 800c346:	e7fe      	b.n	800c346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c348:	4b1e      	ldr	r3, [pc, #120]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	4a1d      	ldr	r2, [pc, #116]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c352:	4b1c      	ldr	r3, [pc, #112]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c35a:	4a1a      	ldr	r2, [pc, #104]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c35c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	b2da      	uxtb	r2, r3
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c366:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a17      	ldr	r2, [pc, #92]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c36c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c372:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a14      	ldr	r2, [pc, #80]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c37c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c37e:	f000 f8dd 	bl	800c53c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c382:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <xPortStartScheduler+0x13c>)
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c388:	f000 f8fc 	bl	800c584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c38c:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <xPortStartScheduler+0x140>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a0f      	ldr	r2, [pc, #60]	; (800c3d0 <xPortStartScheduler+0x140>)
 800c392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c398:	f7ff ff66 	bl	800c268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c39c:	f7ff fa92 	bl	800b8c4 <vTaskSwitchContext>
	prvTaskExitError();
 800c3a0:	f7ff ff22 	bl	800c1e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	e000ed00 	.word	0xe000ed00
 800c3b4:	410fc271 	.word	0x410fc271
 800c3b8:	410fc270 	.word	0x410fc270
 800c3bc:	e000e400 	.word	0xe000e400
 800c3c0:	2400015c 	.word	0x2400015c
 800c3c4:	24000160 	.word	0x24000160
 800c3c8:	e000ed20 	.word	0xe000ed20
 800c3cc:	24000008 	.word	0x24000008
 800c3d0:	e000ef34 	.word	0xe000ef34

0800c3d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	607b      	str	r3, [r7, #4]
}
 800c3ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3ee:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <vPortEnterCritical+0x58>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	4a0d      	ldr	r2, [pc, #52]	; (800c42c <vPortEnterCritical+0x58>)
 800c3f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3f8:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <vPortEnterCritical+0x58>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d10f      	bne.n	800c420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <vPortEnterCritical+0x5c>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00a      	beq.n	800c420 <vPortEnterCritical+0x4c>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	603b      	str	r3, [r7, #0]
}
 800c41c:	bf00      	nop
 800c41e:	e7fe      	b.n	800c41e <vPortEnterCritical+0x4a>
	}
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	24000008 	.word	0x24000008
 800c430:	e000ed04 	.word	0xe000ed04

0800c434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c43a:	4b12      	ldr	r3, [pc, #72]	; (800c484 <vPortExitCritical+0x50>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10a      	bne.n	800c458 <vPortExitCritical+0x24>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	607b      	str	r3, [r7, #4]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c458:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <vPortExitCritical+0x50>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	4a09      	ldr	r2, [pc, #36]	; (800c484 <vPortExitCritical+0x50>)
 800c460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <vPortExitCritical+0x50>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <vPortExitCritical+0x42>
 800c46a:	2300      	movs	r3, #0
 800c46c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	f383 8811 	msr	BASEPRI, r3
}
 800c474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c476:	bf00      	nop
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	24000008 	.word	0x24000008
	...

0800c490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c490:	f3ef 8009 	mrs	r0, PSP
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <pxCurrentTCBConst>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	f01e 0f10 	tst.w	lr, #16
 800c4a0:	bf08      	it	eq
 800c4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4aa:	6010      	str	r0, [r2, #0]
 800c4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4b4:	f380 8811 	msr	BASEPRI, r0
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f7ff fa00 	bl	800b8c4 <vTaskSwitchContext>
 800c4c4:	f04f 0000 	mov.w	r0, #0
 800c4c8:	f380 8811 	msr	BASEPRI, r0
 800c4cc:	bc09      	pop	{r0, r3}
 800c4ce:	6819      	ldr	r1, [r3, #0]
 800c4d0:	6808      	ldr	r0, [r1, #0]
 800c4d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d6:	f01e 0f10 	tst.w	lr, #16
 800c4da:	bf08      	it	eq
 800c4dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4e0:	f380 8809 	msr	PSP, r0
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w

0800c4f0 <pxCurrentTCBConst>:
 800c4f0:	24000030 	.word	0x24000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop

0800c4f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c512:	f7ff f91f 	bl	800b754 <xTaskIncrementTick>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d003      	beq.n	800c524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <SysTick_Handler+0x40>)
 800c51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	2300      	movs	r3, #0
 800c526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f383 8811 	msr	BASEPRI, r3
}
 800c52e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	e000ed04 	.word	0xe000ed04

0800c53c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c540:	4b0b      	ldr	r3, [pc, #44]	; (800c570 <vPortSetupTimerInterrupt+0x34>)
 800c542:	2200      	movs	r2, #0
 800c544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c546:	4b0b      	ldr	r3, [pc, #44]	; (800c574 <vPortSetupTimerInterrupt+0x38>)
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c54c:	4b0a      	ldr	r3, [pc, #40]	; (800c578 <vPortSetupTimerInterrupt+0x3c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a0a      	ldr	r2, [pc, #40]	; (800c57c <vPortSetupTimerInterrupt+0x40>)
 800c552:	fba2 2303 	umull	r2, r3, r2, r3
 800c556:	099b      	lsrs	r3, r3, #6
 800c558:	4a09      	ldr	r2, [pc, #36]	; (800c580 <vPortSetupTimerInterrupt+0x44>)
 800c55a:	3b01      	subs	r3, #1
 800c55c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c55e:	4b04      	ldr	r3, [pc, #16]	; (800c570 <vPortSetupTimerInterrupt+0x34>)
 800c560:	2207      	movs	r2, #7
 800c562:	601a      	str	r2, [r3, #0]
}
 800c564:	bf00      	nop
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	e000e010 	.word	0xe000e010
 800c574:	e000e018 	.word	0xe000e018
 800c578:	2400000c 	.word	0x2400000c
 800c57c:	10624dd3 	.word	0x10624dd3
 800c580:	e000e014 	.word	0xe000e014

0800c584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c594 <vPortEnableVFP+0x10>
 800c588:	6801      	ldr	r1, [r0, #0]
 800c58a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c58e:	6001      	str	r1, [r0, #0]
 800c590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c592:	bf00      	nop
 800c594:	e000ed88 	.word	0xe000ed88

0800c598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c59e:	f3ef 8305 	mrs	r3, IPSR
 800c5a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2b0f      	cmp	r3, #15
 800c5a8:	d914      	bls.n	800c5d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5aa:	4a17      	ldr	r2, [pc, #92]	; (800c608 <vPortValidateInterruptPriority+0x70>)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5b4:	4b15      	ldr	r3, [pc, #84]	; (800c60c <vPortValidateInterruptPriority+0x74>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	7afa      	ldrb	r2, [r7, #11]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d20a      	bcs.n	800c5d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	607b      	str	r3, [r7, #4]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5d4:	4b0e      	ldr	r3, [pc, #56]	; (800c610 <vPortValidateInterruptPriority+0x78>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c5dc:	4b0d      	ldr	r3, [pc, #52]	; (800c614 <vPortValidateInterruptPriority+0x7c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d90a      	bls.n	800c5fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	603b      	str	r3, [r7, #0]
}
 800c5f6:	bf00      	nop
 800c5f8:	e7fe      	b.n	800c5f8 <vPortValidateInterruptPriority+0x60>
	}
 800c5fa:	bf00      	nop
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	e000e3f0 	.word	0xe000e3f0
 800c60c:	2400015c 	.word	0x2400015c
 800c610:	e000ed0c 	.word	0xe000ed0c
 800c614:	24000160 	.word	0x24000160

0800c618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b08a      	sub	sp, #40	; 0x28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c620:	2300      	movs	r3, #0
 800c622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c624:	f7fe ffec 	bl	800b600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c628:	4b5b      	ldr	r3, [pc, #364]	; (800c798 <pvPortMalloc+0x180>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c630:	f000 f920 	bl	800c874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c634:	4b59      	ldr	r3, [pc, #356]	; (800c79c <pvPortMalloc+0x184>)
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4013      	ands	r3, r2
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f040 8093 	bne.w	800c768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d01d      	beq.n	800c684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c648:	2208      	movs	r2, #8
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4413      	add	r3, r2
 800c64e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f003 0307 	and.w	r3, r3, #7
 800c656:	2b00      	cmp	r3, #0
 800c658:	d014      	beq.n	800c684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f023 0307 	bic.w	r3, r3, #7
 800c660:	3308      	adds	r3, #8
 800c662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f003 0307 	and.w	r3, r3, #7
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00a      	beq.n	800c684 <pvPortMalloc+0x6c>
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	617b      	str	r3, [r7, #20]
}
 800c680:	bf00      	nop
 800c682:	e7fe      	b.n	800c682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d06e      	beq.n	800c768 <pvPortMalloc+0x150>
 800c68a:	4b45      	ldr	r3, [pc, #276]	; (800c7a0 <pvPortMalloc+0x188>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	429a      	cmp	r2, r3
 800c692:	d869      	bhi.n	800c768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c694:	4b43      	ldr	r3, [pc, #268]	; (800c7a4 <pvPortMalloc+0x18c>)
 800c696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c698:	4b42      	ldr	r3, [pc, #264]	; (800c7a4 <pvPortMalloc+0x18c>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c69e:	e004      	b.n	800c6aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d903      	bls.n	800c6bc <pvPortMalloc+0xa4>
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1f1      	bne.n	800c6a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6bc:	4b36      	ldr	r3, [pc, #216]	; (800c798 <pvPortMalloc+0x180>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d050      	beq.n	800c768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2208      	movs	r2, #8
 800c6cc:	4413      	add	r3, r2
 800c6ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d91f      	bls.n	800c728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	f003 0307 	and.w	r3, r3, #7
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00a      	beq.n	800c710 <pvPortMalloc+0xf8>
	__asm volatile
 800c6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	613b      	str	r3, [r7, #16]
}
 800c70c:	bf00      	nop
 800c70e:	e7fe      	b.n	800c70e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	1ad2      	subs	r2, r2, r3
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c722:	69b8      	ldr	r0, [r7, #24]
 800c724:	f000 f908 	bl	800c938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c728:	4b1d      	ldr	r3, [pc, #116]	; (800c7a0 <pvPortMalloc+0x188>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	4a1b      	ldr	r2, [pc, #108]	; (800c7a0 <pvPortMalloc+0x188>)
 800c734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c736:	4b1a      	ldr	r3, [pc, #104]	; (800c7a0 <pvPortMalloc+0x188>)
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	4b1b      	ldr	r3, [pc, #108]	; (800c7a8 <pvPortMalloc+0x190>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d203      	bcs.n	800c74a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c742:	4b17      	ldr	r3, [pc, #92]	; (800c7a0 <pvPortMalloc+0x188>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a18      	ldr	r2, [pc, #96]	; (800c7a8 <pvPortMalloc+0x190>)
 800c748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	4b13      	ldr	r3, [pc, #76]	; (800c79c <pvPortMalloc+0x184>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	431a      	orrs	r2, r3
 800c754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	2200      	movs	r2, #0
 800c75c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c75e:	4b13      	ldr	r3, [pc, #76]	; (800c7ac <pvPortMalloc+0x194>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3301      	adds	r3, #1
 800c764:	4a11      	ldr	r2, [pc, #68]	; (800c7ac <pvPortMalloc+0x194>)
 800c766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c768:	f7fe ff58 	bl	800b61c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	f003 0307 	and.w	r3, r3, #7
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <pvPortMalloc+0x174>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	60fb      	str	r3, [r7, #12]
}
 800c788:	bf00      	nop
 800c78a:	e7fe      	b.n	800c78a <pvPortMalloc+0x172>
	return pvReturn;
 800c78c:	69fb      	ldr	r3, [r7, #28]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3728      	adds	r7, #40	; 0x28
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	24003d6c 	.word	0x24003d6c
 800c79c:	24003d80 	.word	0x24003d80
 800c7a0:	24003d70 	.word	0x24003d70
 800c7a4:	24003d64 	.word	0x24003d64
 800c7a8:	24003d74 	.word	0x24003d74
 800c7ac:	24003d78 	.word	0x24003d78

0800c7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d04d      	beq.n	800c85e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7c2:	2308      	movs	r3, #8
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	697a      	ldr	r2, [r7, #20]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	4b24      	ldr	r3, [pc, #144]	; (800c868 <vPortFree+0xb8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4013      	ands	r3, r2
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10a      	bne.n	800c7f4 <vPortFree+0x44>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	60fb      	str	r3, [r7, #12]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00a      	beq.n	800c812 <vPortFree+0x62>
	__asm volatile
 800c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	60bb      	str	r3, [r7, #8]
}
 800c80e:	bf00      	nop
 800c810:	e7fe      	b.n	800c810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	4b14      	ldr	r3, [pc, #80]	; (800c868 <vPortFree+0xb8>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4013      	ands	r3, r2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d01e      	beq.n	800c85e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d11a      	bne.n	800c85e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	4b0e      	ldr	r3, [pc, #56]	; (800c868 <vPortFree+0xb8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	43db      	mvns	r3, r3
 800c832:	401a      	ands	r2, r3
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c838:	f7fe fee2 	bl	800b600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <vPortFree+0xbc>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4413      	add	r3, r2
 800c846:	4a09      	ldr	r2, [pc, #36]	; (800c86c <vPortFree+0xbc>)
 800c848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c84a:	6938      	ldr	r0, [r7, #16]
 800c84c:	f000 f874 	bl	800c938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c850:	4b07      	ldr	r3, [pc, #28]	; (800c870 <vPortFree+0xc0>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3301      	adds	r3, #1
 800c856:	4a06      	ldr	r2, [pc, #24]	; (800c870 <vPortFree+0xc0>)
 800c858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c85a:	f7fe fedf 	bl	800b61c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c85e:	bf00      	nop
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	24003d80 	.word	0x24003d80
 800c86c:	24003d70 	.word	0x24003d70
 800c870:	24003d7c 	.word	0x24003d7c

0800c874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c87a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c87e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c880:	4b27      	ldr	r3, [pc, #156]	; (800c920 <prvHeapInit+0xac>)
 800c882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00c      	beq.n	800c8a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3307      	adds	r3, #7
 800c892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f023 0307 	bic.w	r3, r3, #7
 800c89a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	4a1f      	ldr	r2, [pc, #124]	; (800c920 <prvHeapInit+0xac>)
 800c8a4:	4413      	add	r3, r2
 800c8a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8ac:	4a1d      	ldr	r2, [pc, #116]	; (800c924 <prvHeapInit+0xb0>)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8b2:	4b1c      	ldr	r3, [pc, #112]	; (800c924 <prvHeapInit+0xb0>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	4413      	add	r3, r2
 800c8be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8c0:	2208      	movs	r2, #8
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	1a9b      	subs	r3, r3, r2
 800c8c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f023 0307 	bic.w	r3, r3, #7
 800c8ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	4a15      	ldr	r2, [pc, #84]	; (800c928 <prvHeapInit+0xb4>)
 800c8d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8d6:	4b14      	ldr	r3, [pc, #80]	; (800c928 <prvHeapInit+0xb4>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8de:	4b12      	ldr	r3, [pc, #72]	; (800c928 <prvHeapInit+0xb4>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	1ad2      	subs	r2, r2, r3
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8f4:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <prvHeapInit+0xb4>)
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4a0a      	ldr	r2, [pc, #40]	; (800c92c <prvHeapInit+0xb8>)
 800c902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	4a09      	ldr	r2, [pc, #36]	; (800c930 <prvHeapInit+0xbc>)
 800c90a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c90c:	4b09      	ldr	r3, [pc, #36]	; (800c934 <prvHeapInit+0xc0>)
 800c90e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c912:	601a      	str	r2, [r3, #0]
}
 800c914:	bf00      	nop
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr
 800c920:	24000164 	.word	0x24000164
 800c924:	24003d64 	.word	0x24003d64
 800c928:	24003d6c 	.word	0x24003d6c
 800c92c:	24003d74 	.word	0x24003d74
 800c930:	24003d70 	.word	0x24003d70
 800c934:	24003d80 	.word	0x24003d80

0800c938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c940:	4b28      	ldr	r3, [pc, #160]	; (800c9e4 <prvInsertBlockIntoFreeList+0xac>)
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	e002      	b.n	800c94c <prvInsertBlockIntoFreeList+0x14>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	429a      	cmp	r2, r3
 800c954:	d8f7      	bhi.n	800c946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	4413      	add	r3, r2
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	429a      	cmp	r2, r3
 800c966:	d108      	bne.n	800c97a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	441a      	add	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	441a      	add	r2, r3
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d118      	bne.n	800c9c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	4b15      	ldr	r3, [pc, #84]	; (800c9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	d00d      	beq.n	800c9b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	441a      	add	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	e008      	b.n	800c9c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9b6:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	e003      	b.n	800c9c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d002      	beq.n	800c9d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9d6:	bf00      	nop
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	24003d64 	.word	0x24003d64
 800c9e8:	24003d6c 	.word	0x24003d6c

0800c9ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c9f2:	4b21      	ldr	r3, [pc, #132]	; (800ca78 <MX_DMA_Init+0x8c>)
 800c9f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c9f8:	4a1f      	ldr	r2, [pc, #124]	; (800ca78 <MX_DMA_Init+0x8c>)
 800c9fa:	f043 0301 	orr.w	r3, r3, #1
 800c9fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ca02:	4b1d      	ldr	r3, [pc, #116]	; (800ca78 <MX_DMA_Init+0x8c>)
 800ca04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ca08:	f003 0301 	and.w	r3, r3, #1
 800ca0c:	607b      	str	r3, [r7, #4]
 800ca0e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800ca10:	2200      	movs	r2, #0
 800ca12:	2105      	movs	r1, #5
 800ca14:	200b      	movs	r0, #11
 800ca16:	f7f3 feff 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800ca1a:	200b      	movs	r0, #11
 800ca1c:	f7f3 ff16 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800ca20:	2200      	movs	r2, #0
 800ca22:	2105      	movs	r1, #5
 800ca24:	200c      	movs	r0, #12
 800ca26:	f7f3 fef7 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800ca2a:	200c      	movs	r0, #12
 800ca2c:	f7f3 ff0e 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800ca30:	2200      	movs	r2, #0
 800ca32:	2105      	movs	r1, #5
 800ca34:	200d      	movs	r0, #13
 800ca36:	f7f3 feef 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800ca3a:	200d      	movs	r0, #13
 800ca3c:	f7f3 ff06 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800ca40:	2200      	movs	r2, #0
 800ca42:	2105      	movs	r1, #5
 800ca44:	200e      	movs	r0, #14
 800ca46:	f7f3 fee7 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800ca4a:	200e      	movs	r0, #14
 800ca4c:	f7f3 fefe 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800ca50:	2200      	movs	r2, #0
 800ca52:	2105      	movs	r1, #5
 800ca54:	200f      	movs	r0, #15
 800ca56:	f7f3 fedf 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800ca5a:	200f      	movs	r0, #15
 800ca5c:	f7f3 fef6 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800ca60:	2200      	movs	r2, #0
 800ca62:	2105      	movs	r1, #5
 800ca64:	2010      	movs	r0, #16
 800ca66:	f7f3 fed7 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800ca6a:	2010      	movs	r0, #16
 800ca6c:	f7f3 feee 	bl	800084c <HAL_NVIC_EnableIRQ>

}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	58024400 	.word	0x58024400

0800ca7c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4a07      	ldr	r2, [pc, #28]	; (800caa8 <vApplicationGetIdleTaskMemory+0x2c>)
 800ca8c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	4a06      	ldr	r2, [pc, #24]	; (800caac <vApplicationGetIdleTaskMemory+0x30>)
 800ca92:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2280      	movs	r2, #128	; 0x80
 800ca98:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800ca9a:	bf00      	nop
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	24003d84 	.word	0x24003d84
 800caac:	24003dd8 	.word	0x24003dd8

0800cab0 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 800cab0:	b5b0      	push	{r4, r5, r7, lr}
 800cab2:	b0be      	sub	sp, #248	; 0xf8
 800cab4:	af00      	add	r7, sp, #0

	/* USER CODE END Init */

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	osMutexStaticDef(MAIN_UART_mutex, &MAIN_UART_mutexControlBlock);
 800cab6:	2300      	movs	r3, #0
 800cab8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cabc:	4b6c      	ldr	r3, [pc, #432]	; (800cc70 <MX_FREERTOS_Init+0x1c0>)
 800cabe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	MAIN_UART_mutexHandle = osMutexCreate(osMutex(MAIN_UART_mutex));
 800cac2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fd fc25 	bl	800a316 <osMutexCreate>
 800cacc:	4603      	mov	r3, r0
 800cace:	4a69      	ldr	r2, [pc, #420]	; (800cc74 <MX_FREERTOS_Init+0x1c4>)
 800cad0:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of WT931_DONE_sem */
	osSemaphoreStaticDef(WT931_DONE_sem, &WT931_DONE_semControlBlock);
 800cad2:	2300      	movs	r3, #0
 800cad4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cad8:	4b67      	ldr	r3, [pc, #412]	; (800cc78 <MX_FREERTOS_Init+0x1c8>)
 800cada:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	WT931_DONE_semHandle = osSemaphoreCreate(osSemaphore(WT931_DONE_sem), 1);
 800cade:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800cae2:	2101      	movs	r1, #1
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fd fc2e 	bl	800a346 <osSemaphoreCreate>
 800caea:	4603      	mov	r3, r0
 800caec:	4a63      	ldr	r2, [pc, #396]	; (800cc7c <MX_FREERTOS_Init+0x1cc>)
 800caee:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39_Done_sem */
	osSemaphoreStaticDef(GY39_Done_sem, &GY39_Done_semControlBlock);
 800caf0:	2300      	movs	r3, #0
 800caf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800caf6:	4b62      	ldr	r3, [pc, #392]	; (800cc80 <MX_FREERTOS_Init+0x1d0>)
 800caf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	GY39_Done_semHandle = osSemaphoreCreate(osSemaphore(GY39_Done_sem), 1);
 800cafc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800cb00:	2101      	movs	r1, #1
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fd fc1f 	bl	800a346 <osSemaphoreCreate>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	4a5e      	ldr	r2, [pc, #376]	; (800cc84 <MX_FREERTOS_Init+0x1d4>)
 800cb0c:	6013      	str	r3, [r2, #0]

	/* definition and creation of CMD_DONE_sem */
	osSemaphoreStaticDef(CMD_DONE_sem, &CMD_DONE_semControlBlock);
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb14:	4b5c      	ldr	r3, [pc, #368]	; (800cc88 <MX_FREERTOS_Init+0x1d8>)
 800cb16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	CMD_DONE_semHandle = osSemaphoreCreate(osSemaphore(CMD_DONE_sem), 1);
 800cb1a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800cb1e:	2101      	movs	r1, #1
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fd fc10 	bl	800a346 <osSemaphoreCreate>
 800cb26:	4603      	mov	r3, r0
 800cb28:	4a58      	ldr	r2, [pc, #352]	; (800cc8c <MX_FREERTOS_Init+0x1dc>)
 800cb2a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of WT931_Queue */
	osMessageQStaticDef(WT931_Queue, 2, IMUData_t, WT931_QueueBuffer,
 800cb2c:	4b58      	ldr	r3, [pc, #352]	; (800cc90 <MX_FREERTOS_Init+0x1e0>)
 800cb2e:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800cb32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&WT931_QueueControlBlock);
	WT931_QueueHandle = osMessageCreate(osMessageQ(WT931_Queue), NULL);
 800cb38:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fd fc33 	bl	800a3aa <osMessageCreate>
 800cb44:	4603      	mov	r3, r0
 800cb46:	4a53      	ldr	r2, [pc, #332]	; (800cc94 <MX_FREERTOS_Init+0x1e4>)
 800cb48:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39_Queue */
	osMessageQStaticDef(GY39_Queue, 2, CarbinData_t, GY39_QueueBuffer,
 800cb4a:	4b53      	ldr	r3, [pc, #332]	; (800cc98 <MX_FREERTOS_Init+0x1e8>)
 800cb4c:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 800cb50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&GY39_QueueControlBlock);
	GY39_QueueHandle = osMessageCreate(osMessageQ(GY39_Queue), NULL);
 800cb56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fd fc24 	bl	800a3aa <osMessageCreate>
 800cb62:	4603      	mov	r3, r0
 800cb64:	4a4d      	ldr	r2, [pc, #308]	; (800cc9c <MX_FREERTOS_Init+0x1ec>)
 800cb66:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osMessageQStaticDef(Cmd_Queue, 1, ControlData_t, Cmd_QueueBuffer,
 800cb68:	4b4d      	ldr	r3, [pc, #308]	; (800cca0 <MX_FREERTOS_Init+0x1f0>)
 800cb6a:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800cb6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&Cmd_QueueControlBlock);
	Cmd_QueueHandle = osMessageCreate(osMessageQ(Cmd_Queue), NULL);
 800cb74:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800cb78:	2100      	movs	r1, #0
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fd fc15 	bl	800a3aa <osMessageCreate>
 800cb80:	4603      	mov	r3, r0
 800cb82:	4a48      	ldr	r2, [pc, #288]	; (800cca4 <MX_FREERTOS_Init+0x1f4>)
 800cb84:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Thread_Idle */
	osThreadStaticDef(Thread_Idle, Thread_IdleEntry, osPriorityLow, 0, 512,
 800cb86:	4b48      	ldr	r3, [pc, #288]	; (800cca8 <MX_FREERTOS_Init+0x1f8>)
 800cb88:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800cb8c:	461d      	mov	r5, r3
 800cb8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cb96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			Thread_IdleBuffer, &Thread_IdleControlBlock);
	Thread_IdleHandle = osThreadCreate(osThread(Thread_Idle), NULL);
 800cb9a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800cb9e:	2100      	movs	r1, #0
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7fd fb58 	bl	800a256 <osThreadCreate>
 800cba6:	4603      	mov	r3, r0
 800cba8:	4a40      	ldr	r2, [pc, #256]	; (800ccac <MX_FREERTOS_Init+0x1fc>)
 800cbaa:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_GY39 */
//	osThreadStaticDef(Thread_GY39, Thread_GY39Entry, osPriorityNormal, 0, 512,
	osThreadStaticDef(Thread_GY39, Thread_GY39Entry, osPriorityBelowNormal, 0,
 800cbac:	4b40      	ldr	r3, [pc, #256]	; (800ccb0 <MX_FREERTOS_Init+0x200>)
 800cbae:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800cbb2:	461d      	mov	r5, r3
 800cbb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cbb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cbb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cbbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_GY39Buffer, &Thread_GY39ControlBlock);
	Thread_GY39Handle = osThreadCreate(osThread(Thread_GY39), NULL);
 800cbc0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fd fb45 	bl	800a256 <osThreadCreate>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	4a39      	ldr	r2, [pc, #228]	; (800ccb4 <MX_FREERTOS_Init+0x204>)
 800cbd0:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_WT931 */
//	osThreadStaticDef(Thread_WT931, Thread_WT931Entry, osPriorityNormal, 0, 512,
	osThreadStaticDef(Thread_WT931, Thread_WT931Entry, osPriorityBelowNormal, 0,
 800cbd2:	4b39      	ldr	r3, [pc, #228]	; (800ccb8 <MX_FREERTOS_Init+0x208>)
 800cbd4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800cbd8:	461d      	mov	r5, r3
 800cbda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cbdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cbde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cbe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_WT931Buffer, &Thread_WT931ControlBlock);
	Thread_WT931Handle = osThreadCreate(osThread(Thread_WT931), NULL);
 800cbe6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cbea:	2100      	movs	r1, #0
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fd fb32 	bl	800a256 <osThreadCreate>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	4a31      	ldr	r2, [pc, #196]	; (800ccbc <MX_FREERTOS_Init+0x20c>)
 800cbf6:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_Control */
	osThreadStaticDef(Thread_Control, Thread_ControlEntry, osPriorityNormal, 0,
 800cbf8:	4b31      	ldr	r3, [pc, #196]	; (800ccc0 <MX_FREERTOS_Init+0x210>)
 800cbfa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800cbfe:	461d      	mov	r5, r3
 800cc00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cc08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_ControlBuffer, &Thread_ControlControlBlock);
	Thread_ControlHandle = osThreadCreate(osThread(Thread_Control), NULL);
 800cc0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cc10:	2100      	movs	r1, #0
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fd fb1f 	bl	800a256 <osThreadCreate>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	4a2a      	ldr	r2, [pc, #168]	; (800ccc4 <MX_FREERTOS_Init+0x214>)
 800cc1c:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_Sensor */
	osThreadStaticDef(Thread_Sensor, Thread_SensorEntry, osPriorityNormal, 0,
 800cc1e:	4b2a      	ldr	r3, [pc, #168]	; (800ccc8 <MX_FREERTOS_Init+0x218>)
 800cc20:	f107 041c 	add.w	r4, r7, #28
 800cc24:	461d      	mov	r5, r3
 800cc26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cc2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_SensorBuffer, &Thread_SensorControlBlock);
	Thread_SensorHandle = osThreadCreate(osThread(Thread_Sensor), NULL);
 800cc32:	f107 031c 	add.w	r3, r7, #28
 800cc36:	2100      	movs	r1, #0
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fd fb0c 	bl	800a256 <osThreadCreate>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	4a22      	ldr	r2, [pc, #136]	; (800cccc <MX_FREERTOS_Init+0x21c>)
 800cc42:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	osThreadStaticDef(Thread_RecvCmd, Thread_RecvCmdEntry, osPriorityNormal, 0,
 800cc44:	4b22      	ldr	r3, [pc, #136]	; (800ccd0 <MX_FREERTOS_Init+0x220>)
 800cc46:	463c      	mov	r4, r7
 800cc48:	461d      	mov	r5, r3
 800cc4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cc52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_RecvCmdBuffer, &Thread_RecvCmdControlBlock);
	Thread_RecvCmdHandle = osThreadCreate(osThread(Thread_RecvCmd), NULL);
 800cc56:	463b      	mov	r3, r7
 800cc58:	2100      	movs	r1, #0
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fd fafb 	bl	800a256 <osThreadCreate>
 800cc60:	4603      	mov	r3, r0
 800cc62:	4a1c      	ldr	r2, [pc, #112]	; (800ccd4 <MX_FREERTOS_Init+0x224>)
 800cc64:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_THREADS */

}
 800cc66:	bf00      	nop
 800cc68:	37f8      	adds	r7, #248	; 0xf8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	24004100 	.word	0x24004100
 800cc74:	24004090 	.word	0x24004090
 800cc78:	24005274 	.word	0x24005274
 800cc7c:	240041f0 	.word	0x240041f0
 800cc80:	240052bc 	.word	0x240052bc
 800cc84:	24005570 	.word	0x24005570
 800cc88:	24005dc8 	.word	0x24005dc8
 800cc8c:	24005390 	.word	0x24005390
 800cc90:	0800f670 	.word	0x0800f670
 800cc94:	24005218 	.word	0x24005218
 800cc98:	0800f680 	.word	0x0800f680
 800cc9c:	2400521c 	.word	0x2400521c
 800cca0:	0800f690 	.word	0x0800f690
 800cca4:	24005524 	.word	0x24005524
 800cca8:	0800f6a0 	.word	0x0800f6a0
 800ccac:	24005e10 	.word	0x24005e10
 800ccb0:	0800f6bc 	.word	0x0800f6bc
 800ccb4:	24006614 	.word	0x24006614
 800ccb8:	0800f6d8 	.word	0x0800f6d8
 800ccbc:	24005338 	.word	0x24005338
 800ccc0:	0800f6f4 	.word	0x0800f6f4
 800ccc4:	24006e18 	.word	0x24006e18
 800ccc8:	0800f710 	.word	0x0800f710
 800cccc:	24004214 	.word	0x24004214
 800ccd0:	0800f72c 	.word	0x0800f72c
 800ccd4:	24005334 	.word	0x24005334

0800ccd8 <Thread_IdleEntry>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_IdleEntry */
void Thread_IdleEntry(void const *argument)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Thread_IdleEntry */
	/* Infinite loop */
	for (;;)
	{
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		osDelay(1000);
 800cce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cce4:	f7fd fb03 	bl	800a2ee <osDelay>
 800cce8:	e7fa      	b.n	800cce0 <Thread_IdleEntry+0x8>
	...

0800ccec <Thread_GY39Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_GY39Entry */
void Thread_GY39Entry(void const *argument)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08e      	sub	sp, #56	; 0x38
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN Thread_GY39Entry */
	uint8_t GY39_TxBuffer[TEMPER_UART_TXLen] =
 800ccf4:	4b30      	ldr	r3, [pc, #192]	; (800cdb8 <Thread_GY39Entry+0xcc>)
 800ccf6:	881b      	ldrh	r3, [r3, #0]
 800ccf8:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	{ 0 };
	uint8_t GY39_RxBuffer[TEMPER_UART_RXLen] =
 800cd00:	2300      	movs	r3, #0
 800cd02:	627b      	str	r3, [r7, #36]	; 0x24
 800cd04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	605a      	str	r2, [r3, #4]
 800cd0e:	f8c3 2007 	str.w	r2, [r3, #7]
	{ 0 };
	CarbinData_t gy39_data;

	InitGY39(GY39_TxBuffer);
 800cd12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fd f8e5 	bl	8009ee6 <InitGY39>
	HAL_UART_Transmit_DMA(&TEMPER_UART, GY39_TxBuffer, sizeof(GY39_TxBuffer));
 800cd1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd20:	2203      	movs	r2, #3
 800cd22:	4619      	mov	r1, r3
 800cd24:	4825      	ldr	r0, [pc, #148]	; (800cdbc <Thread_GY39Entry+0xd0>)
 800cd26:	f7fa fcc7 	bl	80076b8 <HAL_UART_Transmit_DMA>

	__HAL_UART_ENABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 800cd2a:	4b24      	ldr	r3, [pc, #144]	; (800cdbc <Thread_GY39Entry+0xd0>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	4b22      	ldr	r3, [pc, #136]	; (800cdbc <Thread_GY39Entry+0xd0>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f042 0210 	orr.w	r2, r2, #16
 800cd38:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&TEMPER_UART, GY39_RxBuffer, sizeof(GY39_RxBuffer));
 800cd3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd3e:	220f      	movs	r2, #15
 800cd40:	4619      	mov	r1, r3
 800cd42:	481e      	ldr	r0, [pc, #120]	; (800cdbc <Thread_GY39Entry+0xd0>)
 800cd44:	f7fa fd4a 	bl	80077dc <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(GY39_Done_semHandle, 0) == pdTRUE)
 800cd48:	4b1d      	ldr	r3, [pc, #116]	; (800cdc0 <Thread_GY39Entry+0xd4>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fd fffa 	bl	800ad48 <xQueueSemaphoreTake>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d12a      	bne.n	800cdb0 <Thread_GY39Entry+0xc4>
		{
			gy39_data = ReceiveGY39(GY39_RxBuffer);
 800cd5a:	463b      	mov	r3, r7
 800cd5c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800cd60:	4611      	mov	r1, r2
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fd f8d4 	bl	8009f10 <ReceiveGY39>
 800cd68:	f107 0318 	add.w	r3, r7, #24
 800cd6c:	463a      	mov	r2, r7
 800cd6e:	ca07      	ldmia	r2, {r0, r1, r2}
 800cd70:	e883 0007 	stmia.w	r3, {r0, r1, r2}

//			printf("t:%d, %d, %d\r\n", gy39_data.CarbinBarometric,
//					gy39_data.CarbinHumidity, gy39_data.CarbinTemperature);
			xQueueSendToFront(GY39_QueueHandle, (void* )&gy39_data, 0);
 800cd74:	4b13      	ldr	r3, [pc, #76]	; (800cdc4 <Thread_GY39Entry+0xd8>)
 800cd76:	6818      	ldr	r0, [r3, #0]
 800cd78:	f107 0118 	add.w	r1, r7, #24
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f7fd fd76 	bl	800a870 <xQueueGenericSend>

			memset(&GY39_RxBuffer, 0, sizeof(GY39_RxBuffer));
 800cd84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd88:	220f      	movs	r2, #15
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f002 fc2b 	bl	800f5e8 <memset>
			__HAL_UART_ENABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 800cd92:	4b0a      	ldr	r3, [pc, #40]	; (800cdbc <Thread_GY39Entry+0xd0>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	4b08      	ldr	r3, [pc, #32]	; (800cdbc <Thread_GY39Entry+0xd0>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f042 0210 	orr.w	r2, r2, #16
 800cda0:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&TEMPER_UART, GY39_RxBuffer,
 800cda2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cda6:	220f      	movs	r2, #15
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4804      	ldr	r0, [pc, #16]	; (800cdbc <Thread_GY39Entry+0xd0>)
 800cdac:	f7fa fd16 	bl	80077dc <HAL_UART_Receive_DMA>
					sizeof(GY39_RxBuffer));
		}

		osDelay(100);
 800cdb0:	2064      	movs	r0, #100	; 0x64
 800cdb2:	f7fd fa9c 	bl	800a2ee <osDelay>
		if (xSemaphoreTake(GY39_Done_semHandle, 0) == pdTRUE)
 800cdb6:	e7c7      	b.n	800cd48 <Thread_GY39Entry+0x5c>
 800cdb8:	0800f748 	.word	0x0800f748
 800cdbc:	240072c0 	.word	0x240072c0
 800cdc0:	24005570 	.word	0x24005570
 800cdc4:	2400521c 	.word	0x2400521c

0800cdc8 <Thread_WT931Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_WT931Entry */
void Thread_WT931Entry(void const *argument)
{
 800cdc8:	b5b0      	push	{r4, r5, r7, lr}
 800cdca:	b0a4      	sub	sp, #144	; 0x90
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	61f8      	str	r0, [r7, #28]
	/* USER CODE BEGIN Thread_WT931Entry */
	uint8_t WT931_RxBuffer[2 * AXIS_UART_RXLen] =
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cdd8:	2254      	movs	r2, #84	; 0x54
 800cdda:	2100      	movs	r1, #0
 800cddc:	4618      	mov	r0, r3
 800cdde:	f002 fc03 	bl	800f5e8 <memset>
	{ 0 };
	IMUData_t wt931_data;

	__HAL_UART_ENABLE_IT(&AXIS_UART, UART_IT_IDLE);
 800cde2:	4b26      	ldr	r3, [pc, #152]	; (800ce7c <Thread_WT931Entry+0xb4>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	4b24      	ldr	r3, [pc, #144]	; (800ce7c <Thread_WT931Entry+0xb4>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f042 0210 	orr.w	r2, r2, #16
 800cdf0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&AXIS_UART, WT931_RxBuffer, sizeof(WT931_RxBuffer));
 800cdf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cdf6:	2258      	movs	r2, #88	; 0x58
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	4820      	ldr	r0, [pc, #128]	; (800ce7c <Thread_WT931Entry+0xb4>)
 800cdfc:	f7fa fcee 	bl	80077dc <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(WT931_DONE_semHandle, 0) == pdTRUE)
 800ce00:	4b1f      	ldr	r3, [pc, #124]	; (800ce80 <Thread_WT931Entry+0xb8>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2100      	movs	r1, #0
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fd ff9e 	bl	800ad48 <xQueueSemaphoreTake>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d12f      	bne.n	800ce72 <Thread_WT931Entry+0xaa>
		{
			wt931_data = ReceiveWT931(WT931_RxBuffer);
 800ce12:	463b      	mov	r3, r7
 800ce14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ce18:	4611      	mov	r1, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fd f8c8 	bl	8009fb0 <ReceiveWT931>
 800ce20:	f107 0420 	add.w	r4, r7, #32
 800ce24:	463d      	mov	r5, r7
 800ce26:	6828      	ldr	r0, [r5, #0]
 800ce28:	6869      	ldr	r1, [r5, #4]
 800ce2a:	68aa      	ldr	r2, [r5, #8]
 800ce2c:	68eb      	ldr	r3, [r5, #12]
 800ce2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce30:	6928      	ldr	r0, [r5, #16]
 800ce32:	6969      	ldr	r1, [r5, #20]
 800ce34:	c403      	stmia	r4!, {r0, r1}

//			printf("a:%d, %d, %d\r\n", wt931_data.EulerAngle[0],
//					wt931_data.EulerAngle[1], wt931_data.EulerAngle[2]);
			xQueueSendToFront(WT931_QueueHandle, (void* )&wt931_data, 0);
 800ce36:	4b13      	ldr	r3, [pc, #76]	; (800ce84 <Thread_WT931Entry+0xbc>)
 800ce38:	6818      	ldr	r0, [r3, #0]
 800ce3a:	f107 0120 	add.w	r1, r7, #32
 800ce3e:	2301      	movs	r3, #1
 800ce40:	2200      	movs	r2, #0
 800ce42:	f7fd fd15 	bl	800a870 <xQueueGenericSend>
//			xQueueSendToFront(Attitude_QueueHandle, (void* )&wt931_data, 0);

			memset(&WT931_RxBuffer, 0, sizeof(WT931_RxBuffer));
 800ce46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ce4a:	2258      	movs	r2, #88	; 0x58
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f002 fbca 	bl	800f5e8 <memset>
			__HAL_UART_ENABLE_IT(&AXIS_UART, UART_IT_IDLE);
 800ce54:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <Thread_WT931Entry+0xb4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	4b08      	ldr	r3, [pc, #32]	; (800ce7c <Thread_WT931Entry+0xb4>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f042 0210 	orr.w	r2, r2, #16
 800ce62:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&AXIS_UART, WT931_RxBuffer,
 800ce64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ce68:	2258      	movs	r2, #88	; 0x58
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4803      	ldr	r0, [pc, #12]	; (800ce7c <Thread_WT931Entry+0xb4>)
 800ce6e:	f7fa fcb5 	bl	80077dc <HAL_UART_Receive_DMA>
					sizeof(WT931_RxBuffer));
		}
		osDelay(10);
 800ce72:	200a      	movs	r0, #10
 800ce74:	f7fd fa3b 	bl	800a2ee <osDelay>
		if (xSemaphoreTake(WT931_DONE_semHandle, 0) == pdTRUE)
 800ce78:	e7c2      	b.n	800ce00 <Thread_WT931Entry+0x38>
 800ce7a:	bf00      	nop
 800ce7c:	24007458 	.word	0x24007458
 800ce80:	240041f0 	.word	0x240041f0
 800ce84:	24005218 	.word	0x24005218

0800ce88 <Thread_ControlEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_ControlEntry */
void Thread_ControlEntry(void const *argument)
{
 800ce88:	b5b0      	push	{r4, r5, r7, lr}
 800ce8a:	b088      	sub	sp, #32
 800ce8c:	af06      	add	r7, sp, #24
 800ce8e:	6078      	str	r0, [r7, #4]
//	int32_t origin_target;

	static vu8 relay_controller;
	static PwmVal_t pwm_controller;

	pwm_controller.ArmServo[0] = (vu32) 1500;
 800ce90:	4b92      	ldr	r3, [pc, #584]	; (800d0dc <Thread_ControlEntry+0x254>)
 800ce92:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ce96:	625a      	str	r2, [r3, #36]	; 0x24
	pwm_controller.ArmServo[1] = (vu32) 1500;
 800ce98:	4b90      	ldr	r3, [pc, #576]	; (800d0dc <Thread_ControlEntry+0x254>)
 800ce9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ce9e:	629a      	str	r2, [r3, #40]	; 0x28
	pwm_controller.ArmServo[2] = (vu32) 1500;
 800cea0:	4b8e      	ldr	r3, [pc, #568]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cea2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cea6:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm_controller.ArmServo[3] = (vu32) 1500;
 800cea8:	4b8c      	ldr	r3, [pc, #560]	; (800d0dc <Thread_ControlEntry+0x254>)
 800ceaa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ceae:	631a      	str	r2, [r3, #48]	; 0x30
	pwm_controller.ArmServo[4] = (vu32) 1500;
 800ceb0:	4b8a      	ldr	r3, [pc, #552]	; (800d0dc <Thread_ControlEntry+0x254>)
 800ceb2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ceb6:	635a      	str	r2, [r3, #52]	; 0x34
	pwm_controller.ArmServo[5] = (vu32) 1500;
 800ceb8:	4b88      	ldr	r3, [pc, #544]	; (800d0dc <Thread_ControlEntry+0x254>)
 800ceba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cebe:	639a      	str	r2, [r3, #56]	; 0x38
	pwm_controller.ConveyServo = (vu32) 1500;
 800cec0:	4b86      	ldr	r3, [pc, #536]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cec2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cec6:	621a      	str	r2, [r3, #32]
	pwm_controller.HorizontalThruster[0] = (vu32) 1500;
 800cec8:	4b84      	ldr	r3, [pc, #528]	; (800d0dc <Thread_ControlEntry+0x254>)
 800ceca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cece:	601a      	str	r2, [r3, #0]
	pwm_controller.HorizontalThruster[1] = (vu32) 1500;
 800ced0:	4b82      	ldr	r3, [pc, #520]	; (800d0dc <Thread_ControlEntry+0x254>)
 800ced2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ced6:	605a      	str	r2, [r3, #4]
	pwm_controller.HorizontalThruster[2] = (vu32) 1500;
 800ced8:	4b80      	ldr	r3, [pc, #512]	; (800d0dc <Thread_ControlEntry+0x254>)
 800ceda:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cede:	609a      	str	r2, [r3, #8]
	pwm_controller.HorizontalThruster[3] = (vu32) 1500;
 800cee0:	4b7e      	ldr	r3, [pc, #504]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cee2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cee6:	60da      	str	r2, [r3, #12]
	pwm_controller.VerticalThruster[0] = (vu32) 1500;
 800cee8:	4b7c      	ldr	r3, [pc, #496]	; (800d0dc <Thread_ControlEntry+0x254>)
 800ceea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ceee:	611a      	str	r2, [r3, #16]
	pwm_controller.VerticalThruster[1] = (vu32) 1500;
 800cef0:	4b7a      	ldr	r3, [pc, #488]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cef2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cef6:	615a      	str	r2, [r3, #20]
	pwm_controller.LightServo = (vu32) 0;
 800cef8:	4b78      	ldr	r3, [pc, #480]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	619a      	str	r2, [r3, #24]
	pwm_controller.PanServo = (vu32) 1500;
 800cefe:	4b77      	ldr	r3, [pc, #476]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cf00:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cf04:	61da      	str	r2, [r3, #28]
	pwm_controller.RestServo = (vu32) 1500;
 800cf06:	4b75      	ldr	r3, [pc, #468]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cf08:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cf0c:	63da      	str	r2, [r3, #60]	; 0x3c
//	self_stable_pid.Kd = 0.1;

	/* Infinite loop */
	for (;;)
	{
		if (xQueueReceive(Cmd_QueueHandle, &control_data, 0) == pdPASS)
 800cf0e:	4b74      	ldr	r3, [pc, #464]	; (800d0e0 <Thread_ControlEntry+0x258>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2200      	movs	r2, #0
 800cf14:	4973      	ldr	r1, [pc, #460]	; (800d0e4 <Thread_ControlEntry+0x25c>)
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fd fe36 	bl	800ab88 <xQueueReceive>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	f040 81a8 	bne.w	800d274 <Thread_ControlEntry+0x3ec>
		{
			//Mode Selection
			//check side-push
			if (control_data.Mode & SIDE_PUSH_CODE)
 800cf24:	4b6f      	ldr	r3, [pc, #444]	; (800d0e4 <Thread_ControlEntry+0x25c>)
 800cf26:	7f1b      	ldrb	r3, [r3, #28]
 800cf28:	f003 0301 	and.w	r3, r3, #1
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d003      	beq.n	800cf38 <Thread_ControlEntry+0xb0>
			{
				IS_SIDEPUSH = SIDEPUSH_MODE; //ROV_TRUE
 800cf30:	4b6d      	ldr	r3, [pc, #436]	; (800d0e8 <Thread_ControlEntry+0x260>)
 800cf32:	2201      	movs	r2, #1
 800cf34:	701a      	strb	r2, [r3, #0]
 800cf36:	e002      	b.n	800cf3e <Thread_ControlEntry+0xb6>
			}
			else
			{
				IS_SIDEPUSH = NORMAL_MODE; //ROV_FALSE
 800cf38:	4b6b      	ldr	r3, [pc, #428]	; (800d0e8 <Thread_ControlEntry+0x260>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	701a      	strb	r2, [r3, #0]
			}
			//check relay control
			if (control_data.Mode & POWER_CODE)
 800cf3e:	4b69      	ldr	r3, [pc, #420]	; (800d0e4 <Thread_ControlEntry+0x25c>)
 800cf40:	7f1b      	ldrb	r3, [r3, #28]
 800cf42:	f003 0308 	and.w	r3, r3, #8
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d003      	beq.n	800cf52 <Thread_ControlEntry+0xca>
			{
				relay_controller = (vu8) GPIO_PIN_SET; //Relay ON
 800cf4a:	4b68      	ldr	r3, [pc, #416]	; (800d0ec <Thread_ControlEntry+0x264>)
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	701a      	strb	r2, [r3, #0]
 800cf50:	e002      	b.n	800cf58 <Thread_ControlEntry+0xd0>
			}
			else
			{
				relay_controller = (vu8) GPIO_PIN_RESET; //Relay OFF
 800cf52:	4b66      	ldr	r3, [pc, #408]	; (800d0ec <Thread_ControlEntry+0x264>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	701a      	strb	r2, [r3, #0]
			//			{
			//				IS_FIRST_ORBIT = ROV_FALSE;
			//				IS_ORBIT = ROV_FALSE;
			//			}

			ControlDataAnalysis(control_data, &pwm_controller, IS_SIDEPUSH);
 800cf58:	4b63      	ldr	r3, [pc, #396]	; (800d0e8 <Thread_ControlEntry+0x260>)
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	4c61      	ldr	r4, [pc, #388]	; (800d0e4 <Thread_ControlEntry+0x25c>)
 800cf5e:	9305      	str	r3, [sp, #20]
 800cf60:	4b5e      	ldr	r3, [pc, #376]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cf62:	9304      	str	r3, [sp, #16]
 800cf64:	466d      	mov	r5, sp
 800cf66:	f104 0310 	add.w	r3, r4, #16
 800cf6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf6c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cf70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cf74:	f7fc fd32 	bl	80099dc <ControlDataAnalysis>

			RestrictPwmValue((pwm_controller.HorizontalThruster[0]), 700, 2300);
 800cf78:	4b58      	ldr	r3, [pc, #352]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800cf80:	d30b      	bcc.n	800cf9a <Thread_ControlEntry+0x112>
 800cf82:	4b56      	ldr	r3, [pc, #344]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d802      	bhi.n	800cf94 <Thread_ControlEntry+0x10c>
 800cf8e:	4b53      	ldr	r3, [pc, #332]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	e004      	b.n	800cf9e <Thread_ControlEntry+0x116>
 800cf94:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800cf98:	e001      	b.n	800cf9e <Thread_ControlEntry+0x116>
 800cf9a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800cf9e:	4a4f      	ldr	r2, [pc, #316]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cfa0:	6013      	str	r3, [r2, #0]
			RestrictPwmValue((pwm_controller.HorizontalThruster[1]), 700, 2300);
 800cfa2:	4b4e      	ldr	r3, [pc, #312]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800cfaa:	d30b      	bcc.n	800cfc4 <Thread_ControlEntry+0x13c>
 800cfac:	4b4b      	ldr	r3, [pc, #300]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d802      	bhi.n	800cfbe <Thread_ControlEntry+0x136>
 800cfb8:	4b48      	ldr	r3, [pc, #288]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	e004      	b.n	800cfc8 <Thread_ControlEntry+0x140>
 800cfbe:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800cfc2:	e001      	b.n	800cfc8 <Thread_ControlEntry+0x140>
 800cfc4:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800cfc8:	4a44      	ldr	r2, [pc, #272]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cfca:	6053      	str	r3, [r2, #4]
			RestrictPwmValue((pwm_controller.HorizontalThruster[2]), 700, 2300);
 800cfcc:	4b43      	ldr	r3, [pc, #268]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800cfd4:	d30b      	bcc.n	800cfee <Thread_ControlEntry+0x166>
 800cfd6:	4b41      	ldr	r3, [pc, #260]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d802      	bhi.n	800cfe8 <Thread_ControlEntry+0x160>
 800cfe2:	4b3e      	ldr	r3, [pc, #248]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	e004      	b.n	800cff2 <Thread_ControlEntry+0x16a>
 800cfe8:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800cfec:	e001      	b.n	800cff2 <Thread_ControlEntry+0x16a>
 800cfee:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800cff2:	4a3a      	ldr	r2, [pc, #232]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cff4:	6093      	str	r3, [r2, #8]
			RestrictPwmValue((pwm_controller.HorizontalThruster[3]), 700, 2300);
 800cff6:	4b39      	ldr	r3, [pc, #228]	; (800d0dc <Thread_ControlEntry+0x254>)
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800cffe:	d30b      	bcc.n	800d018 <Thread_ControlEntry+0x190>
 800d000:	4b36      	ldr	r3, [pc, #216]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800d008:	4293      	cmp	r3, r2
 800d00a:	d802      	bhi.n	800d012 <Thread_ControlEntry+0x18a>
 800d00c:	4b33      	ldr	r3, [pc, #204]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	e004      	b.n	800d01c <Thread_ControlEntry+0x194>
 800d012:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800d016:	e001      	b.n	800d01c <Thread_ControlEntry+0x194>
 800d018:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800d01c:	4a2f      	ldr	r2, [pc, #188]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d01e:	60d3      	str	r3, [r2, #12]
			RestrictPwmValue((pwm_controller.VerticalThruster[0]), 700, 2300);
 800d020:	4b2e      	ldr	r3, [pc, #184]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800d028:	d30b      	bcc.n	800d042 <Thread_ControlEntry+0x1ba>
 800d02a:	4b2c      	ldr	r3, [pc, #176]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800d032:	4293      	cmp	r3, r2
 800d034:	d802      	bhi.n	800d03c <Thread_ControlEntry+0x1b4>
 800d036:	4b29      	ldr	r3, [pc, #164]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	e004      	b.n	800d046 <Thread_ControlEntry+0x1be>
 800d03c:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800d040:	e001      	b.n	800d046 <Thread_ControlEntry+0x1be>
 800d042:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800d046:	4a25      	ldr	r2, [pc, #148]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d048:	6113      	str	r3, [r2, #16]
			RestrictPwmValue((pwm_controller.VerticalThruster[1]), 700, 2300);
 800d04a:	4b24      	ldr	r3, [pc, #144]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800d052:	d30b      	bcc.n	800d06c <Thread_ControlEntry+0x1e4>
 800d054:	4b21      	ldr	r3, [pc, #132]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d056:	695b      	ldr	r3, [r3, #20]
 800d058:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d802      	bhi.n	800d066 <Thread_ControlEntry+0x1de>
 800d060:	4b1e      	ldr	r3, [pc, #120]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d062:	695b      	ldr	r3, [r3, #20]
 800d064:	e004      	b.n	800d070 <Thread_ControlEntry+0x1e8>
 800d066:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800d06a:	e001      	b.n	800d070 <Thread_ControlEntry+0x1e8>
 800d06c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800d070:	4a1a      	ldr	r2, [pc, #104]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d072:	6153      	str	r3, [r2, #20]
			RestrictPwmValue((pwm_controller.LightServo), 0, 2000);
 800d074:	4b19      	ldr	r3, [pc, #100]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	4b18      	ldr	r3, [pc, #96]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d080:	d802      	bhi.n	800d088 <Thread_ControlEntry+0x200>
 800d082:	4b16      	ldr	r3, [pc, #88]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d084:	699b      	ldr	r3, [r3, #24]
 800d086:	e001      	b.n	800d08c <Thread_ControlEntry+0x204>
 800d088:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d08c:	4a13      	ldr	r2, [pc, #76]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d08e:	6193      	str	r3, [r2, #24]
			RestrictPwmValue((pwm_controller.ConveyServo), 500, 2500);
 800d090:	4b12      	ldr	r3, [pc, #72]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d092:	6a1b      	ldr	r3, [r3, #32]
 800d094:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d098:	d30b      	bcc.n	800d0b2 <Thread_ControlEntry+0x22a>
 800d09a:	4b10      	ldr	r3, [pc, #64]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d09c:	6a1b      	ldr	r3, [r3, #32]
 800d09e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d802      	bhi.n	800d0ac <Thread_ControlEntry+0x224>
 800d0a6:	4b0d      	ldr	r3, [pc, #52]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d0a8:	6a1b      	ldr	r3, [r3, #32]
 800d0aa:	e004      	b.n	800d0b6 <Thread_ControlEntry+0x22e>
 800d0ac:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800d0b0:	e001      	b.n	800d0b6 <Thread_ControlEntry+0x22e>
 800d0b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d0b6:	4a09      	ldr	r2, [pc, #36]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d0b8:	6213      	str	r3, [r2, #32]
			RestrictPwmValue((pwm_controller.PanServo), 500, 2500);
 800d0ba:	4b08      	ldr	r3, [pc, #32]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d0bc:	69db      	ldr	r3, [r3, #28]
 800d0be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d0c2:	d315      	bcc.n	800d0f0 <Thread_ControlEntry+0x268>
 800d0c4:	4b05      	ldr	r3, [pc, #20]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d0c6:	69db      	ldr	r3, [r3, #28]
 800d0c8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d802      	bhi.n	800d0d6 <Thread_ControlEntry+0x24e>
 800d0d0:	4b02      	ldr	r3, [pc, #8]	; (800d0dc <Thread_ControlEntry+0x254>)
 800d0d2:	69db      	ldr	r3, [r3, #28]
 800d0d4:	e00e      	b.n	800d0f4 <Thread_ControlEntry+0x26c>
 800d0d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800d0da:	e00b      	b.n	800d0f4 <Thread_ControlEntry+0x26c>
 800d0dc:	24003fd8 	.word	0x24003fd8
 800d0e0:	24005524 	.word	0x24005524
 800d0e4:	24004018 	.word	0x24004018
 800d0e8:	24004038 	.word	0x24004038
 800d0ec:	24004039 	.word	0x24004039
 800d0f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d0f4:	4a61      	ldr	r2, [pc, #388]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d0f6:	61d3      	str	r3, [r2, #28]

			if ((pwm_controller.HorizontalThruster[0] > 1480)
 800d0f8:	4b60      	ldr	r3, [pc, #384]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 800d100:	d908      	bls.n	800d114 <Thread_ControlEntry+0x28c>
					&& (pwm_controller.HorizontalThruster[0] < 1520))
 800d102:	4b5e      	ldr	r3, [pc, #376]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 800d10a:	d203      	bcs.n	800d114 <Thread_ControlEntry+0x28c>
			{
				pwm_controller.HorizontalThruster[0] = 1500;
 800d10c:	4b5b      	ldr	r3, [pc, #364]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d10e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d112:	601a      	str	r2, [r3, #0]
			}
			if ((pwm_controller.HorizontalThruster[1] > 1480)
 800d114:	4b59      	ldr	r3, [pc, #356]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 800d11c:	d908      	bls.n	800d130 <Thread_ControlEntry+0x2a8>
					&& (pwm_controller.HorizontalThruster[1] < 1520))
 800d11e:	4b57      	ldr	r3, [pc, #348]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 800d126:	d203      	bcs.n	800d130 <Thread_ControlEntry+0x2a8>
			{
				pwm_controller.HorizontalThruster[1] = 1500;
 800d128:	4b54      	ldr	r3, [pc, #336]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d12a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d12e:	605a      	str	r2, [r3, #4]
			}
			if ((pwm_controller.HorizontalThruster[2] > 1480)
 800d130:	4b52      	ldr	r3, [pc, #328]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 800d138:	d908      	bls.n	800d14c <Thread_ControlEntry+0x2c4>
					&& (pwm_controller.HorizontalThruster[2] < 1520))
 800d13a:	4b50      	ldr	r3, [pc, #320]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 800d142:	d203      	bcs.n	800d14c <Thread_ControlEntry+0x2c4>
			{
				pwm_controller.HorizontalThruster[2] = 1500;
 800d144:	4b4d      	ldr	r3, [pc, #308]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d146:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d14a:	609a      	str	r2, [r3, #8]
			}
			if ((pwm_controller.HorizontalThruster[3] > 1480)
 800d14c:	4b4b      	ldr	r3, [pc, #300]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 800d154:	d908      	bls.n	800d168 <Thread_ControlEntry+0x2e0>
					&& (pwm_controller.HorizontalThruster[3] < 1520))
 800d156:	4b49      	ldr	r3, [pc, #292]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 800d15e:	d203      	bcs.n	800d168 <Thread_ControlEntry+0x2e0>
			{
				pwm_controller.HorizontalThruster[3] = 1500;
 800d160:	4b46      	ldr	r3, [pc, #280]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d162:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d166:	60da      	str	r2, [r3, #12]
			}
			if ((pwm_controller.VerticalThruster[0] > 1480)
 800d168:	4b44      	ldr	r3, [pc, #272]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d16a:	691b      	ldr	r3, [r3, #16]
 800d16c:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 800d170:	d908      	bls.n	800d184 <Thread_ControlEntry+0x2fc>
					&& (pwm_controller.VerticalThruster[0] < 1520))
 800d172:	4b42      	ldr	r3, [pc, #264]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 800d17a:	d203      	bcs.n	800d184 <Thread_ControlEntry+0x2fc>
			{
				pwm_controller.VerticalThruster[0] = 1500;
 800d17c:	4b3f      	ldr	r3, [pc, #252]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d17e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d182:	611a      	str	r2, [r3, #16]
			}
			if ((pwm_controller.VerticalThruster[1] > 1480)
 800d184:	4b3d      	ldr	r3, [pc, #244]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d186:	695b      	ldr	r3, [r3, #20]
 800d188:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 800d18c:	d908      	bls.n	800d1a0 <Thread_ControlEntry+0x318>
					&& (pwm_controller.VerticalThruster[1] < 1520))
 800d18e:	4b3b      	ldr	r3, [pc, #236]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d190:	695b      	ldr	r3, [r3, #20]
 800d192:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 800d196:	d203      	bcs.n	800d1a0 <Thread_ControlEntry+0x318>
			{
				pwm_controller.VerticalThruster[1] = 1500;
 800d198:	4b38      	ldr	r3, [pc, #224]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d19a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d19e:	615a      	str	r2, [r3, #20]
			}

			if ((pwm_controller.ConveyServo > 1470)
 800d1a0:	4b36      	ldr	r3, [pc, #216]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d1a2:	6a1b      	ldr	r3, [r3, #32]
 800d1a4:	f240 52be 	movw	r2, #1470	; 0x5be
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d909      	bls.n	800d1c0 <Thread_ControlEntry+0x338>
					&& (pwm_controller.ConveyServo < 1530))
 800d1ac:	4b33      	ldr	r3, [pc, #204]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d1ae:	6a1b      	ldr	r3, [r3, #32]
 800d1b0:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d803      	bhi.n	800d1c0 <Thread_ControlEntry+0x338>
			{
				pwm_controller.ConveyServo = 1500;
 800d1b8:	4b30      	ldr	r3, [pc, #192]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d1ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d1be:	621a      	str	r2, [r3, #32]
			}

			if ((pwm_controller.LightServo > 0)
 800d1c0:	4b2e      	ldr	r3, [pc, #184]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d1c2:	699b      	ldr	r3, [r3, #24]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d006      	beq.n	800d1d6 <Thread_ControlEntry+0x34e>
					&& (pwm_controller.LightServo < 50))
 800d1c8:	4b2c      	ldr	r3, [pc, #176]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d1ca:	699b      	ldr	r3, [r3, #24]
 800d1cc:	2b31      	cmp	r3, #49	; 0x31
 800d1ce:	d802      	bhi.n	800d1d6 <Thread_ControlEntry+0x34e>
			{
				pwm_controller.LightServo = 0;
 800d1d0:	4b2a      	ldr	r3, [pc, #168]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	619a      	str	r2, [r3, #24]
			}

			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, relay_controller);
 800d1d6:	4b2a      	ldr	r3, [pc, #168]	; (800d280 <Thread_ControlEntry+0x3f8>)
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	461a      	mov	r2, r3
 800d1de:	2101      	movs	r1, #1
 800d1e0:	4828      	ldr	r0, [pc, #160]	; (800d284 <Thread_ControlEntry+0x3fc>)
 800d1e2:	f7f6 fb5d 	bl	80038a0 <HAL_GPIO_WritePin>

			TIM1->CCR2 = pwm_controller.VerticalThruster[0]; //C2 'J8'
 800d1e6:	4a28      	ldr	r2, [pc, #160]	; (800d288 <Thread_ControlEntry+0x400>)
 800d1e8:	4b24      	ldr	r3, [pc, #144]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	6393      	str	r3, [r2, #56]	; 0x38
			TIM2->CCR2 = pwm_controller.VerticalThruster[1]; //C1 'J3'
 800d1ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d1f2:	4b22      	ldr	r3, [pc, #136]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	6393      	str	r3, [r2, #56]	; 0x38

			TIM8->CCR3 = pwm_controller.HorizontalThruster[1]; //A1 'J5'
 800d1f8:	4a24      	ldr	r2, [pc, #144]	; (800d28c <Thread_ControlEntry+0x404>)
 800d1fa:	4b20      	ldr	r3, [pc, #128]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->CCR3 = pwm_controller.HorizontalThruster[0]; //A2 'J2'
 800d200:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d204:	4b1d      	ldr	r3, [pc, #116]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	63d3      	str	r3, [r2, #60]	; 0x3c

			TIM1->CCR1 = pwm_controller.HorizontalThruster[2]; //B1 'J9'
 800d20a:	4a1f      	ldr	r2, [pc, #124]	; (800d288 <Thread_ControlEntry+0x400>)
 800d20c:	4b1b      	ldr	r3, [pc, #108]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR3 = pwm_controller.HorizontalThruster[3]; //B2 'J6'
 800d212:	4a1d      	ldr	r2, [pc, #116]	; (800d288 <Thread_ControlEntry+0x400>)
 800d214:	4b19      	ldr	r3, [pc, #100]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	63d3      	str	r3, [r2, #60]	; 0x3c

			TIM2->CCR1 = pwm_controller.RestServo; //Pan(not used)
 800d21a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d21e:	4b17      	ldr	r3, [pc, #92]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d222:	6353      	str	r3, [r2, #52]	; 0x34

			TIM3->CCR1 = pwm_controller.ArmServo[2]; //Middle Arm
 800d224:	4a1a      	ldr	r2, [pc, #104]	; (800d290 <Thread_ControlEntry+0x408>)
 800d226:	4b15      	ldr	r3, [pc, #84]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22a:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = pwm_controller.ArmServo[1]; //Main Arm
 800d22c:	4a18      	ldr	r2, [pc, #96]	; (800d290 <Thread_ControlEntry+0x408>)
 800d22e:	4b13      	ldr	r3, [pc, #76]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d232:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = pwm_controller.ArmServo[0]; //Horizental Arm
 800d234:	4a16      	ldr	r2, [pc, #88]	; (800d290 <Thread_ControlEntry+0x408>)
 800d236:	4b11      	ldr	r3, [pc, #68]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23a:	63d3      	str	r3, [r2, #60]	; 0x3c

			TIM4->CCR2 = pwm_controller.ArmServo[5]; //Rest Machine Arm
 800d23c:	4a15      	ldr	r2, [pc, #84]	; (800d294 <Thread_ControlEntry+0x40c>)
 800d23e:	4b0f      	ldr	r3, [pc, #60]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d242:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = pwm_controller.LightServo; //Light
 800d244:	4a13      	ldr	r2, [pc, #76]	; (800d294 <Thread_ControlEntry+0x40c>)
 800d246:	4b0d      	ldr	r3, [pc, #52]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d248:	699b      	ldr	r3, [r3, #24]
 800d24a:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM4->CCR4 = (vu32) 1500; //hardware float(not used)
 800d24c:	4b11      	ldr	r3, [pc, #68]	; (800d294 <Thread_ControlEntry+0x40c>)
 800d24e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d252:	641a      	str	r2, [r3, #64]	; 0x40

			TIM5->CCR1 = pwm_controller.ConveyServo; //Convey
 800d254:	4a10      	ldr	r2, [pc, #64]	; (800d298 <Thread_ControlEntry+0x410>)
 800d256:	4b09      	ldr	r3, [pc, #36]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	6353      	str	r3, [r2, #52]	; 0x34
			TIM5->CCR2 = pwm_controller.ArmServo[3]; //Front Arm
 800d25c:	4a0e      	ldr	r2, [pc, #56]	; (800d298 <Thread_ControlEntry+0x410>)
 800d25e:	4b07      	ldr	r3, [pc, #28]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d262:	6393      	str	r3, [r2, #56]	; 0x38

			//		TIM12->CCR1 = (vu32)1500; //hardware float(not used)

			TIM15->CCR1 = pwm_controller.ArmServo[4]; //Grab Arm
 800d264:	4a0d      	ldr	r2, [pc, #52]	; (800d29c <Thread_ControlEntry+0x414>)
 800d266:	4b05      	ldr	r3, [pc, #20]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d26a:	6353      	str	r3, [r2, #52]	; 0x34
			TIM15->CCR2 = pwm_controller.PanServo; //Pan
 800d26c:	4a0b      	ldr	r2, [pc, #44]	; (800d29c <Thread_ControlEntry+0x414>)
 800d26e:	4b03      	ldr	r3, [pc, #12]	; (800d27c <Thread_ControlEntry+0x3f4>)
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	6393      	str	r3, [r2, #56]	; 0x38
//////			printf("stable: %d, %d, %l\r\n", attitude_detect.EulerAngle[2],
//////					(int32_t)self_stable_pid.FeedBack, ss_cal);
////		}

//		osDelay(100); //??? delay
		osDelay(50);
 800d274:	2032      	movs	r0, #50	; 0x32
 800d276:	f7fd f83a 	bl	800a2ee <osDelay>
		if (xQueueReceive(Cmd_QueueHandle, &control_data, 0) == pdPASS)
 800d27a:	e648      	b.n	800cf0e <Thread_ControlEntry+0x86>
 800d27c:	24003fd8 	.word	0x24003fd8
 800d280:	24004039 	.word	0x24004039
 800d284:	58020800 	.word	0x58020800
 800d288:	40010000 	.word	0x40010000
 800d28c:	40010400 	.word	0x40010400
 800d290:	40000400 	.word	0x40000400
 800d294:	40000800 	.word	0x40000800
 800d298:	40000c00 	.word	0x40000c00
 800d29c:	40014000 	.word	0x40014000

0800d2a0 <Thread_SensorEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_SensorEntry */
void Thread_SensorEntry(void const *argument)
{
 800d2a0:	b5b0      	push	{r4, r5, r7, lr}
 800d2a2:	b09e      	sub	sp, #120	; 0x78
 800d2a4:	af08      	add	r7, sp, #32
 800d2a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Thread_SensorEntry */
	IMUData_t wt931_data;
	CarbinData_t gy39_data;
	ReportData_t report_data;
	report_data.FrameHead = 0x25;
 800d2a8:	2325      	movs	r3, #37	; 0x25
 800d2aa:	723b      	strb	r3, [r7, #8]
	report_data.CabinFunction = 0;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	727b      	strb	r3, [r7, #9]
	report_data.FrameEnd = 0xFFFF;
 800d2b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2b4:	863b      	strh	r3, [r7, #48]	; 0x30
	report_data.IdTest = 0x00;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	static uint8_t Report_TxBuffer[Master_UART_TXLen];

	HAL_UART_Transmit_DMA(&Master_UART, Report_TxBuffer,
 800d2bc:	222f      	movs	r2, #47	; 0x2f
 800d2be:	4941      	ldr	r1, [pc, #260]	; (800d3c4 <Thread_SensorEntry+0x124>)
 800d2c0:	4841      	ldr	r0, [pc, #260]	; (800d3c8 <Thread_SensorEntry+0x128>)
 800d2c2:	f7fa f9f9 	bl	80076b8 <HAL_UART_Transmit_DMA>
			sizeof(Report_TxBuffer));
	/* Infinite loop */
	for (;;)
	{
		xQueueReceive(GY39_QueueHandle, &gy39_data, 0);
 800d2c6:	4b41      	ldr	r3, [pc, #260]	; (800d3cc <Thread_SensorEntry+0x12c>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fd fc59 	bl	800ab88 <xQueueReceive>
		xQueueReceive(WT931_QueueHandle, &wt931_data, 0);
 800d2d6:	4b3e      	ldr	r3, [pc, #248]	; (800d3d0 <Thread_SensorEntry+0x130>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800d2de:	2200      	movs	r2, #0
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fd fc51 	bl	800ab88 <xQueueReceive>

//		printf("%d,%d,%d,%d,%d\r\n",wt931_data.EulerAngle[0],wt931_data.EulerAngle[1],wt931_data.EulerAngle[2],gy39_data.CarbinTemperature,gy39_data.CarbinHumidity);

		report_data.AccNum[0] = wt931_data.Acceleration[0];
 800d2e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d2ea:	82fb      	strh	r3, [r7, #22]
		report_data.AccNum[1] = wt931_data.Acceleration[1];
 800d2ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d2f0:	833b      	strh	r3, [r7, #24]
		report_data.AccNum[2] = wt931_data.Acceleration[2];
 800d2f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d2f6:	837b      	strh	r3, [r7, #26]
		report_data.RotNum[0] = wt931_data.AngularSpeed[0];
 800d2f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d2fc:	83bb      	strh	r3, [r7, #28]
		report_data.RotNum[1] = wt931_data.AngularSpeed[1];
 800d2fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d302:	83fb      	strh	r3, [r7, #30]
		report_data.RotNum[2] = wt931_data.AngularSpeed[2];
 800d304:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d308:	843b      	strh	r3, [r7, #32]
		report_data.EulNum[0] = wt931_data.EulerAngle[0];
 800d30a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d30e:	847b      	strh	r3, [r7, #34]	; 0x22
		report_data.EulNum[1] = wt931_data.EulerAngle[1];
 800d310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d314:	84bb      	strh	r3, [r7, #36]	; 0x24
		report_data.EulNum[2] = wt931_data.EulerAngle[2];
 800d316:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800d31a:	84fb      	strh	r3, [r7, #38]	; 0x26
		report_data.MagNum[0] = wt931_data.MagneticValue[0];
 800d31c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800d320:	853b      	strh	r3, [r7, #40]	; 0x28
		report_data.MagNum[1] = wt931_data.MagneticValue[1];
 800d322:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d326:	857b      	strh	r3, [r7, #42]	; 0x2a
		report_data.MagNum[2] = wt931_data.MagneticValue[2];
 800d328:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d32c:	85bb      	strh	r3, [r7, #44]	; 0x2c

		report_data.CabinTemperature = gy39_data.CarbinTemperature;
 800d32e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d330:	81bb      	strh	r3, [r7, #12]
		report_data.CabinBarometric = gy39_data.CarbinBarometric;
 800d332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d334:	613b      	str	r3, [r7, #16]
		report_data.CabinHumidity = gy39_data.CarbinHumidity;
 800d336:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d338:	82bb      	strh	r3, [r7, #20]

		report_data.WaterDetect = HAL_GPIO_ReadPin(WaterDet_GPIO_Port,
 800d33a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d33e:	4825      	ldr	r0, [pc, #148]	; (800d3d4 <Thread_SensorEntry+0x134>)
 800d340:	f7f6 fa96 	bl	8003870 <HAL_GPIO_ReadPin>
 800d344:	4603      	mov	r3, r0
 800d346:	72bb      	strb	r3, [r7, #10]
		WaterDet_Pin);

		CaptureReportData(report_data, Report_TxBuffer);
 800d348:	4b1e      	ldr	r3, [pc, #120]	; (800d3c4 <Thread_SensorEntry+0x124>)
 800d34a:	9307      	str	r3, [sp, #28]
 800d34c:	466d      	mov	r5, sp
 800d34e:	f107 0418 	add.w	r4, r7, #24
 800d352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d356:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d35a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d35e:	f107 0308 	add.w	r3, r7, #8
 800d362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d364:	f7fc fb7a 	bl	8009a5c <CaptureReportData>

//		HAL_UART_Transmit(&Master_UART, Report_TxBuffer, sizeof(Report_TxBuffer), 0xff);
//		if (xSemaphoreTake(MAIN_UART_mutexHandle, 5))
		if (xSemaphoreTake(MAIN_UART_mutexHandle, 0))
 800d368:	4b1b      	ldr	r3, [pc, #108]	; (800d3d8 <Thread_SensorEntry+0x138>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2100      	movs	r1, #0
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fd fcea 	bl	800ad48 <xQueueSemaphoreTake>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d01e      	beq.n	800d3b8 <Thread_SensorEntry+0x118>
		{
			if (HAL_UART_GetState(&Master_UART) != HAL_UART_STATE_BUSY_TX) //UART no busy
 800d37a:	4813      	ldr	r0, [pc, #76]	; (800d3c8 <Thread_SensorEntry+0x128>)
 800d37c:	f7fa fef4 	bl	8008168 <HAL_UART_GetState>
 800d380:	4603      	mov	r3, r0
 800d382:	2b21      	cmp	r3, #33	; 0x21
 800d384:	d011      	beq.n	800d3aa <Thread_SensorEntry+0x10a>
			{
				if (HAL_DMA_GetState(&Master_UART.hdmatx) != HAL_DMA_STATE_BUSY) //wait for DMA tx
 800d386:	4815      	ldr	r0, [pc, #84]	; (800d3dc <Thread_SensorEntry+0x13c>)
 800d388:	f7f5 fcc0 	bl	8002d0c <HAL_DMA_GetState>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d00b      	beq.n	800d3aa <Thread_SensorEntry+0x10a>
				{
					if (__HAL_UART_GET_FLAG(&Master_UART,UART_FLAG_TC) == SET) //wait for UART tx
 800d392:	4b0d      	ldr	r3, [pc, #52]	; (800d3c8 <Thread_SensorEntry+0x128>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	69db      	ldr	r3, [r3, #28]
 800d398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d39c:	2b40      	cmp	r3, #64	; 0x40
 800d39e:	d104      	bne.n	800d3aa <Thread_SensorEntry+0x10a>
					{
						HAL_UART_Transmit_DMA(&Master_UART, Report_TxBuffer,
 800d3a0:	222f      	movs	r2, #47	; 0x2f
 800d3a2:	4908      	ldr	r1, [pc, #32]	; (800d3c4 <Thread_SensorEntry+0x124>)
 800d3a4:	4808      	ldr	r0, [pc, #32]	; (800d3c8 <Thread_SensorEntry+0x128>)
 800d3a6:	f7fa f987 	bl	80076b8 <HAL_UART_Transmit_DMA>
//						HAL_UART_Transmit(&Master_UART, Report_TxBuffer,
//														sizeof(Report_TxBuffer), 0xff);
					}
				}
			}
			xSemaphoreGive(MAIN_UART_mutexHandle);
 800d3aa:	4b0b      	ldr	r3, [pc, #44]	; (800d3d8 <Thread_SensorEntry+0x138>)
 800d3ac:	6818      	ldr	r0, [r3, #0]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	f7fd fa5c 	bl	800a870 <xQueueGenericSend>
		}

//		osDelay(200); //wonderful delay
		osDelay(500); //////////////////////////////////////////////////////////////////////////////////这个位置改了!
 800d3b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d3bc:	f7fc ff97 	bl	800a2ee <osDelay>
		xQueueReceive(GY39_QueueHandle, &gy39_data, 0);
 800d3c0:	e781      	b.n	800d2c6 <Thread_SensorEntry+0x26>
 800d3c2:	bf00      	nop
 800d3c4:	2400403c 	.word	0x2400403c
 800d3c8:	240071b8 	.word	0x240071b8
 800d3cc:	2400521c 	.word	0x2400521c
 800d3d0:	24005218 	.word	0x24005218
 800d3d4:	58020400 	.word	0x58020400
 800d3d8:	24004090 	.word	0x24004090
 800d3dc:	24007230 	.word	0x24007230

0800d3e0 <Thread_RecvCmdEntry>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void Thread_RecvCmdEntry(void const *argument)
{
 800d3e0:	b5b0      	push	{r4, r5, r7, lr}
 800d3e2:	b092      	sub	sp, #72	; 0x48
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
	uint8_t Command_RxBuffer[Master_UART_RXLen * 2] =
 800d3e8:	4b4d      	ldr	r3, [pc, #308]	; (800d520 <Thread_RecvCmdEntry+0x140>)
 800d3ea:	f107 040c 	add.w	r4, r7, #12
 800d3ee:	461d      	mov	r5, r3
 800d3f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			0xDC, 0x05, 0xDC, 0x00, 0x32, 0x05, 0xDC, 0x05, 0xDC, 0x05, 0xDC,
			0x05, 0xDC, 0x05, 0xDC, 0x05, 0xDC, 0x05, 0xDC, 0x05, 0xDC, 0x05,
			0xDC, 0x00, 0x00, 0x21 };
	static ControlData_t control_data;

	control_data.FrameHead = 0x25;
 800d404:	4b47      	ldr	r3, [pc, #284]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d406:	2225      	movs	r2, #37	; 0x25
 800d408:	701a      	strb	r2, [r3, #0]
	control_data.StraightNum = 0x05DC;
 800d40a:	4b46      	ldr	r3, [pc, #280]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d40c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d410:	805a      	strh	r2, [r3, #2]
	control_data.RotateNum = 0x05DC;
 800d412:	4b44      	ldr	r3, [pc, #272]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d414:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d418:	809a      	strh	r2, [r3, #4]
	control_data.VerticalNum = 0x05DC;
 800d41a:	4b42      	ldr	r3, [pc, #264]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d41c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d420:	80da      	strh	r2, [r3, #6]
	control_data.ConveyNum = 0x05DC;
 800d422:	4b40      	ldr	r3, [pc, #256]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d424:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d428:	819a      	strh	r2, [r3, #12]
	control_data.ArmNum[0] = 0x05DC;
 800d42a:	4b3e      	ldr	r3, [pc, #248]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d42c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d430:	81da      	strh	r2, [r3, #14]
	control_data.ArmNum[1] = 0x05DC;
 800d432:	4b3c      	ldr	r3, [pc, #240]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d434:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d438:	821a      	strh	r2, [r3, #16]
	control_data.ArmNum[2] = 0x05DC;
 800d43a:	4b3a      	ldr	r3, [pc, #232]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d43c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d440:	825a      	strh	r2, [r3, #18]
	control_data.ArmNum[3] = 0x05DC;
 800d442:	4b38      	ldr	r3, [pc, #224]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d444:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d448:	829a      	strh	r2, [r3, #20]
	control_data.ArmNum[4] = 0x05DC;
 800d44a:	4b36      	ldr	r3, [pc, #216]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d44c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d450:	82da      	strh	r2, [r3, #22]
	control_data.ArmNum[5] = 0x05DC;
 800d452:	4b34      	ldr	r3, [pc, #208]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d454:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d458:	831a      	strh	r2, [r3, #24]
	control_data.LightNum = 0x0000;
 800d45a:	4b32      	ldr	r3, [pc, #200]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	811a      	strh	r2, [r3, #8]
	control_data.PanNum = 0x05DC;
 800d460:	4b30      	ldr	r3, [pc, #192]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d462:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d466:	815a      	strh	r2, [r3, #10]
	control_data.RestNum = 0x05DC;
 800d468:	4b2e      	ldr	r3, [pc, #184]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d46a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d46e:	835a      	strh	r2, [r3, #26]
	control_data.FrameEnd = 0x21;
 800d470:	4b2c      	ldr	r3, [pc, #176]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d472:	2221      	movs	r2, #33	; 0x21
 800d474:	779a      	strb	r2, [r3, #30]

	__HAL_UART_ENABLE_IT(&Master_UART, UART_IT_IDLE);
 800d476:	4b2c      	ldr	r3, [pc, #176]	; (800d528 <Thread_RecvCmdEntry+0x148>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	4b2a      	ldr	r3, [pc, #168]	; (800d528 <Thread_RecvCmdEntry+0x148>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f042 0210 	orr.w	r2, r2, #16
 800d484:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Master_UART, Command_RxBuffer,
 800d486:	f107 030c 	add.w	r3, r7, #12
 800d48a:	223c      	movs	r2, #60	; 0x3c
 800d48c:	4619      	mov	r1, r3
 800d48e:	4826      	ldr	r0, [pc, #152]	; (800d528 <Thread_RecvCmdEntry+0x148>)
 800d490:	f7fa f9a4 	bl	80077dc <HAL_UART_Receive_DMA>
			sizeof(Command_RxBuffer));

	for (;;)
	{
		if (xSemaphoreTake(CMD_DONE_semHandle, 0) == pdTRUE)
 800d494:	4b25      	ldr	r3, [pc, #148]	; (800d52c <Thread_RecvCmdEntry+0x14c>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2100      	movs	r1, #0
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fd fc54 	bl	800ad48 <xQueueSemaphoreTake>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d137      	bne.n	800d516 <Thread_RecvCmdEntry+0x136>
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800d4a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d4aa:	4821      	ldr	r0, [pc, #132]	; (800d530 <Thread_RecvCmdEntry+0x150>)
 800d4ac:	f7f6 fa11 	bl	80038d2 <HAL_GPIO_TogglePin>
			CaptureControlData(&control_data, Command_RxBuffer);
 800d4b0:	f107 030c 	add.w	r3, r7, #12
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	481b      	ldr	r0, [pc, #108]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d4b8:	f7fc fbe1 	bl	8009c7e <CaptureControlData>
			xQueueSendToFront(Cmd_QueueHandle, (void* )&control_data, 0);
 800d4bc:	4b1d      	ldr	r3, [pc, #116]	; (800d534 <Thread_RecvCmdEntry+0x154>)
 800d4be:	6818      	ldr	r0, [r3, #0]
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	4917      	ldr	r1, [pc, #92]	; (800d524 <Thread_RecvCmdEntry+0x144>)
 800d4c6:	f7fd f9d3 	bl	800a870 <xQueueGenericSend>

			if (xSemaphoreTake(MAIN_UART_mutexHandle, 0))
 800d4ca:	4b1b      	ldr	r3, [pc, #108]	; (800d538 <Thread_RecvCmdEntry+0x158>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fd fc39 	bl	800ad48 <xQueueSemaphoreTake>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d01c      	beq.n	800d516 <Thread_RecvCmdEntry+0x136>
			{
				memset(&Command_RxBuffer, 0, sizeof(Command_RxBuffer));
 800d4dc:	f107 030c 	add.w	r3, r7, #12
 800d4e0:	223c      	movs	r2, #60	; 0x3c
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f002 f87f 	bl	800f5e8 <memset>
				__HAL_UART_ENABLE_IT(&Master_UART, UART_IT_IDLE);
 800d4ea:	4b0f      	ldr	r3, [pc, #60]	; (800d528 <Thread_RecvCmdEntry+0x148>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	4b0d      	ldr	r3, [pc, #52]	; (800d528 <Thread_RecvCmdEntry+0x148>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f042 0210 	orr.w	r2, r2, #16
 800d4f8:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_DMA(&Master_UART, Command_RxBuffer,
 800d4fa:	f107 030c 	add.w	r3, r7, #12
 800d4fe:	223c      	movs	r2, #60	; 0x3c
 800d500:	4619      	mov	r1, r3
 800d502:	4809      	ldr	r0, [pc, #36]	; (800d528 <Thread_RecvCmdEntry+0x148>)
 800d504:	f7fa f96a 	bl	80077dc <HAL_UART_Receive_DMA>
						sizeof(Command_RxBuffer));
				xSemaphoreGive(MAIN_UART_mutexHandle);
 800d508:	4b0b      	ldr	r3, [pc, #44]	; (800d538 <Thread_RecvCmdEntry+0x158>)
 800d50a:	6818      	ldr	r0, [r3, #0]
 800d50c:	2300      	movs	r3, #0
 800d50e:	2200      	movs	r2, #0
 800d510:	2100      	movs	r1, #0
 800d512:	f7fd f9ad 	bl	800a870 <xQueueGenericSend>
			}
		}
//		osDelay(2); //wonderful delay
		osDelay(10);////////////////////////////////////////////////////////////////////这个位置改了
 800d516:	200a      	movs	r0, #10
 800d518:	f7fc fee9 	bl	800a2ee <osDelay>
		if (xSemaphoreTake(CMD_DONE_semHandle, 0) == pdTRUE)
 800d51c:	e7ba      	b.n	800d494 <Thread_RecvCmdEntry+0xb4>
 800d51e:	bf00      	nop
 800d520:	0800f74c 	.word	0x0800f74c
 800d524:	2400406c 	.word	0x2400406c
 800d528:	240071b8 	.word	0x240071b8
 800d52c:	24005390 	.word	0x24005390
 800d530:	58020800 	.word	0x58020800
 800d534:	24005524 	.word	0x24005524
 800d538:	24004090 	.word	0x24004090

0800d53c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08c      	sub	sp, #48	; 0x30
 800d540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d542:	f107 031c 	add.w	r3, r7, #28
 800d546:	2200      	movs	r2, #0
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	605a      	str	r2, [r3, #4]
 800d54c:	609a      	str	r2, [r3, #8]
 800d54e:	60da      	str	r2, [r3, #12]
 800d550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d552:	4b40      	ldr	r3, [pc, #256]	; (800d654 <MX_GPIO_Init+0x118>)
 800d554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d558:	4a3e      	ldr	r2, [pc, #248]	; (800d654 <MX_GPIO_Init+0x118>)
 800d55a:	f043 0310 	orr.w	r3, r3, #16
 800d55e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d562:	4b3c      	ldr	r3, [pc, #240]	; (800d654 <MX_GPIO_Init+0x118>)
 800d564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d568:	f003 0310 	and.w	r3, r3, #16
 800d56c:	61bb      	str	r3, [r7, #24]
 800d56e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d570:	4b38      	ldr	r3, [pc, #224]	; (800d654 <MX_GPIO_Init+0x118>)
 800d572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d576:	4a37      	ldr	r2, [pc, #220]	; (800d654 <MX_GPIO_Init+0x118>)
 800d578:	f043 0304 	orr.w	r3, r3, #4
 800d57c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d580:	4b34      	ldr	r3, [pc, #208]	; (800d654 <MX_GPIO_Init+0x118>)
 800d582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d586:	f003 0304 	and.w	r3, r3, #4
 800d58a:	617b      	str	r3, [r7, #20]
 800d58c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d58e:	4b31      	ldr	r3, [pc, #196]	; (800d654 <MX_GPIO_Init+0x118>)
 800d590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d594:	4a2f      	ldr	r2, [pc, #188]	; (800d654 <MX_GPIO_Init+0x118>)
 800d596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d59a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d59e:	4b2d      	ldr	r3, [pc, #180]	; (800d654 <MX_GPIO_Init+0x118>)
 800d5a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5a8:	613b      	str	r3, [r7, #16]
 800d5aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5ac:	4b29      	ldr	r3, [pc, #164]	; (800d654 <MX_GPIO_Init+0x118>)
 800d5ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d5b2:	4a28      	ldr	r2, [pc, #160]	; (800d654 <MX_GPIO_Init+0x118>)
 800d5b4:	f043 0301 	orr.w	r3, r3, #1
 800d5b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d5bc:	4b25      	ldr	r3, [pc, #148]	; (800d654 <MX_GPIO_Init+0x118>)
 800d5be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d5ca:	4b22      	ldr	r3, [pc, #136]	; (800d654 <MX_GPIO_Init+0x118>)
 800d5cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d5d0:	4a20      	ldr	r2, [pc, #128]	; (800d654 <MX_GPIO_Init+0x118>)
 800d5d2:	f043 0302 	orr.w	r3, r3, #2
 800d5d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d5da:	4b1e      	ldr	r3, [pc, #120]	; (800d654 <MX_GPIO_Init+0x118>)
 800d5dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d5e0:	f003 0302 	and.w	r3, r3, #2
 800d5e4:	60bb      	str	r3, [r7, #8]
 800d5e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d5e8:	4b1a      	ldr	r3, [pc, #104]	; (800d654 <MX_GPIO_Init+0x118>)
 800d5ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d5ee:	4a19      	ldr	r2, [pc, #100]	; (800d654 <MX_GPIO_Init+0x118>)
 800d5f0:	f043 0308 	orr.w	r3, r3, #8
 800d5f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d5f8:	4b16      	ldr	r3, [pc, #88]	; (800d654 <MX_GPIO_Init+0x118>)
 800d5fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d5fe:	f003 0308 	and.w	r3, r3, #8
 800d602:	607b      	str	r3, [r7, #4]
 800d604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|Relay_Pin, GPIO_PIN_RESET);
 800d606:	2200      	movs	r2, #0
 800d608:	f242 0101 	movw	r1, #8193	; 0x2001
 800d60c:	4812      	ldr	r0, [pc, #72]	; (800d658 <MX_GPIO_Init+0x11c>)
 800d60e:	f7f6 f947 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|Relay_Pin;
 800d612:	f242 0301 	movw	r3, #8193	; 0x2001
 800d616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d618:	2301      	movs	r3, #1
 800d61a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d61c:	2301      	movs	r3, #1
 800d61e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d620:	2300      	movs	r3, #0
 800d622:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d624:	f107 031c 	add.w	r3, r7, #28
 800d628:	4619      	mov	r1, r3
 800d62a:	480b      	ldr	r0, [pc, #44]	; (800d658 <MX_GPIO_Init+0x11c>)
 800d62c:	f7f5 ff70 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WaterDet_Pin;
 800d630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d636:	2300      	movs	r3, #0
 800d638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d63a:	2300      	movs	r3, #0
 800d63c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WaterDet_GPIO_Port, &GPIO_InitStruct);
 800d63e:	f107 031c 	add.w	r3, r7, #28
 800d642:	4619      	mov	r1, r3
 800d644:	4805      	ldr	r0, [pc, #20]	; (800d65c <MX_GPIO_Init+0x120>)
 800d646:	f7f5 ff63 	bl	8003510 <HAL_GPIO_Init>

}
 800d64a:	bf00      	nop
 800d64c:	3730      	adds	r7, #48	; 0x30
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	58024400 	.word	0x58024400
 800d658:	58020800 	.word	0x58020800
 800d65c:	58020400 	.word	0x58020400

0800d660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d664:	f7f2 ffb8 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d668:	f000 f886 	bl	800d778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d66c:	f7ff ff66 	bl	800d53c <MX_GPIO_Init>
  MX_DMA_Init();
 800d670:	f7ff f9bc 	bl	800c9ec <MX_DMA_Init>
  MX_TIM1_Init();
 800d674:	f000 fc8e 	bl	800df94 <MX_TIM1_Init>
  MX_TIM2_Init();
 800d678:	f000 fd52 	bl	800e120 <MX_TIM2_Init>
  MX_TIM3_Init();
 800d67c:	f000 fdde 	bl	800e23c <MX_TIM3_Init>
  MX_TIM4_Init();
 800d680:	f000 fe6a 	bl	800e358 <MX_TIM4_Init>
  MX_TIM5_Init();
 800d684:	f000 fef6 	bl	800e474 <MX_TIM5_Init>
  MX_TIM8_Init();
 800d688:	f000 ff78 	bl	800e57c <MX_TIM8_Init>
  MX_TIM12_Init();
 800d68c:	f001 f824 	bl	800e6d8 <MX_TIM12_Init>
  MX_TIM15_Init();
 800d690:	f001 f886 	bl	800e7a0 <MX_TIM15_Init>
  MX_UART5_Init();
 800d694:	f001 fb8e 	bl	800edb4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800d698:	f001 fbd8 	bl	800ee4c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800d69c:	f001 fc22 	bl	800eee4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800d6a0:	f001 fc6c 	bl	800ef7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d6aa:	482a      	ldr	r0, [pc, #168]	; (800d754 <main+0xf4>)
 800d6ac:	f7f6 f8f8 	bl	80038a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	2101      	movs	r1, #1
 800d6b4:	4827      	ldr	r0, [pc, #156]	; (800d754 <main+0xf4>)
 800d6b6:	f7f6 f8f3 	bl	80038a0 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	4826      	ldr	r0, [pc, #152]	; (800d758 <main+0xf8>)
 800d6be:	f7f8 fdeb 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800d6c2:	2104      	movs	r1, #4
 800d6c4:	4824      	ldr	r0, [pc, #144]	; (800d758 <main+0xf8>)
 800d6c6:	f7f8 fde7 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800d6ca:	2108      	movs	r1, #8
 800d6cc:	4822      	ldr	r0, [pc, #136]	; (800d758 <main+0xf8>)
 800d6ce:	f7f8 fde3 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	4821      	ldr	r0, [pc, #132]	; (800d75c <main+0xfc>)
 800d6d6:	f7f8 fddf 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800d6da:	2104      	movs	r1, #4
 800d6dc:	481f      	ldr	r0, [pc, #124]	; (800d75c <main+0xfc>)
 800d6de:	f7f8 fddb 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800d6e2:	2108      	movs	r1, #8
 800d6e4:	481d      	ldr	r0, [pc, #116]	; (800d75c <main+0xfc>)
 800d6e6:	f7f8 fdd7 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	481c      	ldr	r0, [pc, #112]	; (800d760 <main+0x100>)
 800d6ee:	f7f8 fdd3 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800d6f2:	2104      	movs	r1, #4
 800d6f4:	481a      	ldr	r0, [pc, #104]	; (800d760 <main+0x100>)
 800d6f6:	f7f8 fdcf 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800d6fa:	2108      	movs	r1, #8
 800d6fc:	4818      	ldr	r0, [pc, #96]	; (800d760 <main+0x100>)
 800d6fe:	f7f8 fdcb 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800d702:	2104      	movs	r1, #4
 800d704:	4817      	ldr	r0, [pc, #92]	; (800d764 <main+0x104>)
 800d706:	f7f8 fdc7 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800d70a:	2108      	movs	r1, #8
 800d70c:	4815      	ldr	r0, [pc, #84]	; (800d764 <main+0x104>)
 800d70e:	f7f8 fdc3 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800d712:	210c      	movs	r1, #12
 800d714:	4813      	ldr	r0, [pc, #76]	; (800d764 <main+0x104>)
 800d716:	f7f8 fdbf 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800d71a:	2100      	movs	r1, #0
 800d71c:	4812      	ldr	r0, [pc, #72]	; (800d768 <main+0x108>)
 800d71e:	f7f8 fdbb 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800d722:	2104      	movs	r1, #4
 800d724:	4810      	ldr	r0, [pc, #64]	; (800d768 <main+0x108>)
 800d726:	f7f8 fdb7 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800d72a:	2108      	movs	r1, #8
 800d72c:	480f      	ldr	r0, [pc, #60]	; (800d76c <main+0x10c>)
 800d72e:	f7f8 fdb3 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800d732:	2100      	movs	r1, #0
 800d734:	480e      	ldr	r0, [pc, #56]	; (800d770 <main+0x110>)
 800d736:	f7f8 fdaf 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800d73a:	2100      	movs	r1, #0
 800d73c:	480d      	ldr	r0, [pc, #52]	; (800d774 <main+0x114>)
 800d73e:	f7f8 fdab 	bl	8006298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800d742:	2104      	movs	r1, #4
 800d744:	480b      	ldr	r0, [pc, #44]	; (800d774 <main+0x114>)
 800d746:	f7f8 fda7 	bl	8006298 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800d74a:	f7ff f9b1 	bl	800cab0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800d74e:	f7fc fd7b 	bl	800a248 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800d752:	e7fe      	b.n	800d752 <main+0xf2>
 800d754:	58020800 	.word	0x58020800
 800d758:	24006fe4 	.word	0x24006fe4
 800d75c:	24007030 	.word	0x24007030
 800d760:	24006f98 	.word	0x24006f98
 800d764:	24006eb4 	.word	0x24006eb4
 800d768:	24006f4c 	.word	0x24006f4c
 800d76c:	24006e68 	.word	0x24006e68
 800d770:	2400707c 	.word	0x2400707c
 800d774:	24006f00 	.word	0x24006f00

0800d778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b09c      	sub	sp, #112	; 0x70
 800d77c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d77e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d782:	224c      	movs	r2, #76	; 0x4c
 800d784:	2100      	movs	r1, #0
 800d786:	4618      	mov	r0, r3
 800d788:	f001 ff2e 	bl	800f5e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d78c:	1d3b      	adds	r3, r7, #4
 800d78e:	2220      	movs	r2, #32
 800d790:	2100      	movs	r1, #0
 800d792:	4618      	mov	r0, r3
 800d794:	f001 ff28 	bl	800f5e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800d798:	2002      	movs	r0, #2
 800d79a:	f7f6 f8b5 	bl	8003908 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d79e:	2300      	movs	r3, #0
 800d7a0:	603b      	str	r3, [r7, #0]
 800d7a2:	4b30      	ldr	r3, [pc, #192]	; (800d864 <SystemClock_Config+0xec>)
 800d7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a6:	4a2f      	ldr	r2, [pc, #188]	; (800d864 <SystemClock_Config+0xec>)
 800d7a8:	f023 0301 	bic.w	r3, r3, #1
 800d7ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7ae:	4b2d      	ldr	r3, [pc, #180]	; (800d864 <SystemClock_Config+0xec>)
 800d7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b2:	f003 0301 	and.w	r3, r3, #1
 800d7b6:	603b      	str	r3, [r7, #0]
 800d7b8:	4b2b      	ldr	r3, [pc, #172]	; (800d868 <SystemClock_Config+0xf0>)
 800d7ba:	699b      	ldr	r3, [r3, #24]
 800d7bc:	4a2a      	ldr	r2, [pc, #168]	; (800d868 <SystemClock_Config+0xf0>)
 800d7be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d7c2:	6193      	str	r3, [r2, #24]
 800d7c4:	4b28      	ldr	r3, [pc, #160]	; (800d868 <SystemClock_Config+0xf0>)
 800d7c6:	699b      	ldr	r3, [r3, #24]
 800d7c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d7cc:	603b      	str	r3, [r7, #0]
 800d7ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800d7d0:	bf00      	nop
 800d7d2:	4b25      	ldr	r3, [pc, #148]	; (800d868 <SystemClock_Config+0xf0>)
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d7da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7de:	d1f8      	bne.n	800d7d2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d7e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d7e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d7ea:	2302      	movs	r3, #2
 800d7ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d7ee:	2302      	movs	r3, #2
 800d7f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800d7f2:	2305      	movs	r3, #5
 800d7f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800d7f6:	23a0      	movs	r3, #160	; 0xa0
 800d7f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800d7fe:	2302      	movs	r3, #2
 800d800:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800d802:	2302      	movs	r3, #2
 800d804:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800d806:	2308      	movs	r3, #8
 800d808:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800d80a:	2300      	movs	r3, #0
 800d80c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d816:	4618      	mov	r0, r3
 800d818:	f7f6 f8b0 	bl	800397c <HAL_RCC_OscConfig>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800d822:	f000 f835 	bl	800d890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d826:	233f      	movs	r3, #63	; 0x3f
 800d828:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d82a:	2303      	movs	r3, #3
 800d82c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800d82e:	2300      	movs	r3, #0
 800d830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800d832:	2308      	movs	r3, #8
 800d834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800d836:	2340      	movs	r3, #64	; 0x40
 800d838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800d83a:	2340      	movs	r3, #64	; 0x40
 800d83c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800d83e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d842:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800d844:	2340      	movs	r3, #64	; 0x40
 800d846:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d848:	1d3b      	adds	r3, r7, #4
 800d84a:	2102      	movs	r1, #2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7f6 fcc1 	bl	80041d4 <HAL_RCC_ClockConfig>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d001      	beq.n	800d85c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800d858:	f000 f81a 	bl	800d890 <Error_Handler>
  }
}
 800d85c:	bf00      	nop
 800d85e:	3770      	adds	r7, #112	; 0x70
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	58000400 	.word	0x58000400
 800d868:	58024800 	.word	0x58024800

0800d86c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a04      	ldr	r2, [pc, #16]	; (800d88c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d101      	bne.n	800d882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800d87e:	f7f2 fee7 	bl	8000650 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800d882:	bf00      	nop
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	40001000 	.word	0x40001000

0800d890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d890:	b480      	push	{r7}
 800d892:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d894:	b672      	cpsid	i
}
 800d896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d898:	e7fe      	b.n	800d898 <Error_Handler+0x8>
	...

0800d89c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d8a2:	4b0c      	ldr	r3, [pc, #48]	; (800d8d4 <HAL_MspInit+0x38>)
 800d8a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8a8:	4a0a      	ldr	r2, [pc, #40]	; (800d8d4 <HAL_MspInit+0x38>)
 800d8aa:	f043 0302 	orr.w	r3, r3, #2
 800d8ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d8b2:	4b08      	ldr	r3, [pc, #32]	; (800d8d4 <HAL_MspInit+0x38>)
 800d8b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8b8:	f003 0302 	and.w	r3, r3, #2
 800d8bc:	607b      	str	r3, [r7, #4]
 800d8be:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	210f      	movs	r1, #15
 800d8c4:	f06f 0001 	mvn.w	r0, #1
 800d8c8:	f7f2 ffa6 	bl	8000818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d8cc:	bf00      	nop
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	58024400 	.word	0x58024400

0800d8d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b090      	sub	sp, #64	; 0x40
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b0f      	cmp	r3, #15
 800d8e4:	d827      	bhi.n	800d936 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	6879      	ldr	r1, [r7, #4]
 800d8ea:	2036      	movs	r0, #54	; 0x36
 800d8ec:	f7f2 ff94 	bl	8000818 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d8f0:	2036      	movs	r0, #54	; 0x36
 800d8f2:	f7f2 ffab 	bl	800084c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800d8f6:	4a29      	ldr	r2, [pc, #164]	; (800d99c <HAL_InitTick+0xc4>)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800d8fc:	4b28      	ldr	r3, [pc, #160]	; (800d9a0 <HAL_InitTick+0xc8>)
 800d8fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d902:	4a27      	ldr	r2, [pc, #156]	; (800d9a0 <HAL_InitTick+0xc8>)
 800d904:	f043 0310 	orr.w	r3, r3, #16
 800d908:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d90c:	4b24      	ldr	r3, [pc, #144]	; (800d9a0 <HAL_InitTick+0xc8>)
 800d90e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d912:	f003 0310 	and.w	r3, r3, #16
 800d916:	60fb      	str	r3, [r7, #12]
 800d918:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d91a:	f107 0210 	add.w	r2, r7, #16
 800d91e:	f107 0314 	add.w	r3, r7, #20
 800d922:	4611      	mov	r1, r2
 800d924:	4618      	mov	r0, r3
 800d926:	f7f6 ffe1 	bl	80048ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800d92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800d92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d930:	2b00      	cmp	r3, #0
 800d932:	d106      	bne.n	800d942 <HAL_InitTick+0x6a>
 800d934:	e001      	b.n	800d93a <HAL_InitTick+0x62>
    return HAL_ERROR;
 800d936:	2301      	movs	r3, #1
 800d938:	e02b      	b.n	800d992 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800d93a:	f7f6 ffab 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 800d93e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d940:	e004      	b.n	800d94c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800d942:	f7f6 ffa7 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 800d946:	4603      	mov	r3, r0
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d94e:	4a15      	ldr	r2, [pc, #84]	; (800d9a4 <HAL_InitTick+0xcc>)
 800d950:	fba2 2303 	umull	r2, r3, r2, r3
 800d954:	0c9b      	lsrs	r3, r3, #18
 800d956:	3b01      	subs	r3, #1
 800d958:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800d95a:	4b13      	ldr	r3, [pc, #76]	; (800d9a8 <HAL_InitTick+0xd0>)
 800d95c:	4a13      	ldr	r2, [pc, #76]	; (800d9ac <HAL_InitTick+0xd4>)
 800d95e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800d960:	4b11      	ldr	r3, [pc, #68]	; (800d9a8 <HAL_InitTick+0xd0>)
 800d962:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d966:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800d968:	4a0f      	ldr	r2, [pc, #60]	; (800d9a8 <HAL_InitTick+0xd0>)
 800d96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800d96e:	4b0e      	ldr	r3, [pc, #56]	; (800d9a8 <HAL_InitTick+0xd0>)
 800d970:	2200      	movs	r2, #0
 800d972:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d974:	4b0c      	ldr	r3, [pc, #48]	; (800d9a8 <HAL_InitTick+0xd0>)
 800d976:	2200      	movs	r2, #0
 800d978:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800d97a:	480b      	ldr	r0, [pc, #44]	; (800d9a8 <HAL_InitTick+0xd0>)
 800d97c:	f7f8 fb5a 	bl	8006034 <HAL_TIM_Base_Init>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d104      	bne.n	800d990 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800d986:	4808      	ldr	r0, [pc, #32]	; (800d9a8 <HAL_InitTick+0xd0>)
 800d988:	f7f8 fbac 	bl	80060e4 <HAL_TIM_Base_Start_IT>
 800d98c:	4603      	mov	r3, r0
 800d98e:	e000      	b.n	800d992 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800d990:	2301      	movs	r3, #1
}
 800d992:	4618      	mov	r0, r3
 800d994:	3740      	adds	r7, #64	; 0x40
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	24000000 	.word	0x24000000
 800d9a0:	58024400 	.word	0x58024400
 800d9a4:	431bde83 	.word	0x431bde83
 800d9a8:	24006e1c 	.word	0x24006e1c
 800d9ac:	40001000 	.word	0x40001000

0800d9b0 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800d9b4:	e7fe      	b.n	800d9b4 <NMI_Handler+0x4>
	...

0800d9b8 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	af00      	add	r7, sp, #0

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
	{
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d9c2:	4802      	ldr	r0, [pc, #8]	; (800d9cc <HardFault_Handler+0x14>)
 800d9c4:	f7f5 ff6c 	bl	80038a0 <HAL_GPIO_WritePin>
 800d9c8:	e7f8      	b.n	800d9bc <HardFault_Handler+0x4>
 800d9ca:	bf00      	nop
 800d9cc:	58020800 	.word	0x58020800

0800d9d0 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 800d9d4:	e7fe      	b.n	800d9d4 <MemManage_Handler+0x4>

0800d9d6 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800d9d6:	b480      	push	{r7}
 800d9d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800d9da:	e7fe      	b.n	800d9da <BusFault_Handler+0x4>

0800d9dc <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 800d9e0:	e7fe      	b.n	800d9e0 <UsageFault_Handler+0x4>

0800d9e2 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800d9e2:	b480      	push	{r7}
 800d9e4:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800d9e6:	bf00      	nop
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800d9f4:	4802      	ldr	r0, [pc, #8]	; (800da00 <DMA1_Stream0_IRQHandler+0x10>)
 800d9f6:	f7f4 fa5f 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800d9fa:	bf00      	nop
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	240074e8 	.word	0x240074e8

0800da04 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800da08:	4802      	ldr	r0, [pc, #8]	; (800da14 <DMA1_Stream1_IRQHandler+0x10>)
 800da0a:	f7f4 fa55 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800da0e:	bf00      	nop
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	24007560 	.word	0x24007560

0800da18 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800da1c:	4802      	ldr	r0, [pc, #8]	; (800da28 <DMA1_Stream2_IRQHandler+0x10>)
 800da1e:	f7f4 fa4b 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800da22:	bf00      	nop
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	240070c8 	.word	0x240070c8

0800da2c <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800da30:	4802      	ldr	r0, [pc, #8]	; (800da3c <DMA1_Stream3_IRQHandler+0x10>)
 800da32:	f7f4 fa41 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800da36:	bf00      	nop
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	24007350 	.word	0x24007350

0800da40 <DMA1_Stream4_IRQHandler>:

/**
 * @brief This function handles DMA1 stream4 global interrupt.
 */
void DMA1_Stream4_IRQHandler(void)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

	/* USER CODE END DMA1_Stream4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800da44:	4802      	ldr	r0, [pc, #8]	; (800da50 <DMA1_Stream4_IRQHandler+0x10>)
 800da46:	f7f4 fa37 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

	/* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800da4a:	bf00      	nop
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	24007140 	.word	0x24007140

0800da54 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800da58:	4802      	ldr	r0, [pc, #8]	; (800da64 <DMA1_Stream5_IRQHandler+0x10>)
 800da5a:	f7f4 fa2d 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800da5e:	bf00      	nop
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	24007248 	.word	0x24007248

0800da68 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&AXIS_UART, UART_FLAG_IDLE);
 800da72:	4b40      	ldr	r3, [pc, #256]	; (800db74 <USART2_IRQHandler+0x10c>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	69db      	ldr	r3, [r3, #28]
 800da78:	f003 0310 	and.w	r3, r3, #16
 800da7c:	2b10      	cmp	r3, #16
 800da7e:	bf0c      	ite	eq
 800da80:	2301      	moveq	r3, #1
 800da82:	2300      	movne	r3, #0
 800da84:	b2db      	uxtb	r3, r3
 800da86:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d06b      	beq.n	800db66 <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&AXIS_UART);
 800da8e:	4b39      	ldr	r3, [pc, #228]	; (800db74 <USART2_IRQHandler+0x10c>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2210      	movs	r2, #16
 800da94:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800da96:	4b38      	ldr	r3, [pc, #224]	; (800db78 <USART2_IRQHandler+0x110>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a38      	ldr	r2, [pc, #224]	; (800db7c <USART2_IRQHandler+0x114>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d04a      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800daa0:	4b35      	ldr	r3, [pc, #212]	; (800db78 <USART2_IRQHandler+0x110>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a36      	ldr	r2, [pc, #216]	; (800db80 <USART2_IRQHandler+0x118>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d045      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800daaa:	4b33      	ldr	r3, [pc, #204]	; (800db78 <USART2_IRQHandler+0x110>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a35      	ldr	r2, [pc, #212]	; (800db84 <USART2_IRQHandler+0x11c>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d040      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800dab4:	4b30      	ldr	r3, [pc, #192]	; (800db78 <USART2_IRQHandler+0x110>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a33      	ldr	r2, [pc, #204]	; (800db88 <USART2_IRQHandler+0x120>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d03b      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800dabe:	4b2e      	ldr	r3, [pc, #184]	; (800db78 <USART2_IRQHandler+0x110>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a32      	ldr	r2, [pc, #200]	; (800db8c <USART2_IRQHandler+0x124>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d036      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800dac8:	4b2b      	ldr	r3, [pc, #172]	; (800db78 <USART2_IRQHandler+0x110>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a30      	ldr	r2, [pc, #192]	; (800db90 <USART2_IRQHandler+0x128>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d031      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800dad2:	4b29      	ldr	r3, [pc, #164]	; (800db78 <USART2_IRQHandler+0x110>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a2f      	ldr	r2, [pc, #188]	; (800db94 <USART2_IRQHandler+0x12c>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d02c      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800dadc:	4b26      	ldr	r3, [pc, #152]	; (800db78 <USART2_IRQHandler+0x110>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a2d      	ldr	r2, [pc, #180]	; (800db98 <USART2_IRQHandler+0x130>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d027      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800dae6:	4b24      	ldr	r3, [pc, #144]	; (800db78 <USART2_IRQHandler+0x110>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a2c      	ldr	r2, [pc, #176]	; (800db9c <USART2_IRQHandler+0x134>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d022      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800daf0:	4b21      	ldr	r3, [pc, #132]	; (800db78 <USART2_IRQHandler+0x110>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a2a      	ldr	r2, [pc, #168]	; (800dba0 <USART2_IRQHandler+0x138>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d01d      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800dafa:	4b1f      	ldr	r3, [pc, #124]	; (800db78 <USART2_IRQHandler+0x110>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a29      	ldr	r2, [pc, #164]	; (800dba4 <USART2_IRQHandler+0x13c>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d018      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800db04:	4b1c      	ldr	r3, [pc, #112]	; (800db78 <USART2_IRQHandler+0x110>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a27      	ldr	r2, [pc, #156]	; (800dba8 <USART2_IRQHandler+0x140>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d013      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800db0e:	4b1a      	ldr	r3, [pc, #104]	; (800db78 <USART2_IRQHandler+0x110>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a26      	ldr	r2, [pc, #152]	; (800dbac <USART2_IRQHandler+0x144>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d00e      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800db18:	4b17      	ldr	r3, [pc, #92]	; (800db78 <USART2_IRQHandler+0x110>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a24      	ldr	r2, [pc, #144]	; (800dbb0 <USART2_IRQHandler+0x148>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d009      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800db22:	4b15      	ldr	r3, [pc, #84]	; (800db78 <USART2_IRQHandler+0x110>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a23      	ldr	r2, [pc, #140]	; (800dbb4 <USART2_IRQHandler+0x14c>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d004      	beq.n	800db36 <USART2_IRQHandler+0xce>
 800db2c:	4b12      	ldr	r3, [pc, #72]	; (800db78 <USART2_IRQHandler+0x110>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a21      	ldr	r2, [pc, #132]	; (800dbb8 <USART2_IRQHandler+0x150>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d103      	bne.n	800db3e <USART2_IRQHandler+0xd6>
 800db36:	4b10      	ldr	r3, [pc, #64]	; (800db78 <USART2_IRQHandler+0x110>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	e002      	b.n	800db44 <USART2_IRQHandler+0xdc>
 800db3e:	4b0e      	ldr	r3, [pc, #56]	; (800db78 <USART2_IRQHandler+0x110>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&AXIS_UART);
 800db44:	480b      	ldr	r0, [pc, #44]	; (800db74 <USART2_IRQHandler+0x10c>)
 800db46:	f7f9 fe9f 	bl	8007888 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&AXIS_UART, UART_IT_IDLE);
 800db4a:	4b0a      	ldr	r3, [pc, #40]	; (800db74 <USART2_IRQHandler+0x10c>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	4b08      	ldr	r3, [pc, #32]	; (800db74 <USART2_IRQHandler+0x10c>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f022 0210 	bic.w	r2, r2, #16
 800db58:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931_DONE_semHandle, pdFALSE);
 800db5a:	4b18      	ldr	r3, [pc, #96]	; (800dbbc <USART2_IRQHandler+0x154>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2100      	movs	r1, #0
 800db60:	4618      	mov	r0, r3
 800db62:	f7fc ff83 	bl	800aa6c <xQueueGiveFromISR>
	}
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800db66:	4803      	ldr	r0, [pc, #12]	; (800db74 <USART2_IRQHandler+0x10c>)
 800db68:	f7f9 ff22 	bl	80079b0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}
 800db74:	24007458 	.word	0x24007458
 800db78:	240070c8 	.word	0x240070c8
 800db7c:	40020010 	.word	0x40020010
 800db80:	40020028 	.word	0x40020028
 800db84:	40020040 	.word	0x40020040
 800db88:	40020058 	.word	0x40020058
 800db8c:	40020070 	.word	0x40020070
 800db90:	40020088 	.word	0x40020088
 800db94:	400200a0 	.word	0x400200a0
 800db98:	400200b8 	.word	0x400200b8
 800db9c:	40020410 	.word	0x40020410
 800dba0:	40020428 	.word	0x40020428
 800dba4:	40020440 	.word	0x40020440
 800dba8:	40020458 	.word	0x40020458
 800dbac:	40020470 	.word	0x40020470
 800dbb0:	40020488 	.word	0x40020488
 800dbb4:	400204a0 	.word	0x400204a0
 800dbb8:	400204b8 	.word	0x400204b8
 800dbbc:	240041f0 	.word	0x240041f0

0800dbc0 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&Master_UART, UART_FLAG_IDLE);
 800dbca:	4b40      	ldr	r3, [pc, #256]	; (800dccc <USART3_IRQHandler+0x10c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	69db      	ldr	r3, [r3, #28]
 800dbd0:	f003 0310 	and.w	r3, r3, #16
 800dbd4:	2b10      	cmp	r3, #16
 800dbd6:	bf0c      	ite	eq
 800dbd8:	2301      	moveq	r3, #1
 800dbda:	2300      	movne	r3, #0
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d06b      	beq.n	800dcbe <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&Master_UART);
 800dbe6:	4b39      	ldr	r3, [pc, #228]	; (800dccc <USART3_IRQHandler+0x10c>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2210      	movs	r2, #16
 800dbec:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&Master_UART);
 800dbee:	4837      	ldr	r0, [pc, #220]	; (800dccc <USART3_IRQHandler+0x10c>)
 800dbf0:	f7f9 fe4a 	bl	8007888 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 800dbf4:	4b36      	ldr	r3, [pc, #216]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a36      	ldr	r2, [pc, #216]	; (800dcd4 <USART3_IRQHandler+0x114>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d04a      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dbfe:	4b34      	ldr	r3, [pc, #208]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a35      	ldr	r2, [pc, #212]	; (800dcd8 <USART3_IRQHandler+0x118>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d045      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc08:	4b31      	ldr	r3, [pc, #196]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a33      	ldr	r2, [pc, #204]	; (800dcdc <USART3_IRQHandler+0x11c>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d040      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc12:	4b2f      	ldr	r3, [pc, #188]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	4a32      	ldr	r2, [pc, #200]	; (800dce0 <USART3_IRQHandler+0x120>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d03b      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc1c:	4b2c      	ldr	r3, [pc, #176]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a30      	ldr	r2, [pc, #192]	; (800dce4 <USART3_IRQHandler+0x124>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d036      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc26:	4b2a      	ldr	r3, [pc, #168]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a2f      	ldr	r2, [pc, #188]	; (800dce8 <USART3_IRQHandler+0x128>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d031      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc30:	4b27      	ldr	r3, [pc, #156]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a2d      	ldr	r2, [pc, #180]	; (800dcec <USART3_IRQHandler+0x12c>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d02c      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc3a:	4b25      	ldr	r3, [pc, #148]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a2c      	ldr	r2, [pc, #176]	; (800dcf0 <USART3_IRQHandler+0x130>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d027      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc44:	4b22      	ldr	r3, [pc, #136]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a2a      	ldr	r2, [pc, #168]	; (800dcf4 <USART3_IRQHandler+0x134>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d022      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc4e:	4b20      	ldr	r3, [pc, #128]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a29      	ldr	r2, [pc, #164]	; (800dcf8 <USART3_IRQHandler+0x138>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d01d      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc58:	4b1d      	ldr	r3, [pc, #116]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a27      	ldr	r2, [pc, #156]	; (800dcfc <USART3_IRQHandler+0x13c>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d018      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc62:	4b1b      	ldr	r3, [pc, #108]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a26      	ldr	r2, [pc, #152]	; (800dd00 <USART3_IRQHandler+0x140>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d013      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc6c:	4b18      	ldr	r3, [pc, #96]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a24      	ldr	r2, [pc, #144]	; (800dd04 <USART3_IRQHandler+0x144>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d00e      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc76:	4b16      	ldr	r3, [pc, #88]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a23      	ldr	r2, [pc, #140]	; (800dd08 <USART3_IRQHandler+0x148>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d009      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc80:	4b13      	ldr	r3, [pc, #76]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a21      	ldr	r2, [pc, #132]	; (800dd0c <USART3_IRQHandler+0x14c>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d004      	beq.n	800dc94 <USART3_IRQHandler+0xd4>
 800dc8a:	4b11      	ldr	r3, [pc, #68]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a20      	ldr	r2, [pc, #128]	; (800dd10 <USART3_IRQHandler+0x150>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d103      	bne.n	800dc9c <USART3_IRQHandler+0xdc>
 800dc94:	4b0e      	ldr	r3, [pc, #56]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	e002      	b.n	800dca2 <USART3_IRQHandler+0xe2>
 800dc9c:	4b0c      	ldr	r3, [pc, #48]	; (800dcd0 <USART3_IRQHandler+0x110>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&Master_UART, UART_IT_IDLE);
 800dca2:	4b0a      	ldr	r3, [pc, #40]	; (800dccc <USART3_IRQHandler+0x10c>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	4b08      	ldr	r3, [pc, #32]	; (800dccc <USART3_IRQHandler+0x10c>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f022 0210 	bic.w	r2, r2, #16
 800dcb0:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(CMD_DONE_semHandle, pdFALSE);
 800dcb2:	4b18      	ldr	r3, [pc, #96]	; (800dd14 <USART3_IRQHandler+0x154>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fc fed7 	bl	800aa6c <xQueueGiveFromISR>
	}
	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 800dcbe:	4803      	ldr	r0, [pc, #12]	; (800dccc <USART3_IRQHandler+0x10c>)
 800dcc0:	f7f9 fe76 	bl	80079b0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 800dcc4:	bf00      	nop
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	240071b8 	.word	0x240071b8
 800dcd0:	24007140 	.word	0x24007140
 800dcd4:	40020010 	.word	0x40020010
 800dcd8:	40020028 	.word	0x40020028
 800dcdc:	40020040 	.word	0x40020040
 800dce0:	40020058 	.word	0x40020058
 800dce4:	40020070 	.word	0x40020070
 800dce8:	40020088 	.word	0x40020088
 800dcec:	400200a0 	.word	0x400200a0
 800dcf0:	400200b8 	.word	0x400200b8
 800dcf4:	40020410 	.word	0x40020410
 800dcf8:	40020428 	.word	0x40020428
 800dcfc:	40020440 	.word	0x40020440
 800dd00:	40020458 	.word	0x40020458
 800dd04:	40020470 	.word	0x40020470
 800dd08:	40020488 	.word	0x40020488
 800dd0c:	400204a0 	.word	0x400204a0
 800dd10:	400204b8 	.word	0x400204b8
 800dd14:	24005390 	.word	0x24005390

0800dd18 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&TEMPER_UART, UART_FLAG_IDLE);
 800dd22:	4b40      	ldr	r3, [pc, #256]	; (800de24 <UART5_IRQHandler+0x10c>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	69db      	ldr	r3, [r3, #28]
 800dd28:	f003 0310 	and.w	r3, r3, #16
 800dd2c:	2b10      	cmp	r3, #16
 800dd2e:	bf0c      	ite	eq
 800dd30:	2301      	moveq	r3, #1
 800dd32:	2300      	movne	r3, #0
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d06b      	beq.n	800de16 <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&TEMPER_UART);
 800dd3e:	4b39      	ldr	r3, [pc, #228]	; (800de24 <UART5_IRQHandler+0x10c>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2210      	movs	r2, #16
 800dd44:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&TEMPER_UART);
 800dd46:	4837      	ldr	r0, [pc, #220]	; (800de24 <UART5_IRQHandler+0x10c>)
 800dd48:	f7f9 fd9e 	bl	8007888 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 800dd4c:	4b36      	ldr	r3, [pc, #216]	; (800de28 <UART5_IRQHandler+0x110>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a36      	ldr	r2, [pc, #216]	; (800de2c <UART5_IRQHandler+0x114>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d04a      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800dd56:	4b34      	ldr	r3, [pc, #208]	; (800de28 <UART5_IRQHandler+0x110>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a35      	ldr	r2, [pc, #212]	; (800de30 <UART5_IRQHandler+0x118>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d045      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800dd60:	4b31      	ldr	r3, [pc, #196]	; (800de28 <UART5_IRQHandler+0x110>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a33      	ldr	r2, [pc, #204]	; (800de34 <UART5_IRQHandler+0x11c>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d040      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800dd6a:	4b2f      	ldr	r3, [pc, #188]	; (800de28 <UART5_IRQHandler+0x110>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a32      	ldr	r2, [pc, #200]	; (800de38 <UART5_IRQHandler+0x120>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d03b      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800dd74:	4b2c      	ldr	r3, [pc, #176]	; (800de28 <UART5_IRQHandler+0x110>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a30      	ldr	r2, [pc, #192]	; (800de3c <UART5_IRQHandler+0x124>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d036      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800dd7e:	4b2a      	ldr	r3, [pc, #168]	; (800de28 <UART5_IRQHandler+0x110>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a2f      	ldr	r2, [pc, #188]	; (800de40 <UART5_IRQHandler+0x128>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d031      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800dd88:	4b27      	ldr	r3, [pc, #156]	; (800de28 <UART5_IRQHandler+0x110>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a2d      	ldr	r2, [pc, #180]	; (800de44 <UART5_IRQHandler+0x12c>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d02c      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800dd92:	4b25      	ldr	r3, [pc, #148]	; (800de28 <UART5_IRQHandler+0x110>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a2c      	ldr	r2, [pc, #176]	; (800de48 <UART5_IRQHandler+0x130>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d027      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800dd9c:	4b22      	ldr	r3, [pc, #136]	; (800de28 <UART5_IRQHandler+0x110>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a2a      	ldr	r2, [pc, #168]	; (800de4c <UART5_IRQHandler+0x134>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d022      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800dda6:	4b20      	ldr	r3, [pc, #128]	; (800de28 <UART5_IRQHandler+0x110>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a29      	ldr	r2, [pc, #164]	; (800de50 <UART5_IRQHandler+0x138>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d01d      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800ddb0:	4b1d      	ldr	r3, [pc, #116]	; (800de28 <UART5_IRQHandler+0x110>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a27      	ldr	r2, [pc, #156]	; (800de54 <UART5_IRQHandler+0x13c>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d018      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800ddba:	4b1b      	ldr	r3, [pc, #108]	; (800de28 <UART5_IRQHandler+0x110>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a26      	ldr	r2, [pc, #152]	; (800de58 <UART5_IRQHandler+0x140>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d013      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800ddc4:	4b18      	ldr	r3, [pc, #96]	; (800de28 <UART5_IRQHandler+0x110>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4a24      	ldr	r2, [pc, #144]	; (800de5c <UART5_IRQHandler+0x144>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d00e      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800ddce:	4b16      	ldr	r3, [pc, #88]	; (800de28 <UART5_IRQHandler+0x110>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4a23      	ldr	r2, [pc, #140]	; (800de60 <UART5_IRQHandler+0x148>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d009      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800ddd8:	4b13      	ldr	r3, [pc, #76]	; (800de28 <UART5_IRQHandler+0x110>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a21      	ldr	r2, [pc, #132]	; (800de64 <UART5_IRQHandler+0x14c>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d004      	beq.n	800ddec <UART5_IRQHandler+0xd4>
 800dde2:	4b11      	ldr	r3, [pc, #68]	; (800de28 <UART5_IRQHandler+0x110>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a20      	ldr	r2, [pc, #128]	; (800de68 <UART5_IRQHandler+0x150>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d103      	bne.n	800ddf4 <UART5_IRQHandler+0xdc>
 800ddec:	4b0e      	ldr	r3, [pc, #56]	; (800de28 <UART5_IRQHandler+0x110>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	e002      	b.n	800ddfa <UART5_IRQHandler+0xe2>
 800ddf4:	4b0c      	ldr	r3, [pc, #48]	; (800de28 <UART5_IRQHandler+0x110>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 800ddfa:	4b0a      	ldr	r3, [pc, #40]	; (800de24 <UART5_IRQHandler+0x10c>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	4b08      	ldr	r3, [pc, #32]	; (800de24 <UART5_IRQHandler+0x10c>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f022 0210 	bic.w	r2, r2, #16
 800de08:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39_Done_semHandle, pdFALSE);
 800de0a:	4b18      	ldr	r3, [pc, #96]	; (800de6c <UART5_IRQHandler+0x154>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2100      	movs	r1, #0
 800de10:	4618      	mov	r0, r3
 800de12:	f7fc fe2b 	bl	800aa6c <xQueueGiveFromISR>
	}
	/* USER CODE END UART5_IRQn 0 */
	HAL_UART_IRQHandler(&huart5);
 800de16:	4803      	ldr	r0, [pc, #12]	; (800de24 <UART5_IRQHandler+0x10c>)
 800de18:	f7f9 fdca 	bl	80079b0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART5_IRQn 1 */

	/* USER CODE END UART5_IRQn 1 */
}
 800de1c:	bf00      	nop
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	240072c0 	.word	0x240072c0
 800de28:	240074e8 	.word	0x240074e8
 800de2c:	40020010 	.word	0x40020010
 800de30:	40020028 	.word	0x40020028
 800de34:	40020040 	.word	0x40020040
 800de38:	40020058 	.word	0x40020058
 800de3c:	40020070 	.word	0x40020070
 800de40:	40020088 	.word	0x40020088
 800de44:	400200a0 	.word	0x400200a0
 800de48:	400200b8 	.word	0x400200b8
 800de4c:	40020410 	.word	0x40020410
 800de50:	40020428 	.word	0x40020428
 800de54:	40020440 	.word	0x40020440
 800de58:	40020458 	.word	0x40020458
 800de5c:	40020470 	.word	0x40020470
 800de60:	40020488 	.word	0x40020488
 800de64:	400204a0 	.word	0x400204a0
 800de68:	400204b8 	.word	0x400204b8
 800de6c:	24005570 	.word	0x24005570

0800de70 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 800de74:	4802      	ldr	r0, [pc, #8]	; (800de80 <TIM6_DAC_IRQHandler+0x10>)
 800de76:	f7f8 fb1d 	bl	80064b4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800de7a:	bf00      	nop
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	24006e1c 	.word	0x24006e1c

0800de84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800de84:	b480      	push	{r7}
 800de86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800de88:	4b37      	ldr	r3, [pc, #220]	; (800df68 <SystemInit+0xe4>)
 800de8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de8e:	4a36      	ldr	r2, [pc, #216]	; (800df68 <SystemInit+0xe4>)
 800de90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800de98:	4b34      	ldr	r3, [pc, #208]	; (800df6c <SystemInit+0xe8>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f003 030f 	and.w	r3, r3, #15
 800dea0:	2b06      	cmp	r3, #6
 800dea2:	d807      	bhi.n	800deb4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800dea4:	4b31      	ldr	r3, [pc, #196]	; (800df6c <SystemInit+0xe8>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f023 030f 	bic.w	r3, r3, #15
 800deac:	4a2f      	ldr	r2, [pc, #188]	; (800df6c <SystemInit+0xe8>)
 800deae:	f043 0307 	orr.w	r3, r3, #7
 800deb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800deb4:	4b2e      	ldr	r3, [pc, #184]	; (800df70 <SystemInit+0xec>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4a2d      	ldr	r2, [pc, #180]	; (800df70 <SystemInit+0xec>)
 800deba:	f043 0301 	orr.w	r3, r3, #1
 800debe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800dec0:	4b2b      	ldr	r3, [pc, #172]	; (800df70 <SystemInit+0xec>)
 800dec2:	2200      	movs	r2, #0
 800dec4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800dec6:	4b2a      	ldr	r3, [pc, #168]	; (800df70 <SystemInit+0xec>)
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	4929      	ldr	r1, [pc, #164]	; (800df70 <SystemInit+0xec>)
 800decc:	4b29      	ldr	r3, [pc, #164]	; (800df74 <SystemInit+0xf0>)
 800dece:	4013      	ands	r3, r2
 800ded0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ded2:	4b26      	ldr	r3, [pc, #152]	; (800df6c <SystemInit+0xe8>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f003 0308 	and.w	r3, r3, #8
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d007      	beq.n	800deee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800dede:	4b23      	ldr	r3, [pc, #140]	; (800df6c <SystemInit+0xe8>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f023 030f 	bic.w	r3, r3, #15
 800dee6:	4a21      	ldr	r2, [pc, #132]	; (800df6c <SystemInit+0xe8>)
 800dee8:	f043 0307 	orr.w	r3, r3, #7
 800deec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800deee:	4b20      	ldr	r3, [pc, #128]	; (800df70 <SystemInit+0xec>)
 800def0:	2200      	movs	r2, #0
 800def2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800def4:	4b1e      	ldr	r3, [pc, #120]	; (800df70 <SystemInit+0xec>)
 800def6:	2200      	movs	r2, #0
 800def8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800defa:	4b1d      	ldr	r3, [pc, #116]	; (800df70 <SystemInit+0xec>)
 800defc:	2200      	movs	r2, #0
 800defe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800df00:	4b1b      	ldr	r3, [pc, #108]	; (800df70 <SystemInit+0xec>)
 800df02:	4a1d      	ldr	r2, [pc, #116]	; (800df78 <SystemInit+0xf4>)
 800df04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800df06:	4b1a      	ldr	r3, [pc, #104]	; (800df70 <SystemInit+0xec>)
 800df08:	4a1c      	ldr	r2, [pc, #112]	; (800df7c <SystemInit+0xf8>)
 800df0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800df0c:	4b18      	ldr	r3, [pc, #96]	; (800df70 <SystemInit+0xec>)
 800df0e:	4a1c      	ldr	r2, [pc, #112]	; (800df80 <SystemInit+0xfc>)
 800df10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800df12:	4b17      	ldr	r3, [pc, #92]	; (800df70 <SystemInit+0xec>)
 800df14:	2200      	movs	r2, #0
 800df16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800df18:	4b15      	ldr	r3, [pc, #84]	; (800df70 <SystemInit+0xec>)
 800df1a:	4a19      	ldr	r2, [pc, #100]	; (800df80 <SystemInit+0xfc>)
 800df1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800df1e:	4b14      	ldr	r3, [pc, #80]	; (800df70 <SystemInit+0xec>)
 800df20:	2200      	movs	r2, #0
 800df22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800df24:	4b12      	ldr	r3, [pc, #72]	; (800df70 <SystemInit+0xec>)
 800df26:	4a16      	ldr	r2, [pc, #88]	; (800df80 <SystemInit+0xfc>)
 800df28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800df2a:	4b11      	ldr	r3, [pc, #68]	; (800df70 <SystemInit+0xec>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800df30:	4b0f      	ldr	r3, [pc, #60]	; (800df70 <SystemInit+0xec>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a0e      	ldr	r2, [pc, #56]	; (800df70 <SystemInit+0xec>)
 800df36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800df3c:	4b0c      	ldr	r3, [pc, #48]	; (800df70 <SystemInit+0xec>)
 800df3e:	2200      	movs	r2, #0
 800df40:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800df42:	4b10      	ldr	r3, [pc, #64]	; (800df84 <SystemInit+0x100>)
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	4b10      	ldr	r3, [pc, #64]	; (800df88 <SystemInit+0x104>)
 800df48:	4013      	ands	r3, r2
 800df4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df4e:	d202      	bcs.n	800df56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800df50:	4b0e      	ldr	r3, [pc, #56]	; (800df8c <SystemInit+0x108>)
 800df52:	2201      	movs	r2, #1
 800df54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800df56:	4b0e      	ldr	r3, [pc, #56]	; (800df90 <SystemInit+0x10c>)
 800df58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800df5c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800df5e:	bf00      	nop
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	e000ed00 	.word	0xe000ed00
 800df6c:	52002000 	.word	0x52002000
 800df70:	58024400 	.word	0x58024400
 800df74:	eaf6ed7f 	.word	0xeaf6ed7f
 800df78:	02020200 	.word	0x02020200
 800df7c:	01ff0000 	.word	0x01ff0000
 800df80:	01010280 	.word	0x01010280
 800df84:	5c001000 	.word	0x5c001000
 800df88:	ffff0000 	.word	0xffff0000
 800df8c:	51008108 	.word	0x51008108
 800df90:	52004000 	.word	0x52004000

0800df94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b09a      	sub	sp, #104	; 0x68
 800df98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800df9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800df9e:	2200      	movs	r2, #0
 800dfa0:	601a      	str	r2, [r3, #0]
 800dfa2:	605a      	str	r2, [r3, #4]
 800dfa4:	609a      	str	r2, [r3, #8]
 800dfa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dfa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dfac:	2200      	movs	r2, #0
 800dfae:	601a      	str	r2, [r3, #0]
 800dfb0:	605a      	str	r2, [r3, #4]
 800dfb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dfb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dfb8:	2200      	movs	r2, #0
 800dfba:	601a      	str	r2, [r3, #0]
 800dfbc:	605a      	str	r2, [r3, #4]
 800dfbe:	609a      	str	r2, [r3, #8]
 800dfc0:	60da      	str	r2, [r3, #12]
 800dfc2:	611a      	str	r2, [r3, #16]
 800dfc4:	615a      	str	r2, [r3, #20]
 800dfc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800dfc8:	1d3b      	adds	r3, r7, #4
 800dfca:	222c      	movs	r2, #44	; 0x2c
 800dfcc:	2100      	movs	r1, #0
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f001 fb0a 	bl	800f5e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800dfd4:	4b50      	ldr	r3, [pc, #320]	; (800e118 <MX_TIM1_Init+0x184>)
 800dfd6:	4a51      	ldr	r2, [pc, #324]	; (800e11c <MX_TIM1_Init+0x188>)
 800dfd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800dfda:	4b4f      	ldr	r3, [pc, #316]	; (800e118 <MX_TIM1_Init+0x184>)
 800dfdc:	22c7      	movs	r2, #199	; 0xc7
 800dfde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dfe0:	4b4d      	ldr	r3, [pc, #308]	; (800e118 <MX_TIM1_Init+0x184>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800dfe6:	4b4c      	ldr	r3, [pc, #304]	; (800e118 <MX_TIM1_Init+0x184>)
 800dfe8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800dfec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dfee:	4b4a      	ldr	r3, [pc, #296]	; (800e118 <MX_TIM1_Init+0x184>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800dff4:	4b48      	ldr	r3, [pc, #288]	; (800e118 <MX_TIM1_Init+0x184>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dffa:	4b47      	ldr	r3, [pc, #284]	; (800e118 <MX_TIM1_Init+0x184>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800e000:	4845      	ldr	r0, [pc, #276]	; (800e118 <MX_TIM1_Init+0x184>)
 800e002:	f7f8 f817 	bl	8006034 <HAL_TIM_Base_Init>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800e00c:	f7ff fc40 	bl	800d890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e014:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800e016:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e01a:	4619      	mov	r1, r3
 800e01c:	483e      	ldr	r0, [pc, #248]	; (800e118 <MX_TIM1_Init+0x184>)
 800e01e:	f7f8 fc7d 	bl	800691c <HAL_TIM_ConfigClockSource>
 800e022:	4603      	mov	r3, r0
 800e024:	2b00      	cmp	r3, #0
 800e026:	d001      	beq.n	800e02c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800e028:	f7ff fc32 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800e02c:	483a      	ldr	r0, [pc, #232]	; (800e118 <MX_TIM1_Init+0x184>)
 800e02e:	f7f8 f8d1 	bl	80061d4 <HAL_TIM_PWM_Init>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d001      	beq.n	800e03c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800e038:	f7ff fc2a 	bl	800d890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e03c:	2300      	movs	r3, #0
 800e03e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e040:	2300      	movs	r3, #0
 800e042:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e044:	2300      	movs	r3, #0
 800e046:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800e048:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e04c:	4619      	mov	r1, r3
 800e04e:	4832      	ldr	r0, [pc, #200]	; (800e118 <MX_TIM1_Init+0x184>)
 800e050:	f7f9 f9b8 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 800e054:	4603      	mov	r3, r0
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800e05a:	f7ff fc19 	bl	800d890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e05e:	2360      	movs	r3, #96	; 0x60
 800e060:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800e062:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e066:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e068:	2300      	movs	r3, #0
 800e06a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e06c:	2300      	movs	r3, #0
 800e06e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e070:	2300      	movs	r3, #0
 800e072:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e074:	2300      	movs	r3, #0
 800e076:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e078:	2300      	movs	r3, #0
 800e07a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e07c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e080:	2200      	movs	r2, #0
 800e082:	4619      	mov	r1, r3
 800e084:	4824      	ldr	r0, [pc, #144]	; (800e118 <MX_TIM1_Init+0x184>)
 800e086:	f7f8 fb35 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d001      	beq.n	800e094 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800e090:	f7ff fbfe 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e098:	2204      	movs	r2, #4
 800e09a:	4619      	mov	r1, r3
 800e09c:	481e      	ldr	r0, [pc, #120]	; (800e118 <MX_TIM1_Init+0x184>)
 800e09e:	f7f8 fb29 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d001      	beq.n	800e0ac <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800e0a8:	f7ff fbf2 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e0ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0b0:	2208      	movs	r2, #8
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4818      	ldr	r0, [pc, #96]	; (800e118 <MX_TIM1_Init+0x184>)
 800e0b6:	f7f8 fb1d 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d001      	beq.n	800e0c4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800e0c0:	f7ff fbe6 	bl	800d890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e0d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e0dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800e0e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e0ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800e0f4:	1d3b      	adds	r3, r7, #4
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	4807      	ldr	r0, [pc, #28]	; (800e118 <MX_TIM1_Init+0x184>)
 800e0fa:	f7f9 f9f1 	bl	80074e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 800e104:	f7ff fbc4 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800e108:	4803      	ldr	r0, [pc, #12]	; (800e118 <MX_TIM1_Init+0x184>)
 800e10a:	f000 fcbb 	bl	800ea84 <HAL_TIM_MspPostInit>

}
 800e10e:	bf00      	nop
 800e110:	3768      	adds	r7, #104	; 0x68
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	24006fe4 	.word	0x24006fe4
 800e11c:	40010000 	.word	0x40010000

0800e120 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b08e      	sub	sp, #56	; 0x38
 800e124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e12a:	2200      	movs	r2, #0
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	605a      	str	r2, [r3, #4]
 800e130:	609a      	str	r2, [r3, #8]
 800e132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e134:	f107 031c 	add.w	r3, r7, #28
 800e138:	2200      	movs	r2, #0
 800e13a:	601a      	str	r2, [r3, #0]
 800e13c:	605a      	str	r2, [r3, #4]
 800e13e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e140:	463b      	mov	r3, r7
 800e142:	2200      	movs	r2, #0
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	605a      	str	r2, [r3, #4]
 800e148:	609a      	str	r2, [r3, #8]
 800e14a:	60da      	str	r2, [r3, #12]
 800e14c:	611a      	str	r2, [r3, #16]
 800e14e:	615a      	str	r2, [r3, #20]
 800e150:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e152:	4b39      	ldr	r3, [pc, #228]	; (800e238 <MX_TIM2_Init+0x118>)
 800e154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e158:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800e15a:	4b37      	ldr	r3, [pc, #220]	; (800e238 <MX_TIM2_Init+0x118>)
 800e15c:	22c7      	movs	r2, #199	; 0xc7
 800e15e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e160:	4b35      	ldr	r3, [pc, #212]	; (800e238 <MX_TIM2_Init+0x118>)
 800e162:	2200      	movs	r2, #0
 800e164:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800e166:	4b34      	ldr	r3, [pc, #208]	; (800e238 <MX_TIM2_Init+0x118>)
 800e168:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e16c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e16e:	4b32      	ldr	r3, [pc, #200]	; (800e238 <MX_TIM2_Init+0x118>)
 800e170:	2200      	movs	r2, #0
 800e172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e174:	4b30      	ldr	r3, [pc, #192]	; (800e238 <MX_TIM2_Init+0x118>)
 800e176:	2200      	movs	r2, #0
 800e178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e17a:	482f      	ldr	r0, [pc, #188]	; (800e238 <MX_TIM2_Init+0x118>)
 800e17c:	f7f7 ff5a 	bl	8006034 <HAL_TIM_Base_Init>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d001      	beq.n	800e18a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800e186:	f7ff fb83 	bl	800d890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e18a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e18e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e194:	4619      	mov	r1, r3
 800e196:	4828      	ldr	r0, [pc, #160]	; (800e238 <MX_TIM2_Init+0x118>)
 800e198:	f7f8 fbc0 	bl	800691c <HAL_TIM_ConfigClockSource>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800e1a2:	f7ff fb75 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e1a6:	4824      	ldr	r0, [pc, #144]	; (800e238 <MX_TIM2_Init+0x118>)
 800e1a8:	f7f8 f814 	bl	80061d4 <HAL_TIM_PWM_Init>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800e1b2:	f7ff fb6d 	bl	800d890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e1be:	f107 031c 	add.w	r3, r7, #28
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	481c      	ldr	r0, [pc, #112]	; (800e238 <MX_TIM2_Init+0x118>)
 800e1c6:	f7f9 f8fd 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d001      	beq.n	800e1d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800e1d0:	f7ff fb5e 	bl	800d890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e1d4:	2360      	movs	r3, #96	; 0x60
 800e1d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800e1d8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e1dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e1e6:	463b      	mov	r3, r7
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	4812      	ldr	r0, [pc, #72]	; (800e238 <MX_TIM2_Init+0x118>)
 800e1ee:	f7f8 fa81 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d001      	beq.n	800e1fc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800e1f8:	f7ff fb4a 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e1fc:	463b      	mov	r3, r7
 800e1fe:	2204      	movs	r2, #4
 800e200:	4619      	mov	r1, r3
 800e202:	480d      	ldr	r0, [pc, #52]	; (800e238 <MX_TIM2_Init+0x118>)
 800e204:	f7f8 fa76 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800e20e:	f7ff fb3f 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e212:	463b      	mov	r3, r7
 800e214:	2208      	movs	r2, #8
 800e216:	4619      	mov	r1, r3
 800e218:	4807      	ldr	r0, [pc, #28]	; (800e238 <MX_TIM2_Init+0x118>)
 800e21a:	f7f8 fa6b 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 800e224:	f7ff fb34 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e228:	4803      	ldr	r0, [pc, #12]	; (800e238 <MX_TIM2_Init+0x118>)
 800e22a:	f000 fc2b 	bl	800ea84 <HAL_TIM_MspPostInit>

}
 800e22e:	bf00      	nop
 800e230:	3738      	adds	r7, #56	; 0x38
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	24007030 	.word	0x24007030

0800e23c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b08e      	sub	sp, #56	; 0x38
 800e240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e246:	2200      	movs	r2, #0
 800e248:	601a      	str	r2, [r3, #0]
 800e24a:	605a      	str	r2, [r3, #4]
 800e24c:	609a      	str	r2, [r3, #8]
 800e24e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e250:	f107 031c 	add.w	r3, r7, #28
 800e254:	2200      	movs	r2, #0
 800e256:	601a      	str	r2, [r3, #0]
 800e258:	605a      	str	r2, [r3, #4]
 800e25a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e25c:	463b      	mov	r3, r7
 800e25e:	2200      	movs	r2, #0
 800e260:	601a      	str	r2, [r3, #0]
 800e262:	605a      	str	r2, [r3, #4]
 800e264:	609a      	str	r2, [r3, #8]
 800e266:	60da      	str	r2, [r3, #12]
 800e268:	611a      	str	r2, [r3, #16]
 800e26a:	615a      	str	r2, [r3, #20]
 800e26c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e26e:	4b38      	ldr	r3, [pc, #224]	; (800e350 <MX_TIM3_Init+0x114>)
 800e270:	4a38      	ldr	r2, [pc, #224]	; (800e354 <MX_TIM3_Init+0x118>)
 800e272:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 800e274:	4b36      	ldr	r3, [pc, #216]	; (800e350 <MX_TIM3_Init+0x114>)
 800e276:	22c7      	movs	r2, #199	; 0xc7
 800e278:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e27a:	4b35      	ldr	r3, [pc, #212]	; (800e350 <MX_TIM3_Init+0x114>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800e280:	4b33      	ldr	r3, [pc, #204]	; (800e350 <MX_TIM3_Init+0x114>)
 800e282:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e286:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e288:	4b31      	ldr	r3, [pc, #196]	; (800e350 <MX_TIM3_Init+0x114>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e28e:	4b30      	ldr	r3, [pc, #192]	; (800e350 <MX_TIM3_Init+0x114>)
 800e290:	2200      	movs	r2, #0
 800e292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e294:	482e      	ldr	r0, [pc, #184]	; (800e350 <MX_TIM3_Init+0x114>)
 800e296:	f7f7 fecd 	bl	8006034 <HAL_TIM_Base_Init>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800e2a0:	f7ff faf6 	bl	800d890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e2a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800e2aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4827      	ldr	r0, [pc, #156]	; (800e350 <MX_TIM3_Init+0x114>)
 800e2b2:	f7f8 fb33 	bl	800691c <HAL_TIM_ConfigClockSource>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d001      	beq.n	800e2c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800e2bc:	f7ff fae8 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e2c0:	4823      	ldr	r0, [pc, #140]	; (800e350 <MX_TIM3_Init+0x114>)
 800e2c2:	f7f7 ff87 	bl	80061d4 <HAL_TIM_PWM_Init>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d001      	beq.n	800e2d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800e2cc:	f7ff fae0 	bl	800d890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e2d8:	f107 031c 	add.w	r3, r7, #28
 800e2dc:	4619      	mov	r1, r3
 800e2de:	481c      	ldr	r0, [pc, #112]	; (800e350 <MX_TIM3_Init+0x114>)
 800e2e0:	f7f9 f870 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800e2ea:	f7ff fad1 	bl	800d890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e2ee:	2360      	movs	r3, #96	; 0x60
 800e2f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800e2f2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e2f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e300:	463b      	mov	r3, r7
 800e302:	2200      	movs	r2, #0
 800e304:	4619      	mov	r1, r3
 800e306:	4812      	ldr	r0, [pc, #72]	; (800e350 <MX_TIM3_Init+0x114>)
 800e308:	f7f8 f9f4 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800e312:	f7ff fabd 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e316:	463b      	mov	r3, r7
 800e318:	2204      	movs	r2, #4
 800e31a:	4619      	mov	r1, r3
 800e31c:	480c      	ldr	r0, [pc, #48]	; (800e350 <MX_TIM3_Init+0x114>)
 800e31e:	f7f8 f9e9 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d001      	beq.n	800e32c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800e328:	f7ff fab2 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e32c:	463b      	mov	r3, r7
 800e32e:	2208      	movs	r2, #8
 800e330:	4619      	mov	r1, r3
 800e332:	4807      	ldr	r0, [pc, #28]	; (800e350 <MX_TIM3_Init+0x114>)
 800e334:	f7f8 f9de 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d001      	beq.n	800e342 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800e33e:	f7ff faa7 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e342:	4803      	ldr	r0, [pc, #12]	; (800e350 <MX_TIM3_Init+0x114>)
 800e344:	f000 fb9e 	bl	800ea84 <HAL_TIM_MspPostInit>

}
 800e348:	bf00      	nop
 800e34a:	3738      	adds	r7, #56	; 0x38
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	24006f98 	.word	0x24006f98
 800e354:	40000400 	.word	0x40000400

0800e358 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b08e      	sub	sp, #56	; 0x38
 800e35c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e35e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e362:	2200      	movs	r2, #0
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	605a      	str	r2, [r3, #4]
 800e368:	609a      	str	r2, [r3, #8]
 800e36a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e36c:	f107 031c 	add.w	r3, r7, #28
 800e370:	2200      	movs	r2, #0
 800e372:	601a      	str	r2, [r3, #0]
 800e374:	605a      	str	r2, [r3, #4]
 800e376:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e378:	463b      	mov	r3, r7
 800e37a:	2200      	movs	r2, #0
 800e37c:	601a      	str	r2, [r3, #0]
 800e37e:	605a      	str	r2, [r3, #4]
 800e380:	609a      	str	r2, [r3, #8]
 800e382:	60da      	str	r2, [r3, #12]
 800e384:	611a      	str	r2, [r3, #16]
 800e386:	615a      	str	r2, [r3, #20]
 800e388:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800e38a:	4b38      	ldr	r3, [pc, #224]	; (800e46c <MX_TIM4_Init+0x114>)
 800e38c:	4a38      	ldr	r2, [pc, #224]	; (800e470 <MX_TIM4_Init+0x118>)
 800e38e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 800e390:	4b36      	ldr	r3, [pc, #216]	; (800e46c <MX_TIM4_Init+0x114>)
 800e392:	22c7      	movs	r2, #199	; 0xc7
 800e394:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e396:	4b35      	ldr	r3, [pc, #212]	; (800e46c <MX_TIM4_Init+0x114>)
 800e398:	2200      	movs	r2, #0
 800e39a:	609a      	str	r2, [r3, #8]
//  htim4.Init.Period = 20000-1;
  htim4.Init.Period = 2000-1;
 800e39c:	4b33      	ldr	r3, [pc, #204]	; (800e46c <MX_TIM4_Init+0x114>)
 800e39e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800e3a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e3a4:	4b31      	ldr	r3, [pc, #196]	; (800e46c <MX_TIM4_Init+0x114>)
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e3aa:	4b30      	ldr	r3, [pc, #192]	; (800e46c <MX_TIM4_Init+0x114>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800e3b0:	482e      	ldr	r0, [pc, #184]	; (800e46c <MX_TIM4_Init+0x114>)
 800e3b2:	f7f7 fe3f 	bl	8006034 <HAL_TIM_Base_Init>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d001      	beq.n	800e3c0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800e3bc:	f7ff fa68 	bl	800d890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800e3c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	4827      	ldr	r0, [pc, #156]	; (800e46c <MX_TIM4_Init+0x114>)
 800e3ce:	f7f8 faa5 	bl	800691c <HAL_TIM_ConfigClockSource>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800e3d8:	f7ff fa5a 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800e3dc:	4823      	ldr	r0, [pc, #140]	; (800e46c <MX_TIM4_Init+0x114>)
 800e3de:	f7f7 fef9 	bl	80061d4 <HAL_TIM_PWM_Init>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d001      	beq.n	800e3ec <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800e3e8:	f7ff fa52 	bl	800d890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e3f4:	f107 031c 	add.w	r3, r7, #28
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	481c      	ldr	r0, [pc, #112]	; (800e46c <MX_TIM4_Init+0x114>)
 800e3fc:	f7f8 ffe2 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800e406:	f7ff fa43 	bl	800d890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e40a:	2360      	movs	r3, #96	; 0x60
 800e40c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e412:	2300      	movs	r3, #0
 800e414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e416:	2300      	movs	r3, #0
 800e418:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e41a:	463b      	mov	r3, r7
 800e41c:	2204      	movs	r2, #4
 800e41e:	4619      	mov	r1, r3
 800e420:	4812      	ldr	r0, [pc, #72]	; (800e46c <MX_TIM4_Init+0x114>)
 800e422:	f7f8 f967 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d001      	beq.n	800e430 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800e42c:	f7ff fa30 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e430:	463b      	mov	r3, r7
 800e432:	2208      	movs	r2, #8
 800e434:	4619      	mov	r1, r3
 800e436:	480d      	ldr	r0, [pc, #52]	; (800e46c <MX_TIM4_Init+0x114>)
 800e438:	f7f8 f95c 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800e442:	f7ff fa25 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e446:	463b      	mov	r3, r7
 800e448:	220c      	movs	r2, #12
 800e44a:	4619      	mov	r1, r3
 800e44c:	4807      	ldr	r0, [pc, #28]	; (800e46c <MX_TIM4_Init+0x114>)
 800e44e:	f7f8 f951 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d001      	beq.n	800e45c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800e458:	f7ff fa1a 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800e45c:	4803      	ldr	r0, [pc, #12]	; (800e46c <MX_TIM4_Init+0x114>)
 800e45e:	f000 fb11 	bl	800ea84 <HAL_TIM_MspPostInit>

}
 800e462:	bf00      	nop
 800e464:	3738      	adds	r7, #56	; 0x38
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	24006eb4 	.word	0x24006eb4
 800e470:	40000800 	.word	0x40000800

0800e474 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b08e      	sub	sp, #56	; 0x38
 800e478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e47a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e47e:	2200      	movs	r2, #0
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	605a      	str	r2, [r3, #4]
 800e484:	609a      	str	r2, [r3, #8]
 800e486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e488:	f107 031c 	add.w	r3, r7, #28
 800e48c:	2200      	movs	r2, #0
 800e48e:	601a      	str	r2, [r3, #0]
 800e490:	605a      	str	r2, [r3, #4]
 800e492:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e494:	463b      	mov	r3, r7
 800e496:	2200      	movs	r2, #0
 800e498:	601a      	str	r2, [r3, #0]
 800e49a:	605a      	str	r2, [r3, #4]
 800e49c:	609a      	str	r2, [r3, #8]
 800e49e:	60da      	str	r2, [r3, #12]
 800e4a0:	611a      	str	r2, [r3, #16]
 800e4a2:	615a      	str	r2, [r3, #20]
 800e4a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800e4a6:	4b33      	ldr	r3, [pc, #204]	; (800e574 <MX_TIM5_Init+0x100>)
 800e4a8:	4a33      	ldr	r2, [pc, #204]	; (800e578 <MX_TIM5_Init+0x104>)
 800e4aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800e4ac:	4b31      	ldr	r3, [pc, #196]	; (800e574 <MX_TIM5_Init+0x100>)
 800e4ae:	22c7      	movs	r2, #199	; 0xc7
 800e4b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e4b2:	4b30      	ldr	r3, [pc, #192]	; (800e574 <MX_TIM5_Init+0x100>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 800e4b8:	4b2e      	ldr	r3, [pc, #184]	; (800e574 <MX_TIM5_Init+0x100>)
 800e4ba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e4be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e4c0:	4b2c      	ldr	r3, [pc, #176]	; (800e574 <MX_TIM5_Init+0x100>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e4c6:	4b2b      	ldr	r3, [pc, #172]	; (800e574 <MX_TIM5_Init+0x100>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800e4cc:	4829      	ldr	r0, [pc, #164]	; (800e574 <MX_TIM5_Init+0x100>)
 800e4ce:	f7f7 fdb1 	bl	8006034 <HAL_TIM_Base_Init>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800e4d8:	f7ff f9da 	bl	800d890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e4dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800e4e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	4822      	ldr	r0, [pc, #136]	; (800e574 <MX_TIM5_Init+0x100>)
 800e4ea:	f7f8 fa17 	bl	800691c <HAL_TIM_ConfigClockSource>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d001      	beq.n	800e4f8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800e4f4:	f7ff f9cc 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800e4f8:	481e      	ldr	r0, [pc, #120]	; (800e574 <MX_TIM5_Init+0x100>)
 800e4fa:	f7f7 fe6b 	bl	80061d4 <HAL_TIM_PWM_Init>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800e504:	f7ff f9c4 	bl	800d890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e508:	2300      	movs	r3, #0
 800e50a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e50c:	2300      	movs	r3, #0
 800e50e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800e510:	f107 031c 	add.w	r3, r7, #28
 800e514:	4619      	mov	r1, r3
 800e516:	4817      	ldr	r0, [pc, #92]	; (800e574 <MX_TIM5_Init+0x100>)
 800e518:	f7f8 ff54 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d001      	beq.n	800e526 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800e522:	f7ff f9b5 	bl	800d890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e526:	2360      	movs	r3, #96	; 0x60
 800e528:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800e52a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e52e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e530:	2300      	movs	r3, #0
 800e532:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e534:	2300      	movs	r3, #0
 800e536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e538:	463b      	mov	r3, r7
 800e53a:	2200      	movs	r2, #0
 800e53c:	4619      	mov	r1, r3
 800e53e:	480d      	ldr	r0, [pc, #52]	; (800e574 <MX_TIM5_Init+0x100>)
 800e540:	f7f8 f8d8 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d001      	beq.n	800e54e <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 800e54a:	f7ff f9a1 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e54e:	463b      	mov	r3, r7
 800e550:	2204      	movs	r2, #4
 800e552:	4619      	mov	r1, r3
 800e554:	4807      	ldr	r0, [pc, #28]	; (800e574 <MX_TIM5_Init+0x100>)
 800e556:	f7f8 f8cd 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d001      	beq.n	800e564 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 800e560:	f7ff f996 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800e564:	4803      	ldr	r0, [pc, #12]	; (800e574 <MX_TIM5_Init+0x100>)
 800e566:	f000 fa8d 	bl	800ea84 <HAL_TIM_MspPostInit>

}
 800e56a:	bf00      	nop
 800e56c:	3738      	adds	r7, #56	; 0x38
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	24006f4c 	.word	0x24006f4c
 800e578:	40000c00 	.word	0x40000c00

0800e57c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b09a      	sub	sp, #104	; 0x68
 800e580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e582:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e586:	2200      	movs	r2, #0
 800e588:	601a      	str	r2, [r3, #0]
 800e58a:	605a      	str	r2, [r3, #4]
 800e58c:	609a      	str	r2, [r3, #8]
 800e58e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e590:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e594:	2200      	movs	r2, #0
 800e596:	601a      	str	r2, [r3, #0]
 800e598:	605a      	str	r2, [r3, #4]
 800e59a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e59c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	601a      	str	r2, [r3, #0]
 800e5a4:	605a      	str	r2, [r3, #4]
 800e5a6:	609a      	str	r2, [r3, #8]
 800e5a8:	60da      	str	r2, [r3, #12]
 800e5aa:	611a      	str	r2, [r3, #16]
 800e5ac:	615a      	str	r2, [r3, #20]
 800e5ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800e5b0:	1d3b      	adds	r3, r7, #4
 800e5b2:	222c      	movs	r2, #44	; 0x2c
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f001 f816 	bl	800f5e8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800e5bc:	4b44      	ldr	r3, [pc, #272]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e5be:	4a45      	ldr	r2, [pc, #276]	; (800e6d4 <MX_TIM8_Init+0x158>)
 800e5c0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 200-1;
 800e5c2:	4b43      	ldr	r3, [pc, #268]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e5c4:	22c7      	movs	r2, #199	; 0xc7
 800e5c6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e5c8:	4b41      	ldr	r3, [pc, #260]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 800e5ce:	4b40      	ldr	r3, [pc, #256]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e5d0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e5d4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e5d6:	4b3e      	ldr	r3, [pc, #248]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800e5dc:	4b3c      	ldr	r3, [pc, #240]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e5e2:	4b3b      	ldr	r3, [pc, #236]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800e5e8:	4839      	ldr	r0, [pc, #228]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e5ea:	f7f7 fd23 	bl	8006034 <HAL_TIM_Base_Init>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800e5f4:	f7ff f94c 	bl	800d890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e5f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e5fc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800e5fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e602:	4619      	mov	r1, r3
 800e604:	4832      	ldr	r0, [pc, #200]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e606:	f7f8 f989 	bl	800691c <HAL_TIM_ConfigClockSource>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d001      	beq.n	800e614 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800e610:	f7ff f93e 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800e614:	482e      	ldr	r0, [pc, #184]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e616:	f7f7 fddd 	bl	80061d4 <HAL_TIM_PWM_Init>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d001      	beq.n	800e624 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800e620:	f7ff f936 	bl	800d890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e624:	2300      	movs	r3, #0
 800e626:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e628:	2300      	movs	r3, #0
 800e62a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e62c:	2300      	movs	r3, #0
 800e62e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800e630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e634:	4619      	mov	r1, r3
 800e636:	4826      	ldr	r0, [pc, #152]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e638:	f7f8 fec4 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d001      	beq.n	800e646 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800e642:	f7ff f925 	bl	800d890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e646:	2360      	movs	r3, #96	; 0x60
 800e648:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800e64a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e64e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e650:	2300      	movs	r3, #0
 800e652:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e654:	2300      	movs	r3, #0
 800e656:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e658:	2300      	movs	r3, #0
 800e65a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e65c:	2300      	movs	r3, #0
 800e65e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e660:	2300      	movs	r3, #0
 800e662:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e668:	2208      	movs	r2, #8
 800e66a:	4619      	mov	r1, r3
 800e66c:	4818      	ldr	r0, [pc, #96]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e66e:	f7f8 f841 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	d001      	beq.n	800e67c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800e678:	f7ff f90a 	bl	800d890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e67c:	2300      	movs	r3, #0
 800e67e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e680:	2300      	movs	r3, #0
 800e682:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e684:	2300      	movs	r3, #0
 800e686:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e688:	2300      	movs	r3, #0
 800e68a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e68c:	2300      	movs	r3, #0
 800e68e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e694:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800e696:	2300      	movs	r3, #0
 800e698:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800e69a:	2300      	movs	r3, #0
 800e69c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800e69e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e6a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800e6ac:	1d3b      	adds	r3, r7, #4
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	4807      	ldr	r0, [pc, #28]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e6b2:	f7f8 ff15 	bl	80074e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d001      	beq.n	800e6c0 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 800e6bc:	f7ff f8e8 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800e6c0:	4803      	ldr	r0, [pc, #12]	; (800e6d0 <MX_TIM8_Init+0x154>)
 800e6c2:	f000 f9df 	bl	800ea84 <HAL_TIM_MspPostInit>

}
 800e6c6:	bf00      	nop
 800e6c8:	3768      	adds	r7, #104	; 0x68
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	24006e68 	.word	0x24006e68
 800e6d4:	40010400 	.word	0x40010400

0800e6d8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08c      	sub	sp, #48	; 0x30
 800e6dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e6de:	f107 0320 	add.w	r3, r7, #32
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	601a      	str	r2, [r3, #0]
 800e6e6:	605a      	str	r2, [r3, #4]
 800e6e8:	609a      	str	r2, [r3, #8]
 800e6ea:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e6ec:	1d3b      	adds	r3, r7, #4
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	601a      	str	r2, [r3, #0]
 800e6f2:	605a      	str	r2, [r3, #4]
 800e6f4:	609a      	str	r2, [r3, #8]
 800e6f6:	60da      	str	r2, [r3, #12]
 800e6f8:	611a      	str	r2, [r3, #16]
 800e6fa:	615a      	str	r2, [r3, #20]
 800e6fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800e6fe:	4b26      	ldr	r3, [pc, #152]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e700:	4a26      	ldr	r2, [pc, #152]	; (800e79c <MX_TIM12_Init+0xc4>)
 800e702:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 800e704:	4b24      	ldr	r3, [pc, #144]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e706:	22c7      	movs	r2, #199	; 0xc7
 800e708:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e70a:	4b23      	ldr	r3, [pc, #140]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 800e710:	4b21      	ldr	r3, [pc, #132]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e712:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e716:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e718:	4b1f      	ldr	r3, [pc, #124]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e71e:	4b1e      	ldr	r3, [pc, #120]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e720:	2200      	movs	r2, #0
 800e722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800e724:	481c      	ldr	r0, [pc, #112]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e726:	f7f7 fc85 	bl	8006034 <HAL_TIM_Base_Init>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d001      	beq.n	800e734 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800e730:	f7ff f8ae 	bl	800d890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e738:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800e73a:	f107 0320 	add.w	r3, r7, #32
 800e73e:	4619      	mov	r1, r3
 800e740:	4815      	ldr	r0, [pc, #84]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e742:	f7f8 f8eb 	bl	800691c <HAL_TIM_ConfigClockSource>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d001      	beq.n	800e750 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800e74c:	f7ff f8a0 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800e750:	4811      	ldr	r0, [pc, #68]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e752:	f7f7 fd3f 	bl	80061d4 <HAL_TIM_PWM_Init>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d001      	beq.n	800e760 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800e75c:	f7ff f898 	bl	800d890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e760:	2360      	movs	r3, #96	; 0x60
 800e762:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800e764:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e768:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e76a:	2300      	movs	r3, #0
 800e76c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e76e:	2300      	movs	r3, #0
 800e770:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e772:	1d3b      	adds	r3, r7, #4
 800e774:	2200      	movs	r2, #0
 800e776:	4619      	mov	r1, r3
 800e778:	4807      	ldr	r0, [pc, #28]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e77a:	f7f7 ffbb 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 800e784:	f7ff f884 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800e788:	4803      	ldr	r0, [pc, #12]	; (800e798 <MX_TIM12_Init+0xc0>)
 800e78a:	f000 f97b 	bl	800ea84 <HAL_TIM_MspPostInit>

}
 800e78e:	bf00      	nop
 800e790:	3730      	adds	r7, #48	; 0x30
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	2400707c 	.word	0x2400707c
 800e79c:	40001800 	.word	0x40001800

0800e7a0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b09a      	sub	sp, #104	; 0x68
 800e7a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e7a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	605a      	str	r2, [r3, #4]
 800e7b0:	609a      	str	r2, [r3, #8]
 800e7b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e7b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	605a      	str	r2, [r3, #4]
 800e7be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e7c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	601a      	str	r2, [r3, #0]
 800e7c8:	605a      	str	r2, [r3, #4]
 800e7ca:	609a      	str	r2, [r3, #8]
 800e7cc:	60da      	str	r2, [r3, #12]
 800e7ce:	611a      	str	r2, [r3, #16]
 800e7d0:	615a      	str	r2, [r3, #20]
 800e7d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800e7d4:	1d3b      	adds	r3, r7, #4
 800e7d6:	222c      	movs	r2, #44	; 0x2c
 800e7d8:	2100      	movs	r1, #0
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f000 ff04 	bl	800f5e8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800e7e0:	4b45      	ldr	r3, [pc, #276]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e7e2:	4a46      	ldr	r2, [pc, #280]	; (800e8fc <MX_TIM15_Init+0x15c>)
 800e7e4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 200-1;
 800e7e6:	4b44      	ldr	r3, [pc, #272]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e7e8:	22c7      	movs	r2, #199	; 0xc7
 800e7ea:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e7ec:	4b42      	ldr	r3, [pc, #264]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 800e7f2:	4b41      	ldr	r3, [pc, #260]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e7f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e7f8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e7fa:	4b3f      	ldr	r3, [pc, #252]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800e800:	4b3d      	ldr	r3, [pc, #244]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e802:	2200      	movs	r2, #0
 800e804:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e806:	4b3c      	ldr	r3, [pc, #240]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e808:	2200      	movs	r2, #0
 800e80a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800e80c:	483a      	ldr	r0, [pc, #232]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e80e:	f7f7 fc11 	bl	8006034 <HAL_TIM_Base_Init>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d001      	beq.n	800e81c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800e818:	f7ff f83a 	bl	800d890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e81c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e820:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800e822:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e826:	4619      	mov	r1, r3
 800e828:	4833      	ldr	r0, [pc, #204]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e82a:	f7f8 f877 	bl	800691c <HAL_TIM_ConfigClockSource>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d001      	beq.n	800e838 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800e834:	f7ff f82c 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800e838:	482f      	ldr	r0, [pc, #188]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e83a:	f7f7 fccb 	bl	80061d4 <HAL_TIM_PWM_Init>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d001      	beq.n	800e848 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800e844:	f7ff f824 	bl	800d890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e848:	2300      	movs	r3, #0
 800e84a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e84c:	2300      	movs	r3, #0
 800e84e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800e850:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e854:	4619      	mov	r1, r3
 800e856:	4828      	ldr	r0, [pc, #160]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e858:	f7f8 fdb4 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d001      	beq.n	800e866 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800e862:	f7ff f815 	bl	800d890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e866:	2360      	movs	r3, #96	; 0x60
 800e868:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800e86a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e86e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e870:	2300      	movs	r3, #0
 800e872:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e874:	2300      	movs	r3, #0
 800e876:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e878:	2300      	movs	r3, #0
 800e87a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e87c:	2300      	movs	r3, #0
 800e87e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e880:	2300      	movs	r3, #0
 800e882:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e888:	2200      	movs	r2, #0
 800e88a:	4619      	mov	r1, r3
 800e88c:	481a      	ldr	r0, [pc, #104]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e88e:	f7f7 ff31 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e892:	4603      	mov	r3, r0
 800e894:	2b00      	cmp	r3, #0
 800e896:	d001      	beq.n	800e89c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800e898:	f7fe fffa 	bl	800d890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e89c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e8a0:	2204      	movs	r2, #4
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4814      	ldr	r0, [pc, #80]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e8a6:	f7f7 ff25 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d001      	beq.n	800e8b4 <MX_TIM15_Init+0x114>
  {
    Error_Handler();
 800e8b0:	f7fe ffee 	bl	800d890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e8c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800e8d6:	1d3b      	adds	r3, r7, #4
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4807      	ldr	r0, [pc, #28]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e8dc:	f7f8 fe00 	bl	80074e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d001      	beq.n	800e8ea <MX_TIM15_Init+0x14a>
  {
    Error_Handler();
 800e8e6:	f7fe ffd3 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800e8ea:	4803      	ldr	r0, [pc, #12]	; (800e8f8 <MX_TIM15_Init+0x158>)
 800e8ec:	f000 f8ca 	bl	800ea84 <HAL_TIM_MspPostInit>

}
 800e8f0:	bf00      	nop
 800e8f2:	3768      	adds	r7, #104	; 0x68
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	24006f00 	.word	0x24006f00
 800e8fc:	40014000 	.word	0x40014000

0800e900 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e900:	b480      	push	{r7}
 800e902:	b08b      	sub	sp, #44	; 0x2c
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a55      	ldr	r2, [pc, #340]	; (800ea64 <HAL_TIM_Base_MspInit+0x164>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d10f      	bne.n	800e932 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e912:	4b55      	ldr	r3, [pc, #340]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e918:	4a53      	ldr	r2, [pc, #332]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e91a:	f043 0301 	orr.w	r3, r3, #1
 800e91e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800e922:	4b51      	ldr	r3, [pc, #324]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e928:	f003 0301 	and.w	r3, r3, #1
 800e92c:	627b      	str	r3, [r7, #36]	; 0x24
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800e930:	e091      	b.n	800ea56 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM2)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e93a:	d10f      	bne.n	800e95c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e93c:	4b4a      	ldr	r3, [pc, #296]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e93e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e942:	4a49      	ldr	r2, [pc, #292]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e944:	f043 0301 	orr.w	r3, r3, #1
 800e948:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e94c:	4b46      	ldr	r3, [pc, #280]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e94e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	623b      	str	r3, [r7, #32]
 800e958:	6a3b      	ldr	r3, [r7, #32]
}
 800e95a:	e07c      	b.n	800ea56 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM3)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a42      	ldr	r2, [pc, #264]	; (800ea6c <HAL_TIM_Base_MspInit+0x16c>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d10f      	bne.n	800e986 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e966:	4b40      	ldr	r3, [pc, #256]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e96c:	4a3e      	ldr	r2, [pc, #248]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e96e:	f043 0302 	orr.w	r3, r3, #2
 800e972:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e976:	4b3c      	ldr	r3, [pc, #240]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e97c:	f003 0302 	and.w	r3, r3, #2
 800e980:	61fb      	str	r3, [r7, #28]
 800e982:	69fb      	ldr	r3, [r7, #28]
}
 800e984:	e067      	b.n	800ea56 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a39      	ldr	r2, [pc, #228]	; (800ea70 <HAL_TIM_Base_MspInit+0x170>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d10f      	bne.n	800e9b0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e990:	4b35      	ldr	r3, [pc, #212]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e996:	4a34      	ldr	r2, [pc, #208]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e998:	f043 0304 	orr.w	r3, r3, #4
 800e99c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e9a0:	4b31      	ldr	r3, [pc, #196]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e9a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e9a6:	f003 0304 	and.w	r3, r3, #4
 800e9aa:	61bb      	str	r3, [r7, #24]
 800e9ac:	69bb      	ldr	r3, [r7, #24]
}
 800e9ae:	e052      	b.n	800ea56 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a2f      	ldr	r2, [pc, #188]	; (800ea74 <HAL_TIM_Base_MspInit+0x174>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d10f      	bne.n	800e9da <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e9ba:	4b2b      	ldr	r3, [pc, #172]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e9bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e9c0:	4a29      	ldr	r2, [pc, #164]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e9c2:	f043 0308 	orr.w	r3, r3, #8
 800e9c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e9ca:	4b27      	ldr	r3, [pc, #156]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e9cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e9d0:	f003 0308 	and.w	r3, r3, #8
 800e9d4:	617b      	str	r3, [r7, #20]
 800e9d6:	697b      	ldr	r3, [r7, #20]
}
 800e9d8:	e03d      	b.n	800ea56 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM8)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4a26      	ldr	r2, [pc, #152]	; (800ea78 <HAL_TIM_Base_MspInit+0x178>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d10f      	bne.n	800ea04 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e9e4:	4b20      	ldr	r3, [pc, #128]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e9e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e9ea:	4a1f      	ldr	r2, [pc, #124]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e9ec:	f043 0302 	orr.w	r3, r3, #2
 800e9f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800e9f4:	4b1c      	ldr	r3, [pc, #112]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800e9f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e9fa:	f003 0302 	and.w	r3, r3, #2
 800e9fe:	613b      	str	r3, [r7, #16]
 800ea00:	693b      	ldr	r3, [r7, #16]
}
 800ea02:	e028      	b.n	800ea56 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM12)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a1c      	ldr	r2, [pc, #112]	; (800ea7c <HAL_TIM_Base_MspInit+0x17c>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d10f      	bne.n	800ea2e <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800ea0e:	4b16      	ldr	r3, [pc, #88]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800ea10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ea14:	4a14      	ldr	r2, [pc, #80]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800ea16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ea1e:	4b12      	ldr	r3, [pc, #72]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800ea20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ea24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea28:	60fb      	str	r3, [r7, #12]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
}
 800ea2c:	e013      	b.n	800ea56 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM15)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a13      	ldr	r2, [pc, #76]	; (800ea80 <HAL_TIM_Base_MspInit+0x180>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d10e      	bne.n	800ea56 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800ea38:	4b0b      	ldr	r3, [pc, #44]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800ea3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ea3e:	4a0a      	ldr	r2, [pc, #40]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800ea40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ea48:	4b07      	ldr	r3, [pc, #28]	; (800ea68 <HAL_TIM_Base_MspInit+0x168>)
 800ea4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ea4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea52:	60bb      	str	r3, [r7, #8]
 800ea54:	68bb      	ldr	r3, [r7, #8]
}
 800ea56:	bf00      	nop
 800ea58:	372c      	adds	r7, #44	; 0x2c
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	40010000 	.word	0x40010000
 800ea68:	58024400 	.word	0x58024400
 800ea6c:	40000400 	.word	0x40000400
 800ea70:	40000800 	.word	0x40000800
 800ea74:	40000c00 	.word	0x40000c00
 800ea78:	40010400 	.word	0x40010400
 800ea7c:	40001800 	.word	0x40001800
 800ea80:	40014000 	.word	0x40014000

0800ea84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b092      	sub	sp, #72	; 0x48
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ea90:	2200      	movs	r2, #0
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	605a      	str	r2, [r3, #4]
 800ea96:	609a      	str	r2, [r3, #8]
 800ea98:	60da      	str	r2, [r3, #12]
 800ea9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4aa1      	ldr	r2, [pc, #644]	; (800ed28 <HAL_TIM_MspPostInit+0x2a4>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d120      	bne.n	800eae8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800eaa6:	4ba1      	ldr	r3, [pc, #644]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eaa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eaac:	4a9f      	ldr	r2, [pc, #636]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eaae:	f043 0310 	orr.w	r3, r3, #16
 800eab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800eab6:	4b9d      	ldr	r3, [pc, #628]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eabc:	f003 0310 	and.w	r3, r3, #16
 800eac0:	633b      	str	r3, [r7, #48]	; 0x30
 800eac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800eac4:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800eac8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eaca:	2302      	movs	r3, #2
 800eacc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eace:	2300      	movs	r3, #0
 800ead0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ead2:	2300      	movs	r3, #0
 800ead4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ead6:	2301      	movs	r3, #1
 800ead8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800eada:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eade:	4619      	mov	r1, r3
 800eae0:	4893      	ldr	r0, [pc, #588]	; (800ed30 <HAL_TIM_MspPostInit+0x2ac>)
 800eae2:	f7f4 fd15 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800eae6:	e15b      	b.n	800eda0 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM2)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaf0:	d13f      	bne.n	800eb72 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eaf2:	4b8e      	ldr	r3, [pc, #568]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eaf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eaf8:	4a8c      	ldr	r2, [pc, #560]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eafa:	f043 0301 	orr.w	r3, r3, #1
 800eafe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800eb02:	4b8a      	ldr	r3, [pc, #552]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eb04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb08:	f003 0301 	and.w	r3, r3, #1
 800eb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb10:	4b86      	ldr	r3, [pc, #536]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eb12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb16:	4a85      	ldr	r2, [pc, #532]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eb18:	f043 0302 	orr.w	r3, r3, #2
 800eb1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800eb20:	4b82      	ldr	r3, [pc, #520]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eb22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb26:	f003 0302 	and.w	r3, r3, #2
 800eb2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800eb2e:	2320      	movs	r3, #32
 800eb30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb32:	2302      	movs	r3, #2
 800eb34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb36:	2300      	movs	r3, #0
 800eb38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eb46:	4619      	mov	r1, r3
 800eb48:	487a      	ldr	r0, [pc, #488]	; (800ed34 <HAL_TIM_MspPostInit+0x2b0>)
 800eb4a:	f7f4 fce1 	bl	8003510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800eb4e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800eb52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb54:	2302      	movs	r3, #2
 800eb56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800eb60:	2301      	movs	r3, #1
 800eb62:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eb68:	4619      	mov	r1, r3
 800eb6a:	4873      	ldr	r0, [pc, #460]	; (800ed38 <HAL_TIM_MspPostInit+0x2b4>)
 800eb6c:	f7f4 fcd0 	bl	8003510 <HAL_GPIO_Init>
}
 800eb70:	e116      	b.n	800eda0 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM3)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4a71      	ldr	r2, [pc, #452]	; (800ed3c <HAL_TIM_MspPostInit+0x2b8>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d13e      	bne.n	800ebfa <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb7c:	4b6b      	ldr	r3, [pc, #428]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eb7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb82:	4a6a      	ldr	r2, [pc, #424]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eb84:	f043 0301 	orr.w	r3, r3, #1
 800eb88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800eb8c:	4b67      	ldr	r3, [pc, #412]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eb8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb92:	f003 0301 	and.w	r3, r3, #1
 800eb96:	627b      	str	r3, [r7, #36]	; 0x24
 800eb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb9a:	4b64      	ldr	r3, [pc, #400]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eb9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eba0:	4a62      	ldr	r2, [pc, #392]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eba2:	f043 0302 	orr.w	r3, r3, #2
 800eba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ebaa:	4b60      	ldr	r3, [pc, #384]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ebac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ebb0:	f003 0302 	and.w	r3, r3, #2
 800ebb4:	623b      	str	r3, [r7, #32]
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ebb8:	23c0      	movs	r3, #192	; 0xc0
 800ebba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebbc:	2302      	movs	r3, #2
 800ebbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ebc8:	2302      	movs	r3, #2
 800ebca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ebcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	4858      	ldr	r0, [pc, #352]	; (800ed34 <HAL_TIM_MspPostInit+0x2b0>)
 800ebd4:	f7f4 fc9c 	bl	8003510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebdc:	2302      	movs	r3, #2
 800ebde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ebe8:	2302      	movs	r3, #2
 800ebea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ebec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	4851      	ldr	r0, [pc, #324]	; (800ed38 <HAL_TIM_MspPostInit+0x2b4>)
 800ebf4:	f7f4 fc8c 	bl	8003510 <HAL_GPIO_Init>
}
 800ebf8:	e0d2      	b.n	800eda0 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM4)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	4a50      	ldr	r2, [pc, #320]	; (800ed40 <HAL_TIM_MspPostInit+0x2bc>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d120      	bne.n	800ec46 <HAL_TIM_MspPostInit+0x1c2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ec04:	4b49      	ldr	r3, [pc, #292]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ec06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec0a:	4a48      	ldr	r2, [pc, #288]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ec0c:	f043 0308 	orr.w	r3, r3, #8
 800ec10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ec14:	4b45      	ldr	r3, [pc, #276]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ec16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec1a:	f003 0308 	and.w	r3, r3, #8
 800ec1e:	61fb      	str	r3, [r7, #28]
 800ec20:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800ec22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800ec26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec28:	2302      	movs	r3, #2
 800ec2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec30:	2300      	movs	r3, #0
 800ec32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ec34:	2302      	movs	r3, #2
 800ec36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ec38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4841      	ldr	r0, [pc, #260]	; (800ed44 <HAL_TIM_MspPostInit+0x2c0>)
 800ec40:	f7f4 fc66 	bl	8003510 <HAL_GPIO_Init>
}
 800ec44:	e0ac      	b.n	800eda0 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM5)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4a3f      	ldr	r2, [pc, #252]	; (800ed48 <HAL_TIM_MspPostInit+0x2c4>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d11f      	bne.n	800ec90 <HAL_TIM_MspPostInit+0x20c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec50:	4b36      	ldr	r3, [pc, #216]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ec52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec56:	4a35      	ldr	r2, [pc, #212]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ec58:	f043 0301 	orr.w	r3, r3, #1
 800ec5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ec60:	4b32      	ldr	r3, [pc, #200]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ec62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec66:	f003 0301 	and.w	r3, r3, #1
 800ec6a:	61bb      	str	r3, [r7, #24]
 800ec6c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ec6e:	2303      	movs	r3, #3
 800ec70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec72:	2302      	movs	r3, #2
 800ec74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec76:	2300      	movs	r3, #0
 800ec78:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ec7e:	2302      	movs	r3, #2
 800ec80:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ec86:	4619      	mov	r1, r3
 800ec88:	482a      	ldr	r0, [pc, #168]	; (800ed34 <HAL_TIM_MspPostInit+0x2b0>)
 800ec8a:	f7f4 fc41 	bl	8003510 <HAL_GPIO_Init>
}
 800ec8e:	e087      	b.n	800eda0 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM8)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a2d      	ldr	r2, [pc, #180]	; (800ed4c <HAL_TIM_MspPostInit+0x2c8>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d120      	bne.n	800ecdc <HAL_TIM_MspPostInit+0x258>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ec9a:	4b24      	ldr	r3, [pc, #144]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ec9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eca0:	4a22      	ldr	r2, [pc, #136]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800eca2:	f043 0304 	orr.w	r3, r3, #4
 800eca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ecaa:	4b20      	ldr	r3, [pc, #128]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ecac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecb0:	f003 0304 	and.w	r3, r3, #4
 800ecb4:	617b      	str	r3, [r7, #20]
 800ecb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800ecb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecbe:	2302      	movs	r3, #2
 800ecc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800ecca:	2303      	movs	r3, #3
 800eccc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ecce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	481e      	ldr	r0, [pc, #120]	; (800ed50 <HAL_TIM_MspPostInit+0x2cc>)
 800ecd6:	f7f4 fc1b 	bl	8003510 <HAL_GPIO_Init>
}
 800ecda:	e061      	b.n	800eda0 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM12)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a1c      	ldr	r2, [pc, #112]	; (800ed54 <HAL_TIM_MspPostInit+0x2d0>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d138      	bne.n	800ed58 <HAL_TIM_MspPostInit+0x2d4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ece6:	4b11      	ldr	r3, [pc, #68]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ece8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecec:	4a0f      	ldr	r2, [pc, #60]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ecee:	f043 0302 	orr.w	r3, r3, #2
 800ecf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ecf6:	4b0d      	ldr	r3, [pc, #52]	; (800ed2c <HAL_TIM_MspPostInit+0x2a8>)
 800ecf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecfc:	f003 0302 	and.w	r3, r3, #2
 800ed00:	613b      	str	r3, [r7, #16]
 800ed02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800ed04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed12:	2300      	movs	r3, #0
 800ed14:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800ed16:	2302      	movs	r3, #2
 800ed18:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ed1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ed1e:	4619      	mov	r1, r3
 800ed20:	4805      	ldr	r0, [pc, #20]	; (800ed38 <HAL_TIM_MspPostInit+0x2b4>)
 800ed22:	f7f4 fbf5 	bl	8003510 <HAL_GPIO_Init>
}
 800ed26:	e03b      	b.n	800eda0 <HAL_TIM_MspPostInit+0x31c>
 800ed28:	40010000 	.word	0x40010000
 800ed2c:	58024400 	.word	0x58024400
 800ed30:	58021000 	.word	0x58021000
 800ed34:	58020000 	.word	0x58020000
 800ed38:	58020400 	.word	0x58020400
 800ed3c:	40000400 	.word	0x40000400
 800ed40:	40000800 	.word	0x40000800
 800ed44:	58020c00 	.word	0x58020c00
 800ed48:	40000c00 	.word	0x40000c00
 800ed4c:	40010400 	.word	0x40010400
 800ed50:	58020800 	.word	0x58020800
 800ed54:	40001800 	.word	0x40001800
  else if(timHandle->Instance==TIM15)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a12      	ldr	r2, [pc, #72]	; (800eda8 <HAL_TIM_MspPostInit+0x324>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d11e      	bne.n	800eda0 <HAL_TIM_MspPostInit+0x31c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ed62:	4b12      	ldr	r3, [pc, #72]	; (800edac <HAL_TIM_MspPostInit+0x328>)
 800ed64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed68:	4a10      	ldr	r2, [pc, #64]	; (800edac <HAL_TIM_MspPostInit+0x328>)
 800ed6a:	f043 0310 	orr.w	r3, r3, #16
 800ed6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed72:	4b0e      	ldr	r3, [pc, #56]	; (800edac <HAL_TIM_MspPostInit+0x328>)
 800ed74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed78:	f003 0310 	and.w	r3, r3, #16
 800ed7c:	60fb      	str	r3, [r7, #12]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800ed80:	2360      	movs	r3, #96	; 0x60
 800ed82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed84:	2302      	movs	r3, #2
 800ed86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800ed90:	2304      	movs	r3, #4
 800ed92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ed94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ed98:	4619      	mov	r1, r3
 800ed9a:	4805      	ldr	r0, [pc, #20]	; (800edb0 <HAL_TIM_MspPostInit+0x32c>)
 800ed9c:	f7f4 fbb8 	bl	8003510 <HAL_GPIO_Init>
}
 800eda0:	bf00      	nop
 800eda2:	3748      	adds	r7, #72	; 0x48
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	40014000 	.word	0x40014000
 800edac:	58024400 	.word	0x58024400
 800edb0:	58021000 	.word	0x58021000

0800edb4 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800edb8:	4b22      	ldr	r3, [pc, #136]	; (800ee44 <MX_UART5_Init+0x90>)
 800edba:	4a23      	ldr	r2, [pc, #140]	; (800ee48 <MX_UART5_Init+0x94>)
 800edbc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800edbe:	4b21      	ldr	r3, [pc, #132]	; (800ee44 <MX_UART5_Init+0x90>)
 800edc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800edc4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800edc6:	4b1f      	ldr	r3, [pc, #124]	; (800ee44 <MX_UART5_Init+0x90>)
 800edc8:	2200      	movs	r2, #0
 800edca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800edcc:	4b1d      	ldr	r3, [pc, #116]	; (800ee44 <MX_UART5_Init+0x90>)
 800edce:	2200      	movs	r2, #0
 800edd0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800edd2:	4b1c      	ldr	r3, [pc, #112]	; (800ee44 <MX_UART5_Init+0x90>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800edd8:	4b1a      	ldr	r3, [pc, #104]	; (800ee44 <MX_UART5_Init+0x90>)
 800edda:	220c      	movs	r2, #12
 800eddc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800edde:	4b19      	ldr	r3, [pc, #100]	; (800ee44 <MX_UART5_Init+0x90>)
 800ede0:	2200      	movs	r2, #0
 800ede2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800ede4:	4b17      	ldr	r3, [pc, #92]	; (800ee44 <MX_UART5_Init+0x90>)
 800ede6:	2200      	movs	r2, #0
 800ede8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800edea:	4b16      	ldr	r3, [pc, #88]	; (800ee44 <MX_UART5_Init+0x90>)
 800edec:	2200      	movs	r2, #0
 800edee:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800edf0:	4b14      	ldr	r3, [pc, #80]	; (800ee44 <MX_UART5_Init+0x90>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800edf6:	4b13      	ldr	r3, [pc, #76]	; (800ee44 <MX_UART5_Init+0x90>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800edfc:	4811      	ldr	r0, [pc, #68]	; (800ee44 <MX_UART5_Init+0x90>)
 800edfe:	f7f8 fc0b 	bl	8007618 <HAL_UART_Init>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d001      	beq.n	800ee0c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800ee08:	f7fe fd42 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	480d      	ldr	r0, [pc, #52]	; (800ee44 <MX_UART5_Init+0x90>)
 800ee10:	f7fa fc04 	bl	800961c <HAL_UARTEx_SetTxFifoThreshold>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d001      	beq.n	800ee1e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800ee1a:	f7fe fd39 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ee1e:	2100      	movs	r1, #0
 800ee20:	4808      	ldr	r0, [pc, #32]	; (800ee44 <MX_UART5_Init+0x90>)
 800ee22:	f7fa fc39 	bl	8009698 <HAL_UARTEx_SetRxFifoThreshold>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d001      	beq.n	800ee30 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800ee2c:	f7fe fd30 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800ee30:	4804      	ldr	r0, [pc, #16]	; (800ee44 <MX_UART5_Init+0x90>)
 800ee32:	f7fa fbba 	bl	80095aa <HAL_UARTEx_DisableFifoMode>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d001      	beq.n	800ee40 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800ee3c:	f7fe fd28 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800ee40:	bf00      	nop
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	240072c0 	.word	0x240072c0
 800ee48:	40005000 	.word	0x40005000

0800ee4c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ee50:	4b22      	ldr	r3, [pc, #136]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee52:	4a23      	ldr	r2, [pc, #140]	; (800eee0 <MX_USART1_UART_Init+0x94>)
 800ee54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ee56:	4b21      	ldr	r3, [pc, #132]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ee5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ee5e:	4b1f      	ldr	r3, [pc, #124]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee60:	2200      	movs	r2, #0
 800ee62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ee64:	4b1d      	ldr	r3, [pc, #116]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ee6a:	4b1c      	ldr	r3, [pc, #112]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ee70:	4b1a      	ldr	r3, [pc, #104]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee72:	220c      	movs	r2, #12
 800ee74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ee76:	4b19      	ldr	r3, [pc, #100]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee78:	2200      	movs	r2, #0
 800ee7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ee7c:	4b17      	ldr	r3, [pc, #92]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee7e:	2200      	movs	r2, #0
 800ee80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ee82:	4b16      	ldr	r3, [pc, #88]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee84:	2200      	movs	r2, #0
 800ee86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ee88:	4b14      	ldr	r3, [pc, #80]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ee8e:	4b13      	ldr	r3, [pc, #76]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee90:	2200      	movs	r2, #0
 800ee92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ee94:	4811      	ldr	r0, [pc, #68]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800ee96:	f7f8 fbbf 	bl	8007618 <HAL_UART_Init>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800eea0:	f7fe fcf6 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800eea4:	2100      	movs	r1, #0
 800eea6:	480d      	ldr	r0, [pc, #52]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800eea8:	f7fa fbb8 	bl	800961c <HAL_UARTEx_SetTxFifoThreshold>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d001      	beq.n	800eeb6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800eeb2:	f7fe fced 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	4808      	ldr	r0, [pc, #32]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800eeba:	f7fa fbed 	bl	8009698 <HAL_UARTEx_SetRxFifoThreshold>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800eec4:	f7fe fce4 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800eec8:	4804      	ldr	r0, [pc, #16]	; (800eedc <MX_USART1_UART_Init+0x90>)
 800eeca:	f7fa fb6e 	bl	80095aa <HAL_UARTEx_DisableFifoMode>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d001      	beq.n	800eed8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800eed4:	f7fe fcdc 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800eed8:	bf00      	nop
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	240073c8 	.word	0x240073c8
 800eee0:	40011000 	.word	0x40011000

0800eee4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800eee8:	4b22      	ldr	r3, [pc, #136]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800eeea:	4a23      	ldr	r2, [pc, #140]	; (800ef78 <MX_USART2_UART_Init+0x94>)
 800eeec:	601a      	str	r2, [r3, #0]
//  huart2.Init.BaudRate = 921600;
  huart2.Init.BaudRate = 115200;
 800eeee:	4b21      	ldr	r3, [pc, #132]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800eef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800eef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800eef6:	4b1f      	ldr	r3, [pc, #124]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800eefc:	4b1d      	ldr	r3, [pc, #116]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ef02:	4b1c      	ldr	r3, [pc, #112]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef04:	2200      	movs	r2, #0
 800ef06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ef08:	4b1a      	ldr	r3, [pc, #104]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef0a:	220c      	movs	r2, #12
 800ef0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ef0e:	4b19      	ldr	r3, [pc, #100]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef10:	2200      	movs	r2, #0
 800ef12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ef14:	4b17      	ldr	r3, [pc, #92]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef16:	2200      	movs	r2, #0
 800ef18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ef1a:	4b16      	ldr	r3, [pc, #88]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ef20:	4b14      	ldr	r3, [pc, #80]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef22:	2200      	movs	r2, #0
 800ef24:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ef26:	4b13      	ldr	r3, [pc, #76]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef28:	2200      	movs	r2, #0
 800ef2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ef2c:	4811      	ldr	r0, [pc, #68]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef2e:	f7f8 fb73 	bl	8007618 <HAL_UART_Init>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d001      	beq.n	800ef3c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800ef38:	f7fe fcaa 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	480d      	ldr	r0, [pc, #52]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef40:	f7fa fb6c 	bl	800961c <HAL_UARTEx_SetTxFifoThreshold>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800ef4a:	f7fe fca1 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ef4e:	2100      	movs	r1, #0
 800ef50:	4808      	ldr	r0, [pc, #32]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef52:	f7fa fba1 	bl	8009698 <HAL_UARTEx_SetRxFifoThreshold>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d001      	beq.n	800ef60 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800ef5c:	f7fe fc98 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800ef60:	4804      	ldr	r0, [pc, #16]	; (800ef74 <MX_USART2_UART_Init+0x90>)
 800ef62:	f7fa fb22 	bl	80095aa <HAL_UARTEx_DisableFifoMode>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d001      	beq.n	800ef70 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800ef6c:	f7fe fc90 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ef70:	bf00      	nop
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	24007458 	.word	0x24007458
 800ef78:	40004400 	.word	0x40004400

0800ef7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ef80:	4b22      	ldr	r3, [pc, #136]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800ef82:	4a23      	ldr	r2, [pc, #140]	; (800f010 <MX_USART3_UART_Init+0x94>)
 800ef84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800ef86:	4b21      	ldr	r3, [pc, #132]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800ef88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800ef8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ef8e:	4b1f      	ldr	r3, [pc, #124]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800ef90:	2200      	movs	r2, #0
 800ef92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ef94:	4b1d      	ldr	r3, [pc, #116]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800ef96:	2200      	movs	r2, #0
 800ef98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ef9a:	4b1c      	ldr	r3, [pc, #112]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800efa0:	4b1a      	ldr	r3, [pc, #104]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800efa2:	220c      	movs	r2, #12
 800efa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800efa6:	4b19      	ldr	r3, [pc, #100]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800efa8:	2200      	movs	r2, #0
 800efaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800efac:	4b17      	ldr	r3, [pc, #92]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800efae:	2200      	movs	r2, #0
 800efb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800efb2:	4b16      	ldr	r3, [pc, #88]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800efb4:	2200      	movs	r2, #0
 800efb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800efb8:	4b14      	ldr	r3, [pc, #80]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800efba:	2200      	movs	r2, #0
 800efbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800efbe:	4b13      	ldr	r3, [pc, #76]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800efc4:	4811      	ldr	r0, [pc, #68]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800efc6:	f7f8 fb27 	bl	8007618 <HAL_UART_Init>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d001      	beq.n	800efd4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800efd0:	f7fe fc5e 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800efd4:	2100      	movs	r1, #0
 800efd6:	480d      	ldr	r0, [pc, #52]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800efd8:	f7fa fb20 	bl	800961c <HAL_UARTEx_SetTxFifoThreshold>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d001      	beq.n	800efe6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800efe2:	f7fe fc55 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800efe6:	2100      	movs	r1, #0
 800efe8:	4808      	ldr	r0, [pc, #32]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800efea:	f7fa fb55 	bl	8009698 <HAL_UARTEx_SetRxFifoThreshold>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d001      	beq.n	800eff8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800eff4:	f7fe fc4c 	bl	800d890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800eff8:	4804      	ldr	r0, [pc, #16]	; (800f00c <MX_USART3_UART_Init+0x90>)
 800effa:	f7fa fad6 	bl	80095aa <HAL_UARTEx_DisableFifoMode>
 800effe:	4603      	mov	r3, r0
 800f000:	2b00      	cmp	r3, #0
 800f002:	d001      	beq.n	800f008 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800f004:	f7fe fc44 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800f008:	bf00      	nop
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	240071b8 	.word	0x240071b8
 800f010:	40004800 	.word	0x40004800

0800f014 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b0be      	sub	sp, #248	; 0xf8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f01c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f020:	2200      	movs	r2, #0
 800f022:	601a      	str	r2, [r3, #0]
 800f024:	605a      	str	r2, [r3, #4]
 800f026:	609a      	str	r2, [r3, #8]
 800f028:	60da      	str	r2, [r3, #12]
 800f02a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f02c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f030:	22bc      	movs	r2, #188	; 0xbc
 800f032:	2100      	movs	r1, #0
 800f034:	4618      	mov	r0, r3
 800f036:	f000 fad7 	bl	800f5e8 <memset>
  if(uartHandle->Instance==UART5)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4a79      	ldr	r2, [pc, #484]	; (800f224 <HAL_UART_MspInit+0x210>)
 800f040:	4293      	cmp	r3, r2
 800f042:	f040 80a6 	bne.w	800f192 <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800f046:	2302      	movs	r3, #2
 800f048:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800f04a:	2300      	movs	r3, #0
 800f04c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f054:	4618      	mov	r0, r3
 800f056:	f7f5 fc8b 	bl	8004970 <HAL_RCCEx_PeriphCLKConfig>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d001      	beq.n	800f064 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800f060:	f7fe fc16 	bl	800d890 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800f064:	4b70      	ldr	r3, [pc, #448]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f06a:	4a6f      	ldr	r2, [pc, #444]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f06c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f070:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800f074:	4b6c      	ldr	r3, [pc, #432]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f07a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f07e:	627b      	str	r3, [r7, #36]	; 0x24
 800f080:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f082:	4b69      	ldr	r3, [pc, #420]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f088:	4a67      	ldr	r2, [pc, #412]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f08a:	f043 0302 	orr.w	r3, r3, #2
 800f08e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f092:	4b65      	ldr	r3, [pc, #404]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f098:	f003 0302 	and.w	r3, r3, #2
 800f09c:	623b      	str	r3, [r7, #32]
 800f09e:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800f0a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f0a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0a8:	2302      	movs	r3, #2
 800f0aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800f0ba:	230e      	movs	r3, #14
 800f0bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f0c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	4859      	ldr	r0, [pc, #356]	; (800f22c <HAL_UART_MspInit+0x218>)
 800f0c8:	f7f4 fa22 	bl	8003510 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800f0cc:	4b58      	ldr	r3, [pc, #352]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f0ce:	4a59      	ldr	r2, [pc, #356]	; (800f234 <HAL_UART_MspInit+0x220>)
 800f0d0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800f0d2:	4b57      	ldr	r3, [pc, #348]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f0d4:	2241      	movs	r2, #65	; 0x41
 800f0d6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f0d8:	4b55      	ldr	r3, [pc, #340]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f0da:	2200      	movs	r2, #0
 800f0dc:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f0de:	4b54      	ldr	r3, [pc, #336]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f0e4:	4b52      	ldr	r3, [pc, #328]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f0e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f0ea:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f0ec:	4b50      	ldr	r3, [pc, #320]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f0f2:	4b4f      	ldr	r3, [pc, #316]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800f0f8:	4b4d      	ldr	r3, [pc, #308]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f0fe:	4b4c      	ldr	r3, [pc, #304]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f100:	2200      	movs	r2, #0
 800f102:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f104:	4b4a      	ldr	r3, [pc, #296]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f106:	2200      	movs	r2, #0
 800f108:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800f10a:	4849      	ldr	r0, [pc, #292]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f10c:	f7f1 fbac 	bl	8000868 <HAL_DMA_Init>
 800f110:	4603      	mov	r3, r0
 800f112:	2b00      	cmp	r3, #0
 800f114:	d001      	beq.n	800f11a <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800f116:	f7fe fbbb 	bl	800d890 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4a44      	ldr	r2, [pc, #272]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f11e:	67da      	str	r2, [r3, #124]	; 0x7c
 800f120:	4a43      	ldr	r2, [pc, #268]	; (800f230 <HAL_UART_MspInit+0x21c>)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 800f126:	4b44      	ldr	r3, [pc, #272]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f128:	4a44      	ldr	r2, [pc, #272]	; (800f23c <HAL_UART_MspInit+0x228>)
 800f12a:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 800f12c:	4b42      	ldr	r3, [pc, #264]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f12e:	2242      	movs	r2, #66	; 0x42
 800f130:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f132:	4b41      	ldr	r3, [pc, #260]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f134:	2240      	movs	r2, #64	; 0x40
 800f136:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f138:	4b3f      	ldr	r3, [pc, #252]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f13a:	2200      	movs	r2, #0
 800f13c:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f13e:	4b3e      	ldr	r3, [pc, #248]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f144:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f146:	4b3c      	ldr	r3, [pc, #240]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f148:	2200      	movs	r2, #0
 800f14a:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f14c:	4b3a      	ldr	r3, [pc, #232]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f14e:	2200      	movs	r2, #0
 800f150:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800f152:	4b39      	ldr	r3, [pc, #228]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f154:	2200      	movs	r2, #0
 800f156:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f158:	4b37      	ldr	r3, [pc, #220]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f15e:	4b36      	ldr	r3, [pc, #216]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f160:	2200      	movs	r2, #0
 800f162:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800f164:	4834      	ldr	r0, [pc, #208]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f166:	f7f1 fb7f 	bl	8000868 <HAL_DMA_Init>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d001      	beq.n	800f174 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 800f170:	f7fe fb8e 	bl	800d890 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4a30      	ldr	r2, [pc, #192]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f178:	679a      	str	r2, [r3, #120]	; 0x78
 800f17a:	4a2f      	ldr	r2, [pc, #188]	; (800f238 <HAL_UART_MspInit+0x224>)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800f180:	2200      	movs	r2, #0
 800f182:	2105      	movs	r1, #5
 800f184:	2035      	movs	r0, #53	; 0x35
 800f186:	f7f1 fb47 	bl	8000818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800f18a:	2035      	movs	r0, #53	; 0x35
 800f18c:	f7f1 fb5e 	bl	800084c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800f190:	e1b0      	b.n	800f4f4 <HAL_UART_MspInit+0x4e0>
  else if(uartHandle->Instance==USART1)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a2a      	ldr	r2, [pc, #168]	; (800f240 <HAL_UART_MspInit+0x22c>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d155      	bne.n	800f248 <HAL_UART_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800f19c:	2301      	movs	r3, #1
 800f19e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f1a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7f5 fbe0 	bl	8004970 <HAL_RCCEx_PeriphCLKConfig>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d001      	beq.n	800f1ba <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800f1b6:	f7fe fb6b 	bl	800d890 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800f1ba:	4b1b      	ldr	r3, [pc, #108]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f1bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f1c0:	4a19      	ldr	r2, [pc, #100]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f1c2:	f043 0310 	orr.w	r3, r3, #16
 800f1c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800f1ca:	4b17      	ldr	r3, [pc, #92]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f1cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f1d0:	f003 0310 	and.w	r3, r3, #16
 800f1d4:	61fb      	str	r3, [r7, #28]
 800f1d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1d8:	4b13      	ldr	r3, [pc, #76]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f1da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f1de:	4a12      	ldr	r2, [pc, #72]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f1e0:	f043 0301 	orr.w	r3, r3, #1
 800f1e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f1e8:	4b0f      	ldr	r3, [pc, #60]	; (800f228 <HAL_UART_MspInit+0x214>)
 800f1ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f1ee:	f003 0301 	and.w	r3, r3, #1
 800f1f2:	61bb      	str	r3, [r7, #24]
 800f1f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800f1f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f1fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1fe:	2302      	movs	r3, #2
 800f200:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f204:	2300      	movs	r3, #0
 800f206:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f20a:	2300      	movs	r3, #0
 800f20c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f210:	2307      	movs	r3, #7
 800f212:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f216:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f21a:	4619      	mov	r1, r3
 800f21c:	4809      	ldr	r0, [pc, #36]	; (800f244 <HAL_UART_MspInit+0x230>)
 800f21e:	f7f4 f977 	bl	8003510 <HAL_GPIO_Init>
}
 800f222:	e167      	b.n	800f4f4 <HAL_UART_MspInit+0x4e0>
 800f224:	40005000 	.word	0x40005000
 800f228:	58024400 	.word	0x58024400
 800f22c:	58020400 	.word	0x58020400
 800f230:	240074e8 	.word	0x240074e8
 800f234:	40020010 	.word	0x40020010
 800f238:	24007560 	.word	0x24007560
 800f23c:	40020028 	.word	0x40020028
 800f240:	40011000 	.word	0x40011000
 800f244:	58020000 	.word	0x58020000
  else if(uartHandle->Instance==USART2)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4aab      	ldr	r2, [pc, #684]	; (800f4fc <HAL_UART_MspInit+0x4e8>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	f040 80a5 	bne.w	800f39e <HAL_UART_MspInit+0x38a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800f254:	2302      	movs	r3, #2
 800f256:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800f258:	2300      	movs	r3, #0
 800f25a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f25e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f262:	4618      	mov	r0, r3
 800f264:	f7f5 fb84 	bl	8004970 <HAL_RCCEx_PeriphCLKConfig>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d001      	beq.n	800f272 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800f26e:	f7fe fb0f 	bl	800d890 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800f272:	4ba3      	ldr	r3, [pc, #652]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f278:	4aa1      	ldr	r2, [pc, #644]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f27a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f27e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800f282:	4b9f      	ldr	r3, [pc, #636]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f28c:	617b      	str	r3, [r7, #20]
 800f28e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f290:	4b9b      	ldr	r3, [pc, #620]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f296:	4a9a      	ldr	r2, [pc, #616]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f298:	f043 0301 	orr.w	r3, r3, #1
 800f29c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f2a0:	4b97      	ldr	r3, [pc, #604]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f2a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2a6:	f003 0301 	and.w	r3, r3, #1
 800f2aa:	613b      	str	r3, [r7, #16]
 800f2ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800f2ae:	230c      	movs	r3, #12
 800f2b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2b4:	2302      	movs	r3, #2
 800f2b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f2c6:	2307      	movs	r3, #7
 800f2c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	488c      	ldr	r0, [pc, #560]	; (800f504 <HAL_UART_MspInit+0x4f0>)
 800f2d4:	f7f4 f91c 	bl	8003510 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 800f2d8:	4b8b      	ldr	r3, [pc, #556]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f2da:	4a8c      	ldr	r2, [pc, #560]	; (800f50c <HAL_UART_MspInit+0x4f8>)
 800f2dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800f2de:	4b8a      	ldr	r3, [pc, #552]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f2e0:	222b      	movs	r2, #43	; 0x2b
 800f2e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f2e4:	4b88      	ldr	r3, [pc, #544]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f2ea:	4b87      	ldr	r3, [pc, #540]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f2f0:	4b85      	ldr	r3, [pc, #532]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f2f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f2f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f2f8:	4b83      	ldr	r3, [pc, #524]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f2fe:	4b82      	ldr	r3, [pc, #520]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f300:	2200      	movs	r2, #0
 800f302:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800f304:	4b80      	ldr	r3, [pc, #512]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f306:	2200      	movs	r2, #0
 800f308:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f30a:	4b7f      	ldr	r3, [pc, #508]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f30c:	2200      	movs	r2, #0
 800f30e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f310:	4b7d      	ldr	r3, [pc, #500]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f312:	2200      	movs	r2, #0
 800f314:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800f316:	487c      	ldr	r0, [pc, #496]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f318:	f7f1 faa6 	bl	8000868 <HAL_DMA_Init>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <HAL_UART_MspInit+0x312>
      Error_Handler();
 800f322:	f7fe fab5 	bl	800d890 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a77      	ldr	r2, [pc, #476]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f32a:	67da      	str	r2, [r3, #124]	; 0x7c
 800f32c:	4a76      	ldr	r2, [pc, #472]	; (800f508 <HAL_UART_MspInit+0x4f4>)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream3;
 800f332:	4b77      	ldr	r3, [pc, #476]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f334:	4a77      	ldr	r2, [pc, #476]	; (800f514 <HAL_UART_MspInit+0x500>)
 800f336:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800f338:	4b75      	ldr	r3, [pc, #468]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f33a:	222c      	movs	r2, #44	; 0x2c
 800f33c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f33e:	4b74      	ldr	r3, [pc, #464]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f340:	2240      	movs	r2, #64	; 0x40
 800f342:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f344:	4b72      	ldr	r3, [pc, #456]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f346:	2200      	movs	r2, #0
 800f348:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f34a:	4b71      	ldr	r3, [pc, #452]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f34c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f350:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f352:	4b6f      	ldr	r3, [pc, #444]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f354:	2200      	movs	r2, #0
 800f356:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f358:	4b6d      	ldr	r3, [pc, #436]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800f35e:	4b6c      	ldr	r3, [pc, #432]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f360:	2200      	movs	r2, #0
 800f362:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f364:	4b6a      	ldr	r3, [pc, #424]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f366:	2200      	movs	r2, #0
 800f368:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f36a:	4b69      	ldr	r3, [pc, #420]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800f370:	4867      	ldr	r0, [pc, #412]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f372:	f7f1 fa79 	bl	8000868 <HAL_DMA_Init>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <HAL_UART_MspInit+0x36c>
      Error_Handler();
 800f37c:	f7fe fa88 	bl	800d890 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4a63      	ldr	r2, [pc, #396]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f384:	679a      	str	r2, [r3, #120]	; 0x78
 800f386:	4a62      	ldr	r2, [pc, #392]	; (800f510 <HAL_UART_MspInit+0x4fc>)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800f38c:	2200      	movs	r2, #0
 800f38e:	2105      	movs	r1, #5
 800f390:	2026      	movs	r0, #38	; 0x26
 800f392:	f7f1 fa41 	bl	8000818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f396:	2026      	movs	r0, #38	; 0x26
 800f398:	f7f1 fa58 	bl	800084c <HAL_NVIC_EnableIRQ>
}
 800f39c:	e0aa      	b.n	800f4f4 <HAL_UART_MspInit+0x4e0>
  else if(uartHandle->Instance==USART3)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a5d      	ldr	r2, [pc, #372]	; (800f518 <HAL_UART_MspInit+0x504>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	f040 80a5 	bne.w	800f4f4 <HAL_UART_MspInit+0x4e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800f3aa:	2302      	movs	r3, #2
 800f3ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f3b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7f5 fad9 	bl	8004970 <HAL_RCCEx_PeriphCLKConfig>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d001      	beq.n	800f3c8 <HAL_UART_MspInit+0x3b4>
      Error_Handler();
 800f3c4:	f7fe fa64 	bl	800d890 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800f3c8:	4b4d      	ldr	r3, [pc, #308]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f3ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f3ce:	4a4c      	ldr	r2, [pc, #304]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f3d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f3d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800f3d8:	4b49      	ldr	r3, [pc, #292]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f3da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f3de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f3e2:	60fb      	str	r3, [r7, #12]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f3e6:	4b46      	ldr	r3, [pc, #280]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f3e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3ec:	4a44      	ldr	r2, [pc, #272]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f3ee:	f043 0308 	orr.w	r3, r3, #8
 800f3f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f3f6:	4b42      	ldr	r3, [pc, #264]	; (800f500 <HAL_UART_MspInit+0x4ec>)
 800f3f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3fc:	f003 0308 	and.w	r3, r3, #8
 800f400:	60bb      	str	r3, [r7, #8]
 800f402:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800f404:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f408:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f40c:	2302      	movs	r3, #2
 800f40e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f412:	2300      	movs	r3, #0
 800f414:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f418:	2300      	movs	r3, #0
 800f41a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f41e:	2307      	movs	r3, #7
 800f420:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f424:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f428:	4619      	mov	r1, r3
 800f42a:	483c      	ldr	r0, [pc, #240]	; (800f51c <HAL_UART_MspInit+0x508>)
 800f42c:	f7f4 f870 	bl	8003510 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream4;
 800f430:	4b3b      	ldr	r3, [pc, #236]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f432:	4a3c      	ldr	r2, [pc, #240]	; (800f524 <HAL_UART_MspInit+0x510>)
 800f434:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800f436:	4b3a      	ldr	r3, [pc, #232]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f438:	222d      	movs	r2, #45	; 0x2d
 800f43a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f43c:	4b38      	ldr	r3, [pc, #224]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f43e:	2200      	movs	r2, #0
 800f440:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f442:	4b37      	ldr	r3, [pc, #220]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f444:	2200      	movs	r2, #0
 800f446:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f448:	4b35      	ldr	r3, [pc, #212]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f44a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f44e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f450:	4b33      	ldr	r3, [pc, #204]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f452:	2200      	movs	r2, #0
 800f454:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f456:	4b32      	ldr	r3, [pc, #200]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f458:	2200      	movs	r2, #0
 800f45a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800f45c:	4b30      	ldr	r3, [pc, #192]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f45e:	2200      	movs	r2, #0
 800f460:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f462:	4b2f      	ldr	r3, [pc, #188]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f464:	2200      	movs	r2, #0
 800f466:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f468:	4b2d      	ldr	r3, [pc, #180]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f46a:	2200      	movs	r2, #0
 800f46c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800f46e:	482c      	ldr	r0, [pc, #176]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f470:	f7f1 f9fa 	bl	8000868 <HAL_DMA_Init>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <HAL_UART_MspInit+0x46a>
      Error_Handler();
 800f47a:	f7fe fa09 	bl	800d890 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4a27      	ldr	r2, [pc, #156]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f482:	67da      	str	r2, [r3, #124]	; 0x7c
 800f484:	4a26      	ldr	r2, [pc, #152]	; (800f520 <HAL_UART_MspInit+0x50c>)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream5;
 800f48a:	4b27      	ldr	r3, [pc, #156]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f48c:	4a27      	ldr	r2, [pc, #156]	; (800f52c <HAL_UART_MspInit+0x518>)
 800f48e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800f490:	4b25      	ldr	r3, [pc, #148]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f492:	222e      	movs	r2, #46	; 0x2e
 800f494:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f496:	4b24      	ldr	r3, [pc, #144]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f498:	2240      	movs	r2, #64	; 0x40
 800f49a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f49c:	4b22      	ldr	r3, [pc, #136]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f49e:	2200      	movs	r2, #0
 800f4a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f4a2:	4b21      	ldr	r3, [pc, #132]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f4a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f4a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f4aa:	4b1f      	ldr	r3, [pc, #124]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f4b0:	4b1d      	ldr	r3, [pc, #116]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800f4b6:	4b1c      	ldr	r3, [pc, #112]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f4bc:	4b1a      	ldr	r3, [pc, #104]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f4c2:	4b19      	ldr	r3, [pc, #100]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800f4c8:	4817      	ldr	r0, [pc, #92]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f4ca:	f7f1 f9cd 	bl	8000868 <HAL_DMA_Init>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <HAL_UART_MspInit+0x4c4>
      Error_Handler();
 800f4d4:	f7fe f9dc 	bl	800d890 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a13      	ldr	r2, [pc, #76]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f4dc:	679a      	str	r2, [r3, #120]	; 0x78
 800f4de:	4a12      	ldr	r2, [pc, #72]	; (800f528 <HAL_UART_MspInit+0x514>)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	2105      	movs	r1, #5
 800f4e8:	2027      	movs	r0, #39	; 0x27
 800f4ea:	f7f1 f995 	bl	8000818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800f4ee:	2027      	movs	r0, #39	; 0x27
 800f4f0:	f7f1 f9ac 	bl	800084c <HAL_NVIC_EnableIRQ>
}
 800f4f4:	bf00      	nop
 800f4f6:	37f8      	adds	r7, #248	; 0xf8
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	40004400 	.word	0x40004400
 800f500:	58024400 	.word	0x58024400
 800f504:	58020000 	.word	0x58020000
 800f508:	240070c8 	.word	0x240070c8
 800f50c:	40020040 	.word	0x40020040
 800f510:	24007350 	.word	0x24007350
 800f514:	40020058 	.word	0x40020058
 800f518:	40004800 	.word	0x40004800
 800f51c:	58020c00 	.word	0x58020c00
 800f520:	24007140 	.word	0x24007140
 800f524:	40020070 	.word	0x40020070
 800f528:	24007248 	.word	0x24007248
 800f52c:	40020088 	.word	0x40020088

0800f530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800f530:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f568 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800f534:	f7fe fca6 	bl	800de84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f538:	480c      	ldr	r0, [pc, #48]	; (800f56c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800f53a:	490d      	ldr	r1, [pc, #52]	; (800f570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800f53c:	4a0d      	ldr	r2, [pc, #52]	; (800f574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800f53e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f540:	e002      	b.n	800f548 <LoopCopyDataInit>

0800f542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f546:	3304      	adds	r3, #4

0800f548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f54a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f54c:	d3f9      	bcc.n	800f542 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f54e:	4a0a      	ldr	r2, [pc, #40]	; (800f578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800f550:	4c0a      	ldr	r4, [pc, #40]	; (800f57c <LoopFillZerobss+0x22>)
  movs r3, #0
 800f552:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f554:	e001      	b.n	800f55a <LoopFillZerobss>

0800f556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f558:	3204      	adds	r2, #4

0800f55a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f55a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f55c:	d3fb      	bcc.n	800f556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f55e:	f000 f811 	bl	800f584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f562:	f7fe f87d 	bl	800d660 <main>
  bx  lr
 800f566:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f568:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800f56c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800f570:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800f574:	0800f7d8 	.word	0x0800f7d8
  ldr r2, =_sbss
 800f578:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800f57c:	240075d8 	.word	0x240075d8

0800f580 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f580:	e7fe      	b.n	800f580 <ADC3_IRQHandler>
	...

0800f584 <__libc_init_array>:
 800f584:	b570      	push	{r4, r5, r6, lr}
 800f586:	4d0d      	ldr	r5, [pc, #52]	; (800f5bc <__libc_init_array+0x38>)
 800f588:	4c0d      	ldr	r4, [pc, #52]	; (800f5c0 <__libc_init_array+0x3c>)
 800f58a:	1b64      	subs	r4, r4, r5
 800f58c:	10a4      	asrs	r4, r4, #2
 800f58e:	2600      	movs	r6, #0
 800f590:	42a6      	cmp	r6, r4
 800f592:	d109      	bne.n	800f5a8 <__libc_init_array+0x24>
 800f594:	4d0b      	ldr	r5, [pc, #44]	; (800f5c4 <__libc_init_array+0x40>)
 800f596:	4c0c      	ldr	r4, [pc, #48]	; (800f5c8 <__libc_init_array+0x44>)
 800f598:	f000 f82e 	bl	800f5f8 <_init>
 800f59c:	1b64      	subs	r4, r4, r5
 800f59e:	10a4      	asrs	r4, r4, #2
 800f5a0:	2600      	movs	r6, #0
 800f5a2:	42a6      	cmp	r6, r4
 800f5a4:	d105      	bne.n	800f5b2 <__libc_init_array+0x2e>
 800f5a6:	bd70      	pop	{r4, r5, r6, pc}
 800f5a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5ac:	4798      	blx	r3
 800f5ae:	3601      	adds	r6, #1
 800f5b0:	e7ee      	b.n	800f590 <__libc_init_array+0xc>
 800f5b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5b6:	4798      	blx	r3
 800f5b8:	3601      	adds	r6, #1
 800f5ba:	e7f2      	b.n	800f5a2 <__libc_init_array+0x1e>
 800f5bc:	0800f7d0 	.word	0x0800f7d0
 800f5c0:	0800f7d0 	.word	0x0800f7d0
 800f5c4:	0800f7d0 	.word	0x0800f7d0
 800f5c8:	0800f7d4 	.word	0x0800f7d4

0800f5cc <memcpy>:
 800f5cc:	440a      	add	r2, r1
 800f5ce:	4291      	cmp	r1, r2
 800f5d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5d4:	d100      	bne.n	800f5d8 <memcpy+0xc>
 800f5d6:	4770      	bx	lr
 800f5d8:	b510      	push	{r4, lr}
 800f5da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5e2:	4291      	cmp	r1, r2
 800f5e4:	d1f9      	bne.n	800f5da <memcpy+0xe>
 800f5e6:	bd10      	pop	{r4, pc}

0800f5e8 <memset>:
 800f5e8:	4402      	add	r2, r0
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d100      	bne.n	800f5f2 <memset+0xa>
 800f5f0:	4770      	bx	lr
 800f5f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f5f6:	e7f9      	b.n	800f5ec <memset+0x4>

0800f5f8 <_init>:
 800f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fa:	bf00      	nop
 800f5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5fe:	bc08      	pop	{r3}
 800f600:	469e      	mov	lr, r3
 800f602:	4770      	bx	lr

0800f604 <_fini>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr
