
OurEDA-B2S_PowH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800ece0  0800ece0  0001ece0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ee20  0800ee20  0001ee20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ee28  0800ee28  0001ee28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ee2c  0800ee2c  0001ee2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800ee30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000731c  24000014  0800ee44  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24007330  0800ee44  00027330  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031c57  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050e4  00000000  00000000  00051c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017a8  00000000  00000000  00056d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001600  00000000  00000000  00058528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a51c  00000000  00000000  00059b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002122a  00000000  00000000  00094044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f064  00000000  00000000  000b526e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002242d2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000061f0  00000000  00000000  00224328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ecc8 	.word	0x0800ecc8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800ecc8 	.word	0x0800ecc8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 f90f 	bl	8000802 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e4:	f003 ff86 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_Init+0x68>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	f003 030f 	and.w	r3, r3, #15
 80005f4:	4913      	ldr	r1, [pc, #76]	; (8000644 <HAL_Init+0x6c>)
 80005f6:	5ccb      	ldrb	r3, [r1, r3]
 80005f8:	f003 031f 	and.w	r3, r3, #31
 80005fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000600:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_Init+0x6c>)
 800060c:	5cd3      	ldrb	r3, [r2, r3]
 800060e:	f003 031f 	and.w	r3, r3, #31
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	fa22 f303 	lsr.w	r3, r2, r3
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_Init+0x70>)
 800061a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800061c:	4a0b      	ldr	r2, [pc, #44]	; (800064c <HAL_Init+0x74>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	200f      	movs	r0, #15
 8000624:	f00c fcc0 	bl	800cfa8 <HAL_InitTick>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e002      	b.n	8000638 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000632:	f00c fc9b 	bl	800cf6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58024400 	.word	0x58024400
 8000644:	0800ee10 	.word	0x0800ee10
 8000648:	24000010 	.word	0x24000010
 800064c:	2400000c 	.word	0x2400000c

08000650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	24000004 	.word	0x24000004
 8000674:	2400401c 	.word	0x2400401c

08000678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2400401c 	.word	0x2400401c

08000690 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_GetREVID+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	0c1b      	lsrs	r3, r3, #16
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	5c001000 	.word	0x5c001000

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <__NVIC_SetPriorityGrouping+0x40>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x40>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	05fa0000 	.word	0x05fa0000

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff4c 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000826:	f7ff ff63 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 800082a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	68b9      	ldr	r1, [r7, #8]
 8000830:	6978      	ldr	r0, [r7, #20]
 8000832:	f7ff ffb3 	bl	800079c <NVIC_EncodePriority>
 8000836:	4602      	mov	r2, r0
 8000838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff82 	bl	8000748 <__NVIC_SetPriority>
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff56 	bl	800070c <__NVIC_EnableIRQ>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff ff02 	bl	8000678 <HAL_GetTick>
 8000874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	e316      	b.n	8000eae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a66      	ldr	r2, [pc, #408]	; (8000a20 <HAL_DMA_Init+0x1b8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d04a      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a65      	ldr	r2, [pc, #404]	; (8000a24 <HAL_DMA_Init+0x1bc>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d045      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a63      	ldr	r2, [pc, #396]	; (8000a28 <HAL_DMA_Init+0x1c0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d040      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a62      	ldr	r2, [pc, #392]	; (8000a2c <HAL_DMA_Init+0x1c4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d03b      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_DMA_Init+0x1c8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d036      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a5f      	ldr	r2, [pc, #380]	; (8000a34 <HAL_DMA_Init+0x1cc>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d031      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a5d      	ldr	r2, [pc, #372]	; (8000a38 <HAL_DMA_Init+0x1d0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d02c      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a5c      	ldr	r2, [pc, #368]	; (8000a3c <HAL_DMA_Init+0x1d4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d027      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a5a      	ldr	r2, [pc, #360]	; (8000a40 <HAL_DMA_Init+0x1d8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d022      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a59      	ldr	r2, [pc, #356]	; (8000a44 <HAL_DMA_Init+0x1dc>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d01d      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a57      	ldr	r2, [pc, #348]	; (8000a48 <HAL_DMA_Init+0x1e0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d018      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a56      	ldr	r2, [pc, #344]	; (8000a4c <HAL_DMA_Init+0x1e4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d013      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a54      	ldr	r2, [pc, #336]	; (8000a50 <HAL_DMA_Init+0x1e8>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d00e      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a53      	ldr	r2, [pc, #332]	; (8000a54 <HAL_DMA_Init+0x1ec>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d009      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a51      	ldr	r2, [pc, #324]	; (8000a58 <HAL_DMA_Init+0x1f0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d004      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a50      	ldr	r2, [pc, #320]	; (8000a5c <HAL_DMA_Init+0x1f4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d101      	bne.n	8000924 <HAL_DMA_Init+0xbc>
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <HAL_DMA_Init+0xbe>
 8000924:	2300      	movs	r3, #0
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 813b 	beq.w	8000ba2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2202      	movs	r2, #2
 8000930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a37      	ldr	r2, [pc, #220]	; (8000a20 <HAL_DMA_Init+0x1b8>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d04a      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a36      	ldr	r2, [pc, #216]	; (8000a24 <HAL_DMA_Init+0x1bc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d045      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a34      	ldr	r2, [pc, #208]	; (8000a28 <HAL_DMA_Init+0x1c0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d040      	beq.n	80009dc <HAL_DMA_Init+0x174>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <HAL_DMA_Init+0x1c4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d03b      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <HAL_DMA_Init+0x1c8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d036      	beq.n	80009dc <HAL_DMA_Init+0x174>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <HAL_DMA_Init+0x1cc>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d031      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <HAL_DMA_Init+0x1d0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d02c      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a2d      	ldr	r2, [pc, #180]	; (8000a3c <HAL_DMA_Init+0x1d4>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d027      	beq.n	80009dc <HAL_DMA_Init+0x174>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2b      	ldr	r2, [pc, #172]	; (8000a40 <HAL_DMA_Init+0x1d8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d022      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <HAL_DMA_Init+0x1dc>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d01d      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <HAL_DMA_Init+0x1e0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d018      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <HAL_DMA_Init+0x1e4>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d013      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <HAL_DMA_Init+0x1e8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d00e      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a24      	ldr	r2, [pc, #144]	; (8000a54 <HAL_DMA_Init+0x1ec>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d009      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <HAL_DMA_Init+0x1f0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d004      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <HAL_DMA_Init+0x1f4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d108      	bne.n	80009ee <HAL_DMA_Init+0x186>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 0201 	bic.w	r2, r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e007      	b.n	80009fe <HAL_DMA_Init+0x196>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f022 0201 	bic.w	r2, r2, #1
 80009fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80009fe:	e02f      	b.n	8000a60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000a00:	f7ff fe3a 	bl	8000678 <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b05      	cmp	r3, #5
 8000a0c:	d928      	bls.n	8000a60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2220      	movs	r2, #32
 8000a12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2203      	movs	r2, #3
 8000a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e246      	b.n	8000eae <HAL_DMA_Init+0x646>
 8000a20:	40020010 	.word	0x40020010
 8000a24:	40020028 	.word	0x40020028
 8000a28:	40020040 	.word	0x40020040
 8000a2c:	40020058 	.word	0x40020058
 8000a30:	40020070 	.word	0x40020070
 8000a34:	40020088 	.word	0x40020088
 8000a38:	400200a0 	.word	0x400200a0
 8000a3c:	400200b8 	.word	0x400200b8
 8000a40:	40020410 	.word	0x40020410
 8000a44:	40020428 	.word	0x40020428
 8000a48:	40020440 	.word	0x40020440
 8000a4c:	40020458 	.word	0x40020458
 8000a50:	40020470 	.word	0x40020470
 8000a54:	40020488 	.word	0x40020488
 8000a58:	400204a0 	.word	0x400204a0
 8000a5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1c8      	bne.n	8000a00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	4b83      	ldr	r3, [pc, #524]	; (8000c88 <HAL_DMA_Init+0x420>)
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000a86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a1b      	ldr	r3, [r3, #32]
 8000aa4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d107      	bne.n	8000ac4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4313      	orrs	r3, r2
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8000ac4:	4b71      	ldr	r3, [pc, #452]	; (8000c8c <HAL_DMA_Init+0x424>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b71      	ldr	r3, [pc, #452]	; (8000c90 <HAL_DMA_Init+0x428>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ad0:	d328      	bcc.n	8000b24 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b28      	cmp	r3, #40	; 0x28
 8000ad8:	d903      	bls.n	8000ae2 <HAL_DMA_Init+0x27a>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b2e      	cmp	r3, #46	; 0x2e
 8000ae0:	d917      	bls.n	8000b12 <HAL_DMA_Init+0x2aa>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8000ae8:	d903      	bls.n	8000af2 <HAL_DMA_Init+0x28a>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b42      	cmp	r3, #66	; 0x42
 8000af0:	d90f      	bls.n	8000b12 <HAL_DMA_Init+0x2aa>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b46      	cmp	r3, #70	; 0x46
 8000af8:	d903      	bls.n	8000b02 <HAL_DMA_Init+0x29a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b48      	cmp	r3, #72	; 0x48
 8000b00:	d907      	bls.n	8000b12 <HAL_DMA_Init+0x2aa>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b4e      	cmp	r3, #78	; 0x4e
 8000b08:	d905      	bls.n	8000b16 <HAL_DMA_Init+0x2ae>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2b52      	cmp	r3, #82	; 0x52
 8000b10:	d801      	bhi.n	8000b16 <HAL_DMA_Init+0x2ae>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <HAL_DMA_Init+0x2b0>
 8000b16:	2300      	movs	r3, #0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b22:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	f023 0307 	bic.w	r3, r3, #7
 8000b3a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d117      	bne.n	8000b7e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00e      	beq.n	8000b7e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f002 fb3d 	bl	80031e0 <DMA_CheckFifoParam>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d008      	beq.n	8000b7e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2240      	movs	r2, #64	; 0x40
 8000b70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e197      	b.n	8000eae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f002 fa78 	bl	800307c <DMA_CalcBaseAndBitshift>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	223f      	movs	r2, #63	; 0x3f
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	e0cd      	b.n	8000d3e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a3b      	ldr	r2, [pc, #236]	; (8000c94 <HAL_DMA_Init+0x42c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d022      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a39      	ldr	r2, [pc, #228]	; (8000c98 <HAL_DMA_Init+0x430>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d01d      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a38      	ldr	r2, [pc, #224]	; (8000c9c <HAL_DMA_Init+0x434>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d018      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <HAL_DMA_Init+0x438>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d013      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <HAL_DMA_Init+0x43c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00e      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <HAL_DMA_Init+0x440>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d009      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a32      	ldr	r2, [pc, #200]	; (8000cac <HAL_DMA_Init+0x444>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d004      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <HAL_DMA_Init+0x448>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_DMA_Init+0x38e>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <HAL_DMA_Init+0x390>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 8097 	beq.w	8000d2c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a24      	ldr	r2, [pc, #144]	; (8000c94 <HAL_DMA_Init+0x42c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d021      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a22      	ldr	r2, [pc, #136]	; (8000c98 <HAL_DMA_Init+0x430>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d01c      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <HAL_DMA_Init+0x434>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d017      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a1f      	ldr	r2, [pc, #124]	; (8000ca0 <HAL_DMA_Init+0x438>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d012      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_DMA_Init+0x43c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d00d      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_DMA_Init+0x440>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d008      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <HAL_DMA_Init+0x444>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d003      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_DMA_Init+0x448>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2202      	movs	r2, #2
 8000c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_DMA_Init+0x44c>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b40      	cmp	r3, #64	; 0x40
 8000c74:	d020      	beq.n	8000cb8 <HAL_DMA_Init+0x450>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b80      	cmp	r3, #128	; 0x80
 8000c7c:	d102      	bne.n	8000c84 <HAL_DMA_Init+0x41c>
 8000c7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c82:	e01a      	b.n	8000cba <HAL_DMA_Init+0x452>
 8000c84:	2300      	movs	r3, #0
 8000c86:	e018      	b.n	8000cba <HAL_DMA_Init+0x452>
 8000c88:	fe10803f 	.word	0xfe10803f
 8000c8c:	5c001000 	.word	0x5c001000
 8000c90:	ffff0000 	.word	0xffff0000
 8000c94:	58025408 	.word	0x58025408
 8000c98:	5802541c 	.word	0x5802541c
 8000c9c:	58025430 	.word	0x58025430
 8000ca0:	58025444 	.word	0x58025444
 8000ca4:	58025458 	.word	0x58025458
 8000ca8:	5802546c 	.word	0x5802546c
 8000cac:	58025480 	.word	0x58025480
 8000cb0:	58025494 	.word	0x58025494
 8000cb4:	fffe000f 	.word	0xfffe000f
 8000cb8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68d2      	ldr	r2, [r2, #12]
 8000cbe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000cc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ce8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <HAL_DMA_Init+0x650>)
 8000d00:	4413      	add	r3, r2
 8000d02:	4a6e      	ldr	r2, [pc, #440]	; (8000ebc <HAL_DMA_Init+0x654>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	009a      	lsls	r2, r3, #2
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f002 f9b3 	bl	800307c <DMA_CalcBaseAndBitshift>
 8000d16:	4603      	mov	r3, r0
 8000d18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	2201      	movs	r2, #1
 8000d24:	409a      	lsls	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	e008      	b.n	8000d3e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2240      	movs	r2, #64	; 0x40
 8000d30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2203      	movs	r2, #3
 8000d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e0b7      	b.n	8000eae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a5f      	ldr	r2, [pc, #380]	; (8000ec0 <HAL_DMA_Init+0x658>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d072      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a5d      	ldr	r2, [pc, #372]	; (8000ec4 <HAL_DMA_Init+0x65c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d06d      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a5c      	ldr	r2, [pc, #368]	; (8000ec8 <HAL_DMA_Init+0x660>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d068      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a5a      	ldr	r2, [pc, #360]	; (8000ecc <HAL_DMA_Init+0x664>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d063      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a59      	ldr	r2, [pc, #356]	; (8000ed0 <HAL_DMA_Init+0x668>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d05e      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <HAL_DMA_Init+0x66c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d059      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a56      	ldr	r2, [pc, #344]	; (8000ed8 <HAL_DMA_Init+0x670>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d054      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a54      	ldr	r2, [pc, #336]	; (8000edc <HAL_DMA_Init+0x674>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d04f      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a53      	ldr	r2, [pc, #332]	; (8000ee0 <HAL_DMA_Init+0x678>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d04a      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a51      	ldr	r2, [pc, #324]	; (8000ee4 <HAL_DMA_Init+0x67c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d045      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a50      	ldr	r2, [pc, #320]	; (8000ee8 <HAL_DMA_Init+0x680>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d040      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a4e      	ldr	r2, [pc, #312]	; (8000eec <HAL_DMA_Init+0x684>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d03b      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a4d      	ldr	r2, [pc, #308]	; (8000ef0 <HAL_DMA_Init+0x688>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d036      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a4b      	ldr	r2, [pc, #300]	; (8000ef4 <HAL_DMA_Init+0x68c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d031      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a4a      	ldr	r2, [pc, #296]	; (8000ef8 <HAL_DMA_Init+0x690>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d02c      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a48      	ldr	r2, [pc, #288]	; (8000efc <HAL_DMA_Init+0x694>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d027      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a47      	ldr	r2, [pc, #284]	; (8000f00 <HAL_DMA_Init+0x698>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d022      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <HAL_DMA_Init+0x69c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01d      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <HAL_DMA_Init+0x6a0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d018      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a42      	ldr	r2, [pc, #264]	; (8000f0c <HAL_DMA_Init+0x6a4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a41      	ldr	r2, [pc, #260]	; (8000f10 <HAL_DMA_Init+0x6a8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d00e      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a3f      	ldr	r2, [pc, #252]	; (8000f14 <HAL_DMA_Init+0x6ac>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d009      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a3e      	ldr	r2, [pc, #248]	; (8000f18 <HAL_DMA_Init+0x6b0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d004      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a3c      	ldr	r2, [pc, #240]	; (8000f1c <HAL_DMA_Init+0x6b4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_DMA_Init+0x5ca>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_DMA_Init+0x5cc>
 8000e32:	2300      	movs	r3, #0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d032      	beq.n	8000e9e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f002 fa4d 	bl	80032d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b80      	cmp	r3, #128	; 0x80
 8000e44:	d102      	bne.n	8000e4c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000e60:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d010      	beq.n	8000e8c <HAL_DMA_Init+0x624>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d80c      	bhi.n	8000e8c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f002 faca 	bl	800340c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	e008      	b.n	8000e9e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	a7fdabf8 	.word	0xa7fdabf8
 8000ebc:	cccccccd 	.word	0xcccccccd
 8000ec0:	40020010 	.word	0x40020010
 8000ec4:	40020028 	.word	0x40020028
 8000ec8:	40020040 	.word	0x40020040
 8000ecc:	40020058 	.word	0x40020058
 8000ed0:	40020070 	.word	0x40020070
 8000ed4:	40020088 	.word	0x40020088
 8000ed8:	400200a0 	.word	0x400200a0
 8000edc:	400200b8 	.word	0x400200b8
 8000ee0:	40020410 	.word	0x40020410
 8000ee4:	40020428 	.word	0x40020428
 8000ee8:	40020440 	.word	0x40020440
 8000eec:	40020458 	.word	0x40020458
 8000ef0:	40020470 	.word	0x40020470
 8000ef4:	40020488 	.word	0x40020488
 8000ef8:	400204a0 	.word	0x400204a0
 8000efc:	400204b8 	.word	0x400204b8
 8000f00:	58025408 	.word	0x58025408
 8000f04:	5802541c 	.word	0x5802541c
 8000f08:	58025430 	.word	0x58025430
 8000f0c:	58025444 	.word	0x58025444
 8000f10:	58025458 	.word	0x58025458
 8000f14:	5802546c 	.word	0x5802546c
 8000f18:	58025480 	.word	0x58025480
 8000f1c:	58025494 	.word	0x58025494

08000f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e226      	b.n	800138a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_DMA_Start_IT+0x2a>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e21f      	b.n	800138a <HAL_DMA_Start_IT+0x46a>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	f040 820a 	bne.w	8001374 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2202      	movs	r2, #2
 8000f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a68      	ldr	r2, [pc, #416]	; (8001114 <HAL_DMA_Start_IT+0x1f4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d04a      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a66      	ldr	r2, [pc, #408]	; (8001118 <HAL_DMA_Start_IT+0x1f8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d045      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a65      	ldr	r2, [pc, #404]	; (800111c <HAL_DMA_Start_IT+0x1fc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d040      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a63      	ldr	r2, [pc, #396]	; (8001120 <HAL_DMA_Start_IT+0x200>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d03b      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a62      	ldr	r2, [pc, #392]	; (8001124 <HAL_DMA_Start_IT+0x204>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d036      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a60      	ldr	r2, [pc, #384]	; (8001128 <HAL_DMA_Start_IT+0x208>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d031      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_DMA_Start_IT+0x20c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d02c      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a5d      	ldr	r2, [pc, #372]	; (8001130 <HAL_DMA_Start_IT+0x210>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d027      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a5c      	ldr	r2, [pc, #368]	; (8001134 <HAL_DMA_Start_IT+0x214>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d022      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a5a      	ldr	r2, [pc, #360]	; (8001138 <HAL_DMA_Start_IT+0x218>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01d      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a59      	ldr	r2, [pc, #356]	; (800113c <HAL_DMA_Start_IT+0x21c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d018      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a57      	ldr	r2, [pc, #348]	; (8001140 <HAL_DMA_Start_IT+0x220>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a56      	ldr	r2, [pc, #344]	; (8001144 <HAL_DMA_Start_IT+0x224>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d00e      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a54      	ldr	r2, [pc, #336]	; (8001148 <HAL_DMA_Start_IT+0x228>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d009      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a53      	ldr	r2, [pc, #332]	; (800114c <HAL_DMA_Start_IT+0x22c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d004      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a51      	ldr	r2, [pc, #324]	; (8001150 <HAL_DMA_Start_IT+0x230>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d108      	bne.n	8001020 <HAL_DMA_Start_IT+0x100>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 0201 	bic.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e007      	b.n	8001030 <HAL_DMA_Start_IT+0x110>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f001 fe74 	bl	8002d24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a34      	ldr	r2, [pc, #208]	; (8001114 <HAL_DMA_Start_IT+0x1f4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d04a      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <HAL_DMA_Start_IT+0x1f8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d045      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a31      	ldr	r2, [pc, #196]	; (800111c <HAL_DMA_Start_IT+0x1fc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d040      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a30      	ldr	r2, [pc, #192]	; (8001120 <HAL_DMA_Start_IT+0x200>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d03b      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <HAL_DMA_Start_IT+0x204>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d036      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <HAL_DMA_Start_IT+0x208>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d031      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a2b      	ldr	r2, [pc, #172]	; (800112c <HAL_DMA_Start_IT+0x20c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d02c      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a2a      	ldr	r2, [pc, #168]	; (8001130 <HAL_DMA_Start_IT+0x210>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d027      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <HAL_DMA_Start_IT+0x214>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d022      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a27      	ldr	r2, [pc, #156]	; (8001138 <HAL_DMA_Start_IT+0x218>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d01d      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a25      	ldr	r2, [pc, #148]	; (800113c <HAL_DMA_Start_IT+0x21c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d018      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a24      	ldr	r2, [pc, #144]	; (8001140 <HAL_DMA_Start_IT+0x220>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <HAL_DMA_Start_IT+0x224>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00e      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_DMA_Start_IT+0x228>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d009      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1f      	ldr	r2, [pc, #124]	; (800114c <HAL_DMA_Start_IT+0x22c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d004      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <HAL_DMA_Start_IT+0x230>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d101      	bne.n	80010e0 <HAL_DMA_Start_IT+0x1c0>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_DMA_Start_IT+0x1c2>
 80010e0:	2300      	movs	r3, #0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d036      	beq.n	8001154 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 021e 	bic.w	r2, r3, #30
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0216 	orr.w	r2, r2, #22
 80010f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d03e      	beq.n	8001180 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0208 	orr.w	r2, r2, #8
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e035      	b.n	8001180 <HAL_DMA_Start_IT+0x260>
 8001114:	40020010 	.word	0x40020010
 8001118:	40020028 	.word	0x40020028
 800111c:	40020040 	.word	0x40020040
 8001120:	40020058 	.word	0x40020058
 8001124:	40020070 	.word	0x40020070
 8001128:	40020088 	.word	0x40020088
 800112c:	400200a0 	.word	0x400200a0
 8001130:	400200b8 	.word	0x400200b8
 8001134:	40020410 	.word	0x40020410
 8001138:	40020428 	.word	0x40020428
 800113c:	40020440 	.word	0x40020440
 8001140:	40020458 	.word	0x40020458
 8001144:	40020470 	.word	0x40020470
 8001148:	40020488 	.word	0x40020488
 800114c:	400204a0 	.word	0x400204a0
 8001150:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 020e 	bic.w	r2, r3, #14
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 020a 	orr.w	r2, r2, #10
 8001166:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0204 	orr.w	r2, r2, #4
 800117e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a83      	ldr	r2, [pc, #524]	; (8001394 <HAL_DMA_Start_IT+0x474>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d072      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a82      	ldr	r2, [pc, #520]	; (8001398 <HAL_DMA_Start_IT+0x478>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d06d      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a80      	ldr	r2, [pc, #512]	; (800139c <HAL_DMA_Start_IT+0x47c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d068      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a7f      	ldr	r2, [pc, #508]	; (80013a0 <HAL_DMA_Start_IT+0x480>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d063      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a7d      	ldr	r2, [pc, #500]	; (80013a4 <HAL_DMA_Start_IT+0x484>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d05e      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a7c      	ldr	r2, [pc, #496]	; (80013a8 <HAL_DMA_Start_IT+0x488>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d059      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a7a      	ldr	r2, [pc, #488]	; (80013ac <HAL_DMA_Start_IT+0x48c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d054      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a79      	ldr	r2, [pc, #484]	; (80013b0 <HAL_DMA_Start_IT+0x490>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d04f      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a77      	ldr	r2, [pc, #476]	; (80013b4 <HAL_DMA_Start_IT+0x494>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d04a      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a76      	ldr	r2, [pc, #472]	; (80013b8 <HAL_DMA_Start_IT+0x498>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d045      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a74      	ldr	r2, [pc, #464]	; (80013bc <HAL_DMA_Start_IT+0x49c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d040      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a73      	ldr	r2, [pc, #460]	; (80013c0 <HAL_DMA_Start_IT+0x4a0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d03b      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a71      	ldr	r2, [pc, #452]	; (80013c4 <HAL_DMA_Start_IT+0x4a4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d036      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a70      	ldr	r2, [pc, #448]	; (80013c8 <HAL_DMA_Start_IT+0x4a8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d031      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_DMA_Start_IT+0x4ac>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d02c      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6d      	ldr	r2, [pc, #436]	; (80013d0 <HAL_DMA_Start_IT+0x4b0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d027      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6b      	ldr	r2, [pc, #428]	; (80013d4 <HAL_DMA_Start_IT+0x4b4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d022      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6a      	ldr	r2, [pc, #424]	; (80013d8 <HAL_DMA_Start_IT+0x4b8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d01d      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a68      	ldr	r2, [pc, #416]	; (80013dc <HAL_DMA_Start_IT+0x4bc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d018      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a67      	ldr	r2, [pc, #412]	; (80013e0 <HAL_DMA_Start_IT+0x4c0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d013      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a65      	ldr	r2, [pc, #404]	; (80013e4 <HAL_DMA_Start_IT+0x4c4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00e      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a64      	ldr	r2, [pc, #400]	; (80013e8 <HAL_DMA_Start_IT+0x4c8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d009      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a62      	ldr	r2, [pc, #392]	; (80013ec <HAL_DMA_Start_IT+0x4cc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d004      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a61      	ldr	r2, [pc, #388]	; (80013f0 <HAL_DMA_Start_IT+0x4d0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_DMA_Start_IT+0x354>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <HAL_DMA_Start_IT+0x356>
 8001274:	2300      	movs	r3, #0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d01a      	beq.n	80012b0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001296:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a37      	ldr	r2, [pc, #220]	; (8001394 <HAL_DMA_Start_IT+0x474>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d04a      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a36      	ldr	r2, [pc, #216]	; (8001398 <HAL_DMA_Start_IT+0x478>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d045      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a34      	ldr	r2, [pc, #208]	; (800139c <HAL_DMA_Start_IT+0x47c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d040      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a33      	ldr	r2, [pc, #204]	; (80013a0 <HAL_DMA_Start_IT+0x480>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d03b      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a31      	ldr	r2, [pc, #196]	; (80013a4 <HAL_DMA_Start_IT+0x484>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d036      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <HAL_DMA_Start_IT+0x488>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d031      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <HAL_DMA_Start_IT+0x48c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d02c      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a2d      	ldr	r2, [pc, #180]	; (80013b0 <HAL_DMA_Start_IT+0x490>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d027      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a2b      	ldr	r2, [pc, #172]	; (80013b4 <HAL_DMA_Start_IT+0x494>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d022      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <HAL_DMA_Start_IT+0x498>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d01d      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_DMA_Start_IT+0x49c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d018      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <HAL_DMA_Start_IT+0x4a0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d013      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <HAL_DMA_Start_IT+0x4a4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00e      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <HAL_DMA_Start_IT+0x4a8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d009      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_DMA_Start_IT+0x4ac>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d004      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_DMA_Start_IT+0x4b0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d108      	bne.n	8001362 <HAL_DMA_Start_IT+0x442>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e012      	b.n	8001388 <HAL_DMA_Start_IT+0x468>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e009      	b.n	8001388 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001388:	7dfb      	ldrb	r3, [r7, #23]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020010 	.word	0x40020010
 8001398:	40020028 	.word	0x40020028
 800139c:	40020040 	.word	0x40020040
 80013a0:	40020058 	.word	0x40020058
 80013a4:	40020070 	.word	0x40020070
 80013a8:	40020088 	.word	0x40020088
 80013ac:	400200a0 	.word	0x400200a0
 80013b0:	400200b8 	.word	0x400200b8
 80013b4:	40020410 	.word	0x40020410
 80013b8:	40020428 	.word	0x40020428
 80013bc:	40020440 	.word	0x40020440
 80013c0:	40020458 	.word	0x40020458
 80013c4:	40020470 	.word	0x40020470
 80013c8:	40020488 	.word	0x40020488
 80013cc:	400204a0 	.word	0x400204a0
 80013d0:	400204b8 	.word	0x400204b8
 80013d4:	58025408 	.word	0x58025408
 80013d8:	5802541c 	.word	0x5802541c
 80013dc:	58025430 	.word	0x58025430
 80013e0:	58025444 	.word	0x58025444
 80013e4:	58025458 	.word	0x58025458
 80013e8:	5802546c 	.word	0x5802546c
 80013ec:	58025480 	.word	0x58025480
 80013f0:	58025494 	.word	0x58025494

080013f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff f93c 	bl	8000678 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e2dc      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d008      	beq.n	800142a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e2cd      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a76      	ldr	r2, [pc, #472]	; (8001608 <HAL_DMA_Abort+0x214>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d04a      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a74      	ldr	r2, [pc, #464]	; (800160c <HAL_DMA_Abort+0x218>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d045      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a73      	ldr	r2, [pc, #460]	; (8001610 <HAL_DMA_Abort+0x21c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d040      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a71      	ldr	r2, [pc, #452]	; (8001614 <HAL_DMA_Abort+0x220>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d03b      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a70      	ldr	r2, [pc, #448]	; (8001618 <HAL_DMA_Abort+0x224>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d036      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a6e      	ldr	r2, [pc, #440]	; (800161c <HAL_DMA_Abort+0x228>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d031      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6d      	ldr	r2, [pc, #436]	; (8001620 <HAL_DMA_Abort+0x22c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d02c      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6b      	ldr	r2, [pc, #428]	; (8001624 <HAL_DMA_Abort+0x230>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d027      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6a      	ldr	r2, [pc, #424]	; (8001628 <HAL_DMA_Abort+0x234>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a68      	ldr	r2, [pc, #416]	; (800162c <HAL_DMA_Abort+0x238>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01d      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a67      	ldr	r2, [pc, #412]	; (8001630 <HAL_DMA_Abort+0x23c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d018      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_DMA_Abort+0x240>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a64      	ldr	r2, [pc, #400]	; (8001638 <HAL_DMA_Abort+0x244>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00e      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a62      	ldr	r2, [pc, #392]	; (800163c <HAL_DMA_Abort+0x248>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d009      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a61      	ldr	r2, [pc, #388]	; (8001640 <HAL_DMA_Abort+0x24c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d004      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a5f      	ldr	r2, [pc, #380]	; (8001644 <HAL_DMA_Abort+0x250>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_DMA_Abort+0xda>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_DMA_Abort+0xdc>
 80014ce:	2300      	movs	r3, #0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 021e 	bic.w	r2, r2, #30
 80014e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e00a      	b.n	8001512 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 020e 	bic.w	r2, r2, #14
 800150a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <HAL_DMA_Abort+0x214>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d072      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a3a      	ldr	r2, [pc, #232]	; (800160c <HAL_DMA_Abort+0x218>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d06d      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a39      	ldr	r2, [pc, #228]	; (8001610 <HAL_DMA_Abort+0x21c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d068      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a37      	ldr	r2, [pc, #220]	; (8001614 <HAL_DMA_Abort+0x220>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d063      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a36      	ldr	r2, [pc, #216]	; (8001618 <HAL_DMA_Abort+0x224>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d05e      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a34      	ldr	r2, [pc, #208]	; (800161c <HAL_DMA_Abort+0x228>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d059      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a33      	ldr	r2, [pc, #204]	; (8001620 <HAL_DMA_Abort+0x22c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d054      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a31      	ldr	r2, [pc, #196]	; (8001624 <HAL_DMA_Abort+0x230>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d04f      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a30      	ldr	r2, [pc, #192]	; (8001628 <HAL_DMA_Abort+0x234>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d04a      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2e      	ldr	r2, [pc, #184]	; (800162c <HAL_DMA_Abort+0x238>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d045      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <HAL_DMA_Abort+0x23c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d040      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <HAL_DMA_Abort+0x240>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d03b      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <HAL_DMA_Abort+0x244>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d036      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a28      	ldr	r2, [pc, #160]	; (800163c <HAL_DMA_Abort+0x248>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d031      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a27      	ldr	r2, [pc, #156]	; (8001640 <HAL_DMA_Abort+0x24c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d02c      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a25      	ldr	r2, [pc, #148]	; (8001644 <HAL_DMA_Abort+0x250>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d027      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_DMA_Abort+0x254>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d022      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a22      	ldr	r2, [pc, #136]	; (800164c <HAL_DMA_Abort+0x258>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01d      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <HAL_DMA_Abort+0x25c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d018      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_DMA_Abort+0x260>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_DMA_Abort+0x264>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00e      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_DMA_Abort+0x268>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d009      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_DMA_Abort+0x26c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_DMA_Abort+0x270>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d132      	bne.n	8001668 <HAL_DMA_Abort+0x274>
 8001602:	2301      	movs	r3, #1
 8001604:	e031      	b.n	800166a <HAL_DMA_Abort+0x276>
 8001606:	bf00      	nop
 8001608:	40020010 	.word	0x40020010
 800160c:	40020028 	.word	0x40020028
 8001610:	40020040 	.word	0x40020040
 8001614:	40020058 	.word	0x40020058
 8001618:	40020070 	.word	0x40020070
 800161c:	40020088 	.word	0x40020088
 8001620:	400200a0 	.word	0x400200a0
 8001624:	400200b8 	.word	0x400200b8
 8001628:	40020410 	.word	0x40020410
 800162c:	40020428 	.word	0x40020428
 8001630:	40020440 	.word	0x40020440
 8001634:	40020458 	.word	0x40020458
 8001638:	40020470 	.word	0x40020470
 800163c:	40020488 	.word	0x40020488
 8001640:	400204a0 	.word	0x400204a0
 8001644:	400204b8 	.word	0x400204b8
 8001648:	58025408 	.word	0x58025408
 800164c:	5802541c 	.word	0x5802541c
 8001650:	58025430 	.word	0x58025430
 8001654:	58025444 	.word	0x58025444
 8001658:	58025458 	.word	0x58025458
 800165c:	5802546c 	.word	0x5802546c
 8001660:	58025480 	.word	0x58025480
 8001664:	58025494 	.word	0x58025494
 8001668:	2300      	movs	r3, #0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800167c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6d      	ldr	r2, [pc, #436]	; (8001838 <HAL_DMA_Abort+0x444>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d04a      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a6b      	ldr	r2, [pc, #428]	; (800183c <HAL_DMA_Abort+0x448>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d045      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6a      	ldr	r2, [pc, #424]	; (8001840 <HAL_DMA_Abort+0x44c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d040      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a68      	ldr	r2, [pc, #416]	; (8001844 <HAL_DMA_Abort+0x450>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d03b      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a67      	ldr	r2, [pc, #412]	; (8001848 <HAL_DMA_Abort+0x454>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d036      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a65      	ldr	r2, [pc, #404]	; (800184c <HAL_DMA_Abort+0x458>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d031      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a64      	ldr	r2, [pc, #400]	; (8001850 <HAL_DMA_Abort+0x45c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d02c      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a62      	ldr	r2, [pc, #392]	; (8001854 <HAL_DMA_Abort+0x460>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d027      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a61      	ldr	r2, [pc, #388]	; (8001858 <HAL_DMA_Abort+0x464>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d022      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a5f      	ldr	r2, [pc, #380]	; (800185c <HAL_DMA_Abort+0x468>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01d      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5e      	ldr	r2, [pc, #376]	; (8001860 <HAL_DMA_Abort+0x46c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d018      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5c      	ldr	r2, [pc, #368]	; (8001864 <HAL_DMA_Abort+0x470>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5b      	ldr	r2, [pc, #364]	; (8001868 <HAL_DMA_Abort+0x474>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d00e      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a59      	ldr	r2, [pc, #356]	; (800186c <HAL_DMA_Abort+0x478>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d009      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_DMA_Abort+0x47c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d004      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a56      	ldr	r2, [pc, #344]	; (8001874 <HAL_DMA_Abort+0x480>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d108      	bne.n	8001730 <HAL_DMA_Abort+0x33c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e007      	b.n	8001740 <HAL_DMA_Abort+0x34c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001740:	e013      	b.n	800176a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001742:	f7fe ff99 	bl	8000678 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b05      	cmp	r3, #5
 800174e:	d90c      	bls.n	800176a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2220      	movs	r2, #32
 8001754:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e12d      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1e5      	bne.n	8001742 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <HAL_DMA_Abort+0x444>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d04a      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a2d      	ldr	r2, [pc, #180]	; (800183c <HAL_DMA_Abort+0x448>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d045      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <HAL_DMA_Abort+0x44c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d040      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2a      	ldr	r2, [pc, #168]	; (8001844 <HAL_DMA_Abort+0x450>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d03b      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_DMA_Abort+0x454>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d036      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <HAL_DMA_Abort+0x458>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d031      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a26      	ldr	r2, [pc, #152]	; (8001850 <HAL_DMA_Abort+0x45c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d02c      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a24      	ldr	r2, [pc, #144]	; (8001854 <HAL_DMA_Abort+0x460>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d027      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_DMA_Abort+0x464>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d022      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a21      	ldr	r2, [pc, #132]	; (800185c <HAL_DMA_Abort+0x468>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01d      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a20      	ldr	r2, [pc, #128]	; (8001860 <HAL_DMA_Abort+0x46c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d018      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_DMA_Abort+0x470>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_DMA_Abort+0x474>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00e      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_DMA_Abort+0x478>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d009      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_DMA_Abort+0x47c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d004      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <HAL_DMA_Abort+0x480>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_DMA_Abort+0x426>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_DMA_Abort+0x428>
 800181a:	2300      	movs	r3, #0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02b      	beq.n	8001878 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	223f      	movs	r2, #63	; 0x3f
 8001830:	409a      	lsls	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	e02a      	b.n	800188e <HAL_DMA_Abort+0x49a>
 8001838:	40020010 	.word	0x40020010
 800183c:	40020028 	.word	0x40020028
 8001840:	40020040 	.word	0x40020040
 8001844:	40020058 	.word	0x40020058
 8001848:	40020070 	.word	0x40020070
 800184c:	40020088 	.word	0x40020088
 8001850:	400200a0 	.word	0x400200a0
 8001854:	400200b8 	.word	0x400200b8
 8001858:	40020410 	.word	0x40020410
 800185c:	40020428 	.word	0x40020428
 8001860:	40020440 	.word	0x40020440
 8001864:	40020458 	.word	0x40020458
 8001868:	40020470 	.word	0x40020470
 800186c:	40020488 	.word	0x40020488
 8001870:	400204a0 	.word	0x400204a0
 8001874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	2201      	movs	r2, #1
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_DMA_Abort+0x5dc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d072      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4d      	ldr	r2, [pc, #308]	; (80019d4 <HAL_DMA_Abort+0x5e0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d06d      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_DMA_Abort+0x5e4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d068      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a4a      	ldr	r2, [pc, #296]	; (80019dc <HAL_DMA_Abort+0x5e8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d063      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a49      	ldr	r2, [pc, #292]	; (80019e0 <HAL_DMA_Abort+0x5ec>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d05e      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_DMA_Abort+0x5f0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d059      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_DMA_Abort+0x5f4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d054      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a44      	ldr	r2, [pc, #272]	; (80019ec <HAL_DMA_Abort+0x5f8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d04f      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a43      	ldr	r2, [pc, #268]	; (80019f0 <HAL_DMA_Abort+0x5fc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04a      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a41      	ldr	r2, [pc, #260]	; (80019f4 <HAL_DMA_Abort+0x600>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d045      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a40      	ldr	r2, [pc, #256]	; (80019f8 <HAL_DMA_Abort+0x604>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d040      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <HAL_DMA_Abort+0x608>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d03b      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <HAL_DMA_Abort+0x60c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d036      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3b      	ldr	r2, [pc, #236]	; (8001a04 <HAL_DMA_Abort+0x610>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d031      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <HAL_DMA_Abort+0x614>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d02c      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_DMA_Abort+0x618>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d027      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a37      	ldr	r2, [pc, #220]	; (8001a10 <HAL_DMA_Abort+0x61c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d022      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a35      	ldr	r2, [pc, #212]	; (8001a14 <HAL_DMA_Abort+0x620>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01d      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <HAL_DMA_Abort+0x624>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d018      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a32      	ldr	r2, [pc, #200]	; (8001a1c <HAL_DMA_Abort+0x628>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <HAL_DMA_Abort+0x62c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00e      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_DMA_Abort+0x630>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d009      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <HAL_DMA_Abort+0x634>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d004      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <HAL_DMA_Abort+0x638>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_DMA_Abort+0x58e>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_DMA_Abort+0x590>
 8001982:	2300      	movs	r3, #0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d015      	beq.n	80019b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001990:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40020010 	.word	0x40020010
 80019d4:	40020028 	.word	0x40020028
 80019d8:	40020040 	.word	0x40020040
 80019dc:	40020058 	.word	0x40020058
 80019e0:	40020070 	.word	0x40020070
 80019e4:	40020088 	.word	0x40020088
 80019e8:	400200a0 	.word	0x400200a0
 80019ec:	400200b8 	.word	0x400200b8
 80019f0:	40020410 	.word	0x40020410
 80019f4:	40020428 	.word	0x40020428
 80019f8:	40020440 	.word	0x40020440
 80019fc:	40020458 	.word	0x40020458
 8001a00:	40020470 	.word	0x40020470
 8001a04:	40020488 	.word	0x40020488
 8001a08:	400204a0 	.word	0x400204a0
 8001a0c:	400204b8 	.word	0x400204b8
 8001a10:	58025408 	.word	0x58025408
 8001a14:	5802541c 	.word	0x5802541c
 8001a18:	58025430 	.word	0x58025430
 8001a1c:	58025444 	.word	0x58025444
 8001a20:	58025458 	.word	0x58025458
 8001a24:	5802546c 	.word	0x5802546c
 8001a28:	58025480 	.word	0x58025480
 8001a2c:	58025494 	.word	0x58025494

08001a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e205      	b.n	8001e4e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d004      	beq.n	8001a58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e1fa      	b.n	8001e4e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a8c      	ldr	r2, [pc, #560]	; (8001c90 <HAL_DMA_Abort_IT+0x260>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d04a      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a8b      	ldr	r2, [pc, #556]	; (8001c94 <HAL_DMA_Abort_IT+0x264>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d045      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a89      	ldr	r2, [pc, #548]	; (8001c98 <HAL_DMA_Abort_IT+0x268>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d040      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a88      	ldr	r2, [pc, #544]	; (8001c9c <HAL_DMA_Abort_IT+0x26c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d03b      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a86      	ldr	r2, [pc, #536]	; (8001ca0 <HAL_DMA_Abort_IT+0x270>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d036      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a85      	ldr	r2, [pc, #532]	; (8001ca4 <HAL_DMA_Abort_IT+0x274>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d031      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a83      	ldr	r2, [pc, #524]	; (8001ca8 <HAL_DMA_Abort_IT+0x278>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d02c      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a82      	ldr	r2, [pc, #520]	; (8001cac <HAL_DMA_Abort_IT+0x27c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d027      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a80      	ldr	r2, [pc, #512]	; (8001cb0 <HAL_DMA_Abort_IT+0x280>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d022      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a7f      	ldr	r2, [pc, #508]	; (8001cb4 <HAL_DMA_Abort_IT+0x284>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d01d      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a7d      	ldr	r2, [pc, #500]	; (8001cb8 <HAL_DMA_Abort_IT+0x288>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d018      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7c      	ldr	r2, [pc, #496]	; (8001cbc <HAL_DMA_Abort_IT+0x28c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d013      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a7a      	ldr	r2, [pc, #488]	; (8001cc0 <HAL_DMA_Abort_IT+0x290>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00e      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a79      	ldr	r2, [pc, #484]	; (8001cc4 <HAL_DMA_Abort_IT+0x294>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d009      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a77      	ldr	r2, [pc, #476]	; (8001cc8 <HAL_DMA_Abort_IT+0x298>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d004      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a76      	ldr	r2, [pc, #472]	; (8001ccc <HAL_DMA_Abort_IT+0x29c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_DMA_Abort_IT+0xcc>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_DMA_Abort_IT+0xce>
 8001afc:	2300      	movs	r3, #0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d065      	beq.n	8001bce <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2204      	movs	r2, #4
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a60      	ldr	r2, [pc, #384]	; (8001c90 <HAL_DMA_Abort_IT+0x260>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d04a      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a5e      	ldr	r2, [pc, #376]	; (8001c94 <HAL_DMA_Abort_IT+0x264>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d045      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_DMA_Abort_IT+0x268>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d040      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <HAL_DMA_Abort_IT+0x26c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d03b      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a5a      	ldr	r2, [pc, #360]	; (8001ca0 <HAL_DMA_Abort_IT+0x270>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d036      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_DMA_Abort_IT+0x274>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d031      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_DMA_Abort_IT+0x278>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d02c      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a55      	ldr	r2, [pc, #340]	; (8001cac <HAL_DMA_Abort_IT+0x27c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d027      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a54      	ldr	r2, [pc, #336]	; (8001cb0 <HAL_DMA_Abort_IT+0x280>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d022      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_DMA_Abort_IT+0x284>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01d      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a51      	ldr	r2, [pc, #324]	; (8001cb8 <HAL_DMA_Abort_IT+0x288>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d018      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_DMA_Abort_IT+0x28c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <HAL_DMA_Abort_IT+0x290>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00e      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a4c      	ldr	r2, [pc, #304]	; (8001cc4 <HAL_DMA_Abort_IT+0x294>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d009      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a4b      	ldr	r2, [pc, #300]	; (8001cc8 <HAL_DMA_Abort_IT+0x298>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d004      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_DMA_Abort_IT+0x29c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d108      	bne.n	8001bbc <HAL_DMA_Abort_IT+0x18c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	e147      	b.n	8001e4c <HAL_DMA_Abort_IT+0x41c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e13e      	b.n	8001e4c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 020e 	bic.w	r2, r2, #14
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <HAL_DMA_Abort_IT+0x260>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d04a      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a29      	ldr	r2, [pc, #164]	; (8001c94 <HAL_DMA_Abort_IT+0x264>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d045      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a28      	ldr	r2, [pc, #160]	; (8001c98 <HAL_DMA_Abort_IT+0x268>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d040      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a26      	ldr	r2, [pc, #152]	; (8001c9c <HAL_DMA_Abort_IT+0x26c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d03b      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <HAL_DMA_Abort_IT+0x270>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d036      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_DMA_Abort_IT+0x274>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d031      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <HAL_DMA_Abort_IT+0x278>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d02c      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <HAL_DMA_Abort_IT+0x27c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d027      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_DMA_Abort_IT+0x280>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d022      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_DMA_Abort_IT+0x284>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01d      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_DMA_Abort_IT+0x288>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d018      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_DMA_Abort_IT+0x28c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_DMA_Abort_IT+0x290>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00e      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_DMA_Abort_IT+0x294>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_DMA_Abort_IT+0x298>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d004      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_DMA_Abort_IT+0x29c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d128      	bne.n	8001cd0 <HAL_DMA_Abort_IT+0x2a0>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e027      	b.n	8001ce0 <HAL_DMA_Abort_IT+0x2b0>
 8001c90:	40020010 	.word	0x40020010
 8001c94:	40020028 	.word	0x40020028
 8001c98:	40020040 	.word	0x40020040
 8001c9c:	40020058 	.word	0x40020058
 8001ca0:	40020070 	.word	0x40020070
 8001ca4:	40020088 	.word	0x40020088
 8001ca8:	400200a0 	.word	0x400200a0
 8001cac:	400200b8 	.word	0x400200b8
 8001cb0:	40020410 	.word	0x40020410
 8001cb4:	40020428 	.word	0x40020428
 8001cb8:	40020440 	.word	0x40020440
 8001cbc:	40020458 	.word	0x40020458
 8001cc0:	40020470 	.word	0x40020470
 8001cc4:	40020488 	.word	0x40020488
 8001cc8:	400204a0 	.word	0x400204a0
 8001ccc:	400204b8 	.word	0x400204b8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_DMA_Abort_IT+0x428>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d072      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <HAL_DMA_Abort_IT+0x42c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d06d      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <HAL_DMA_Abort_IT+0x430>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d068      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_DMA_Abort_IT+0x434>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d063      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_DMA_Abort_IT+0x438>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d05e      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a55      	ldr	r2, [pc, #340]	; (8001e6c <HAL_DMA_Abort_IT+0x43c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d059      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_DMA_Abort_IT+0x440>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d054      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_DMA_Abort_IT+0x444>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d04f      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <HAL_DMA_Abort_IT+0x448>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d04a      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_DMA_Abort_IT+0x44c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d045      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_DMA_Abort_IT+0x450>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d040      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <HAL_DMA_Abort_IT+0x454>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d03b      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a4a      	ldr	r2, [pc, #296]	; (8001e88 <HAL_DMA_Abort_IT+0x458>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d036      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a49      	ldr	r2, [pc, #292]	; (8001e8c <HAL_DMA_Abort_IT+0x45c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d031      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_DMA_Abort_IT+0x460>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02c      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a46      	ldr	r2, [pc, #280]	; (8001e94 <HAL_DMA_Abort_IT+0x464>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d027      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a44      	ldr	r2, [pc, #272]	; (8001e98 <HAL_DMA_Abort_IT+0x468>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d022      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <HAL_DMA_Abort_IT+0x46c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d01d      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a41      	ldr	r2, [pc, #260]	; (8001ea0 <HAL_DMA_Abort_IT+0x470>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d018      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a40      	ldr	r2, [pc, #256]	; (8001ea4 <HAL_DMA_Abort_IT+0x474>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <HAL_DMA_Abort_IT+0x478>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00e      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a3d      	ldr	r2, [pc, #244]	; (8001eac <HAL_DMA_Abort_IT+0x47c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_DMA_Abort_IT+0x480>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <HAL_DMA_Abort_IT+0x484>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_DMA_Abort_IT+0x3a4>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_DMA_Abort_IT+0x3a6>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d028      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2201      	movs	r2, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e08:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00c      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e20:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e2a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40020010 	.word	0x40020010
 8001e5c:	40020028 	.word	0x40020028
 8001e60:	40020040 	.word	0x40020040
 8001e64:	40020058 	.word	0x40020058
 8001e68:	40020070 	.word	0x40020070
 8001e6c:	40020088 	.word	0x40020088
 8001e70:	400200a0 	.word	0x400200a0
 8001e74:	400200b8 	.word	0x400200b8
 8001e78:	40020410 	.word	0x40020410
 8001e7c:	40020428 	.word	0x40020428
 8001e80:	40020440 	.word	0x40020440
 8001e84:	40020458 	.word	0x40020458
 8001e88:	40020470 	.word	0x40020470
 8001e8c:	40020488 	.word	0x40020488
 8001e90:	400204a0 	.word	0x400204a0
 8001e94:	400204b8 	.word	0x400204b8
 8001e98:	58025408 	.word	0x58025408
 8001e9c:	5802541c 	.word	0x5802541c
 8001ea0:	58025430 	.word	0x58025430
 8001ea4:	58025444 	.word	0x58025444
 8001ea8:	58025458 	.word	0x58025458
 8001eac:	5802546c 	.word	0x5802546c
 8001eb0:	58025480 	.word	0x58025480
 8001eb4:	58025494 	.word	0x58025494

08001eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec4:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_DMA_IRQHandler+0x1ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	; (8002068 <HAL_DMA_IRQHandler+0x1b0>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0a9b      	lsrs	r3, r3, #10
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5f      	ldr	r2, [pc, #380]	; (800206c <HAL_DMA_IRQHandler+0x1b4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d04a      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <HAL_DMA_IRQHandler+0x1b8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d045      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5c      	ldr	r2, [pc, #368]	; (8002074 <HAL_DMA_IRQHandler+0x1bc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d040      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a5a      	ldr	r2, [pc, #360]	; (8002078 <HAL_DMA_IRQHandler+0x1c0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d03b      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a59      	ldr	r2, [pc, #356]	; (800207c <HAL_DMA_IRQHandler+0x1c4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d036      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a57      	ldr	r2, [pc, #348]	; (8002080 <HAL_DMA_IRQHandler+0x1c8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d031      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_DMA_IRQHandler+0x1cc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d02c      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a54      	ldr	r2, [pc, #336]	; (8002088 <HAL_DMA_IRQHandler+0x1d0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d027      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a53      	ldr	r2, [pc, #332]	; (800208c <HAL_DMA_IRQHandler+0x1d4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d022      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_DMA_IRQHandler+0x1d8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01d      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_DMA_IRQHandler+0x1dc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d018      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a4e      	ldr	r2, [pc, #312]	; (8002098 <HAL_DMA_IRQHandler+0x1e0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a4d      	ldr	r2, [pc, #308]	; (800209c <HAL_DMA_IRQHandler+0x1e4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00e      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4b      	ldr	r2, [pc, #300]	; (80020a0 <HAL_DMA_IRQHandler+0x1e8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_DMA_IRQHandler+0x1ec>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a48      	ldr	r2, [pc, #288]	; (80020a8 <HAL_DMA_IRQHandler+0x1f0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_IRQHandler+0xd6>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_DMA_IRQHandler+0xd8>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 842b 	beq.w	80027ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80a2 	beq.w	80020f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2e      	ldr	r2, [pc, #184]	; (800206c <HAL_DMA_IRQHandler+0x1b4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d04a      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2d      	ldr	r2, [pc, #180]	; (8002070 <HAL_DMA_IRQHandler+0x1b8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d045      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	; (8002074 <HAL_DMA_IRQHandler+0x1bc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d040      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <HAL_DMA_IRQHandler+0x1c0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d03b      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_DMA_IRQHandler+0x1c4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d036      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_DMA_IRQHandler+0x1c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d031      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a25      	ldr	r2, [pc, #148]	; (8002084 <HAL_DMA_IRQHandler+0x1cc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02c      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a24      	ldr	r2, [pc, #144]	; (8002088 <HAL_DMA_IRQHandler+0x1d0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d027      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_DMA_IRQHandler+0x1d4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d022      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_DMA_IRQHandler+0x1d8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d01d      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_DMA_IRQHandler+0x1dc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d018      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_DMA_IRQHandler+0x1e0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_DMA_IRQHandler+0x1e4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00e      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_DMA_IRQHandler+0x1e8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_DMA_IRQHandler+0x1ec>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d004      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_DMA_IRQHandler+0x1f0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d12f      	bne.n	80020ac <HAL_DMA_IRQHandler+0x1f4>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e02e      	b.n	80020c0 <HAL_DMA_IRQHandler+0x208>
 8002062:	bf00      	nop
 8002064:	2400000c 	.word	0x2400000c
 8002068:	1b4e81b5 	.word	0x1b4e81b5
 800206c:	40020010 	.word	0x40020010
 8002070:	40020028 	.word	0x40020028
 8002074:	40020040 	.word	0x40020040
 8002078:	40020058 	.word	0x40020058
 800207c:	40020070 	.word	0x40020070
 8002080:	40020088 	.word	0x40020088
 8002084:	400200a0 	.word	0x400200a0
 8002088:	400200b8 	.word	0x400200b8
 800208c:	40020410 	.word	0x40020410
 8002090:	40020428 	.word	0x40020428
 8002094:	40020440 	.word	0x40020440
 8002098:	40020458 	.word	0x40020458
 800209c:	40020470 	.word	0x40020470
 80020a0:	40020488 	.word	0x40020488
 80020a4:	400204a0 	.word	0x400204a0
 80020a8:	400204b8 	.word	0x400204b8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2208      	movs	r2, #8
 80020de:	409a      	lsls	r2, r3
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d06e      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a69      	ldr	r2, [pc, #420]	; (80022b0 <HAL_DMA_IRQHandler+0x3f8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d04a      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a67      	ldr	r2, [pc, #412]	; (80022b4 <HAL_DMA_IRQHandler+0x3fc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d045      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_DMA_IRQHandler+0x400>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d040      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a64      	ldr	r2, [pc, #400]	; (80022bc <HAL_DMA_IRQHandler+0x404>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d03b      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_DMA_IRQHandler+0x408>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d036      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a61      	ldr	r2, [pc, #388]	; (80022c4 <HAL_DMA_IRQHandler+0x40c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d031      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a60      	ldr	r2, [pc, #384]	; (80022c8 <HAL_DMA_IRQHandler+0x410>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d02c      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a5e      	ldr	r2, [pc, #376]	; (80022cc <HAL_DMA_IRQHandler+0x414>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d027      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5d      	ldr	r2, [pc, #372]	; (80022d0 <HAL_DMA_IRQHandler+0x418>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <HAL_DMA_IRQHandler+0x41c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01d      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <HAL_DMA_IRQHandler+0x420>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d018      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_DMA_IRQHandler+0x424>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_DMA_IRQHandler+0x428>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_DMA_IRQHandler+0x42c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a54      	ldr	r2, [pc, #336]	; (80022e8 <HAL_DMA_IRQHandler+0x430>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d004      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a52      	ldr	r2, [pc, #328]	; (80022ec <HAL_DMA_IRQHandler+0x434>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10a      	bne.n	80021bc <HAL_DMA_IRQHandler+0x304>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e003      	b.n	80021c4 <HAL_DMA_IRQHandler+0x30c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2201      	movs	r2, #1
 80021d2:	409a      	lsls	r2, r3
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0202 	orr.w	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2204      	movs	r2, #4
 80021ee:	409a      	lsls	r2, r3
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 808f 	beq.w	8002318 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <HAL_DMA_IRQHandler+0x3f8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04a      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <HAL_DMA_IRQHandler+0x3fc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d045      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a29      	ldr	r2, [pc, #164]	; (80022b8 <HAL_DMA_IRQHandler+0x400>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d040      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_DMA_IRQHandler+0x404>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d03b      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <HAL_DMA_IRQHandler+0x408>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d036      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_DMA_IRQHandler+0x40c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <HAL_DMA_IRQHandler+0x410>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d02c      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_DMA_IRQHandler+0x414>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d027      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <HAL_DMA_IRQHandler+0x418>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_DMA_IRQHandler+0x41c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_DMA_IRQHandler+0x420>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d018      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_DMA_IRQHandler+0x424>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_DMA_IRQHandler+0x428>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_DMA_IRQHandler+0x42c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_DMA_IRQHandler+0x430>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a15      	ldr	r2, [pc, #84]	; (80022ec <HAL_DMA_IRQHandler+0x434>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12a      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x438>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e023      	b.n	80022f8 <HAL_DMA_IRQHandler+0x440>
 80022b0:	40020010 	.word	0x40020010
 80022b4:	40020028 	.word	0x40020028
 80022b8:	40020040 	.word	0x40020040
 80022bc:	40020058 	.word	0x40020058
 80022c0:	40020070 	.word	0x40020070
 80022c4:	40020088 	.word	0x40020088
 80022c8:	400200a0 	.word	0x400200a0
 80022cc:	400200b8 	.word	0x400200b8
 80022d0:	40020410 	.word	0x40020410
 80022d4:	40020428 	.word	0x40020428
 80022d8:	40020440 	.word	0x40020440
 80022dc:	40020458 	.word	0x40020458
 80022e0:	40020470 	.word	0x40020470
 80022e4:	40020488 	.word	0x40020488
 80022e8:	400204a0 	.word	0x400204a0
 80022ec:	400204b8 	.word	0x400204b8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2204      	movs	r2, #4
 8002306:	409a      	lsls	r2, r3
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f043 0204 	orr.w	r2, r3, #4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	2210      	movs	r2, #16
 8002322:	409a      	lsls	r2, r3
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a6 	beq.w	800247a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a85      	ldr	r2, [pc, #532]	; (8002548 <HAL_DMA_IRQHandler+0x690>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04a      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a83      	ldr	r2, [pc, #524]	; (800254c <HAL_DMA_IRQHandler+0x694>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d045      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a82      	ldr	r2, [pc, #520]	; (8002550 <HAL_DMA_IRQHandler+0x698>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d040      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a80      	ldr	r2, [pc, #512]	; (8002554 <HAL_DMA_IRQHandler+0x69c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d03b      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7f      	ldr	r2, [pc, #508]	; (8002558 <HAL_DMA_IRQHandler+0x6a0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d036      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7d      	ldr	r2, [pc, #500]	; (800255c <HAL_DMA_IRQHandler+0x6a4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d031      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7c      	ldr	r2, [pc, #496]	; (8002560 <HAL_DMA_IRQHandler+0x6a8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d02c      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a7a      	ldr	r2, [pc, #488]	; (8002564 <HAL_DMA_IRQHandler+0x6ac>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d027      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a79      	ldr	r2, [pc, #484]	; (8002568 <HAL_DMA_IRQHandler+0x6b0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a77      	ldr	r2, [pc, #476]	; (800256c <HAL_DMA_IRQHandler+0x6b4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01d      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a76      	ldr	r2, [pc, #472]	; (8002570 <HAL_DMA_IRQHandler+0x6b8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d018      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a74      	ldr	r2, [pc, #464]	; (8002574 <HAL_DMA_IRQHandler+0x6bc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a73      	ldr	r2, [pc, #460]	; (8002578 <HAL_DMA_IRQHandler+0x6c0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_DMA_IRQHandler+0x6c4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a70      	ldr	r2, [pc, #448]	; (8002580 <HAL_DMA_IRQHandler+0x6c8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_DMA_IRQHandler+0x6cc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10a      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x52c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e009      	b.n	80023f8 <HAL_DMA_IRQHandler+0x540>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03e      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2210      	movs	r2, #16
 8002406:	409a      	lsls	r2, r3
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d108      	bne.n	800243a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d024      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e01f      	b.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01b      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
 800244a:	e016      	b.n	800247a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0208 	bic.w	r2, r2, #8
 8002468:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2220      	movs	r2, #32
 8002484:	409a      	lsls	r2, r3
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8110 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2c      	ldr	r2, [pc, #176]	; (8002548 <HAL_DMA_IRQHandler+0x690>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d04a      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_DMA_IRQHandler+0x694>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d045      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a29      	ldr	r2, [pc, #164]	; (8002550 <HAL_DMA_IRQHandler+0x698>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d040      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a28      	ldr	r2, [pc, #160]	; (8002554 <HAL_DMA_IRQHandler+0x69c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d03b      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <HAL_DMA_IRQHandler+0x6a0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d036      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a25      	ldr	r2, [pc, #148]	; (800255c <HAL_DMA_IRQHandler+0x6a4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d031      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a23      	ldr	r2, [pc, #140]	; (8002560 <HAL_DMA_IRQHandler+0x6a8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02c      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a22      	ldr	r2, [pc, #136]	; (8002564 <HAL_DMA_IRQHandler+0x6ac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d027      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_DMA_IRQHandler+0x6b0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d022      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_DMA_IRQHandler+0x6b4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d01d      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_DMA_IRQHandler+0x6b8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d018      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_DMA_IRQHandler+0x6bc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <HAL_DMA_IRQHandler+0x6c0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_DMA_IRQHandler+0x6c4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_DMA_IRQHandler+0x6c8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a16      	ldr	r2, [pc, #88]	; (8002584 <HAL_DMA_IRQHandler+0x6cc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d12b      	bne.n	8002588 <HAL_DMA_IRQHandler+0x6d0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf14      	ite	ne
 800253e:	2301      	movne	r3, #1
 8002540:	2300      	moveq	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	e02a      	b.n	800259c <HAL_DMA_IRQHandler+0x6e4>
 8002546:	bf00      	nop
 8002548:	40020010 	.word	0x40020010
 800254c:	40020028 	.word	0x40020028
 8002550:	40020040 	.word	0x40020040
 8002554:	40020058 	.word	0x40020058
 8002558:	40020070 	.word	0x40020070
 800255c:	40020088 	.word	0x40020088
 8002560:	400200a0 	.word	0x400200a0
 8002564:	400200b8 	.word	0x400200b8
 8002568:	40020410 	.word	0x40020410
 800256c:	40020428 	.word	0x40020428
 8002570:	40020440 	.word	0x40020440
 8002574:	40020458 	.word	0x40020458
 8002578:	40020470 	.word	0x40020470
 800257c:	40020488 	.word	0x40020488
 8002580:	400204a0 	.word	0x400204a0
 8002584:	400204b8 	.word	0x400204b8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8087 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2220      	movs	r2, #32
 80025ac:	409a      	lsls	r2, r3
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d139      	bne.n	8002632 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0216 	bic.w	r2, r2, #22
 80025cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_DMA_IRQHandler+0x736>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0208 	bic.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	223f      	movs	r2, #63	; 0x3f
 8002608:	409a      	lsls	r2, r3
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 834a 	beq.w	8002cbc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
          }
          return;
 8002630:	e344      	b.n	8002cbc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d018      	beq.n	8002672 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02c      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
 800265e:	e027      	b.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d023      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
 8002670:	e01e      	b.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10f      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0210 	bic.w	r2, r2, #16
 800268e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8306 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8088 	beq.w	80027d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7a      	ldr	r2, [pc, #488]	; (80028c0 <HAL_DMA_IRQHandler+0xa08>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d04a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a79      	ldr	r2, [pc, #484]	; (80028c4 <HAL_DMA_IRQHandler+0xa0c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d045      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_DMA_IRQHandler+0xa10>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d040      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a76      	ldr	r2, [pc, #472]	; (80028cc <HAL_DMA_IRQHandler+0xa14>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d03b      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a74      	ldr	r2, [pc, #464]	; (80028d0 <HAL_DMA_IRQHandler+0xa18>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d036      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a73      	ldr	r2, [pc, #460]	; (80028d4 <HAL_DMA_IRQHandler+0xa1c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d031      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a71      	ldr	r2, [pc, #452]	; (80028d8 <HAL_DMA_IRQHandler+0xa20>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02c      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_DMA_IRQHandler+0xa24>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d027      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6e      	ldr	r2, [pc, #440]	; (80028e0 <HAL_DMA_IRQHandler+0xa28>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d022      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6d      	ldr	r2, [pc, #436]	; (80028e4 <HAL_DMA_IRQHandler+0xa2c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d01d      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6b      	ldr	r2, [pc, #428]	; (80028e8 <HAL_DMA_IRQHandler+0xa30>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d018      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6a      	ldr	r2, [pc, #424]	; (80028ec <HAL_DMA_IRQHandler+0xa34>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <HAL_DMA_IRQHandler+0xa38>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00e      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a67      	ldr	r2, [pc, #412]	; (80028f4 <HAL_DMA_IRQHandler+0xa3c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a65      	ldr	r2, [pc, #404]	; (80028f8 <HAL_DMA_IRQHandler+0xa40>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a64      	ldr	r2, [pc, #400]	; (80028fc <HAL_DMA_IRQHandler+0xa44>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <HAL_DMA_IRQHandler+0x8ca>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e007      	b.n	8002792 <HAL_DMA_IRQHandler+0x8da>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	429a      	cmp	r2, r3
 800279c:	d307      	bcc.n	80027ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f2      	bne.n	8002792 <HAL_DMA_IRQHandler+0x8da>
 80027ac:	e000      	b.n	80027b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80027ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80027c6:	e003      	b.n	80027d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8272 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
 80027ea:	e26c      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_DMA_IRQHandler+0xa48>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d022      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a42      	ldr	r2, [pc, #264]	; (8002904 <HAL_DMA_IRQHandler+0xa4c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d01d      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a40      	ldr	r2, [pc, #256]	; (8002908 <HAL_DMA_IRQHandler+0xa50>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d018      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3f      	ldr	r2, [pc, #252]	; (800290c <HAL_DMA_IRQHandler+0xa54>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d013      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3d      	ldr	r2, [pc, #244]	; (8002910 <HAL_DMA_IRQHandler+0xa58>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00e      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3c      	ldr	r2, [pc, #240]	; (8002914 <HAL_DMA_IRQHandler+0xa5c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a3a      	ldr	r2, [pc, #232]	; (8002918 <HAL_DMA_IRQHandler+0xa60>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_DMA_IRQHandler+0xa64>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_DMA_IRQHandler+0x988>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_DMA_IRQHandler+0x98a>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 823f 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2204      	movs	r2, #4
 800285a:	409a      	lsls	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80cd 	beq.w	8002a00 <HAL_DMA_IRQHandler+0xb48>
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80c7 	beq.w	8002a00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	2204      	movs	r2, #4
 800287c:	409a      	lsls	r2, r3
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d049      	beq.n	8002920 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8210 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028a8:	e20a      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8206 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028bc:	e200      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
 80028be:	bf00      	nop
 80028c0:	40020010 	.word	0x40020010
 80028c4:	40020028 	.word	0x40020028
 80028c8:	40020040 	.word	0x40020040
 80028cc:	40020058 	.word	0x40020058
 80028d0:	40020070 	.word	0x40020070
 80028d4:	40020088 	.word	0x40020088
 80028d8:	400200a0 	.word	0x400200a0
 80028dc:	400200b8 	.word	0x400200b8
 80028e0:	40020410 	.word	0x40020410
 80028e4:	40020428 	.word	0x40020428
 80028e8:	40020440 	.word	0x40020440
 80028ec:	40020458 	.word	0x40020458
 80028f0:	40020470 	.word	0x40020470
 80028f4:	40020488 	.word	0x40020488
 80028f8:	400204a0 	.word	0x400204a0
 80028fc:	400204b8 	.word	0x400204b8
 8002900:	58025408 	.word	0x58025408
 8002904:	5802541c 	.word	0x5802541c
 8002908:	58025430 	.word	0x58025430
 800290c:	58025444 	.word	0x58025444
 8002910:	58025458 	.word	0x58025458
 8002914:	5802546c 	.word	0x5802546c
 8002918:	58025480 	.word	0x58025480
 800291c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d160      	bne.n	80029ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a8c      	ldr	r2, [pc, #560]	; (8002b60 <HAL_DMA_IRQHandler+0xca8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d04a      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a8a      	ldr	r2, [pc, #552]	; (8002b64 <HAL_DMA_IRQHandler+0xcac>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d045      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a89      	ldr	r2, [pc, #548]	; (8002b68 <HAL_DMA_IRQHandler+0xcb0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d040      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a87      	ldr	r2, [pc, #540]	; (8002b6c <HAL_DMA_IRQHandler+0xcb4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d03b      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a86      	ldr	r2, [pc, #536]	; (8002b70 <HAL_DMA_IRQHandler+0xcb8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d036      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a84      	ldr	r2, [pc, #528]	; (8002b74 <HAL_DMA_IRQHandler+0xcbc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d031      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a83      	ldr	r2, [pc, #524]	; (8002b78 <HAL_DMA_IRQHandler+0xcc0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d02c      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a81      	ldr	r2, [pc, #516]	; (8002b7c <HAL_DMA_IRQHandler+0xcc4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d027      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a80      	ldr	r2, [pc, #512]	; (8002b80 <HAL_DMA_IRQHandler+0xcc8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7e      	ldr	r2, [pc, #504]	; (8002b84 <HAL_DMA_IRQHandler+0xccc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01d      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7d      	ldr	r2, [pc, #500]	; (8002b88 <HAL_DMA_IRQHandler+0xcd0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d018      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a7b      	ldr	r2, [pc, #492]	; (8002b8c <HAL_DMA_IRQHandler+0xcd4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7a      	ldr	r2, [pc, #488]	; (8002b90 <HAL_DMA_IRQHandler+0xcd8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a78      	ldr	r2, [pc, #480]	; (8002b94 <HAL_DMA_IRQHandler+0xcdc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a77      	ldr	r2, [pc, #476]	; (8002b98 <HAL_DMA_IRQHandler+0xce0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a75      	ldr	r2, [pc, #468]	; (8002b9c <HAL_DMA_IRQHandler+0xce4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d108      	bne.n	80029dc <HAL_DMA_IRQHandler+0xb24>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0208 	bic.w	r2, r2, #8
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e007      	b.n	80029ec <HAL_DMA_IRQHandler+0xb34>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0204 	bic.w	r2, r2, #4
 80029ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8165 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029fe:	e15f      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2202      	movs	r2, #2
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80c5 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0xce8>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80bf 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 813a 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a58:	e134      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8130 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a6c:	e12a      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d168      	bne.n	8002b4a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a38      	ldr	r2, [pc, #224]	; (8002b60 <HAL_DMA_IRQHandler+0xca8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d04a      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a37      	ldr	r2, [pc, #220]	; (8002b64 <HAL_DMA_IRQHandler+0xcac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d045      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <HAL_DMA_IRQHandler+0xcb0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d040      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <HAL_DMA_IRQHandler+0xcb4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d03b      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <HAL_DMA_IRQHandler+0xcb8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d036      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_DMA_IRQHandler+0xcbc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d031      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <HAL_DMA_IRQHandler+0xcc0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02c      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <HAL_DMA_IRQHandler+0xcc4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d027      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2c      	ldr	r2, [pc, #176]	; (8002b80 <HAL_DMA_IRQHandler+0xcc8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <HAL_DMA_IRQHandler+0xccc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_DMA_IRQHandler+0xcd0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <HAL_DMA_IRQHandler+0xcd4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_DMA_IRQHandler+0xcd8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <HAL_DMA_IRQHandler+0xcdc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_DMA_IRQHandler+0xce0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_DMA_IRQHandler+0xce4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <HAL_DMA_IRQHandler+0xc72>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0214 	bic.w	r2, r2, #20
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e007      	b.n	8002b3a <HAL_DMA_IRQHandler+0xc82>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 020a 	bic.w	r2, r2, #10
 8002b38:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80b8 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b5c:	e0b2      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
 8002b5e:	bf00      	nop
 8002b60:	40020010 	.word	0x40020010
 8002b64:	40020028 	.word	0x40020028
 8002b68:	40020040 	.word	0x40020040
 8002b6c:	40020058 	.word	0x40020058
 8002b70:	40020070 	.word	0x40020070
 8002b74:	40020088 	.word	0x40020088
 8002b78:	400200a0 	.word	0x400200a0
 8002b7c:	400200b8 	.word	0x400200b8
 8002b80:	40020410 	.word	0x40020410
 8002b84:	40020428 	.word	0x40020428
 8002b88:	40020440 	.word	0x40020440
 8002b8c:	40020458 	.word	0x40020458
 8002b90:	40020470 	.word	0x40020470
 8002b94:	40020488 	.word	0x40020488
 8002b98:	400204a0 	.word	0x400204a0
 8002b9c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2208      	movs	r2, #8
 8002baa:	409a      	lsls	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8088 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8082 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a41      	ldr	r2, [pc, #260]	; (8002ccc <HAL_DMA_IRQHandler+0xe14>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d04a      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_DMA_IRQHandler+0xe18>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d045      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3e      	ldr	r2, [pc, #248]	; (8002cd4 <HAL_DMA_IRQHandler+0xe1c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d040      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3c      	ldr	r2, [pc, #240]	; (8002cd8 <HAL_DMA_IRQHandler+0xe20>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d03b      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a3b      	ldr	r2, [pc, #236]	; (8002cdc <HAL_DMA_IRQHandler+0xe24>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d036      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_DMA_IRQHandler+0xe28>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d031      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a38      	ldr	r2, [pc, #224]	; (8002ce4 <HAL_DMA_IRQHandler+0xe2c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d02c      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a36      	ldr	r2, [pc, #216]	; (8002ce8 <HAL_DMA_IRQHandler+0xe30>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d027      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a35      	ldr	r2, [pc, #212]	; (8002cec <HAL_DMA_IRQHandler+0xe34>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <HAL_DMA_IRQHandler+0xe38>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01d      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a32      	ldr	r2, [pc, #200]	; (8002cf4 <HAL_DMA_IRQHandler+0xe3c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d018      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a30      	ldr	r2, [pc, #192]	; (8002cf8 <HAL_DMA_IRQHandler+0xe40>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <HAL_DMA_IRQHandler+0xe44>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00e      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_DMA_IRQHandler+0xe48>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <HAL_DMA_IRQHandler+0xe4c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <HAL_DMA_IRQHandler+0xe50>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d108      	bne.n	8002c74 <HAL_DMA_IRQHandler+0xdbc>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 021c 	bic.w	r2, r2, #28
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e007      	b.n	8002c84 <HAL_DMA_IRQHandler+0xdcc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 020e 	bic.w	r2, r2, #14
 8002c82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
 8002cba:	e004      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002cbc:	bf00      	nop
 8002cbe:	e002      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002cc6:	3728      	adds	r7, #40	; 0x28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40020010 	.word	0x40020010
 8002cd0:	40020028 	.word	0x40020028
 8002cd4:	40020040 	.word	0x40020040
 8002cd8:	40020058 	.word	0x40020058
 8002cdc:	40020070 	.word	0x40020070
 8002ce0:	40020088 	.word	0x40020088
 8002ce4:	400200a0 	.word	0x400200a0
 8002ce8:	400200b8 	.word	0x400200b8
 8002cec:	40020410 	.word	0x40020410
 8002cf0:	40020428 	.word	0x40020428
 8002cf4:	40020440 	.word	0x40020440
 8002cf8:	40020458 	.word	0x40020458
 8002cfc:	40020470 	.word	0x40020470
 8002d00:	40020488 	.word	0x40020488
 8002d04:	400204a0 	.word	0x400204a0
 8002d08:	400204b8 	.word	0x400204b8

08002d0c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a84      	ldr	r2, [pc, #528]	; (8002f54 <DMA_SetConfig+0x230>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d072      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a82      	ldr	r2, [pc, #520]	; (8002f58 <DMA_SetConfig+0x234>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d06d      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a81      	ldr	r2, [pc, #516]	; (8002f5c <DMA_SetConfig+0x238>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d068      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a7f      	ldr	r2, [pc, #508]	; (8002f60 <DMA_SetConfig+0x23c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d063      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <DMA_SetConfig+0x240>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d05e      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <DMA_SetConfig+0x244>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d059      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a7b      	ldr	r2, [pc, #492]	; (8002f6c <DMA_SetConfig+0x248>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d054      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a79      	ldr	r2, [pc, #484]	; (8002f70 <DMA_SetConfig+0x24c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d04f      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a78      	ldr	r2, [pc, #480]	; (8002f74 <DMA_SetConfig+0x250>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d04a      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a76      	ldr	r2, [pc, #472]	; (8002f78 <DMA_SetConfig+0x254>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d045      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a75      	ldr	r2, [pc, #468]	; (8002f7c <DMA_SetConfig+0x258>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d040      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a73      	ldr	r2, [pc, #460]	; (8002f80 <DMA_SetConfig+0x25c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d03b      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a72      	ldr	r2, [pc, #456]	; (8002f84 <DMA_SetConfig+0x260>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d036      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a70      	ldr	r2, [pc, #448]	; (8002f88 <DMA_SetConfig+0x264>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d031      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6f      	ldr	r2, [pc, #444]	; (8002f8c <DMA_SetConfig+0x268>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d02c      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a6d      	ldr	r2, [pc, #436]	; (8002f90 <DMA_SetConfig+0x26c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d027      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6c      	ldr	r2, [pc, #432]	; (8002f94 <DMA_SetConfig+0x270>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <DMA_SetConfig+0x274>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01d      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a69      	ldr	r2, [pc, #420]	; (8002f9c <DMA_SetConfig+0x278>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d018      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a67      	ldr	r2, [pc, #412]	; (8002fa0 <DMA_SetConfig+0x27c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a66      	ldr	r2, [pc, #408]	; (8002fa4 <DMA_SetConfig+0x280>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a64      	ldr	r2, [pc, #400]	; (8002fa8 <DMA_SetConfig+0x284>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a63      	ldr	r2, [pc, #396]	; (8002fac <DMA_SetConfig+0x288>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a61      	ldr	r2, [pc, #388]	; (8002fb0 <DMA_SetConfig+0x28c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <DMA_SetConfig+0x10e>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <DMA_SetConfig+0x110>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a3e      	ldr	r2, [pc, #248]	; (8002f54 <DMA_SetConfig+0x230>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d04a      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3d      	ldr	r2, [pc, #244]	; (8002f58 <DMA_SetConfig+0x234>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d045      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a3b      	ldr	r2, [pc, #236]	; (8002f5c <DMA_SetConfig+0x238>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d040      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <DMA_SetConfig+0x23c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d03b      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a38      	ldr	r2, [pc, #224]	; (8002f64 <DMA_SetConfig+0x240>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d036      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a37      	ldr	r2, [pc, #220]	; (8002f68 <DMA_SetConfig+0x244>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d031      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a35      	ldr	r2, [pc, #212]	; (8002f6c <DMA_SetConfig+0x248>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02c      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a34      	ldr	r2, [pc, #208]	; (8002f70 <DMA_SetConfig+0x24c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d027      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <DMA_SetConfig+0x250>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d022      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <DMA_SetConfig+0x254>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d01d      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2f      	ldr	r2, [pc, #188]	; (8002f7c <DMA_SetConfig+0x258>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d018      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2e      	ldr	r2, [pc, #184]	; (8002f80 <DMA_SetConfig+0x25c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2c      	ldr	r2, [pc, #176]	; (8002f84 <DMA_SetConfig+0x260>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00e      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <DMA_SetConfig+0x264>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <DMA_SetConfig+0x268>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <DMA_SetConfig+0x26c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <DMA_SetConfig+0x1d4>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <DMA_SetConfig+0x1d6>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d05a      	beq.n	8002fb4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	223f      	movs	r2, #63	; 0x3f
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	d108      	bne.n	8002f40 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f3e:	e087      	b.n	8003050 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
}
 8002f50:	e07e      	b.n	8003050 <DMA_SetConfig+0x32c>
 8002f52:	bf00      	nop
 8002f54:	40020010 	.word	0x40020010
 8002f58:	40020028 	.word	0x40020028
 8002f5c:	40020040 	.word	0x40020040
 8002f60:	40020058 	.word	0x40020058
 8002f64:	40020070 	.word	0x40020070
 8002f68:	40020088 	.word	0x40020088
 8002f6c:	400200a0 	.word	0x400200a0
 8002f70:	400200b8 	.word	0x400200b8
 8002f74:	40020410 	.word	0x40020410
 8002f78:	40020428 	.word	0x40020428
 8002f7c:	40020440 	.word	0x40020440
 8002f80:	40020458 	.word	0x40020458
 8002f84:	40020470 	.word	0x40020470
 8002f88:	40020488 	.word	0x40020488
 8002f8c:	400204a0 	.word	0x400204a0
 8002f90:	400204b8 	.word	0x400204b8
 8002f94:	58025408 	.word	0x58025408
 8002f98:	5802541c 	.word	0x5802541c
 8002f9c:	58025430 	.word	0x58025430
 8002fa0:	58025444 	.word	0x58025444
 8002fa4:	58025458 	.word	0x58025458
 8002fa8:	5802546c 	.word	0x5802546c
 8002fac:	58025480 	.word	0x58025480
 8002fb0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a28      	ldr	r2, [pc, #160]	; (800305c <DMA_SetConfig+0x338>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d022      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a27      	ldr	r2, [pc, #156]	; (8003060 <DMA_SetConfig+0x33c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d01d      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a25      	ldr	r2, [pc, #148]	; (8003064 <DMA_SetConfig+0x340>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d018      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <DMA_SetConfig+0x344>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d013      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <DMA_SetConfig+0x348>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00e      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a21      	ldr	r2, [pc, #132]	; (8003070 <DMA_SetConfig+0x34c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d009      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <DMA_SetConfig+0x350>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d004      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <DMA_SetConfig+0x354>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <DMA_SetConfig+0x2e4>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <DMA_SetConfig+0x2e6>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d020      	beq.n	8003050 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2201      	movs	r2, #1
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d108      	bne.n	8003040 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	60da      	str	r2, [r3, #12]
}
 800303e:	e007      	b.n	8003050 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	58025408 	.word	0x58025408
 8003060:	5802541c 	.word	0x5802541c
 8003064:	58025430 	.word	0x58025430
 8003068:	58025444 	.word	0x58025444
 800306c:	58025458 	.word	0x58025458
 8003070:	5802546c 	.word	0x5802546c
 8003074:	58025480 	.word	0x58025480
 8003078:	58025494 	.word	0x58025494

0800307c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a42      	ldr	r2, [pc, #264]	; (8003194 <DMA_CalcBaseAndBitshift+0x118>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d04a      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a41      	ldr	r2, [pc, #260]	; (8003198 <DMA_CalcBaseAndBitshift+0x11c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d045      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3f      	ldr	r2, [pc, #252]	; (800319c <DMA_CalcBaseAndBitshift+0x120>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d040      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a3e      	ldr	r2, [pc, #248]	; (80031a0 <DMA_CalcBaseAndBitshift+0x124>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d03b      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3c      	ldr	r2, [pc, #240]	; (80031a4 <DMA_CalcBaseAndBitshift+0x128>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d036      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a3b      	ldr	r2, [pc, #236]	; (80031a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d031      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a39      	ldr	r2, [pc, #228]	; (80031ac <DMA_CalcBaseAndBitshift+0x130>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02c      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a38      	ldr	r2, [pc, #224]	; (80031b0 <DMA_CalcBaseAndBitshift+0x134>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d027      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a36      	ldr	r2, [pc, #216]	; (80031b4 <DMA_CalcBaseAndBitshift+0x138>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d022      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a35      	ldr	r2, [pc, #212]	; (80031b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d01d      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a33      	ldr	r2, [pc, #204]	; (80031bc <DMA_CalcBaseAndBitshift+0x140>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d018      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a32      	ldr	r2, [pc, #200]	; (80031c0 <DMA_CalcBaseAndBitshift+0x144>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a30      	ldr	r2, [pc, #192]	; (80031c4 <DMA_CalcBaseAndBitshift+0x148>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00e      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d009      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2d      	ldr	r2, [pc, #180]	; (80031cc <DMA_CalcBaseAndBitshift+0x150>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <DMA_CalcBaseAndBitshift+0x154>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <DMA_CalcBaseAndBitshift+0xac>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <DMA_CalcBaseAndBitshift+0xae>
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d024      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	3b10      	subs	r3, #16
 8003136:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <DMA_CalcBaseAndBitshift+0x158>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	4a24      	ldr	r2, [pc, #144]	; (80031d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003148:	5cd3      	ldrb	r3, [r2, r3]
 800314a:	461a      	mov	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d908      	bls.n	8003168 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <DMA_CalcBaseAndBitshift+0x160>)
 800315e:	4013      	ands	r3, r2
 8003160:	1d1a      	adds	r2, r3, #4
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	659a      	str	r2, [r3, #88]	; 0x58
 8003166:	e00d      	b.n	8003184 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <DMA_CalcBaseAndBitshift+0x160>)
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6593      	str	r3, [r2, #88]	; 0x58
 8003176:	e005      	b.n	8003184 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40020010 	.word	0x40020010
 8003198:	40020028 	.word	0x40020028
 800319c:	40020040 	.word	0x40020040
 80031a0:	40020058 	.word	0x40020058
 80031a4:	40020070 	.word	0x40020070
 80031a8:	40020088 	.word	0x40020088
 80031ac:	400200a0 	.word	0x400200a0
 80031b0:	400200b8 	.word	0x400200b8
 80031b4:	40020410 	.word	0x40020410
 80031b8:	40020428 	.word	0x40020428
 80031bc:	40020440 	.word	0x40020440
 80031c0:	40020458 	.word	0x40020458
 80031c4:	40020470 	.word	0x40020470
 80031c8:	40020488 	.word	0x40020488
 80031cc:	400204a0 	.word	0x400204a0
 80031d0:	400204b8 	.word	0x400204b8
 80031d4:	aaaaaaab 	.word	0xaaaaaaab
 80031d8:	0800ede0 	.word	0x0800ede0
 80031dc:	fffffc00 	.word	0xfffffc00

080031e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d120      	bne.n	8003236 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d858      	bhi.n	80032ae <DMA_CheckFifoParam+0xce>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <DMA_CheckFifoParam+0x24>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003215 	.word	0x08003215
 8003208:	08003227 	.word	0x08003227
 800320c:	08003215 	.word	0x08003215
 8003210:	080032af 	.word	0x080032af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d048      	beq.n	80032b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003224:	e045      	b.n	80032b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800322e:	d142      	bne.n	80032b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003234:	e03f      	b.n	80032b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323e:	d123      	bne.n	8003288 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	2b03      	cmp	r3, #3
 8003246:	d838      	bhi.n	80032ba <DMA_CheckFifoParam+0xda>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <DMA_CheckFifoParam+0x70>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003261 	.word	0x08003261
 8003254:	08003267 	.word	0x08003267
 8003258:	08003261 	.word	0x08003261
 800325c:	08003279 	.word	0x08003279
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
        break;
 8003264:	e030      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d025      	beq.n	80032be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003276:	e022      	b.n	80032be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003280:	d11f      	bne.n	80032c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003286:	e01c      	b.n	80032c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	2b02      	cmp	r3, #2
 800328e:	d902      	bls.n	8003296 <DMA_CheckFifoParam+0xb6>
 8003290:	2b03      	cmp	r3, #3
 8003292:	d003      	beq.n	800329c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003294:	e018      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
        break;
 800329a:	e015      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
    break;
 80032ac:	e00b      	b.n	80032c6 <DMA_CheckFifoParam+0xe6>
        break;
 80032ae:	bf00      	nop
 80032b0:	e00a      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        break;
 80032b2:	bf00      	nop
 80032b4:	e008      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        break;
 80032b6:	bf00      	nop
 80032b8:	e006      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        break;
 80032ba:	bf00      	nop
 80032bc:	e004      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        break;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        break;
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
    break;
 80032c6:	bf00      	nop
    }
  }

  return status;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a38      	ldr	r2, [pc, #224]	; (80033cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a36      	ldr	r2, [pc, #216]	; (80033d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a35      	ldr	r2, [pc, #212]	; (80033d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a32      	ldr	r2, [pc, #200]	; (80033dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a30      	ldr	r2, [pc, #192]	; (80033e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2f      	ldr	r2, [pc, #188]	; (80033e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01a      	beq.n	8003376 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	3b08      	subs	r3, #8
 8003348:	4a28      	ldr	r2, [pc, #160]	; (80033ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4b26      	ldr	r3, [pc, #152]	; (80033f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	461a      	mov	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003364:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2201      	movs	r2, #1
 800336e:	409a      	lsls	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003374:	e024      	b.n	80033c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3b10      	subs	r3, #16
 800337e:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d806      	bhi.n	800339e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4a1b      	ldr	r2, [pc, #108]	; (8003400 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d902      	bls.n	800339e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3308      	adds	r3, #8
 800339c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4b18      	ldr	r3, [pc, #96]	; (8003404 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	461a      	mov	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a16      	ldr	r2, [pc, #88]	; (8003408 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80033b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2201      	movs	r2, #1
 80033ba:	409a      	lsls	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	58025408 	.word	0x58025408
 80033d0:	5802541c 	.word	0x5802541c
 80033d4:	58025430 	.word	0x58025430
 80033d8:	58025444 	.word	0x58025444
 80033dc:	58025458 	.word	0x58025458
 80033e0:	5802546c 	.word	0x5802546c
 80033e4:	58025480 	.word	0x58025480
 80033e8:	58025494 	.word	0x58025494
 80033ec:	cccccccd 	.word	0xcccccccd
 80033f0:	16009600 	.word	0x16009600
 80033f4:	58025880 	.word	0x58025880
 80033f8:	aaaaaaab 	.word	0xaaaaaaab
 80033fc:	400204b8 	.word	0x400204b8
 8003400:	4002040f 	.word	0x4002040f
 8003404:	10008200 	.word	0x10008200
 8003408:	40020880 	.word	0x40020880

0800340c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d04a      	beq.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d847      	bhi.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a25      	ldr	r2, [pc, #148]	; (80034c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d01d      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a22      	ldr	r2, [pc, #136]	; (80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1f      	ldr	r2, [pc, #124]	; (80034d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800347c:	2300      	movs	r3, #0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	461a      	mov	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a15      	ldr	r2, [pc, #84]	; (80034e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003494:	671a      	str	r2, [r3, #112]	; 0x70
 8003496:	e009      	b.n	80034ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4b14      	ldr	r3, [pc, #80]	; (80034ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	461a      	mov	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80034aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	2201      	movs	r2, #1
 80034b2:	409a      	lsls	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	58025408 	.word	0x58025408
 80034c8:	5802541c 	.word	0x5802541c
 80034cc:	58025430 	.word	0x58025430
 80034d0:	58025444 	.word	0x58025444
 80034d4:	58025458 	.word	0x58025458
 80034d8:	5802546c 	.word	0x5802546c
 80034dc:	58025480 	.word	0x58025480
 80034e0:	58025494 	.word	0x58025494
 80034e4:	1600963f 	.word	0x1600963f
 80034e8:	58025940 	.word	0x58025940
 80034ec:	1000823f 	.word	0x1000823f
 80034f0:	40020940 	.word	0x40020940

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003502:	4b89      	ldr	r3, [pc, #548]	; (8003728 <HAL_GPIO_Init+0x234>)
 8003504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003506:	e194      	b.n	8003832 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8186 	beq.w	800382c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d005      	beq.n	8003538 <HAL_GPIO_Init+0x44>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d130      	bne.n	800359a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800356e:	2201      	movs	r2, #1
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 0201 	and.w	r2, r3, #1
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d017      	beq.n	80035d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2203      	movs	r2, #3
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d123      	bne.n	800362a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	08da      	lsrs	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3208      	adds	r2, #8
 80035ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	69b9      	ldr	r1, [r7, #24]
 8003626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	2203      	movs	r2, #3
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0203 	and.w	r2, r3, #3
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80e0 	beq.w	800382c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366c:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_GPIO_Init+0x238>)
 800366e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003672:	4a2e      	ldr	r2, [pc, #184]	; (800372c <HAL_GPIO_Init+0x238>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_GPIO_Init+0x238>)
 800367e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800368a:	4a29      	ldr	r2, [pc, #164]	; (8003730 <HAL_GPIO_Init+0x23c>)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a20      	ldr	r2, [pc, #128]	; (8003734 <HAL_GPIO_Init+0x240>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d052      	beq.n	800375c <HAL_GPIO_Init+0x268>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <HAL_GPIO_Init+0x244>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d031      	beq.n	8003722 <HAL_GPIO_Init+0x22e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a1e      	ldr	r2, [pc, #120]	; (800373c <HAL_GPIO_Init+0x248>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02b      	beq.n	800371e <HAL_GPIO_Init+0x22a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <HAL_GPIO_Init+0x24c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d025      	beq.n	800371a <HAL_GPIO_Init+0x226>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <HAL_GPIO_Init+0x250>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01f      	beq.n	8003716 <HAL_GPIO_Init+0x222>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <HAL_GPIO_Init+0x254>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d019      	beq.n	8003712 <HAL_GPIO_Init+0x21e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1a      	ldr	r2, [pc, #104]	; (800374c <HAL_GPIO_Init+0x258>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_GPIO_Init+0x21a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a19      	ldr	r2, [pc, #100]	; (8003750 <HAL_GPIO_Init+0x25c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00d      	beq.n	800370a <HAL_GPIO_Init+0x216>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_GPIO_Init+0x260>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <HAL_GPIO_Init+0x212>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_GPIO_Init+0x264>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_GPIO_Init+0x20e>
 80036fe:	2309      	movs	r3, #9
 8003700:	e02d      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003702:	230a      	movs	r3, #10
 8003704:	e02b      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003706:	2308      	movs	r3, #8
 8003708:	e029      	b.n	800375e <HAL_GPIO_Init+0x26a>
 800370a:	2307      	movs	r3, #7
 800370c:	e027      	b.n	800375e <HAL_GPIO_Init+0x26a>
 800370e:	2306      	movs	r3, #6
 8003710:	e025      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003712:	2305      	movs	r3, #5
 8003714:	e023      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003716:	2304      	movs	r3, #4
 8003718:	e021      	b.n	800375e <HAL_GPIO_Init+0x26a>
 800371a:	2303      	movs	r3, #3
 800371c:	e01f      	b.n	800375e <HAL_GPIO_Init+0x26a>
 800371e:	2302      	movs	r3, #2
 8003720:	e01d      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003722:	2301      	movs	r3, #1
 8003724:	e01b      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003726:	bf00      	nop
 8003728:	58000080 	.word	0x58000080
 800372c:	58024400 	.word	0x58024400
 8003730:	58000400 	.word	0x58000400
 8003734:	58020000 	.word	0x58020000
 8003738:	58020400 	.word	0x58020400
 800373c:	58020800 	.word	0x58020800
 8003740:	58020c00 	.word	0x58020c00
 8003744:	58021000 	.word	0x58021000
 8003748:	58021400 	.word	0x58021400
 800374c:	58021800 	.word	0x58021800
 8003750:	58021c00 	.word	0x58021c00
 8003754:	58022000 	.word	0x58022000
 8003758:	58022400 	.word	0x58022400
 800375c:	2300      	movs	r3, #0
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	f002 0203 	and.w	r2, r2, #3
 8003764:	0092      	lsls	r2, r2, #2
 8003766:	4093      	lsls	r3, r2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376e:	4938      	ldr	r1, [pc, #224]	; (8003850 <HAL_GPIO_Init+0x35c>)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	3302      	adds	r3, #2
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800377c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80037a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80037d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	3301      	adds	r3, #1
 8003830:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	f47f ae63 	bne.w	8003508 <HAL_GPIO_Init+0x14>
  }
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	3724      	adds	r7, #36	; 0x24
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	58000400 	.word	0x58000400

08003854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
 8003860:	4613      	mov	r3, r2
 8003862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003864:	787b      	ldrb	r3, [r7, #1]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003870:	e003      	b.n	800387a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003872:	887b      	ldrh	r3, [r7, #2]
 8003874:	041a      	lsls	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	619a      	str	r2, [r3, #24]
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003898:	887a      	ldrh	r2, [r7, #2]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	041a      	lsls	r2, r3, #16
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	400b      	ands	r3, r1
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	619a      	str	r2, [r3, #24]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038c4:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_PWREx_ConfigSupply+0x70>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d00a      	beq.n	80038e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038d0:	4b16      	ldr	r3, [pc, #88]	; (800392c <HAL_PWREx_ConfigSupply+0x70>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d001      	beq.n	80038e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e01f      	b.n	8003922 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e01d      	b.n	8003922 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_PWREx_ConfigSupply+0x70>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f023 0207 	bic.w	r2, r3, #7
 80038ee:	490f      	ldr	r1, [pc, #60]	; (800392c <HAL_PWREx_ConfigSupply+0x70>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038f6:	f7fc febf 	bl	8000678 <HAL_GetTick>
 80038fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038fc:	e009      	b.n	8003912 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038fe:	f7fc febb 	bl	8000678 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800390c:	d901      	bls.n	8003912 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e007      	b.n	8003922 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_PWREx_ConfigSupply+0x70>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391e:	d1ee      	bne.n	80038fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	58024800 	.word	0x58024800

08003930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	; 0x30
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f000 bc1c 	b.w	800417c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 8087 	beq.w	8003a60 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003952:	4b9e      	ldr	r3, [pc, #632]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800395c:	4b9b      	ldr	r3, [pc, #620]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	2b10      	cmp	r3, #16
 8003966:	d007      	beq.n	8003978 <HAL_RCC_OscConfig+0x48>
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	2b18      	cmp	r3, #24
 800396c:	d110      	bne.n	8003990 <HAL_RCC_OscConfig+0x60>
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d10b      	bne.n	8003990 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	4b94      	ldr	r3, [pc, #592]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d06c      	beq.n	8003a5e <HAL_RCC_OscConfig+0x12e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d168      	bne.n	8003a5e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e3f5      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003998:	d106      	bne.n	80039a8 <HAL_RCC_OscConfig+0x78>
 800399a:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a8b      	ldr	r2, [pc, #556]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e02e      	b.n	8003a06 <HAL_RCC_OscConfig+0xd6>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10c      	bne.n	80039ca <HAL_RCC_OscConfig+0x9a>
 80039b0:	4b86      	ldr	r3, [pc, #536]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a85      	ldr	r2, [pc, #532]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b83      	ldr	r3, [pc, #524]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a82      	ldr	r2, [pc, #520]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	e01d      	b.n	8003a06 <HAL_RCC_OscConfig+0xd6>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d2:	d10c      	bne.n	80039ee <HAL_RCC_OscConfig+0xbe>
 80039d4:	4b7d      	ldr	r3, [pc, #500]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a7c      	ldr	r2, [pc, #496]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b7a      	ldr	r3, [pc, #488]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a79      	ldr	r2, [pc, #484]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	e00b      	b.n	8003a06 <HAL_RCC_OscConfig+0xd6>
 80039ee:	4b77      	ldr	r3, [pc, #476]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a76      	ldr	r2, [pc, #472]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b74      	ldr	r3, [pc, #464]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a73      	ldr	r2, [pc, #460]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d013      	beq.n	8003a36 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fc fe33 	bl	8000678 <HAL_GetTick>
 8003a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a16:	f7fc fe2f 	bl	8000678 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b64      	cmp	r3, #100	; 0x64
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e3a9      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a28:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0xe6>
 8003a34:	e014      	b.n	8003a60 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fc fe1f 	bl	8000678 <HAL_GetTick>
 8003a3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3e:	f7fc fe1b 	bl	8000678 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b64      	cmp	r3, #100	; 0x64
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e395      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a50:	4b5e      	ldr	r3, [pc, #376]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x10e>
 8003a5c:	e000      	b.n	8003a60 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80ca 	beq.w	8003c02 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a6e:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a76:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a78:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_RCC_OscConfig+0x164>
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2b18      	cmp	r3, #24
 8003a88:	d156      	bne.n	8003b38 <HAL_RCC_OscConfig+0x208>
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d151      	bne.n	8003b38 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a94:	4b4d      	ldr	r3, [pc, #308]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_OscConfig+0x17c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e367      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aac:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 0219 	bic.w	r2, r3, #25
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4944      	ldr	r1, [pc, #272]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003abe:	f7fc fddb 	bl	8000678 <HAL_GetTick>
 8003ac2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac6:	f7fc fdd7 	bl	8000678 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e351      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad8:	4b3c      	ldr	r3, [pc, #240]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	f7fc fdd4 	bl	8000690 <HAL_GetREVID>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f241 0203 	movw	r2, #4099	; 0x1003
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d817      	bhi.n	8003b22 <HAL_RCC_OscConfig+0x1f2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d108      	bne.n	8003b0c <HAL_RCC_OscConfig+0x1dc>
 8003afa:	4b34      	ldr	r3, [pc, #208]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b02:	4a32      	ldr	r2, [pc, #200]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b0a:	e07a      	b.n	8003c02 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	031b      	lsls	r3, r3, #12
 8003b1a:	492c      	ldr	r1, [pc, #176]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b20:	e06f      	b.n	8003c02 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b22:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	4926      	ldr	r1, [pc, #152]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b36:	e064      	b.n	8003c02 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d047      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b40:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 0219 	bic.w	r2, r3, #25
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	491f      	ldr	r1, [pc, #124]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7fc fd91 	bl	8000678 <HAL_GetTick>
 8003b56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5a:	f7fc fd8d 	bl	8000678 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e307      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b6c:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b78:	f7fc fd8a 	bl	8000690 <HAL_GetREVID>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d817      	bhi.n	8003bb6 <HAL_RCC_OscConfig+0x286>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d108      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x270>
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b96:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9c:	6053      	str	r3, [r2, #4]
 8003b9e:	e030      	b.n	8003c02 <HAL_RCC_OscConfig+0x2d2>
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	031b      	lsls	r3, r3, #12
 8003bae:	4907      	ldr	r1, [pc, #28]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
 8003bb4:	e025      	b.n	8003c02 <HAL_RCC_OscConfig+0x2d2>
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	061b      	lsls	r3, r3, #24
 8003bc4:	4901      	ldr	r1, [pc, #4]	; (8003bcc <HAL_RCC_OscConfig+0x29c>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
 8003bca:	e01a      	b.n	8003c02 <HAL_RCC_OscConfig+0x2d2>
 8003bcc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd0:	4b9e      	ldr	r3, [pc, #632]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a9d      	ldr	r2, [pc, #628]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fc fd4c 	bl	8000678 <HAL_GetTick>
 8003be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be4:	f7fc fd48 	bl	8000678 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e2c2      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bf6:	4b95      	ldr	r3, [pc, #596]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80a9 	beq.w	8003d62 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c10:	4b8e      	ldr	r3, [pc, #568]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c1a:	4b8c      	ldr	r3, [pc, #560]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d007      	beq.n	8003c36 <HAL_RCC_OscConfig+0x306>
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b18      	cmp	r3, #24
 8003c2a:	d13a      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x372>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d135      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c36:	4b85      	ldr	r3, [pc, #532]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x31e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e296      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c4e:	f7fc fd1f 	bl	8000690 <HAL_GetREVID>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d817      	bhi.n	8003c8c <HAL_RCC_OscConfig+0x35c>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d108      	bne.n	8003c76 <HAL_RCC_OscConfig+0x346>
 8003c64:	4b79      	ldr	r3, [pc, #484]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c6c:	4a77      	ldr	r2, [pc, #476]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003c6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c72:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c74:	e075      	b.n	8003d62 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c76:	4b75      	ldr	r3, [pc, #468]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	069b      	lsls	r3, r3, #26
 8003c84:	4971      	ldr	r1, [pc, #452]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c8a:	e06a      	b.n	8003d62 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	496c      	ldr	r1, [pc, #432]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ca0:	e05f      	b.n	8003d62 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d042      	beq.n	8003d30 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003caa:	4b68      	ldr	r3, [pc, #416]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a67      	ldr	r2, [pc, #412]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fc fcdf 	bl	8000678 <HAL_GetTick>
 8003cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cbe:	f7fc fcdb 	bl	8000678 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e255      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cd0:	4b5e      	ldr	r3, [pc, #376]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cdc:	f7fc fcd8 	bl	8000690 <HAL_GetREVID>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d817      	bhi.n	8003d1a <HAL_RCC_OscConfig+0x3ea>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	d108      	bne.n	8003d04 <HAL_RCC_OscConfig+0x3d4>
 8003cf2:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003cfa:	4a54      	ldr	r2, [pc, #336]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003cfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d00:	6053      	str	r3, [r2, #4]
 8003d02:	e02e      	b.n	8003d62 <HAL_RCC_OscConfig+0x432>
 8003d04:	4b51      	ldr	r3, [pc, #324]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	069b      	lsls	r3, r3, #26
 8003d12:	494e      	ldr	r1, [pc, #312]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
 8003d18:	e023      	b.n	8003d62 <HAL_RCC_OscConfig+0x432>
 8003d1a:	4b4c      	ldr	r3, [pc, #304]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	061b      	lsls	r3, r3, #24
 8003d28:	4948      	ldr	r1, [pc, #288]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60cb      	str	r3, [r1, #12]
 8003d2e:	e018      	b.n	8003d62 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d30:	4b46      	ldr	r3, [pc, #280]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a45      	ldr	r2, [pc, #276]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fc fc9c 	bl	8000678 <HAL_GetTick>
 8003d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d44:	f7fc fc98 	bl	8000678 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e212      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d56:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d036      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d019      	beq.n	8003daa <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b35      	ldr	r3, [pc, #212]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fc fc79 	bl	8000678 <HAL_GetTick>
 8003d86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7fc fc75 	bl	8000678 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e1ef      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d9c:	4b2b      	ldr	r3, [pc, #172]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x45a>
 8003da8:	e018      	b.n	8003ddc <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003daa:	4b28      	ldr	r3, [pc, #160]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db6:	f7fc fc5f 	bl	8000678 <HAL_GetTick>
 8003dba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fc fc5b 	bl	8000678 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e1d5      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d039      	beq.n	8003e5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d019      	beq.n	8003e24 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003df0:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003df6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dfc:	f7fc fc3c 	bl	8000678 <HAL_GetTick>
 8003e00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e04:	f7fc fc38 	bl	8000678 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e1b2      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4d4>
 8003e22:	e01b      	b.n	8003e5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x51c>)
 8003e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e30:	f7fc fc22 	bl	8000678 <HAL_GetTick>
 8003e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e38:	f7fc fc1e 	bl	8000678 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d904      	bls.n	8003e50 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e198      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
 8003e4a:	bf00      	nop
 8003e4c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e50:	4ba3      	ldr	r3, [pc, #652]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ed      	bne.n	8003e38 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8081 	beq.w	8003f6c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e6a:	4b9e      	ldr	r3, [pc, #632]	; (80040e4 <HAL_RCC_OscConfig+0x7b4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a9d      	ldr	r2, [pc, #628]	; (80040e4 <HAL_RCC_OscConfig+0x7b4>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e76:	f7fc fbff 	bl	8000678 <HAL_GetTick>
 8003e7a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7fc fbfb 	bl	8000678 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b64      	cmp	r3, #100	; 0x64
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e175      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e90:	4b94      	ldr	r3, [pc, #592]	; (80040e4 <HAL_RCC_OscConfig+0x7b4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x582>
 8003ea4:	4b8e      	ldr	r3, [pc, #568]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a8d      	ldr	r2, [pc, #564]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	e02d      	b.n	8003f0e <HAL_RCC_OscConfig+0x5de>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x5a4>
 8003eba:	4b89      	ldr	r3, [pc, #548]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a88      	ldr	r2, [pc, #544]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec6:	4b86      	ldr	r3, [pc, #536]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a85      	ldr	r2, [pc, #532]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed2:	e01c      	b.n	8003f0e <HAL_RCC_OscConfig+0x5de>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x5c6>
 8003edc:	4b80      	ldr	r3, [pc, #512]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a7f      	ldr	r2, [pc, #508]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003ee2:	f043 0304 	orr.w	r3, r3, #4
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	4b7d      	ldr	r3, [pc, #500]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a7c      	ldr	r2, [pc, #496]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	e00b      	b.n	8003f0e <HAL_RCC_OscConfig+0x5de>
 8003ef6:	4b7a      	ldr	r3, [pc, #488]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a79      	ldr	r2, [pc, #484]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	4b77      	ldr	r3, [pc, #476]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a76      	ldr	r2, [pc, #472]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fc fbaf 	bl	8000678 <HAL_GetTick>
 8003f1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fc fbab 	bl	8000678 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e123      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f34:	4b6a      	ldr	r3, [pc, #424]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ee      	beq.n	8003f1e <HAL_RCC_OscConfig+0x5ee>
 8003f40:	e014      	b.n	8003f6c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fc fb99 	bl	8000678 <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fc fb95 	bl	8000678 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e10d      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f60:	4b5f      	ldr	r3, [pc, #380]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8102 	beq.w	800417a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f76:	4b5a      	ldr	r3, [pc, #360]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7e:	2b18      	cmp	r3, #24
 8003f80:	f000 80bd 	beq.w	80040fe <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	f040 8095 	bne.w	80040b8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b54      	ldr	r3, [pc, #336]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a53      	ldr	r2, [pc, #332]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fc fb6d 	bl	8000678 <HAL_GetTick>
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fc fb69 	bl	8000678 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0e3      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fb4:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fc0:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc4:	4b48      	ldr	r3, [pc, #288]	; (80040e8 <HAL_RCC_OscConfig+0x7b8>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	4942      	ldr	r1, [pc, #264]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	628b      	str	r3, [r1, #40]	; 0x28
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	025b      	lsls	r3, r3, #9
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	3b01      	subs	r3, #1
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800400a:	4935      	ldr	r1, [pc, #212]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 800400c:	4313      	orrs	r3, r2
 800400e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004010:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4a32      	ldr	r2, [pc, #200]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800401c:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 800401e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004020:	4b32      	ldr	r3, [pc, #200]	; (80040ec <HAL_RCC_OscConfig+0x7bc>)
 8004022:	4013      	ands	r3, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004028:	00d2      	lsls	r2, r2, #3
 800402a:	492d      	ldr	r1, [pc, #180]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004030:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	f023 020c 	bic.w	r2, r3, #12
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	4928      	ldr	r1, [pc, #160]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 800403e:	4313      	orrs	r3, r2
 8004040:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004042:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	f023 0202 	bic.w	r2, r3, #2
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	4924      	ldr	r1, [pc, #144]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8004050:	4313      	orrs	r3, r2
 8004052:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004060:	4b1f      	ldr	r3, [pc, #124]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8004066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800406c:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8004072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fc faf2 	bl	8000678 <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004098:	f7fc faee 	bl	8000678 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e068      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x768>
 80040b6:	e060      	b.n	800417a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 80040be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fc fad8 	bl	8000678 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ca:	e011      	b.n	80040f0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fc fad4 	bl	8000678 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d90a      	bls.n	80040f0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e04e      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
 80040de:	bf00      	nop
 80040e0:	58024400 	.word	0x58024400
 80040e4:	58024800 	.word	0x58024800
 80040e8:	fffffc0c 	.word	0xfffffc0c
 80040ec:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040f0:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_RCC_OscConfig+0x854>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e7      	bne.n	80040cc <HAL_RCC_OscConfig+0x79c>
 80040fc:	e03d      	b.n	800417a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040fe:	4b21      	ldr	r3, [pc, #132]	; (8004184 <HAL_RCC_OscConfig+0x854>)
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004104:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <HAL_RCC_OscConfig+0x854>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b01      	cmp	r3, #1
 8004110:	d031      	beq.n	8004176 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f003 0203 	and.w	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d12a      	bne.n	8004176 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d122      	bne.n	8004176 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d11a      	bne.n	8004176 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	0a5b      	lsrs	r3, r3, #9
 8004144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d111      	bne.n	8004176 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d108      	bne.n	8004176 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	0e1b      	lsrs	r3, r3, #24
 8004168:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004170:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d001      	beq.n	800417a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3730      	adds	r7, #48	; 0x30
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	58024400 	.word	0x58024400

08004188 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e19c      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800419c:	4b8a      	ldr	r3, [pc, #552]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d910      	bls.n	80041cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b87      	ldr	r3, [pc, #540]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 020f 	bic.w	r2, r3, #15
 80041b2:	4985      	ldr	r1, [pc, #532]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b83      	ldr	r3, [pc, #524]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e184      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d010      	beq.n	80041fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	4b7b      	ldr	r3, [pc, #492]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d908      	bls.n	80041fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041e8:	4b78      	ldr	r3, [pc, #480]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	4975      	ldr	r1, [pc, #468]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	4b70      	ldr	r3, [pc, #448]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004212:	429a      	cmp	r2, r3
 8004214:	d908      	bls.n	8004228 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004216:	4b6d      	ldr	r3, [pc, #436]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	496a      	ldr	r1, [pc, #424]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004224:	4313      	orrs	r3, r2
 8004226:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	d010      	beq.n	8004256 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	4b64      	ldr	r3, [pc, #400]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004240:	429a      	cmp	r2, r3
 8004242:	d908      	bls.n	8004256 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004244:	4b61      	ldr	r3, [pc, #388]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	495e      	ldr	r1, [pc, #376]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004252:	4313      	orrs	r3, r2
 8004254:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d010      	beq.n	8004284 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	4b59      	ldr	r3, [pc, #356]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800426e:	429a      	cmp	r2, r3
 8004270:	d908      	bls.n	8004284 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004272:	4b56      	ldr	r3, [pc, #344]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4953      	ldr	r1, [pc, #332]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004280:	4313      	orrs	r3, r2
 8004282:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	4b4d      	ldr	r3, [pc, #308]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	429a      	cmp	r2, r3
 800429e:	d908      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b4a      	ldr	r3, [pc, #296]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f023 020f 	bic.w	r2, r3, #15
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4947      	ldr	r1, [pc, #284]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d055      	beq.n	800436a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042be:	4b43      	ldr	r3, [pc, #268]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	4940      	ldr	r1, [pc, #256]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042d8:	4b3c      	ldr	r3, [pc, #240]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d121      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0f6      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042f0:	4b36      	ldr	r3, [pc, #216]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d115      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0ea      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d107      	bne.n	8004318 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004308:	4b30      	ldr	r3, [pc, #192]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0de      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004318:	4b2c      	ldr	r3, [pc, #176]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0d6      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004328:	4b28      	ldr	r3, [pc, #160]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f023 0207 	bic.w	r2, r3, #7
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4925      	ldr	r1, [pc, #148]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433a:	f7fc f99d 	bl	8000678 <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004340:	e00a      	b.n	8004358 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004342:	f7fc f999 	bl	8000678 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0be      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004358:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	429a      	cmp	r2, r3
 8004368:	d1eb      	bne.n	8004342 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d010      	beq.n	8004398 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	4b14      	ldr	r3, [pc, #80]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	429a      	cmp	r2, r3
 8004384:	d208      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f023 020f 	bic.w	r2, r3, #15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	490e      	ldr	r1, [pc, #56]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004394:	4313      	orrs	r3, r2
 8004396:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d214      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 020f 	bic.w	r2, r3, #15
 80043ae:	4906      	ldr	r1, [pc, #24]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e086      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
 80043c8:	52002000 	.word	0x52002000
 80043cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d208      	bcs.n	80043fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043ec:	4b3c      	ldr	r3, [pc, #240]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	4939      	ldr	r1, [pc, #228]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d010      	beq.n	800442c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004416:	429a      	cmp	r2, r3
 8004418:	d208      	bcs.n	800442c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800441a:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	492e      	ldr	r1, [pc, #184]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004428:	4313      	orrs	r3, r2
 800442a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004444:	429a      	cmp	r2, r3
 8004446:	d208      	bcs.n	800445a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004448:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	4922      	ldr	r1, [pc, #136]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004456:	4313      	orrs	r3, r2
 8004458:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d010      	beq.n	8004488 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004472:	429a      	cmp	r2, r3
 8004474:	d208      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004476:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	4917      	ldr	r1, [pc, #92]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004484:	4313      	orrs	r3, r2
 8004486:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004488:	f000 f834 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	4912      	ldr	r1, [pc, #72]	; (80044e4 <HAL_RCC_ClockConfig+0x35c>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
 80044a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044a6:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	4a0d      	ldr	r2, [pc, #52]	; (80044e4 <HAL_RCC_ClockConfig+0x35c>)
 80044b0:	5cd3      	ldrb	r3, [r2, r3]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <HAL_RCC_ClockConfig+0x360>)
 80044be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044c0:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <HAL_RCC_ClockConfig+0x364>)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_RCC_ClockConfig+0x368>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f008 fd6c 	bl	800cfa8 <HAL_InitTick>
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	58024400 	.word	0x58024400
 80044e4:	0800ee10 	.word	0x0800ee10
 80044e8:	24000010 	.word	0x24000010
 80044ec:	2400000c 	.word	0x2400000c
 80044f0:	24000000 	.word	0x24000000

080044f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044fa:	4bb3      	ldr	r3, [pc, #716]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004502:	2b18      	cmp	r3, #24
 8004504:	f200 8155 	bhi.w	80047b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004508:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <HAL_RCC_GetSysClockFreq+0x1c>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004575 	.word	0x08004575
 8004514:	080047b3 	.word	0x080047b3
 8004518:	080047b3 	.word	0x080047b3
 800451c:	080047b3 	.word	0x080047b3
 8004520:	080047b3 	.word	0x080047b3
 8004524:	080047b3 	.word	0x080047b3
 8004528:	080047b3 	.word	0x080047b3
 800452c:	080047b3 	.word	0x080047b3
 8004530:	0800459b 	.word	0x0800459b
 8004534:	080047b3 	.word	0x080047b3
 8004538:	080047b3 	.word	0x080047b3
 800453c:	080047b3 	.word	0x080047b3
 8004540:	080047b3 	.word	0x080047b3
 8004544:	080047b3 	.word	0x080047b3
 8004548:	080047b3 	.word	0x080047b3
 800454c:	080047b3 	.word	0x080047b3
 8004550:	080045a1 	.word	0x080045a1
 8004554:	080047b3 	.word	0x080047b3
 8004558:	080047b3 	.word	0x080047b3
 800455c:	080047b3 	.word	0x080047b3
 8004560:	080047b3 	.word	0x080047b3
 8004564:	080047b3 	.word	0x080047b3
 8004568:	080047b3 	.word	0x080047b3
 800456c:	080047b3 	.word	0x080047b3
 8004570:	080045a7 	.word	0x080045a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004574:	4b94      	ldr	r3, [pc, #592]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d009      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004580:	4b91      	ldr	r3, [pc, #580]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	4a90      	ldr	r2, [pc, #576]	; (80047cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004592:	e111      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004594:	4b8d      	ldr	r3, [pc, #564]	; (80047cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004596:	61bb      	str	r3, [r7, #24]
    break;
 8004598:	e10e      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800459a:	4b8d      	ldr	r3, [pc, #564]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800459c:	61bb      	str	r3, [r7, #24]
    break;
 800459e:	e10b      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80045a0:	4b8c      	ldr	r3, [pc, #560]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045a2:	61bb      	str	r3, [r7, #24]
    break;
 80045a4:	e108      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045a6:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80045b0:	4b85      	ldr	r3, [pc, #532]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045bc:	4b82      	ldr	r3, [pc, #520]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045c6:	4b80      	ldr	r3, [pc, #512]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80e1 	beq.w	80047ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	f000 8083 	beq.w	80046f8 <HAL_RCC_GetSysClockFreq+0x204>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f200 80a1 	bhi.w	800473c <HAL_RCC_GetSysClockFreq+0x248>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x114>
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d056      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004606:	e099      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004608:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02d      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004614:	4b6c      	ldr	r3, [pc, #432]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	08db      	lsrs	r3, r3, #3
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	4a6b      	ldr	r2, [pc, #428]	; (80047cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b62      	ldr	r3, [pc, #392]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004652:	eddf 5a61 	vldr	s11, [pc, #388]	; 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800466e:	e087      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80047dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b51      	ldr	r3, [pc, #324]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a02 	vldr	s12, [r7, #8]
 8004696:	eddf 5a50 	vldr	s11, [pc, #320]	; 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046b2:	e065      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80047e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b40      	ldr	r3, [pc, #256]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046f6:	e043      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a38 	vldr	s13, [pc, #224]	; 80047e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b2f      	ldr	r3, [pc, #188]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	ed97 6a02 	vldr	s12, [r7, #8]
 800471e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800473a:	e021      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	eddf 6a26 	vldr	s13, [pc, #152]	; 80047e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004762:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800477e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	0a5b      	lsrs	r3, r3, #9
 8004786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478a:	3301      	adds	r3, #1
 800478c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004798:	edd7 6a07 	vldr	s13, [r7, #28]
 800479c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a4:	ee17 3a90 	vmov	r3, s15
 80047a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80047aa:	e005      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61bb      	str	r3, [r7, #24]
    break;
 80047b0:	e002      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047b4:	61bb      	str	r3, [r7, #24]
    break;
 80047b6:	bf00      	nop
  }

  return sysclockfreq;
 80047b8:	69bb      	ldr	r3, [r7, #24]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400
 80047cc:	03d09000 	.word	0x03d09000
 80047d0:	003d0900 	.word	0x003d0900
 80047d4:	017d7840 	.word	0x017d7840
 80047d8:	46000000 	.word	0x46000000
 80047dc:	4c742400 	.word	0x4c742400
 80047e0:	4a742400 	.word	0x4a742400
 80047e4:	4bbebc20 	.word	0x4bbebc20

080047e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047ee:	f7ff fe81 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80047f2:	4602      	mov	r2, r0
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_RCC_GetHCLKFreq+0x50>)
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	490f      	ldr	r1, [pc, #60]	; (800483c <HAL_RCC_GetHCLKFreq+0x54>)
 8004800:	5ccb      	ldrb	r3, [r1, r3]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	fa22 f303 	lsr.w	r3, r2, r3
 800480a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <HAL_RCC_GetHCLKFreq+0x50>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	4a09      	ldr	r2, [pc, #36]	; (800483c <HAL_RCC_GetHCLKFreq+0x54>)
 8004816:	5cd3      	ldrb	r3, [r2, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	4a07      	ldr	r2, [pc, #28]	; (8004840 <HAL_RCC_GetHCLKFreq+0x58>)
 8004824:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004826:	4a07      	ldr	r2, [pc, #28]	; (8004844 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800482c:	4b04      	ldr	r3, [pc, #16]	; (8004840 <HAL_RCC_GetHCLKFreq+0x58>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	58024400 	.word	0x58024400
 800483c:	0800ee10 	.word	0x0800ee10
 8004840:	24000010 	.word	0x24000010
 8004844:	2400000c 	.word	0x2400000c

08004848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800484c:	f7ff ffcc 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4904      	ldr	r1, [pc, #16]	; (8004870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	58024400 	.word	0x58024400
 8004870:	0800ee10 	.word	0x0800ee10

08004874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004878:	f7ff ffb6 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4904      	ldr	r1, [pc, #16]	; (800489c <HAL_RCC_GetPCLK2Freq+0x28>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004894:	4618      	mov	r0, r3
 8004896:	bd80      	pop	{r7, pc}
 8004898:	58024400 	.word	0x58024400
 800489c:	0800ee10 	.word	0x0800ee10

080048a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	223f      	movs	r2, #63	; 0x3f
 80048ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <HAL_RCC_GetClockConfig+0x7c>)
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f003 0207 	and.w	r2, r3, #7
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80048bc:	4b17      	ldr	r3, [pc, #92]	; (800491c <HAL_RCC_GetClockConfig+0x7c>)
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80048c8:	4b14      	ldr	r3, [pc, #80]	; (800491c <HAL_RCC_GetClockConfig+0x7c>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f003 020f 	and.w	r2, r3, #15
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <HAL_RCC_GetClockConfig+0x7c>)
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80048e0:	4b0e      	ldr	r3, [pc, #56]	; (800491c <HAL_RCC_GetClockConfig+0x7c>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_GetClockConfig+0x7c>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80048f8:	4b08      	ldr	r3, [pc, #32]	; (800491c <HAL_RCC_GetClockConfig+0x7c>)
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_RCC_GetClockConfig+0x80>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	601a      	str	r2, [r3, #0]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	58024400 	.word	0x58024400
 8004920:	52002000 	.word	0x52002000

08004924 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800492c:	2300      	movs	r3, #0
 800492e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004930:	2300      	movs	r3, #0
 8004932:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d03f      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004944:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004948:	d02a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800494a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800494e:	d824      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004950:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004954:	d018      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800495a:	d81e      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004964:	d007      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004966:	e018      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4bab      	ldr	r3, [pc, #684]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	4aaa      	ldr	r2, [pc, #680]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004972:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004974:	e015      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	2102      	movs	r1, #2
 800497c:	4618      	mov	r0, r3
 800497e:	f001 f9cf 	bl	8005d20 <RCCEx_PLL2_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004986:	e00c      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3324      	adds	r3, #36	; 0x24
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fa78 	bl	8005e84 <RCCEx_PLL3_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004998:	e003      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
      break;
 800499e:	e000      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d109      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049a8:	4b9b      	ldr	r3, [pc, #620]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b4:	4998      	ldr	r1, [pc, #608]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	650b      	str	r3, [r1, #80]	; 0x50
 80049ba:	e001      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d03d      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d826      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	080049f1 	.word	0x080049f1
 80049e0:	080049ff 	.word	0x080049ff
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a29 	.word	0x08004a29
 80049ec:	08004a29 	.word	0x08004a29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f0:	4b89      	ldr	r3, [pc, #548]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	4a88      	ldr	r2, [pc, #544]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049fc:	e015      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	2100      	movs	r1, #0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 f98b 	bl	8005d20 <RCCEx_PLL2_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a0e:	e00c      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3324      	adds	r3, #36	; 0x24
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 fa34 	bl	8005e84 <RCCEx_PLL3_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a20:	e003      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
      break;
 8004a26:	e000      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a30:	4b79      	ldr	r3, [pc, #484]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a34:	f023 0207 	bic.w	r2, r3, #7
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	4976      	ldr	r1, [pc, #472]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	650b      	str	r3, [r1, #80]	; 0x50
 8004a42:	e001      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
 8004a46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d042      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5c:	d02b      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a62:	d825      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a64:	2bc0      	cmp	r3, #192	; 0xc0
 8004a66:	d028      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a68:	2bc0      	cmp	r3, #192	; 0xc0
 8004a6a:	d821      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a6c:	2b80      	cmp	r3, #128	; 0x80
 8004a6e:	d016      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d81d      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d007      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004a7c:	e018      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a7e:	4b66      	ldr	r3, [pc, #408]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	4a65      	ldr	r2, [pc, #404]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a8a:	e017      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 f944 	bl	8005d20 <RCCEx_PLL2_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a9c:	e00e      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3324      	adds	r3, #36	; 0x24
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 f9ed 	bl	8005e84 <RCCEx_PLL3_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004aae:	e005      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab4:	e002      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004ac2:	4b55      	ldr	r3, [pc, #340]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	4952      	ldr	r1, [pc, #328]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	650b      	str	r3, [r1, #80]	; 0x50
 8004ad4:	e001      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
 8004ad8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d049      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004aec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004af0:	d030      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004af2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004af6:	d82a      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004af8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004afc:	d02c      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004afe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b02:	d824      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b08:	d018      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0e:	d81e      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b18:	d007      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004b1a:	e018      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1c:	4b3e      	ldr	r3, [pc, #248]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a3d      	ldr	r2, [pc, #244]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b28:	e017      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 f8f5 	bl	8005d20 <RCCEx_PLL2_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b3a:	e00e      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f99e 	bl	8005e84 <RCCEx_PLL3_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b4c:	e005      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
      break;
 8004b52:	e002      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b54:	bf00      	nop
 8004b56:	e000      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b60:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b6e:	492a      	ldr	r1, [pc, #168]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	658b      	str	r3, [r1, #88]	; 0x58
 8004b74:	e001      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d04c      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b90:	d030      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b96:	d82a      	bhi.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b9c:	d02c      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004b9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ba2:	d824      	bhi.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ba4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ba8:	d018      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bae:	d81e      	bhi.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bb8:	d007      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004bba:	e018      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bbc:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bc8:	e017      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 f8a5 	bl	8005d20 <RCCEx_PLL2_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004bda:	e00e      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3324      	adds	r3, #36	; 0x24
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 f94e 	bl	8005e84 <RCCEx_PLL3_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bec:	e005      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf2:	e002      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004bf4:	bf00      	nop
 8004bf6:	e000      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10d      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c0e:	4902      	ldr	r1, [pc, #8]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	658b      	str	r3, [r1, #88]	; 0x58
 8004c14:	e004      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004c16:	bf00      	nop
 8004c18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d032      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c30:	2b30      	cmp	r3, #48	; 0x30
 8004c32:	d01c      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004c34:	2b30      	cmp	r3, #48	; 0x30
 8004c36:	d817      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d00c      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d813      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d016      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d10f      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c48:	4baf      	ldr	r3, [pc, #700]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4aae      	ldr	r2, [pc, #696]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c54:	e00e      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 f85f 	bl	8005d20 <RCCEx_PLL2_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c66:	e005      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6c:	e002      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e000      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c7a:	4ba3      	ldr	r3, [pc, #652]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c86:	49a0      	ldr	r1, [pc, #640]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c8c:	e001      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d047      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca6:	d030      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cac:	d82a      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004cae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cb2:	d02c      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004cb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cb8:	d824      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cbe:	d018      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc4:	d81e      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cce:	d007      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004cd0:	e018      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd2:	4b8d      	ldr	r3, [pc, #564]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	4a8c      	ldr	r2, [pc, #560]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cde:	e017      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 f81a 	bl	8005d20 <RCCEx_PLL2_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cf0:	e00e      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3324      	adds	r3, #36	; 0x24
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 f8c3 	bl	8005e84 <RCCEx_PLL3_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d02:	e005      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	75fb      	strb	r3, [r7, #23]
      break;
 8004d08:	e002      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004d0a:	bf00      	nop
 8004d0c:	e000      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d16:	4b7c      	ldr	r3, [pc, #496]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d22:	4979      	ldr	r1, [pc, #484]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	650b      	str	r3, [r1, #80]	; 0x50
 8004d28:	e001      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d049      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d42:	d02e      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d48:	d828      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d4e:	d02a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004d50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d54:	d822      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d5a:	d026      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004d5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d60:	d81c      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d66:	d010      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d6c:	d816      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01d      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d76:	d111      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 ffce 	bl	8005d20 <RCCEx_PLL2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d88:	e012      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3324      	adds	r3, #36	; 0x24
 8004d8e:	2101      	movs	r1, #1
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 f877 	bl	8005e84 <RCCEx_PLL3_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d9a:	e009      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004da0:	e006      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004da2:	bf00      	nop
 8004da4:	e004      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004db6:	4b54      	ldr	r3, [pc, #336]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	4951      	ldr	r1, [pc, #324]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	650b      	str	r3, [r1, #80]	; 0x50
 8004dc8:	e001      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d04b      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de4:	d02e      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dea:	d828      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d02a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d822      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004df8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dfc:	d026      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004dfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e02:	d81c      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e08:	d010      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e0e:	d816      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01d      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e18:	d111      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	2101      	movs	r1, #1
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 ff7d 	bl	8005d20 <RCCEx_PLL2_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e2a:	e012      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3324      	adds	r3, #36	; 0x24
 8004e30:	2101      	movs	r1, #1
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 f826 	bl	8005e84 <RCCEx_PLL3_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e3c:	e009      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	75fb      	strb	r3, [r7, #23]
      break;
 8004e42:	e006      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e44:	bf00      	nop
 8004e46:	e004      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e48:	bf00      	nop
 8004e4a:	e002      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e58:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e66:	4928      	ldr	r1, [pc, #160]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	658b      	str	r3, [r1, #88]	; 0x58
 8004e6c:	e001      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
 8004e70:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d02f      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e86:	d00e      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e8c:	d814      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d015      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e96:	d10f      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4a1a      	ldr	r2, [pc, #104]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ea4:	e00c      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	2101      	movs	r1, #1
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 ff37 	bl	8005d20 <RCCEx_PLL2_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004eb6:	e003      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
      break;
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ec6:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed2:	490d      	ldr	r1, [pc, #52]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	650b      	str	r3, [r1, #80]	; 0x50
 8004ed8:	e001      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d033      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d81c      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f33 	.word	0x08004f33
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f1b 	.word	0x08004f1b
 8004f04:	08004f33 	.word	0x08004f33
 8004f08:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f0c:	4bb8      	ldr	r3, [pc, #736]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	4ab7      	ldr	r2, [pc, #732]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f18:	e00c      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	2102      	movs	r1, #2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fefd 	bl	8005d20 <RCCEx_PLL2_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f2a:	e003      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f30:	e000      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f3a:	4bad      	ldr	r3, [pc, #692]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3e:	f023 0203 	bic.w	r2, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	49aa      	ldr	r1, [pc, #680]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f4c:	e001      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8086 	beq.w	800506c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f60:	4ba4      	ldr	r3, [pc, #656]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4aa3      	ldr	r2, [pc, #652]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f6c:	f7fb fb84 	bl	8000678 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f72:	e009      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f74:	f7fb fb80 	bl	8000678 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	; 0x64
 8004f80:	d902      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	75fb      	strb	r3, [r7, #23]
        break;
 8004f86:	e005      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f88:	4b9a      	ldr	r3, [pc, #616]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ef      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d166      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f9a:	4b95      	ldr	r3, [pc, #596]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fa4:	4053      	eors	r3, r2
 8004fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d013      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fae:	4b90      	ldr	r3, [pc, #576]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fb8:	4b8d      	ldr	r3, [pc, #564]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	4a8c      	ldr	r2, [pc, #560]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc4:	4b8a      	ldr	r3, [pc, #552]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	4a89      	ldr	r2, [pc, #548]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fd0:	4a87      	ldr	r2, [pc, #540]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe0:	d115      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe2:	f7fb fb49 	bl	8000678 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe8:	e00b      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fea:	f7fb fb45 	bl	8000678 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d902      	bls.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	75fb      	strb	r3, [r7, #23]
            break;
 8005000:	e005      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005002:	4b7b      	ldr	r3, [pc, #492]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ed      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d126      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800501a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005022:	d10d      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005024:	4b72      	ldr	r3, [pc, #456]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005032:	0919      	lsrs	r1, r3, #4
 8005034:	4b70      	ldr	r3, [pc, #448]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005036:	400b      	ands	r3, r1
 8005038:	496d      	ldr	r1, [pc, #436]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	610b      	str	r3, [r1, #16]
 800503e:	e005      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005040:	4b6b      	ldr	r3, [pc, #428]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	4a6a      	ldr	r2, [pc, #424]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005046:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800504a:	6113      	str	r3, [r2, #16]
 800504c:	4b68      	ldr	r3, [pc, #416]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800504e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505a:	4965      	ldr	r1, [pc, #404]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800505c:	4313      	orrs	r3, r2
 800505e:	670b      	str	r3, [r1, #112]	; 0x70
 8005060:	e004      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	75bb      	strb	r3, [r7, #22]
 8005066:	e001      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d07e      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800507c:	2b28      	cmp	r3, #40	; 0x28
 800507e:	d867      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	08005157 	.word	0x08005157
 800508c:	08005151 	.word	0x08005151
 8005090:	08005151 	.word	0x08005151
 8005094:	08005151 	.word	0x08005151
 8005098:	08005151 	.word	0x08005151
 800509c:	08005151 	.word	0x08005151
 80050a0:	08005151 	.word	0x08005151
 80050a4:	08005151 	.word	0x08005151
 80050a8:	0800512d 	.word	0x0800512d
 80050ac:	08005151 	.word	0x08005151
 80050b0:	08005151 	.word	0x08005151
 80050b4:	08005151 	.word	0x08005151
 80050b8:	08005151 	.word	0x08005151
 80050bc:	08005151 	.word	0x08005151
 80050c0:	08005151 	.word	0x08005151
 80050c4:	08005151 	.word	0x08005151
 80050c8:	0800513f 	.word	0x0800513f
 80050cc:	08005151 	.word	0x08005151
 80050d0:	08005151 	.word	0x08005151
 80050d4:	08005151 	.word	0x08005151
 80050d8:	08005151 	.word	0x08005151
 80050dc:	08005151 	.word	0x08005151
 80050e0:	08005151 	.word	0x08005151
 80050e4:	08005151 	.word	0x08005151
 80050e8:	08005157 	.word	0x08005157
 80050ec:	08005151 	.word	0x08005151
 80050f0:	08005151 	.word	0x08005151
 80050f4:	08005151 	.word	0x08005151
 80050f8:	08005151 	.word	0x08005151
 80050fc:	08005151 	.word	0x08005151
 8005100:	08005151 	.word	0x08005151
 8005104:	08005151 	.word	0x08005151
 8005108:	08005157 	.word	0x08005157
 800510c:	08005151 	.word	0x08005151
 8005110:	08005151 	.word	0x08005151
 8005114:	08005151 	.word	0x08005151
 8005118:	08005151 	.word	0x08005151
 800511c:	08005151 	.word	0x08005151
 8005120:	08005151 	.word	0x08005151
 8005124:	08005151 	.word	0x08005151
 8005128:	08005157 	.word	0x08005157
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	2101      	movs	r1, #1
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fdf4 	bl	8005d20 <RCCEx_PLL2_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800513c:	e00c      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3324      	adds	r3, #36	; 0x24
 8005142:	2101      	movs	r1, #1
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fe9d 	bl	8005e84 <RCCEx_PLL3_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800514e:	e003      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
      break;
 8005154:	e000      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800515e:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800516a:	4921      	ldr	r1, [pc, #132]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800516c:	4313      	orrs	r3, r2
 800516e:	654b      	str	r3, [r1, #84]	; 0x54
 8005170:	e001      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d03e      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005186:	2b05      	cmp	r3, #5
 8005188:	d820      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051d3 	.word	0x080051d3
 8005194:	080051a9 	.word	0x080051a9
 8005198:	080051bb 	.word	0x080051bb
 800519c:	080051d3 	.word	0x080051d3
 80051a0:	080051d3 	.word	0x080051d3
 80051a4:	080051d3 	.word	0x080051d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	2101      	movs	r1, #1
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fdb6 	bl	8005d20 <RCCEx_PLL2_Config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051b8:	e00c      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3324      	adds	r3, #36	; 0x24
 80051be:	2101      	movs	r1, #1
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fe5f 	bl	8005e84 <RCCEx_PLL3_Config>
 80051c6:	4603      	mov	r3, r0
 80051c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051ca:	e003      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	75fb      	strb	r3, [r7, #23]
      break;
 80051d0:	e000      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80051d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d110      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	f023 0207 	bic.w	r2, r3, #7
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e6:	4902      	ldr	r1, [pc, #8]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	654b      	str	r3, [r1, #84]	; 0x54
 80051ec:	e008      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80051ee:	bf00      	nop
 80051f0:	58024400 	.word	0x58024400
 80051f4:	58024800 	.word	0x58024800
 80051f8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d039      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	2b05      	cmp	r3, #5
 8005214:	d820      	bhi.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	0800525f 	.word	0x0800525f
 8005220:	08005235 	.word	0x08005235
 8005224:	08005247 	.word	0x08005247
 8005228:	0800525f 	.word	0x0800525f
 800522c:	0800525f 	.word	0x0800525f
 8005230:	0800525f 	.word	0x0800525f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	2101      	movs	r1, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fd70 	bl	8005d20 <RCCEx_PLL2_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005244:	e00c      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3324      	adds	r3, #36	; 0x24
 800524a:	2101      	movs	r1, #1
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fe19 	bl	8005e84 <RCCEx_PLL3_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005256:	e003      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	75fb      	strb	r3, [r7, #23]
      break;
 800525c:	e000      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800525e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005260:	7dfb      	ldrb	r3, [r7, #23]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005266:	4bb7      	ldr	r3, [pc, #732]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	f023 0207 	bic.w	r2, r3, #7
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005274:	49b3      	ldr	r1, [pc, #716]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005276:	4313      	orrs	r3, r2
 8005278:	658b      	str	r3, [r1, #88]	; 0x58
 800527a:	e001      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d04b      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005296:	d02e      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800529c:	d828      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800529e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a2:	d02a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d822      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80052aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052ae:	d026      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80052b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052b4:	d81c      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80052b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ba:	d010      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80052bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c0:	d816      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01d      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80052c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ca:	d111      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	2100      	movs	r1, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fd24 	bl	8005d20 <RCCEx_PLL2_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052dc:	e012      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3324      	adds	r3, #36	; 0x24
 80052e2:	2102      	movs	r1, #2
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fdcd 	bl	8005e84 <RCCEx_PLL3_Config>
 80052ea:	4603      	mov	r3, r0
 80052ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052ee:	e009      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	75fb      	strb	r3, [r7, #23]
      break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80052f6:	bf00      	nop
 80052f8:	e004      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80052fa:	bf00      	nop
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800530a:	4b8e      	ldr	r3, [pc, #568]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005318:	498a      	ldr	r1, [pc, #552]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800531a:	4313      	orrs	r3, r2
 800531c:	654b      	str	r3, [r1, #84]	; 0x54
 800531e:	e001      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
 8005322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d04b      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005336:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800533a:	d02e      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800533c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005340:	d828      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005346:	d02a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534c:	d822      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800534e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005352:	d026      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005358:	d81c      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800535a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535e:	d010      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005364:	d816      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01d      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800536a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536e:	d111      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3304      	adds	r3, #4
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fcd2 	bl	8005d20 <RCCEx_PLL2_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005380:	e012      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3324      	adds	r3, #36	; 0x24
 8005386:	2102      	movs	r1, #2
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fd7b 	bl	8005e84 <RCCEx_PLL3_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005392:	e009      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
      break;
 8005398:	e006      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800539a:	bf00      	nop
 800539c:	e004      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80053a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053ae:	4b65      	ldr	r3, [pc, #404]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053bc:	4961      	ldr	r1, [pc, #388]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	658b      	str	r3, [r1, #88]	; 0x58
 80053c2:	e001      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
 80053c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d04b      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053de:	d02e      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80053e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053e4:	d828      	bhi.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80053e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ea:	d02a      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80053ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f0:	d822      	bhi.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80053f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053f6:	d026      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80053f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053fc:	d81c      	bhi.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80053fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005402:	d010      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005408:	d816      	bhi.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01d      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800540e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005412:	d111      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fc80 	bl	8005d20 <RCCEx_PLL2_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005424:	e012      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3324      	adds	r3, #36	; 0x24
 800542a:	2102      	movs	r1, #2
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fd29 	bl	8005e84 <RCCEx_PLL3_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005436:	e009      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
      break;
 800543c:	e006      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800543e:	bf00      	nop
 8005440:	e004      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005442:	bf00      	nop
 8005444:	e002      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005446:	bf00      	nop
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800544a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800544c:	7dfb      	ldrb	r3, [r7, #23]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005452:	4b3c      	ldr	r3, [pc, #240]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005460:	4938      	ldr	r1, [pc, #224]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005462:	4313      	orrs	r3, r2
 8005464:	658b      	str	r3, [r1, #88]	; 0x58
 8005466:	e001      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01a      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005482:	d10a      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3324      	adds	r3, #36	; 0x24
 8005488:	2102      	movs	r1, #2
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fcfa 	bl	8005e84 <RCCEx_PLL3_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800549a:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800549c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a8:	4926      	ldr	r1, [pc, #152]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c4:	d10a      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3324      	adds	r3, #36	; 0x24
 80054ca:	2102      	movs	r1, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fcd9 	bl	8005e84 <RCCEx_PLL3_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ea:	4916      	ldr	r1, [pc, #88]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d036      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005506:	d01f      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800550c:	d817      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005516:	d009      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005518:	e011      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3304      	adds	r3, #4
 800551e:	2100      	movs	r1, #0
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fbfd 	bl	8005d20 <RCCEx_PLL2_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800552a:	e00e      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3324      	adds	r3, #36	; 0x24
 8005530:	2102      	movs	r1, #2
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fca6 	bl	8005e84 <RCCEx_PLL3_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800553c:	e005      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	75fb      	strb	r3, [r7, #23]
      break;
 8005542:	e002      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005544:	58024400 	.word	0x58024400
      break;
 8005548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800554a:	7dfb      	ldrb	r3, [r7, #23]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005550:	4b93      	ldr	r3, [pc, #588]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005554:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800555e:	4990      	ldr	r1, [pc, #576]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005560:	4313      	orrs	r3, r2
 8005562:	658b      	str	r3, [r1, #88]	; 0x58
 8005564:	e001      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d033      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005580:	d01c      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005582:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005586:	d816      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558c:	d003      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800558e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005592:	d007      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005594:	e00f      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005596:	4b82      	ldr	r3, [pc, #520]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	4a81      	ldr	r2, [pc, #516]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800559c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80055a2:	e00c      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3324      	adds	r3, #36	; 0x24
 80055a8:	2101      	movs	r1, #1
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fc6a 	bl	8005e84 <RCCEx_PLL3_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80055b4:	e003      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
      break;
 80055ba:	e000      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80055bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055c4:	4b76      	ldr	r3, [pc, #472]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d2:	4973      	ldr	r1, [pc, #460]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	654b      	str	r3, [r1, #84]	; 0x54
 80055d8:	e001      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d029      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80055f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f6:	d007      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80055f8:	e00f      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fa:	4b69      	ldr	r3, [pc, #420]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	4a68      	ldr	r2, [pc, #416]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005604:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005606:	e00b      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	2102      	movs	r1, #2
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fb86 	bl	8005d20 <RCCEx_PLL2_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005618:	e002      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	75fb      	strb	r3, [r7, #23]
      break;
 800561e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005626:	4b5e      	ldr	r3, [pc, #376]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005632:	495b      	ldr	r1, [pc, #364]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005634:	4313      	orrs	r3, r2
 8005636:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005638:	e001      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3324      	adds	r3, #36	; 0x24
 800564e:	2102      	movs	r1, #2
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fc17 	bl	8005e84 <RCCEx_PLL3_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d030      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005674:	d017      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800567a:	d811      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800567c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005680:	d013      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005686:	d80b      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005688:	2b00      	cmp	r3, #0
 800568a:	d010      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800568c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005690:	d106      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005692:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	4a42      	ldr	r2, [pc, #264]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800569c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800569e:	e007      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	75fb      	strb	r3, [r7, #23]
      break;
 80056a4:	e004      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80056a6:	bf00      	nop
 80056a8:	e002      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80056ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056b6:	4b3a      	ldr	r3, [pc, #232]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c2:	4937      	ldr	r1, [pc, #220]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	654b      	str	r3, [r1, #84]	; 0x54
 80056c8:	e001      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d008      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056da:	4b31      	ldr	r3, [pc, #196]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	492e      	ldr	r1, [pc, #184]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056f8:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005706:	4926      	ldr	r1, [pc, #152]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005708:	4313      	orrs	r3, r2
 800570a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005718:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800571a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005724:	491e      	ldr	r1, [pc, #120]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005726:	4313      	orrs	r3, r2
 8005728:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00d      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005736:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800573c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005740:	6113      	str	r3, [r2, #16]
 8005742:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800574c:	4914      	ldr	r1, [pc, #80]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800574e:	4313      	orrs	r3, r2
 8005750:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	da08      	bge.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800575c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005766:	490e      	ldr	r1, [pc, #56]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005768:	4313      	orrs	r3, r2
 800576a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d009      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005778:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800577a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005786:	4906      	ldr	r1, [pc, #24]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005788:	4313      	orrs	r3, r2
 800578a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800578c:	7dbb      	ldrb	r3, [r7, #22]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	e000      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	58024400 	.word	0x58024400

080057a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80057a8:	f7ff f81e 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 80057ac:	4602      	mov	r2, r0
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	091b      	lsrs	r3, r3, #4
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	4904      	ldr	r1, [pc, #16]	; (80057cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80057ba:	5ccb      	ldrb	r3, [r1, r3]
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	58024400 	.word	0x58024400
 80057cc:	0800ee10 	.word	0x0800ee10

080057d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b089      	sub	sp, #36	; 0x24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057d8:	4ba1      	ldr	r3, [pc, #644]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80057e2:	4b9f      	ldr	r3, [pc, #636]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	0b1b      	lsrs	r3, r3, #12
 80057e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80057ee:	4b9c      	ldr	r3, [pc, #624]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80057fa:	4b99      	ldr	r3, [pc, #612]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	08db      	lsrs	r3, r3, #3
 8005800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005812:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8111 	beq.w	8005a40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b02      	cmp	r3, #2
 8005822:	f000 8083 	beq.w	800592c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b02      	cmp	r3, #2
 800582a:	f200 80a1 	bhi.w	8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d056      	beq.n	80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800583a:	e099      	b.n	8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800583c:	4b88      	ldr	r3, [pc, #544]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d02d      	beq.n	80058a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005848:	4b85      	ldr	r3, [pc, #532]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	08db      	lsrs	r3, r3, #3
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	4a84      	ldr	r2, [pc, #528]	; (8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
 8005858:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	ee07 3a90 	vmov	s15, r3
 8005860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005872:	4b7b      	ldr	r3, [pc, #492]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005882:	ed97 6a03 	vldr	s12, [r7, #12]
 8005886:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800588a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800588e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80058a2:	e087      	b.n	80059b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b6:	4b6a      	ldr	r3, [pc, #424]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058e6:	e065      	b.n	80059b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fa:	4b59      	ldr	r3, [pc, #356]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590a:	ed97 6a03 	vldr	s12, [r7, #12]
 800590e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005926:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800592a:	e043      	b.n	80059b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800593a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593e:	4b48      	ldr	r3, [pc, #288]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005952:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800596e:	e021      	b.n	80059b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800597e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005982:	4b37      	ldr	r3, [pc, #220]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005992:	ed97 6a03 	vldr	s12, [r7, #12]
 8005996:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800599a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80059b4:	4b2a      	ldr	r3, [pc, #168]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	0a5b      	lsrs	r3, r3, #9
 80059ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80059d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059da:	ee17 2a90 	vmov	r2, s15
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80059e2:	4b1f      	ldr	r3, [pc, #124]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	0c1b      	lsrs	r3, r3, #16
 80059e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a08:	ee17 2a90 	vmov	r2, s15
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005a10:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	0e1b      	lsrs	r3, r3, #24
 8005a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a36:	ee17 2a90 	vmov	r2, s15
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a3e:	e008      	b.n	8005a52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	609a      	str	r2, [r3, #8]
}
 8005a52:	bf00      	nop
 8005a54:	3724      	adds	r7, #36	; 0x24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	58024400 	.word	0x58024400
 8005a64:	03d09000 	.word	0x03d09000
 8005a68:	46000000 	.word	0x46000000
 8005a6c:	4c742400 	.word	0x4c742400
 8005a70:	4a742400 	.word	0x4a742400
 8005a74:	4bbebc20 	.word	0x4bbebc20

08005a78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	; 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a80:	4ba1      	ldr	r3, [pc, #644]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005a8a:	4b9f      	ldr	r3, [pc, #636]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	0d1b      	lsrs	r3, r3, #20
 8005a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005a96:	4b9c      	ldr	r3, [pc, #624]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	0a1b      	lsrs	r3, r3, #8
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005aa2:	4b99      	ldr	r3, [pc, #612]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa6:	08db      	lsrs	r3, r3, #3
 8005aa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	fb02 f303 	mul.w	r3, r2, r3
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8111 	beq.w	8005ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	f000 8083 	beq.w	8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	f200 80a1 	bhi.w	8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d056      	beq.n	8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005ae2:	e099      	b.n	8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae4:	4b88      	ldr	r3, [pc, #544]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d02d      	beq.n	8005b4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005af0:	4b85      	ldr	r3, [pc, #532]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	08db      	lsrs	r3, r3, #3
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	4a84      	ldr	r2, [pc, #528]	; (8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
 8005b00:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	ee07 3a90 	vmov	s15, r3
 8005b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1a:	4b7b      	ldr	r3, [pc, #492]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b4a:	e087      	b.n	8005c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5e:	4b6a      	ldr	r3, [pc, #424]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b8e:	e065      	b.n	8005c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba2:	4b59      	ldr	r3, [pc, #356]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bd2:	e043      	b.n	8005c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be6:	4b48      	ldr	r3, [pc, #288]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c16:	e021      	b.n	8005c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2a:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005c5c:	4b2a      	ldr	r3, [pc, #168]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	0a5b      	lsrs	r3, r3, #9
 8005c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c82:	ee17 2a90 	vmov	r2, s15
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005c8a:	4b1f      	ldr	r3, [pc, #124]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	0c1b      	lsrs	r3, r3, #16
 8005c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb0:	ee17 2a90 	vmov	r2, s15
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005cb8:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	0e1b      	lsrs	r3, r3, #24
 8005cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cde:	ee17 2a90 	vmov	r2, s15
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ce6:	e008      	b.n	8005cfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	609a      	str	r2, [r3, #8]
}
 8005cfa:	bf00      	nop
 8005cfc:	3724      	adds	r7, #36	; 0x24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	58024400 	.word	0x58024400
 8005d0c:	03d09000 	.word	0x03d09000
 8005d10:	46000000 	.word	0x46000000
 8005d14:	4c742400 	.word	0x4c742400
 8005d18:	4a742400 	.word	0x4a742400
 8005d1c:	4bbebc20 	.word	0x4bbebc20

08005d20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d2e:	4b53      	ldr	r3, [pc, #332]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d101      	bne.n	8005d3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e099      	b.n	8005e72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005d3e:	4b4f      	ldr	r3, [pc, #316]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a4e      	ldr	r2, [pc, #312]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005d44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4a:	f7fa fc95 	bl	8000678 <HAL_GetTick>
 8005d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d50:	e008      	b.n	8005d64 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d52:	f7fa fc91 	bl	8000678 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e086      	b.n	8005e72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d64:	4b45      	ldr	r3, [pc, #276]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1f0      	bne.n	8005d52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005d70:	4b42      	ldr	r3, [pc, #264]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	493f      	ldr	r1, [pc, #252]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	628b      	str	r3, [r1, #40]	; 0x28
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	025b      	lsls	r3, r3, #9
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	041b      	lsls	r3, r3, #16
 8005da2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	061b      	lsls	r3, r3, #24
 8005db0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005db4:	4931      	ldr	r1, [pc, #196]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005dba:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	492d      	ldr	r1, [pc, #180]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005dcc:	4b2b      	ldr	r3, [pc, #172]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	f023 0220 	bic.w	r2, r3, #32
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	4928      	ldr	r1, [pc, #160]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005dde:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005de4:	f023 0310 	bic.w	r3, r3, #16
 8005de8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005dea:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <RCCEx_PLL2_Config+0x160>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	69d2      	ldr	r2, [r2, #28]
 8005df6:	00d2      	lsls	r2, r2, #3
 8005df8:	4920      	ldr	r1, [pc, #128]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	4a1e      	ldr	r2, [pc, #120]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e04:	f043 0310 	orr.w	r3, r3, #16
 8005e08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e10:	4b1a      	ldr	r3, [pc, #104]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e1c:	e00f      	b.n	8005e3e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d106      	bne.n	8005e32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e24:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	4a14      	ldr	r2, [pc, #80]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e30:	e005      	b.n	8005e3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a0e      	ldr	r2, [pc, #56]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4a:	f7fa fc15 	bl	8000678 <HAL_GetTick>
 8005e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e50:	e008      	b.n	8005e64 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e52:	f7fa fc11 	bl	8000678 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e006      	b.n	8005e72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <RCCEx_PLL2_Config+0x15c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f0      	beq.n	8005e52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	ffff0007 	.word	0xffff0007

08005e84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e92:	4b53      	ldr	r3, [pc, #332]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d101      	bne.n	8005ea2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e099      	b.n	8005fd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005ea2:	4b4f      	ldr	r3, [pc, #316]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a4e      	ldr	r2, [pc, #312]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eae:	f7fa fbe3 	bl	8000678 <HAL_GetTick>
 8005eb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005eb4:	e008      	b.n	8005ec8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005eb6:	f7fa fbdf 	bl	8000678 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e086      	b.n	8005fd6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ec8:	4b45      	ldr	r3, [pc, #276]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f0      	bne.n	8005eb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ed4:	4b42      	ldr	r3, [pc, #264]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	051b      	lsls	r3, r3, #20
 8005ee2:	493f      	ldr	r1, [pc, #252]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	025b      	lsls	r3, r3, #9
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	061b      	lsls	r3, r3, #24
 8005f14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f18:	4931      	ldr	r1, [pc, #196]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f1e:	4b30      	ldr	r3, [pc, #192]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	492d      	ldr	r1, [pc, #180]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f30:	4b2b      	ldr	r3, [pc, #172]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	4928      	ldr	r1, [pc, #160]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f42:	4b27      	ldr	r3, [pc, #156]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	4a26      	ldr	r2, [pc, #152]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f4e:	4b24      	ldr	r3, [pc, #144]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f52:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <RCCEx_PLL3_Config+0x160>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	69d2      	ldr	r2, [r2, #28]
 8005f5a:	00d2      	lsls	r2, r2, #3
 8005f5c:	4920      	ldr	r1, [pc, #128]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005f62:	4b1f      	ldr	r3, [pc, #124]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f80:	e00f      	b.n	8005fa2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d106      	bne.n	8005f96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005f88:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	4a14      	ldr	r2, [pc, #80]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f94:	e005      	b.n	8005fa2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005f96:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a0e      	ldr	r2, [pc, #56]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fae:	f7fa fb63 	bl	8000678 <HAL_GetTick>
 8005fb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005fb4:	e008      	b.n	8005fc8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005fb6:	f7fa fb5f 	bl	8000678 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e006      	b.n	8005fd6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <RCCEx_PLL3_Config+0x15c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0f0      	beq.n	8005fb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	ffff0007 	.word	0xffff0007

08005fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e049      	b.n	800608e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f007 ffde 	bl	800dfd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f000 fd72 	bl	8006b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d001      	beq.n	80060b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e054      	b.n	800615a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a26      	ldr	r2, [pc, #152]	; (8006168 <HAL_TIM_Base_Start_IT+0xd0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d022      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0x80>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d01d      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0x80>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a22      	ldr	r2, [pc, #136]	; (800616c <HAL_TIM_Base_Start_IT+0xd4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d018      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0x80>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <HAL_TIM_Base_Start_IT+0xd8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0x80>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <HAL_TIM_Base_Start_IT+0xdc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00e      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0x80>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1e      	ldr	r2, [pc, #120]	; (8006178 <HAL_TIM_Base_Start_IT+0xe0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d009      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0x80>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1c      	ldr	r2, [pc, #112]	; (800617c <HAL_TIM_Base_Start_IT+0xe4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0x80>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <HAL_TIM_Base_Start_IT+0xe8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d115      	bne.n	8006144 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	4b19      	ldr	r3, [pc, #100]	; (8006184 <HAL_TIM_Base_Start_IT+0xec>)
 8006120:	4013      	ands	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b06      	cmp	r3, #6
 8006128:	d015      	beq.n	8006156 <HAL_TIM_Base_Start_IT+0xbe>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006130:	d011      	beq.n	8006156 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0201 	orr.w	r2, r2, #1
 8006140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006142:	e008      	b.n	8006156 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	e000      	b.n	8006158 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40010000 	.word	0x40010000
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	40010400 	.word	0x40010400
 800617c:	40001800 	.word	0x40001800
 8006180:	40014000 	.word	0x40014000
 8006184:	00010007 	.word	0x00010007

08006188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e049      	b.n	800622e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f841 	bl	8006236 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f000 fca2 	bl	8006b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d109      	bne.n	8006270 <HAL_TIM_PWM_Start+0x24>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	bf14      	ite	ne
 8006268:	2301      	movne	r3, #1
 800626a:	2300      	moveq	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	e03c      	b.n	80062ea <HAL_TIM_PWM_Start+0x9e>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b04      	cmp	r3, #4
 8006274:	d109      	bne.n	800628a <HAL_TIM_PWM_Start+0x3e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b01      	cmp	r3, #1
 8006280:	bf14      	ite	ne
 8006282:	2301      	movne	r3, #1
 8006284:	2300      	moveq	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	e02f      	b.n	80062ea <HAL_TIM_PWM_Start+0x9e>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b08      	cmp	r3, #8
 800628e:	d109      	bne.n	80062a4 <HAL_TIM_PWM_Start+0x58>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	bf14      	ite	ne
 800629c:	2301      	movne	r3, #1
 800629e:	2300      	moveq	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	e022      	b.n	80062ea <HAL_TIM_PWM_Start+0x9e>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b0c      	cmp	r3, #12
 80062a8:	d109      	bne.n	80062be <HAL_TIM_PWM_Start+0x72>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	e015      	b.n	80062ea <HAL_TIM_PWM_Start+0x9e>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b10      	cmp	r3, #16
 80062c2:	d109      	bne.n	80062d8 <HAL_TIM_PWM_Start+0x8c>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	e008      	b.n	80062ea <HAL_TIM_PWM_Start+0x9e>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	bf14      	ite	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	2300      	moveq	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e0a1      	b.n	8006436 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_PWM_Start+0xb6>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006300:	e023      	b.n	800634a <HAL_TIM_PWM_Start+0xfe>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b04      	cmp	r3, #4
 8006306:	d104      	bne.n	8006312 <HAL_TIM_PWM_Start+0xc6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006310:	e01b      	b.n	800634a <HAL_TIM_PWM_Start+0xfe>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b08      	cmp	r3, #8
 8006316:	d104      	bne.n	8006322 <HAL_TIM_PWM_Start+0xd6>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006320:	e013      	b.n	800634a <HAL_TIM_PWM_Start+0xfe>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b0c      	cmp	r3, #12
 8006326:	d104      	bne.n	8006332 <HAL_TIM_PWM_Start+0xe6>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006330:	e00b      	b.n	800634a <HAL_TIM_PWM_Start+0xfe>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b10      	cmp	r3, #16
 8006336:	d104      	bne.n	8006342 <HAL_TIM_PWM_Start+0xf6>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006340:	e003      	b.n	800634a <HAL_TIM_PWM_Start+0xfe>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2202      	movs	r2, #2
 8006346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2201      	movs	r2, #1
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 ffea 	bl	800732c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a38      	ldr	r2, [pc, #224]	; (8006440 <HAL_TIM_PWM_Start+0x1f4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <HAL_TIM_PWM_Start+0x13e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a37      	ldr	r2, [pc, #220]	; (8006444 <HAL_TIM_PWM_Start+0x1f8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00e      	beq.n	800638a <HAL_TIM_PWM_Start+0x13e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a35      	ldr	r2, [pc, #212]	; (8006448 <HAL_TIM_PWM_Start+0x1fc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_TIM_PWM_Start+0x13e>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a34      	ldr	r2, [pc, #208]	; (800644c <HAL_TIM_PWM_Start+0x200>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d004      	beq.n	800638a <HAL_TIM_PWM_Start+0x13e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a32      	ldr	r2, [pc, #200]	; (8006450 <HAL_TIM_PWM_Start+0x204>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d101      	bne.n	800638e <HAL_TIM_PWM_Start+0x142>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <HAL_TIM_PWM_Start+0x144>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a25      	ldr	r2, [pc, #148]	; (8006440 <HAL_TIM_PWM_Start+0x1f4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d022      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b6:	d01d      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a25      	ldr	r2, [pc, #148]	; (8006454 <HAL_TIM_PWM_Start+0x208>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d018      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a24      	ldr	r2, [pc, #144]	; (8006458 <HAL_TIM_PWM_Start+0x20c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a22      	ldr	r2, [pc, #136]	; (800645c <HAL_TIM_PWM_Start+0x210>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1a      	ldr	r2, [pc, #104]	; (8006444 <HAL_TIM_PWM_Start+0x1f8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1e      	ldr	r2, [pc, #120]	; (8006460 <HAL_TIM_PWM_Start+0x214>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a16      	ldr	r2, [pc, #88]	; (8006448 <HAL_TIM_PWM_Start+0x1fc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d115      	bne.n	8006420 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <HAL_TIM_PWM_Start+0x218>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b06      	cmp	r3, #6
 8006404:	d015      	beq.n	8006432 <HAL_TIM_PWM_Start+0x1e6>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640c:	d011      	beq.n	8006432 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0201 	orr.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641e:	e008      	b.n	8006432 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	e000      	b.n	8006434 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006432:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40010000 	.word	0x40010000
 8006444:	40010400 	.word	0x40010400
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800
 8006454:	40000400 	.word	0x40000400
 8006458:	40000800 	.word	0x40000800
 800645c:	40000c00 	.word	0x40000c00
 8006460:	40001800 	.word	0x40001800
 8006464:	00010007 	.word	0x00010007

08006468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b02      	cmp	r3, #2
 800647c:	d122      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b02      	cmp	r3, #2
 800648a:	d11b      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0202 	mvn.w	r2, #2
 8006494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fb12 	bl	8006ad4 <HAL_TIM_IC_CaptureCallback>
 80064b0:	e005      	b.n	80064be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fb04 	bl	8006ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fb15 	bl	8006ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d122      	bne.n	8006518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d11b      	bne.n	8006518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0204 	mvn.w	r2, #4
 80064e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fae8 	bl	8006ad4 <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fada 	bl	8006ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 faeb 	bl	8006ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b08      	cmp	r3, #8
 8006524:	d122      	bne.n	800656c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d11b      	bne.n	800656c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0208 	mvn.w	r2, #8
 800653c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2204      	movs	r2, #4
 8006542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fabe 	bl	8006ad4 <HAL_TIM_IC_CaptureCallback>
 8006558:	e005      	b.n	8006566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fab0 	bl	8006ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fac1 	bl	8006ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0310 	and.w	r3, r3, #16
 8006576:	2b10      	cmp	r3, #16
 8006578:	d122      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b10      	cmp	r3, #16
 8006586:	d11b      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0210 	mvn.w	r2, #16
 8006590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2208      	movs	r2, #8
 8006596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa94 	bl	8006ad4 <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fa86 	bl	8006ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fa97 	bl	8006ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d10e      	bne.n	80065ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d107      	bne.n	80065ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0201 	mvn.w	r2, #1
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f006 fca8 	bl	800cf3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b80      	cmp	r3, #128	; 0x80
 80065f8:	d10e      	bne.n	8006618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d107      	bne.n	8006618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 ffc6 	bl	80075a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006626:	d10e      	bne.n	8006646 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006632:	2b80      	cmp	r3, #128	; 0x80
 8006634:	d107      	bne.n	8006646 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800663e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 ffb9 	bl	80075b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b40      	cmp	r3, #64	; 0x40
 8006652:	d10e      	bne.n	8006672 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d107      	bne.n	8006672 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800666a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fa45 	bl	8006afc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b20      	cmp	r3, #32
 800667e:	d10e      	bne.n	800669e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b20      	cmp	r3, #32
 800668c:	d107      	bne.n	800669e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f06f 0220 	mvn.w	r2, #32
 8006696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 ff79 	bl	8007590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e0ff      	b.n	80068c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b14      	cmp	r3, #20
 80066d2:	f200 80f0 	bhi.w	80068b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066d6:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066dc:	08006731 	.word	0x08006731
 80066e0:	080068b7 	.word	0x080068b7
 80066e4:	080068b7 	.word	0x080068b7
 80066e8:	080068b7 	.word	0x080068b7
 80066ec:	08006771 	.word	0x08006771
 80066f0:	080068b7 	.word	0x080068b7
 80066f4:	080068b7 	.word	0x080068b7
 80066f8:	080068b7 	.word	0x080068b7
 80066fc:	080067b3 	.word	0x080067b3
 8006700:	080068b7 	.word	0x080068b7
 8006704:	080068b7 	.word	0x080068b7
 8006708:	080068b7 	.word	0x080068b7
 800670c:	080067f3 	.word	0x080067f3
 8006710:	080068b7 	.word	0x080068b7
 8006714:	080068b7 	.word	0x080068b7
 8006718:	080068b7 	.word	0x080068b7
 800671c:	08006835 	.word	0x08006835
 8006720:	080068b7 	.word	0x080068b7
 8006724:	080068b7 	.word	0x080068b7
 8006728:	080068b7 	.word	0x080068b7
 800672c:	08006875 	.word	0x08006875
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fa84 	bl	8006c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0208 	orr.w	r2, r2, #8
 800674a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0204 	bic.w	r2, r2, #4
 800675a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6999      	ldr	r1, [r3, #24]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	619a      	str	r2, [r3, #24]
      break;
 800676e:	e0a5      	b.n	80068bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 faf4 	bl	8006d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800678a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800679a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6999      	ldr	r1, [r3, #24]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	021a      	lsls	r2, r3, #8
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	619a      	str	r2, [r3, #24]
      break;
 80067b0:	e084      	b.n	80068bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fb5d 	bl	8006e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f042 0208 	orr.w	r2, r2, #8
 80067cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0204 	bic.w	r2, r2, #4
 80067dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69d9      	ldr	r1, [r3, #28]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	691a      	ldr	r2, [r3, #16]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	61da      	str	r2, [r3, #28]
      break;
 80067f0:	e064      	b.n	80068bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fbc5 	bl	8006f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800680c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800681c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69d9      	ldr	r1, [r3, #28]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	021a      	lsls	r2, r3, #8
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	61da      	str	r2, [r3, #28]
      break;
 8006832:	e043      	b.n	80068bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fc0e 	bl	800705c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0208 	orr.w	r2, r2, #8
 800684e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0204 	bic.w	r2, r2, #4
 800685e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006872:	e023      	b.n	80068bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fc52 	bl	8007124 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800688e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	021a      	lsls	r2, r3, #8
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068b4:	e002      	b.n	80068bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	75fb      	strb	r3, [r7, #23]
      break;
 80068ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop

080068d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_TIM_ConfigClockSource+0x1c>
 80068e8:	2302      	movs	r3, #2
 80068ea:	e0dc      	b.n	8006aa6 <HAL_TIM_ConfigClockSource+0x1d6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	4b6a      	ldr	r3, [pc, #424]	; (8006ab0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006908:	4013      	ands	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a64      	ldr	r2, [pc, #400]	; (8006ab4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	f000 80a9 	beq.w	8006a7a <HAL_TIM_ConfigClockSource+0x1aa>
 8006928:	4a62      	ldr	r2, [pc, #392]	; (8006ab4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	f200 80ae 	bhi.w	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8006930:	4a61      	ldr	r2, [pc, #388]	; (8006ab8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	f000 80a1 	beq.w	8006a7a <HAL_TIM_ConfigClockSource+0x1aa>
 8006938:	4a5f      	ldr	r2, [pc, #380]	; (8006ab8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	f200 80a6 	bhi.w	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8006940:	4a5e      	ldr	r2, [pc, #376]	; (8006abc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006942:	4293      	cmp	r3, r2
 8006944:	f000 8099 	beq.w	8006a7a <HAL_TIM_ConfigClockSource+0x1aa>
 8006948:	4a5c      	ldr	r2, [pc, #368]	; (8006abc <HAL_TIM_ConfigClockSource+0x1ec>)
 800694a:	4293      	cmp	r3, r2
 800694c:	f200 809e 	bhi.w	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8006950:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006954:	f000 8091 	beq.w	8006a7a <HAL_TIM_ConfigClockSource+0x1aa>
 8006958:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800695c:	f200 8096 	bhi.w	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8006960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006964:	f000 8089 	beq.w	8006a7a <HAL_TIM_ConfigClockSource+0x1aa>
 8006968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800696c:	f200 808e 	bhi.w	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8006970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006974:	d03e      	beq.n	80069f4 <HAL_TIM_ConfigClockSource+0x124>
 8006976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697a:	f200 8087 	bhi.w	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006982:	f000 8086 	beq.w	8006a92 <HAL_TIM_ConfigClockSource+0x1c2>
 8006986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698a:	d87f      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 800698c:	2b70      	cmp	r3, #112	; 0x70
 800698e:	d01a      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0xf6>
 8006990:	2b70      	cmp	r3, #112	; 0x70
 8006992:	d87b      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8006994:	2b60      	cmp	r3, #96	; 0x60
 8006996:	d050      	beq.n	8006a3a <HAL_TIM_ConfigClockSource+0x16a>
 8006998:	2b60      	cmp	r3, #96	; 0x60
 800699a:	d877      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 800699c:	2b50      	cmp	r3, #80	; 0x50
 800699e:	d03c      	beq.n	8006a1a <HAL_TIM_ConfigClockSource+0x14a>
 80069a0:	2b50      	cmp	r3, #80	; 0x50
 80069a2:	d873      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d058      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0x18a>
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d86f      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d064      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x1aa>
 80069b0:	2b30      	cmp	r3, #48	; 0x30
 80069b2:	d86b      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d060      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x1aa>
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d867      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05c      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x1aa>
 80069c0:	2b10      	cmp	r3, #16
 80069c2:	d05a      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x1aa>
 80069c4:	e062      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6899      	ldr	r1, [r3, #8]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f000 fc89 	bl	80072ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	609a      	str	r2, [r3, #8]
      break;
 80069f2:	e04f      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	6899      	ldr	r1, [r3, #8]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f000 fc72 	bl	80072ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a16:	609a      	str	r2, [r3, #8]
      break;
 8006a18:	e03c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6859      	ldr	r1, [r3, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	461a      	mov	r2, r3
 8006a28:	f000 fbe2 	bl	80071f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2150      	movs	r1, #80	; 0x50
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fc3c 	bl	80072b0 <TIM_ITRx_SetConfig>
      break;
 8006a38:	e02c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6859      	ldr	r1, [r3, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f000 fc01 	bl	800724e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2160      	movs	r1, #96	; 0x60
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fc2c 	bl	80072b0 <TIM_ITRx_SetConfig>
      break;
 8006a58:	e01c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6859      	ldr	r1, [r3, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f000 fbc2 	bl	80071f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2140      	movs	r1, #64	; 0x40
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fc1c 	bl	80072b0 <TIM_ITRx_SetConfig>
      break;
 8006a78:	e00c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f000 fc13 	bl	80072b0 <TIM_ITRx_SetConfig>
      break;
 8006a8a:	e003      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a90:	e000      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	ffceff88 	.word	0xffceff88
 8006ab4:	00100040 	.word	0x00100040
 8006ab8:	00100030 	.word	0x00100030
 8006abc:	00100020 	.word	0x00100020

08006ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a40      	ldr	r2, [pc, #256]	; (8006c24 <TIM_Base_SetConfig+0x114>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d013      	beq.n	8006b50 <TIM_Base_SetConfig+0x40>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2e:	d00f      	beq.n	8006b50 <TIM_Base_SetConfig+0x40>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a3d      	ldr	r2, [pc, #244]	; (8006c28 <TIM_Base_SetConfig+0x118>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00b      	beq.n	8006b50 <TIM_Base_SetConfig+0x40>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a3c      	ldr	r2, [pc, #240]	; (8006c2c <TIM_Base_SetConfig+0x11c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d007      	beq.n	8006b50 <TIM_Base_SetConfig+0x40>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a3b      	ldr	r2, [pc, #236]	; (8006c30 <TIM_Base_SetConfig+0x120>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_Base_SetConfig+0x40>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a3a      	ldr	r2, [pc, #232]	; (8006c34 <TIM_Base_SetConfig+0x124>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d108      	bne.n	8006b62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a2f      	ldr	r2, [pc, #188]	; (8006c24 <TIM_Base_SetConfig+0x114>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01f      	beq.n	8006baa <TIM_Base_SetConfig+0x9a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b70:	d01b      	beq.n	8006baa <TIM_Base_SetConfig+0x9a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a2c      	ldr	r2, [pc, #176]	; (8006c28 <TIM_Base_SetConfig+0x118>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d017      	beq.n	8006baa <TIM_Base_SetConfig+0x9a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a2b      	ldr	r2, [pc, #172]	; (8006c2c <TIM_Base_SetConfig+0x11c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <TIM_Base_SetConfig+0x9a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a2a      	ldr	r2, [pc, #168]	; (8006c30 <TIM_Base_SetConfig+0x120>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00f      	beq.n	8006baa <TIM_Base_SetConfig+0x9a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a29      	ldr	r2, [pc, #164]	; (8006c34 <TIM_Base_SetConfig+0x124>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00b      	beq.n	8006baa <TIM_Base_SetConfig+0x9a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a28      	ldr	r2, [pc, #160]	; (8006c38 <TIM_Base_SetConfig+0x128>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <TIM_Base_SetConfig+0x9a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a27      	ldr	r2, [pc, #156]	; (8006c3c <TIM_Base_SetConfig+0x12c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_Base_SetConfig+0x9a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a26      	ldr	r2, [pc, #152]	; (8006c40 <TIM_Base_SetConfig+0x130>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d108      	bne.n	8006bbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a10      	ldr	r2, [pc, #64]	; (8006c24 <TIM_Base_SetConfig+0x114>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00f      	beq.n	8006c08 <TIM_Base_SetConfig+0xf8>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a12      	ldr	r2, [pc, #72]	; (8006c34 <TIM_Base_SetConfig+0x124>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00b      	beq.n	8006c08 <TIM_Base_SetConfig+0xf8>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a11      	ldr	r2, [pc, #68]	; (8006c38 <TIM_Base_SetConfig+0x128>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d007      	beq.n	8006c08 <TIM_Base_SetConfig+0xf8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a10      	ldr	r2, [pc, #64]	; (8006c3c <TIM_Base_SetConfig+0x12c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d003      	beq.n	8006c08 <TIM_Base_SetConfig+0xf8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a0f      	ldr	r2, [pc, #60]	; (8006c40 <TIM_Base_SetConfig+0x130>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d103      	bne.n	8006c10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	615a      	str	r2, [r3, #20]
}
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40010000 	.word	0x40010000
 8006c28:	40000400 	.word	0x40000400
 8006c2c:	40000800 	.word	0x40000800
 8006c30:	40000c00 	.word	0x40000c00
 8006c34:	40010400 	.word	0x40010400
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	40014400 	.word	0x40014400
 8006c40:	40014800 	.word	0x40014800

08006c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f023 0201 	bic.w	r2, r3, #1
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4b37      	ldr	r3, [pc, #220]	; (8006d4c <TIM_OC1_SetConfig+0x108>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0303 	bic.w	r3, r3, #3
 8006c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f023 0302 	bic.w	r3, r3, #2
 8006c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a2d      	ldr	r2, [pc, #180]	; (8006d50 <TIM_OC1_SetConfig+0x10c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00f      	beq.n	8006cc0 <TIM_OC1_SetConfig+0x7c>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a2c      	ldr	r2, [pc, #176]	; (8006d54 <TIM_OC1_SetConfig+0x110>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00b      	beq.n	8006cc0 <TIM_OC1_SetConfig+0x7c>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a2b      	ldr	r2, [pc, #172]	; (8006d58 <TIM_OC1_SetConfig+0x114>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d007      	beq.n	8006cc0 <TIM_OC1_SetConfig+0x7c>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a2a      	ldr	r2, [pc, #168]	; (8006d5c <TIM_OC1_SetConfig+0x118>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <TIM_OC1_SetConfig+0x7c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a29      	ldr	r2, [pc, #164]	; (8006d60 <TIM_OC1_SetConfig+0x11c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10c      	bne.n	8006cda <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f023 0308 	bic.w	r3, r3, #8
 8006cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f023 0304 	bic.w	r3, r3, #4
 8006cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a1c      	ldr	r2, [pc, #112]	; (8006d50 <TIM_OC1_SetConfig+0x10c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00f      	beq.n	8006d02 <TIM_OC1_SetConfig+0xbe>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a1b      	ldr	r2, [pc, #108]	; (8006d54 <TIM_OC1_SetConfig+0x110>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00b      	beq.n	8006d02 <TIM_OC1_SetConfig+0xbe>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a1a      	ldr	r2, [pc, #104]	; (8006d58 <TIM_OC1_SetConfig+0x114>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d007      	beq.n	8006d02 <TIM_OC1_SetConfig+0xbe>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <TIM_OC1_SetConfig+0x118>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d003      	beq.n	8006d02 <TIM_OC1_SetConfig+0xbe>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a18      	ldr	r2, [pc, #96]	; (8006d60 <TIM_OC1_SetConfig+0x11c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d111      	bne.n	8006d26 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	621a      	str	r2, [r3, #32]
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	fffeff8f 	.word	0xfffeff8f
 8006d50:	40010000 	.word	0x40010000
 8006d54:	40010400 	.word	0x40010400
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40014400 	.word	0x40014400
 8006d60:	40014800 	.word	0x40014800

08006d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f023 0210 	bic.w	r2, r3, #16
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4b34      	ldr	r3, [pc, #208]	; (8006e60 <TIM_OC2_SetConfig+0xfc>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	021b      	lsls	r3, r3, #8
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0320 	bic.w	r3, r3, #32
 8006dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	011b      	lsls	r3, r3, #4
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a29      	ldr	r2, [pc, #164]	; (8006e64 <TIM_OC2_SetConfig+0x100>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_OC2_SetConfig+0x68>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a28      	ldr	r2, [pc, #160]	; (8006e68 <TIM_OC2_SetConfig+0x104>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d10d      	bne.n	8006de8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a1e      	ldr	r2, [pc, #120]	; (8006e64 <TIM_OC2_SetConfig+0x100>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00f      	beq.n	8006e10 <TIM_OC2_SetConfig+0xac>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <TIM_OC2_SetConfig+0x104>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00b      	beq.n	8006e10 <TIM_OC2_SetConfig+0xac>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a1c      	ldr	r2, [pc, #112]	; (8006e6c <TIM_OC2_SetConfig+0x108>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d007      	beq.n	8006e10 <TIM_OC2_SetConfig+0xac>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a1b      	ldr	r2, [pc, #108]	; (8006e70 <TIM_OC2_SetConfig+0x10c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_OC2_SetConfig+0xac>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a1a      	ldr	r2, [pc, #104]	; (8006e74 <TIM_OC2_SetConfig+0x110>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d113      	bne.n	8006e38 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	feff8fff 	.word	0xfeff8fff
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40010400 	.word	0x40010400
 8006e6c:	40014000 	.word	0x40014000
 8006e70:	40014400 	.word	0x40014400
 8006e74:	40014800 	.word	0x40014800

08006e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4b33      	ldr	r3, [pc, #204]	; (8006f70 <TIM_OC3_SetConfig+0xf8>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	021b      	lsls	r3, r3, #8
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a28      	ldr	r2, [pc, #160]	; (8006f74 <TIM_OC3_SetConfig+0xfc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <TIM_OC3_SetConfig+0x66>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a27      	ldr	r2, [pc, #156]	; (8006f78 <TIM_OC3_SetConfig+0x100>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10d      	bne.n	8006efa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	021b      	lsls	r3, r3, #8
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <TIM_OC3_SetConfig+0xfc>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00f      	beq.n	8006f22 <TIM_OC3_SetConfig+0xaa>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a1c      	ldr	r2, [pc, #112]	; (8006f78 <TIM_OC3_SetConfig+0x100>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00b      	beq.n	8006f22 <TIM_OC3_SetConfig+0xaa>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a1b      	ldr	r2, [pc, #108]	; (8006f7c <TIM_OC3_SetConfig+0x104>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d007      	beq.n	8006f22 <TIM_OC3_SetConfig+0xaa>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a1a      	ldr	r2, [pc, #104]	; (8006f80 <TIM_OC3_SetConfig+0x108>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC3_SetConfig+0xaa>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a19      	ldr	r2, [pc, #100]	; (8006f84 <TIM_OC3_SetConfig+0x10c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d113      	bne.n	8006f4a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	621a      	str	r2, [r3, #32]
}
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	fffeff8f 	.word	0xfffeff8f
 8006f74:	40010000 	.word	0x40010000
 8006f78:	40010400 	.word	0x40010400
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40014400 	.word	0x40014400
 8006f84:	40014800 	.word	0x40014800

08006f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4b24      	ldr	r3, [pc, #144]	; (8007044 <TIM_OC4_SetConfig+0xbc>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	031b      	lsls	r3, r3, #12
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a19      	ldr	r2, [pc, #100]	; (8007048 <TIM_OC4_SetConfig+0xc0>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00f      	beq.n	8007008 <TIM_OC4_SetConfig+0x80>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a18      	ldr	r2, [pc, #96]	; (800704c <TIM_OC4_SetConfig+0xc4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00b      	beq.n	8007008 <TIM_OC4_SetConfig+0x80>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a17      	ldr	r2, [pc, #92]	; (8007050 <TIM_OC4_SetConfig+0xc8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d007      	beq.n	8007008 <TIM_OC4_SetConfig+0x80>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a16      	ldr	r2, [pc, #88]	; (8007054 <TIM_OC4_SetConfig+0xcc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC4_SetConfig+0x80>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a15      	ldr	r2, [pc, #84]	; (8007058 <TIM_OC4_SetConfig+0xd0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d109      	bne.n	800701c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	019b      	lsls	r3, r3, #6
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	feff8fff 	.word	0xfeff8fff
 8007048:	40010000 	.word	0x40010000
 800704c:	40010400 	.word	0x40010400
 8007050:	40014000 	.word	0x40014000
 8007054:	40014400 	.word	0x40014400
 8007058:	40014800 	.word	0x40014800

0800705c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4b21      	ldr	r3, [pc, #132]	; (800710c <TIM_OC5_SetConfig+0xb0>)
 8007088:	4013      	ands	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800709c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	041b      	lsls	r3, r3, #16
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a18      	ldr	r2, [pc, #96]	; (8007110 <TIM_OC5_SetConfig+0xb4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00f      	beq.n	80070d2 <TIM_OC5_SetConfig+0x76>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a17      	ldr	r2, [pc, #92]	; (8007114 <TIM_OC5_SetConfig+0xb8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00b      	beq.n	80070d2 <TIM_OC5_SetConfig+0x76>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a16      	ldr	r2, [pc, #88]	; (8007118 <TIM_OC5_SetConfig+0xbc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d007      	beq.n	80070d2 <TIM_OC5_SetConfig+0x76>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a15      	ldr	r2, [pc, #84]	; (800711c <TIM_OC5_SetConfig+0xc0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_OC5_SetConfig+0x76>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a14      	ldr	r2, [pc, #80]	; (8007120 <TIM_OC5_SetConfig+0xc4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d109      	bne.n	80070e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	621a      	str	r2, [r3, #32]
}
 8007100:	bf00      	nop
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	fffeff8f 	.word	0xfffeff8f
 8007110:	40010000 	.word	0x40010000
 8007114:	40010400 	.word	0x40010400
 8007118:	40014000 	.word	0x40014000
 800711c:	40014400 	.word	0x40014400
 8007120:	40014800 	.word	0x40014800

08007124 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4b22      	ldr	r3, [pc, #136]	; (80071d8 <TIM_OC6_SetConfig+0xb4>)
 8007150:	4013      	ands	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	051b      	lsls	r3, r3, #20
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	4313      	orrs	r3, r2
 8007172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a19      	ldr	r2, [pc, #100]	; (80071dc <TIM_OC6_SetConfig+0xb8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00f      	beq.n	800719c <TIM_OC6_SetConfig+0x78>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a18      	ldr	r2, [pc, #96]	; (80071e0 <TIM_OC6_SetConfig+0xbc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00b      	beq.n	800719c <TIM_OC6_SetConfig+0x78>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a17      	ldr	r2, [pc, #92]	; (80071e4 <TIM_OC6_SetConfig+0xc0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d007      	beq.n	800719c <TIM_OC6_SetConfig+0x78>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <TIM_OC6_SetConfig+0xc4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d003      	beq.n	800719c <TIM_OC6_SetConfig+0x78>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a15      	ldr	r2, [pc, #84]	; (80071ec <TIM_OC6_SetConfig+0xc8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d109      	bne.n	80071b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	029b      	lsls	r3, r3, #10
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	feff8fff 	.word	0xfeff8fff
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40010400 	.word	0x40010400
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800

080071f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f023 0201 	bic.w	r2, r3, #1
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800721a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f023 030a 	bic.w	r3, r3, #10
 800722c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	4313      	orrs	r3, r2
 8007234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800724e:	b480      	push	{r7}
 8007250:	b087      	sub	sp, #28
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f023 0210 	bic.w	r2, r3, #16
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800728a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
	...

080072b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <TIM_ITRx_SetConfig+0x38>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f043 0307 	orr.w	r3, r3, #7
 80072d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	609a      	str	r2, [r3, #8]
}
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	ffcfff8f 	.word	0xffcfff8f

080072ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	021a      	lsls	r2, r3, #8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	431a      	orrs	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4313      	orrs	r3, r2
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	609a      	str	r2, [r3, #8]
}
 8007320:	bf00      	nop
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f003 031f 	and.w	r3, r3, #31
 800733e:	2201      	movs	r2, #1
 8007340:	fa02 f303 	lsl.w	r3, r2, r3
 8007344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a1a      	ldr	r2, [r3, #32]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	43db      	mvns	r3, r3
 800734e:	401a      	ands	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a1a      	ldr	r2, [r3, #32]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	431a      	orrs	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	621a      	str	r2, [r3, #32]
}
 800736a:	bf00      	nop
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
	...

08007378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007388:	2b01      	cmp	r3, #1
 800738a:	d101      	bne.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800738c:	2302      	movs	r3, #2
 800738e:	e06d      	b.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a30      	ldr	r2, [pc, #192]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2f      	ldr	r2, [pc, #188]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d108      	bne.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a20      	ldr	r2, [pc, #128]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d022      	beq.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007402:	d01d      	beq.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1d      	ldr	r2, [pc, #116]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d018      	beq.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1c      	ldr	r2, [pc, #112]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d013      	beq.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a1a      	ldr	r2, [pc, #104]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00e      	beq.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a15      	ldr	r2, [pc, #84]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d009      	beq.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a16      	ldr	r2, [pc, #88]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d004      	beq.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a15      	ldr	r2, [pc, #84]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d10c      	bne.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007446:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	4313      	orrs	r3, r2
 8007450:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	40010000 	.word	0x40010000
 800747c:	40010400 	.word	0x40010400
 8007480:	40000400 	.word	0x40000400
 8007484:	40000800 	.word	0x40000800
 8007488:	40000c00 	.word	0x40000c00
 800748c:	40001800 	.word	0x40001800
 8007490:	40014000 	.word	0x40014000

08007494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e065      	b.n	800757c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	041b      	lsls	r3, r3, #16
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a16      	ldr	r2, [pc, #88]	; (8007588 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d004      	beq.n	800753e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a14      	ldr	r2, [pc, #80]	; (800758c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d115      	bne.n	800756a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	051b      	lsls	r3, r3, #20
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	4313      	orrs	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	40010000 	.word	0x40010000
 800758c:	40010400 	.word	0x40010400

08007590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e042      	b.n	8007664 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f007 f877 	bl	800e6e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2224      	movs	r2, #36	; 0x24
 80075fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0201 	bic.w	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fd84 	bl	800811c <UART_SetConfig>
 8007614:	4603      	mov	r3, r0
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e022      	b.n	8007664 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fad8 	bl	8008bdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800763a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800764a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 fb5f 	bl	8008d20 <UART_CheckIdleState>
 8007662:	4603      	mov	r3, r0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007680:	2b20      	cmp	r3, #32
 8007682:	d17a      	bne.n	800777a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <HAL_UART_Transmit_DMA+0x24>
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e073      	b.n	800777c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_UART_Transmit_DMA+0x36>
 800769e:	2302      	movs	r3, #2
 80076a0:	e06c      	b.n	800777c <HAL_UART_Transmit_DMA+0x110>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	88fa      	ldrh	r2, [r7, #6]
 80076b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	88fa      	ldrh	r2, [r7, #6]
 80076bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2221      	movs	r2, #33	; 0x21
 80076cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d02c      	beq.n	8007732 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076dc:	4a29      	ldr	r2, [pc, #164]	; (8007784 <HAL_UART_Transmit_DMA+0x118>)
 80076de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076e4:	4a28      	ldr	r2, [pc, #160]	; (8007788 <HAL_UART_Transmit_DMA+0x11c>)
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ec:	4a27      	ldr	r2, [pc, #156]	; (800778c <HAL_UART_Transmit_DMA+0x120>)
 80076ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f4:	2200      	movs	r2, #0
 80076f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	4619      	mov	r1, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3328      	adds	r3, #40	; 0x28
 8007708:	461a      	mov	r2, r3
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	f7f9 fc08 	bl	8000f20 <HAL_DMA_Start_IT>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2210      	movs	r2, #16
 800771a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2220      	movs	r2, #32
 800772a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e024      	b.n	800777c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2240      	movs	r2, #64	; 0x40
 8007738:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3308      	adds	r3, #8
 8007748:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	613b      	str	r3, [r7, #16]
   return(result);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007762:	623a      	str	r2, [r7, #32]
 8007764:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	69f9      	ldr	r1, [r7, #28]
 8007768:	6a3a      	ldr	r2, [r7, #32]
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e5      	bne.n	8007742 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	e000      	b.n	800777c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800777a:	2302      	movs	r3, #2
  }
}
 800777c:	4618      	mov	r0, r3
 800777e:	3728      	adds	r7, #40	; 0x28
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	080091e9 	.word	0x080091e9
 8007788:	0800927f 	.word	0x0800927f
 800778c:	080093f5 	.word	0x080093f5

08007790 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08a      	sub	sp, #40	; 0x28
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d142      	bne.n	800782e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_UART_Receive_DMA+0x24>
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e03b      	b.n	8007830 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_UART_Receive_DMA+0x36>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e034      	b.n	8007830 <HAL_UART_Receive_DMA+0xa0>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a17      	ldr	r2, [pc, #92]	; (8007838 <HAL_UART_Receive_DMA+0xa8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d01f      	beq.n	800781e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d018      	beq.n	800781e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	613b      	str	r3, [r7, #16]
   return(result);
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	623b      	str	r3, [r7, #32]
 800780c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	69f9      	ldr	r1, [r7, #28]
 8007810:	6a3a      	ldr	r2, [r7, #32]
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	61bb      	str	r3, [r7, #24]
   return(result);
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e6      	bne.n	80077ec <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	461a      	mov	r2, r3
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f001 fb8f 	bl	8008f48 <UART_Start_Receive_DMA>
 800782a:	4603      	mov	r3, r0
 800782c:	e000      	b.n	8007830 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800782e:	2302      	movs	r3, #2
  }
}
 8007830:	4618      	mov	r0, r3
 8007832:	3728      	adds	r7, #40	; 0x28
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	58000c00 	.word	0x58000c00

0800783c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b090      	sub	sp, #64	; 0x40
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007852:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785e:	2b80      	cmp	r3, #128	; 0x80
 8007860:	d139      	bne.n	80078d6 <HAL_UART_DMAStop+0x9a>
 8007862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007864:	2b21      	cmp	r3, #33	; 0x21
 8007866:	d136      	bne.n	80078d6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	61fb      	str	r3, [r7, #28]
   return(result);
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800787e:	637b      	str	r3, [r7, #52]	; 0x34
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3308      	adds	r3, #8
 8007886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007888:	62fa      	str	r2, [r7, #44]	; 0x2c
 800788a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800788e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e5      	bne.n	8007868 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d015      	beq.n	80078d0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7f9 fda3 	bl	80013f4 <HAL_DMA_Abort>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00d      	beq.n	80078d0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fb fa27 	bl	8002d0c <HAL_DMA_GetError>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d105      	bne.n	80078d0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2210      	movs	r2, #16
 80078c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e044      	b.n	800795a <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 fbe1 	bl	8009098 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	d139      	bne.n	8007958 <HAL_UART_DMAStop+0x11c>
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	2b22      	cmp	r3, #34	; 0x22
 80078e8:	d136      	bne.n	8007958 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007900:	633b      	str	r3, [r7, #48]	; 0x30
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3308      	adds	r3, #8
 8007908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800790a:	61ba      	str	r2, [r7, #24]
 800790c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6979      	ldr	r1, [r7, #20]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	613b      	str	r3, [r7, #16]
   return(result);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e5      	bne.n	80078ea <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007922:	2b00      	cmp	r3, #0
 8007924:	d015      	beq.n	8007952 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800792a:	4618      	mov	r0, r3
 800792c:	f7f9 fd62 	bl	80013f4 <HAL_DMA_Abort>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00d      	beq.n	8007952 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800793a:	4618      	mov	r0, r3
 800793c:	f7fb f9e6 	bl	8002d0c <HAL_DMA_GetError>
 8007940:	4603      	mov	r3, r0
 8007942:	2b20      	cmp	r3, #32
 8007944:	d105      	bne.n	8007952 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2210      	movs	r2, #16
 800794a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e003      	b.n	800795a <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 fbe2 	bl	800911c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3740      	adds	r7, #64	; 0x40
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b0ba      	sub	sp, #232	; 0xe8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800798a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800798e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007992:	4013      	ands	r3, r2
 8007994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800799c:	2b00      	cmp	r3, #0
 800799e:	d11b      	bne.n	80079d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d015      	beq.n	80079d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d105      	bne.n	80079c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d009      	beq.n	80079d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 835a 	beq.w	8008082 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
      }
      return;
 80079d6:	e354      	b.n	8008082 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 811f 	beq.w	8007c20 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80079e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80079e6:	4b8b      	ldr	r3, [pc, #556]	; (8007c14 <HAL_UART_IRQHandler+0x2b0>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80079ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079f2:	4b89      	ldr	r3, [pc, #548]	; (8007c18 <HAL_UART_IRQHandler+0x2b4>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 8112 	beq.w	8007c20 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d011      	beq.n	8007a2c <HAL_UART_IRQHandler+0xc8>
 8007a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a22:	f043 0201 	orr.w	r2, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d011      	beq.n	8007a5c <HAL_UART_IRQHandler+0xf8>
 8007a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a52:	f043 0204 	orr.w	r2, r3, #4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d011      	beq.n	8007a8c <HAL_UART_IRQHandler+0x128>
 8007a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2204      	movs	r2, #4
 8007a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a82:	f043 0202 	orr.w	r2, r3, #2
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d017      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d105      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007aa4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007aa8:	4b5a      	ldr	r3, [pc, #360]	; (8007c14 <HAL_UART_IRQHandler+0x2b0>)
 8007aaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2208      	movs	r2, #8
 8007ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007abe:	f043 0208 	orr.w	r2, r3, #8
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d012      	beq.n	8007afa <HAL_UART_IRQHandler+0x196>
 8007ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00c      	beq.n	8007afa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af0:	f043 0220 	orr.w	r2, r3, #32
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 82c0 	beq.w	8008086 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d013      	beq.n	8007b3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d105      	bne.n	8007b2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4e:	2b40      	cmp	r3, #64	; 0x40
 8007b50:	d005      	beq.n	8007b5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d04f      	beq.n	8007bfe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 fadc 	bl	800911c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6e:	2b40      	cmp	r3, #64	; 0x40
 8007b70:	d141      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3308      	adds	r3, #8
 8007b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1d9      	bne.n	8007b72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d013      	beq.n	8007bee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bca:	4a14      	ldr	r2, [pc, #80]	; (8007c1c <HAL_UART_IRQHandler+0x2b8>)
 8007bcc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7f9 ff2c 	bl	8001a30 <HAL_DMA_Abort_IT>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d017      	beq.n	8007c0e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bec:	e00f      	b.n	8007c0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fa7e 	bl	80080f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	e00b      	b.n	8007c0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fa7a 	bl	80080f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfc:	e007      	b.n	8007c0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa76 	bl	80080f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007c0c:	e23b      	b.n	8008086 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0e:	bf00      	nop
    return;
 8007c10:	e239      	b.n	8008086 <HAL_UART_IRQHandler+0x722>
 8007c12:	bf00      	nop
 8007c14:	10000001 	.word	0x10000001
 8007c18:	04000120 	.word	0x04000120
 8007c1c:	08009475 	.word	0x08009475

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	f040 81ce 	bne.w	8007fc6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 81c7 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3c:	f003 0310 	and.w	r3, r3, #16
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 81c0 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c58:	2b40      	cmp	r3, #64	; 0x40
 8007c5a:	f040 813b 	bne.w	8007ed4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a8b      	ldr	r2, [pc, #556]	; (8007e94 <HAL_UART_IRQHandler+0x530>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d059      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a89      	ldr	r2, [pc, #548]	; (8007e98 <HAL_UART_IRQHandler+0x534>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d053      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a87      	ldr	r2, [pc, #540]	; (8007e9c <HAL_UART_IRQHandler+0x538>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d04d      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a85      	ldr	r2, [pc, #532]	; (8007ea0 <HAL_UART_IRQHandler+0x53c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d047      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a83      	ldr	r2, [pc, #524]	; (8007ea4 <HAL_UART_IRQHandler+0x540>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d041      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a81      	ldr	r2, [pc, #516]	; (8007ea8 <HAL_UART_IRQHandler+0x544>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d03b      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a7f      	ldr	r2, [pc, #508]	; (8007eac <HAL_UART_IRQHandler+0x548>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d035      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a7d      	ldr	r2, [pc, #500]	; (8007eb0 <HAL_UART_IRQHandler+0x54c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d02f      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a7b      	ldr	r2, [pc, #492]	; (8007eb4 <HAL_UART_IRQHandler+0x550>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d029      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a79      	ldr	r2, [pc, #484]	; (8007eb8 <HAL_UART_IRQHandler+0x554>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d023      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a77      	ldr	r2, [pc, #476]	; (8007ebc <HAL_UART_IRQHandler+0x558>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d01d      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a75      	ldr	r2, [pc, #468]	; (8007ec0 <HAL_UART_IRQHandler+0x55c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d017      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a73      	ldr	r2, [pc, #460]	; (8007ec4 <HAL_UART_IRQHandler+0x560>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d011      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a71      	ldr	r2, [pc, #452]	; (8007ec8 <HAL_UART_IRQHandler+0x564>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d00b      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a6f      	ldr	r2, [pc, #444]	; (8007ecc <HAL_UART_IRQHandler+0x568>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d005      	beq.n	8007d1e <HAL_UART_IRQHandler+0x3ba>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a6d      	ldr	r2, [pc, #436]	; (8007ed0 <HAL_UART_IRQHandler+0x56c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d105      	bne.n	8007d2a <HAL_UART_IRQHandler+0x3c6>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	e004      	b.n	8007d34 <HAL_UART_IRQHandler+0x3d0>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 81a4 	beq.w	800808a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	f080 819c 	bcs.w	800808a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d66:	f000 8086 	beq.w	8007e76 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d98:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007da0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1da      	bne.n	8007d6a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3308      	adds	r3, #8
 8007dba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dbe:	e853 3f00 	ldrex	r3, [r3]
 8007dc2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dc6:	f023 0301 	bic.w	r3, r3, #1
 8007dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dd8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007de0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e1      	bne.n	8007db4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e3      	bne.n	8007df0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e58:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e5a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e4      	bne.n	8007e36 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7f9 fabf 	bl	80013f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f93a 	bl	8008104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e90:	e0fb      	b.n	800808a <HAL_UART_IRQHandler+0x726>
 8007e92:	bf00      	nop
 8007e94:	40020010 	.word	0x40020010
 8007e98:	40020028 	.word	0x40020028
 8007e9c:	40020040 	.word	0x40020040
 8007ea0:	40020058 	.word	0x40020058
 8007ea4:	40020070 	.word	0x40020070
 8007ea8:	40020088 	.word	0x40020088
 8007eac:	400200a0 	.word	0x400200a0
 8007eb0:	400200b8 	.word	0x400200b8
 8007eb4:	40020410 	.word	0x40020410
 8007eb8:	40020428 	.word	0x40020428
 8007ebc:	40020440 	.word	0x40020440
 8007ec0:	40020458 	.word	0x40020458
 8007ec4:	40020470 	.word	0x40020470
 8007ec8:	40020488 	.word	0x40020488
 8007ecc:	400204a0 	.word	0x400204a0
 8007ed0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 80cc 	beq.w	800808e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007ef6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80c7 	beq.w	800808e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f22:	647b      	str	r3, [r7, #68]	; 0x44
 8007f24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e4      	bne.n	8007f00 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	623b      	str	r3, [r7, #32]
   return(result);
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	4b54      	ldr	r3, [pc, #336]	; (800809c <HAL_UART_IRQHandler+0x738>)
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3308      	adds	r3, #8
 8007f56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f5a:	633a      	str	r2, [r7, #48]	; 0x30
 8007f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e3      	bne.n	8007f36 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0310 	bic.w	r3, r3, #16
 8007f96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	69b9      	ldr	r1, [r7, #24]
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e4      	bne.n	8007f82 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f8a0 	bl	8008104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fc4:	e063      	b.n	800808e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00e      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x68c>
 8007fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d008      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007fe6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 fa84 	bl	80094f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fee:	e051      	b.n	8008094 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d014      	beq.n	8008026 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008004:	2b00      	cmp	r3, #0
 8008006:	d105      	bne.n	8008014 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800800c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008018:	2b00      	cmp	r3, #0
 800801a:	d03a      	beq.n	8008092 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	4798      	blx	r3
    }
    return;
 8008024:	e035      	b.n	8008092 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <HAL_UART_IRQHandler+0x6e2>
 8008032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 fa2e 	bl	80094a0 <UART_EndTransmit_IT>
    return;
 8008044:	e026      	b.n	8008094 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_UART_IRQHandler+0x702>
 8008052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008056:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f001 fa5d 	bl	800951e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008064:	e016      	b.n	8008094 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d010      	beq.n	8008094 <HAL_UART_IRQHandler+0x730>
 8008072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008076:	2b00      	cmp	r3, #0
 8008078:	da0c      	bge.n	8008094 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fa45 	bl	800950a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008080:	e008      	b.n	8008094 <HAL_UART_IRQHandler+0x730>
      return;
 8008082:	bf00      	nop
 8008084:	e006      	b.n	8008094 <HAL_UART_IRQHandler+0x730>
    return;
 8008086:	bf00      	nop
 8008088:	e004      	b.n	8008094 <HAL_UART_IRQHandler+0x730>
      return;
 800808a:	bf00      	nop
 800808c:	e002      	b.n	8008094 <HAL_UART_IRQHandler+0x730>
      return;
 800808e:	bf00      	nop
 8008090:	e000      	b.n	8008094 <HAL_UART_IRQHandler+0x730>
    return;
 8008092:	bf00      	nop
  }
}
 8008094:	37e8      	adds	r7, #232	; 0xe8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	effffffe 	.word	0xeffffffe

080080a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800811c:	b5b0      	push	{r4, r5, r7, lr}
 800811e:	b08e      	sub	sp, #56	; 0x38
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	431a      	orrs	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	4313      	orrs	r3, r2
 8008140:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	4bbf      	ldr	r3, [pc, #764]	; (8008448 <UART_SetConfig+0x32c>)
 800814a:	4013      	ands	r3, r2
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6812      	ldr	r2, [r2, #0]
 8008150:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008152:	430b      	orrs	r3, r1
 8008154:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4ab5      	ldr	r2, [pc, #724]	; (800844c <UART_SetConfig+0x330>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d004      	beq.n	8008186 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008182:	4313      	orrs	r3, r2
 8008184:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	4bb0      	ldr	r3, [pc, #704]	; (8008450 <UART_SetConfig+0x334>)
 800818e:	4013      	ands	r3, r2
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6812      	ldr	r2, [r2, #0]
 8008194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008196:	430b      	orrs	r3, r1
 8008198:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	f023 010f 	bic.w	r1, r3, #15
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4aa7      	ldr	r2, [pc, #668]	; (8008454 <UART_SetConfig+0x338>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d176      	bne.n	80082a8 <UART_SetConfig+0x18c>
 80081ba:	4ba7      	ldr	r3, [pc, #668]	; (8008458 <UART_SetConfig+0x33c>)
 80081bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081c2:	2b28      	cmp	r3, #40	; 0x28
 80081c4:	d86c      	bhi.n	80082a0 <UART_SetConfig+0x184>
 80081c6:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <UART_SetConfig+0xb0>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	08008271 	.word	0x08008271
 80081d0:	080082a1 	.word	0x080082a1
 80081d4:	080082a1 	.word	0x080082a1
 80081d8:	080082a1 	.word	0x080082a1
 80081dc:	080082a1 	.word	0x080082a1
 80081e0:	080082a1 	.word	0x080082a1
 80081e4:	080082a1 	.word	0x080082a1
 80081e8:	080082a1 	.word	0x080082a1
 80081ec:	08008279 	.word	0x08008279
 80081f0:	080082a1 	.word	0x080082a1
 80081f4:	080082a1 	.word	0x080082a1
 80081f8:	080082a1 	.word	0x080082a1
 80081fc:	080082a1 	.word	0x080082a1
 8008200:	080082a1 	.word	0x080082a1
 8008204:	080082a1 	.word	0x080082a1
 8008208:	080082a1 	.word	0x080082a1
 800820c:	08008281 	.word	0x08008281
 8008210:	080082a1 	.word	0x080082a1
 8008214:	080082a1 	.word	0x080082a1
 8008218:	080082a1 	.word	0x080082a1
 800821c:	080082a1 	.word	0x080082a1
 8008220:	080082a1 	.word	0x080082a1
 8008224:	080082a1 	.word	0x080082a1
 8008228:	080082a1 	.word	0x080082a1
 800822c:	08008289 	.word	0x08008289
 8008230:	080082a1 	.word	0x080082a1
 8008234:	080082a1 	.word	0x080082a1
 8008238:	080082a1 	.word	0x080082a1
 800823c:	080082a1 	.word	0x080082a1
 8008240:	080082a1 	.word	0x080082a1
 8008244:	080082a1 	.word	0x080082a1
 8008248:	080082a1 	.word	0x080082a1
 800824c:	08008291 	.word	0x08008291
 8008250:	080082a1 	.word	0x080082a1
 8008254:	080082a1 	.word	0x080082a1
 8008258:	080082a1 	.word	0x080082a1
 800825c:	080082a1 	.word	0x080082a1
 8008260:	080082a1 	.word	0x080082a1
 8008264:	080082a1 	.word	0x080082a1
 8008268:	080082a1 	.word	0x080082a1
 800826c:	08008299 	.word	0x08008299
 8008270:	2301      	movs	r3, #1
 8008272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008276:	e222      	b.n	80086be <UART_SetConfig+0x5a2>
 8008278:	2304      	movs	r3, #4
 800827a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800827e:	e21e      	b.n	80086be <UART_SetConfig+0x5a2>
 8008280:	2308      	movs	r3, #8
 8008282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008286:	e21a      	b.n	80086be <UART_SetConfig+0x5a2>
 8008288:	2310      	movs	r3, #16
 800828a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800828e:	e216      	b.n	80086be <UART_SetConfig+0x5a2>
 8008290:	2320      	movs	r3, #32
 8008292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008296:	e212      	b.n	80086be <UART_SetConfig+0x5a2>
 8008298:	2340      	movs	r3, #64	; 0x40
 800829a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800829e:	e20e      	b.n	80086be <UART_SetConfig+0x5a2>
 80082a0:	2380      	movs	r3, #128	; 0x80
 80082a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082a6:	e20a      	b.n	80086be <UART_SetConfig+0x5a2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a6b      	ldr	r2, [pc, #428]	; (800845c <UART_SetConfig+0x340>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d130      	bne.n	8008314 <UART_SetConfig+0x1f8>
 80082b2:	4b69      	ldr	r3, [pc, #420]	; (8008458 <UART_SetConfig+0x33c>)
 80082b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	2b05      	cmp	r3, #5
 80082bc:	d826      	bhi.n	800830c <UART_SetConfig+0x1f0>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <UART_SetConfig+0x1a8>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082dd 	.word	0x080082dd
 80082c8:	080082e5 	.word	0x080082e5
 80082cc:	080082ed 	.word	0x080082ed
 80082d0:	080082f5 	.word	0x080082f5
 80082d4:	080082fd 	.word	0x080082fd
 80082d8:	08008305 	.word	0x08008305
 80082dc:	2300      	movs	r3, #0
 80082de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082e2:	e1ec      	b.n	80086be <UART_SetConfig+0x5a2>
 80082e4:	2304      	movs	r3, #4
 80082e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ea:	e1e8      	b.n	80086be <UART_SetConfig+0x5a2>
 80082ec:	2308      	movs	r3, #8
 80082ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082f2:	e1e4      	b.n	80086be <UART_SetConfig+0x5a2>
 80082f4:	2310      	movs	r3, #16
 80082f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082fa:	e1e0      	b.n	80086be <UART_SetConfig+0x5a2>
 80082fc:	2320      	movs	r3, #32
 80082fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008302:	e1dc      	b.n	80086be <UART_SetConfig+0x5a2>
 8008304:	2340      	movs	r3, #64	; 0x40
 8008306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800830a:	e1d8      	b.n	80086be <UART_SetConfig+0x5a2>
 800830c:	2380      	movs	r3, #128	; 0x80
 800830e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008312:	e1d4      	b.n	80086be <UART_SetConfig+0x5a2>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a51      	ldr	r2, [pc, #324]	; (8008460 <UART_SetConfig+0x344>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d130      	bne.n	8008380 <UART_SetConfig+0x264>
 800831e:	4b4e      	ldr	r3, [pc, #312]	; (8008458 <UART_SetConfig+0x33c>)
 8008320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	2b05      	cmp	r3, #5
 8008328:	d826      	bhi.n	8008378 <UART_SetConfig+0x25c>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <UART_SetConfig+0x214>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	08008349 	.word	0x08008349
 8008334:	08008351 	.word	0x08008351
 8008338:	08008359 	.word	0x08008359
 800833c:	08008361 	.word	0x08008361
 8008340:	08008369 	.word	0x08008369
 8008344:	08008371 	.word	0x08008371
 8008348:	2300      	movs	r3, #0
 800834a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800834e:	e1b6      	b.n	80086be <UART_SetConfig+0x5a2>
 8008350:	2304      	movs	r3, #4
 8008352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008356:	e1b2      	b.n	80086be <UART_SetConfig+0x5a2>
 8008358:	2308      	movs	r3, #8
 800835a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800835e:	e1ae      	b.n	80086be <UART_SetConfig+0x5a2>
 8008360:	2310      	movs	r3, #16
 8008362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008366:	e1aa      	b.n	80086be <UART_SetConfig+0x5a2>
 8008368:	2320      	movs	r3, #32
 800836a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800836e:	e1a6      	b.n	80086be <UART_SetConfig+0x5a2>
 8008370:	2340      	movs	r3, #64	; 0x40
 8008372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008376:	e1a2      	b.n	80086be <UART_SetConfig+0x5a2>
 8008378:	2380      	movs	r3, #128	; 0x80
 800837a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800837e:	e19e      	b.n	80086be <UART_SetConfig+0x5a2>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a37      	ldr	r2, [pc, #220]	; (8008464 <UART_SetConfig+0x348>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d130      	bne.n	80083ec <UART_SetConfig+0x2d0>
 800838a:	4b33      	ldr	r3, [pc, #204]	; (8008458 <UART_SetConfig+0x33c>)
 800838c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	2b05      	cmp	r3, #5
 8008394:	d826      	bhi.n	80083e4 <UART_SetConfig+0x2c8>
 8008396:	a201      	add	r2, pc, #4	; (adr r2, 800839c <UART_SetConfig+0x280>)
 8008398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839c:	080083b5 	.word	0x080083b5
 80083a0:	080083bd 	.word	0x080083bd
 80083a4:	080083c5 	.word	0x080083c5
 80083a8:	080083cd 	.word	0x080083cd
 80083ac:	080083d5 	.word	0x080083d5
 80083b0:	080083dd 	.word	0x080083dd
 80083b4:	2300      	movs	r3, #0
 80083b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ba:	e180      	b.n	80086be <UART_SetConfig+0x5a2>
 80083bc:	2304      	movs	r3, #4
 80083be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083c2:	e17c      	b.n	80086be <UART_SetConfig+0x5a2>
 80083c4:	2308      	movs	r3, #8
 80083c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ca:	e178      	b.n	80086be <UART_SetConfig+0x5a2>
 80083cc:	2310      	movs	r3, #16
 80083ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083d2:	e174      	b.n	80086be <UART_SetConfig+0x5a2>
 80083d4:	2320      	movs	r3, #32
 80083d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083da:	e170      	b.n	80086be <UART_SetConfig+0x5a2>
 80083dc:	2340      	movs	r3, #64	; 0x40
 80083de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083e2:	e16c      	b.n	80086be <UART_SetConfig+0x5a2>
 80083e4:	2380      	movs	r3, #128	; 0x80
 80083e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ea:	e168      	b.n	80086be <UART_SetConfig+0x5a2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a1d      	ldr	r2, [pc, #116]	; (8008468 <UART_SetConfig+0x34c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d142      	bne.n	800847c <UART_SetConfig+0x360>
 80083f6:	4b18      	ldr	r3, [pc, #96]	; (8008458 <UART_SetConfig+0x33c>)
 80083f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fa:	f003 0307 	and.w	r3, r3, #7
 80083fe:	2b05      	cmp	r3, #5
 8008400:	d838      	bhi.n	8008474 <UART_SetConfig+0x358>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <UART_SetConfig+0x2ec>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	08008421 	.word	0x08008421
 800840c:	08008429 	.word	0x08008429
 8008410:	08008431 	.word	0x08008431
 8008414:	08008439 	.word	0x08008439
 8008418:	08008441 	.word	0x08008441
 800841c:	0800846d 	.word	0x0800846d
 8008420:	2300      	movs	r3, #0
 8008422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008426:	e14a      	b.n	80086be <UART_SetConfig+0x5a2>
 8008428:	2304      	movs	r3, #4
 800842a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800842e:	e146      	b.n	80086be <UART_SetConfig+0x5a2>
 8008430:	2308      	movs	r3, #8
 8008432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008436:	e142      	b.n	80086be <UART_SetConfig+0x5a2>
 8008438:	2310      	movs	r3, #16
 800843a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800843e:	e13e      	b.n	80086be <UART_SetConfig+0x5a2>
 8008440:	2320      	movs	r3, #32
 8008442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008446:	e13a      	b.n	80086be <UART_SetConfig+0x5a2>
 8008448:	cfff69f3 	.word	0xcfff69f3
 800844c:	58000c00 	.word	0x58000c00
 8008450:	11fff4ff 	.word	0x11fff4ff
 8008454:	40011000 	.word	0x40011000
 8008458:	58024400 	.word	0x58024400
 800845c:	40004400 	.word	0x40004400
 8008460:	40004800 	.word	0x40004800
 8008464:	40004c00 	.word	0x40004c00
 8008468:	40005000 	.word	0x40005000
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008472:	e124      	b.n	80086be <UART_SetConfig+0x5a2>
 8008474:	2380      	movs	r3, #128	; 0x80
 8008476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800847a:	e120      	b.n	80086be <UART_SetConfig+0x5a2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4acc      	ldr	r2, [pc, #816]	; (80087b4 <UART_SetConfig+0x698>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d176      	bne.n	8008574 <UART_SetConfig+0x458>
 8008486:	4bcc      	ldr	r3, [pc, #816]	; (80087b8 <UART_SetConfig+0x69c>)
 8008488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800848e:	2b28      	cmp	r3, #40	; 0x28
 8008490:	d86c      	bhi.n	800856c <UART_SetConfig+0x450>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <UART_SetConfig+0x37c>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	0800853d 	.word	0x0800853d
 800849c:	0800856d 	.word	0x0800856d
 80084a0:	0800856d 	.word	0x0800856d
 80084a4:	0800856d 	.word	0x0800856d
 80084a8:	0800856d 	.word	0x0800856d
 80084ac:	0800856d 	.word	0x0800856d
 80084b0:	0800856d 	.word	0x0800856d
 80084b4:	0800856d 	.word	0x0800856d
 80084b8:	08008545 	.word	0x08008545
 80084bc:	0800856d 	.word	0x0800856d
 80084c0:	0800856d 	.word	0x0800856d
 80084c4:	0800856d 	.word	0x0800856d
 80084c8:	0800856d 	.word	0x0800856d
 80084cc:	0800856d 	.word	0x0800856d
 80084d0:	0800856d 	.word	0x0800856d
 80084d4:	0800856d 	.word	0x0800856d
 80084d8:	0800854d 	.word	0x0800854d
 80084dc:	0800856d 	.word	0x0800856d
 80084e0:	0800856d 	.word	0x0800856d
 80084e4:	0800856d 	.word	0x0800856d
 80084e8:	0800856d 	.word	0x0800856d
 80084ec:	0800856d 	.word	0x0800856d
 80084f0:	0800856d 	.word	0x0800856d
 80084f4:	0800856d 	.word	0x0800856d
 80084f8:	08008555 	.word	0x08008555
 80084fc:	0800856d 	.word	0x0800856d
 8008500:	0800856d 	.word	0x0800856d
 8008504:	0800856d 	.word	0x0800856d
 8008508:	0800856d 	.word	0x0800856d
 800850c:	0800856d 	.word	0x0800856d
 8008510:	0800856d 	.word	0x0800856d
 8008514:	0800856d 	.word	0x0800856d
 8008518:	0800855d 	.word	0x0800855d
 800851c:	0800856d 	.word	0x0800856d
 8008520:	0800856d 	.word	0x0800856d
 8008524:	0800856d 	.word	0x0800856d
 8008528:	0800856d 	.word	0x0800856d
 800852c:	0800856d 	.word	0x0800856d
 8008530:	0800856d 	.word	0x0800856d
 8008534:	0800856d 	.word	0x0800856d
 8008538:	08008565 	.word	0x08008565
 800853c:	2301      	movs	r3, #1
 800853e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008542:	e0bc      	b.n	80086be <UART_SetConfig+0x5a2>
 8008544:	2304      	movs	r3, #4
 8008546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800854a:	e0b8      	b.n	80086be <UART_SetConfig+0x5a2>
 800854c:	2308      	movs	r3, #8
 800854e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008552:	e0b4      	b.n	80086be <UART_SetConfig+0x5a2>
 8008554:	2310      	movs	r3, #16
 8008556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800855a:	e0b0      	b.n	80086be <UART_SetConfig+0x5a2>
 800855c:	2320      	movs	r3, #32
 800855e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008562:	e0ac      	b.n	80086be <UART_SetConfig+0x5a2>
 8008564:	2340      	movs	r3, #64	; 0x40
 8008566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800856a:	e0a8      	b.n	80086be <UART_SetConfig+0x5a2>
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008572:	e0a4      	b.n	80086be <UART_SetConfig+0x5a2>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a90      	ldr	r2, [pc, #576]	; (80087bc <UART_SetConfig+0x6a0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d130      	bne.n	80085e0 <UART_SetConfig+0x4c4>
 800857e:	4b8e      	ldr	r3, [pc, #568]	; (80087b8 <UART_SetConfig+0x69c>)
 8008580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	2b05      	cmp	r3, #5
 8008588:	d826      	bhi.n	80085d8 <UART_SetConfig+0x4bc>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <UART_SetConfig+0x474>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085a9 	.word	0x080085a9
 8008594:	080085b1 	.word	0x080085b1
 8008598:	080085b9 	.word	0x080085b9
 800859c:	080085c1 	.word	0x080085c1
 80085a0:	080085c9 	.word	0x080085c9
 80085a4:	080085d1 	.word	0x080085d1
 80085a8:	2300      	movs	r3, #0
 80085aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ae:	e086      	b.n	80086be <UART_SetConfig+0x5a2>
 80085b0:	2304      	movs	r3, #4
 80085b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085b6:	e082      	b.n	80086be <UART_SetConfig+0x5a2>
 80085b8:	2308      	movs	r3, #8
 80085ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085be:	e07e      	b.n	80086be <UART_SetConfig+0x5a2>
 80085c0:	2310      	movs	r3, #16
 80085c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085c6:	e07a      	b.n	80086be <UART_SetConfig+0x5a2>
 80085c8:	2320      	movs	r3, #32
 80085ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ce:	e076      	b.n	80086be <UART_SetConfig+0x5a2>
 80085d0:	2340      	movs	r3, #64	; 0x40
 80085d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085d6:	e072      	b.n	80086be <UART_SetConfig+0x5a2>
 80085d8:	2380      	movs	r3, #128	; 0x80
 80085da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085de:	e06e      	b.n	80086be <UART_SetConfig+0x5a2>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a76      	ldr	r2, [pc, #472]	; (80087c0 <UART_SetConfig+0x6a4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d130      	bne.n	800864c <UART_SetConfig+0x530>
 80085ea:	4b73      	ldr	r3, [pc, #460]	; (80087b8 <UART_SetConfig+0x69c>)
 80085ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	2b05      	cmp	r3, #5
 80085f4:	d826      	bhi.n	8008644 <UART_SetConfig+0x528>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0x4e0>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008615 	.word	0x08008615
 8008600:	0800861d 	.word	0x0800861d
 8008604:	08008625 	.word	0x08008625
 8008608:	0800862d 	.word	0x0800862d
 800860c:	08008635 	.word	0x08008635
 8008610:	0800863d 	.word	0x0800863d
 8008614:	2300      	movs	r3, #0
 8008616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800861a:	e050      	b.n	80086be <UART_SetConfig+0x5a2>
 800861c:	2304      	movs	r3, #4
 800861e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008622:	e04c      	b.n	80086be <UART_SetConfig+0x5a2>
 8008624:	2308      	movs	r3, #8
 8008626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800862a:	e048      	b.n	80086be <UART_SetConfig+0x5a2>
 800862c:	2310      	movs	r3, #16
 800862e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008632:	e044      	b.n	80086be <UART_SetConfig+0x5a2>
 8008634:	2320      	movs	r3, #32
 8008636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800863a:	e040      	b.n	80086be <UART_SetConfig+0x5a2>
 800863c:	2340      	movs	r3, #64	; 0x40
 800863e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008642:	e03c      	b.n	80086be <UART_SetConfig+0x5a2>
 8008644:	2380      	movs	r3, #128	; 0x80
 8008646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800864a:	e038      	b.n	80086be <UART_SetConfig+0x5a2>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a5c      	ldr	r2, [pc, #368]	; (80087c4 <UART_SetConfig+0x6a8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d130      	bne.n	80086b8 <UART_SetConfig+0x59c>
 8008656:	4b58      	ldr	r3, [pc, #352]	; (80087b8 <UART_SetConfig+0x69c>)
 8008658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865a:	f003 0307 	and.w	r3, r3, #7
 800865e:	2b05      	cmp	r3, #5
 8008660:	d826      	bhi.n	80086b0 <UART_SetConfig+0x594>
 8008662:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <UART_SetConfig+0x54c>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	08008681 	.word	0x08008681
 800866c:	08008689 	.word	0x08008689
 8008670:	08008691 	.word	0x08008691
 8008674:	08008699 	.word	0x08008699
 8008678:	080086a1 	.word	0x080086a1
 800867c:	080086a9 	.word	0x080086a9
 8008680:	2302      	movs	r3, #2
 8008682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008686:	e01a      	b.n	80086be <UART_SetConfig+0x5a2>
 8008688:	2304      	movs	r3, #4
 800868a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800868e:	e016      	b.n	80086be <UART_SetConfig+0x5a2>
 8008690:	2308      	movs	r3, #8
 8008692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008696:	e012      	b.n	80086be <UART_SetConfig+0x5a2>
 8008698:	2310      	movs	r3, #16
 800869a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800869e:	e00e      	b.n	80086be <UART_SetConfig+0x5a2>
 80086a0:	2320      	movs	r3, #32
 80086a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086a6:	e00a      	b.n	80086be <UART_SetConfig+0x5a2>
 80086a8:	2340      	movs	r3, #64	; 0x40
 80086aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ae:	e006      	b.n	80086be <UART_SetConfig+0x5a2>
 80086b0:	2380      	movs	r3, #128	; 0x80
 80086b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086b6:	e002      	b.n	80086be <UART_SetConfig+0x5a2>
 80086b8:	2380      	movs	r3, #128	; 0x80
 80086ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a40      	ldr	r2, [pc, #256]	; (80087c4 <UART_SetConfig+0x6a8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	f040 80ef 	bne.w	80088a8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086ce:	2b20      	cmp	r3, #32
 80086d0:	dc46      	bgt.n	8008760 <UART_SetConfig+0x644>
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	f2c0 8081 	blt.w	80087da <UART_SetConfig+0x6be>
 80086d8:	3b02      	subs	r3, #2
 80086da:	2b1e      	cmp	r3, #30
 80086dc:	d87d      	bhi.n	80087da <UART_SetConfig+0x6be>
 80086de:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <UART_SetConfig+0x5c8>)
 80086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e4:	08008767 	.word	0x08008767
 80086e8:	080087db 	.word	0x080087db
 80086ec:	0800876f 	.word	0x0800876f
 80086f0:	080087db 	.word	0x080087db
 80086f4:	080087db 	.word	0x080087db
 80086f8:	080087db 	.word	0x080087db
 80086fc:	0800877f 	.word	0x0800877f
 8008700:	080087db 	.word	0x080087db
 8008704:	080087db 	.word	0x080087db
 8008708:	080087db 	.word	0x080087db
 800870c:	080087db 	.word	0x080087db
 8008710:	080087db 	.word	0x080087db
 8008714:	080087db 	.word	0x080087db
 8008718:	080087db 	.word	0x080087db
 800871c:	0800878f 	.word	0x0800878f
 8008720:	080087db 	.word	0x080087db
 8008724:	080087db 	.word	0x080087db
 8008728:	080087db 	.word	0x080087db
 800872c:	080087db 	.word	0x080087db
 8008730:	080087db 	.word	0x080087db
 8008734:	080087db 	.word	0x080087db
 8008738:	080087db 	.word	0x080087db
 800873c:	080087db 	.word	0x080087db
 8008740:	080087db 	.word	0x080087db
 8008744:	080087db 	.word	0x080087db
 8008748:	080087db 	.word	0x080087db
 800874c:	080087db 	.word	0x080087db
 8008750:	080087db 	.word	0x080087db
 8008754:	080087db 	.word	0x080087db
 8008758:	080087db 	.word	0x080087db
 800875c:	080087cd 	.word	0x080087cd
 8008760:	2b40      	cmp	r3, #64	; 0x40
 8008762:	d036      	beq.n	80087d2 <UART_SetConfig+0x6b6>
 8008764:	e039      	b.n	80087da <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008766:	f7fd f81d 	bl	80057a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800876a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800876c:	e03b      	b.n	80087e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800876e:	f107 0314 	add.w	r3, r7, #20
 8008772:	4618      	mov	r0, r3
 8008774:	f7fd f82c 	bl	80057d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800877c:	e033      	b.n	80087e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800877e:	f107 0308 	add.w	r3, r7, #8
 8008782:	4618      	mov	r0, r3
 8008784:	f7fd f978 	bl	8005a78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800878c:	e02b      	b.n	80087e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800878e:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <UART_SetConfig+0x69c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800879a:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <UART_SetConfig+0x69c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	08db      	lsrs	r3, r3, #3
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <UART_SetConfig+0x6ac>)
 80087a6:	fa22 f303 	lsr.w	r3, r2, r3
 80087aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087ac:	e01b      	b.n	80087e6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80087ae:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <UART_SetConfig+0x6ac>)
 80087b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087b2:	e018      	b.n	80087e6 <UART_SetConfig+0x6ca>
 80087b4:	40011400 	.word	0x40011400
 80087b8:	58024400 	.word	0x58024400
 80087bc:	40007800 	.word	0x40007800
 80087c0:	40007c00 	.word	0x40007c00
 80087c4:	58000c00 	.word	0x58000c00
 80087c8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087cc:	4bc4      	ldr	r3, [pc, #784]	; (8008ae0 <UART_SetConfig+0x9c4>)
 80087ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087d0:	e009      	b.n	80087e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087d8:	e005      	b.n	80087e6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80087da:	2300      	movs	r3, #0
 80087dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80087e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 81da 	beq.w	8008ba2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f2:	4abc      	ldr	r2, [pc, #752]	; (8008ae4 <UART_SetConfig+0x9c8>)
 80087f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087f8:	461a      	mov	r2, r3
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008800:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4413      	add	r3, r2
 800880c:	6a3a      	ldr	r2, [r7, #32]
 800880e:	429a      	cmp	r2, r3
 8008810:	d305      	bcc.n	800881e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008818:	6a3a      	ldr	r2, [r7, #32]
 800881a:	429a      	cmp	r2, r3
 800881c:	d903      	bls.n	8008826 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008824:	e1bd      	b.n	8008ba2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008828:	4618      	mov	r0, r3
 800882a:	f04f 0100 	mov.w	r1, #0
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008832:	4aac      	ldr	r2, [pc, #688]	; (8008ae4 <UART_SetConfig+0x9c8>)
 8008834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008838:	b29a      	uxth	r2, r3
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	f7f7 fd4f 	bl	80002e0 <__aeabi_uldivmod>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4610      	mov	r0, r2
 8008848:	4619      	mov	r1, r3
 800884a:	f04f 0200 	mov.w	r2, #0
 800884e:	f04f 0300 	mov.w	r3, #0
 8008852:	020b      	lsls	r3, r1, #8
 8008854:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008858:	0202      	lsls	r2, r0, #8
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	6849      	ldr	r1, [r1, #4]
 800885e:	0849      	lsrs	r1, r1, #1
 8008860:	4608      	mov	r0, r1
 8008862:	f04f 0100 	mov.w	r1, #0
 8008866:	1814      	adds	r4, r2, r0
 8008868:	eb43 0501 	adc.w	r5, r3, r1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	461a      	mov	r2, r3
 8008872:	f04f 0300 	mov.w	r3, #0
 8008876:	4620      	mov	r0, r4
 8008878:	4629      	mov	r1, r5
 800887a:	f7f7 fd31 	bl	80002e0 <__aeabi_uldivmod>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4613      	mov	r3, r2
 8008884:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800888c:	d308      	bcc.n	80088a0 <UART_SetConfig+0x784>
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008894:	d204      	bcs.n	80088a0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800889c:	60da      	str	r2, [r3, #12]
 800889e:	e180      	b.n	8008ba2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80088a6:	e17c      	b.n	8008ba2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088b0:	f040 80be 	bne.w	8008a30 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 80088b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	dc49      	bgt.n	8008950 <UART_SetConfig+0x834>
 80088bc:	2b00      	cmp	r3, #0
 80088be:	db7c      	blt.n	80089ba <UART_SetConfig+0x89e>
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d87a      	bhi.n	80089ba <UART_SetConfig+0x89e>
 80088c4:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <UART_SetConfig+0x7b0>)
 80088c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ca:	bf00      	nop
 80088cc:	08008957 	.word	0x08008957
 80088d0:	0800895f 	.word	0x0800895f
 80088d4:	080089bb 	.word	0x080089bb
 80088d8:	080089bb 	.word	0x080089bb
 80088dc:	08008967 	.word	0x08008967
 80088e0:	080089bb 	.word	0x080089bb
 80088e4:	080089bb 	.word	0x080089bb
 80088e8:	080089bb 	.word	0x080089bb
 80088ec:	08008977 	.word	0x08008977
 80088f0:	080089bb 	.word	0x080089bb
 80088f4:	080089bb 	.word	0x080089bb
 80088f8:	080089bb 	.word	0x080089bb
 80088fc:	080089bb 	.word	0x080089bb
 8008900:	080089bb 	.word	0x080089bb
 8008904:	080089bb 	.word	0x080089bb
 8008908:	080089bb 	.word	0x080089bb
 800890c:	08008987 	.word	0x08008987
 8008910:	080089bb 	.word	0x080089bb
 8008914:	080089bb 	.word	0x080089bb
 8008918:	080089bb 	.word	0x080089bb
 800891c:	080089bb 	.word	0x080089bb
 8008920:	080089bb 	.word	0x080089bb
 8008924:	080089bb 	.word	0x080089bb
 8008928:	080089bb 	.word	0x080089bb
 800892c:	080089bb 	.word	0x080089bb
 8008930:	080089bb 	.word	0x080089bb
 8008934:	080089bb 	.word	0x080089bb
 8008938:	080089bb 	.word	0x080089bb
 800893c:	080089bb 	.word	0x080089bb
 8008940:	080089bb 	.word	0x080089bb
 8008944:	080089bb 	.word	0x080089bb
 8008948:	080089bb 	.word	0x080089bb
 800894c:	080089ad 	.word	0x080089ad
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d02e      	beq.n	80089b2 <UART_SetConfig+0x896>
 8008954:	e031      	b.n	80089ba <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008956:	f7fb ff77 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 800895a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800895c:	e033      	b.n	80089c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800895e:	f7fb ff89 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 8008962:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008964:	e02f      	b.n	80089c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008966:	f107 0314 	add.w	r3, r7, #20
 800896a:	4618      	mov	r0, r3
 800896c:	f7fc ff30 	bl	80057d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008974:	e027      	b.n	80089c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008976:	f107 0308 	add.w	r3, r7, #8
 800897a:	4618      	mov	r0, r3
 800897c:	f7fd f87c 	bl	8005a78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008984:	e01f      	b.n	80089c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008986:	4b58      	ldr	r3, [pc, #352]	; (8008ae8 <UART_SetConfig+0x9cc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	2b00      	cmp	r3, #0
 8008990:	d009      	beq.n	80089a6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008992:	4b55      	ldr	r3, [pc, #340]	; (8008ae8 <UART_SetConfig+0x9cc>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	08db      	lsrs	r3, r3, #3
 8008998:	f003 0303 	and.w	r3, r3, #3
 800899c:	4a53      	ldr	r2, [pc, #332]	; (8008aec <UART_SetConfig+0x9d0>)
 800899e:	fa22 f303 	lsr.w	r3, r2, r3
 80089a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089a4:	e00f      	b.n	80089c6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80089a6:	4b51      	ldr	r3, [pc, #324]	; (8008aec <UART_SetConfig+0x9d0>)
 80089a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089aa:	e00c      	b.n	80089c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089ac:	4b4c      	ldr	r3, [pc, #304]	; (8008ae0 <UART_SetConfig+0x9c4>)
 80089ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089b0:	e009      	b.n	80089c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089b8:	e005      	b.n	80089c6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80089c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 80ea 	beq.w	8008ba2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	4a44      	ldr	r2, [pc, #272]	; (8008ae4 <UART_SetConfig+0x9c8>)
 80089d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d8:	461a      	mov	r2, r3
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089e0:	005a      	lsls	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	085b      	lsrs	r3, r3, #1
 80089e8:	441a      	add	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	2b0f      	cmp	r3, #15
 80089f8:	d916      	bls.n	8008a28 <UART_SetConfig+0x90c>
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a00:	d212      	bcs.n	8008a28 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	f023 030f 	bic.w	r3, r3, #15
 8008a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	085b      	lsrs	r3, r3, #1
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a24:	60da      	str	r2, [r3, #12]
 8008a26:	e0bc      	b.n	8008ba2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008a2e:	e0b8      	b.n	8008ba2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	dc4b      	bgt.n	8008ad0 <UART_SetConfig+0x9b4>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f2c0 8087 	blt.w	8008b4c <UART_SetConfig+0xa30>
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	f200 8084 	bhi.w	8008b4c <UART_SetConfig+0xa30>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <UART_SetConfig+0x930>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008ad7 	.word	0x08008ad7
 8008a50:	08008af1 	.word	0x08008af1
 8008a54:	08008b4d 	.word	0x08008b4d
 8008a58:	08008b4d 	.word	0x08008b4d
 8008a5c:	08008af9 	.word	0x08008af9
 8008a60:	08008b4d 	.word	0x08008b4d
 8008a64:	08008b4d 	.word	0x08008b4d
 8008a68:	08008b4d 	.word	0x08008b4d
 8008a6c:	08008b09 	.word	0x08008b09
 8008a70:	08008b4d 	.word	0x08008b4d
 8008a74:	08008b4d 	.word	0x08008b4d
 8008a78:	08008b4d 	.word	0x08008b4d
 8008a7c:	08008b4d 	.word	0x08008b4d
 8008a80:	08008b4d 	.word	0x08008b4d
 8008a84:	08008b4d 	.word	0x08008b4d
 8008a88:	08008b4d 	.word	0x08008b4d
 8008a8c:	08008b19 	.word	0x08008b19
 8008a90:	08008b4d 	.word	0x08008b4d
 8008a94:	08008b4d 	.word	0x08008b4d
 8008a98:	08008b4d 	.word	0x08008b4d
 8008a9c:	08008b4d 	.word	0x08008b4d
 8008aa0:	08008b4d 	.word	0x08008b4d
 8008aa4:	08008b4d 	.word	0x08008b4d
 8008aa8:	08008b4d 	.word	0x08008b4d
 8008aac:	08008b4d 	.word	0x08008b4d
 8008ab0:	08008b4d 	.word	0x08008b4d
 8008ab4:	08008b4d 	.word	0x08008b4d
 8008ab8:	08008b4d 	.word	0x08008b4d
 8008abc:	08008b4d 	.word	0x08008b4d
 8008ac0:	08008b4d 	.word	0x08008b4d
 8008ac4:	08008b4d 	.word	0x08008b4d
 8008ac8:	08008b4d 	.word	0x08008b4d
 8008acc:	08008b3f 	.word	0x08008b3f
 8008ad0:	2b40      	cmp	r3, #64	; 0x40
 8008ad2:	d037      	beq.n	8008b44 <UART_SetConfig+0xa28>
 8008ad4:	e03a      	b.n	8008b4c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ad6:	f7fb feb7 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8008ada:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008adc:	e03c      	b.n	8008b58 <UART_SetConfig+0xa3c>
 8008ade:	bf00      	nop
 8008ae0:	003d0900 	.word	0x003d0900
 8008ae4:	0800ede8 	.word	0x0800ede8
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008af0:	f7fb fec0 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 8008af4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008af6:	e02f      	b.n	8008b58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008af8:	f107 0314 	add.w	r3, r7, #20
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fc fe67 	bl	80057d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b06:	e027      	b.n	8008b58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b08:	f107 0308 	add.w	r3, r7, #8
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fc ffb3 	bl	8005a78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b16:	e01f      	b.n	8008b58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b18:	4b2c      	ldr	r3, [pc, #176]	; (8008bcc <UART_SetConfig+0xab0>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0320 	and.w	r3, r3, #32
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d009      	beq.n	8008b38 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b24:	4b29      	ldr	r3, [pc, #164]	; (8008bcc <UART_SetConfig+0xab0>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	08db      	lsrs	r3, r3, #3
 8008b2a:	f003 0303 	and.w	r3, r3, #3
 8008b2e:	4a28      	ldr	r2, [pc, #160]	; (8008bd0 <UART_SetConfig+0xab4>)
 8008b30:	fa22 f303 	lsr.w	r3, r2, r3
 8008b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b36:	e00f      	b.n	8008b58 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008b38:	4b25      	ldr	r3, [pc, #148]	; (8008bd0 <UART_SetConfig+0xab4>)
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b3c:	e00c      	b.n	8008b58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b3e:	4b25      	ldr	r3, [pc, #148]	; (8008bd4 <UART_SetConfig+0xab8>)
 8008b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b42:	e009      	b.n	8008b58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b4a:	e005      	b.n	8008b58 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008b56:	bf00      	nop
    }

    if (pclk != 0U)
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d021      	beq.n	8008ba2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	4a1d      	ldr	r2, [pc, #116]	; (8008bd8 <UART_SetConfig+0xabc>)
 8008b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	441a      	add	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b80:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	2b0f      	cmp	r3, #15
 8008b86:	d909      	bls.n	8008b9c <UART_SetConfig+0xa80>
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b8e:	d205      	bcs.n	8008b9c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	e002      	b.n	8008ba2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008bbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3738      	adds	r7, #56	; 0x38
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	58024400 	.word	0x58024400
 8008bd0:	03d09000 	.word	0x03d09000
 8008bd4:	003d0900 	.word	0x003d0900
 8008bd8:	0800ede8 	.word	0x0800ede8

08008bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00a      	beq.n	8008c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00a      	beq.n	8008c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01a      	beq.n	8008cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cda:	d10a      	bne.n	8008cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	605a      	str	r2, [r3, #4]
  }
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d30:	f7f7 fca2 	bl	8000678 <HAL_GetTick>
 8008d34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0308 	and.w	r3, r3, #8
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	d10e      	bne.n	8008d62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f82f 	bl	8008db6 <UART_WaitOnFlagUntilTimeout>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e025      	b.n	8008dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d10e      	bne.n	8008d8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f819 	bl	8008db6 <UART_WaitOnFlagUntilTimeout>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e00f      	b.n	8008dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b09c      	sub	sp, #112	; 0x70
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	603b      	str	r3, [r7, #0]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc6:	e0a9      	b.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	f000 80a5 	beq.w	8008f1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd2:	f7f7 fc51 	bl	8000678 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d302      	bcc.n	8008de8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d140      	bne.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df0:	e853 3f00 	ldrex	r3, [r3]
 8008df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e6      	bne.n	8008de8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2c:	f023 0301 	bic.w	r3, r3, #1
 8008e30:	663b      	str	r3, [r7, #96]	; 0x60
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3308      	adds	r3, #8
 8008e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e5      	bne.n	8008e1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2220      	movs	r2, #32
 8008e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e069      	b.n	8008f3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d051      	beq.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e86:	d149      	bne.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e6      	bne.n	8008e92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3308      	adds	r3, #8
 8008eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f023 0301 	bic.w	r3, r3, #1
 8008eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ee4:	623a      	str	r2, [r7, #32]
 8008ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	69f9      	ldr	r1, [r7, #28]
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e5      	bne.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2220      	movs	r2, #32
 8008efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e010      	b.n	8008f3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	69da      	ldr	r2, [r3, #28]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	4013      	ands	r3, r2
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	bf0c      	ite	eq
 8008f2c:	2301      	moveq	r3, #1
 8008f2e:	2300      	movne	r3, #0
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	f43f af46 	beq.w	8008dc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3770      	adds	r7, #112	; 0x70
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
	...

08008f48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b096      	sub	sp, #88	; 0x58
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	88fa      	ldrh	r2, [r7, #6]
 8008f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2222      	movs	r2, #34	; 0x22
 8008f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d02c      	beq.n	8008fd6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f80:	4a42      	ldr	r2, [pc, #264]	; (800908c <UART_Start_Receive_DMA+0x144>)
 8008f82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f88:	4a41      	ldr	r2, [pc, #260]	; (8009090 <UART_Start_Receive_DMA+0x148>)
 8008f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f90:	4a40      	ldr	r2, [pc, #256]	; (8009094 <UART_Start_Receive_DMA+0x14c>)
 8008f92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f98:	2200      	movs	r2, #0
 8008f9a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3324      	adds	r3, #36	; 0x24
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fac:	461a      	mov	r2, r3
 8008fae:	88fb      	ldrh	r3, [r7, #6]
 8008fb0:	f7f7 ffb6 	bl	8000f20 <HAL_DMA_Start_IT>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00d      	beq.n	8008fd6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2210      	movs	r2, #16
 8008fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e055      	b.n	8009082 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d018      	beq.n	8009018 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009004:	64bb      	str	r3, [r7, #72]	; 0x48
 8009006:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800900a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e6      	bne.n	8008fe6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3308      	adds	r3, #8
 800901e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	653b      	str	r3, [r7, #80]	; 0x50
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3308      	adds	r3, #8
 8009036:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009038:	637a      	str	r2, [r7, #52]	; 0x34
 800903a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800903e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e5      	bne.n	8009018 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3308      	adds	r3, #8
 8009052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	613b      	str	r3, [r7, #16]
   return(result);
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800906c:	623a      	str	r2, [r7, #32]
 800906e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	69f9      	ldr	r1, [r7, #28]
 8009072:	6a3a      	ldr	r2, [r7, #32]
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	61bb      	str	r3, [r7, #24]
   return(result);
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e5      	bne.n	800904c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3758      	adds	r7, #88	; 0x58
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	0800929b 	.word	0x0800929b
 8009090:	080093bd 	.word	0x080093bd
 8009094:	080093f5 	.word	0x080093f5

08009098 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009098:	b480      	push	{r7}
 800909a:	b08f      	sub	sp, #60	; 0x3c
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80090b4:	637b      	str	r3, [r7, #52]	; 0x34
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e6      	bne.n	80090a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3308      	adds	r3, #8
 80090d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80090e8:	633b      	str	r3, [r7, #48]	; 0x30
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3308      	adds	r3, #8
 80090f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090f2:	61ba      	str	r2, [r7, #24]
 80090f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6979      	ldr	r1, [r7, #20]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e5      	bne.n	80090d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800910e:	bf00      	nop
 8009110:	373c      	adds	r7, #60	; 0x3c
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
	...

0800911c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800911c:	b480      	push	{r7}
 800911e:	b095      	sub	sp, #84	; 0x54
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009138:	64fb      	str	r3, [r7, #76]	; 0x4c
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009142:	643b      	str	r3, [r7, #64]	; 0x40
 8009144:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e6      	bne.n	8009124 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3308      	adds	r3, #8
 800915c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	61fb      	str	r3, [r7, #28]
   return(result);
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	4b1e      	ldr	r3, [pc, #120]	; (80091e4 <UART_EndRxTransfer+0xc8>)
 800916a:	4013      	ands	r3, r2
 800916c:	64bb      	str	r3, [r7, #72]	; 0x48
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3308      	adds	r3, #8
 8009174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800917c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e5      	bne.n	8009156 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800918e:	2b01      	cmp	r3, #1
 8009190:	d118      	bne.n	80091c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	60bb      	str	r3, [r7, #8]
   return(result);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f023 0310 	bic.w	r3, r3, #16
 80091a6:	647b      	str	r3, [r7, #68]	; 0x44
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	461a      	mov	r2, r3
 80091ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b0:	61bb      	str	r3, [r7, #24]
 80091b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b4:	6979      	ldr	r1, [r7, #20]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	e841 2300 	strex	r3, r2, [r1]
 80091bc:	613b      	str	r3, [r7, #16]
   return(result);
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e6      	bne.n	8009192 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80091d8:	bf00      	nop
 80091da:	3754      	adds	r7, #84	; 0x54
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	effffffe 	.word	0xeffffffe

080091e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b090      	sub	sp, #64	; 0x40
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091fe:	d037      	beq.n	8009270 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009202:	2200      	movs	r2, #0
 8009204:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3308      	adds	r3, #8
 800920e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	623b      	str	r3, [r7, #32]
   return(result);
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800921e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009228:	633a      	str	r2, [r7, #48]	; 0x30
 800922a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800922e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e5      	bne.n	8009208 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800923c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	60fb      	str	r3, [r7, #12]
   return(result);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009250:	637b      	str	r3, [r7, #52]	; 0x34
 8009252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	69b9      	ldr	r1, [r7, #24]
 8009260:	69fa      	ldr	r2, [r7, #28]
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	617b      	str	r3, [r7, #20]
   return(result);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e6      	bne.n	800923c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800926e:	e002      	b.n	8009276 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8009270:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009272:	f7fe ff15 	bl	80080a0 <HAL_UART_TxCpltCallback>
}
 8009276:	bf00      	nop
 8009278:	3740      	adds	r7, #64	; 0x40
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f7fe ff11 	bl	80080b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b09c      	sub	sp, #112	; 0x70
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b0:	d071      	beq.n	8009396 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80092b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b4:	2200      	movs	r2, #0
 80092b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c2:	e853 3f00 	ldrex	r3, [r3]
 80092c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80092d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	461a      	mov	r2, r3
 80092d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80092da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092e0:	e841 2300 	strex	r3, r2, [r1]
 80092e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e6      	bne.n	80092ba <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3308      	adds	r3, #8
 80092f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	e853 3f00 	ldrex	r3, [r3]
 80092fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fe:	f023 0301 	bic.w	r3, r3, #1
 8009302:	667b      	str	r3, [r7, #100]	; 0x64
 8009304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3308      	adds	r3, #8
 800930a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800930c:	647a      	str	r2, [r7, #68]	; 0x44
 800930e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009314:	e841 2300 	strex	r3, r2, [r1]
 8009318:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800931a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e5      	bne.n	80092ec <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3308      	adds	r3, #8
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	e853 3f00 	ldrex	r3, [r3]
 800932e:	623b      	str	r3, [r7, #32]
   return(result);
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009336:	663b      	str	r3, [r7, #96]	; 0x60
 8009338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3308      	adds	r3, #8
 800933e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009340:	633a      	str	r2, [r7, #48]	; 0x30
 8009342:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009348:	e841 2300 	strex	r3, r2, [r1]
 800934c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1e5      	bne.n	8009320 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009356:	2220      	movs	r2, #32
 8009358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800935c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009360:	2b01      	cmp	r3, #1
 8009362:	d118      	bne.n	8009396 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	60fb      	str	r3, [r7, #12]
   return(result);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f023 0310 	bic.w	r3, r3, #16
 8009378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800937a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009382:	61fb      	str	r3, [r7, #28]
 8009384:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009386:	69b9      	ldr	r1, [r7, #24]
 8009388:	69fa      	ldr	r2, [r7, #28]
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	617b      	str	r3, [r7, #20]
   return(result);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e6      	bne.n	8009364 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800939a:	2b01      	cmp	r3, #1
 800939c:	d107      	bne.n	80093ae <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800939e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093a4:	4619      	mov	r1, r3
 80093a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093a8:	f7fe feac 	bl	8008104 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093ac:	e002      	b.n	80093b4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 80093ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093b0:	f7fe fe8a 	bl	80080c8 <HAL_UART_RxCpltCallback>
}
 80093b4:	bf00      	nop
 80093b6:	3770      	adds	r7, #112	; 0x70
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d109      	bne.n	80093e6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093d8:	085b      	lsrs	r3, r3, #1
 80093da:	b29b      	uxth	r3, r3
 80093dc:	4619      	mov	r1, r3
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f7fe fe90 	bl	8008104 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093e4:	e002      	b.n	80093ec <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f7fe fe78 	bl	80080dc <HAL_UART_RxHalfCpltCallback>
}
 80093ec:	bf00      	nop
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009408:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009410:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941c:	2b80      	cmp	r3, #128	; 0x80
 800941e:	d109      	bne.n	8009434 <UART_DMAError+0x40>
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2b21      	cmp	r3, #33	; 0x21
 8009424:	d106      	bne.n	8009434 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2200      	movs	r2, #0
 800942a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800942e:	6978      	ldr	r0, [r7, #20]
 8009430:	f7ff fe32 	bl	8009098 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943e:	2b40      	cmp	r3, #64	; 0x40
 8009440:	d109      	bne.n	8009456 <UART_DMAError+0x62>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b22      	cmp	r3, #34	; 0x22
 8009446:	d106      	bne.n	8009456 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2200      	movs	r2, #0
 800944c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009450:	6978      	ldr	r0, [r7, #20]
 8009452:	f7ff fe63 	bl	800911c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800945c:	f043 0210 	orr.w	r2, r3, #16
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009466:	6978      	ldr	r0, [r7, #20]
 8009468:	f7fe fe42 	bl	80080f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800946c:	bf00      	nop
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f7fe fe2c 	bl	80080f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009498:	bf00      	nop
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094bc:	61fb      	str	r3, [r7, #28]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	61bb      	str	r3, [r7, #24]
 80094c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6979      	ldr	r1, [r7, #20]
 80094cc:	69ba      	ldr	r2, [r7, #24]
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	613b      	str	r3, [r7, #16]
   return(result);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e6      	bne.n	80094a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2220      	movs	r2, #32
 80094de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7fe fdd9 	bl	80080a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ee:	bf00      	nop
 80094f0:	3720      	adds	r7, #32
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094fe:	bf00      	nop
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009512:	bf00      	nop
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009526:	bf00      	nop
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009532:	b480      	push	{r7}
 8009534:	b085      	sub	sp, #20
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009540:	2b01      	cmp	r3, #1
 8009542:	d101      	bne.n	8009548 <HAL_UARTEx_DisableFifoMode+0x16>
 8009544:	2302      	movs	r3, #2
 8009546:	e027      	b.n	8009598 <HAL_UARTEx_DisableFifoMode+0x66>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2224      	movs	r2, #36	; 0x24
 8009554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 0201 	bic.w	r2, r2, #1
 800956e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009576:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2220      	movs	r2, #32
 800958a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d101      	bne.n	80095bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095b8:	2302      	movs	r3, #2
 80095ba:	e02d      	b.n	8009618 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2224      	movs	r2, #36	; 0x24
 80095c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f022 0201 	bic.w	r2, r2, #1
 80095e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f84f 	bl	800969c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009634:	2302      	movs	r3, #2
 8009636:	e02d      	b.n	8009694 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2224      	movs	r2, #36	; 0x24
 8009644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0201 	bic.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f811 	bl	800969c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2220      	movs	r2, #32
 8009686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d108      	bne.n	80096be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096bc:	e031      	b.n	8009722 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096be:	2310      	movs	r3, #16
 80096c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096c2:	2310      	movs	r3, #16
 80096c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	0e5b      	lsrs	r3, r3, #25
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	f003 0307 	and.w	r3, r3, #7
 80096d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	0f5b      	lsrs	r3, r3, #29
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 0307 	and.w	r3, r3, #7
 80096e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	7b3a      	ldrb	r2, [r7, #12]
 80096ea:	4911      	ldr	r1, [pc, #68]	; (8009730 <UARTEx_SetNbDataToProcess+0x94>)
 80096ec:	5c8a      	ldrb	r2, [r1, r2]
 80096ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096f2:	7b3a      	ldrb	r2, [r7, #12]
 80096f4:	490f      	ldr	r1, [pc, #60]	; (8009734 <UARTEx_SetNbDataToProcess+0x98>)
 80096f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	7b7a      	ldrb	r2, [r7, #13]
 8009708:	4909      	ldr	r1, [pc, #36]	; (8009730 <UARTEx_SetNbDataToProcess+0x94>)
 800970a:	5c8a      	ldrb	r2, [r1, r2]
 800970c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009710:	7b7a      	ldrb	r2, [r7, #13]
 8009712:	4908      	ldr	r1, [pc, #32]	; (8009734 <UARTEx_SetNbDataToProcess+0x98>)
 8009714:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009716:	fb93 f3f2 	sdiv	r3, r3, r2
 800971a:	b29a      	uxth	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009722:	bf00      	nop
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	0800ee00 	.word	0x0800ee00
 8009734:	0800ee08 	.word	0x0800ee08

08009738 <MoveControl>:
 * @return PwmVal_t 推进器控制数据
 * @note 可直接输出给推进器驱动，随时根据硬件调整
 */
PwmVal_t MoveControl(uint16_t StraightNum, uint16_t RotateNum,
		uint16_t VerticalNum, uint8_t ModeNum)
{
 8009738:	b4b0      	push	{r4, r5, r7}
 800973a:	b097      	sub	sp, #92	; 0x5c
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	461a      	mov	r2, r3
 8009746:	4603      	mov	r3, r0
 8009748:	817b      	strh	r3, [r7, #10]
 800974a:	460b      	mov	r3, r1
 800974c:	813b      	strh	r3, [r7, #8]
 800974e:	4613      	mov	r3, r2
 8009750:	80fb      	strh	r3, [r7, #6]
	PwmVal_t ThrusterTemp;
	uint8_t AFlag = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t BFlag = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t CFlag = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t DFlag = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	uint8_t SFlag = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

#if (NUMBER_OF_VERTICAL_THRUSTER == 2) && (NUMBER_OF_HORIZENTAL_THRUSTER == 4) /* 六轴 */
	switch (ModeNum)
 8009770:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8009774:	2b04      	cmp	r3, #4
 8009776:	f200 80d5 	bhi.w	8009924 <MoveControl+0x1ec>
 800977a:	a201      	add	r2, pc, #4	; (adr r2, 8009780 <MoveControl+0x48>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	08009795 	.word	0x08009795
 8009784:	080098ff 	.word	0x080098ff
 8009788:	08009925 	.word	0x08009925
 800978c:	08009925 	.word	0x08009925
 8009790:	08009925 	.word	0x08009925
	{
	case NORMAL_MODE:
		//Horizental Control
		AFlag = (RotateNum > StraightNum);
 8009794:	893a      	ldrh	r2, [r7, #8]
 8009796:	897b      	ldrh	r3, [r7, #10]
 8009798:	429a      	cmp	r2, r3
 800979a:	bf8c      	ite	hi
 800979c:	2301      	movhi	r3, #1
 800979e:	2300      	movls	r3, #0
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		BFlag = ((RotateNum + StraightNum) > (2 * PWM_MIDDLE_POSITION));
 80097a6:	893a      	ldrh	r2, [r7, #8]
 80097a8:	897b      	ldrh	r3, [r7, #10]
 80097aa:	4413      	add	r3, r2
 80097ac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80097b0:	4293      	cmp	r3, r2
 80097b2:	bfcc      	ite	gt
 80097b4:	2301      	movgt	r3, #1
 80097b6:	2300      	movle	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		CFlag = (RotateNum > PWM_MIDDLE_POSITION);
 80097be:	893b      	ldrh	r3, [r7, #8]
 80097c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80097c4:	4293      	cmp	r3, r2
 80097c6:	bf8c      	ite	hi
 80097c8:	2301      	movhi	r3, #1
 80097ca:	2300      	movls	r3, #0
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		DFlag = (StraightNum > PWM_MIDDLE_POSITION);
 80097d2:	897b      	ldrh	r3, [r7, #10]
 80097d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80097d8:	4293      	cmp	r3, r2
 80097da:	bf8c      	ite	hi
 80097dc:	2301      	movhi	r3, #1
 80097de:	2300      	movls	r3, #0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		SFlag = AFlag * 8 + BFlag * 4 + CFlag * 2 + DFlag;
 80097e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097ea:	005a      	lsls	r2, r3, #1
 80097ec:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80097f0:	4413      	add	r3, r2
 80097f2:	005a      	lsls	r2, r3, #1
 80097f4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80097f8:	4413      	add	r3, r2
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009804:	4413      	add	r3, r2
 8009806:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		switch (SFlag)
 800980a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800980e:	2b0f      	cmp	r3, #15
 8009810:	d870      	bhi.n	80098f4 <MoveControl+0x1bc>
 8009812:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <MoveControl+0xe0>)
 8009814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009818:	08009859 	.word	0x08009859
 800981c:	080098c7 	.word	0x080098c7
 8009820:	080098f5 	.word	0x080098f5
 8009824:	080098f5 	.word	0x080098f5
 8009828:	080098f5 	.word	0x080098f5
 800982c:	080098a5 	.word	0x080098a5
 8009830:	080098f5 	.word	0x080098f5
 8009834:	0800987f 	.word	0x0800987f
 8009838:	0800987f 	.word	0x0800987f
 800983c:	080098f5 	.word	0x080098f5
 8009840:	080098a5 	.word	0x080098a5
 8009844:	080098f5 	.word	0x080098f5
 8009848:	080098f5 	.word	0x080098f5
 800984c:	080098f5 	.word	0x080098f5
 8009850:	080098c7 	.word	0x080098c7
 8009854:	08009859 	.word	0x08009859
		{
		case 0:
		case 15:
			ThrusterTemp.HorizontalThruster[0] = (uint32_t) (RotateNum);
 8009858:	893b      	ldrh	r3, [r7, #8]
 800985a:	613b      	str	r3, [r7, #16]
			ThrusterTemp.HorizontalThruster[1] = (uint32_t) (RotateNum);
 800985c:	893b      	ldrh	r3, [r7, #8]
 800985e:	617b      	str	r3, [r7, #20]
			ThrusterTemp.HorizontalThruster[2] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 8009860:	893a      	ldrh	r2, [r7, #8]
 8009862:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009866:	1a9b      	subs	r3, r3, r2
 8009868:	897a      	ldrh	r2, [r7, #10]
 800986a:	4413      	add	r3, r2
			ThrusterTemp.HorizontalThruster[2] =
 800986c:	61bb      	str	r3, [r7, #24]
			ThrusterTemp.HorizontalThruster[3] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 800986e:	893a      	ldrh	r2, [r7, #8]
 8009870:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	897a      	ldrh	r2, [r7, #10]
 8009878:	4413      	add	r3, r2
			ThrusterTemp.HorizontalThruster[3] =
 800987a:	61fb      	str	r3, [r7, #28]
			break;
 800987c:	e03a      	b.n	80098f4 <MoveControl+0x1bc>
		case 7:
		case 8:
			ThrusterTemp.HorizontalThruster[0] = (uint32_t) (StraightNum);
 800987e:	897b      	ldrh	r3, [r7, #10]
 8009880:	613b      	str	r3, [r7, #16]
			ThrusterTemp.HorizontalThruster[1] = (uint32_t) (StraightNum);
 8009882:	897b      	ldrh	r3, [r7, #10]
 8009884:	617b      	str	r3, [r7, #20]
			ThrusterTemp.HorizontalThruster[2] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 8009886:	893a      	ldrh	r2, [r7, #8]
 8009888:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800988c:	1a9b      	subs	r3, r3, r2
 800988e:	897a      	ldrh	r2, [r7, #10]
 8009890:	4413      	add	r3, r2
			ThrusterTemp.HorizontalThruster[2] =
 8009892:	61bb      	str	r3, [r7, #24]
			ThrusterTemp.HorizontalThruster[3] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 8009894:	893a      	ldrh	r2, [r7, #8]
 8009896:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800989a:	1a9b      	subs	r3, r3, r2
 800989c:	897a      	ldrh	r2, [r7, #10]
 800989e:	4413      	add	r3, r2
			ThrusterTemp.HorizontalThruster[3] =
 80098a0:	61fb      	str	r3, [r7, #28]
			break;
 80098a2:	e027      	b.n	80098f4 <MoveControl+0x1bc>
		case 5:
		case 10:
			ThrusterTemp.HorizontalThruster[0] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 80098a4:	893a      	ldrh	r2, [r7, #8]
 80098a6:	897b      	ldrh	r3, [r7, #10]
 80098a8:	4413      	add	r3, r2
 80098aa:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp.HorizontalThruster[0] = (uint32_t) ((RotateNum
 80098ae:	613b      	str	r3, [r7, #16]
			ThrusterTemp.HorizontalThruster[1] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 80098b0:	893a      	ldrh	r2, [r7, #8]
 80098b2:	897b      	ldrh	r3, [r7, #10]
 80098b4:	4413      	add	r3, r2
 80098b6:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp.HorizontalThruster[1] = (uint32_t) ((RotateNum
 80098ba:	617b      	str	r3, [r7, #20]
			ThrusterTemp.HorizontalThruster[2] = (uint32_t) (StraightNum);
 80098bc:	897b      	ldrh	r3, [r7, #10]
 80098be:	61bb      	str	r3, [r7, #24]
			ThrusterTemp.HorizontalThruster[3] = (uint32_t) (StraightNum);
 80098c0:	897b      	ldrh	r3, [r7, #10]
 80098c2:	61fb      	str	r3, [r7, #28]
			break;
 80098c4:	e016      	b.n	80098f4 <MoveControl+0x1bc>
		case 1:
		case 14:
			ThrusterTemp.HorizontalThruster[0] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 80098c6:	893a      	ldrh	r2, [r7, #8]
 80098c8:	897b      	ldrh	r3, [r7, #10]
 80098ca:	4413      	add	r3, r2
 80098cc:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp.HorizontalThruster[0] = (uint32_t) ((RotateNum
 80098d0:	613b      	str	r3, [r7, #16]
			ThrusterTemp.HorizontalThruster[1] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 80098d2:	893a      	ldrh	r2, [r7, #8]
 80098d4:	897b      	ldrh	r3, [r7, #10]
 80098d6:	4413      	add	r3, r2
 80098d8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp.HorizontalThruster[1] = (uint32_t) ((RotateNum
 80098dc:	617b      	str	r3, [r7, #20]
			ThrusterTemp.HorizontalThruster[2] = (uint32_t) (((2
					* PWM_MIDDLE_POSITION) - RotateNum));
 80098de:	893a      	ldrh	r2, [r7, #8]
 80098e0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80098e4:	1a9b      	subs	r3, r3, r2
			ThrusterTemp.HorizontalThruster[2] = (uint32_t) (((2
 80098e6:	61bb      	str	r3, [r7, #24]
			ThrusterTemp.HorizontalThruster[3] = (uint32_t) (((2
					* PWM_MIDDLE_POSITION) - RotateNum));
 80098e8:	893a      	ldrh	r2, [r7, #8]
 80098ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80098ee:	1a9b      	subs	r3, r3, r2
			ThrusterTemp.HorizontalThruster[3] = (uint32_t) (((2
 80098f0:	61fb      	str	r3, [r7, #28]
			break;
 80098f2:	bf00      	nop
		}
		//Veritical Control
		ThrusterTemp.VerticalThruster[0] = (uint32_t) (VerticalNum);
 80098f4:	88fb      	ldrh	r3, [r7, #6]
 80098f6:	623b      	str	r3, [r7, #32]
		ThrusterTemp.VerticalThruster[1] = (uint32_t) (VerticalNum);
 80098f8:	88fb      	ldrh	r3, [r7, #6]
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80098fc:	e013      	b.n	8009926 <MoveControl+0x1ee>
	case SIDEPUSH_MODE:
		//Horizental Control
		ThrusterTemp.HorizontalThruster[0] = (uint32_t) ((2
				* PWM_MIDDLE_POSITION) - RotateNum);
 80098fe:	893a      	ldrh	r2, [r7, #8]
 8009900:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009904:	1a9b      	subs	r3, r3, r2
		ThrusterTemp.HorizontalThruster[0] = (uint32_t) ((2
 8009906:	613b      	str	r3, [r7, #16]
		ThrusterTemp.HorizontalThruster[1] = (uint32_t) (RotateNum);
 8009908:	893b      	ldrh	r3, [r7, #8]
 800990a:	617b      	str	r3, [r7, #20]
		ThrusterTemp.HorizontalThruster[2] = (uint32_t) ((2
				* PWM_MIDDLE_POSITION) - RotateNum);
 800990c:	893a      	ldrh	r2, [r7, #8]
 800990e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009912:	1a9b      	subs	r3, r3, r2
		ThrusterTemp.HorizontalThruster[2] = (uint32_t) ((2
 8009914:	61bb      	str	r3, [r7, #24]
		ThrusterTemp.HorizontalThruster[3] = (uint32_t) (RotateNum);
 8009916:	893b      	ldrh	r3, [r7, #8]
 8009918:	61fb      	str	r3, [r7, #28]
		//Veritical Control
		ThrusterTemp.VerticalThruster[0] = (uint32_t) (VerticalNum);
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	623b      	str	r3, [r7, #32]
		ThrusterTemp.VerticalThruster[1] = (uint32_t) (VerticalNum);
 800991e:	88fb      	ldrh	r3, [r7, #6]
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8009922:	e000      	b.n	8009926 <MoveControl+0x1ee>
	case ROLL_MODE: //Unavailable in 6axis ROV
		break;
	case MIX_MODE: //Unavailable in 6axis ROV
		break;
	default:
		break;
 8009924:	bf00      	nop
        break;
    default:
        break;
    }
#endif
	return ThrusterTemp;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	461d      	mov	r5, r3
 800992a:	f107 0410 	add.w	r4, r7, #16
 800992e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800993a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800993e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	375c      	adds	r7, #92	; 0x5c
 8009946:	46bd      	mov	sp, r7
 8009948:	bcb0      	pop	{r4, r5, r7}
 800994a:	4770      	bx	lr

0800994c <CaptureControlData>:
//
//    HAL_UART_Transmit_DMA(&Master_UART, ReportSend, Master_UART_TXLen);
//}

ControlData_t CaptureControlData(uint8_t *CommandReceive)
{
 800994c:	b4b0      	push	{r4, r5, r7}
 800994e:	b08d      	sub	sp, #52	; 0x34
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
	ControlData_t CaptureData;

	for (uint8_t i = 0; i < Master_UART_RXLen * 2; i++)
 8009956:	2300      	movs	r3, #0
 8009958:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800995c:	e133      	b.n	8009bc6 <CaptureControlData+0x27a>
	{
		if ((CommandReceive[i] == 0x25) && (CommandReceive[i + 29] == 0x21)
 800995e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	4413      	add	r3, r2
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b25      	cmp	r3, #37	; 0x25
 800996a:	f040 8127 	bne.w	8009bbc <CaptureControlData+0x270>
 800996e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009972:	331d      	adds	r3, #29
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	4413      	add	r3, r2
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b21      	cmp	r3, #33	; 0x21
 800997c:	f040 811e 	bne.w	8009bbc <CaptureControlData+0x270>
				&& (CommandReceive[i + 28] == 0x00))
 8009980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009984:	331c      	adds	r3, #28
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	4413      	add	r3, r2
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	f040 8115 	bne.w	8009bbc <CaptureControlData+0x270>
		{
			CaptureData.FrameHead = (CommandReceive[i]);
 8009992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	4413      	add	r3, r2
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	733b      	strb	r3, [r7, #12]
			CaptureData.StraightNum = ((CommandReceive[i + 1] << 8)
 800999e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099a2:	3301      	adds	r3, #1
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	4413      	add	r3, r2
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 2]);
 80099ac:	b21a      	sxth	r2, r3
 80099ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099b2:	3302      	adds	r3, #2
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	440b      	add	r3, r1
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	b21b      	sxth	r3, r3
 80099bc:	4313      	orrs	r3, r2
 80099be:	b21b      	sxth	r3, r3
 80099c0:	b29b      	uxth	r3, r3
			CaptureData.StraightNum = ((CommandReceive[i + 1] << 8)
 80099c2:	81fb      	strh	r3, [r7, #14]
			CaptureData.RotateNum = ((CommandReceive[i + 3] << 8)
 80099c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099c8:	3303      	adds	r3, #3
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	4413      	add	r3, r2
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 4]);
 80099d2:	b21a      	sxth	r2, r3
 80099d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099d8:	3304      	adds	r3, #4
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	440b      	add	r3, r1
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	b21b      	sxth	r3, r3
 80099e2:	4313      	orrs	r3, r2
 80099e4:	b21b      	sxth	r3, r3
 80099e6:	b29b      	uxth	r3, r3
			CaptureData.RotateNum = ((CommandReceive[i + 3] << 8)
 80099e8:	823b      	strh	r3, [r7, #16]
			CaptureData.VerticalNum = ((CommandReceive[i + 5] << 8)
 80099ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099ee:	3305      	adds	r3, #5
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	4413      	add	r3, r2
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 6]);
 80099f8:	b21a      	sxth	r2, r3
 80099fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099fe:	3306      	adds	r3, #6
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	440b      	add	r3, r1
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b21b      	sxth	r3, r3
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	b21b      	sxth	r3, r3
 8009a0c:	b29b      	uxth	r3, r3
			CaptureData.VerticalNum = ((CommandReceive[i + 5] << 8)
 8009a0e:	827b      	strh	r3, [r7, #18]
			CaptureData.LightNum = ((CommandReceive[i + 7] << 8)
 8009a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a14:	3307      	adds	r3, #7
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	4413      	add	r3, r2
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 8]);
 8009a1e:	b21a      	sxth	r2, r3
 8009a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a24:	3308      	adds	r3, #8
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	440b      	add	r3, r1
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	b21b      	sxth	r3, r3
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	b21b      	sxth	r3, r3
 8009a32:	b29b      	uxth	r3, r3
			CaptureData.LightNum = ((CommandReceive[i + 7] << 8)
 8009a34:	82bb      	strh	r3, [r7, #20]
			CaptureData.PanNum = ((CommandReceive[i + 9] << 8)
 8009a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a3a:	3309      	adds	r3, #9
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	4413      	add	r3, r2
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 10]);
 8009a44:	b21a      	sxth	r2, r3
 8009a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a4a:	330a      	adds	r3, #10
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	440b      	add	r3, r1
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	b21b      	sxth	r3, r3
 8009a54:	4313      	orrs	r3, r2
 8009a56:	b21b      	sxth	r3, r3
 8009a58:	b29b      	uxth	r3, r3
			CaptureData.PanNum = ((CommandReceive[i + 9] << 8)
 8009a5a:	82fb      	strh	r3, [r7, #22]
			CaptureData.ConveyNum = ((CommandReceive[i + 11] << 8)
 8009a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a60:	330b      	adds	r3, #11
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	4413      	add	r3, r2
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 12]);
 8009a6a:	b21a      	sxth	r2, r3
 8009a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a70:	330c      	adds	r3, #12
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	440b      	add	r3, r1
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	b21b      	sxth	r3, r3
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	b21b      	sxth	r3, r3
 8009a7e:	b29b      	uxth	r3, r3
			CaptureData.ConveyNum = ((CommandReceive[i + 11] << 8)
 8009a80:	833b      	strh	r3, [r7, #24]

			CaptureData.ArmNum[0] = ((CommandReceive[i + 13] << 8)
 8009a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a86:	330d      	adds	r3, #13
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 14]);
 8009a90:	b21a      	sxth	r2, r3
 8009a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a96:	330e      	adds	r3, #14
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	440b      	add	r3, r1
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	b21b      	sxth	r3, r3
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	b21b      	sxth	r3, r3
 8009aa4:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[0] = ((CommandReceive[i + 13] << 8)
 8009aa6:	837b      	strh	r3, [r7, #26]
			CaptureData.ArmNum[1] = ((CommandReceive[i + 15] << 8)
 8009aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aac:	330f      	adds	r3, #15
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 16]);
 8009ab6:	b21a      	sxth	r2, r3
 8009ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009abc:	3310      	adds	r3, #16
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	440b      	add	r3, r1
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	b21b      	sxth	r3, r3
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	b21b      	sxth	r3, r3
 8009aca:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[1] = ((CommandReceive[i + 15] << 8)
 8009acc:	83bb      	strh	r3, [r7, #28]
			CaptureData.ArmNum[2] = ((CommandReceive[i + 17] << 8)
 8009ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ad2:	3311      	adds	r3, #17
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 18]);
 8009adc:	b21a      	sxth	r2, r3
 8009ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ae2:	3312      	adds	r3, #18
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	440b      	add	r3, r1
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	b21b      	sxth	r3, r3
 8009aec:	4313      	orrs	r3, r2
 8009aee:	b21b      	sxth	r3, r3
 8009af0:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[2] = ((CommandReceive[i + 17] << 8)
 8009af2:	83fb      	strh	r3, [r7, #30]
			CaptureData.ArmNum[3] = ((CommandReceive[i + 19] << 8)
 8009af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009af8:	3313      	adds	r3, #19
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	4413      	add	r3, r2
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 20]);
 8009b02:	b21a      	sxth	r2, r3
 8009b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b08:	3314      	adds	r3, #20
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	440b      	add	r3, r1
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	b21b      	sxth	r3, r3
 8009b12:	4313      	orrs	r3, r2
 8009b14:	b21b      	sxth	r3, r3
 8009b16:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[3] = ((CommandReceive[i + 19] << 8)
 8009b18:	843b      	strh	r3, [r7, #32]
			CaptureData.ArmNum[4] = ((CommandReceive[i + 21] << 8)
 8009b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b1e:	3315      	adds	r3, #21
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	4413      	add	r3, r2
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 22]);
 8009b28:	b21a      	sxth	r2, r3
 8009b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b2e:	3316      	adds	r3, #22
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	440b      	add	r3, r1
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	b21b      	sxth	r3, r3
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	b21b      	sxth	r3, r3
 8009b3c:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[4] = ((CommandReceive[i + 21] << 8)
 8009b3e:	847b      	strh	r3, [r7, #34]	; 0x22
			CaptureData.ArmNum[5] = ((CommandReceive[i + 23] << 8)
 8009b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b44:	3317      	adds	r3, #23
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	4413      	add	r3, r2
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 24]);
 8009b4e:	b21a      	sxth	r2, r3
 8009b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b54:	3318      	adds	r3, #24
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	440b      	add	r3, r1
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	b21b      	sxth	r3, r3
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	b21b      	sxth	r3, r3
 8009b62:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[5] = ((CommandReceive[i + 23] << 8)
 8009b64:	84bb      	strh	r3, [r7, #36]	; 0x24
			CaptureData.RestNum = ((CommandReceive[i + 25] << 8)
 8009b66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b6a:	3319      	adds	r3, #25
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	4413      	add	r3, r2
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 26]);
 8009b74:	b21a      	sxth	r2, r3
 8009b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b7a:	331a      	adds	r3, #26
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	440b      	add	r3, r1
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	b21b      	sxth	r3, r3
 8009b84:	4313      	orrs	r3, r2
 8009b86:	b21b      	sxth	r3, r3
 8009b88:	b29b      	uxth	r3, r3
			CaptureData.RestNum = ((CommandReceive[i + 25] << 8)
 8009b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
			CaptureData.Mode = CommandReceive[i + 27];
 8009b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b90:	331b      	adds	r3, #27
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	4413      	add	r3, r2
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			CaptureData.IdTest = CommandReceive[i + 28];
 8009b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ba0:	331c      	adds	r3, #28
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			CaptureData.FrameEnd = (CommandReceive[i + 29]);
 8009bac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bb0:	331d      	adds	r3, #29
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	for (uint8_t i = 0; i < Master_UART_RXLen * 2; i++)
 8009bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bca:	2b3b      	cmp	r3, #59	; 0x3b
 8009bcc:	f67f aec7 	bls.w	800995e <CaptureControlData+0x12>
		}
	}

	return CaptureData;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	461d      	mov	r5, r3
 8009bd4:	f107 040c 	add.w	r4, r7, #12
 8009bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bda:	6028      	str	r0, [r5, #0]
 8009bdc:	6069      	str	r1, [r5, #4]
 8009bde:	60aa      	str	r2, [r5, #8]
 8009be0:	60eb      	str	r3, [r5, #12]
 8009be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009be4:	6128      	str	r0, [r5, #16]
 8009be6:	6169      	str	r1, [r5, #20]
 8009be8:	61aa      	str	r2, [r5, #24]
 8009bea:	61eb      	str	r3, [r5, #28]
}
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	3734      	adds	r7, #52	; 0x34
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bcb0      	pop	{r4, r5, r7}
 8009bf4:	4770      	bx	lr

08009bf6 <InitGY39>:

#endif

#ifdef USING_GY39_SENSOR
void InitGY39(uint8_t *GY39Send)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
	*(GY39Send + 0) = 0xA5;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	22a5      	movs	r2, #165	; 0xa5
 8009c02:	701a      	strb	r2, [r3, #0]
	*(GY39Send + 1) = 0x82;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3301      	adds	r3, #1
 8009c08:	2282      	movs	r2, #130	; 0x82
 8009c0a:	701a      	strb	r2, [r3, #0]
	*(GY39Send + 2) = 0x27;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3302      	adds	r3, #2
 8009c10:	2227      	movs	r2, #39	; 0x27
 8009c12:	701a      	strb	r2, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <ReceiveGY39>:

CarbinData_t ReceiveGY39(uint8_t *GY39Receive)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
	CarbinData_t RecvGY39;
	if ((GY39Receive[0] == 0x5A) && (GY39Receive[1] == 0x5A)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b5a      	cmp	r3, #90	; 0x5a
 8009c30:	d140      	bne.n	8009cb4 <ReceiveGY39+0x94>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	3301      	adds	r3, #1
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b5a      	cmp	r3, #90	; 0x5a
 8009c3a:	d13b      	bne.n	8009cb4 <ReceiveGY39+0x94>
			&& (GY39Receive[2] == 0x45))
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	3302      	adds	r3, #2
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b45      	cmp	r3, #69	; 0x45
 8009c44:	d136      	bne.n	8009cb4 <ReceiveGY39+0x94>
	{
		RecvGY39.CarbinTemperature = ((GY39Receive[4] << 8) | GY39Receive[5]);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	021b      	lsls	r3, r3, #8
 8009c4e:	b21a      	sxth	r2, r3
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	3305      	adds	r3, #5
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	b21b      	sxth	r3, r3
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	b21b      	sxth	r3, r3
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	813b      	strh	r3, [r7, #8]
		RecvGY39.CarbinBarometric = ((GY39Receive[6] << 24)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	3306      	adds	r3, #6
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	061b      	lsls	r3, r3, #24
				| (GY39Receive[7] << 16) | (GY39Receive[8] << 8)
 8009c68:	b21a      	sxth	r2, r3
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	3307      	adds	r3, #7
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	041b      	lsls	r3, r3, #16
 8009c72:	b21b      	sxth	r3, r3
 8009c74:	4313      	orrs	r3, r2
 8009c76:	b21a      	sxth	r2, r3
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	021b      	lsls	r3, r3, #8
 8009c80:	b21b      	sxth	r3, r3
 8009c82:	4313      	orrs	r3, r2
 8009c84:	b21a      	sxth	r2, r3
				| GY39Receive[9]);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	3309      	adds	r3, #9
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	b21b      	sxth	r3, r3
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	b21b      	sxth	r3, r3
 8009c92:	b29b      	uxth	r3, r3
		RecvGY39.CarbinBarometric = ((GY39Receive[6] << 24)
 8009c94:	81bb      	strh	r3, [r7, #12]
		RecvGY39.CarbinHumidity = ((GY39Receive[10] << 8) | GY39Receive[11]);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	330a      	adds	r3, #10
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	021b      	lsls	r3, r3, #8
 8009c9e:	b21a      	sxth	r2, r3
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	330b      	adds	r3, #11
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	b21b      	sxth	r3, r3
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	b21b      	sxth	r3, r3
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	817b      	strh	r3, [r7, #10]
		RecvGY39.CarbinIllumination = 0x0000;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	81fb      	strh	r3, [r7, #14]
	}

	return RecvGY39;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f107 0308 	add.w	r3, r7, #8
 8009cbc:	cb03      	ldmia	r3!, {r0, r1}
 8009cbe:	6010      	str	r0, [r2, #0]
 8009cc0:	6051      	str	r1, [r2, #4]
}
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
	...

08009cd0 <ReceiveWT931>:
#endif

#ifdef USING_WT931_SENSOR
IMUData_t ReceiveWT931(uint8_t *WT931Receive)
{
 8009cd0:	b4b0      	push	{r4, r5, r7}
 8009cd2:	b08b      	sub	sp, #44	; 0x2c
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
	IMUData_t RecvWT931;

	for (uint8_t i = 0; i < AXIS_UART_RXLen; i++)
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ce0:	e112      	b.n	8009f08 <ReceiveWT931+0x238>
	{
		if(i > AXIS_UART_RXLen - 11)
 8009ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ce6:	2b21      	cmp	r3, #33	; 0x21
 8009ce8:	f200 8114 	bhi.w	8009f14 <ReceiveWT931+0x244>
		{
			break;
		}

		if (WT931Receive[i] == 0x55)
 8009cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b55      	cmp	r3, #85	; 0x55
 8009cf8:	f040 80fe 	bne.w	8009ef8 <ReceiveWT931+0x228>
		{
			switch (WT931Receive[i + 1])
 8009cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d00:	3301      	adds	r3, #1
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	4413      	add	r3, r2
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	3b51      	subs	r3, #81	; 0x51
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	f200 80f6 	bhi.w	8009efc <ReceiveWT931+0x22c>
 8009d10:	a201      	add	r2, pc, #4	; (adr r2, 8009d18 <ReceiveWT931+0x48>)
 8009d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d16:	bf00      	nop
 8009d18:	08009d29 	.word	0x08009d29
 8009d1c:	08009d9d 	.word	0x08009d9d
 8009d20:	08009e11 	.word	0x08009e11
 8009d24:	08009e85 	.word	0x08009e85
			{
			case 0x51:
				RecvWT931.Acceleration[0] = (WT931Receive[i + 2]
 8009d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d2c:	3302      	adds	r3, #2
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	4413      	add	r3, r2
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 8009d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d3a:	3303      	adds	r3, #3
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	440b      	add	r3, r1
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	021b      	lsls	r3, r3, #8
 8009d44:	b21b      	sxth	r3, r3
 8009d46:	4313      	orrs	r3, r2
 8009d48:	b21b      	sxth	r3, r3
 8009d4a:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[0] = (WT931Receive[i + 2]
 8009d4c:	81bb      	strh	r3, [r7, #12]
				RecvWT931.Acceleration[1] = (WT931Receive[i + 4]
 8009d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d52:	3304      	adds	r3, #4
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	4413      	add	r3, r2
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 8009d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d60:	3305      	adds	r3, #5
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	440b      	add	r3, r1
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	021b      	lsls	r3, r3, #8
 8009d6a:	b21b      	sxth	r3, r3
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	b21b      	sxth	r3, r3
 8009d70:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[1] = (WT931Receive[i + 4]
 8009d72:	81fb      	strh	r3, [r7, #14]
				RecvWT931.Acceleration[2] = (WT931Receive[i + 6]
 8009d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d78:	3306      	adds	r3, #6
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 8009d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d86:	3307      	adds	r3, #7
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	440b      	add	r3, r1
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	021b      	lsls	r3, r3, #8
 8009d90:	b21b      	sxth	r3, r3
 8009d92:	4313      	orrs	r3, r2
 8009d94:	b21b      	sxth	r3, r3
 8009d96:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[2] = (WT931Receive[i + 6]
 8009d98:	823b      	strh	r3, [r7, #16]
				break;
 8009d9a:	e0b0      	b.n	8009efe <ReceiveWT931+0x22e>
			case 0x52:
				RecvWT931.AngularSpeed[0] = (WT931Receive[i + 2]
 8009d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009da0:	3302      	adds	r3, #2
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	4413      	add	r3, r2
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 8009daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dae:	3303      	adds	r3, #3
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	440b      	add	r3, r1
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	021b      	lsls	r3, r3, #8
 8009db8:	b21b      	sxth	r3, r3
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	b21b      	sxth	r3, r3
 8009dbe:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[0] = (WT931Receive[i + 2]
 8009dc0:	827b      	strh	r3, [r7, #18]
				RecvWT931.AngularSpeed[1] = (WT931Receive[i + 4]
 8009dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	4413      	add	r3, r2
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 8009dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dd4:	3305      	adds	r3, #5
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	440b      	add	r3, r1
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	021b      	lsls	r3, r3, #8
 8009dde:	b21b      	sxth	r3, r3
 8009de0:	4313      	orrs	r3, r2
 8009de2:	b21b      	sxth	r3, r3
 8009de4:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[1] = (WT931Receive[i + 4]
 8009de6:	82bb      	strh	r3, [r7, #20]
				RecvWT931.AngularSpeed[2] = (WT931Receive[i + 6]
 8009de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dec:	3306      	adds	r3, #6
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	4413      	add	r3, r2
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 8009df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dfa:	3307      	adds	r3, #7
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	440b      	add	r3, r1
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	021b      	lsls	r3, r3, #8
 8009e04:	b21b      	sxth	r3, r3
 8009e06:	4313      	orrs	r3, r2
 8009e08:	b21b      	sxth	r3, r3
 8009e0a:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[2] = (WT931Receive[i + 6]
 8009e0c:	82fb      	strh	r3, [r7, #22]
				break;
 8009e0e:	e076      	b.n	8009efe <ReceiveWT931+0x22e>
			case 0x53:
				RecvWT931.EulerAngle[0] = (WT931Receive[i + 2]
 8009e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e14:	3302      	adds	r3, #2
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	4413      	add	r3, r2
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 8009e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e22:	3303      	adds	r3, #3
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	440b      	add	r3, r1
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	021b      	lsls	r3, r3, #8
 8009e2c:	b21b      	sxth	r3, r3
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	b21b      	sxth	r3, r3
 8009e32:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[0] = (WT931Receive[i + 2]
 8009e34:	833b      	strh	r3, [r7, #24]
				RecvWT931.EulerAngle[1] = (WT931Receive[i + 4]
 8009e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	4413      	add	r3, r2
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 8009e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e48:	3305      	adds	r3, #5
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	440b      	add	r3, r1
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	021b      	lsls	r3, r3, #8
 8009e52:	b21b      	sxth	r3, r3
 8009e54:	4313      	orrs	r3, r2
 8009e56:	b21b      	sxth	r3, r3
 8009e58:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[1] = (WT931Receive[i + 4]
 8009e5a:	837b      	strh	r3, [r7, #26]
				RecvWT931.EulerAngle[2] = (WT931Receive[i + 6]
 8009e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e60:	3306      	adds	r3, #6
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4413      	add	r3, r2
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 8009e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e6e:	3307      	adds	r3, #7
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	440b      	add	r3, r1
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	021b      	lsls	r3, r3, #8
 8009e78:	b21b      	sxth	r3, r3
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	b21b      	sxth	r3, r3
 8009e7e:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[2] = (WT931Receive[i + 6]
 8009e80:	83bb      	strh	r3, [r7, #28]
				break;
 8009e82:	e03c      	b.n	8009efe <ReceiveWT931+0x22e>
			case 0x54:
				RecvWT931.MagneticValue[0] = (WT931Receive[i + 2]
 8009e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e88:	3302      	adds	r3, #2
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 8009e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e96:	3303      	adds	r3, #3
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	440b      	add	r3, r1
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	021b      	lsls	r3, r3, #8
 8009ea0:	b21b      	sxth	r3, r3
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	b21b      	sxth	r3, r3
 8009ea6:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[0] = (WT931Receive[i + 2]
 8009ea8:	83fb      	strh	r3, [r7, #30]
				RecvWT931.MagneticValue[1] = (WT931Receive[i + 4]
 8009eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eae:	3304      	adds	r3, #4
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 8009eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ebc:	3305      	adds	r3, #5
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	440b      	add	r3, r1
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	021b      	lsls	r3, r3, #8
 8009ec6:	b21b      	sxth	r3, r3
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	b21b      	sxth	r3, r3
 8009ecc:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[1] = (WT931Receive[i + 4]
 8009ece:	843b      	strh	r3, [r7, #32]
				RecvWT931.MagneticValue[2] = (WT931Receive[i + 6]
 8009ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ed4:	3306      	adds	r3, #6
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	4413      	add	r3, r2
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 8009ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ee2:	3307      	adds	r3, #7
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	440b      	add	r3, r1
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	b21b      	sxth	r3, r3
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	b21b      	sxth	r3, r3
 8009ef2:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[2] = (WT931Receive[i + 6]
 8009ef4:	847b      	strh	r3, [r7, #34]	; 0x22
				break;
 8009ef6:	e002      	b.n	8009efe <ReceiveWT931+0x22e>
				break;
			}
		}
		else
		{
			continue;
 8009ef8:	bf00      	nop
 8009efa:	e000      	b.n	8009efe <ReceiveWT931+0x22e>
				continue;
 8009efc:	bf00      	nop
	for (uint8_t i = 0; i < AXIS_UART_RXLen; i++)
 8009efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f02:	3301      	adds	r3, #1
 8009f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f0c:	2b2b      	cmp	r3, #43	; 0x2b
 8009f0e:	f67f aee8 	bls.w	8009ce2 <ReceiveWT931+0x12>
 8009f12:	e000      	b.n	8009f16 <ReceiveWT931+0x246>
			break;
 8009f14:	bf00      	nop
		}
	}

	return RecvWT931;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	461d      	mov	r5, r3
 8009f1a:	f107 040c 	add.w	r4, r7, #12
 8009f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f20:	6028      	str	r0, [r5, #0]
 8009f22:	6069      	str	r1, [r5, #4]
 8009f24:	60aa      	str	r2, [r5, #8]
 8009f26:	60eb      	str	r3, [r5, #12]
 8009f28:	cc03      	ldmia	r4!, {r0, r1}
 8009f2a:	6128      	str	r0, [r5, #16]
 8009f2c:	6169      	str	r1, [r5, #20]
}
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	372c      	adds	r7, #44	; 0x2c
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bcb0      	pop	{r4, r5, r7}
 8009f36:	4770      	bx	lr

08009f38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009f42:	2300      	movs	r3, #0
 8009f44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f4a:	2b84      	cmp	r3, #132	; 0x84
 8009f4c:	d005      	beq.n	8009f5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009f4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4413      	add	r3, r2
 8009f56:	3303      	adds	r3, #3
 8009f58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009f6c:	f001 f80e 	bl	800af8c <vTaskStartScheduler>
  
  return osOK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f78:	b089      	sub	sp, #36	; 0x24
 8009f7a:	af04      	add	r7, sp, #16
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d020      	beq.n	8009fca <osThreadCreate+0x54>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d01c      	beq.n	8009fca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685c      	ldr	r4, [r3, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681d      	ldr	r5, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691e      	ldr	r6, [r3, #16]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff ffc8 	bl	8009f38 <makeFreeRtosPriority>
 8009fa8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fb2:	9202      	str	r2, [sp, #8]
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	9100      	str	r1, [sp, #0]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	4632      	mov	r2, r6
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 fe1c 	bl	800abfc <xTaskCreateStatic>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	e01c      	b.n	800a004 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685c      	ldr	r4, [r3, #4]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fd6:	b29e      	uxth	r6, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff ffaa 	bl	8009f38 <makeFreeRtosPriority>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	f107 030c 	add.w	r3, r7, #12
 8009fea:	9301      	str	r3, [sp, #4]
 8009fec:	9200      	str	r2, [sp, #0]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	4632      	mov	r2, r6
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 fe5e 	bl	800acb6 <xTaskCreate>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d001      	beq.n	800a004 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a000:	2300      	movs	r3, #0
 800a002:	e000      	b.n	800a006 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a004:	68fb      	ldr	r3, [r7, #12]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a00e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <osDelay+0x16>
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	e000      	b.n	800a026 <osDelay+0x18>
 800a024:	2301      	movs	r3, #1
 800a026:	4618      	mov	r0, r3
 800a028:	f000 ff7c 	bl	800af24 <vTaskDelay>
  
  return osOK;
 800a02c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a036:	b580      	push	{r7, lr}
 800a038:	b086      	sub	sp, #24
 800a03a:	af02      	add	r7, sp, #8
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00f      	beq.n	800a068 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d10a      	bne.n	800a064 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	2203      	movs	r2, #3
 800a054:	9200      	str	r2, [sp, #0]
 800a056:	2200      	movs	r2, #0
 800a058:	2100      	movs	r1, #0
 800a05a:	2001      	movs	r0, #1
 800a05c:	f000 f962 	bl	800a324 <xQueueGenericCreateStatic>
 800a060:	4603      	mov	r3, r0
 800a062:	e016      	b.n	800a092 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a064:	2300      	movs	r3, #0
 800a066:	e014      	b.n	800a092 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d110      	bne.n	800a090 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a06e:	2203      	movs	r2, #3
 800a070:	2100      	movs	r1, #0
 800a072:	2001      	movs	r0, #1
 800a074:	f000 f9ce 	bl	800a414 <xQueueGenericCreate>
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <osSemaphoreCreate+0x56>
 800a080:	2300      	movs	r3, #0
 800a082:	2200      	movs	r2, #0
 800a084:	2100      	movs	r1, #0
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 fa1e 	bl	800a4c8 <xQueueGenericSend>
      return sema;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	e000      	b.n	800a092 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a090:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a09a:	b590      	push	{r4, r7, lr}
 800a09c:	b085      	sub	sp, #20
 800a09e:	af02      	add	r7, sp, #8
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d011      	beq.n	800a0d0 <osMessageCreate+0x36>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00d      	beq.n	800a0d0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6818      	ldr	r0, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6859      	ldr	r1, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	2400      	movs	r4, #0
 800a0c6:	9400      	str	r4, [sp, #0]
 800a0c8:	f000 f92c 	bl	800a324 <xQueueGenericCreateStatic>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	e008      	b.n	800a0e2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4619      	mov	r1, r3
 800a0dc:	f000 f99a 	bl	800a414 <xQueueGenericCreate>
 800a0e0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd90      	pop	{r4, r7, pc}

0800a0ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f103 0208 	add.w	r2, r3, #8
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f103 0208 	add.w	r2, r3, #8
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f103 0208 	add.w	r2, r3, #8
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	689a      	ldr	r2, [r3, #8]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	1c5a      	adds	r2, r3, #1
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	601a      	str	r2, [r3, #0]
}
 800a180:	bf00      	nop
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	d103      	bne.n	800a1ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	60fb      	str	r3, [r7, #12]
 800a1aa:	e00c      	b.n	800a1c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3308      	adds	r3, #8
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	e002      	b.n	800a1ba <vListInsert+0x2e>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d2f6      	bcs.n	800a1b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	685a      	ldr	r2, [r3, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	601a      	str	r2, [r3, #0]
}
 800a1f2:	bf00      	nop
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a1fe:	b480      	push	{r7}
 800a200:	b085      	sub	sp, #20
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	6892      	ldr	r2, [r2, #8]
 800a214:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	6852      	ldr	r2, [r2, #4]
 800a21e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	429a      	cmp	r2, r3
 800a228:	d103      	bne.n	800a232 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689a      	ldr	r2, [r3, #8]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	1e5a      	subs	r2, r3, #1
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
	...

0800a254 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a27e:	f001 fdd1 	bl	800be24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28a:	68f9      	ldr	r1, [r7, #12]
 800a28c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a28e:	fb01 f303 	mul.w	r3, r1, r3
 800a292:	441a      	add	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	68f9      	ldr	r1, [r7, #12]
 800a2b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2b4:	fb01 f303 	mul.w	r3, r1, r3
 800a2b8:	441a      	add	r2, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	22ff      	movs	r2, #255	; 0xff
 800a2c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	22ff      	movs	r2, #255	; 0xff
 800a2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d114      	bne.n	800a2fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d01a      	beq.n	800a312 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3310      	adds	r3, #16
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f001 f895 	bl	800b410 <xTaskRemoveFromEventList>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d012      	beq.n	800a312 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a2ec:	4b0c      	ldr	r3, [pc, #48]	; (800a320 <xQueueGenericReset+0xcc>)
 800a2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	e009      	b.n	800a312 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3310      	adds	r3, #16
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fef1 	bl	800a0ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	3324      	adds	r3, #36	; 0x24
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff feec 	bl	800a0ea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a312:	f001 fdb7 	bl	800be84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a316:	2301      	movs	r3, #1
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	e000ed04 	.word	0xe000ed04

0800a324 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08e      	sub	sp, #56	; 0x38
 800a328:	af02      	add	r7, sp, #8
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
 800a330:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a34a:	bf00      	nop
 800a34c:	e7fe      	b.n	800a34c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10a      	bne.n	800a36a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <xQueueGenericCreateStatic+0x52>
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <xQueueGenericCreateStatic+0x56>
 800a376:	2301      	movs	r3, #1
 800a378:	e000      	b.n	800a37c <xQueueGenericCreateStatic+0x58>
 800a37a:	2300      	movs	r3, #0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10a      	bne.n	800a396 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	623b      	str	r3, [r7, #32]
}
 800a392:	bf00      	nop
 800a394:	e7fe      	b.n	800a394 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d102      	bne.n	800a3a2 <xQueueGenericCreateStatic+0x7e>
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <xQueueGenericCreateStatic+0x82>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e000      	b.n	800a3a8 <xQueueGenericCreateStatic+0x84>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10a      	bne.n	800a3c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	61fb      	str	r3, [r7, #28]
}
 800a3be:	bf00      	nop
 800a3c0:	e7fe      	b.n	800a3c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3c2:	2348      	movs	r3, #72	; 0x48
 800a3c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	2b48      	cmp	r3, #72	; 0x48
 800a3ca:	d00a      	beq.n	800a3e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	61bb      	str	r3, [r7, #24]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a3e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00d      	beq.n	800a40a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	4613      	mov	r3, r2
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	68b9      	ldr	r1, [r7, #8]
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 f83f 	bl	800a488 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3730      	adds	r7, #48	; 0x30
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08a      	sub	sp, #40	; 0x28
 800a418:	af02      	add	r7, sp, #8
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	613b      	str	r3, [r7, #16]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	fb02 f303 	mul.w	r3, r2, r3
 800a446:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	3348      	adds	r3, #72	; 0x48
 800a44c:	4618      	mov	r0, r3
 800a44e:	f001 fe0b 	bl	800c068 <pvPortMalloc>
 800a452:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d011      	beq.n	800a47e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	3348      	adds	r3, #72	; 0x48
 800a462:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a46c:	79fa      	ldrb	r2, [r7, #7]
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	4613      	mov	r3, r2
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 f805 	bl	800a488 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a47e:	69bb      	ldr	r3, [r7, #24]
	}
 800a480:	4618      	mov	r0, r3
 800a482:	3720      	adds	r7, #32
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d103      	bne.n	800a4a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	69ba      	ldr	r2, [r7, #24]
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	e002      	b.n	800a4aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	69b8      	ldr	r0, [r7, #24]
 800a4ba:	f7ff fecb 	bl	800a254 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4be:	bf00      	nop
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08e      	sub	sp, #56	; 0x38
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <xQueueGenericSend+0x32>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d103      	bne.n	800a508 <xQueueGenericSend+0x40>
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <xQueueGenericSend+0x44>
 800a508:	2301      	movs	r3, #1
 800a50a:	e000      	b.n	800a50e <xQueueGenericSend+0x46>
 800a50c:	2300      	movs	r3, #0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <xQueueGenericSend+0x60>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a524:	bf00      	nop
 800a526:	e7fe      	b.n	800a526 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d103      	bne.n	800a536 <xQueueGenericSend+0x6e>
 800a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a532:	2b01      	cmp	r3, #1
 800a534:	d101      	bne.n	800a53a <xQueueGenericSend+0x72>
 800a536:	2301      	movs	r3, #1
 800a538:	e000      	b.n	800a53c <xQueueGenericSend+0x74>
 800a53a:	2300      	movs	r3, #0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <xQueueGenericSend+0x8e>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	623b      	str	r3, [r7, #32]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a556:	f001 f917 	bl	800b788 <xTaskGetSchedulerState>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d102      	bne.n	800a566 <xQueueGenericSend+0x9e>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <xQueueGenericSend+0xa2>
 800a566:	2301      	movs	r3, #1
 800a568:	e000      	b.n	800a56c <xQueueGenericSend+0xa4>
 800a56a:	2300      	movs	r3, #0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10a      	bne.n	800a586 <xQueueGenericSend+0xbe>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	61fb      	str	r3, [r7, #28]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a586:	f001 fc4d 	bl	800be24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a592:	429a      	cmp	r2, r3
 800a594:	d302      	bcc.n	800a59c <xQueueGenericSend+0xd4>
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d129      	bne.n	800a5f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	68b9      	ldr	r1, [r7, #8]
 800a5a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5a2:	f000 fa41 	bl	800aa28 <prvCopyDataToQueue>
 800a5a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d010      	beq.n	800a5d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	3324      	adds	r3, #36	; 0x24
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f000 ff2b 	bl	800b410 <xTaskRemoveFromEventList>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d013      	beq.n	800a5e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a5c0:	4b3f      	ldr	r3, [pc, #252]	; (800a6c0 <xQueueGenericSend+0x1f8>)
 800a5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	e00a      	b.n	800a5e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d007      	beq.n	800a5e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a5d8:	4b39      	ldr	r3, [pc, #228]	; (800a6c0 <xQueueGenericSend+0x1f8>)
 800a5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a5e8:	f001 fc4c 	bl	800be84 <vPortExitCritical>
				return pdPASS;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e063      	b.n	800a6b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d103      	bne.n	800a5fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5f6:	f001 fc45 	bl	800be84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e05c      	b.n	800a6b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a600:	2b00      	cmp	r3, #0
 800a602:	d106      	bne.n	800a612 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a604:	f107 0314 	add.w	r3, r7, #20
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 ff63 	bl	800b4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a60e:	2301      	movs	r3, #1
 800a610:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a612:	f001 fc37 	bl	800be84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a616:	f000 fd19 	bl	800b04c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a61a:	f001 fc03 	bl	800be24 <vPortEnterCritical>
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a624:	b25b      	sxtb	r3, r3
 800a626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62a:	d103      	bne.n	800a634 <xQueueGenericSend+0x16c>
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a63a:	b25b      	sxtb	r3, r3
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a640:	d103      	bne.n	800a64a <xQueueGenericSend+0x182>
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a64a:	f001 fc1b 	bl	800be84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a64e:	1d3a      	adds	r2, r7, #4
 800a650:	f107 0314 	add.w	r3, r7, #20
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f000 ff52 	bl	800b500 <xTaskCheckForTimeOut>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d124      	bne.n	800a6ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a664:	f000 fab2 	bl	800abcc <prvIsQueueFull>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d018      	beq.n	800a6a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	3310      	adds	r3, #16
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	4611      	mov	r1, r2
 800a676:	4618      	mov	r0, r3
 800a678:	f000 fea6 	bl	800b3c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a67c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a67e:	f000 fa3d 	bl	800aafc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a682:	f000 fcf1 	bl	800b068 <xTaskResumeAll>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f47f af7c 	bne.w	800a586 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a68e:	4b0c      	ldr	r3, [pc, #48]	; (800a6c0 <xQueueGenericSend+0x1f8>)
 800a690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a694:	601a      	str	r2, [r3, #0]
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	e772      	b.n	800a586 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a6a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6a2:	f000 fa2b 	bl	800aafc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6a6:	f000 fcdf 	bl	800b068 <xTaskResumeAll>
 800a6aa:	e76c      	b.n	800a586 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a6ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ae:	f000 fa25 	bl	800aafc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6b2:	f000 fcd9 	bl	800b068 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a6b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3738      	adds	r7, #56	; 0x38
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	e000ed04 	.word	0xe000ed04

0800a6c4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b08e      	sub	sp, #56	; 0x38
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	623b      	str	r3, [r7, #32]
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <xQueueGiveFromISR+0x48>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	61fb      	str	r3, [r7, #28]
}
 800a708:	bf00      	nop
 800a70a:	e7fe      	b.n	800a70a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d103      	bne.n	800a71c <xQueueGiveFromISR+0x58>
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <xQueueGiveFromISR+0x5c>
 800a71c:	2301      	movs	r3, #1
 800a71e:	e000      	b.n	800a722 <xQueueGiveFromISR+0x5e>
 800a720:	2300      	movs	r3, #0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10a      	bne.n	800a73c <xQueueGiveFromISR+0x78>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	61bb      	str	r3, [r7, #24]
}
 800a738:	bf00      	nop
 800a73a:	e7fe      	b.n	800a73a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a73c:	f001 fc54 	bl	800bfe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a740:	f3ef 8211 	mrs	r2, BASEPRI
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	617a      	str	r2, [r7, #20]
 800a756:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a758:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a75a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a760:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a768:	429a      	cmp	r2, r3
 800a76a:	d22b      	bcs.n	800a7c4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a77e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a786:	d112      	bne.n	800a7ae <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d016      	beq.n	800a7be <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a792:	3324      	adds	r3, #36	; 0x24
 800a794:	4618      	mov	r0, r3
 800a796:	f000 fe3b 	bl	800b410 <xTaskRemoveFromEventList>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00e      	beq.n	800a7be <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00b      	beq.n	800a7be <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	e007      	b.n	800a7be <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a7ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	b25a      	sxtb	r2, r3
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7c2:	e001      	b.n	800a7c8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ca:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a7d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3738      	adds	r7, #56	; 0x38
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b08e      	sub	sp, #56	; 0x38
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10a      	bne.n	800a812 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	623b      	str	r3, [r7, #32]
}
 800a80e:	bf00      	nop
 800a810:	e7fe      	b.n	800a810 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	61fb      	str	r3, [r7, #28]
}
 800a82c:	bf00      	nop
 800a82e:	e7fe      	b.n	800a82e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a830:	f000 ffaa 	bl	800b788 <xTaskGetSchedulerState>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d102      	bne.n	800a840 <xQueueSemaphoreTake+0x60>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <xQueueSemaphoreTake+0x64>
 800a840:	2301      	movs	r3, #1
 800a842:	e000      	b.n	800a846 <xQueueSemaphoreTake+0x66>
 800a844:	2300      	movs	r3, #0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	61bb      	str	r3, [r7, #24]
}
 800a85c:	bf00      	nop
 800a85e:	e7fe      	b.n	800a85e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a860:	f001 fae0 	bl	800be24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a868:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d024      	beq.n	800a8ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	1e5a      	subs	r2, r3, #1
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d104      	bne.n	800a88a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a880:	f001 f92a 	bl	800bad8 <pvTaskIncrementMutexHeldCount>
 800a884:	4602      	mov	r2, r0
 800a886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a888:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00f      	beq.n	800a8b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	3310      	adds	r3, #16
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fdba 	bl	800b410 <xTaskRemoveFromEventList>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d007      	beq.n	800a8b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8a2:	4b54      	ldr	r3, [pc, #336]	; (800a9f4 <xQueueSemaphoreTake+0x214>)
 800a8a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8b2:	f001 fae7 	bl	800be84 <vPortExitCritical>
				return pdPASS;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e097      	b.n	800a9ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d111      	bne.n	800a8e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	617b      	str	r3, [r7, #20]
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a8dc:	f001 fad2 	bl	800be84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	e082      	b.n	800a9ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8ea:	f107 030c 	add.w	r3, r7, #12
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 fdf0 	bl	800b4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8f8:	f001 fac4 	bl	800be84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8fc:	f000 fba6 	bl	800b04c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a900:	f001 fa90 	bl	800be24 <vPortEnterCritical>
 800a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a90a:	b25b      	sxtb	r3, r3
 800a90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a910:	d103      	bne.n	800a91a <xQueueSemaphoreTake+0x13a>
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a920:	b25b      	sxtb	r3, r3
 800a922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a926:	d103      	bne.n	800a930 <xQueueSemaphoreTake+0x150>
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a930:	f001 faa8 	bl	800be84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a934:	463a      	mov	r2, r7
 800a936:	f107 030c 	add.w	r3, r7, #12
 800a93a:	4611      	mov	r1, r2
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 fddf 	bl	800b500 <xTaskCheckForTimeOut>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d132      	bne.n	800a9ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a94a:	f000 f929 	bl	800aba0 <prvIsQueueEmpty>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d026      	beq.n	800a9a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d109      	bne.n	800a970 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a95c:	f001 fa62 	bl	800be24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	4618      	mov	r0, r3
 800a966:	f000 ff2d 	bl	800b7c4 <xTaskPriorityInherit>
 800a96a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a96c:	f001 fa8a 	bl	800be84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	3324      	adds	r3, #36	; 0x24
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	4611      	mov	r1, r2
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 fd25 	bl	800b3c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a97e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a980:	f000 f8bc 	bl	800aafc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a984:	f000 fb70 	bl	800b068 <xTaskResumeAll>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f47f af68 	bne.w	800a860 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a990:	4b18      	ldr	r3, [pc, #96]	; (800a9f4 <xQueueSemaphoreTake+0x214>)
 800a992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	e75e      	b.n	800a860 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a9a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9a4:	f000 f8aa 	bl	800aafc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9a8:	f000 fb5e 	bl	800b068 <xTaskResumeAll>
 800a9ac:	e758      	b.n	800a860 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a9ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9b0:	f000 f8a4 	bl	800aafc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9b4:	f000 fb58 	bl	800b068 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9ba:	f000 f8f1 	bl	800aba0 <prvIsQueueEmpty>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f43f af4d 	beq.w	800a860 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00d      	beq.n	800a9e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a9cc:	f001 fa2a 	bl	800be24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a9d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9d2:	f000 f811 	bl	800a9f8 <prvGetDisinheritPriorityAfterTimeout>
 800a9d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 ffec 	bl	800b9bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a9e4:	f001 fa4e 	bl	800be84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a9e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3738      	adds	r7, #56	; 0x38
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	e000ed04 	.word	0xe000ed04

0800a9f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d006      	beq.n	800aa16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f1c3 0307 	rsb	r3, r3, #7
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	e001      	b.n	800aa1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa16:	2300      	movs	r3, #0
 800aa18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
	}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa34:	2300      	movs	r3, #0
 800aa36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d10d      	bne.n	800aa62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d14d      	bne.n	800aaea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 ff2c 	bl	800b8b0 <xTaskPriorityDisinherit>
 800aa58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	609a      	str	r2, [r3, #8]
 800aa60:	e043      	b.n	800aaea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d119      	bne.n	800aa9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6858      	ldr	r0, [r3, #4]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa70:	461a      	mov	r2, r3
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	f004 f912 	bl	800ec9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa80:	441a      	add	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	685a      	ldr	r2, [r3, #4]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d32b      	bcc.n	800aaea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	605a      	str	r2, [r3, #4]
 800aa9a:	e026      	b.n	800aaea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	68d8      	ldr	r0, [r3, #12]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	68b9      	ldr	r1, [r7, #8]
 800aaa8:	f004 f8f8 	bl	800ec9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	68da      	ldr	r2, [r3, #12]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab4:	425b      	negs	r3, r3
 800aab6:	441a      	add	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	68da      	ldr	r2, [r3, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d207      	bcs.n	800aad8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	689a      	ldr	r2, [r3, #8]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad0:	425b      	negs	r3, r3
 800aad2:	441a      	add	r2, r3
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d105      	bne.n	800aaea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aaf2:	697b      	ldr	r3, [r7, #20]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3718      	adds	r7, #24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab04:	f001 f98e 	bl	800be24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab10:	e011      	b.n	800ab36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d012      	beq.n	800ab40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	3324      	adds	r3, #36	; 0x24
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 fc76 	bl	800b410 <xTaskRemoveFromEventList>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab2a:	f000 fd4b 	bl	800b5c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab2e:	7bfb      	ldrb	r3, [r7, #15]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	dce9      	bgt.n	800ab12 <prvUnlockQueue+0x16>
 800ab3e:	e000      	b.n	800ab42 <prvUnlockQueue+0x46>
					break;
 800ab40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	22ff      	movs	r2, #255	; 0xff
 800ab46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab4a:	f001 f99b 	bl	800be84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab4e:	f001 f969 	bl	800be24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab5a:	e011      	b.n	800ab80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d012      	beq.n	800ab8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3310      	adds	r3, #16
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 fc51 	bl	800b410 <xTaskRemoveFromEventList>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab74:	f000 fd26 	bl	800b5c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	dce9      	bgt.n	800ab5c <prvUnlockQueue+0x60>
 800ab88:	e000      	b.n	800ab8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	22ff      	movs	r2, #255	; 0xff
 800ab90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab94:	f001 f976 	bl	800be84 <vPortExitCritical>
}
 800ab98:	bf00      	nop
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aba8:	f001 f93c 	bl	800be24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d102      	bne.n	800abba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800abb4:	2301      	movs	r3, #1
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	e001      	b.n	800abbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800abba:	2300      	movs	r3, #0
 800abbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abbe:	f001 f961 	bl	800be84 <vPortExitCritical>

	return xReturn;
 800abc2:	68fb      	ldr	r3, [r7, #12]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abd4:	f001 f926 	bl	800be24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d102      	bne.n	800abea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800abe4:	2301      	movs	r3, #1
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	e001      	b.n	800abee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abee:	f001 f949 	bl	800be84 <vPortExitCritical>

	return xReturn;
 800abf2:	68fb      	ldr	r3, [r7, #12]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08e      	sub	sp, #56	; 0x38
 800ac00:	af04      	add	r7, sp, #16
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	623b      	str	r3, [r7, #32]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10a      	bne.n	800ac42 <xTaskCreateStatic+0x46>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	61fb      	str	r3, [r7, #28]
}
 800ac3e:	bf00      	nop
 800ac40:	e7fe      	b.n	800ac40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac42:	2354      	movs	r3, #84	; 0x54
 800ac44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2b54      	cmp	r3, #84	; 0x54
 800ac4a:	d00a      	beq.n	800ac62 <xTaskCreateStatic+0x66>
	__asm volatile
 800ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	61bb      	str	r3, [r7, #24]
}
 800ac5e:	bf00      	nop
 800ac60:	e7fe      	b.n	800ac60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d01e      	beq.n	800aca8 <xTaskCreateStatic+0xac>
 800ac6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01b      	beq.n	800aca8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac82:	2300      	movs	r3, #0
 800ac84:	9303      	str	r3, [sp, #12]
 800ac86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac88:	9302      	str	r3, [sp, #8]
 800ac8a:	f107 0314 	add.w	r3, r7, #20
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f000 f850 	bl	800ad40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aca2:	f000 f8d5 	bl	800ae50 <prvAddNewTaskToReadyList>
 800aca6:	e001      	b.n	800acac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aca8:	2300      	movs	r3, #0
 800acaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800acac:	697b      	ldr	r3, [r7, #20]
	}
 800acae:	4618      	mov	r0, r3
 800acb0:	3728      	adds	r7, #40	; 0x28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b08c      	sub	sp, #48	; 0x30
 800acba:	af04      	add	r7, sp, #16
 800acbc:	60f8      	str	r0, [r7, #12]
 800acbe:	60b9      	str	r1, [r7, #8]
 800acc0:	603b      	str	r3, [r7, #0]
 800acc2:	4613      	mov	r3, r2
 800acc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800acc6:	88fb      	ldrh	r3, [r7, #6]
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4618      	mov	r0, r3
 800accc:	f001 f9cc 	bl	800c068 <pvPortMalloc>
 800acd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00e      	beq.n	800acf6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800acd8:	2054      	movs	r0, #84	; 0x54
 800acda:	f001 f9c5 	bl	800c068 <pvPortMalloc>
 800acde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d003      	beq.n	800acee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	631a      	str	r2, [r3, #48]	; 0x30
 800acec:	e005      	b.n	800acfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800acee:	6978      	ldr	r0, [r7, #20]
 800acf0:	f001 fa86 	bl	800c200 <vPortFree>
 800acf4:	e001      	b.n	800acfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d017      	beq.n	800ad30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad08:	88fa      	ldrh	r2, [r7, #6]
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	9303      	str	r3, [sp, #12]
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	9302      	str	r3, [sp, #8]
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	9301      	str	r3, [sp, #4]
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68b9      	ldr	r1, [r7, #8]
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f000 f80e 	bl	800ad40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad24:	69f8      	ldr	r0, [r7, #28]
 800ad26:	f000 f893 	bl	800ae50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	61bb      	str	r3, [r7, #24]
 800ad2e:	e002      	b.n	800ad36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad30:	f04f 33ff 	mov.w	r3, #4294967295
 800ad34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad36:	69bb      	ldr	r3, [r7, #24]
	}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3720      	adds	r7, #32
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad52:	6879      	ldr	r1, [r7, #4]
 800ad54:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ad58:	440b      	add	r3, r1
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	f023 0307 	bic.w	r3, r3, #7
 800ad66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	f003 0307 	and.w	r3, r3, #7
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00a      	beq.n	800ad88 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	617b      	str	r3, [r7, #20]
}
 800ad84:	bf00      	nop
 800ad86:	e7fe      	b.n	800ad86 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d01f      	beq.n	800adce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad8e:	2300      	movs	r3, #0
 800ad90:	61fb      	str	r3, [r7, #28]
 800ad92:	e012      	b.n	800adba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	4413      	add	r3, r2
 800ad9a:	7819      	ldrb	r1, [r3, #0]
 800ad9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	4413      	add	r3, r2
 800ada2:	3334      	adds	r3, #52	; 0x34
 800ada4:	460a      	mov	r2, r1
 800ada6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	4413      	add	r3, r2
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d006      	beq.n	800adc2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	3301      	adds	r3, #1
 800adb8:	61fb      	str	r3, [r7, #28]
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	2b0f      	cmp	r3, #15
 800adbe:	d9e9      	bls.n	800ad94 <prvInitialiseNewTask+0x54>
 800adc0:	e000      	b.n	800adc4 <prvInitialiseNewTask+0x84>
			{
				break;
 800adc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800adcc:	e003      	b.n	800add6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800add6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add8:	2b06      	cmp	r3, #6
 800adda:	d901      	bls.n	800ade0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800addc:	2306      	movs	r3, #6
 800adde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ade4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ade6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adee:	2200      	movs	r2, #0
 800adf0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf4:	3304      	adds	r3, #4
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff f997 	bl	800a12a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	3318      	adds	r3, #24
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7ff f992 	bl	800a12a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0e:	f1c3 0207 	rsb	r2, r3, #7
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	2200      	movs	r2, #0
 800ae20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	68f9      	ldr	r1, [r7, #12]
 800ae2e:	69b8      	ldr	r0, [r7, #24]
 800ae30:	f000 fecc 	bl	800bbcc <pxPortInitialiseStack>
 800ae34:	4602      	mov	r2, r0
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d002      	beq.n	800ae46 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae46:	bf00      	nop
 800ae48:	3720      	adds	r7, #32
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
	...

0800ae50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae58:	f000 ffe4 	bl	800be24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae5c:	4b2a      	ldr	r3, [pc, #168]	; (800af08 <prvAddNewTaskToReadyList+0xb8>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3301      	adds	r3, #1
 800ae62:	4a29      	ldr	r2, [pc, #164]	; (800af08 <prvAddNewTaskToReadyList+0xb8>)
 800ae64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae66:	4b29      	ldr	r3, [pc, #164]	; (800af0c <prvAddNewTaskToReadyList+0xbc>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d109      	bne.n	800ae82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae6e:	4a27      	ldr	r2, [pc, #156]	; (800af0c <prvAddNewTaskToReadyList+0xbc>)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae74:	4b24      	ldr	r3, [pc, #144]	; (800af08 <prvAddNewTaskToReadyList+0xb8>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d110      	bne.n	800ae9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae7c:	f000 fbc6 	bl	800b60c <prvInitialiseTaskLists>
 800ae80:	e00d      	b.n	800ae9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae82:	4b23      	ldr	r3, [pc, #140]	; (800af10 <prvAddNewTaskToReadyList+0xc0>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d109      	bne.n	800ae9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae8a:	4b20      	ldr	r3, [pc, #128]	; (800af0c <prvAddNewTaskToReadyList+0xbc>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d802      	bhi.n	800ae9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae98:	4a1c      	ldr	r2, [pc, #112]	; (800af0c <prvAddNewTaskToReadyList+0xbc>)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae9e:	4b1d      	ldr	r3, [pc, #116]	; (800af14 <prvAddNewTaskToReadyList+0xc4>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3301      	adds	r3, #1
 800aea4:	4a1b      	ldr	r2, [pc, #108]	; (800af14 <prvAddNewTaskToReadyList+0xc4>)
 800aea6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeac:	2201      	movs	r2, #1
 800aeae:	409a      	lsls	r2, r3
 800aeb0:	4b19      	ldr	r3, [pc, #100]	; (800af18 <prvAddNewTaskToReadyList+0xc8>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	4a18      	ldr	r2, [pc, #96]	; (800af18 <prvAddNewTaskToReadyList+0xc8>)
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aebe:	4613      	mov	r3, r2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4a15      	ldr	r2, [pc, #84]	; (800af1c <prvAddNewTaskToReadyList+0xcc>)
 800aec8:	441a      	add	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3304      	adds	r3, #4
 800aece:	4619      	mov	r1, r3
 800aed0:	4610      	mov	r0, r2
 800aed2:	f7ff f937 	bl	800a144 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aed6:	f000 ffd5 	bl	800be84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aeda:	4b0d      	ldr	r3, [pc, #52]	; (800af10 <prvAddNewTaskToReadyList+0xc0>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00e      	beq.n	800af00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aee2:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <prvAddNewTaskToReadyList+0xbc>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d207      	bcs.n	800af00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aef0:	4b0b      	ldr	r3, [pc, #44]	; (800af20 <prvAddNewTaskToReadyList+0xd0>)
 800aef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef6:	601a      	str	r2, [r3, #0]
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	24000130 	.word	0x24000130
 800af0c:	24000030 	.word	0x24000030
 800af10:	2400013c 	.word	0x2400013c
 800af14:	2400014c 	.word	0x2400014c
 800af18:	24000138 	.word	0x24000138
 800af1c:	24000034 	.word	0x24000034
 800af20:	e000ed04 	.word	0xe000ed04

0800af24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d017      	beq.n	800af66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af36:	4b13      	ldr	r3, [pc, #76]	; (800af84 <vTaskDelay+0x60>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00a      	beq.n	800af54 <vTaskDelay+0x30>
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	60bb      	str	r3, [r7, #8]
}
 800af50:	bf00      	nop
 800af52:	e7fe      	b.n	800af52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af54:	f000 f87a 	bl	800b04c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af58:	2100      	movs	r1, #0
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fdd0 	bl	800bb00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af60:	f000 f882 	bl	800b068 <xTaskResumeAll>
 800af64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d107      	bne.n	800af7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <vTaskDelay+0x64>)
 800af6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af7c:	bf00      	nop
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	24000158 	.word	0x24000158
 800af88:	e000ed04 	.word	0xe000ed04

0800af8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08a      	sub	sp, #40	; 0x28
 800af90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af92:	2300      	movs	r3, #0
 800af94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af96:	2300      	movs	r3, #0
 800af98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af9a:	463a      	mov	r2, r7
 800af9c:	1d39      	adds	r1, r7, #4
 800af9e:	f107 0308 	add.w	r3, r7, #8
 800afa2:	4618      	mov	r0, r3
 800afa4:	f001 fa92 	bl	800c4cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	9202      	str	r2, [sp, #8]
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	2300      	movs	r3, #0
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	2300      	movs	r3, #0
 800afb8:	460a      	mov	r2, r1
 800afba:	491e      	ldr	r1, [pc, #120]	; (800b034 <vTaskStartScheduler+0xa8>)
 800afbc:	481e      	ldr	r0, [pc, #120]	; (800b038 <vTaskStartScheduler+0xac>)
 800afbe:	f7ff fe1d 	bl	800abfc <xTaskCreateStatic>
 800afc2:	4603      	mov	r3, r0
 800afc4:	4a1d      	ldr	r2, [pc, #116]	; (800b03c <vTaskStartScheduler+0xb0>)
 800afc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800afc8:	4b1c      	ldr	r3, [pc, #112]	; (800b03c <vTaskStartScheduler+0xb0>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d002      	beq.n	800afd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afd0:	2301      	movs	r3, #1
 800afd2:	617b      	str	r3, [r7, #20]
 800afd4:	e001      	b.n	800afda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d116      	bne.n	800b00e <vTaskStartScheduler+0x82>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	613b      	str	r3, [r7, #16]
}
 800aff2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aff4:	4b12      	ldr	r3, [pc, #72]	; (800b040 <vTaskStartScheduler+0xb4>)
 800aff6:	f04f 32ff 	mov.w	r2, #4294967295
 800affa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800affc:	4b11      	ldr	r3, [pc, #68]	; (800b044 <vTaskStartScheduler+0xb8>)
 800affe:	2201      	movs	r2, #1
 800b000:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b002:	4b11      	ldr	r3, [pc, #68]	; (800b048 <vTaskStartScheduler+0xbc>)
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b008:	f000 fe6a 	bl	800bce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b00c:	e00e      	b.n	800b02c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b014:	d10a      	bne.n	800b02c <vTaskStartScheduler+0xa0>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	60fb      	str	r3, [r7, #12]
}
 800b028:	bf00      	nop
 800b02a:	e7fe      	b.n	800b02a <vTaskStartScheduler+0x9e>
}
 800b02c:	bf00      	nop
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	0800ece0 	.word	0x0800ece0
 800b038:	0800b5dd 	.word	0x0800b5dd
 800b03c:	24000154 	.word	0x24000154
 800b040:	24000150 	.word	0x24000150
 800b044:	2400013c 	.word	0x2400013c
 800b048:	24000134 	.word	0x24000134

0800b04c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b050:	4b04      	ldr	r3, [pc, #16]	; (800b064 <vTaskSuspendAll+0x18>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3301      	adds	r3, #1
 800b056:	4a03      	ldr	r2, [pc, #12]	; (800b064 <vTaskSuspendAll+0x18>)
 800b058:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b05a:	bf00      	nop
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	24000158 	.word	0x24000158

0800b068 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b072:	2300      	movs	r3, #0
 800b074:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b076:	4b41      	ldr	r3, [pc, #260]	; (800b17c <xTaskResumeAll+0x114>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10a      	bne.n	800b094 <xTaskResumeAll+0x2c>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	603b      	str	r3, [r7, #0]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b094:	f000 fec6 	bl	800be24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b098:	4b38      	ldr	r3, [pc, #224]	; (800b17c <xTaskResumeAll+0x114>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	4a37      	ldr	r2, [pc, #220]	; (800b17c <xTaskResumeAll+0x114>)
 800b0a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0a2:	4b36      	ldr	r3, [pc, #216]	; (800b17c <xTaskResumeAll+0x114>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d161      	bne.n	800b16e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0aa:	4b35      	ldr	r3, [pc, #212]	; (800b180 <xTaskResumeAll+0x118>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d05d      	beq.n	800b16e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0b2:	e02e      	b.n	800b112 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0b4:	4b33      	ldr	r3, [pc, #204]	; (800b184 <xTaskResumeAll+0x11c>)
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	3318      	adds	r3, #24
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7ff f89c 	bl	800a1fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7ff f897 	bl	800a1fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	409a      	lsls	r2, r3
 800b0d8:	4b2b      	ldr	r3, [pc, #172]	; (800b188 <xTaskResumeAll+0x120>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	4a2a      	ldr	r2, [pc, #168]	; (800b188 <xTaskResumeAll+0x120>)
 800b0e0:	6013      	str	r3, [r2, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4a27      	ldr	r2, [pc, #156]	; (800b18c <xTaskResumeAll+0x124>)
 800b0f0:	441a      	add	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	f7ff f823 	bl	800a144 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b102:	4b23      	ldr	r3, [pc, #140]	; (800b190 <xTaskResumeAll+0x128>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	429a      	cmp	r2, r3
 800b10a:	d302      	bcc.n	800b112 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b10c:	4b21      	ldr	r3, [pc, #132]	; (800b194 <xTaskResumeAll+0x12c>)
 800b10e:	2201      	movs	r2, #1
 800b110:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b112:	4b1c      	ldr	r3, [pc, #112]	; (800b184 <xTaskResumeAll+0x11c>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1cc      	bne.n	800b0b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b120:	f000 fb12 	bl	800b748 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b124:	4b1c      	ldr	r3, [pc, #112]	; (800b198 <xTaskResumeAll+0x130>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d010      	beq.n	800b152 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b130:	f000 f836 	bl	800b1a0 <xTaskIncrementTick>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d002      	beq.n	800b140 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b13a:	4b16      	ldr	r3, [pc, #88]	; (800b194 <xTaskResumeAll+0x12c>)
 800b13c:	2201      	movs	r2, #1
 800b13e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3b01      	subs	r3, #1
 800b144:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1f1      	bne.n	800b130 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b14c:	4b12      	ldr	r3, [pc, #72]	; (800b198 <xTaskResumeAll+0x130>)
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b152:	4b10      	ldr	r3, [pc, #64]	; (800b194 <xTaskResumeAll+0x12c>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d009      	beq.n	800b16e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b15a:	2301      	movs	r3, #1
 800b15c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b15e:	4b0f      	ldr	r3, [pc, #60]	; (800b19c <xTaskResumeAll+0x134>)
 800b160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b164:	601a      	str	r2, [r3, #0]
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b16e:	f000 fe89 	bl	800be84 <vPortExitCritical>

	return xAlreadyYielded;
 800b172:	68bb      	ldr	r3, [r7, #8]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	24000158 	.word	0x24000158
 800b180:	24000130 	.word	0x24000130
 800b184:	240000f0 	.word	0x240000f0
 800b188:	24000138 	.word	0x24000138
 800b18c:	24000034 	.word	0x24000034
 800b190:	24000030 	.word	0x24000030
 800b194:	24000144 	.word	0x24000144
 800b198:	24000140 	.word	0x24000140
 800b19c:	e000ed04 	.word	0xe000ed04

0800b1a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1aa:	4b4e      	ldr	r3, [pc, #312]	; (800b2e4 <xTaskIncrementTick+0x144>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f040 808e 	bne.w	800b2d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1b4:	4b4c      	ldr	r3, [pc, #304]	; (800b2e8 <xTaskIncrementTick+0x148>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1bc:	4a4a      	ldr	r2, [pc, #296]	; (800b2e8 <xTaskIncrementTick+0x148>)
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d120      	bne.n	800b20a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1c8:	4b48      	ldr	r3, [pc, #288]	; (800b2ec <xTaskIncrementTick+0x14c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00a      	beq.n	800b1e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	603b      	str	r3, [r7, #0]
}
 800b1e4:	bf00      	nop
 800b1e6:	e7fe      	b.n	800b1e6 <xTaskIncrementTick+0x46>
 800b1e8:	4b40      	ldr	r3, [pc, #256]	; (800b2ec <xTaskIncrementTick+0x14c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	60fb      	str	r3, [r7, #12]
 800b1ee:	4b40      	ldr	r3, [pc, #256]	; (800b2f0 <xTaskIncrementTick+0x150>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a3e      	ldr	r2, [pc, #248]	; (800b2ec <xTaskIncrementTick+0x14c>)
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	4a3e      	ldr	r2, [pc, #248]	; (800b2f0 <xTaskIncrementTick+0x150>)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	4b3d      	ldr	r3, [pc, #244]	; (800b2f4 <xTaskIncrementTick+0x154>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3301      	adds	r3, #1
 800b202:	4a3c      	ldr	r2, [pc, #240]	; (800b2f4 <xTaskIncrementTick+0x154>)
 800b204:	6013      	str	r3, [r2, #0]
 800b206:	f000 fa9f 	bl	800b748 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b20a:	4b3b      	ldr	r3, [pc, #236]	; (800b2f8 <xTaskIncrementTick+0x158>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	429a      	cmp	r2, r3
 800b212:	d348      	bcc.n	800b2a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b214:	4b35      	ldr	r3, [pc, #212]	; (800b2ec <xTaskIncrementTick+0x14c>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d104      	bne.n	800b228 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b21e:	4b36      	ldr	r3, [pc, #216]	; (800b2f8 <xTaskIncrementTick+0x158>)
 800b220:	f04f 32ff 	mov.w	r2, #4294967295
 800b224:	601a      	str	r2, [r3, #0]
					break;
 800b226:	e03e      	b.n	800b2a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b228:	4b30      	ldr	r3, [pc, #192]	; (800b2ec <xTaskIncrementTick+0x14c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d203      	bcs.n	800b248 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b240:	4a2d      	ldr	r2, [pc, #180]	; (800b2f8 <xTaskIncrementTick+0x158>)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b246:	e02e      	b.n	800b2a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	3304      	adds	r3, #4
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fe ffd6 	bl	800a1fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b256:	2b00      	cmp	r3, #0
 800b258:	d004      	beq.n	800b264 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	3318      	adds	r3, #24
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe ffcd 	bl	800a1fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b268:	2201      	movs	r2, #1
 800b26a:	409a      	lsls	r2, r3
 800b26c:	4b23      	ldr	r3, [pc, #140]	; (800b2fc <xTaskIncrementTick+0x15c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4313      	orrs	r3, r2
 800b272:	4a22      	ldr	r2, [pc, #136]	; (800b2fc <xTaskIncrementTick+0x15c>)
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b27a:	4613      	mov	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4a1f      	ldr	r2, [pc, #124]	; (800b300 <xTaskIncrementTick+0x160>)
 800b284:	441a      	add	r2, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	3304      	adds	r3, #4
 800b28a:	4619      	mov	r1, r3
 800b28c:	4610      	mov	r0, r2
 800b28e:	f7fe ff59 	bl	800a144 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b296:	4b1b      	ldr	r3, [pc, #108]	; (800b304 <xTaskIncrementTick+0x164>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d3b9      	bcc.n	800b214 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2a4:	e7b6      	b.n	800b214 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2a6:	4b17      	ldr	r3, [pc, #92]	; (800b304 <xTaskIncrementTick+0x164>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ac:	4914      	ldr	r1, [pc, #80]	; (800b300 <xTaskIncrementTick+0x160>)
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	440b      	add	r3, r1
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d901      	bls.n	800b2c2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2c2:	4b11      	ldr	r3, [pc, #68]	; (800b308 <xTaskIncrementTick+0x168>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d007      	beq.n	800b2da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	617b      	str	r3, [r7, #20]
 800b2ce:	e004      	b.n	800b2da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2d0:	4b0e      	ldr	r3, [pc, #56]	; (800b30c <xTaskIncrementTick+0x16c>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	4a0d      	ldr	r2, [pc, #52]	; (800b30c <xTaskIncrementTick+0x16c>)
 800b2d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2da:	697b      	ldr	r3, [r7, #20]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	24000158 	.word	0x24000158
 800b2e8:	24000134 	.word	0x24000134
 800b2ec:	240000e8 	.word	0x240000e8
 800b2f0:	240000ec 	.word	0x240000ec
 800b2f4:	24000148 	.word	0x24000148
 800b2f8:	24000150 	.word	0x24000150
 800b2fc:	24000138 	.word	0x24000138
 800b300:	24000034 	.word	0x24000034
 800b304:	24000030 	.word	0x24000030
 800b308:	24000144 	.word	0x24000144
 800b30c:	24000140 	.word	0x24000140

0800b310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b310:	b480      	push	{r7}
 800b312:	b087      	sub	sp, #28
 800b314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b316:	4b27      	ldr	r3, [pc, #156]	; (800b3b4 <vTaskSwitchContext+0xa4>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b31e:	4b26      	ldr	r3, [pc, #152]	; (800b3b8 <vTaskSwitchContext+0xa8>)
 800b320:	2201      	movs	r2, #1
 800b322:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b324:	e03f      	b.n	800b3a6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b326:	4b24      	ldr	r3, [pc, #144]	; (800b3b8 <vTaskSwitchContext+0xa8>)
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b32c:	4b23      	ldr	r3, [pc, #140]	; (800b3bc <vTaskSwitchContext+0xac>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	fab3 f383 	clz	r3, r3
 800b338:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b33a:	7afb      	ldrb	r3, [r7, #11]
 800b33c:	f1c3 031f 	rsb	r3, r3, #31
 800b340:	617b      	str	r3, [r7, #20]
 800b342:	491f      	ldr	r1, [pc, #124]	; (800b3c0 <vTaskSwitchContext+0xb0>)
 800b344:	697a      	ldr	r2, [r7, #20]
 800b346:	4613      	mov	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4413      	add	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	440b      	add	r3, r1
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10a      	bne.n	800b36c <vTaskSwitchContext+0x5c>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	607b      	str	r3, [r7, #4]
}
 800b368:	bf00      	nop
 800b36a:	e7fe      	b.n	800b36a <vTaskSwitchContext+0x5a>
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	4613      	mov	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4a12      	ldr	r2, [pc, #72]	; (800b3c0 <vTaskSwitchContext+0xb0>)
 800b378:	4413      	add	r3, r2
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	605a      	str	r2, [r3, #4]
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	685a      	ldr	r2, [r3, #4]
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	3308      	adds	r3, #8
 800b38e:	429a      	cmp	r2, r3
 800b390:	d104      	bne.n	800b39c <vTaskSwitchContext+0x8c>
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	605a      	str	r2, [r3, #4]
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	4a08      	ldr	r2, [pc, #32]	; (800b3c4 <vTaskSwitchContext+0xb4>)
 800b3a4:	6013      	str	r3, [r2, #0]
}
 800b3a6:	bf00      	nop
 800b3a8:	371c      	adds	r7, #28
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	24000158 	.word	0x24000158
 800b3b8:	24000144 	.word	0x24000144
 800b3bc:	24000138 	.word	0x24000138
 800b3c0:	24000034 	.word	0x24000034
 800b3c4:	24000030 	.word	0x24000030

0800b3c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10a      	bne.n	800b3ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	60fb      	str	r3, [r7, #12]
}
 800b3ea:	bf00      	nop
 800b3ec:	e7fe      	b.n	800b3ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3ee:	4b07      	ldr	r3, [pc, #28]	; (800b40c <vTaskPlaceOnEventList+0x44>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3318      	adds	r3, #24
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7fe fec8 	bl	800a18c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	6838      	ldr	r0, [r7, #0]
 800b400:	f000 fb7e 	bl	800bb00 <prvAddCurrentTaskToDelayedList>
}
 800b404:	bf00      	nop
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	24000030 	.word	0x24000030

0800b410 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10a      	bne.n	800b43c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	60fb      	str	r3, [r7, #12]
}
 800b438:	bf00      	nop
 800b43a:	e7fe      	b.n	800b43a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	3318      	adds	r3, #24
 800b440:	4618      	mov	r0, r3
 800b442:	f7fe fedc 	bl	800a1fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b446:	4b1d      	ldr	r3, [pc, #116]	; (800b4bc <xTaskRemoveFromEventList+0xac>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d11c      	bne.n	800b488 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	3304      	adds	r3, #4
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fed3 	bl	800a1fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	2201      	movs	r2, #1
 800b45e:	409a      	lsls	r2, r3
 800b460:	4b17      	ldr	r3, [pc, #92]	; (800b4c0 <xTaskRemoveFromEventList+0xb0>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4313      	orrs	r3, r2
 800b466:	4a16      	ldr	r2, [pc, #88]	; (800b4c0 <xTaskRemoveFromEventList+0xb0>)
 800b468:	6013      	str	r3, [r2, #0]
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4a13      	ldr	r2, [pc, #76]	; (800b4c4 <xTaskRemoveFromEventList+0xb4>)
 800b478:	441a      	add	r2, r3
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	3304      	adds	r3, #4
 800b47e:	4619      	mov	r1, r3
 800b480:	4610      	mov	r0, r2
 800b482:	f7fe fe5f 	bl	800a144 <vListInsertEnd>
 800b486:	e005      	b.n	800b494 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	3318      	adds	r3, #24
 800b48c:	4619      	mov	r1, r3
 800b48e:	480e      	ldr	r0, [pc, #56]	; (800b4c8 <xTaskRemoveFromEventList+0xb8>)
 800b490:	f7fe fe58 	bl	800a144 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b498:	4b0c      	ldr	r3, [pc, #48]	; (800b4cc <xTaskRemoveFromEventList+0xbc>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d905      	bls.n	800b4ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4a6:	4b0a      	ldr	r3, [pc, #40]	; (800b4d0 <xTaskRemoveFromEventList+0xc0>)
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	e001      	b.n	800b4b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b4b2:	697b      	ldr	r3, [r7, #20]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	24000158 	.word	0x24000158
 800b4c0:	24000138 	.word	0x24000138
 800b4c4:	24000034 	.word	0x24000034
 800b4c8:	240000f0 	.word	0x240000f0
 800b4cc:	24000030 	.word	0x24000030
 800b4d0:	24000144 	.word	0x24000144

0800b4d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4dc:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <vTaskInternalSetTimeOutState+0x24>)
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4e4:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <vTaskInternalSetTimeOutState+0x28>)
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	605a      	str	r2, [r3, #4]
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	24000148 	.word	0x24000148
 800b4fc:	24000134 	.word	0x24000134

0800b500 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10a      	bne.n	800b526 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	613b      	str	r3, [r7, #16]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10a      	bne.n	800b542 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	60fb      	str	r3, [r7, #12]
}
 800b53e:	bf00      	nop
 800b540:	e7fe      	b.n	800b540 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b542:	f000 fc6f 	bl	800be24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b546:	4b1d      	ldr	r3, [pc, #116]	; (800b5bc <xTaskCheckForTimeOut+0xbc>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	69ba      	ldr	r2, [r7, #24]
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55e:	d102      	bne.n	800b566 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b560:	2300      	movs	r3, #0
 800b562:	61fb      	str	r3, [r7, #28]
 800b564:	e023      	b.n	800b5ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	4b15      	ldr	r3, [pc, #84]	; (800b5c0 <xTaskCheckForTimeOut+0xc0>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d007      	beq.n	800b582 <xTaskCheckForTimeOut+0x82>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d302      	bcc.n	800b582 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b57c:	2301      	movs	r3, #1
 800b57e:	61fb      	str	r3, [r7, #28]
 800b580:	e015      	b.n	800b5ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d20b      	bcs.n	800b5a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	1ad2      	subs	r2, r2, r3
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7ff ff9b 	bl	800b4d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	61fb      	str	r3, [r7, #28]
 800b5a2:	e004      	b.n	800b5ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5ae:	f000 fc69 	bl	800be84 <vPortExitCritical>

	return xReturn;
 800b5b2:	69fb      	ldr	r3, [r7, #28]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3720      	adds	r7, #32
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	24000134 	.word	0x24000134
 800b5c0:	24000148 	.word	0x24000148

0800b5c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b5c8:	4b03      	ldr	r3, [pc, #12]	; (800b5d8 <vTaskMissedYield+0x14>)
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	601a      	str	r2, [r3, #0]
}
 800b5ce:	bf00      	nop
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	24000144 	.word	0x24000144

0800b5dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5e4:	f000 f852 	bl	800b68c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5e8:	4b06      	ldr	r3, [pc, #24]	; (800b604 <prvIdleTask+0x28>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d9f9      	bls.n	800b5e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5f0:	4b05      	ldr	r3, [pc, #20]	; (800b608 <prvIdleTask+0x2c>)
 800b5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f6:	601a      	str	r2, [r3, #0]
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b600:	e7f0      	b.n	800b5e4 <prvIdleTask+0x8>
 800b602:	bf00      	nop
 800b604:	24000034 	.word	0x24000034
 800b608:	e000ed04 	.word	0xe000ed04

0800b60c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b612:	2300      	movs	r3, #0
 800b614:	607b      	str	r3, [r7, #4]
 800b616:	e00c      	b.n	800b632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	4a12      	ldr	r2, [pc, #72]	; (800b66c <prvInitialiseTaskLists+0x60>)
 800b624:	4413      	add	r3, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f7fe fd5f 	bl	800a0ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3301      	adds	r3, #1
 800b630:	607b      	str	r3, [r7, #4]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b06      	cmp	r3, #6
 800b636:	d9ef      	bls.n	800b618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b638:	480d      	ldr	r0, [pc, #52]	; (800b670 <prvInitialiseTaskLists+0x64>)
 800b63a:	f7fe fd56 	bl	800a0ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b63e:	480d      	ldr	r0, [pc, #52]	; (800b674 <prvInitialiseTaskLists+0x68>)
 800b640:	f7fe fd53 	bl	800a0ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b644:	480c      	ldr	r0, [pc, #48]	; (800b678 <prvInitialiseTaskLists+0x6c>)
 800b646:	f7fe fd50 	bl	800a0ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b64a:	480c      	ldr	r0, [pc, #48]	; (800b67c <prvInitialiseTaskLists+0x70>)
 800b64c:	f7fe fd4d 	bl	800a0ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b650:	480b      	ldr	r0, [pc, #44]	; (800b680 <prvInitialiseTaskLists+0x74>)
 800b652:	f7fe fd4a 	bl	800a0ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b656:	4b0b      	ldr	r3, [pc, #44]	; (800b684 <prvInitialiseTaskLists+0x78>)
 800b658:	4a05      	ldr	r2, [pc, #20]	; (800b670 <prvInitialiseTaskLists+0x64>)
 800b65a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b65c:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <prvInitialiseTaskLists+0x7c>)
 800b65e:	4a05      	ldr	r2, [pc, #20]	; (800b674 <prvInitialiseTaskLists+0x68>)
 800b660:	601a      	str	r2, [r3, #0]
}
 800b662:	bf00      	nop
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	24000034 	.word	0x24000034
 800b670:	240000c0 	.word	0x240000c0
 800b674:	240000d4 	.word	0x240000d4
 800b678:	240000f0 	.word	0x240000f0
 800b67c:	24000104 	.word	0x24000104
 800b680:	2400011c 	.word	0x2400011c
 800b684:	240000e8 	.word	0x240000e8
 800b688:	240000ec 	.word	0x240000ec

0800b68c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b692:	e019      	b.n	800b6c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b694:	f000 fbc6 	bl	800be24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b698:	4b10      	ldr	r3, [pc, #64]	; (800b6dc <prvCheckTasksWaitingTermination+0x50>)
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fe fdaa 	bl	800a1fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6aa:	4b0d      	ldr	r3, [pc, #52]	; (800b6e0 <prvCheckTasksWaitingTermination+0x54>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	4a0b      	ldr	r2, [pc, #44]	; (800b6e0 <prvCheckTasksWaitingTermination+0x54>)
 800b6b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6b4:	4b0b      	ldr	r3, [pc, #44]	; (800b6e4 <prvCheckTasksWaitingTermination+0x58>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	4a0a      	ldr	r2, [pc, #40]	; (800b6e4 <prvCheckTasksWaitingTermination+0x58>)
 800b6bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b6be:	f000 fbe1 	bl	800be84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f810 	bl	800b6e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6c8:	4b06      	ldr	r3, [pc, #24]	; (800b6e4 <prvCheckTasksWaitingTermination+0x58>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1e1      	bne.n	800b694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6d0:	bf00      	nop
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	24000104 	.word	0x24000104
 800b6e0:	24000130 	.word	0x24000130
 800b6e4:	24000118 	.word	0x24000118

0800b6e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d108      	bne.n	800b70c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 fd7e 	bl	800c200 <vPortFree>
				vPortFree( pxTCB );
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fd7b 	bl	800c200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b70a:	e018      	b.n	800b73e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b712:	2b01      	cmp	r3, #1
 800b714:	d103      	bne.n	800b71e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fd72 	bl	800c200 <vPortFree>
	}
 800b71c:	e00f      	b.n	800b73e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b724:	2b02      	cmp	r3, #2
 800b726:	d00a      	beq.n	800b73e <prvDeleteTCB+0x56>
	__asm volatile
 800b728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72c:	f383 8811 	msr	BASEPRI, r3
 800b730:	f3bf 8f6f 	isb	sy
 800b734:	f3bf 8f4f 	dsb	sy
 800b738:	60fb      	str	r3, [r7, #12]
}
 800b73a:	bf00      	nop
 800b73c:	e7fe      	b.n	800b73c <prvDeleteTCB+0x54>
	}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
	...

0800b748 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b74e:	4b0c      	ldr	r3, [pc, #48]	; (800b780 <prvResetNextTaskUnblockTime+0x38>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d104      	bne.n	800b762 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b758:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <prvResetNextTaskUnblockTime+0x3c>)
 800b75a:	f04f 32ff 	mov.w	r2, #4294967295
 800b75e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b760:	e008      	b.n	800b774 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b762:	4b07      	ldr	r3, [pc, #28]	; (800b780 <prvResetNextTaskUnblockTime+0x38>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	4a04      	ldr	r2, [pc, #16]	; (800b784 <prvResetNextTaskUnblockTime+0x3c>)
 800b772:	6013      	str	r3, [r2, #0]
}
 800b774:	bf00      	nop
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	240000e8 	.word	0x240000e8
 800b784:	24000150 	.word	0x24000150

0800b788 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b78e:	4b0b      	ldr	r3, [pc, #44]	; (800b7bc <xTaskGetSchedulerState+0x34>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d102      	bne.n	800b79c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b796:	2301      	movs	r3, #1
 800b798:	607b      	str	r3, [r7, #4]
 800b79a:	e008      	b.n	800b7ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b79c:	4b08      	ldr	r3, [pc, #32]	; (800b7c0 <xTaskGetSchedulerState+0x38>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d102      	bne.n	800b7aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	607b      	str	r3, [r7, #4]
 800b7a8:	e001      	b.n	800b7ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b7ae:	687b      	ldr	r3, [r7, #4]
	}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	2400013c 	.word	0x2400013c
 800b7c0:	24000158 	.word	0x24000158

0800b7c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d05e      	beq.n	800b898 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7de:	4b31      	ldr	r3, [pc, #196]	; (800b8a4 <xTaskPriorityInherit+0xe0>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d24e      	bcs.n	800b886 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	db06      	blt.n	800b7fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f0:	4b2c      	ldr	r3, [pc, #176]	; (800b8a4 <xTaskPriorityInherit+0xe0>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	f1c3 0207 	rsb	r2, r3, #7
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	6959      	ldr	r1, [r3, #20]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b806:	4613      	mov	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4a26      	ldr	r2, [pc, #152]	; (800b8a8 <xTaskPriorityInherit+0xe4>)
 800b810:	4413      	add	r3, r2
 800b812:	4299      	cmp	r1, r3
 800b814:	d12f      	bne.n	800b876 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	3304      	adds	r3, #4
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fe fcef 	bl	800a1fe <uxListRemove>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d10a      	bne.n	800b83c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82a:	2201      	movs	r2, #1
 800b82c:	fa02 f303 	lsl.w	r3, r2, r3
 800b830:	43da      	mvns	r2, r3
 800b832:	4b1e      	ldr	r3, [pc, #120]	; (800b8ac <xTaskPriorityInherit+0xe8>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4013      	ands	r3, r2
 800b838:	4a1c      	ldr	r2, [pc, #112]	; (800b8ac <xTaskPriorityInherit+0xe8>)
 800b83a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b83c:	4b19      	ldr	r3, [pc, #100]	; (800b8a4 <xTaskPriorityInherit+0xe0>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84a:	2201      	movs	r2, #1
 800b84c:	409a      	lsls	r2, r3
 800b84e:	4b17      	ldr	r3, [pc, #92]	; (800b8ac <xTaskPriorityInherit+0xe8>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4313      	orrs	r3, r2
 800b854:	4a15      	ldr	r2, [pc, #84]	; (800b8ac <xTaskPriorityInherit+0xe8>)
 800b856:	6013      	str	r3, [r2, #0]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85c:	4613      	mov	r3, r2
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	4413      	add	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4a10      	ldr	r2, [pc, #64]	; (800b8a8 <xTaskPriorityInherit+0xe4>)
 800b866:	441a      	add	r2, r3
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	3304      	adds	r3, #4
 800b86c:	4619      	mov	r1, r3
 800b86e:	4610      	mov	r0, r2
 800b870:	f7fe fc68 	bl	800a144 <vListInsertEnd>
 800b874:	e004      	b.n	800b880 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b876:	4b0b      	ldr	r3, [pc, #44]	; (800b8a4 <xTaskPriorityInherit+0xe0>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b880:	2301      	movs	r3, #1
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	e008      	b.n	800b898 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b88a:	4b06      	ldr	r3, [pc, #24]	; (800b8a4 <xTaskPriorityInherit+0xe0>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	429a      	cmp	r2, r3
 800b892:	d201      	bcs.n	800b898 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b894:	2301      	movs	r3, #1
 800b896:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b898:	68fb      	ldr	r3, [r7, #12]
	}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	24000030 	.word	0x24000030
 800b8a8:	24000034 	.word	0x24000034
 800b8ac:	24000138 	.word	0x24000138

0800b8b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d06e      	beq.n	800b9a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b8c6:	4b3a      	ldr	r3, [pc, #232]	; (800b9b0 <xTaskPriorityDisinherit+0x100>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d00a      	beq.n	800b8e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	60fb      	str	r3, [r7, #12]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10a      	bne.n	800b904 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	60bb      	str	r3, [r7, #8]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b916:	429a      	cmp	r2, r3
 800b918:	d044      	beq.n	800b9a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d140      	bne.n	800b9a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	3304      	adds	r3, #4
 800b926:	4618      	mov	r0, r3
 800b928:	f7fe fc69 	bl	800a1fe <uxListRemove>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d115      	bne.n	800b95e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b936:	491f      	ldr	r1, [pc, #124]	; (800b9b4 <xTaskPriorityDisinherit+0x104>)
 800b938:	4613      	mov	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	440b      	add	r3, r1
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <xTaskPriorityDisinherit+0xae>
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	2201      	movs	r2, #1
 800b94e:	fa02 f303 	lsl.w	r3, r2, r3
 800b952:	43da      	mvns	r2, r3
 800b954:	4b18      	ldr	r3, [pc, #96]	; (800b9b8 <xTaskPriorityDisinherit+0x108>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4013      	ands	r3, r2
 800b95a:	4a17      	ldr	r2, [pc, #92]	; (800b9b8 <xTaskPriorityDisinherit+0x108>)
 800b95c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96a:	f1c3 0207 	rsb	r2, r3, #7
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b976:	2201      	movs	r2, #1
 800b978:	409a      	lsls	r2, r3
 800b97a:	4b0f      	ldr	r3, [pc, #60]	; (800b9b8 <xTaskPriorityDisinherit+0x108>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4313      	orrs	r3, r2
 800b980:	4a0d      	ldr	r2, [pc, #52]	; (800b9b8 <xTaskPriorityDisinherit+0x108>)
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b988:	4613      	mov	r3, r2
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4a08      	ldr	r2, [pc, #32]	; (800b9b4 <xTaskPriorityDisinherit+0x104>)
 800b992:	441a      	add	r2, r3
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	3304      	adds	r3, #4
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f7fe fbd2 	bl	800a144 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9a4:	697b      	ldr	r3, [r7, #20]
	}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	24000030 	.word	0x24000030
 800b9b4:	24000034 	.word	0x24000034
 800b9b8:	24000138 	.word	0x24000138

0800b9bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d077      	beq.n	800bac4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10a      	bne.n	800b9f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	60fb      	str	r3, [r7, #12]
}
 800b9ee:	bf00      	nop
 800b9f0:	e7fe      	b.n	800b9f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d902      	bls.n	800ba02 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	61fb      	str	r3, [r7, #28]
 800ba00:	e002      	b.n	800ba08 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba06:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0c:	69fa      	ldr	r2, [r7, #28]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d058      	beq.n	800bac4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d153      	bne.n	800bac4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ba1c:	4b2b      	ldr	r3, [pc, #172]	; (800bacc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	69ba      	ldr	r2, [r7, #24]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d10a      	bne.n	800ba3c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	60bb      	str	r3, [r7, #8]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	69fa      	ldr	r2, [r7, #28]
 800ba46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	db04      	blt.n	800ba5a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	f1c3 0207 	rsb	r2, r3, #7
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	6959      	ldr	r1, [r3, #20]
 800ba5e:	693a      	ldr	r2, [r7, #16]
 800ba60:	4613      	mov	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4a19      	ldr	r2, [pc, #100]	; (800bad0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ba6a:	4413      	add	r3, r2
 800ba6c:	4299      	cmp	r1, r3
 800ba6e:	d129      	bne.n	800bac4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	3304      	adds	r3, #4
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fe fbc2 	bl	800a1fe <uxListRemove>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10a      	bne.n	800ba96 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba84:	2201      	movs	r2, #1
 800ba86:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8a:	43da      	mvns	r2, r3
 800ba8c:	4b11      	ldr	r3, [pc, #68]	; (800bad4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4013      	ands	r3, r2
 800ba92:	4a10      	ldr	r2, [pc, #64]	; (800bad4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ba94:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	409a      	lsls	r2, r3
 800ba9e:	4b0d      	ldr	r3, [pc, #52]	; (800bad4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	4a0b      	ldr	r2, [pc, #44]	; (800bad4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800baa6:	6013      	str	r3, [r2, #0]
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baac:	4613      	mov	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4a06      	ldr	r2, [pc, #24]	; (800bad0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bab6:	441a      	add	r2, r3
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	3304      	adds	r3, #4
 800babc:	4619      	mov	r1, r3
 800babe:	4610      	mov	r0, r2
 800bac0:	f7fe fb40 	bl	800a144 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bac4:	bf00      	nop
 800bac6:	3720      	adds	r7, #32
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	24000030 	.word	0x24000030
 800bad0:	24000034 	.word	0x24000034
 800bad4:	24000138 	.word	0x24000138

0800bad8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bad8:	b480      	push	{r7}
 800bada:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800badc:	4b07      	ldr	r3, [pc, #28]	; (800bafc <pvTaskIncrementMutexHeldCount+0x24>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d004      	beq.n	800baee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bae4:	4b05      	ldr	r3, [pc, #20]	; (800bafc <pvTaskIncrementMutexHeldCount+0x24>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800baea:	3201      	adds	r2, #1
 800baec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800baee:	4b03      	ldr	r3, [pc, #12]	; (800bafc <pvTaskIncrementMutexHeldCount+0x24>)
 800baf0:	681b      	ldr	r3, [r3, #0]
	}
 800baf2:	4618      	mov	r0, r3
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr
 800bafc:	24000030 	.word	0x24000030

0800bb00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb0a:	4b29      	ldr	r3, [pc, #164]	; (800bbb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb10:	4b28      	ldr	r3, [pc, #160]	; (800bbb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3304      	adds	r3, #4
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fe fb71 	bl	800a1fe <uxListRemove>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10b      	bne.n	800bb3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bb22:	4b24      	ldr	r3, [pc, #144]	; (800bbb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb28:	2201      	movs	r2, #1
 800bb2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb2e:	43da      	mvns	r2, r3
 800bb30:	4b21      	ldr	r3, [pc, #132]	; (800bbb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4013      	ands	r3, r2
 800bb36:	4a20      	ldr	r2, [pc, #128]	; (800bbb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb40:	d10a      	bne.n	800bb58 <prvAddCurrentTaskToDelayedList+0x58>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d007      	beq.n	800bb58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb48:	4b1a      	ldr	r3, [pc, #104]	; (800bbb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	4619      	mov	r1, r3
 800bb50:	481a      	ldr	r0, [pc, #104]	; (800bbbc <prvAddCurrentTaskToDelayedList+0xbc>)
 800bb52:	f7fe faf7 	bl	800a144 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb56:	e026      	b.n	800bba6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb60:	4b14      	ldr	r3, [pc, #80]	; (800bbb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d209      	bcs.n	800bb84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb70:	4b13      	ldr	r3, [pc, #76]	; (800bbc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	4b0f      	ldr	r3, [pc, #60]	; (800bbb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3304      	adds	r3, #4
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	f7fe fb05 	bl	800a18c <vListInsert>
}
 800bb82:	e010      	b.n	800bba6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb84:	4b0f      	ldr	r3, [pc, #60]	; (800bbc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	4b0a      	ldr	r3, [pc, #40]	; (800bbb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4610      	mov	r0, r2
 800bb92:	f7fe fafb 	bl	800a18c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb96:	4b0c      	ldr	r3, [pc, #48]	; (800bbc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d202      	bcs.n	800bba6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bba0:	4a09      	ldr	r2, [pc, #36]	; (800bbc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	6013      	str	r3, [r2, #0]
}
 800bba6:	bf00      	nop
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	24000134 	.word	0x24000134
 800bbb4:	24000030 	.word	0x24000030
 800bbb8:	24000138 	.word	0x24000138
 800bbbc:	2400011c 	.word	0x2400011c
 800bbc0:	240000ec 	.word	0x240000ec
 800bbc4:	240000e8 	.word	0x240000e8
 800bbc8:	24000150 	.word	0x24000150

0800bbcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	3b04      	subs	r3, #4
 800bbdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3b04      	subs	r3, #4
 800bbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f023 0201 	bic.w	r2, r3, #1
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3b04      	subs	r3, #4
 800bbfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbfc:	4a0c      	ldr	r2, [pc, #48]	; (800bc30 <pxPortInitialiseStack+0x64>)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3b14      	subs	r3, #20
 800bc06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	3b04      	subs	r3, #4
 800bc12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f06f 0202 	mvn.w	r2, #2
 800bc1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3b20      	subs	r3, #32
 800bc20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc22:	68fb      	ldr	r3, [r7, #12]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	0800bc35 	.word	0x0800bc35

0800bc34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc3e:	4b12      	ldr	r3, [pc, #72]	; (800bc88 <prvTaskExitError+0x54>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc46:	d00a      	beq.n	800bc5e <prvTaskExitError+0x2a>
	__asm volatile
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	60fb      	str	r3, [r7, #12]
}
 800bc5a:	bf00      	nop
 800bc5c:	e7fe      	b.n	800bc5c <prvTaskExitError+0x28>
	__asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	60bb      	str	r3, [r7, #8]
}
 800bc70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc72:	bf00      	nop
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d0fc      	beq.n	800bc74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc7a:	bf00      	nop
 800bc7c:	bf00      	nop
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	24000008 	.word	0x24000008
 800bc8c:	00000000 	.word	0x00000000

0800bc90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc90:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <pxCurrentTCBConst2>)
 800bc92:	6819      	ldr	r1, [r3, #0]
 800bc94:	6808      	ldr	r0, [r1, #0]
 800bc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9a:	f380 8809 	msr	PSP, r0
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f04f 0000 	mov.w	r0, #0
 800bca6:	f380 8811 	msr	BASEPRI, r0
 800bcaa:	4770      	bx	lr
 800bcac:	f3af 8000 	nop.w

0800bcb0 <pxCurrentTCBConst2>:
 800bcb0:	24000030 	.word	0x24000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bcb4:	bf00      	nop
 800bcb6:	bf00      	nop

0800bcb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bcb8:	4808      	ldr	r0, [pc, #32]	; (800bcdc <prvPortStartFirstTask+0x24>)
 800bcba:	6800      	ldr	r0, [r0, #0]
 800bcbc:	6800      	ldr	r0, [r0, #0]
 800bcbe:	f380 8808 	msr	MSP, r0
 800bcc2:	f04f 0000 	mov.w	r0, #0
 800bcc6:	f380 8814 	msr	CONTROL, r0
 800bcca:	b662      	cpsie	i
 800bccc:	b661      	cpsie	f
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	df00      	svc	0
 800bcd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcda:	bf00      	nop
 800bcdc:	e000ed08 	.word	0xe000ed08

0800bce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bce6:	4b46      	ldr	r3, [pc, #280]	; (800be00 <xPortStartScheduler+0x120>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a46      	ldr	r2, [pc, #280]	; (800be04 <xPortStartScheduler+0x124>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d10a      	bne.n	800bd06 <xPortStartScheduler+0x26>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	613b      	str	r3, [r7, #16]
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd06:	4b3e      	ldr	r3, [pc, #248]	; (800be00 <xPortStartScheduler+0x120>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a3f      	ldr	r2, [pc, #252]	; (800be08 <xPortStartScheduler+0x128>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d10a      	bne.n	800bd26 <xPortStartScheduler+0x46>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	60fb      	str	r3, [r7, #12]
}
 800bd22:	bf00      	nop
 800bd24:	e7fe      	b.n	800bd24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd26:	4b39      	ldr	r3, [pc, #228]	; (800be0c <xPortStartScheduler+0x12c>)
 800bd28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	22ff      	movs	r2, #255	; 0xff
 800bd36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	4b31      	ldr	r3, [pc, #196]	; (800be10 <xPortStartScheduler+0x130>)
 800bd4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd4e:	4b31      	ldr	r3, [pc, #196]	; (800be14 <xPortStartScheduler+0x134>)
 800bd50:	2207      	movs	r2, #7
 800bd52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd54:	e009      	b.n	800bd6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bd56:	4b2f      	ldr	r3, [pc, #188]	; (800be14 <xPortStartScheduler+0x134>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	4a2d      	ldr	r2, [pc, #180]	; (800be14 <xPortStartScheduler+0x134>)
 800bd5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd60:	78fb      	ldrb	r3, [r7, #3]
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd6a:	78fb      	ldrb	r3, [r7, #3]
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd72:	2b80      	cmp	r3, #128	; 0x80
 800bd74:	d0ef      	beq.n	800bd56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd76:	4b27      	ldr	r3, [pc, #156]	; (800be14 <xPortStartScheduler+0x134>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f1c3 0307 	rsb	r3, r3, #7
 800bd7e:	2b04      	cmp	r3, #4
 800bd80:	d00a      	beq.n	800bd98 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	60bb      	str	r3, [r7, #8]
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd98:	4b1e      	ldr	r3, [pc, #120]	; (800be14 <xPortStartScheduler+0x134>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	021b      	lsls	r3, r3, #8
 800bd9e:	4a1d      	ldr	r2, [pc, #116]	; (800be14 <xPortStartScheduler+0x134>)
 800bda0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bda2:	4b1c      	ldr	r3, [pc, #112]	; (800be14 <xPortStartScheduler+0x134>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bdaa:	4a1a      	ldr	r2, [pc, #104]	; (800be14 <xPortStartScheduler+0x134>)
 800bdac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bdb6:	4b18      	ldr	r3, [pc, #96]	; (800be18 <xPortStartScheduler+0x138>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a17      	ldr	r2, [pc, #92]	; (800be18 <xPortStartScheduler+0x138>)
 800bdbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdc2:	4b15      	ldr	r3, [pc, #84]	; (800be18 <xPortStartScheduler+0x138>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a14      	ldr	r2, [pc, #80]	; (800be18 <xPortStartScheduler+0x138>)
 800bdc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bdcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdce:	f000 f8dd 	bl	800bf8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdd2:	4b12      	ldr	r3, [pc, #72]	; (800be1c <xPortStartScheduler+0x13c>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdd8:	f000 f8fc 	bl	800bfd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bddc:	4b10      	ldr	r3, [pc, #64]	; (800be20 <xPortStartScheduler+0x140>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a0f      	ldr	r2, [pc, #60]	; (800be20 <xPortStartScheduler+0x140>)
 800bde2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bde6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bde8:	f7ff ff66 	bl	800bcb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdec:	f7ff fa90 	bl	800b310 <vTaskSwitchContext>
	prvTaskExitError();
 800bdf0:	f7ff ff20 	bl	800bc34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	e000ed00 	.word	0xe000ed00
 800be04:	410fc271 	.word	0x410fc271
 800be08:	410fc270 	.word	0x410fc270
 800be0c:	e000e400 	.word	0xe000e400
 800be10:	2400015c 	.word	0x2400015c
 800be14:	24000160 	.word	0x24000160
 800be18:	e000ed20 	.word	0xe000ed20
 800be1c:	24000008 	.word	0x24000008
 800be20:	e000ef34 	.word	0xe000ef34

0800be24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
	__asm volatile
 800be2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2e:	f383 8811 	msr	BASEPRI, r3
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	607b      	str	r3, [r7, #4]
}
 800be3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be3e:	4b0f      	ldr	r3, [pc, #60]	; (800be7c <vPortEnterCritical+0x58>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3301      	adds	r3, #1
 800be44:	4a0d      	ldr	r2, [pc, #52]	; (800be7c <vPortEnterCritical+0x58>)
 800be46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be48:	4b0c      	ldr	r3, [pc, #48]	; (800be7c <vPortEnterCritical+0x58>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d10f      	bne.n	800be70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be50:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <vPortEnterCritical+0x5c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00a      	beq.n	800be70 <vPortEnterCritical+0x4c>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	603b      	str	r3, [r7, #0]
}
 800be6c:	bf00      	nop
 800be6e:	e7fe      	b.n	800be6e <vPortEnterCritical+0x4a>
	}
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	24000008 	.word	0x24000008
 800be80:	e000ed04 	.word	0xe000ed04

0800be84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be8a:	4b12      	ldr	r3, [pc, #72]	; (800bed4 <vPortExitCritical+0x50>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10a      	bne.n	800bea8 <vPortExitCritical+0x24>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	607b      	str	r3, [r7, #4]
}
 800bea4:	bf00      	nop
 800bea6:	e7fe      	b.n	800bea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bea8:	4b0a      	ldr	r3, [pc, #40]	; (800bed4 <vPortExitCritical+0x50>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3b01      	subs	r3, #1
 800beae:	4a09      	ldr	r2, [pc, #36]	; (800bed4 <vPortExitCritical+0x50>)
 800beb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800beb2:	4b08      	ldr	r3, [pc, #32]	; (800bed4 <vPortExitCritical+0x50>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d105      	bne.n	800bec6 <vPortExitCritical+0x42>
 800beba:	2300      	movs	r3, #0
 800bebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	f383 8811 	msr	BASEPRI, r3
}
 800bec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	24000008 	.word	0x24000008
	...

0800bee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bee0:	f3ef 8009 	mrs	r0, PSP
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	4b15      	ldr	r3, [pc, #84]	; (800bf40 <pxCurrentTCBConst>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	f01e 0f10 	tst.w	lr, #16
 800bef0:	bf08      	it	eq
 800bef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befa:	6010      	str	r0, [r2, #0]
 800befc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bf04:	f380 8811 	msr	BASEPRI, r0
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f7ff f9fe 	bl	800b310 <vTaskSwitchContext>
 800bf14:	f04f 0000 	mov.w	r0, #0
 800bf18:	f380 8811 	msr	BASEPRI, r0
 800bf1c:	bc09      	pop	{r0, r3}
 800bf1e:	6819      	ldr	r1, [r3, #0]
 800bf20:	6808      	ldr	r0, [r1, #0]
 800bf22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf26:	f01e 0f10 	tst.w	lr, #16
 800bf2a:	bf08      	it	eq
 800bf2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf30:	f380 8809 	msr	PSP, r0
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	f3af 8000 	nop.w

0800bf40 <pxCurrentTCBConst>:
 800bf40:	24000030 	.word	0x24000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf44:	bf00      	nop
 800bf46:	bf00      	nop

0800bf48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	607b      	str	r3, [r7, #4]
}
 800bf60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf62:	f7ff f91d 	bl	800b1a0 <xTaskIncrementTick>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d003      	beq.n	800bf74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf6c:	4b06      	ldr	r3, [pc, #24]	; (800bf88 <SysTick_Handler+0x40>)
 800bf6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	2300      	movs	r3, #0
 800bf76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	f383 8811 	msr	BASEPRI, r3
}
 800bf7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf80:	bf00      	nop
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	e000ed04 	.word	0xe000ed04

0800bf8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf90:	4b0b      	ldr	r3, [pc, #44]	; (800bfc0 <vPortSetupTimerInterrupt+0x34>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf96:	4b0b      	ldr	r3, [pc, #44]	; (800bfc4 <vPortSetupTimerInterrupt+0x38>)
 800bf98:	2200      	movs	r2, #0
 800bf9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf9c:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <vPortSetupTimerInterrupt+0x3c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a0a      	ldr	r2, [pc, #40]	; (800bfcc <vPortSetupTimerInterrupt+0x40>)
 800bfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfa6:	099b      	lsrs	r3, r3, #6
 800bfa8:	4a09      	ldr	r2, [pc, #36]	; (800bfd0 <vPortSetupTimerInterrupt+0x44>)
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bfae:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <vPortSetupTimerInterrupt+0x34>)
 800bfb0:	2207      	movs	r2, #7
 800bfb2:	601a      	str	r2, [r3, #0]
}
 800bfb4:	bf00      	nop
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	e000e010 	.word	0xe000e010
 800bfc4:	e000e018 	.word	0xe000e018
 800bfc8:	2400000c 	.word	0x2400000c
 800bfcc:	10624dd3 	.word	0x10624dd3
 800bfd0:	e000e014 	.word	0xe000e014

0800bfd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfe4 <vPortEnableVFP+0x10>
 800bfd8:	6801      	ldr	r1, [r0, #0]
 800bfda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfde:	6001      	str	r1, [r0, #0]
 800bfe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfe2:	bf00      	nop
 800bfe4:	e000ed88 	.word	0xe000ed88

0800bfe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfee:	f3ef 8305 	mrs	r3, IPSR
 800bff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b0f      	cmp	r3, #15
 800bff8:	d914      	bls.n	800c024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bffa:	4a17      	ldr	r2, [pc, #92]	; (800c058 <vPortValidateInterruptPriority+0x70>)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4413      	add	r3, r2
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c004:	4b15      	ldr	r3, [pc, #84]	; (800c05c <vPortValidateInterruptPriority+0x74>)
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	7afa      	ldrb	r2, [r7, #11]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d20a      	bcs.n	800c024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	607b      	str	r3, [r7, #4]
}
 800c020:	bf00      	nop
 800c022:	e7fe      	b.n	800c022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c024:	4b0e      	ldr	r3, [pc, #56]	; (800c060 <vPortValidateInterruptPriority+0x78>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c02c:	4b0d      	ldr	r3, [pc, #52]	; (800c064 <vPortValidateInterruptPriority+0x7c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	429a      	cmp	r2, r3
 800c032:	d90a      	bls.n	800c04a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	603b      	str	r3, [r7, #0]
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <vPortValidateInterruptPriority+0x60>
	}
 800c04a:	bf00      	nop
 800c04c:	3714      	adds	r7, #20
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	e000e3f0 	.word	0xe000e3f0
 800c05c:	2400015c 	.word	0x2400015c
 800c060:	e000ed0c 	.word	0xe000ed0c
 800c064:	24000160 	.word	0x24000160

0800c068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b08a      	sub	sp, #40	; 0x28
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c070:	2300      	movs	r3, #0
 800c072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c074:	f7fe ffea 	bl	800b04c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c078:	4b5b      	ldr	r3, [pc, #364]	; (800c1e8 <pvPortMalloc+0x180>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c080:	f000 f920 	bl	800c2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c084:	4b59      	ldr	r3, [pc, #356]	; (800c1ec <pvPortMalloc+0x184>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4013      	ands	r3, r2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f040 8093 	bne.w	800c1b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01d      	beq.n	800c0d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c098:	2208      	movs	r2, #8
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4413      	add	r3, r2
 800c09e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f003 0307 	and.w	r3, r3, #7
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d014      	beq.n	800c0d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f023 0307 	bic.w	r3, r3, #7
 800c0b0:	3308      	adds	r3, #8
 800c0b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f003 0307 	and.w	r3, r3, #7
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00a      	beq.n	800c0d4 <pvPortMalloc+0x6c>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	617b      	str	r3, [r7, #20]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d06e      	beq.n	800c1b8 <pvPortMalloc+0x150>
 800c0da:	4b45      	ldr	r3, [pc, #276]	; (800c1f0 <pvPortMalloc+0x188>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d869      	bhi.n	800c1b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0e4:	4b43      	ldr	r3, [pc, #268]	; (800c1f4 <pvPortMalloc+0x18c>)
 800c0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0e8:	4b42      	ldr	r3, [pc, #264]	; (800c1f4 <pvPortMalloc+0x18c>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0ee:	e004      	b.n	800c0fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	429a      	cmp	r2, r3
 800c102:	d903      	bls.n	800c10c <pvPortMalloc+0xa4>
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1f1      	bne.n	800c0f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c10c:	4b36      	ldr	r3, [pc, #216]	; (800c1e8 <pvPortMalloc+0x180>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c112:	429a      	cmp	r2, r3
 800c114:	d050      	beq.n	800c1b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c116:	6a3b      	ldr	r3, [r7, #32]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2208      	movs	r2, #8
 800c11c:	4413      	add	r3, r2
 800c11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	1ad2      	subs	r2, r2, r3
 800c130:	2308      	movs	r3, #8
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	429a      	cmp	r2, r3
 800c136:	d91f      	bls.n	800c178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4413      	add	r3, r2
 800c13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <pvPortMalloc+0xf8>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	613b      	str	r3, [r7, #16]
}
 800c15c:	bf00      	nop
 800c15e:	e7fe      	b.n	800c15e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c162:	685a      	ldr	r2, [r3, #4]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	1ad2      	subs	r2, r2, r3
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c172:	69b8      	ldr	r0, [r7, #24]
 800c174:	f000 f908 	bl	800c388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c178:	4b1d      	ldr	r3, [pc, #116]	; (800c1f0 <pvPortMalloc+0x188>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	1ad3      	subs	r3, r2, r3
 800c182:	4a1b      	ldr	r2, [pc, #108]	; (800c1f0 <pvPortMalloc+0x188>)
 800c184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c186:	4b1a      	ldr	r3, [pc, #104]	; (800c1f0 <pvPortMalloc+0x188>)
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	4b1b      	ldr	r3, [pc, #108]	; (800c1f8 <pvPortMalloc+0x190>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d203      	bcs.n	800c19a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c192:	4b17      	ldr	r3, [pc, #92]	; (800c1f0 <pvPortMalloc+0x188>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a18      	ldr	r2, [pc, #96]	; (800c1f8 <pvPortMalloc+0x190>)
 800c198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	685a      	ldr	r2, [r3, #4]
 800c19e:	4b13      	ldr	r3, [pc, #76]	; (800c1ec <pvPortMalloc+0x184>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	431a      	orrs	r2, r3
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c1ae:	4b13      	ldr	r3, [pc, #76]	; (800c1fc <pvPortMalloc+0x194>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	4a11      	ldr	r2, [pc, #68]	; (800c1fc <pvPortMalloc+0x194>)
 800c1b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1b8:	f7fe ff56 	bl	800b068 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	f003 0307 	and.w	r3, r3, #7
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00a      	beq.n	800c1dc <pvPortMalloc+0x174>
	__asm volatile
 800c1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	60fb      	str	r3, [r7, #12]
}
 800c1d8:	bf00      	nop
 800c1da:	e7fe      	b.n	800c1da <pvPortMalloc+0x172>
	return pvReturn;
 800c1dc:	69fb      	ldr	r3, [r7, #28]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3728      	adds	r7, #40	; 0x28
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	24003d6c 	.word	0x24003d6c
 800c1ec:	24003d80 	.word	0x24003d80
 800c1f0:	24003d70 	.word	0x24003d70
 800c1f4:	24003d64 	.word	0x24003d64
 800c1f8:	24003d74 	.word	0x24003d74
 800c1fc:	24003d78 	.word	0x24003d78

0800c200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d04d      	beq.n	800c2ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c212:	2308      	movs	r3, #8
 800c214:	425b      	negs	r3, r3
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	4413      	add	r3, r2
 800c21a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	685a      	ldr	r2, [r3, #4]
 800c224:	4b24      	ldr	r3, [pc, #144]	; (800c2b8 <vPortFree+0xb8>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4013      	ands	r3, r2
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10a      	bne.n	800c244 <vPortFree+0x44>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	60fb      	str	r3, [r7, #12]
}
 800c240:	bf00      	nop
 800c242:	e7fe      	b.n	800c242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00a      	beq.n	800c262 <vPortFree+0x62>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	60bb      	str	r3, [r7, #8]
}
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	685a      	ldr	r2, [r3, #4]
 800c266:	4b14      	ldr	r3, [pc, #80]	; (800c2b8 <vPortFree+0xb8>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4013      	ands	r3, r2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d01e      	beq.n	800c2ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d11a      	bne.n	800c2ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	4b0e      	ldr	r3, [pc, #56]	; (800c2b8 <vPortFree+0xb8>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	43db      	mvns	r3, r3
 800c282:	401a      	ands	r2, r3
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c288:	f7fe fee0 	bl	800b04c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	4b0a      	ldr	r3, [pc, #40]	; (800c2bc <vPortFree+0xbc>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4413      	add	r3, r2
 800c296:	4a09      	ldr	r2, [pc, #36]	; (800c2bc <vPortFree+0xbc>)
 800c298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c29a:	6938      	ldr	r0, [r7, #16]
 800c29c:	f000 f874 	bl	800c388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c2a0:	4b07      	ldr	r3, [pc, #28]	; (800c2c0 <vPortFree+0xc0>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	4a06      	ldr	r2, [pc, #24]	; (800c2c0 <vPortFree+0xc0>)
 800c2a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c2aa:	f7fe fedd 	bl	800b068 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2ae:	bf00      	nop
 800c2b0:	3718      	adds	r7, #24
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	24003d80 	.word	0x24003d80
 800c2bc:	24003d70 	.word	0x24003d70
 800c2c0:	24003d7c 	.word	0x24003d7c

0800c2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2d0:	4b27      	ldr	r3, [pc, #156]	; (800c370 <prvHeapInit+0xac>)
 800c2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f003 0307 	and.w	r3, r3, #7
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00c      	beq.n	800c2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	3307      	adds	r3, #7
 800c2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f023 0307 	bic.w	r3, r3, #7
 800c2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	4a1f      	ldr	r2, [pc, #124]	; (800c370 <prvHeapInit+0xac>)
 800c2f4:	4413      	add	r3, r2
 800c2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2fc:	4a1d      	ldr	r2, [pc, #116]	; (800c374 <prvHeapInit+0xb0>)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c302:	4b1c      	ldr	r3, [pc, #112]	; (800c374 <prvHeapInit+0xb0>)
 800c304:	2200      	movs	r2, #0
 800c306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	4413      	add	r3, r2
 800c30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c310:	2208      	movs	r2, #8
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	1a9b      	subs	r3, r3, r2
 800c316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f023 0307 	bic.w	r3, r3, #7
 800c31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4a15      	ldr	r2, [pc, #84]	; (800c378 <prvHeapInit+0xb4>)
 800c324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c326:	4b14      	ldr	r3, [pc, #80]	; (800c378 <prvHeapInit+0xb4>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2200      	movs	r2, #0
 800c32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c32e:	4b12      	ldr	r3, [pc, #72]	; (800c378 <prvHeapInit+0xb4>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2200      	movs	r2, #0
 800c334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	1ad2      	subs	r2, r2, r3
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c344:	4b0c      	ldr	r3, [pc, #48]	; (800c378 <prvHeapInit+0xb4>)
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	4a0a      	ldr	r2, [pc, #40]	; (800c37c <prvHeapInit+0xb8>)
 800c352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	4a09      	ldr	r2, [pc, #36]	; (800c380 <prvHeapInit+0xbc>)
 800c35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c35c:	4b09      	ldr	r3, [pc, #36]	; (800c384 <prvHeapInit+0xc0>)
 800c35e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c362:	601a      	str	r2, [r3, #0]
}
 800c364:	bf00      	nop
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr
 800c370:	24000164 	.word	0x24000164
 800c374:	24003d64 	.word	0x24003d64
 800c378:	24003d6c 	.word	0x24003d6c
 800c37c:	24003d74 	.word	0x24003d74
 800c380:	24003d70 	.word	0x24003d70
 800c384:	24003d80 	.word	0x24003d80

0800c388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c390:	4b28      	ldr	r3, [pc, #160]	; (800c434 <prvInsertBlockIntoFreeList+0xac>)
 800c392:	60fb      	str	r3, [r7, #12]
 800c394:	e002      	b.n	800c39c <prvInsertBlockIntoFreeList+0x14>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d8f7      	bhi.n	800c396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d108      	bne.n	800c3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	441a      	add	r2, r3
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	441a      	add	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d118      	bne.n	800c410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	4b15      	ldr	r3, [pc, #84]	; (800c438 <prvInsertBlockIntoFreeList+0xb0>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d00d      	beq.n	800c406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685a      	ldr	r2, [r3, #4]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	441a      	add	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	e008      	b.n	800c418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c406:	4b0c      	ldr	r3, [pc, #48]	; (800c438 <prvInsertBlockIntoFreeList+0xb0>)
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	e003      	b.n	800c418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d002      	beq.n	800c426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c426:	bf00      	nop
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	24003d64 	.word	0x24003d64
 800c438:	24003d6c 	.word	0x24003d6c

0800c43c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c442:	4b21      	ldr	r3, [pc, #132]	; (800c4c8 <MX_DMA_Init+0x8c>)
 800c444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c448:	4a1f      	ldr	r2, [pc, #124]	; (800c4c8 <MX_DMA_Init+0x8c>)
 800c44a:	f043 0301 	orr.w	r3, r3, #1
 800c44e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c452:	4b1d      	ldr	r3, [pc, #116]	; (800c4c8 <MX_DMA_Init+0x8c>)
 800c454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	607b      	str	r3, [r7, #4]
 800c45e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800c460:	2200      	movs	r2, #0
 800c462:	2105      	movs	r1, #5
 800c464:	200b      	movs	r0, #11
 800c466:	f7f4 f9d7 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800c46a:	200b      	movs	r0, #11
 800c46c:	f7f4 f9ee 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800c470:	2200      	movs	r2, #0
 800c472:	2105      	movs	r1, #5
 800c474:	200c      	movs	r0, #12
 800c476:	f7f4 f9cf 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800c47a:	200c      	movs	r0, #12
 800c47c:	f7f4 f9e6 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800c480:	2200      	movs	r2, #0
 800c482:	2105      	movs	r1, #5
 800c484:	200d      	movs	r0, #13
 800c486:	f7f4 f9c7 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800c48a:	200d      	movs	r0, #13
 800c48c:	f7f4 f9de 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800c490:	2200      	movs	r2, #0
 800c492:	2105      	movs	r1, #5
 800c494:	200e      	movs	r0, #14
 800c496:	f7f4 f9bf 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800c49a:	200e      	movs	r0, #14
 800c49c:	f7f4 f9d6 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	2105      	movs	r1, #5
 800c4a4:	200f      	movs	r0, #15
 800c4a6:	f7f4 f9b7 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800c4aa:	200f      	movs	r0, #15
 800c4ac:	f7f4 f9ce 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2105      	movs	r1, #5
 800c4b4:	2010      	movs	r0, #16
 800c4b6:	f7f4 f9af 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800c4ba:	2010      	movs	r0, #16
 800c4bc:	f7f4 f9c6 	bl	800084c <HAL_NVIC_EnableIRQ>

}
 800c4c0:	bf00      	nop
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	58024400 	.word	0x58024400

0800c4cc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4a07      	ldr	r2, [pc, #28]	; (800c4f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c4dc:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	4a06      	ldr	r2, [pc, #24]	; (800c4fc <vApplicationGetIdleTaskMemory+0x30>)
 800c4e2:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2280      	movs	r2, #128	; 0x80
 800c4e8:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800c4ea:	bf00      	nop
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	24003d84 	.word	0x24003d84
 800c4fc:	24003dd8 	.word	0x24003dd8

0800c500 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 800c500:	b5b0      	push	{r4, r5, r7, lr}
 800c502:	b0b2      	sub	sp, #200	; 0xc8
 800c504:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of WT931_DONE_sem */
	osSemaphoreStaticDef(WT931_DONE_sem, &WT931_DONE_semControlBlock);
 800c506:	2300      	movs	r3, #0
 800c508:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c50c:	4b54      	ldr	r3, [pc, #336]	; (800c660 <MX_FREERTOS_Init+0x160>)
 800c50e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	WT931_DONE_semHandle = osSemaphoreCreate(osSemaphore(WT931_DONE_sem), 1);
 800c512:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c516:	2101      	movs	r1, #1
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fd fd8c 	bl	800a036 <osSemaphoreCreate>
 800c51e:	4603      	mov	r3, r0
 800c520:	4a50      	ldr	r2, [pc, #320]	; (800c664 <MX_FREERTOS_Init+0x164>)
 800c522:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39_Done_sem */
	osSemaphoreStaticDef(GY39_Done_sem, &GY39_Done_semControlBlock);
 800c524:	2300      	movs	r3, #0
 800c526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c52a:	4b4f      	ldr	r3, [pc, #316]	; (800c668 <MX_FREERTOS_Init+0x168>)
 800c52c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GY39_Done_semHandle = osSemaphoreCreate(osSemaphore(GY39_Done_sem), 1);
 800c530:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c534:	2101      	movs	r1, #1
 800c536:	4618      	mov	r0, r3
 800c538:	f7fd fd7d 	bl	800a036 <osSemaphoreCreate>
 800c53c:	4603      	mov	r3, r0
 800c53e:	4a4b      	ldr	r2, [pc, #300]	; (800c66c <MX_FREERTOS_Init+0x16c>)
 800c540:	6013      	str	r3, [r2, #0]

	/* definition and creation of CMD_DONE_sem */
	osSemaphoreStaticDef(CMD_DONE_sem, &CMD_DONE_semControlBlock);
 800c542:	2300      	movs	r3, #0
 800c544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c548:	4b49      	ldr	r3, [pc, #292]	; (800c670 <MX_FREERTOS_Init+0x170>)
 800c54a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	CMD_DONE_semHandle = osSemaphoreCreate(osSemaphore(CMD_DONE_sem), 1);
 800c54e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c552:	2101      	movs	r1, #1
 800c554:	4618      	mov	r0, r3
 800c556:	f7fd fd6e 	bl	800a036 <osSemaphoreCreate>
 800c55a:	4603      	mov	r3, r0
 800c55c:	4a45      	ldr	r2, [pc, #276]	; (800c674 <MX_FREERTOS_Init+0x174>)
 800c55e:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of WT931_Queue */
	osMessageQStaticDef(WT931_Queue, 12, uint16_t, WT931_QueueBuffer,
 800c560:	4b45      	ldr	r3, [pc, #276]	; (800c678 <MX_FREERTOS_Init+0x178>)
 800c562:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800c566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&WT931_QueueControlBlock);
	WT931_QueueHandle = osMessageCreate(osMessageQ(WT931_Queue), NULL);
 800c56c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c570:	2100      	movs	r1, #0
 800c572:	4618      	mov	r0, r3
 800c574:	f7fd fd91 	bl	800a09a <osMessageCreate>
 800c578:	4603      	mov	r3, r0
 800c57a:	4a40      	ldr	r2, [pc, #256]	; (800c67c <MX_FREERTOS_Init+0x17c>)
 800c57c:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39_Queue */
	osMessageQStaticDef(GY39_Queue, 3, uint16_t, GY39_QueueBuffer,
 800c57e:	4b40      	ldr	r3, [pc, #256]	; (800c680 <MX_FREERTOS_Init+0x180>)
 800c580:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800c584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&GY39_QueueControlBlock);
	GY39_QueueHandle = osMessageCreate(osMessageQ(GY39_Queue), NULL);
 800c58a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c58e:	2100      	movs	r1, #0
 800c590:	4618      	mov	r0, r3
 800c592:	f7fd fd82 	bl	800a09a <osMessageCreate>
 800c596:	4603      	mov	r3, r0
 800c598:	4a3a      	ldr	r2, [pc, #232]	; (800c684 <MX_FREERTOS_Init+0x184>)
 800c59a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Thread_Idle */
	osThreadStaticDef(Thread_Idle, Thread_IdleEntry, osPriorityLow, 0, 512,
 800c59c:	4b3a      	ldr	r3, [pc, #232]	; (800c688 <MX_FREERTOS_Init+0x188>)
 800c59e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800c5a2:	461d      	mov	r5, r3
 800c5a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c5ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			Thread_IdleBuffer, &Thread_IdleControlBlock);
	Thread_IdleHandle = osThreadCreate(osThread(Thread_Idle), NULL);
 800c5b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fd fcdd 	bl	8009f76 <osThreadCreate>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	4a33      	ldr	r2, [pc, #204]	; (800c68c <MX_FREERTOS_Init+0x18c>)
 800c5c0:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_GY39 */
	osThreadStaticDef(Thread_GY39, Thread_GY39Entry, osPriorityNormal, 0, 512,
 800c5c2:	4b33      	ldr	r3, [pc, #204]	; (800c690 <MX_FREERTOS_Init+0x190>)
 800c5c4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800c5c8:	461d      	mov	r5, r3
 800c5ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c5d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			Thread_GY39Buffer, &Thread_GY39ControlBlock);
	Thread_GY39Handle = osThreadCreate(osThread(Thread_GY39), NULL);
 800c5d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c5da:	2100      	movs	r1, #0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fd fcca 	bl	8009f76 <osThreadCreate>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	4a2b      	ldr	r2, [pc, #172]	; (800c694 <MX_FREERTOS_Init+0x194>)
 800c5e6:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_WT931 */
	osThreadStaticDef(Thread_WT931, Thread_WT931Entry, osPriorityNormal, 0, 512,
 800c5e8:	4b2b      	ldr	r3, [pc, #172]	; (800c698 <MX_FREERTOS_Init+0x198>)
 800c5ea:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800c5ee:	461d      	mov	r5, r3
 800c5f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c5f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			Thread_WT931Buffer, &Thread_WT931ControlBlock);
	Thread_WT931Handle = osThreadCreate(osThread(Thread_WT931), NULL);
 800c5fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c600:	2100      	movs	r1, #0
 800c602:	4618      	mov	r0, r3
 800c604:	f7fd fcb7 	bl	8009f76 <osThreadCreate>
 800c608:	4603      	mov	r3, r0
 800c60a:	4a24      	ldr	r2, [pc, #144]	; (800c69c <MX_FREERTOS_Init+0x19c>)
 800c60c:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_Control */
	osThreadStaticDef(Thread_Control, Thread_ControlEntry, osPriorityNormal, 0,
 800c60e:	4b24      	ldr	r3, [pc, #144]	; (800c6a0 <MX_FREERTOS_Init+0x1a0>)
 800c610:	f107 0420 	add.w	r4, r7, #32
 800c614:	461d      	mov	r5, r3
 800c616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c61a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c61e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_ControlBuffer, &Thread_ControlControlBlock);
	Thread_ControlHandle = osThreadCreate(osThread(Thread_Control), NULL);
 800c622:	f107 0320 	add.w	r3, r7, #32
 800c626:	2100      	movs	r1, #0
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fd fca4 	bl	8009f76 <osThreadCreate>
 800c62e:	4603      	mov	r3, r0
 800c630:	4a1c      	ldr	r2, [pc, #112]	; (800c6a4 <MX_FREERTOS_Init+0x1a4>)
 800c632:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_Sensor */
	osThreadStaticDef(Thread_Sensor, Thread_SensorEntry, osPriorityNormal, 0,
 800c634:	4b1c      	ldr	r3, [pc, #112]	; (800c6a8 <MX_FREERTOS_Init+0x1a8>)
 800c636:	1d3c      	adds	r4, r7, #4
 800c638:	461d      	mov	r5, r3
 800c63a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c63c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c63e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_SensorBuffer, &Thread_SensorControlBlock);
	Thread_SensorHandle = osThreadCreate(osThread(Thread_Sensor), NULL);
 800c646:	1d3b      	adds	r3, r7, #4
 800c648:	2100      	movs	r1, #0
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fd fc93 	bl	8009f76 <osThreadCreate>
 800c650:	4603      	mov	r3, r0
 800c652:	4a16      	ldr	r2, [pc, #88]	; (800c6ac <MX_FREERTOS_Init+0x1ac>)
 800c654:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 800c656:	bf00      	nop
 800c658:	37c8      	adds	r7, #200	; 0xc8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bdb0      	pop	{r4, r5, r7, pc}
 800c65e:	bf00      	nop
 800c660:	24005134 	.word	0x24005134
 800c664:	240040d0 	.word	0x240040d0
 800c668:	2400517c 	.word	0x2400517c
 800c66c:	240052c8 	.word	0x240052c8
 800c670:	24005b20 	.word	0x24005b20
 800c674:	24005234 	.word	0x24005234
 800c678:	0800ed30 	.word	0x0800ed30
 800c67c:	240050d8 	.word	0x240050d8
 800c680:	0800ed40 	.word	0x0800ed40
 800c684:	240050dc 	.word	0x240050dc
 800c688:	0800ed50 	.word	0x0800ed50
 800c68c:	24005b68 	.word	0x24005b68
 800c690:	0800ed6c 	.word	0x0800ed6c
 800c694:	2400636c 	.word	0x2400636c
 800c698:	0800ed88 	.word	0x0800ed88
 800c69c:	240051dc 	.word	0x240051dc
 800c6a0:	0800eda4 	.word	0x0800eda4
 800c6a4:	24006b70 	.word	0x24006b70
 800c6a8:	0800edc0 	.word	0x0800edc0
 800c6ac:	240040d4 	.word	0x240040d4

0800c6b0 <Thread_IdleEntry>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_IdleEntry */
void Thread_IdleEntry(void const *argument)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Thread_IdleEntry */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800c6b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c6bc:	4805      	ldr	r0, [pc, #20]	; (800c6d4 <Thread_IdleEntry+0x24>)
 800c6be:	f7f7 f8e2 	bl	8003886 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Relay_GPIO_Port, Relay_Pin);
 800c6c2:	2101      	movs	r1, #1
 800c6c4:	4803      	ldr	r0, [pc, #12]	; (800c6d4 <Thread_IdleEntry+0x24>)
 800c6c6:	f7f7 f8de 	bl	8003886 <HAL_GPIO_TogglePin>
		osDelay(100);
 800c6ca:	2064      	movs	r0, #100	; 0x64
 800c6cc:	f7fd fc9f 	bl	800a00e <osDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800c6d0:	e7f2      	b.n	800c6b8 <Thread_IdleEntry+0x8>
 800c6d2:	bf00      	nop
 800c6d4:	58020800 	.word	0x58020800

0800c6d8 <Thread_GY39Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_GY39Entry */
void Thread_GY39Entry(void const *argument)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08a      	sub	sp, #40	; 0x28
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Thread_GY39Entry */
	uint8_t GY39_TxBuffer[TEMPER_UART_TXLen] =
 800c6e0:	4b26      	ldr	r3, [pc, #152]	; (800c77c <Thread_GY39Entry+0xa4>)
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	{ 0 };
	uint8_t GY39_RxBuffer[TEMPER_UART_RXLen] =
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	617b      	str	r3, [r7, #20]
 800c6f0:	f107 0318 	add.w	r3, r7, #24
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	605a      	str	r2, [r3, #4]
 800c6fa:	f8c3 2007 	str.w	r2, [r3, #7]
	{ 0 };
	CarbinData_t gy39_data;

	InitGY39(GY39_TxBuffer);
 800c6fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c702:	4618      	mov	r0, r3
 800c704:	f7fd fa77 	bl	8009bf6 <InitGY39>
	HAL_UART_Transmit_DMA(&TEMPER_UART, GY39_TxBuffer, sizeof(GY39_TxBuffer));
 800c708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c70c:	2203      	movs	r2, #3
 800c70e:	4619      	mov	r1, r3
 800c710:	481b      	ldr	r0, [pc, #108]	; (800c780 <Thread_GY39Entry+0xa8>)
 800c712:	f7fa ffab 	bl	800766c <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&TEMPER_UART, GY39_RxBuffer, sizeof(GY39_RxBuffer));
 800c716:	f107 0314 	add.w	r3, r7, #20
 800c71a:	220f      	movs	r2, #15
 800c71c:	4619      	mov	r1, r3
 800c71e:	4818      	ldr	r0, [pc, #96]	; (800c780 <Thread_GY39Entry+0xa8>)
 800c720:	f7fb f836 	bl	8007790 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(GY39_Done_semHandle, 0) == pdTRUE)
 800c724:	4b17      	ldr	r3, [pc, #92]	; (800c784 <Thread_GY39Entry+0xac>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2100      	movs	r1, #0
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fe f858 	bl	800a7e0 <xQueueSemaphoreTake>
 800c730:	4603      	mov	r3, r0
 800c732:	2b01      	cmp	r3, #1
 800c734:	d11d      	bne.n	800c772 <Thread_GY39Entry+0x9a>
		{
			gy39_data = ReceiveGY39(GY39_RxBuffer);
 800c736:	f107 030c 	add.w	r3, r7, #12
 800c73a:	f107 0214 	add.w	r2, r7, #20
 800c73e:	4611      	mov	r1, r2
 800c740:	4618      	mov	r0, r3
 800c742:	f7fd fa6d 	bl	8009c20 <ReceiveGY39>

//			printf("t:%d, %d, %d\r\n", gy39_data.CarbinBarometric,
//					gy39_data.CarbinHumidity, gy39_data.CarbinTemperature);
//			xQueueSend(GY39_QueueHandle, &gy39_data, 0);

			memset(&GY39_RxBuffer, 0, sizeof(GY39_RxBuffer));
 800c746:	f107 0314 	add.w	r3, r7, #20
 800c74a:	220f      	movs	r2, #15
 800c74c:	2100      	movs	r1, #0
 800c74e:	4618      	mov	r0, r3
 800c750:	f002 fab2 	bl	800ecb8 <memset>
			__HAL_UART_ENABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 800c754:	4b0a      	ldr	r3, [pc, #40]	; (800c780 <Thread_GY39Entry+0xa8>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	4b09      	ldr	r3, [pc, #36]	; (800c780 <Thread_GY39Entry+0xa8>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f042 0210 	orr.w	r2, r2, #16
 800c762:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&TEMPER_UART, GY39_RxBuffer,
 800c764:	f107 0314 	add.w	r3, r7, #20
 800c768:	220f      	movs	r2, #15
 800c76a:	4619      	mov	r1, r3
 800c76c:	4804      	ldr	r0, [pc, #16]	; (800c780 <Thread_GY39Entry+0xa8>)
 800c76e:	f7fb f80f 	bl	8007790 <HAL_UART_Receive_DMA>
					sizeof(GY39_RxBuffer));
		}

		osDelay(100);
 800c772:	2064      	movs	r0, #100	; 0x64
 800c774:	f7fd fc4b 	bl	800a00e <osDelay>
		if (xSemaphoreTake(GY39_Done_semHandle, 0) == pdTRUE)
 800c778:	e7d4      	b.n	800c724 <Thread_GY39Entry+0x4c>
 800c77a:	bf00      	nop
 800c77c:	0800eddc 	.word	0x0800eddc
 800c780:	24007018 	.word	0x24007018
 800c784:	240052c8 	.word	0x240052c8

0800c788 <Thread_WT931Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_WT931Entry */
void Thread_WT931Entry(void const *argument)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b094      	sub	sp, #80	; 0x50
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Thread_WT931Entry */
	uint8_t WT931_RxBuffer[AXIS_UART_RXLen] =
 800c790:	2300      	movs	r3, #0
 800c792:	627b      	str	r3, [r7, #36]	; 0x24
 800c794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c798:	2228      	movs	r2, #40	; 0x28
 800c79a:	2100      	movs	r1, #0
 800c79c:	4618      	mov	r0, r3
 800c79e:	f002 fa8b 	bl	800ecb8 <memset>
	{ 0 };
	IMUData_t wt931_data;

	HAL_UART_Receive_DMA(&AXIS_UART, WT931_RxBuffer, sizeof(WT931_RxBuffer));
 800c7a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7a6:	222c      	movs	r2, #44	; 0x2c
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4817      	ldr	r0, [pc, #92]	; (800c808 <Thread_WT931Entry+0x80>)
 800c7ac:	f7fa fff0 	bl	8007790 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(WT931_DONE_semHandle, 0) == pdTRUE)
 800c7b0:	4b16      	ldr	r3, [pc, #88]	; (800c80c <Thread_WT931Entry+0x84>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fe f812 	bl	800a7e0 <xQueueSemaphoreTake>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d11d      	bne.n	800c7fe <Thread_WT931Entry+0x76>
		{
			wt931_data = ReceiveWT931(WT931_RxBuffer);
 800c7c2:	f107 030c 	add.w	r3, r7, #12
 800c7c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fd fa7f 	bl	8009cd0 <ReceiveWT931>

//			printf("a:%d, %d, %d\r\n", wt931_data.EulerAngle[0],
//					wt931_data.EulerAngle[1], wt931_data.EulerAngle[2]);
//			xQueueSend(WT931_QueueHandle, &wt931_data, 0);

			memset(&WT931_RxBuffer, 0, sizeof(WT931_RxBuffer));
 800c7d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7d6:	222c      	movs	r2, #44	; 0x2c
 800c7d8:	2100      	movs	r1, #0
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f002 fa6c 	bl	800ecb8 <memset>
			__HAL_UART_ENABLE_IT(&AXIS_UART, UART_IT_IDLE);
 800c7e0:	4b09      	ldr	r3, [pc, #36]	; (800c808 <Thread_WT931Entry+0x80>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	4b08      	ldr	r3, [pc, #32]	; (800c808 <Thread_WT931Entry+0x80>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f042 0210 	orr.w	r2, r2, #16
 800c7ee:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&AXIS_UART, WT931_RxBuffer,
 800c7f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7f4:	222c      	movs	r2, #44	; 0x2c
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	4803      	ldr	r0, [pc, #12]	; (800c808 <Thread_WT931Entry+0x80>)
 800c7fa:	f7fa ffc9 	bl	8007790 <HAL_UART_Receive_DMA>
					sizeof(WT931_RxBuffer));
		}
		osDelay(1);
 800c7fe:	2001      	movs	r0, #1
 800c800:	f7fd fc05 	bl	800a00e <osDelay>
		if (xSemaphoreTake(WT931_DONE_semHandle, 0) == pdTRUE)
 800c804:	e7d4      	b.n	800c7b0 <Thread_WT931Entry+0x28>
 800c806:	bf00      	nop
 800c808:	240071b0 	.word	0x240071b0
 800c80c:	240040d0 	.word	0x240040d0

0800c810 <Thread_ControlEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_ControlEntry */
void Thread_ControlEntry(void const *argument)
{
 800c810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c812:	b0b3      	sub	sp, #204	; 0xcc
 800c814:	af06      	add	r7, sp, #24
 800c816:	64f8      	str	r0, [r7, #76]	; 0x4c
	ControlData_t control_data;
	uint8_t Command_RxBuffer[Master_UART_RXLen * 2];
	static vu8 relay_controller;
	static PwmVal_t pwm_controller;

	pwm_controller.ArmServo[0] = 1500;
 800c818:	4b7d      	ldr	r3, [pc, #500]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c81a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c81e:	625a      	str	r2, [r3, #36]	; 0x24
	pwm_controller.ArmServo[1] = 1500;
 800c820:	4b7b      	ldr	r3, [pc, #492]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c822:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c826:	629a      	str	r2, [r3, #40]	; 0x28
	pwm_controller.ArmServo[2] = 1500;
 800c828:	4b79      	ldr	r3, [pc, #484]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c82a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c82e:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm_controller.ArmServo[3] = 1500;
 800c830:	4b77      	ldr	r3, [pc, #476]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c832:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c836:	631a      	str	r2, [r3, #48]	; 0x30
	pwm_controller.ArmServo[4] = 1500;
 800c838:	4b75      	ldr	r3, [pc, #468]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c83a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c83e:	635a      	str	r2, [r3, #52]	; 0x34
	pwm_controller.ArmServo[5] = 1500;
 800c840:	4b73      	ldr	r3, [pc, #460]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c842:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c846:	639a      	str	r2, [r3, #56]	; 0x38
	pwm_controller.ConveyServo = 1500;
 800c848:	4b71      	ldr	r3, [pc, #452]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c84a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c84e:	621a      	str	r2, [r3, #32]
	pwm_controller.HorizontalThruster[0] = 1500;
 800c850:	4b6f      	ldr	r3, [pc, #444]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c852:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c856:	601a      	str	r2, [r3, #0]
	pwm_controller.HorizontalThruster[1] = 1500;
 800c858:	4b6d      	ldr	r3, [pc, #436]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c85a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c85e:	605a      	str	r2, [r3, #4]
	pwm_controller.HorizontalThruster[2] = 1500;
 800c860:	4b6b      	ldr	r3, [pc, #428]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c862:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c866:	609a      	str	r2, [r3, #8]
	pwm_controller.HorizontalThruster[3] = 1500;
 800c868:	4b69      	ldr	r3, [pc, #420]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c86a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c86e:	60da      	str	r2, [r3, #12]
	pwm_controller.VerticalThruster[0] = 1500;
 800c870:	4b67      	ldr	r3, [pc, #412]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c872:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c876:	611a      	str	r2, [r3, #16]
	pwm_controller.VerticalThruster[1] = 1500;
 800c878:	4b65      	ldr	r3, [pc, #404]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c87a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c87e:	615a      	str	r2, [r3, #20]
	pwm_controller.LightServo = 1500;
 800c880:	4b63      	ldr	r3, [pc, #396]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c882:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c886:	619a      	str	r2, [r3, #24]
	pwm_controller.PanServo = 1500;
 800c888:	4b61      	ldr	r3, [pc, #388]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c88a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c88e:	61da      	str	r2, [r3, #28]
	pwm_controller.RestServo = 1500;
 800c890:	4b5f      	ldr	r3, [pc, #380]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c892:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c896:	63da      	str	r2, [r3, #60]	; 0x3c

	__HAL_UART_ENABLE_IT(&Master_UART, UART_IT_IDLE);
 800c898:	4b5e      	ldr	r3, [pc, #376]	; (800ca14 <Thread_ControlEntry+0x204>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	4b5d      	ldr	r3, [pc, #372]	; (800ca14 <Thread_ControlEntry+0x204>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f042 0210 	orr.w	r2, r2, #16
 800c8a6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Master_UART, Command_RxBuffer, sizeof(Command_RxBuffer));
 800c8a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c8ac:	223c      	movs	r2, #60	; 0x3c
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	4858      	ldr	r0, [pc, #352]	; (800ca14 <Thread_ControlEntry+0x204>)
 800c8b2:	f7fa ff6d 	bl	8007790 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(CMD_DONE_semHandle, 0) == pdTRUE)
 800c8b6:	4b58      	ldr	r3, [pc, #352]	; (800ca18 <Thread_ControlEntry+0x208>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fd ff8f 	bl	800a7e0 <xQueueSemaphoreTake>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	f040 8118 	bne.w	800cafa <Thread_ControlEntry+0x2ea>
		{
			control_data = CaptureControlData(Command_RxBuffer);
 800c8ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c8ce:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fd f839 	bl	800994c <CaptureControlData>
			pwm_controller = ControlDataAnalysis(control_data);
 800c8da:	4b4d      	ldr	r3, [pc, #308]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c8dc:	607b      	str	r3, [r7, #4]
 800c8de:	f107 0608 	add.w	r6, r7, #8
 800c8e2:	466d      	mov	r5, sp
 800c8e4:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 800c8e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8ec:	6823      	ldr	r3, [r4, #0]
 800c8ee:	602b      	str	r3, [r5, #0]
 800c8f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c8f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f000 f922 	bl	800cb40 <ControlDataAnalysis>
 800c8fc:	687d      	ldr	r5, [r7, #4]
 800c8fe:	f107 0408 	add.w	r4, r7, #8
 800c902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c90a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c90c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c90e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c912:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			relay_controller = (vu8) ((control_data.Mode & 0x08) >> 4);
 800c916:	4b41      	ldr	r3, [pc, #260]	; (800ca1c <Thread_ControlEntry+0x20c>)
 800c918:	2200      	movs	r2, #0
 800c91a:	701a      	strb	r2, [r3, #0]

			RestrictPwmValue((pwm_controller.HorizontalThruster[0]), 700, 2300);
 800c91c:	4b3c      	ldr	r3, [pc, #240]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c924:	d30b      	bcc.n	800c93e <Thread_ControlEntry+0x12e>
 800c926:	4b3a      	ldr	r3, [pc, #232]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800c92e:	4293      	cmp	r3, r2
 800c930:	d802      	bhi.n	800c938 <Thread_ControlEntry+0x128>
 800c932:	4b37      	ldr	r3, [pc, #220]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	e004      	b.n	800c942 <Thread_ControlEntry+0x132>
 800c938:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800c93c:	e001      	b.n	800c942 <Thread_ControlEntry+0x132>
 800c93e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800c942:	4a33      	ldr	r2, [pc, #204]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c944:	6013      	str	r3, [r2, #0]
			RestrictPwmValue((pwm_controller.HorizontalThruster[1]), 700, 2300);
 800c946:	4b32      	ldr	r3, [pc, #200]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c94e:	d30b      	bcc.n	800c968 <Thread_ControlEntry+0x158>
 800c950:	4b2f      	ldr	r3, [pc, #188]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800c958:	4293      	cmp	r3, r2
 800c95a:	d802      	bhi.n	800c962 <Thread_ControlEntry+0x152>
 800c95c:	4b2c      	ldr	r3, [pc, #176]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	e004      	b.n	800c96c <Thread_ControlEntry+0x15c>
 800c962:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800c966:	e001      	b.n	800c96c <Thread_ControlEntry+0x15c>
 800c968:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800c96c:	4a28      	ldr	r2, [pc, #160]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c96e:	6053      	str	r3, [r2, #4]
			RestrictPwmValue((pwm_controller.HorizontalThruster[2]), 700, 2300);
 800c970:	4b27      	ldr	r3, [pc, #156]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c978:	d30b      	bcc.n	800c992 <Thread_ControlEntry+0x182>
 800c97a:	4b25      	ldr	r3, [pc, #148]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800c982:	4293      	cmp	r3, r2
 800c984:	d802      	bhi.n	800c98c <Thread_ControlEntry+0x17c>
 800c986:	4b22      	ldr	r3, [pc, #136]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	e004      	b.n	800c996 <Thread_ControlEntry+0x186>
 800c98c:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800c990:	e001      	b.n	800c996 <Thread_ControlEntry+0x186>
 800c992:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800c996:	4a1e      	ldr	r2, [pc, #120]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c998:	6093      	str	r3, [r2, #8]
			RestrictPwmValue((pwm_controller.HorizontalThruster[3]), 700, 2300);
 800c99a:	4b1d      	ldr	r3, [pc, #116]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c9a2:	d30b      	bcc.n	800c9bc <Thread_ControlEntry+0x1ac>
 800c9a4:	4b1a      	ldr	r3, [pc, #104]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d802      	bhi.n	800c9b6 <Thread_ControlEntry+0x1a6>
 800c9b0:	4b17      	ldr	r3, [pc, #92]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	e004      	b.n	800c9c0 <Thread_ControlEntry+0x1b0>
 800c9b6:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800c9ba:	e001      	b.n	800c9c0 <Thread_ControlEntry+0x1b0>
 800c9bc:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800c9c0:	4a13      	ldr	r2, [pc, #76]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c9c2:	60d3      	str	r3, [r2, #12]
			RestrictPwmValue((pwm_controller.VerticalThruster[0]), 700, 2300);
 800c9c4:	4b12      	ldr	r3, [pc, #72]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c9cc:	d30b      	bcc.n	800c9e6 <Thread_ControlEntry+0x1d6>
 800c9ce:	4b10      	ldr	r3, [pc, #64]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d802      	bhi.n	800c9e0 <Thread_ControlEntry+0x1d0>
 800c9da:	4b0d      	ldr	r3, [pc, #52]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c9dc:	691b      	ldr	r3, [r3, #16]
 800c9de:	e004      	b.n	800c9ea <Thread_ControlEntry+0x1da>
 800c9e0:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800c9e4:	e001      	b.n	800c9ea <Thread_ControlEntry+0x1da>
 800c9e6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800c9ea:	4a09      	ldr	r2, [pc, #36]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c9ec:	6113      	str	r3, [r2, #16]
			RestrictPwmValue((pwm_controller.VerticalThruster[1]), 700, 2300);
 800c9ee:	4b08      	ldr	r3, [pc, #32]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c9f0:	695b      	ldr	r3, [r3, #20]
 800c9f2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c9f6:	d313      	bcc.n	800ca20 <Thread_ControlEntry+0x210>
 800c9f8:	4b05      	ldr	r3, [pc, #20]	; (800ca10 <Thread_ControlEntry+0x200>)
 800c9fa:	695b      	ldr	r3, [r3, #20]
 800c9fc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d802      	bhi.n	800ca0a <Thread_ControlEntry+0x1fa>
 800ca04:	4b02      	ldr	r3, [pc, #8]	; (800ca10 <Thread_ControlEntry+0x200>)
 800ca06:	695b      	ldr	r3, [r3, #20]
 800ca08:	e00c      	b.n	800ca24 <Thread_ControlEntry+0x214>
 800ca0a:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800ca0e:	e009      	b.n	800ca24 <Thread_ControlEntry+0x214>
 800ca10:	24003fd8 	.word	0x24003fd8
 800ca14:	24006f10 	.word	0x24006f10
 800ca18:	24005234 	.word	0x24005234
 800ca1c:	24004018 	.word	0x24004018
 800ca20:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800ca24:	4a37      	ldr	r2, [pc, #220]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca26:	6153      	str	r3, [r2, #20]

			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, relay_controller);
 800ca28:	4b37      	ldr	r3, [pc, #220]	; (800cb08 <Thread_ControlEntry+0x2f8>)
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	461a      	mov	r2, r3
 800ca30:	2101      	movs	r1, #1
 800ca32:	4836      	ldr	r0, [pc, #216]	; (800cb0c <Thread_ControlEntry+0x2fc>)
 800ca34:	f7f6 ff0e 	bl	8003854 <HAL_GPIO_WritePin>

			TIM1->CCR1 = pwm_controller.HorizontalThruster[2]; //B1 '9'
 800ca38:	4a35      	ldr	r2, [pc, #212]	; (800cb10 <Thread_ControlEntry+0x300>)
 800ca3a:	4b32      	ldr	r3, [pc, #200]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = pwm_controller.HorizontalThruster[1]; //A2 '8'
 800ca40:	4a33      	ldr	r2, [pc, #204]	; (800cb10 <Thread_ControlEntry+0x300>)
 800ca42:	4b30      	ldr	r3, [pc, #192]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = pwm_controller.HorizontalThruster[0]; //A1 '6'
 800ca48:	4a31      	ldr	r2, [pc, #196]	; (800cb10 <Thread_ControlEntry+0x300>)
 800ca4a:	4b2e      	ldr	r3, [pc, #184]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	63d3      	str	r3, [r2, #60]	; 0x3c

			TIM2->CCR1 = pwm_controller.RestServo; //Pan(not used)
 800ca50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ca54:	4b2b      	ldr	r3, [pc, #172]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca58:	6353      	str	r3, [r2, #52]	; 0x34
			TIM2->CCR2 = pwm_controller.VerticalThruster[0]; //C1 '3'
 800ca5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ca5e:	4b29      	ldr	r3, [pc, #164]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	6393      	str	r3, [r2, #56]	; 0x38
			TIM2->CCR3 = pwm_controller.HorizontalThruster[3]; //B2 '2'
 800ca64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ca68:	4b26      	ldr	r3, [pc, #152]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	63d3      	str	r3, [r2, #60]	; 0x3c

			TIM3->CCR1 = pwm_controller.ArmServo[2]; //Middle Arm
 800ca6e:	4a29      	ldr	r2, [pc, #164]	; (800cb14 <Thread_ControlEntry+0x304>)
 800ca70:	4b24      	ldr	r3, [pc, #144]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca74:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = pwm_controller.ArmServo[1]; //Main Arm
 800ca76:	4a27      	ldr	r2, [pc, #156]	; (800cb14 <Thread_ControlEntry+0x304>)
 800ca78:	4b22      	ldr	r3, [pc, #136]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7c:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = pwm_controller.ArmServo[0]; //Horizental Arm
 800ca7e:	4a25      	ldr	r2, [pc, #148]	; (800cb14 <Thread_ControlEntry+0x304>)
 800ca80:	4b20      	ldr	r3, [pc, #128]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca84:	63d3      	str	r3, [r2, #60]	; 0x3c

			TIM4->CCR2 = pwm_controller.ConveyServo; //Convey
 800ca86:	4a24      	ldr	r2, [pc, #144]	; (800cb18 <Thread_ControlEntry+0x308>)
 800ca88:	4b1e      	ldr	r3, [pc, #120]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca8a:	6a1b      	ldr	r3, [r3, #32]
 800ca8c:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = pwm_controller.LightServo; //Light
 800ca8e:	4a22      	ldr	r2, [pc, #136]	; (800cb18 <Thread_ControlEntry+0x308>)
 800ca90:	4b1c      	ldr	r3, [pc, #112]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800ca92:	699b      	ldr	r3, [r3, #24]
 800ca94:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM4->CCR4 = 1500; //hardware float(not used)
 800ca96:	4b20      	ldr	r3, [pc, #128]	; (800cb18 <Thread_ControlEntry+0x308>)
 800ca98:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ca9c:	641a      	str	r2, [r3, #64]	; 0x40

			TIM5->CCR1 = pwm_controller.ArmServo[5]; //Rest Machine Arm
 800ca9e:	4a1f      	ldr	r2, [pc, #124]	; (800cb1c <Thread_ControlEntry+0x30c>)
 800caa0:	4b18      	ldr	r3, [pc, #96]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800caa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa4:	6353      	str	r3, [r2, #52]	; 0x34
			TIM5->CCR2 = pwm_controller.ArmServo[3]; //Front Arm
 800caa6:	4a1d      	ldr	r2, [pc, #116]	; (800cb1c <Thread_ControlEntry+0x30c>)
 800caa8:	4b16      	ldr	r3, [pc, #88]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800caaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caac:	6393      	str	r3, [r2, #56]	; 0x38

			TIM8->CCR3 = pwm_controller.VerticalThruster[1]; //C2 '5'
 800caae:	4a1c      	ldr	r2, [pc, #112]	; (800cb20 <Thread_ControlEntry+0x310>)
 800cab0:	4b14      	ldr	r3, [pc, #80]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800cab2:	695b      	ldr	r3, [r3, #20]
 800cab4:	63d3      	str	r3, [r2, #60]	; 0x3c

			TIM12->CCR1 = 1500; //hardware float(not used)
 800cab6:	4b1b      	ldr	r3, [pc, #108]	; (800cb24 <Thread_ControlEntry+0x314>)
 800cab8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cabc:	635a      	str	r2, [r3, #52]	; 0x34

			TIM15->CCR1 = pwm_controller.ArmServo[4]; //Grab Arm
 800cabe:	4a1a      	ldr	r2, [pc, #104]	; (800cb28 <Thread_ControlEntry+0x318>)
 800cac0:	4b10      	ldr	r3, [pc, #64]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800cac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac4:	6353      	str	r3, [r2, #52]	; 0x34
			TIM15->CCR2 = pwm_controller.PanServo; //Pan
 800cac6:	4a18      	ldr	r2, [pc, #96]	; (800cb28 <Thread_ControlEntry+0x318>)
 800cac8:	4b0e      	ldr	r3, [pc, #56]	; (800cb04 <Thread_ControlEntry+0x2f4>)
 800caca:	69db      	ldr	r3, [r3, #28]
 800cacc:	6393      	str	r3, [r2, #56]	; 0x38

			memset(&Command_RxBuffer, 0, sizeof(Command_RxBuffer));
 800cace:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cad2:	223c      	movs	r2, #60	; 0x3c
 800cad4:	2100      	movs	r1, #0
 800cad6:	4618      	mov	r0, r3
 800cad8:	f002 f8ee 	bl	800ecb8 <memset>
			__HAL_UART_ENABLE_IT(&Master_UART, UART_IT_IDLE);
 800cadc:	4b13      	ldr	r3, [pc, #76]	; (800cb2c <Thread_ControlEntry+0x31c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	4b12      	ldr	r3, [pc, #72]	; (800cb2c <Thread_ControlEntry+0x31c>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f042 0210 	orr.w	r2, r2, #16
 800caea:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&Master_UART, Command_RxBuffer,
 800caec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800caf0:	223c      	movs	r2, #60	; 0x3c
 800caf2:	4619      	mov	r1, r3
 800caf4:	480d      	ldr	r0, [pc, #52]	; (800cb2c <Thread_ControlEntry+0x31c>)
 800caf6:	f7fa fe4b 	bl	8007790 <HAL_UART_Receive_DMA>
					sizeof(Command_RxBuffer));
		}

		osDelay(1);
 800cafa:	2001      	movs	r0, #1
 800cafc:	f7fd fa87 	bl	800a00e <osDelay>
		if (xSemaphoreTake(CMD_DONE_semHandle, 0) == pdTRUE)
 800cb00:	e6d9      	b.n	800c8b6 <Thread_ControlEntry+0xa6>
 800cb02:	bf00      	nop
 800cb04:	24003fd8 	.word	0x24003fd8
 800cb08:	24004018 	.word	0x24004018
 800cb0c:	58020800 	.word	0x58020800
 800cb10:	40010000 	.word	0x40010000
 800cb14:	40000400 	.word	0x40000400
 800cb18:	40000800 	.word	0x40000800
 800cb1c:	40000c00 	.word	0x40000c00
 800cb20:	40010400 	.word	0x40010400
 800cb24:	40001800 	.word	0x40001800
 800cb28:	40014000 	.word	0x40014000
 800cb2c:	24006f10 	.word	0x24006f10

0800cb30 <Thread_SensorEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_SensorEntry */
void Thread_SensorEntry(void const *argument)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
	for (;;)
	{
//		xQueueReceive(GY39_QueueHandle, &gy39_data, 0);
//		xQueueReceive(WT931_QueueHandle, &wt931_data, 0);

		osDelay(1);
 800cb38:	2001      	movs	r0, #1
 800cb3a:	f7fd fa68 	bl	800a00e <osDelay>
 800cb3e:	e7fb      	b.n	800cb38 <Thread_SensorEntry+0x8>

0800cb40 <ControlDataAnalysis>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

PwmVal_t ControlDataAnalysis(ControlData_t controller)
{
 800cb40:	b084      	sub	sp, #16
 800cb42:	b5b0      	push	{r4, r5, r7, lr}
 800cb44:	b0a4      	sub	sp, #144	; 0x90
 800cb46:	af02      	add	r7, sp, #8
 800cb48:	6478      	str	r0, [r7, #68]	; 0x44
 800cb4a:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 800cb4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	PwmVal_t temp_pwm;
	static uint8_t IS_SIDEPUSH = 0;
	static uint8_t special_mode = 0;

	if (controller.Mode & 0x01 == 1)
 800cb52:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800cb56:	f003 0301 	and.w	r3, r3, #1
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d003      	beq.n	800cb66 <ControlDataAnalysis+0x26>
	{
		IS_SIDEPUSH = SIDEPUSH_MODE;
 800cb5e:	4b29      	ldr	r3, [pc, #164]	; (800cc04 <ControlDataAnalysis+0xc4>)
 800cb60:	2201      	movs	r2, #1
 800cb62:	701a      	strb	r2, [r3, #0]
 800cb64:	e002      	b.n	800cb6c <ControlDataAnalysis+0x2c>
	}
	else
	{
		IS_SIDEPUSH = NORMAL_MODE;
 800cb66:	4b27      	ldr	r3, [pc, #156]	; (800cc04 <ControlDataAnalysis+0xc4>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	701a      	strb	r2, [r3, #0]
	}

	temp_pwm = MoveControl(controller.StraightNum, controller.RotateNum,
 800cb6c:	f8b7 109e 	ldrh.w	r1, [r7, #158]	; 0x9e
 800cb70:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800cb74:	f8b7 40a2 	ldrh.w	r4, [r7, #162]	; 0xa2
 800cb78:	4b23      	ldr	r3, [pc, #140]	; (800cc08 <ControlDataAnalysis+0xc8>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	4623      	mov	r3, r4
 800cb82:	f7fc fdd9 	bl	8009738 <MoveControl>
 800cb86:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800cb8a:	463d      	mov	r5, r7
 800cb8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cb9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			controller.VerticalNum, special_mode);
	temp_pwm.LightServo = controller.LightNum;
 800cba0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800cba4:	663b      	str	r3, [r7, #96]	; 0x60
	temp_pwm.PanServo = controller.PanNum;
 800cba6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800cbaa:	667b      	str	r3, [r7, #100]	; 0x64
	temp_pwm.ConveyServo = controller.ConveyNum;
 800cbac:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800cbb0:	66bb      	str	r3, [r7, #104]	; 0x68
	temp_pwm.ArmServo[0] = controller.ArmNum[0]; //Horizental
 800cbb2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cbb6:	66fb      	str	r3, [r7, #108]	; 0x6c
	temp_pwm.ArmServo[1] = controller.ArmNum[1]; //Main
 800cbb8:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800cbbc:	673b      	str	r3, [r7, #112]	; 0x70
	temp_pwm.ArmServo[2] = controller.ArmNum[2]; //Middle
 800cbbe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800cbc2:	677b      	str	r3, [r7, #116]	; 0x74
	temp_pwm.ArmServo[3] = controller.ArmNum[3]; //Front
 800cbc4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800cbc8:	67bb      	str	r3, [r7, #120]	; 0x78
	temp_pwm.ArmServo[4] = controller.ArmNum[4]; //Grab
 800cbca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800cbce:	67fb      	str	r3, [r7, #124]	; 0x7c
	temp_pwm.ArmServo[5] = controller.ArmNum[5]; //rest
 800cbd0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800cbd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	return temp_pwm;
 800cbd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbda:	461d      	mov	r5, r3
 800cbdc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800cbe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cbf0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800cbf4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbf6:	3788      	adds	r7, #136	; 0x88
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cbfe:	b004      	add	sp, #16
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	24004019 	.word	0x24004019
 800cc08:	2400401a 	.word	0x2400401a

0800cc0c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08c      	sub	sp, #48	; 0x30
 800cc10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc12:	f107 031c 	add.w	r3, r7, #28
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	605a      	str	r2, [r3, #4]
 800cc1c:	609a      	str	r2, [r3, #8]
 800cc1e:	60da      	str	r2, [r3, #12]
 800cc20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc22:	4b40      	ldr	r3, [pc, #256]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc28:	4a3e      	ldr	r2, [pc, #248]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc2a:	f043 0310 	orr.w	r3, r3, #16
 800cc2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cc32:	4b3c      	ldr	r3, [pc, #240]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc38:	f003 0310 	and.w	r3, r3, #16
 800cc3c:	61bb      	str	r3, [r7, #24]
 800cc3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc40:	4b38      	ldr	r3, [pc, #224]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc46:	4a37      	ldr	r2, [pc, #220]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc48:	f043 0304 	orr.w	r3, r3, #4
 800cc4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cc50:	4b34      	ldr	r3, [pc, #208]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc56:	f003 0304 	and.w	r3, r3, #4
 800cc5a:	617b      	str	r3, [r7, #20]
 800cc5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cc5e:	4b31      	ldr	r3, [pc, #196]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc64:	4a2f      	ldr	r2, [pc, #188]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cc6e:	4b2d      	ldr	r3, [pc, #180]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc78:	613b      	str	r3, [r7, #16]
 800cc7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc7c:	4b29      	ldr	r3, [pc, #164]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc82:	4a28      	ldr	r2, [pc, #160]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc84:	f043 0301 	orr.w	r3, r3, #1
 800cc88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cc8c:	4b25      	ldr	r3, [pc, #148]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc92:	f003 0301 	and.w	r3, r3, #1
 800cc96:	60fb      	str	r3, [r7, #12]
 800cc98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc9a:	4b22      	ldr	r3, [pc, #136]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cc9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cca0:	4a20      	ldr	r2, [pc, #128]	; (800cd24 <MX_GPIO_Init+0x118>)
 800cca2:	f043 0302 	orr.w	r3, r3, #2
 800cca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ccaa:	4b1e      	ldr	r3, [pc, #120]	; (800cd24 <MX_GPIO_Init+0x118>)
 800ccac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccb0:	f003 0302 	and.w	r3, r3, #2
 800ccb4:	60bb      	str	r3, [r7, #8]
 800ccb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ccb8:	4b1a      	ldr	r3, [pc, #104]	; (800cd24 <MX_GPIO_Init+0x118>)
 800ccba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccbe:	4a19      	ldr	r2, [pc, #100]	; (800cd24 <MX_GPIO_Init+0x118>)
 800ccc0:	f043 0308 	orr.w	r3, r3, #8
 800ccc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ccc8:	4b16      	ldr	r3, [pc, #88]	; (800cd24 <MX_GPIO_Init+0x118>)
 800ccca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccce:	f003 0308 	and.w	r3, r3, #8
 800ccd2:	607b      	str	r3, [r7, #4]
 800ccd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|Relay_Pin, GPIO_PIN_RESET);
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f242 0101 	movw	r1, #8193	; 0x2001
 800ccdc:	4812      	ldr	r0, [pc, #72]	; (800cd28 <MX_GPIO_Init+0x11c>)
 800ccde:	f7f6 fdb9 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|Relay_Pin;
 800cce2:	f242 0301 	movw	r3, #8193	; 0x2001
 800cce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cce8:	2301      	movs	r3, #1
 800ccea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ccec:	2301      	movs	r3, #1
 800ccee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ccf4:	f107 031c 	add.w	r3, r7, #28
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	480b      	ldr	r0, [pc, #44]	; (800cd28 <MX_GPIO_Init+0x11c>)
 800ccfc:	f7f6 fbfa 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WaterDet_Pin;
 800cd00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cd06:	2300      	movs	r3, #0
 800cd08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WaterDet_GPIO_Port, &GPIO_InitStruct);
 800cd0e:	f107 031c 	add.w	r3, r7, #28
 800cd12:	4619      	mov	r1, r3
 800cd14:	4805      	ldr	r0, [pc, #20]	; (800cd2c <MX_GPIO_Init+0x120>)
 800cd16:	f7f6 fbed 	bl	80034f4 <HAL_GPIO_Init>

}
 800cd1a:	bf00      	nop
 800cd1c:	3730      	adds	r7, #48	; 0x30
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	58024400 	.word	0x58024400
 800cd28:	58020800 	.word	0x58020800
 800cd2c:	58020400 	.word	0x58020400

0800cd30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cd34:	f7f3 fc50 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cd38:	f000 f886 	bl	800ce48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cd3c:	f7ff ff66 	bl	800cc0c <MX_GPIO_Init>
  MX_DMA_Init();
 800cd40:	f7ff fb7c 	bl	800c43c <MX_DMA_Init>
  MX_TIM1_Init();
 800cd44:	f000 fc8e 	bl	800d664 <MX_TIM1_Init>
  MX_TIM2_Init();
 800cd48:	f000 fd52 	bl	800d7f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800cd4c:	f000 fdde 	bl	800d90c <MX_TIM3_Init>
  MX_TIM4_Init();
 800cd50:	f000 fe6a 	bl	800da28 <MX_TIM4_Init>
  MX_TIM5_Init();
 800cd54:	f000 fef6 	bl	800db44 <MX_TIM5_Init>
  MX_TIM8_Init();
 800cd58:	f000 ff78 	bl	800dc4c <MX_TIM8_Init>
  MX_TIM12_Init();
 800cd5c:	f001 f824 	bl	800dda8 <MX_TIM12_Init>
  MX_TIM15_Init();
 800cd60:	f001 f886 	bl	800de70 <MX_TIM15_Init>
  MX_UART5_Init();
 800cd64:	f001 fb8e 	bl	800e484 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800cd68:	f001 fbd8 	bl	800e51c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800cd6c:	f001 fc22 	bl	800e5b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800cd70:	f001 fc6c 	bl	800e64c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800cd74:	2201      	movs	r2, #1
 800cd76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cd7a:	482a      	ldr	r0, [pc, #168]	; (800ce24 <main+0xf4>)
 800cd7c:	f7f6 fd6a 	bl	8003854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 800cd80:	2201      	movs	r2, #1
 800cd82:	2101      	movs	r1, #1
 800cd84:	4827      	ldr	r0, [pc, #156]	; (800ce24 <main+0xf4>)
 800cd86:	f7f6 fd65 	bl	8003854 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	4826      	ldr	r0, [pc, #152]	; (800ce28 <main+0xf8>)
 800cd8e:	f7f9 fa5d 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800cd92:	2104      	movs	r1, #4
 800cd94:	4824      	ldr	r0, [pc, #144]	; (800ce28 <main+0xf8>)
 800cd96:	f7f9 fa59 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800cd9a:	2108      	movs	r1, #8
 800cd9c:	4822      	ldr	r0, [pc, #136]	; (800ce28 <main+0xf8>)
 800cd9e:	f7f9 fa55 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800cda2:	2100      	movs	r1, #0
 800cda4:	4821      	ldr	r0, [pc, #132]	; (800ce2c <main+0xfc>)
 800cda6:	f7f9 fa51 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800cdaa:	2104      	movs	r1, #4
 800cdac:	481f      	ldr	r0, [pc, #124]	; (800ce2c <main+0xfc>)
 800cdae:	f7f9 fa4d 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800cdb2:	2108      	movs	r1, #8
 800cdb4:	481d      	ldr	r0, [pc, #116]	; (800ce2c <main+0xfc>)
 800cdb6:	f7f9 fa49 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800cdba:	2100      	movs	r1, #0
 800cdbc:	481c      	ldr	r0, [pc, #112]	; (800ce30 <main+0x100>)
 800cdbe:	f7f9 fa45 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800cdc2:	2104      	movs	r1, #4
 800cdc4:	481a      	ldr	r0, [pc, #104]	; (800ce30 <main+0x100>)
 800cdc6:	f7f9 fa41 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800cdca:	2108      	movs	r1, #8
 800cdcc:	4818      	ldr	r0, [pc, #96]	; (800ce30 <main+0x100>)
 800cdce:	f7f9 fa3d 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800cdd2:	2104      	movs	r1, #4
 800cdd4:	4817      	ldr	r0, [pc, #92]	; (800ce34 <main+0x104>)
 800cdd6:	f7f9 fa39 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800cdda:	2108      	movs	r1, #8
 800cddc:	4815      	ldr	r0, [pc, #84]	; (800ce34 <main+0x104>)
 800cdde:	f7f9 fa35 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800cde2:	210c      	movs	r1, #12
 800cde4:	4813      	ldr	r0, [pc, #76]	; (800ce34 <main+0x104>)
 800cde6:	f7f9 fa31 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800cdea:	2100      	movs	r1, #0
 800cdec:	4812      	ldr	r0, [pc, #72]	; (800ce38 <main+0x108>)
 800cdee:	f7f9 fa2d 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800cdf2:	2104      	movs	r1, #4
 800cdf4:	4810      	ldr	r0, [pc, #64]	; (800ce38 <main+0x108>)
 800cdf6:	f7f9 fa29 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800cdfa:	2108      	movs	r1, #8
 800cdfc:	480f      	ldr	r0, [pc, #60]	; (800ce3c <main+0x10c>)
 800cdfe:	f7f9 fa25 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800ce02:	2100      	movs	r1, #0
 800ce04:	480e      	ldr	r0, [pc, #56]	; (800ce40 <main+0x110>)
 800ce06:	f7f9 fa21 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	480d      	ldr	r0, [pc, #52]	; (800ce44 <main+0x114>)
 800ce0e:	f7f9 fa1d 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800ce12:	2104      	movs	r1, #4
 800ce14:	480b      	ldr	r0, [pc, #44]	; (800ce44 <main+0x114>)
 800ce16:	f7f9 fa19 	bl	800624c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800ce1a:	f7ff fb71 	bl	800c500 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800ce1e:	f7fd f8a3 	bl	8009f68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ce22:	e7fe      	b.n	800ce22 <main+0xf2>
 800ce24:	58020800 	.word	0x58020800
 800ce28:	24006d3c 	.word	0x24006d3c
 800ce2c:	24006d88 	.word	0x24006d88
 800ce30:	24006cf0 	.word	0x24006cf0
 800ce34:	24006c0c 	.word	0x24006c0c
 800ce38:	24006ca4 	.word	0x24006ca4
 800ce3c:	24006bc0 	.word	0x24006bc0
 800ce40:	24006dd4 	.word	0x24006dd4
 800ce44:	24006c58 	.word	0x24006c58

0800ce48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b09c      	sub	sp, #112	; 0x70
 800ce4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ce4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce52:	224c      	movs	r2, #76	; 0x4c
 800ce54:	2100      	movs	r1, #0
 800ce56:	4618      	mov	r0, r3
 800ce58:	f001 ff2e 	bl	800ecb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ce5c:	1d3b      	adds	r3, r7, #4
 800ce5e:	2220      	movs	r2, #32
 800ce60:	2100      	movs	r1, #0
 800ce62:	4618      	mov	r0, r3
 800ce64:	f001 ff28 	bl	800ecb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ce68:	2002      	movs	r0, #2
 800ce6a:	f7f6 fd27 	bl	80038bc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ce6e:	2300      	movs	r3, #0
 800ce70:	603b      	str	r3, [r7, #0]
 800ce72:	4b30      	ldr	r3, [pc, #192]	; (800cf34 <SystemClock_Config+0xec>)
 800ce74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce76:	4a2f      	ldr	r2, [pc, #188]	; (800cf34 <SystemClock_Config+0xec>)
 800ce78:	f023 0301 	bic.w	r3, r3, #1
 800ce7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce7e:	4b2d      	ldr	r3, [pc, #180]	; (800cf34 <SystemClock_Config+0xec>)
 800ce80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce82:	f003 0301 	and.w	r3, r3, #1
 800ce86:	603b      	str	r3, [r7, #0]
 800ce88:	4b2b      	ldr	r3, [pc, #172]	; (800cf38 <SystemClock_Config+0xf0>)
 800ce8a:	699b      	ldr	r3, [r3, #24]
 800ce8c:	4a2a      	ldr	r2, [pc, #168]	; (800cf38 <SystemClock_Config+0xf0>)
 800ce8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ce92:	6193      	str	r3, [r2, #24]
 800ce94:	4b28      	ldr	r3, [pc, #160]	; (800cf38 <SystemClock_Config+0xf0>)
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ce9c:	603b      	str	r3, [r7, #0]
 800ce9e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800cea0:	bf00      	nop
 800cea2:	4b25      	ldr	r3, [pc, #148]	; (800cf38 <SystemClock_Config+0xf0>)
 800cea4:	699b      	ldr	r3, [r3, #24]
 800cea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ceaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ceae:	d1f8      	bne.n	800cea2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ceb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ceb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ceba:	2302      	movs	r3, #2
 800cebc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cebe:	2302      	movs	r3, #2
 800cec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800cec2:	2305      	movs	r3, #5
 800cec4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800cec6:	23a0      	movs	r3, #160	; 0xa0
 800cec8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800ceca:	2302      	movs	r3, #2
 800cecc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800cece:	2302      	movs	r3, #2
 800ced0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ced2:	2302      	movs	r3, #2
 800ced4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800ced6:	2308      	movs	r3, #8
 800ced8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800ceda:	2300      	movs	r3, #0
 800cedc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7f6 fd22 	bl	8003930 <HAL_RCC_OscConfig>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800cef2:	f000 f835 	bl	800cf60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cef6:	233f      	movs	r3, #63	; 0x3f
 800cef8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cefa:	2303      	movs	r3, #3
 800cefc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800cefe:	2300      	movs	r3, #0
 800cf00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800cf02:	2308      	movs	r3, #8
 800cf04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800cf06:	2340      	movs	r3, #64	; 0x40
 800cf08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800cf0a:	2340      	movs	r3, #64	; 0x40
 800cf0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800cf0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800cf14:	2340      	movs	r3, #64	; 0x40
 800cf16:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800cf18:	1d3b      	adds	r3, r7, #4
 800cf1a:	2102      	movs	r1, #2
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7f7 f933 	bl	8004188 <HAL_RCC_ClockConfig>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d001      	beq.n	800cf2c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800cf28:	f000 f81a 	bl	800cf60 <Error_Handler>
  }
}
 800cf2c:	bf00      	nop
 800cf2e:	3770      	adds	r7, #112	; 0x70
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	58000400 	.word	0x58000400
 800cf38:	58024800 	.word	0x58024800

0800cf3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a04      	ldr	r2, [pc, #16]	; (800cf5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d101      	bne.n	800cf52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800cf4e:	f7f3 fb7f 	bl	8000650 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800cf52:	bf00      	nop
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	40001000 	.word	0x40001000

0800cf60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800cf60:	b480      	push	{r7}
 800cf62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800cf64:	b672      	cpsid	i
}
 800cf66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800cf68:	e7fe      	b.n	800cf68 <Error_Handler+0x8>
	...

0800cf6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cf72:	4b0c      	ldr	r3, [pc, #48]	; (800cfa4 <HAL_MspInit+0x38>)
 800cf74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cf78:	4a0a      	ldr	r2, [pc, #40]	; (800cfa4 <HAL_MspInit+0x38>)
 800cf7a:	f043 0302 	orr.w	r3, r3, #2
 800cf7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cf82:	4b08      	ldr	r3, [pc, #32]	; (800cfa4 <HAL_MspInit+0x38>)
 800cf84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cf88:	f003 0302 	and.w	r3, r3, #2
 800cf8c:	607b      	str	r3, [r7, #4]
 800cf8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800cf90:	2200      	movs	r2, #0
 800cf92:	210f      	movs	r1, #15
 800cf94:	f06f 0001 	mvn.w	r0, #1
 800cf98:	f7f3 fc3e 	bl	8000818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	58024400 	.word	0x58024400

0800cfa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b090      	sub	sp, #64	; 0x40
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b0f      	cmp	r3, #15
 800cfb4:	d827      	bhi.n	800d006 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	6879      	ldr	r1, [r7, #4]
 800cfba:	2036      	movs	r0, #54	; 0x36
 800cfbc:	f7f3 fc2c 	bl	8000818 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800cfc0:	2036      	movs	r0, #54	; 0x36
 800cfc2:	f7f3 fc43 	bl	800084c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800cfc6:	4a29      	ldr	r2, [pc, #164]	; (800d06c <HAL_InitTick+0xc4>)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800cfcc:	4b28      	ldr	r3, [pc, #160]	; (800d070 <HAL_InitTick+0xc8>)
 800cfce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cfd2:	4a27      	ldr	r2, [pc, #156]	; (800d070 <HAL_InitTick+0xc8>)
 800cfd4:	f043 0310 	orr.w	r3, r3, #16
 800cfd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cfdc:	4b24      	ldr	r3, [pc, #144]	; (800d070 <HAL_InitTick+0xc8>)
 800cfde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cfe2:	f003 0310 	and.w	r3, r3, #16
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800cfea:	f107 0210 	add.w	r2, r7, #16
 800cfee:	f107 0314 	add.w	r3, r7, #20
 800cff2:	4611      	mov	r1, r2
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7f7 fc53 	bl	80048a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800cffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800cffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d000:	2b00      	cmp	r3, #0
 800d002:	d106      	bne.n	800d012 <HAL_InitTick+0x6a>
 800d004:	e001      	b.n	800d00a <HAL_InitTick+0x62>
    return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e02b      	b.n	800d062 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800d00a:	f7f7 fc1d 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 800d00e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d010:	e004      	b.n	800d01c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800d012:	f7f7 fc19 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 800d016:	4603      	mov	r3, r0
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01e:	4a15      	ldr	r2, [pc, #84]	; (800d074 <HAL_InitTick+0xcc>)
 800d020:	fba2 2303 	umull	r2, r3, r2, r3
 800d024:	0c9b      	lsrs	r3, r3, #18
 800d026:	3b01      	subs	r3, #1
 800d028:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800d02a:	4b13      	ldr	r3, [pc, #76]	; (800d078 <HAL_InitTick+0xd0>)
 800d02c:	4a13      	ldr	r2, [pc, #76]	; (800d07c <HAL_InitTick+0xd4>)
 800d02e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800d030:	4b11      	ldr	r3, [pc, #68]	; (800d078 <HAL_InitTick+0xd0>)
 800d032:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d036:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800d038:	4a0f      	ldr	r2, [pc, #60]	; (800d078 <HAL_InitTick+0xd0>)
 800d03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800d03e:	4b0e      	ldr	r3, [pc, #56]	; (800d078 <HAL_InitTick+0xd0>)
 800d040:	2200      	movs	r2, #0
 800d042:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d044:	4b0c      	ldr	r3, [pc, #48]	; (800d078 <HAL_InitTick+0xd0>)
 800d046:	2200      	movs	r2, #0
 800d048:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800d04a:	480b      	ldr	r0, [pc, #44]	; (800d078 <HAL_InitTick+0xd0>)
 800d04c:	f7f8 ffcc 	bl	8005fe8 <HAL_TIM_Base_Init>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d104      	bne.n	800d060 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800d056:	4808      	ldr	r0, [pc, #32]	; (800d078 <HAL_InitTick+0xd0>)
 800d058:	f7f9 f81e 	bl	8006098 <HAL_TIM_Base_Start_IT>
 800d05c:	4603      	mov	r3, r0
 800d05e:	e000      	b.n	800d062 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800d060:	2301      	movs	r3, #1
}
 800d062:	4618      	mov	r0, r3
 800d064:	3740      	adds	r7, #64	; 0x40
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	24000000 	.word	0x24000000
 800d070:	58024400 	.word	0x58024400
 800d074:	431bde83 	.word	0x431bde83
 800d078:	24006b74 	.word	0x24006b74
 800d07c:	40001000 	.word	0x40001000

0800d080 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800d080:	b480      	push	{r7}
 800d082:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800d084:	e7fe      	b.n	800d084 <NMI_Handler+0x4>
	...

0800d088 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	af00      	add	r7, sp, #0

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
	{
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800d08c:	2201      	movs	r2, #1
 800d08e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d092:	4802      	ldr	r0, [pc, #8]	; (800d09c <HardFault_Handler+0x14>)
 800d094:	f7f6 fbde 	bl	8003854 <HAL_GPIO_WritePin>
 800d098:	e7f8      	b.n	800d08c <HardFault_Handler+0x4>
 800d09a:	bf00      	nop
 800d09c:	58020800 	.word	0x58020800

0800d0a0 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 800d0a4:	e7fe      	b.n	800d0a4 <MemManage_Handler+0x4>

0800d0a6 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800d0a6:	b480      	push	{r7}
 800d0a8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800d0aa:	e7fe      	b.n	800d0aa <BusFault_Handler+0x4>

0800d0ac <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 800d0b0:	e7fe      	b.n	800d0b0 <UsageFault_Handler+0x4>

0800d0b2 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800d0b2:	b480      	push	{r7}
 800d0b4:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800d0b6:	bf00      	nop
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800d0c4:	4802      	ldr	r0, [pc, #8]	; (800d0d0 <DMA1_Stream0_IRQHandler+0x10>)
 800d0c6:	f7f4 fef7 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800d0ca:	bf00      	nop
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	24007240 	.word	0x24007240

0800d0d4 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800d0d8:	4802      	ldr	r0, [pc, #8]	; (800d0e4 <DMA1_Stream1_IRQHandler+0x10>)
 800d0da:	f7f4 feed 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800d0de:	bf00      	nop
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	240072b8 	.word	0x240072b8

0800d0e8 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800d0ec:	4802      	ldr	r0, [pc, #8]	; (800d0f8 <DMA1_Stream2_IRQHandler+0x10>)
 800d0ee:	f7f4 fee3 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800d0f2:	bf00      	nop
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	24006e20 	.word	0x24006e20

0800d0fc <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800d100:	4802      	ldr	r0, [pc, #8]	; (800d10c <DMA1_Stream3_IRQHandler+0x10>)
 800d102:	f7f4 fed9 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800d106:	bf00      	nop
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	240070a8 	.word	0x240070a8

0800d110 <DMA1_Stream4_IRQHandler>:

/**
 * @brief This function handles DMA1 stream4 global interrupt.
 */
void DMA1_Stream4_IRQHandler(void)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

	/* USER CODE END DMA1_Stream4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800d114:	4802      	ldr	r0, [pc, #8]	; (800d120 <DMA1_Stream4_IRQHandler+0x10>)
 800d116:	f7f4 fecf 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

	/* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800d11a:	bf00      	nop
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	24006e98 	.word	0x24006e98

0800d124 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800d128:	4802      	ldr	r0, [pc, #8]	; (800d134 <DMA1_Stream5_IRQHandler+0x10>)
 800d12a:	f7f4 fec5 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800d12e:	bf00      	nop
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	24006fa0 	.word	0x24006fa0

0800d138 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&AXIS_UART, UART_FLAG_IDLE);
 800d142:	4b40      	ldr	r3, [pc, #256]	; (800d244 <USART2_IRQHandler+0x10c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	69db      	ldr	r3, [r3, #28]
 800d148:	f003 0310 	and.w	r3, r3, #16
 800d14c:	2b10      	cmp	r3, #16
 800d14e:	bf0c      	ite	eq
 800d150:	2301      	moveq	r3, #1
 800d152:	2300      	movne	r3, #0
 800d154:	b2db      	uxtb	r3, r3
 800d156:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d06b      	beq.n	800d236 <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&AXIS_UART);
 800d15e:	4b39      	ldr	r3, [pc, #228]	; (800d244 <USART2_IRQHandler+0x10c>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2210      	movs	r2, #16
 800d164:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800d166:	4b38      	ldr	r3, [pc, #224]	; (800d248 <USART2_IRQHandler+0x110>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a38      	ldr	r2, [pc, #224]	; (800d24c <USART2_IRQHandler+0x114>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d04a      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d170:	4b35      	ldr	r3, [pc, #212]	; (800d248 <USART2_IRQHandler+0x110>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a36      	ldr	r2, [pc, #216]	; (800d250 <USART2_IRQHandler+0x118>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d045      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d17a:	4b33      	ldr	r3, [pc, #204]	; (800d248 <USART2_IRQHandler+0x110>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4a35      	ldr	r2, [pc, #212]	; (800d254 <USART2_IRQHandler+0x11c>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d040      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d184:	4b30      	ldr	r3, [pc, #192]	; (800d248 <USART2_IRQHandler+0x110>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a33      	ldr	r2, [pc, #204]	; (800d258 <USART2_IRQHandler+0x120>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d03b      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d18e:	4b2e      	ldr	r3, [pc, #184]	; (800d248 <USART2_IRQHandler+0x110>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4a32      	ldr	r2, [pc, #200]	; (800d25c <USART2_IRQHandler+0x124>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d036      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d198:	4b2b      	ldr	r3, [pc, #172]	; (800d248 <USART2_IRQHandler+0x110>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a30      	ldr	r2, [pc, #192]	; (800d260 <USART2_IRQHandler+0x128>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d031      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d1a2:	4b29      	ldr	r3, [pc, #164]	; (800d248 <USART2_IRQHandler+0x110>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a2f      	ldr	r2, [pc, #188]	; (800d264 <USART2_IRQHandler+0x12c>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d02c      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d1ac:	4b26      	ldr	r3, [pc, #152]	; (800d248 <USART2_IRQHandler+0x110>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a2d      	ldr	r2, [pc, #180]	; (800d268 <USART2_IRQHandler+0x130>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d027      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d1b6:	4b24      	ldr	r3, [pc, #144]	; (800d248 <USART2_IRQHandler+0x110>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a2c      	ldr	r2, [pc, #176]	; (800d26c <USART2_IRQHandler+0x134>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d022      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d1c0:	4b21      	ldr	r3, [pc, #132]	; (800d248 <USART2_IRQHandler+0x110>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a2a      	ldr	r2, [pc, #168]	; (800d270 <USART2_IRQHandler+0x138>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d01d      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d1ca:	4b1f      	ldr	r3, [pc, #124]	; (800d248 <USART2_IRQHandler+0x110>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a29      	ldr	r2, [pc, #164]	; (800d274 <USART2_IRQHandler+0x13c>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d018      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d1d4:	4b1c      	ldr	r3, [pc, #112]	; (800d248 <USART2_IRQHandler+0x110>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a27      	ldr	r2, [pc, #156]	; (800d278 <USART2_IRQHandler+0x140>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d013      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d1de:	4b1a      	ldr	r3, [pc, #104]	; (800d248 <USART2_IRQHandler+0x110>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a26      	ldr	r2, [pc, #152]	; (800d27c <USART2_IRQHandler+0x144>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d00e      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d1e8:	4b17      	ldr	r3, [pc, #92]	; (800d248 <USART2_IRQHandler+0x110>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a24      	ldr	r2, [pc, #144]	; (800d280 <USART2_IRQHandler+0x148>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d009      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d1f2:	4b15      	ldr	r3, [pc, #84]	; (800d248 <USART2_IRQHandler+0x110>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a23      	ldr	r2, [pc, #140]	; (800d284 <USART2_IRQHandler+0x14c>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d004      	beq.n	800d206 <USART2_IRQHandler+0xce>
 800d1fc:	4b12      	ldr	r3, [pc, #72]	; (800d248 <USART2_IRQHandler+0x110>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a21      	ldr	r2, [pc, #132]	; (800d288 <USART2_IRQHandler+0x150>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d103      	bne.n	800d20e <USART2_IRQHandler+0xd6>
 800d206:	4b10      	ldr	r3, [pc, #64]	; (800d248 <USART2_IRQHandler+0x110>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	e002      	b.n	800d214 <USART2_IRQHandler+0xdc>
 800d20e:	4b0e      	ldr	r3, [pc, #56]	; (800d248 <USART2_IRQHandler+0x110>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&AXIS_UART);
 800d214:	480b      	ldr	r0, [pc, #44]	; (800d244 <USART2_IRQHandler+0x10c>)
 800d216:	f7fa fb11 	bl	800783c <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&AXIS_UART, UART_IT_IDLE);
 800d21a:	4b0a      	ldr	r3, [pc, #40]	; (800d244 <USART2_IRQHandler+0x10c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	4b08      	ldr	r3, [pc, #32]	; (800d244 <USART2_IRQHandler+0x10c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f022 0210 	bic.w	r2, r2, #16
 800d228:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931_DONE_semHandle, pdFALSE);
 800d22a:	4b18      	ldr	r3, [pc, #96]	; (800d28c <USART2_IRQHandler+0x154>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2100      	movs	r1, #0
 800d230:	4618      	mov	r0, r3
 800d232:	f7fd fa47 	bl	800a6c4 <xQueueGiveFromISR>
	}
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800d236:	4803      	ldr	r0, [pc, #12]	; (800d244 <USART2_IRQHandler+0x10c>)
 800d238:	f7fa fb94 	bl	8007964 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800d23c:	bf00      	nop
 800d23e:	3708      	adds	r7, #8
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	240071b0 	.word	0x240071b0
 800d248:	24006e20 	.word	0x24006e20
 800d24c:	40020010 	.word	0x40020010
 800d250:	40020028 	.word	0x40020028
 800d254:	40020040 	.word	0x40020040
 800d258:	40020058 	.word	0x40020058
 800d25c:	40020070 	.word	0x40020070
 800d260:	40020088 	.word	0x40020088
 800d264:	400200a0 	.word	0x400200a0
 800d268:	400200b8 	.word	0x400200b8
 800d26c:	40020410 	.word	0x40020410
 800d270:	40020428 	.word	0x40020428
 800d274:	40020440 	.word	0x40020440
 800d278:	40020458 	.word	0x40020458
 800d27c:	40020470 	.word	0x40020470
 800d280:	40020488 	.word	0x40020488
 800d284:	400204a0 	.word	0x400204a0
 800d288:	400204b8 	.word	0x400204b8
 800d28c:	240040d0 	.word	0x240040d0

0800d290 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&Master_UART, UART_FLAG_IDLE);
 800d29a:	4b40      	ldr	r3, [pc, #256]	; (800d39c <USART3_IRQHandler+0x10c>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	69db      	ldr	r3, [r3, #28]
 800d2a0:	f003 0310 	and.w	r3, r3, #16
 800d2a4:	2b10      	cmp	r3, #16
 800d2a6:	bf0c      	ite	eq
 800d2a8:	2301      	moveq	r3, #1
 800d2aa:	2300      	movne	r3, #0
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d06b      	beq.n	800d38e <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&Master_UART);
 800d2b6:	4b39      	ldr	r3, [pc, #228]	; (800d39c <USART3_IRQHandler+0x10c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2210      	movs	r2, #16
 800d2bc:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&Master_UART);
 800d2be:	4837      	ldr	r0, [pc, #220]	; (800d39c <USART3_IRQHandler+0x10c>)
 800d2c0:	f7fa fabc 	bl	800783c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 800d2c4:	4b36      	ldr	r3, [pc, #216]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a36      	ldr	r2, [pc, #216]	; (800d3a4 <USART3_IRQHandler+0x114>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d04a      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d2ce:	4b34      	ldr	r3, [pc, #208]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a35      	ldr	r2, [pc, #212]	; (800d3a8 <USART3_IRQHandler+0x118>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d045      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d2d8:	4b31      	ldr	r3, [pc, #196]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a33      	ldr	r2, [pc, #204]	; (800d3ac <USART3_IRQHandler+0x11c>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d040      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d2e2:	4b2f      	ldr	r3, [pc, #188]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a32      	ldr	r2, [pc, #200]	; (800d3b0 <USART3_IRQHandler+0x120>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d03b      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d2ec:	4b2c      	ldr	r3, [pc, #176]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a30      	ldr	r2, [pc, #192]	; (800d3b4 <USART3_IRQHandler+0x124>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d036      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d2f6:	4b2a      	ldr	r3, [pc, #168]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a2f      	ldr	r2, [pc, #188]	; (800d3b8 <USART3_IRQHandler+0x128>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d031      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d300:	4b27      	ldr	r3, [pc, #156]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a2d      	ldr	r2, [pc, #180]	; (800d3bc <USART3_IRQHandler+0x12c>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d02c      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d30a:	4b25      	ldr	r3, [pc, #148]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a2c      	ldr	r2, [pc, #176]	; (800d3c0 <USART3_IRQHandler+0x130>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d027      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d314:	4b22      	ldr	r3, [pc, #136]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a2a      	ldr	r2, [pc, #168]	; (800d3c4 <USART3_IRQHandler+0x134>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d022      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d31e:	4b20      	ldr	r3, [pc, #128]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a29      	ldr	r2, [pc, #164]	; (800d3c8 <USART3_IRQHandler+0x138>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d01d      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d328:	4b1d      	ldr	r3, [pc, #116]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a27      	ldr	r2, [pc, #156]	; (800d3cc <USART3_IRQHandler+0x13c>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d018      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d332:	4b1b      	ldr	r3, [pc, #108]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a26      	ldr	r2, [pc, #152]	; (800d3d0 <USART3_IRQHandler+0x140>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d013      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d33c:	4b18      	ldr	r3, [pc, #96]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a24      	ldr	r2, [pc, #144]	; (800d3d4 <USART3_IRQHandler+0x144>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d00e      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d346:	4b16      	ldr	r3, [pc, #88]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a23      	ldr	r2, [pc, #140]	; (800d3d8 <USART3_IRQHandler+0x148>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d009      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d350:	4b13      	ldr	r3, [pc, #76]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a21      	ldr	r2, [pc, #132]	; (800d3dc <USART3_IRQHandler+0x14c>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d004      	beq.n	800d364 <USART3_IRQHandler+0xd4>
 800d35a:	4b11      	ldr	r3, [pc, #68]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4a20      	ldr	r2, [pc, #128]	; (800d3e0 <USART3_IRQHandler+0x150>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d103      	bne.n	800d36c <USART3_IRQHandler+0xdc>
 800d364:	4b0e      	ldr	r3, [pc, #56]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	e002      	b.n	800d372 <USART3_IRQHandler+0xe2>
 800d36c:	4b0c      	ldr	r3, [pc, #48]	; (800d3a0 <USART3_IRQHandler+0x110>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&Master_UART, UART_IT_IDLE);
 800d372:	4b0a      	ldr	r3, [pc, #40]	; (800d39c <USART3_IRQHandler+0x10c>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	4b08      	ldr	r3, [pc, #32]	; (800d39c <USART3_IRQHandler+0x10c>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f022 0210 	bic.w	r2, r2, #16
 800d380:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(CMD_DONE_semHandle, pdFALSE);
 800d382:	4b18      	ldr	r3, [pc, #96]	; (800d3e4 <USART3_IRQHandler+0x154>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2100      	movs	r1, #0
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fd f99b 	bl	800a6c4 <xQueueGiveFromISR>
	}
	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 800d38e:	4803      	ldr	r0, [pc, #12]	; (800d39c <USART3_IRQHandler+0x10c>)
 800d390:	f7fa fae8 	bl	8007964 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 800d394:	bf00      	nop
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	24006f10 	.word	0x24006f10
 800d3a0:	24006e98 	.word	0x24006e98
 800d3a4:	40020010 	.word	0x40020010
 800d3a8:	40020028 	.word	0x40020028
 800d3ac:	40020040 	.word	0x40020040
 800d3b0:	40020058 	.word	0x40020058
 800d3b4:	40020070 	.word	0x40020070
 800d3b8:	40020088 	.word	0x40020088
 800d3bc:	400200a0 	.word	0x400200a0
 800d3c0:	400200b8 	.word	0x400200b8
 800d3c4:	40020410 	.word	0x40020410
 800d3c8:	40020428 	.word	0x40020428
 800d3cc:	40020440 	.word	0x40020440
 800d3d0:	40020458 	.word	0x40020458
 800d3d4:	40020470 	.word	0x40020470
 800d3d8:	40020488 	.word	0x40020488
 800d3dc:	400204a0 	.word	0x400204a0
 800d3e0:	400204b8 	.word	0x400204b8
 800d3e4:	24005234 	.word	0x24005234

0800d3e8 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&TEMPER_UART, UART_FLAG_IDLE);
 800d3f2:	4b40      	ldr	r3, [pc, #256]	; (800d4f4 <UART5_IRQHandler+0x10c>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	69db      	ldr	r3, [r3, #28]
 800d3f8:	f003 0310 	and.w	r3, r3, #16
 800d3fc:	2b10      	cmp	r3, #16
 800d3fe:	bf0c      	ite	eq
 800d400:	2301      	moveq	r3, #1
 800d402:	2300      	movne	r3, #0
 800d404:	b2db      	uxtb	r3, r3
 800d406:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d06b      	beq.n	800d4e6 <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&TEMPER_UART);
 800d40e:	4b39      	ldr	r3, [pc, #228]	; (800d4f4 <UART5_IRQHandler+0x10c>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2210      	movs	r2, #16
 800d414:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&TEMPER_UART);
 800d416:	4837      	ldr	r0, [pc, #220]	; (800d4f4 <UART5_IRQHandler+0x10c>)
 800d418:	f7fa fa10 	bl	800783c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 800d41c:	4b36      	ldr	r3, [pc, #216]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a36      	ldr	r2, [pc, #216]	; (800d4fc <UART5_IRQHandler+0x114>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d04a      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d426:	4b34      	ldr	r3, [pc, #208]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a35      	ldr	r2, [pc, #212]	; (800d500 <UART5_IRQHandler+0x118>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d045      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d430:	4b31      	ldr	r3, [pc, #196]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a33      	ldr	r2, [pc, #204]	; (800d504 <UART5_IRQHandler+0x11c>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d040      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d43a:	4b2f      	ldr	r3, [pc, #188]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a32      	ldr	r2, [pc, #200]	; (800d508 <UART5_IRQHandler+0x120>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d03b      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d444:	4b2c      	ldr	r3, [pc, #176]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a30      	ldr	r2, [pc, #192]	; (800d50c <UART5_IRQHandler+0x124>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d036      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d44e:	4b2a      	ldr	r3, [pc, #168]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a2f      	ldr	r2, [pc, #188]	; (800d510 <UART5_IRQHandler+0x128>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d031      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d458:	4b27      	ldr	r3, [pc, #156]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a2d      	ldr	r2, [pc, #180]	; (800d514 <UART5_IRQHandler+0x12c>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d02c      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d462:	4b25      	ldr	r3, [pc, #148]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a2c      	ldr	r2, [pc, #176]	; (800d518 <UART5_IRQHandler+0x130>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d027      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d46c:	4b22      	ldr	r3, [pc, #136]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a2a      	ldr	r2, [pc, #168]	; (800d51c <UART5_IRQHandler+0x134>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d022      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d476:	4b20      	ldr	r3, [pc, #128]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a29      	ldr	r2, [pc, #164]	; (800d520 <UART5_IRQHandler+0x138>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d01d      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d480:	4b1d      	ldr	r3, [pc, #116]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a27      	ldr	r2, [pc, #156]	; (800d524 <UART5_IRQHandler+0x13c>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d018      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d48a:	4b1b      	ldr	r3, [pc, #108]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a26      	ldr	r2, [pc, #152]	; (800d528 <UART5_IRQHandler+0x140>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d013      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d494:	4b18      	ldr	r3, [pc, #96]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a24      	ldr	r2, [pc, #144]	; (800d52c <UART5_IRQHandler+0x144>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d00e      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d49e:	4b16      	ldr	r3, [pc, #88]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a23      	ldr	r2, [pc, #140]	; (800d530 <UART5_IRQHandler+0x148>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d009      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d4a8:	4b13      	ldr	r3, [pc, #76]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a21      	ldr	r2, [pc, #132]	; (800d534 <UART5_IRQHandler+0x14c>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d004      	beq.n	800d4bc <UART5_IRQHandler+0xd4>
 800d4b2:	4b11      	ldr	r3, [pc, #68]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a20      	ldr	r2, [pc, #128]	; (800d538 <UART5_IRQHandler+0x150>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d103      	bne.n	800d4c4 <UART5_IRQHandler+0xdc>
 800d4bc:	4b0e      	ldr	r3, [pc, #56]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	e002      	b.n	800d4ca <UART5_IRQHandler+0xe2>
 800d4c4:	4b0c      	ldr	r3, [pc, #48]	; (800d4f8 <UART5_IRQHandler+0x110>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 800d4ca:	4b0a      	ldr	r3, [pc, #40]	; (800d4f4 <UART5_IRQHandler+0x10c>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	4b08      	ldr	r3, [pc, #32]	; (800d4f4 <UART5_IRQHandler+0x10c>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f022 0210 	bic.w	r2, r2, #16
 800d4d8:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39_Done_semHandle, pdFALSE);
 800d4da:	4b18      	ldr	r3, [pc, #96]	; (800d53c <UART5_IRQHandler+0x154>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2100      	movs	r1, #0
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fd f8ef 	bl	800a6c4 <xQueueGiveFromISR>
	}
	/* USER CODE END UART5_IRQn 0 */
	HAL_UART_IRQHandler(&huart5);
 800d4e6:	4803      	ldr	r0, [pc, #12]	; (800d4f4 <UART5_IRQHandler+0x10c>)
 800d4e8:	f7fa fa3c 	bl	8007964 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART5_IRQn 1 */

	/* USER CODE END UART5_IRQn 1 */
}
 800d4ec:	bf00      	nop
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	24007018 	.word	0x24007018
 800d4f8:	24007240 	.word	0x24007240
 800d4fc:	40020010 	.word	0x40020010
 800d500:	40020028 	.word	0x40020028
 800d504:	40020040 	.word	0x40020040
 800d508:	40020058 	.word	0x40020058
 800d50c:	40020070 	.word	0x40020070
 800d510:	40020088 	.word	0x40020088
 800d514:	400200a0 	.word	0x400200a0
 800d518:	400200b8 	.word	0x400200b8
 800d51c:	40020410 	.word	0x40020410
 800d520:	40020428 	.word	0x40020428
 800d524:	40020440 	.word	0x40020440
 800d528:	40020458 	.word	0x40020458
 800d52c:	40020470 	.word	0x40020470
 800d530:	40020488 	.word	0x40020488
 800d534:	400204a0 	.word	0x400204a0
 800d538:	400204b8 	.word	0x400204b8
 800d53c:	240052c8 	.word	0x240052c8

0800d540 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 800d544:	4802      	ldr	r0, [pc, #8]	; (800d550 <TIM6_DAC_IRQHandler+0x10>)
 800d546:	f7f8 ff8f 	bl	8006468 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d54a:	bf00      	nop
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	24006b74 	.word	0x24006b74

0800d554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d554:	b480      	push	{r7}
 800d556:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d558:	4b37      	ldr	r3, [pc, #220]	; (800d638 <SystemInit+0xe4>)
 800d55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d55e:	4a36      	ldr	r2, [pc, #216]	; (800d638 <SystemInit+0xe4>)
 800d560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d568:	4b34      	ldr	r3, [pc, #208]	; (800d63c <SystemInit+0xe8>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f003 030f 	and.w	r3, r3, #15
 800d570:	2b06      	cmp	r3, #6
 800d572:	d807      	bhi.n	800d584 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d574:	4b31      	ldr	r3, [pc, #196]	; (800d63c <SystemInit+0xe8>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f023 030f 	bic.w	r3, r3, #15
 800d57c:	4a2f      	ldr	r2, [pc, #188]	; (800d63c <SystemInit+0xe8>)
 800d57e:	f043 0307 	orr.w	r3, r3, #7
 800d582:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800d584:	4b2e      	ldr	r3, [pc, #184]	; (800d640 <SystemInit+0xec>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a2d      	ldr	r2, [pc, #180]	; (800d640 <SystemInit+0xec>)
 800d58a:	f043 0301 	orr.w	r3, r3, #1
 800d58e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d590:	4b2b      	ldr	r3, [pc, #172]	; (800d640 <SystemInit+0xec>)
 800d592:	2200      	movs	r2, #0
 800d594:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800d596:	4b2a      	ldr	r3, [pc, #168]	; (800d640 <SystemInit+0xec>)
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	4929      	ldr	r1, [pc, #164]	; (800d640 <SystemInit+0xec>)
 800d59c:	4b29      	ldr	r3, [pc, #164]	; (800d644 <SystemInit+0xf0>)
 800d59e:	4013      	ands	r3, r2
 800d5a0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d5a2:	4b26      	ldr	r3, [pc, #152]	; (800d63c <SystemInit+0xe8>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f003 0308 	and.w	r3, r3, #8
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d007      	beq.n	800d5be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d5ae:	4b23      	ldr	r3, [pc, #140]	; (800d63c <SystemInit+0xe8>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f023 030f 	bic.w	r3, r3, #15
 800d5b6:	4a21      	ldr	r2, [pc, #132]	; (800d63c <SystemInit+0xe8>)
 800d5b8:	f043 0307 	orr.w	r3, r3, #7
 800d5bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800d5be:	4b20      	ldr	r3, [pc, #128]	; (800d640 <SystemInit+0xec>)
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800d5c4:	4b1e      	ldr	r3, [pc, #120]	; (800d640 <SystemInit+0xec>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800d5ca:	4b1d      	ldr	r3, [pc, #116]	; (800d640 <SystemInit+0xec>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800d5d0:	4b1b      	ldr	r3, [pc, #108]	; (800d640 <SystemInit+0xec>)
 800d5d2:	4a1d      	ldr	r2, [pc, #116]	; (800d648 <SystemInit+0xf4>)
 800d5d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800d5d6:	4b1a      	ldr	r3, [pc, #104]	; (800d640 <SystemInit+0xec>)
 800d5d8:	4a1c      	ldr	r2, [pc, #112]	; (800d64c <SystemInit+0xf8>)
 800d5da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800d5dc:	4b18      	ldr	r3, [pc, #96]	; (800d640 <SystemInit+0xec>)
 800d5de:	4a1c      	ldr	r2, [pc, #112]	; (800d650 <SystemInit+0xfc>)
 800d5e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800d5e2:	4b17      	ldr	r3, [pc, #92]	; (800d640 <SystemInit+0xec>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800d5e8:	4b15      	ldr	r3, [pc, #84]	; (800d640 <SystemInit+0xec>)
 800d5ea:	4a19      	ldr	r2, [pc, #100]	; (800d650 <SystemInit+0xfc>)
 800d5ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800d5ee:	4b14      	ldr	r3, [pc, #80]	; (800d640 <SystemInit+0xec>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800d5f4:	4b12      	ldr	r3, [pc, #72]	; (800d640 <SystemInit+0xec>)
 800d5f6:	4a16      	ldr	r2, [pc, #88]	; (800d650 <SystemInit+0xfc>)
 800d5f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800d5fa:	4b11      	ldr	r3, [pc, #68]	; (800d640 <SystemInit+0xec>)
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d600:	4b0f      	ldr	r3, [pc, #60]	; (800d640 <SystemInit+0xec>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a0e      	ldr	r2, [pc, #56]	; (800d640 <SystemInit+0xec>)
 800d606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d60a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800d60c:	4b0c      	ldr	r3, [pc, #48]	; (800d640 <SystemInit+0xec>)
 800d60e:	2200      	movs	r2, #0
 800d610:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800d612:	4b10      	ldr	r3, [pc, #64]	; (800d654 <SystemInit+0x100>)
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	4b10      	ldr	r3, [pc, #64]	; (800d658 <SystemInit+0x104>)
 800d618:	4013      	ands	r3, r2
 800d61a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d61e:	d202      	bcs.n	800d626 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800d620:	4b0e      	ldr	r3, [pc, #56]	; (800d65c <SystemInit+0x108>)
 800d622:	2201      	movs	r2, #1
 800d624:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800d626:	4b0e      	ldr	r3, [pc, #56]	; (800d660 <SystemInit+0x10c>)
 800d628:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800d62c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800d62e:	bf00      	nop
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	e000ed00 	.word	0xe000ed00
 800d63c:	52002000 	.word	0x52002000
 800d640:	58024400 	.word	0x58024400
 800d644:	eaf6ed7f 	.word	0xeaf6ed7f
 800d648:	02020200 	.word	0x02020200
 800d64c:	01ff0000 	.word	0x01ff0000
 800d650:	01010280 	.word	0x01010280
 800d654:	5c001000 	.word	0x5c001000
 800d658:	ffff0000 	.word	0xffff0000
 800d65c:	51008108 	.word	0x51008108
 800d660:	52004000 	.word	0x52004000

0800d664 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b09a      	sub	sp, #104	; 0x68
 800d668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d66a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d66e:	2200      	movs	r2, #0
 800d670:	601a      	str	r2, [r3, #0]
 800d672:	605a      	str	r2, [r3, #4]
 800d674:	609a      	str	r2, [r3, #8]
 800d676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d678:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d67c:	2200      	movs	r2, #0
 800d67e:	601a      	str	r2, [r3, #0]
 800d680:	605a      	str	r2, [r3, #4]
 800d682:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d688:	2200      	movs	r2, #0
 800d68a:	601a      	str	r2, [r3, #0]
 800d68c:	605a      	str	r2, [r3, #4]
 800d68e:	609a      	str	r2, [r3, #8]
 800d690:	60da      	str	r2, [r3, #12]
 800d692:	611a      	str	r2, [r3, #16]
 800d694:	615a      	str	r2, [r3, #20]
 800d696:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d698:	1d3b      	adds	r3, r7, #4
 800d69a:	222c      	movs	r2, #44	; 0x2c
 800d69c:	2100      	movs	r1, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f001 fb0a 	bl	800ecb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800d6a4:	4b50      	ldr	r3, [pc, #320]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d6a6:	4a51      	ldr	r2, [pc, #324]	; (800d7ec <MX_TIM1_Init+0x188>)
 800d6a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800d6aa:	4b4f      	ldr	r3, [pc, #316]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d6ac:	22c7      	movs	r2, #199	; 0xc7
 800d6ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d6b0:	4b4d      	ldr	r3, [pc, #308]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800d6b6:	4b4c      	ldr	r3, [pc, #304]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d6b8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800d6bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d6be:	4b4a      	ldr	r3, [pc, #296]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d6c4:	4b48      	ldr	r3, [pc, #288]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d6ca:	4b47      	ldr	r3, [pc, #284]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d6d0:	4845      	ldr	r0, [pc, #276]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d6d2:	f7f8 fc89 	bl	8005fe8 <HAL_TIM_Base_Init>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d001      	beq.n	800d6e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800d6dc:	f7ff fc40 	bl	800cf60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d6e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d6e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	483e      	ldr	r0, [pc, #248]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d6ee:	f7f9 f8ef 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d001      	beq.n	800d6fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800d6f8:	f7ff fc32 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800d6fc:	483a      	ldr	r0, [pc, #232]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d6fe:	f7f8 fd43 	bl	8006188 <HAL_TIM_PWM_Init>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d001      	beq.n	800d70c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800d708:	f7ff fc2a 	bl	800cf60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d70c:	2300      	movs	r3, #0
 800d70e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800d710:	2300      	movs	r3, #0
 800d712:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d714:	2300      	movs	r3, #0
 800d716:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d718:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d71c:	4619      	mov	r1, r3
 800d71e:	4832      	ldr	r0, [pc, #200]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d720:	f7f9 fe2a 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d001      	beq.n	800d72e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800d72a:	f7ff fc19 	bl	800cf60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d72e:	2360      	movs	r3, #96	; 0x60
 800d730:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800d732:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800d736:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d738:	2300      	movs	r3, #0
 800d73a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d73c:	2300      	movs	r3, #0
 800d73e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d740:	2300      	movs	r3, #0
 800d742:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d744:	2300      	movs	r3, #0
 800d746:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d748:	2300      	movs	r3, #0
 800d74a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d74c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d750:	2200      	movs	r2, #0
 800d752:	4619      	mov	r1, r3
 800d754:	4824      	ldr	r0, [pc, #144]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d756:	f7f8 ffa7 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d001      	beq.n	800d764 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800d760:	f7ff fbfe 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d768:	2204      	movs	r2, #4
 800d76a:	4619      	mov	r1, r3
 800d76c:	481e      	ldr	r0, [pc, #120]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d76e:	f7f8 ff9b 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800d778:	f7ff fbf2 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d77c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d780:	2208      	movs	r2, #8
 800d782:	4619      	mov	r1, r3
 800d784:	4818      	ldr	r0, [pc, #96]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d786:	f7f8 ff8f 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d001      	beq.n	800d794 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800d790:	f7ff fbe6 	bl	800cf60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d794:	2300      	movs	r3, #0
 800d796:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d798:	2300      	movs	r3, #0
 800d79a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d79c:	2300      	movs	r3, #0
 800d79e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d7a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d7ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800d7b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d7ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800d7c4:	1d3b      	adds	r3, r7, #4
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	4807      	ldr	r0, [pc, #28]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d7ca:	f7f9 fe63 	bl	8007494 <HAL_TIMEx_ConfigBreakDeadTime>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 800d7d4:	f7ff fbc4 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800d7d8:	4803      	ldr	r0, [pc, #12]	; (800d7e8 <MX_TIM1_Init+0x184>)
 800d7da:	f000 fcbb 	bl	800e154 <HAL_TIM_MspPostInit>

}
 800d7de:	bf00      	nop
 800d7e0:	3768      	adds	r7, #104	; 0x68
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	24006d3c 	.word	0x24006d3c
 800d7ec:	40010000 	.word	0x40010000

0800d7f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b08e      	sub	sp, #56	; 0x38
 800d7f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d7f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	601a      	str	r2, [r3, #0]
 800d7fe:	605a      	str	r2, [r3, #4]
 800d800:	609a      	str	r2, [r3, #8]
 800d802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d804:	f107 031c 	add.w	r3, r7, #28
 800d808:	2200      	movs	r2, #0
 800d80a:	601a      	str	r2, [r3, #0]
 800d80c:	605a      	str	r2, [r3, #4]
 800d80e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d810:	463b      	mov	r3, r7
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]
 800d816:	605a      	str	r2, [r3, #4]
 800d818:	609a      	str	r2, [r3, #8]
 800d81a:	60da      	str	r2, [r3, #12]
 800d81c:	611a      	str	r2, [r3, #16]
 800d81e:	615a      	str	r2, [r3, #20]
 800d820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d822:	4b39      	ldr	r3, [pc, #228]	; (800d908 <MX_TIM2_Init+0x118>)
 800d824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800d82a:	4b37      	ldr	r3, [pc, #220]	; (800d908 <MX_TIM2_Init+0x118>)
 800d82c:	22c7      	movs	r2, #199	; 0xc7
 800d82e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d830:	4b35      	ldr	r3, [pc, #212]	; (800d908 <MX_TIM2_Init+0x118>)
 800d832:	2200      	movs	r2, #0
 800d834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800d836:	4b34      	ldr	r3, [pc, #208]	; (800d908 <MX_TIM2_Init+0x118>)
 800d838:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800d83c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d83e:	4b32      	ldr	r3, [pc, #200]	; (800d908 <MX_TIM2_Init+0x118>)
 800d840:	2200      	movs	r2, #0
 800d842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d844:	4b30      	ldr	r3, [pc, #192]	; (800d908 <MX_TIM2_Init+0x118>)
 800d846:	2200      	movs	r2, #0
 800d848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d84a:	482f      	ldr	r0, [pc, #188]	; (800d908 <MX_TIM2_Init+0x118>)
 800d84c:	f7f8 fbcc 	bl	8005fe8 <HAL_TIM_Base_Init>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800d856:	f7ff fb83 	bl	800cf60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d85a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d85e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d864:	4619      	mov	r1, r3
 800d866:	4828      	ldr	r0, [pc, #160]	; (800d908 <MX_TIM2_Init+0x118>)
 800d868:	f7f9 f832 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d001      	beq.n	800d876 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800d872:	f7ff fb75 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d876:	4824      	ldr	r0, [pc, #144]	; (800d908 <MX_TIM2_Init+0x118>)
 800d878:	f7f8 fc86 	bl	8006188 <HAL_TIM_PWM_Init>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800d882:	f7ff fb6d 	bl	800cf60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d886:	2300      	movs	r3, #0
 800d888:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d88e:	f107 031c 	add.w	r3, r7, #28
 800d892:	4619      	mov	r1, r3
 800d894:	481c      	ldr	r0, [pc, #112]	; (800d908 <MX_TIM2_Init+0x118>)
 800d896:	f7f9 fd6f 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d001      	beq.n	800d8a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800d8a0:	f7ff fb5e 	bl	800cf60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d8a4:	2360      	movs	r3, #96	; 0x60
 800d8a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800d8a8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800d8ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d8b6:	463b      	mov	r3, r7
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	4812      	ldr	r0, [pc, #72]	; (800d908 <MX_TIM2_Init+0x118>)
 800d8be:	f7f8 fef3 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d001      	beq.n	800d8cc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800d8c8:	f7ff fb4a 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d8cc:	463b      	mov	r3, r7
 800d8ce:	2204      	movs	r2, #4
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	480d      	ldr	r0, [pc, #52]	; (800d908 <MX_TIM2_Init+0x118>)
 800d8d4:	f7f8 fee8 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d001      	beq.n	800d8e2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800d8de:	f7ff fb3f 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d8e2:	463b      	mov	r3, r7
 800d8e4:	2208      	movs	r2, #8
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	4807      	ldr	r0, [pc, #28]	; (800d908 <MX_TIM2_Init+0x118>)
 800d8ea:	f7f8 fedd 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 800d8f4:	f7ff fb34 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d8f8:	4803      	ldr	r0, [pc, #12]	; (800d908 <MX_TIM2_Init+0x118>)
 800d8fa:	f000 fc2b 	bl	800e154 <HAL_TIM_MspPostInit>

}
 800d8fe:	bf00      	nop
 800d900:	3738      	adds	r7, #56	; 0x38
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	24006d88 	.word	0x24006d88

0800d90c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b08e      	sub	sp, #56	; 0x38
 800d910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d916:	2200      	movs	r2, #0
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	605a      	str	r2, [r3, #4]
 800d91c:	609a      	str	r2, [r3, #8]
 800d91e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d920:	f107 031c 	add.w	r3, r7, #28
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]
 800d928:	605a      	str	r2, [r3, #4]
 800d92a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d92c:	463b      	mov	r3, r7
 800d92e:	2200      	movs	r2, #0
 800d930:	601a      	str	r2, [r3, #0]
 800d932:	605a      	str	r2, [r3, #4]
 800d934:	609a      	str	r2, [r3, #8]
 800d936:	60da      	str	r2, [r3, #12]
 800d938:	611a      	str	r2, [r3, #16]
 800d93a:	615a      	str	r2, [r3, #20]
 800d93c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d93e:	4b38      	ldr	r3, [pc, #224]	; (800da20 <MX_TIM3_Init+0x114>)
 800d940:	4a38      	ldr	r2, [pc, #224]	; (800da24 <MX_TIM3_Init+0x118>)
 800d942:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 800d944:	4b36      	ldr	r3, [pc, #216]	; (800da20 <MX_TIM3_Init+0x114>)
 800d946:	22c7      	movs	r2, #199	; 0xc7
 800d948:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d94a:	4b35      	ldr	r3, [pc, #212]	; (800da20 <MX_TIM3_Init+0x114>)
 800d94c:	2200      	movs	r2, #0
 800d94e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800d950:	4b33      	ldr	r3, [pc, #204]	; (800da20 <MX_TIM3_Init+0x114>)
 800d952:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800d956:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d958:	4b31      	ldr	r3, [pc, #196]	; (800da20 <MX_TIM3_Init+0x114>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d95e:	4b30      	ldr	r3, [pc, #192]	; (800da20 <MX_TIM3_Init+0x114>)
 800d960:	2200      	movs	r2, #0
 800d962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d964:	482e      	ldr	r0, [pc, #184]	; (800da20 <MX_TIM3_Init+0x114>)
 800d966:	f7f8 fb3f 	bl	8005fe8 <HAL_TIM_Base_Init>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800d970:	f7ff faf6 	bl	800cf60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d978:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d97a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d97e:	4619      	mov	r1, r3
 800d980:	4827      	ldr	r0, [pc, #156]	; (800da20 <MX_TIM3_Init+0x114>)
 800d982:	f7f8 ffa5 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800d98c:	f7ff fae8 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d990:	4823      	ldr	r0, [pc, #140]	; (800da20 <MX_TIM3_Init+0x114>)
 800d992:	f7f8 fbf9 	bl	8006188 <HAL_TIM_PWM_Init>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d001      	beq.n	800d9a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800d99c:	f7ff fae0 	bl	800cf60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d9a8:	f107 031c 	add.w	r3, r7, #28
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	481c      	ldr	r0, [pc, #112]	; (800da20 <MX_TIM3_Init+0x114>)
 800d9b0:	f7f9 fce2 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800d9ba:	f7ff fad1 	bl	800cf60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d9be:	2360      	movs	r3, #96	; 0x60
 800d9c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800d9c2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800d9c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d9d0:	463b      	mov	r3, r7
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4812      	ldr	r0, [pc, #72]	; (800da20 <MX_TIM3_Init+0x114>)
 800d9d8:	f7f8 fe66 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d001      	beq.n	800d9e6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800d9e2:	f7ff fabd 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d9e6:	463b      	mov	r3, r7
 800d9e8:	2204      	movs	r2, #4
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	480c      	ldr	r0, [pc, #48]	; (800da20 <MX_TIM3_Init+0x114>)
 800d9ee:	f7f8 fe5b 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d001      	beq.n	800d9fc <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800d9f8:	f7ff fab2 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d9fc:	463b      	mov	r3, r7
 800d9fe:	2208      	movs	r2, #8
 800da00:	4619      	mov	r1, r3
 800da02:	4807      	ldr	r0, [pc, #28]	; (800da20 <MX_TIM3_Init+0x114>)
 800da04:	f7f8 fe50 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d001      	beq.n	800da12 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800da0e:	f7ff faa7 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800da12:	4803      	ldr	r0, [pc, #12]	; (800da20 <MX_TIM3_Init+0x114>)
 800da14:	f000 fb9e 	bl	800e154 <HAL_TIM_MspPostInit>

}
 800da18:	bf00      	nop
 800da1a:	3738      	adds	r7, #56	; 0x38
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	24006cf0 	.word	0x24006cf0
 800da24:	40000400 	.word	0x40000400

0800da28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b08e      	sub	sp, #56	; 0x38
 800da2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800da2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da32:	2200      	movs	r2, #0
 800da34:	601a      	str	r2, [r3, #0]
 800da36:	605a      	str	r2, [r3, #4]
 800da38:	609a      	str	r2, [r3, #8]
 800da3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800da3c:	f107 031c 	add.w	r3, r7, #28
 800da40:	2200      	movs	r2, #0
 800da42:	601a      	str	r2, [r3, #0]
 800da44:	605a      	str	r2, [r3, #4]
 800da46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800da48:	463b      	mov	r3, r7
 800da4a:	2200      	movs	r2, #0
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	605a      	str	r2, [r3, #4]
 800da50:	609a      	str	r2, [r3, #8]
 800da52:	60da      	str	r2, [r3, #12]
 800da54:	611a      	str	r2, [r3, #16]
 800da56:	615a      	str	r2, [r3, #20]
 800da58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800da5a:	4b38      	ldr	r3, [pc, #224]	; (800db3c <MX_TIM4_Init+0x114>)
 800da5c:	4a38      	ldr	r2, [pc, #224]	; (800db40 <MX_TIM4_Init+0x118>)
 800da5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 800da60:	4b36      	ldr	r3, [pc, #216]	; (800db3c <MX_TIM4_Init+0x114>)
 800da62:	22c7      	movs	r2, #199	; 0xc7
 800da64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800da66:	4b35      	ldr	r3, [pc, #212]	; (800db3c <MX_TIM4_Init+0x114>)
 800da68:	2200      	movs	r2, #0
 800da6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800da6c:	4b33      	ldr	r3, [pc, #204]	; (800db3c <MX_TIM4_Init+0x114>)
 800da6e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800da72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800da74:	4b31      	ldr	r3, [pc, #196]	; (800db3c <MX_TIM4_Init+0x114>)
 800da76:	2200      	movs	r2, #0
 800da78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800da7a:	4b30      	ldr	r3, [pc, #192]	; (800db3c <MX_TIM4_Init+0x114>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800da80:	482e      	ldr	r0, [pc, #184]	; (800db3c <MX_TIM4_Init+0x114>)
 800da82:	f7f8 fab1 	bl	8005fe8 <HAL_TIM_Base_Init>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d001      	beq.n	800da90 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800da8c:	f7ff fa68 	bl	800cf60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800da90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800da96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da9a:	4619      	mov	r1, r3
 800da9c:	4827      	ldr	r0, [pc, #156]	; (800db3c <MX_TIM4_Init+0x114>)
 800da9e:	f7f8 ff17 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800daa8:	f7ff fa5a 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800daac:	4823      	ldr	r0, [pc, #140]	; (800db3c <MX_TIM4_Init+0x114>)
 800daae:	f7f8 fb6b 	bl	8006188 <HAL_TIM_PWM_Init>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800dab8:	f7ff fa52 	bl	800cf60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dabc:	2300      	movs	r3, #0
 800dabe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dac0:	2300      	movs	r3, #0
 800dac2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800dac4:	f107 031c 	add.w	r3, r7, #28
 800dac8:	4619      	mov	r1, r3
 800daca:	481c      	ldr	r0, [pc, #112]	; (800db3c <MX_TIM4_Init+0x114>)
 800dacc:	f7f9 fc54 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d001      	beq.n	800dada <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800dad6:	f7ff fa43 	bl	800cf60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dada:	2360      	movs	r3, #96	; 0x60
 800dadc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800dade:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800dae2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dae4:	2300      	movs	r3, #0
 800dae6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dae8:	2300      	movs	r3, #0
 800daea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800daec:	463b      	mov	r3, r7
 800daee:	2204      	movs	r2, #4
 800daf0:	4619      	mov	r1, r3
 800daf2:	4812      	ldr	r0, [pc, #72]	; (800db3c <MX_TIM4_Init+0x114>)
 800daf4:	f7f8 fdd8 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800dafe:	f7ff fa2f 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800db02:	463b      	mov	r3, r7
 800db04:	2208      	movs	r2, #8
 800db06:	4619      	mov	r1, r3
 800db08:	480c      	ldr	r0, [pc, #48]	; (800db3c <MX_TIM4_Init+0x114>)
 800db0a:	f7f8 fdcd 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 800db14:	f7ff fa24 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800db18:	463b      	mov	r3, r7
 800db1a:	220c      	movs	r2, #12
 800db1c:	4619      	mov	r1, r3
 800db1e:	4807      	ldr	r0, [pc, #28]	; (800db3c <MX_TIM4_Init+0x114>)
 800db20:	f7f8 fdc2 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 800db2a:	f7ff fa19 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800db2e:	4803      	ldr	r0, [pc, #12]	; (800db3c <MX_TIM4_Init+0x114>)
 800db30:	f000 fb10 	bl	800e154 <HAL_TIM_MspPostInit>

}
 800db34:	bf00      	nop
 800db36:	3738      	adds	r7, #56	; 0x38
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	24006c0c 	.word	0x24006c0c
 800db40:	40000800 	.word	0x40000800

0800db44 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b08e      	sub	sp, #56	; 0x38
 800db48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800db4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db4e:	2200      	movs	r2, #0
 800db50:	601a      	str	r2, [r3, #0]
 800db52:	605a      	str	r2, [r3, #4]
 800db54:	609a      	str	r2, [r3, #8]
 800db56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800db58:	f107 031c 	add.w	r3, r7, #28
 800db5c:	2200      	movs	r2, #0
 800db5e:	601a      	str	r2, [r3, #0]
 800db60:	605a      	str	r2, [r3, #4]
 800db62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800db64:	463b      	mov	r3, r7
 800db66:	2200      	movs	r2, #0
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	605a      	str	r2, [r3, #4]
 800db6c:	609a      	str	r2, [r3, #8]
 800db6e:	60da      	str	r2, [r3, #12]
 800db70:	611a      	str	r2, [r3, #16]
 800db72:	615a      	str	r2, [r3, #20]
 800db74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800db76:	4b33      	ldr	r3, [pc, #204]	; (800dc44 <MX_TIM5_Init+0x100>)
 800db78:	4a33      	ldr	r2, [pc, #204]	; (800dc48 <MX_TIM5_Init+0x104>)
 800db7a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800db7c:	4b31      	ldr	r3, [pc, #196]	; (800dc44 <MX_TIM5_Init+0x100>)
 800db7e:	22c7      	movs	r2, #199	; 0xc7
 800db80:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db82:	4b30      	ldr	r3, [pc, #192]	; (800dc44 <MX_TIM5_Init+0x100>)
 800db84:	2200      	movs	r2, #0
 800db86:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 800db88:	4b2e      	ldr	r3, [pc, #184]	; (800dc44 <MX_TIM5_Init+0x100>)
 800db8a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800db8e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db90:	4b2c      	ldr	r3, [pc, #176]	; (800dc44 <MX_TIM5_Init+0x100>)
 800db92:	2200      	movs	r2, #0
 800db94:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800db96:	4b2b      	ldr	r3, [pc, #172]	; (800dc44 <MX_TIM5_Init+0x100>)
 800db98:	2200      	movs	r2, #0
 800db9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800db9c:	4829      	ldr	r0, [pc, #164]	; (800dc44 <MX_TIM5_Init+0x100>)
 800db9e:	f7f8 fa23 	bl	8005fe8 <HAL_TIM_Base_Init>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800dba8:	f7ff f9da 	bl	800cf60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dbac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800dbb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	4822      	ldr	r0, [pc, #136]	; (800dc44 <MX_TIM5_Init+0x100>)
 800dbba:	f7f8 fe89 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800dbc4:	f7ff f9cc 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800dbc8:	481e      	ldr	r0, [pc, #120]	; (800dc44 <MX_TIM5_Init+0x100>)
 800dbca:	f7f8 fadd 	bl	8006188 <HAL_TIM_PWM_Init>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800dbd4:	f7ff f9c4 	bl	800cf60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dbe0:	f107 031c 	add.w	r3, r7, #28
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	4817      	ldr	r0, [pc, #92]	; (800dc44 <MX_TIM5_Init+0x100>)
 800dbe8:	f7f9 fbc6 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800dbf2:	f7ff f9b5 	bl	800cf60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dbf6:	2360      	movs	r3, #96	; 0x60
 800dbf8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800dbfa:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800dbfe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dc00:	2300      	movs	r3, #0
 800dc02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dc04:	2300      	movs	r3, #0
 800dc06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dc08:	463b      	mov	r3, r7
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	480d      	ldr	r0, [pc, #52]	; (800dc44 <MX_TIM5_Init+0x100>)
 800dc10:	f7f8 fd4a 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d001      	beq.n	800dc1e <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 800dc1a:	f7ff f9a1 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dc1e:	463b      	mov	r3, r7
 800dc20:	2204      	movs	r2, #4
 800dc22:	4619      	mov	r1, r3
 800dc24:	4807      	ldr	r0, [pc, #28]	; (800dc44 <MX_TIM5_Init+0x100>)
 800dc26:	f7f8 fd3f 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d001      	beq.n	800dc34 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 800dc30:	f7ff f996 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800dc34:	4803      	ldr	r0, [pc, #12]	; (800dc44 <MX_TIM5_Init+0x100>)
 800dc36:	f000 fa8d 	bl	800e154 <HAL_TIM_MspPostInit>

}
 800dc3a:	bf00      	nop
 800dc3c:	3738      	adds	r7, #56	; 0x38
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	24006ca4 	.word	0x24006ca4
 800dc48:	40000c00 	.word	0x40000c00

0800dc4c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b09a      	sub	sp, #104	; 0x68
 800dc50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dc52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dc56:	2200      	movs	r2, #0
 800dc58:	601a      	str	r2, [r3, #0]
 800dc5a:	605a      	str	r2, [r3, #4]
 800dc5c:	609a      	str	r2, [r3, #8]
 800dc5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc64:	2200      	movs	r2, #0
 800dc66:	601a      	str	r2, [r3, #0]
 800dc68:	605a      	str	r2, [r3, #4]
 800dc6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc70:	2200      	movs	r2, #0
 800dc72:	601a      	str	r2, [r3, #0]
 800dc74:	605a      	str	r2, [r3, #4]
 800dc76:	609a      	str	r2, [r3, #8]
 800dc78:	60da      	str	r2, [r3, #12]
 800dc7a:	611a      	str	r2, [r3, #16]
 800dc7c:	615a      	str	r2, [r3, #20]
 800dc7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800dc80:	1d3b      	adds	r3, r7, #4
 800dc82:	222c      	movs	r2, #44	; 0x2c
 800dc84:	2100      	movs	r1, #0
 800dc86:	4618      	mov	r0, r3
 800dc88:	f001 f816 	bl	800ecb8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800dc8c:	4b44      	ldr	r3, [pc, #272]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dc8e:	4a45      	ldr	r2, [pc, #276]	; (800dda4 <MX_TIM8_Init+0x158>)
 800dc90:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 200-1;
 800dc92:	4b43      	ldr	r3, [pc, #268]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dc94:	22c7      	movs	r2, #199	; 0xc7
 800dc96:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc98:	4b41      	ldr	r3, [pc, #260]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 800dc9e:	4b40      	ldr	r3, [pc, #256]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dca0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800dca4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dca6:	4b3e      	ldr	r3, [pc, #248]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800dcac:	4b3c      	ldr	r3, [pc, #240]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dcae:	2200      	movs	r2, #0
 800dcb0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dcb2:	4b3b      	ldr	r3, [pc, #236]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800dcb8:	4839      	ldr	r0, [pc, #228]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dcba:	f7f8 f995 	bl	8005fe8 <HAL_TIM_Base_Init>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d001      	beq.n	800dcc8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800dcc4:	f7ff f94c 	bl	800cf60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dcc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dccc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800dcce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4832      	ldr	r0, [pc, #200]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dcd6:	f7f8 fdfb 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d001      	beq.n	800dce4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800dce0:	f7ff f93e 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800dce4:	482e      	ldr	r0, [pc, #184]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dce6:	f7f8 fa4f 	bl	8006188 <HAL_TIM_PWM_Init>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d001      	beq.n	800dcf4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800dcf0:	f7ff f936 	bl	800cf60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800dd00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd04:	4619      	mov	r1, r3
 800dd06:	4826      	ldr	r0, [pc, #152]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dd08:	f7f9 fb36 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800dd12:	f7ff f925 	bl	800cf60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dd16:	2360      	movs	r3, #96	; 0x60
 800dd18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800dd1a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800dd1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dd20:	2300      	movs	r3, #0
 800dd22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800dd24:	2300      	movs	r3, #0
 800dd26:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800dd30:	2300      	movs	r3, #0
 800dd32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dd34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd38:	2208      	movs	r2, #8
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4818      	ldr	r0, [pc, #96]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dd3e:	f7f8 fcb3 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800dd48:	f7ff f90a 	bl	800cf60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800dd50:	2300      	movs	r3, #0
 800dd52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800dd54:	2300      	movs	r3, #0
 800dd56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800dd60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800dd66:	2300      	movs	r3, #0
 800dd68:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800dd6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dd72:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800dd74:	2300      	movs	r3, #0
 800dd76:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800dd7c:	1d3b      	adds	r3, r7, #4
 800dd7e:	4619      	mov	r1, r3
 800dd80:	4807      	ldr	r0, [pc, #28]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dd82:	f7f9 fb87 	bl	8007494 <HAL_TIMEx_ConfigBreakDeadTime>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d001      	beq.n	800dd90 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 800dd8c:	f7ff f8e8 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800dd90:	4803      	ldr	r0, [pc, #12]	; (800dda0 <MX_TIM8_Init+0x154>)
 800dd92:	f000 f9df 	bl	800e154 <HAL_TIM_MspPostInit>

}
 800dd96:	bf00      	nop
 800dd98:	3768      	adds	r7, #104	; 0x68
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	24006bc0 	.word	0x24006bc0
 800dda4:	40010400 	.word	0x40010400

0800dda8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b08c      	sub	sp, #48	; 0x30
 800ddac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ddae:	f107 0320 	add.w	r3, r7, #32
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	605a      	str	r2, [r3, #4]
 800ddb8:	609a      	str	r2, [r3, #8]
 800ddba:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ddbc:	1d3b      	adds	r3, r7, #4
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	601a      	str	r2, [r3, #0]
 800ddc2:	605a      	str	r2, [r3, #4]
 800ddc4:	609a      	str	r2, [r3, #8]
 800ddc6:	60da      	str	r2, [r3, #12]
 800ddc8:	611a      	str	r2, [r3, #16]
 800ddca:	615a      	str	r2, [r3, #20]
 800ddcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800ddce:	4b26      	ldr	r3, [pc, #152]	; (800de68 <MX_TIM12_Init+0xc0>)
 800ddd0:	4a26      	ldr	r2, [pc, #152]	; (800de6c <MX_TIM12_Init+0xc4>)
 800ddd2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 800ddd4:	4b24      	ldr	r3, [pc, #144]	; (800de68 <MX_TIM12_Init+0xc0>)
 800ddd6:	22c7      	movs	r2, #199	; 0xc7
 800ddd8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ddda:	4b23      	ldr	r3, [pc, #140]	; (800de68 <MX_TIM12_Init+0xc0>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 800dde0:	4b21      	ldr	r3, [pc, #132]	; (800de68 <MX_TIM12_Init+0xc0>)
 800dde2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800dde6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dde8:	4b1f      	ldr	r3, [pc, #124]	; (800de68 <MX_TIM12_Init+0xc0>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ddee:	4b1e      	ldr	r3, [pc, #120]	; (800de68 <MX_TIM12_Init+0xc0>)
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800ddf4:	481c      	ldr	r0, [pc, #112]	; (800de68 <MX_TIM12_Init+0xc0>)
 800ddf6:	f7f8 f8f7 	bl	8005fe8 <HAL_TIM_Base_Init>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d001      	beq.n	800de04 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800de00:	f7ff f8ae 	bl	800cf60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800de04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de08:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800de0a:	f107 0320 	add.w	r3, r7, #32
 800de0e:	4619      	mov	r1, r3
 800de10:	4815      	ldr	r0, [pc, #84]	; (800de68 <MX_TIM12_Init+0xc0>)
 800de12:	f7f8 fd5d 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d001      	beq.n	800de20 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800de1c:	f7ff f8a0 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800de20:	4811      	ldr	r0, [pc, #68]	; (800de68 <MX_TIM12_Init+0xc0>)
 800de22:	f7f8 f9b1 	bl	8006188 <HAL_TIM_PWM_Init>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d001      	beq.n	800de30 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800de2c:	f7ff f898 	bl	800cf60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800de30:	2360      	movs	r3, #96	; 0x60
 800de32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800de34:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800de38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800de3a:	2300      	movs	r3, #0
 800de3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800de3e:	2300      	movs	r3, #0
 800de40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800de42:	1d3b      	adds	r3, r7, #4
 800de44:	2200      	movs	r2, #0
 800de46:	4619      	mov	r1, r3
 800de48:	4807      	ldr	r0, [pc, #28]	; (800de68 <MX_TIM12_Init+0xc0>)
 800de4a:	f7f8 fc2d 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d001      	beq.n	800de58 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 800de54:	f7ff f884 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800de58:	4803      	ldr	r0, [pc, #12]	; (800de68 <MX_TIM12_Init+0xc0>)
 800de5a:	f000 f97b 	bl	800e154 <HAL_TIM_MspPostInit>

}
 800de5e:	bf00      	nop
 800de60:	3730      	adds	r7, #48	; 0x30
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	24006dd4 	.word	0x24006dd4
 800de6c:	40001800 	.word	0x40001800

0800de70 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b09a      	sub	sp, #104	; 0x68
 800de74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800de76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800de7a:	2200      	movs	r2, #0
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	605a      	str	r2, [r3, #4]
 800de80:	609a      	str	r2, [r3, #8]
 800de82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de88:	2200      	movs	r2, #0
 800de8a:	601a      	str	r2, [r3, #0]
 800de8c:	605a      	str	r2, [r3, #4]
 800de8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800de90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de94:	2200      	movs	r2, #0
 800de96:	601a      	str	r2, [r3, #0]
 800de98:	605a      	str	r2, [r3, #4]
 800de9a:	609a      	str	r2, [r3, #8]
 800de9c:	60da      	str	r2, [r3, #12]
 800de9e:	611a      	str	r2, [r3, #16]
 800dea0:	615a      	str	r2, [r3, #20]
 800dea2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800dea4:	1d3b      	adds	r3, r7, #4
 800dea6:	222c      	movs	r2, #44	; 0x2c
 800dea8:	2100      	movs	r1, #0
 800deaa:	4618      	mov	r0, r3
 800deac:	f000 ff04 	bl	800ecb8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800deb0:	4b45      	ldr	r3, [pc, #276]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800deb2:	4a46      	ldr	r2, [pc, #280]	; (800dfcc <MX_TIM15_Init+0x15c>)
 800deb4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 200-1;
 800deb6:	4b44      	ldr	r3, [pc, #272]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800deb8:	22c7      	movs	r2, #199	; 0xc7
 800deba:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800debc:	4b42      	ldr	r3, [pc, #264]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800debe:	2200      	movs	r2, #0
 800dec0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 800dec2:	4b41      	ldr	r3, [pc, #260]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800dec4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800dec8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800deca:	4b3f      	ldr	r3, [pc, #252]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800decc:	2200      	movs	r2, #0
 800dece:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800ded0:	4b3d      	ldr	r3, [pc, #244]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ded6:	4b3c      	ldr	r3, [pc, #240]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800ded8:	2200      	movs	r2, #0
 800deda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800dedc:	483a      	ldr	r0, [pc, #232]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800dede:	f7f8 f883 	bl	8005fe8 <HAL_TIM_Base_Init>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d001      	beq.n	800deec <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800dee8:	f7ff f83a 	bl	800cf60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800deec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800def0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800def2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800def6:	4619      	mov	r1, r3
 800def8:	4833      	ldr	r0, [pc, #204]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800defa:	f7f8 fce9 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d001      	beq.n	800df08 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800df04:	f7ff f82c 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800df08:	482f      	ldr	r0, [pc, #188]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800df0a:	f7f8 f93d 	bl	8006188 <HAL_TIM_PWM_Init>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800df14:	f7ff f824 	bl	800cf60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800df18:	2300      	movs	r3, #0
 800df1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df1c:	2300      	movs	r3, #0
 800df1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800df20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df24:	4619      	mov	r1, r3
 800df26:	4828      	ldr	r0, [pc, #160]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800df28:	f7f9 fa26 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800df32:	f7ff f815 	bl	800cf60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800df36:	2360      	movs	r3, #96	; 0x60
 800df38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800df3a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800df3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800df40:	2300      	movs	r3, #0
 800df42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800df44:	2300      	movs	r3, #0
 800df46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800df48:	2300      	movs	r3, #0
 800df4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800df4c:	2300      	movs	r3, #0
 800df4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800df50:	2300      	movs	r3, #0
 800df52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800df54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df58:	2200      	movs	r2, #0
 800df5a:	4619      	mov	r1, r3
 800df5c:	481a      	ldr	r0, [pc, #104]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800df5e:	f7f8 fba3 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800df68:	f7fe fffa 	bl	800cf60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800df6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df70:	2204      	movs	r2, #4
 800df72:	4619      	mov	r1, r3
 800df74:	4814      	ldr	r0, [pc, #80]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800df76:	f7f8 fb97 	bl	80066a8 <HAL_TIM_PWM_ConfigChannel>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <MX_TIM15_Init+0x114>
  {
    Error_Handler();
 800df80:	f7fe ffee 	bl	800cf60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800df84:	2300      	movs	r3, #0
 800df86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800df88:	2300      	movs	r3, #0
 800df8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800df8c:	2300      	movs	r3, #0
 800df8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800df90:	2300      	movs	r3, #0
 800df92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800df94:	2300      	movs	r3, #0
 800df96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800df98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800dfa6:	1d3b      	adds	r3, r7, #4
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	4807      	ldr	r0, [pc, #28]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800dfac:	f7f9 fa72 	bl	8007494 <HAL_TIMEx_ConfigBreakDeadTime>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <MX_TIM15_Init+0x14a>
  {
    Error_Handler();
 800dfb6:	f7fe ffd3 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800dfba:	4803      	ldr	r0, [pc, #12]	; (800dfc8 <MX_TIM15_Init+0x158>)
 800dfbc:	f000 f8ca 	bl	800e154 <HAL_TIM_MspPostInit>

}
 800dfc0:	bf00      	nop
 800dfc2:	3768      	adds	r7, #104	; 0x68
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	24006c58 	.word	0x24006c58
 800dfcc:	40014000 	.word	0x40014000

0800dfd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b08b      	sub	sp, #44	; 0x2c
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a55      	ldr	r2, [pc, #340]	; (800e134 <HAL_TIM_Base_MspInit+0x164>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d10f      	bne.n	800e002 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800dfe2:	4b55      	ldr	r3, [pc, #340]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800dfe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dfe8:	4a53      	ldr	r2, [pc, #332]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800dfea:	f043 0301 	orr.w	r3, r3, #1
 800dfee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800dff2:	4b51      	ldr	r3, [pc, #324]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800dff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dff8:	f003 0301 	and.w	r3, r3, #1
 800dffc:	627b      	str	r3, [r7, #36]	; 0x24
 800dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800e000:	e091      	b.n	800e126 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM2)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e00a:	d10f      	bne.n	800e02c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e00c:	4b4a      	ldr	r3, [pc, #296]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e00e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e012:	4a49      	ldr	r2, [pc, #292]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e014:	f043 0301 	orr.w	r3, r3, #1
 800e018:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e01c:	4b46      	ldr	r3, [pc, #280]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e01e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e022:	f003 0301 	and.w	r3, r3, #1
 800e026:	623b      	str	r3, [r7, #32]
 800e028:	6a3b      	ldr	r3, [r7, #32]
}
 800e02a:	e07c      	b.n	800e126 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM3)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a42      	ldr	r2, [pc, #264]	; (800e13c <HAL_TIM_Base_MspInit+0x16c>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d10f      	bne.n	800e056 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e036:	4b40      	ldr	r3, [pc, #256]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e03c:	4a3e      	ldr	r2, [pc, #248]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e03e:	f043 0302 	orr.w	r3, r3, #2
 800e042:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e046:	4b3c      	ldr	r3, [pc, #240]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e04c:	f003 0302 	and.w	r3, r3, #2
 800e050:	61fb      	str	r3, [r7, #28]
 800e052:	69fb      	ldr	r3, [r7, #28]
}
 800e054:	e067      	b.n	800e126 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a39      	ldr	r2, [pc, #228]	; (800e140 <HAL_TIM_Base_MspInit+0x170>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d10f      	bne.n	800e080 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e060:	4b35      	ldr	r3, [pc, #212]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e066:	4a34      	ldr	r2, [pc, #208]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e068:	f043 0304 	orr.w	r3, r3, #4
 800e06c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e070:	4b31      	ldr	r3, [pc, #196]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e076:	f003 0304 	and.w	r3, r3, #4
 800e07a:	61bb      	str	r3, [r7, #24]
 800e07c:	69bb      	ldr	r3, [r7, #24]
}
 800e07e:	e052      	b.n	800e126 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4a2f      	ldr	r2, [pc, #188]	; (800e144 <HAL_TIM_Base_MspInit+0x174>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d10f      	bne.n	800e0aa <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e08a:	4b2b      	ldr	r3, [pc, #172]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e08c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e090:	4a29      	ldr	r2, [pc, #164]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e092:	f043 0308 	orr.w	r3, r3, #8
 800e096:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e09a:	4b27      	ldr	r3, [pc, #156]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e09c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e0a0:	f003 0308 	and.w	r3, r3, #8
 800e0a4:	617b      	str	r3, [r7, #20]
 800e0a6:	697b      	ldr	r3, [r7, #20]
}
 800e0a8:	e03d      	b.n	800e126 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM8)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a26      	ldr	r2, [pc, #152]	; (800e148 <HAL_TIM_Base_MspInit+0x178>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d10f      	bne.n	800e0d4 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e0b4:	4b20      	ldr	r3, [pc, #128]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e0b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e0ba:	4a1f      	ldr	r2, [pc, #124]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e0bc:	f043 0302 	orr.w	r3, r3, #2
 800e0c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800e0c4:	4b1c      	ldr	r3, [pc, #112]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e0c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e0ca:	f003 0302 	and.w	r3, r3, #2
 800e0ce:	613b      	str	r3, [r7, #16]
 800e0d0:	693b      	ldr	r3, [r7, #16]
}
 800e0d2:	e028      	b.n	800e126 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM12)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a1c      	ldr	r2, [pc, #112]	; (800e14c <HAL_TIM_Base_MspInit+0x17c>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d10f      	bne.n	800e0fe <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800e0de:	4b16      	ldr	r3, [pc, #88]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e0e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e0e4:	4a14      	ldr	r2, [pc, #80]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e0ee:	4b12      	ldr	r3, [pc, #72]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e0f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0f8:	60fb      	str	r3, [r7, #12]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
}
 800e0fc:	e013      	b.n	800e126 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM15)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4a13      	ldr	r2, [pc, #76]	; (800e150 <HAL_TIM_Base_MspInit+0x180>)
 800e104:	4293      	cmp	r3, r2
 800e106:	d10e      	bne.n	800e126 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800e108:	4b0b      	ldr	r3, [pc, #44]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e10a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e10e:	4a0a      	ldr	r2, [pc, #40]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e114:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800e118:	4b07      	ldr	r3, [pc, #28]	; (800e138 <HAL_TIM_Base_MspInit+0x168>)
 800e11a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e11e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e122:	60bb      	str	r3, [r7, #8]
 800e124:	68bb      	ldr	r3, [r7, #8]
}
 800e126:	bf00      	nop
 800e128:	372c      	adds	r7, #44	; 0x2c
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	bf00      	nop
 800e134:	40010000 	.word	0x40010000
 800e138:	58024400 	.word	0x58024400
 800e13c:	40000400 	.word	0x40000400
 800e140:	40000800 	.word	0x40000800
 800e144:	40000c00 	.word	0x40000c00
 800e148:	40010400 	.word	0x40010400
 800e14c:	40001800 	.word	0x40001800
 800e150:	40014000 	.word	0x40014000

0800e154 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b092      	sub	sp, #72	; 0x48
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e15c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e160:	2200      	movs	r2, #0
 800e162:	601a      	str	r2, [r3, #0]
 800e164:	605a      	str	r2, [r3, #4]
 800e166:	609a      	str	r2, [r3, #8]
 800e168:	60da      	str	r2, [r3, #12]
 800e16a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4aa1      	ldr	r2, [pc, #644]	; (800e3f8 <HAL_TIM_MspPostInit+0x2a4>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d120      	bne.n	800e1b8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e176:	4ba1      	ldr	r3, [pc, #644]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e17c:	4a9f      	ldr	r2, [pc, #636]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e17e:	f043 0310 	orr.w	r3, r3, #16
 800e182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e186:	4b9d      	ldr	r3, [pc, #628]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e18c:	f003 0310 	and.w	r3, r3, #16
 800e190:	633b      	str	r3, [r7, #48]	; 0x30
 800e192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800e194:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800e198:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e19a:	2302      	movs	r3, #2
 800e19c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e1aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4893      	ldr	r0, [pc, #588]	; (800e400 <HAL_TIM_MspPostInit+0x2ac>)
 800e1b2:	f7f5 f99f 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800e1b6:	e15b      	b.n	800e470 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM2)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1c0:	d13f      	bne.n	800e242 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1c2:	4b8e      	ldr	r3, [pc, #568]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e1c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1c8:	4a8c      	ldr	r2, [pc, #560]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e1ca:	f043 0301 	orr.w	r3, r3, #1
 800e1ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e1d2:	4b8a      	ldr	r3, [pc, #552]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e1d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1d8:	f003 0301 	and.w	r3, r3, #1
 800e1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e1e0:	4b86      	ldr	r3, [pc, #536]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e1e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1e6:	4a85      	ldr	r2, [pc, #532]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e1e8:	f043 0302 	orr.w	r3, r3, #2
 800e1ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e1f0:	4b82      	ldr	r3, [pc, #520]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e1f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1f6:	f003 0302 	and.w	r3, r3, #2
 800e1fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800e1fe:	2320      	movs	r3, #32
 800e200:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e202:	2302      	movs	r3, #2
 800e204:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e206:	2300      	movs	r3, #0
 800e208:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e20a:	2300      	movs	r3, #0
 800e20c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e20e:	2301      	movs	r3, #1
 800e210:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e212:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e216:	4619      	mov	r1, r3
 800e218:	487a      	ldr	r0, [pc, #488]	; (800e404 <HAL_TIM_MspPostInit+0x2b0>)
 800e21a:	f7f5 f96b 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800e21e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800e222:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e224:	2302      	movs	r3, #2
 800e226:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e228:	2300      	movs	r3, #0
 800e22a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e22c:	2300      	movs	r3, #0
 800e22e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e230:	2301      	movs	r3, #1
 800e232:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e234:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e238:	4619      	mov	r1, r3
 800e23a:	4873      	ldr	r0, [pc, #460]	; (800e408 <HAL_TIM_MspPostInit+0x2b4>)
 800e23c:	f7f5 f95a 	bl	80034f4 <HAL_GPIO_Init>
}
 800e240:	e116      	b.n	800e470 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM3)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a71      	ldr	r2, [pc, #452]	; (800e40c <HAL_TIM_MspPostInit+0x2b8>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d13e      	bne.n	800e2ca <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e24c:	4b6b      	ldr	r3, [pc, #428]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e24e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e252:	4a6a      	ldr	r2, [pc, #424]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e254:	f043 0301 	orr.w	r3, r3, #1
 800e258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e25c:	4b67      	ldr	r3, [pc, #412]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e25e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e262:	f003 0301 	and.w	r3, r3, #1
 800e266:	627b      	str	r3, [r7, #36]	; 0x24
 800e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e26a:	4b64      	ldr	r3, [pc, #400]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e26c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e270:	4a62      	ldr	r2, [pc, #392]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e272:	f043 0302 	orr.w	r3, r3, #2
 800e276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e27a:	4b60      	ldr	r3, [pc, #384]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e27c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e280:	f003 0302 	and.w	r3, r3, #2
 800e284:	623b      	str	r3, [r7, #32]
 800e286:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e288:	23c0      	movs	r3, #192	; 0xc0
 800e28a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e28c:	2302      	movs	r3, #2
 800e28e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e290:	2300      	movs	r3, #0
 800e292:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e294:	2300      	movs	r3, #0
 800e296:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e298:	2302      	movs	r3, #2
 800e29a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e29c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	4858      	ldr	r0, [pc, #352]	; (800e404 <HAL_TIM_MspPostInit+0x2b0>)
 800e2a4:	f7f5 f926 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2ac:	2302      	movs	r3, #2
 800e2ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e2b8:	2302      	movs	r3, #2
 800e2ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e2bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	4851      	ldr	r0, [pc, #324]	; (800e408 <HAL_TIM_MspPostInit+0x2b4>)
 800e2c4:	f7f5 f916 	bl	80034f4 <HAL_GPIO_Init>
}
 800e2c8:	e0d2      	b.n	800e470 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM4)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4a50      	ldr	r2, [pc, #320]	; (800e410 <HAL_TIM_MspPostInit+0x2bc>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d120      	bne.n	800e316 <HAL_TIM_MspPostInit+0x1c2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e2d4:	4b49      	ldr	r3, [pc, #292]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e2d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e2da:	4a48      	ldr	r2, [pc, #288]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e2dc:	f043 0308 	orr.w	r3, r3, #8
 800e2e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e2e4:	4b45      	ldr	r3, [pc, #276]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e2e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e2ea:	f003 0308 	and.w	r3, r3, #8
 800e2ee:	61fb      	str	r3, [r7, #28]
 800e2f0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800e2f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800e2f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2f8:	2302      	movs	r3, #2
 800e2fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e300:	2300      	movs	r3, #0
 800e302:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e304:	2302      	movs	r3, #2
 800e306:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e308:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e30c:	4619      	mov	r1, r3
 800e30e:	4841      	ldr	r0, [pc, #260]	; (800e414 <HAL_TIM_MspPostInit+0x2c0>)
 800e310:	f7f5 f8f0 	bl	80034f4 <HAL_GPIO_Init>
}
 800e314:	e0ac      	b.n	800e470 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM5)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a3f      	ldr	r2, [pc, #252]	; (800e418 <HAL_TIM_MspPostInit+0x2c4>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d11f      	bne.n	800e360 <HAL_TIM_MspPostInit+0x20c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e320:	4b36      	ldr	r3, [pc, #216]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e326:	4a35      	ldr	r2, [pc, #212]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e328:	f043 0301 	orr.w	r3, r3, #1
 800e32c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e330:	4b32      	ldr	r3, [pc, #200]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e336:	f003 0301 	and.w	r3, r3, #1
 800e33a:	61bb      	str	r3, [r7, #24]
 800e33c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e33e:	2303      	movs	r3, #3
 800e340:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e342:	2302      	movs	r3, #2
 800e344:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e346:	2300      	movs	r3, #0
 800e348:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e34a:	2300      	movs	r3, #0
 800e34c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e34e:	2302      	movs	r3, #2
 800e350:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e352:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e356:	4619      	mov	r1, r3
 800e358:	482a      	ldr	r0, [pc, #168]	; (800e404 <HAL_TIM_MspPostInit+0x2b0>)
 800e35a:	f7f5 f8cb 	bl	80034f4 <HAL_GPIO_Init>
}
 800e35e:	e087      	b.n	800e470 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM8)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a2d      	ldr	r2, [pc, #180]	; (800e41c <HAL_TIM_MspPostInit+0x2c8>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d120      	bne.n	800e3ac <HAL_TIM_MspPostInit+0x258>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e36a:	4b24      	ldr	r3, [pc, #144]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e36c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e370:	4a22      	ldr	r2, [pc, #136]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e372:	f043 0304 	orr.w	r3, r3, #4
 800e376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e37a:	4b20      	ldr	r3, [pc, #128]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e37c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e380:	f003 0304 	and.w	r3, r3, #4
 800e384:	617b      	str	r3, [r7, #20]
 800e386:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800e388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e38c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e38e:	2302      	movs	r3, #2
 800e390:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e392:	2300      	movs	r3, #0
 800e394:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e396:	2300      	movs	r3, #0
 800e398:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e39a:	2303      	movs	r3, #3
 800e39c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e39e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	481e      	ldr	r0, [pc, #120]	; (800e420 <HAL_TIM_MspPostInit+0x2cc>)
 800e3a6:	f7f5 f8a5 	bl	80034f4 <HAL_GPIO_Init>
}
 800e3aa:	e061      	b.n	800e470 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM12)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a1c      	ldr	r2, [pc, #112]	; (800e424 <HAL_TIM_MspPostInit+0x2d0>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d138      	bne.n	800e428 <HAL_TIM_MspPostInit+0x2d4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e3b6:	4b11      	ldr	r3, [pc, #68]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e3b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3bc:	4a0f      	ldr	r2, [pc, #60]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e3be:	f043 0302 	orr.w	r3, r3, #2
 800e3c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e3c6:	4b0d      	ldr	r3, [pc, #52]	; (800e3fc <HAL_TIM_MspPostInit+0x2a8>)
 800e3c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3cc:	f003 0302 	and.w	r3, r3, #2
 800e3d0:	613b      	str	r3, [r7, #16]
 800e3d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800e3d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e3d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3da:	2302      	movs	r3, #2
 800e3dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800e3e6:	2302      	movs	r3, #2
 800e3e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e3ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	4805      	ldr	r0, [pc, #20]	; (800e408 <HAL_TIM_MspPostInit+0x2b4>)
 800e3f2:	f7f5 f87f 	bl	80034f4 <HAL_GPIO_Init>
}
 800e3f6:	e03b      	b.n	800e470 <HAL_TIM_MspPostInit+0x31c>
 800e3f8:	40010000 	.word	0x40010000
 800e3fc:	58024400 	.word	0x58024400
 800e400:	58021000 	.word	0x58021000
 800e404:	58020000 	.word	0x58020000
 800e408:	58020400 	.word	0x58020400
 800e40c:	40000400 	.word	0x40000400
 800e410:	40000800 	.word	0x40000800
 800e414:	58020c00 	.word	0x58020c00
 800e418:	40000c00 	.word	0x40000c00
 800e41c:	40010400 	.word	0x40010400
 800e420:	58020800 	.word	0x58020800
 800e424:	40001800 	.word	0x40001800
  else if(timHandle->Instance==TIM15)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a12      	ldr	r2, [pc, #72]	; (800e478 <HAL_TIM_MspPostInit+0x324>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d11e      	bne.n	800e470 <HAL_TIM_MspPostInit+0x31c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e432:	4b12      	ldr	r3, [pc, #72]	; (800e47c <HAL_TIM_MspPostInit+0x328>)
 800e434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e438:	4a10      	ldr	r2, [pc, #64]	; (800e47c <HAL_TIM_MspPostInit+0x328>)
 800e43a:	f043 0310 	orr.w	r3, r3, #16
 800e43e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e442:	4b0e      	ldr	r3, [pc, #56]	; (800e47c <HAL_TIM_MspPostInit+0x328>)
 800e444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e448:	f003 0310 	and.w	r3, r3, #16
 800e44c:	60fb      	str	r3, [r7, #12]
 800e44e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800e450:	2360      	movs	r3, #96	; 0x60
 800e452:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e454:	2302      	movs	r3, #2
 800e456:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e458:	2300      	movs	r3, #0
 800e45a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e45c:	2300      	movs	r3, #0
 800e45e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800e460:	2304      	movs	r3, #4
 800e462:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e464:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e468:	4619      	mov	r1, r3
 800e46a:	4805      	ldr	r0, [pc, #20]	; (800e480 <HAL_TIM_MspPostInit+0x32c>)
 800e46c:	f7f5 f842 	bl	80034f4 <HAL_GPIO_Init>
}
 800e470:	bf00      	nop
 800e472:	3748      	adds	r7, #72	; 0x48
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	40014000 	.word	0x40014000
 800e47c:	58024400 	.word	0x58024400
 800e480:	58021000 	.word	0x58021000

0800e484 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800e488:	4b22      	ldr	r3, [pc, #136]	; (800e514 <MX_UART5_Init+0x90>)
 800e48a:	4a23      	ldr	r2, [pc, #140]	; (800e518 <MX_UART5_Init+0x94>)
 800e48c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800e48e:	4b21      	ldr	r3, [pc, #132]	; (800e514 <MX_UART5_Init+0x90>)
 800e490:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e494:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e496:	4b1f      	ldr	r3, [pc, #124]	; (800e514 <MX_UART5_Init+0x90>)
 800e498:	2200      	movs	r2, #0
 800e49a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800e49c:	4b1d      	ldr	r3, [pc, #116]	; (800e514 <MX_UART5_Init+0x90>)
 800e49e:	2200      	movs	r2, #0
 800e4a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800e4a2:	4b1c      	ldr	r3, [pc, #112]	; (800e514 <MX_UART5_Init+0x90>)
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e4a8:	4b1a      	ldr	r3, [pc, #104]	; (800e514 <MX_UART5_Init+0x90>)
 800e4aa:	220c      	movs	r2, #12
 800e4ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e4ae:	4b19      	ldr	r3, [pc, #100]	; (800e514 <MX_UART5_Init+0x90>)
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e4b4:	4b17      	ldr	r3, [pc, #92]	; (800e514 <MX_UART5_Init+0x90>)
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e4ba:	4b16      	ldr	r3, [pc, #88]	; (800e514 <MX_UART5_Init+0x90>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800e4c0:	4b14      	ldr	r3, [pc, #80]	; (800e514 <MX_UART5_Init+0x90>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e4c6:	4b13      	ldr	r3, [pc, #76]	; (800e514 <MX_UART5_Init+0x90>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800e4cc:	4811      	ldr	r0, [pc, #68]	; (800e514 <MX_UART5_Init+0x90>)
 800e4ce:	f7f9 f87d 	bl	80075cc <HAL_UART_Init>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800e4d8:	f7fe fd42 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e4dc:	2100      	movs	r1, #0
 800e4de:	480d      	ldr	r0, [pc, #52]	; (800e514 <MX_UART5_Init+0x90>)
 800e4e0:	f7fb f860 	bl	80095a4 <HAL_UARTEx_SetTxFifoThreshold>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d001      	beq.n	800e4ee <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800e4ea:	f7fe fd39 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	4808      	ldr	r0, [pc, #32]	; (800e514 <MX_UART5_Init+0x90>)
 800e4f2:	f7fb f895 	bl	8009620 <HAL_UARTEx_SetRxFifoThreshold>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800e4fc:	f7fe fd30 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800e500:	4804      	ldr	r0, [pc, #16]	; (800e514 <MX_UART5_Init+0x90>)
 800e502:	f7fb f816 	bl	8009532 <HAL_UARTEx_DisableFifoMode>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d001      	beq.n	800e510 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800e50c:	f7fe fd28 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800e510:	bf00      	nop
 800e512:	bd80      	pop	{r7, pc}
 800e514:	24007018 	.word	0x24007018
 800e518:	40005000 	.word	0x40005000

0800e51c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e520:	4b22      	ldr	r3, [pc, #136]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e522:	4a23      	ldr	r2, [pc, #140]	; (800e5b0 <MX_USART1_UART_Init+0x94>)
 800e524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e526:	4b21      	ldr	r3, [pc, #132]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e52c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e52e:	4b1f      	ldr	r3, [pc, #124]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e530:	2200      	movs	r2, #0
 800e532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e534:	4b1d      	ldr	r3, [pc, #116]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e536:	2200      	movs	r2, #0
 800e538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e53a:	4b1c      	ldr	r3, [pc, #112]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e540:	4b1a      	ldr	r3, [pc, #104]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e542:	220c      	movs	r2, #12
 800e544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e546:	4b19      	ldr	r3, [pc, #100]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e548:	2200      	movs	r2, #0
 800e54a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e54c:	4b17      	ldr	r3, [pc, #92]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e54e:	2200      	movs	r2, #0
 800e550:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e552:	4b16      	ldr	r3, [pc, #88]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e554:	2200      	movs	r2, #0
 800e556:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800e558:	4b14      	ldr	r3, [pc, #80]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e55e:	4b13      	ldr	r3, [pc, #76]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e560:	2200      	movs	r2, #0
 800e562:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e564:	4811      	ldr	r0, [pc, #68]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e566:	f7f9 f831 	bl	80075cc <HAL_UART_Init>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800e570:	f7fe fcf6 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e574:	2100      	movs	r1, #0
 800e576:	480d      	ldr	r0, [pc, #52]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e578:	f7fb f814 	bl	80095a4 <HAL_UARTEx_SetTxFifoThreshold>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800e582:	f7fe fced 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e586:	2100      	movs	r1, #0
 800e588:	4808      	ldr	r0, [pc, #32]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e58a:	f7fb f849 	bl	8009620 <HAL_UARTEx_SetRxFifoThreshold>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800e594:	f7fe fce4 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800e598:	4804      	ldr	r0, [pc, #16]	; (800e5ac <MX_USART1_UART_Init+0x90>)
 800e59a:	f7fa ffca 	bl	8009532 <HAL_UARTEx_DisableFifoMode>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d001      	beq.n	800e5a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800e5a4:	f7fe fcdc 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e5a8:	bf00      	nop
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	24007120 	.word	0x24007120
 800e5b0:	40011000 	.word	0x40011000

0800e5b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800e5b8:	4b22      	ldr	r3, [pc, #136]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5ba:	4a23      	ldr	r2, [pc, #140]	; (800e648 <MX_USART2_UART_Init+0x94>)
 800e5bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800e5be:	4b21      	ldr	r3, [pc, #132]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5c0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800e5c4:	605a      	str	r2, [r3, #4]
//  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e5c6:	4b1f      	ldr	r3, [pc, #124]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e5cc:	4b1d      	ldr	r3, [pc, #116]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e5d2:	4b1c      	ldr	r3, [pc, #112]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e5d8:	4b1a      	ldr	r3, [pc, #104]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5da:	220c      	movs	r2, #12
 800e5dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e5de:	4b19      	ldr	r3, [pc, #100]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5e4:	4b17      	ldr	r3, [pc, #92]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e5ea:	4b16      	ldr	r3, [pc, #88]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800e5f0:	4b14      	ldr	r3, [pc, #80]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e5f6:	4b13      	ldr	r3, [pc, #76]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800e5fc:	4811      	ldr	r0, [pc, #68]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e5fe:	f7f8 ffe5 	bl	80075cc <HAL_UART_Init>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d001      	beq.n	800e60c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800e608:	f7fe fcaa 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e60c:	2100      	movs	r1, #0
 800e60e:	480d      	ldr	r0, [pc, #52]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e610:	f7fa ffc8 	bl	80095a4 <HAL_UARTEx_SetTxFifoThreshold>
 800e614:	4603      	mov	r3, r0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d001      	beq.n	800e61e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800e61a:	f7fe fca1 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e61e:	2100      	movs	r1, #0
 800e620:	4808      	ldr	r0, [pc, #32]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e622:	f7fa fffd 	bl	8009620 <HAL_UARTEx_SetRxFifoThreshold>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d001      	beq.n	800e630 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800e62c:	f7fe fc98 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800e630:	4804      	ldr	r0, [pc, #16]	; (800e644 <MX_USART2_UART_Init+0x90>)
 800e632:	f7fa ff7e 	bl	8009532 <HAL_UARTEx_DisableFifoMode>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d001      	beq.n	800e640 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800e63c:	f7fe fc90 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800e640:	bf00      	nop
 800e642:	bd80      	pop	{r7, pc}
 800e644:	240071b0 	.word	0x240071b0
 800e648:	40004400 	.word	0x40004400

0800e64c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800e650:	4b22      	ldr	r3, [pc, #136]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e652:	4a23      	ldr	r2, [pc, #140]	; (800e6e0 <MX_USART3_UART_Init+0x94>)
 800e654:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800e656:	4b21      	ldr	r3, [pc, #132]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e658:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e65c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e65e:	4b1f      	ldr	r3, [pc, #124]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e660:	2200      	movs	r2, #0
 800e662:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e664:	4b1d      	ldr	r3, [pc, #116]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e666:	2200      	movs	r2, #0
 800e668:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e66a:	4b1c      	ldr	r3, [pc, #112]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e670:	4b1a      	ldr	r3, [pc, #104]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e672:	220c      	movs	r2, #12
 800e674:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e676:	4b19      	ldr	r3, [pc, #100]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e678:	2200      	movs	r2, #0
 800e67a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e67c:	4b17      	ldr	r3, [pc, #92]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e67e:	2200      	movs	r2, #0
 800e680:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e682:	4b16      	ldr	r3, [pc, #88]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e684:	2200      	movs	r2, #0
 800e686:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800e688:	4b14      	ldr	r3, [pc, #80]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e68a:	2200      	movs	r2, #0
 800e68c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e68e:	4b13      	ldr	r3, [pc, #76]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e690:	2200      	movs	r2, #0
 800e692:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800e694:	4811      	ldr	r0, [pc, #68]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e696:	f7f8 ff99 	bl	80075cc <HAL_UART_Init>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d001      	beq.n	800e6a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800e6a0:	f7fe fc5e 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	480d      	ldr	r0, [pc, #52]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e6a8:	f7fa ff7c 	bl	80095a4 <HAL_UARTEx_SetTxFifoThreshold>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800e6b2:	f7fe fc55 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	4808      	ldr	r0, [pc, #32]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e6ba:	f7fa ffb1 	bl	8009620 <HAL_UARTEx_SetRxFifoThreshold>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d001      	beq.n	800e6c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800e6c4:	f7fe fc4c 	bl	800cf60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800e6c8:	4804      	ldr	r0, [pc, #16]	; (800e6dc <MX_USART3_UART_Init+0x90>)
 800e6ca:	f7fa ff32 	bl	8009532 <HAL_UARTEx_DisableFifoMode>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d001      	beq.n	800e6d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800e6d4:	f7fe fc44 	bl	800cf60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800e6d8:	bf00      	nop
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	24006f10 	.word	0x24006f10
 800e6e0:	40004800 	.word	0x40004800

0800e6e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b0be      	sub	sp, #248	; 0xf8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	605a      	str	r2, [r3, #4]
 800e6f6:	609a      	str	r2, [r3, #8]
 800e6f8:	60da      	str	r2, [r3, #12]
 800e6fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e6fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e700:	22bc      	movs	r2, #188	; 0xbc
 800e702:	2100      	movs	r1, #0
 800e704:	4618      	mov	r0, r3
 800e706:	f000 fad7 	bl	800ecb8 <memset>
  if(uartHandle->Instance==UART5)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	4a79      	ldr	r2, [pc, #484]	; (800e8f4 <HAL_UART_MspInit+0x210>)
 800e710:	4293      	cmp	r3, r2
 800e712:	f040 80a6 	bne.w	800e862 <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800e716:	2302      	movs	r3, #2
 800e718:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800e71a:	2300      	movs	r3, #0
 800e71c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e724:	4618      	mov	r0, r3
 800e726:	f7f6 f8fd 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d001      	beq.n	800e734 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800e730:	f7fe fc16 	bl	800cf60 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800e734:	4b70      	ldr	r3, [pc, #448]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e73a:	4a6f      	ldr	r2, [pc, #444]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e73c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e740:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e744:	4b6c      	ldr	r3, [pc, #432]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e74a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e74e:	627b      	str	r3, [r7, #36]	; 0x24
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e752:	4b69      	ldr	r3, [pc, #420]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e758:	4a67      	ldr	r2, [pc, #412]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e75a:	f043 0302 	orr.w	r3, r3, #2
 800e75e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e762:	4b65      	ldr	r3, [pc, #404]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e768:	f003 0302 	and.w	r3, r3, #2
 800e76c:	623b      	str	r3, [r7, #32]
 800e76e:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800e770:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800e774:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e778:	2302      	movs	r3, #2
 800e77a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e77e:	2300      	movs	r3, #0
 800e780:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e784:	2300      	movs	r3, #0
 800e786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800e78a:	230e      	movs	r3, #14
 800e78c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e790:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800e794:	4619      	mov	r1, r3
 800e796:	4859      	ldr	r0, [pc, #356]	; (800e8fc <HAL_UART_MspInit+0x218>)
 800e798:	f7f4 feac 	bl	80034f4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800e79c:	4b58      	ldr	r3, [pc, #352]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e79e:	4a59      	ldr	r2, [pc, #356]	; (800e904 <HAL_UART_MspInit+0x220>)
 800e7a0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800e7a2:	4b57      	ldr	r3, [pc, #348]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7a4:	2241      	movs	r2, #65	; 0x41
 800e7a6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e7a8:	4b55      	ldr	r3, [pc, #340]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e7ae:	4b54      	ldr	r3, [pc, #336]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e7b4:	4b52      	ldr	r3, [pc, #328]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e7ba:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e7bc:	4b50      	ldr	r3, [pc, #320]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e7c2:	4b4f      	ldr	r3, [pc, #316]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800e7c8:	4b4d      	ldr	r3, [pc, #308]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e7ce:	4b4c      	ldr	r3, [pc, #304]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e7d4:	4b4a      	ldr	r3, [pc, #296]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800e7da:	4849      	ldr	r0, [pc, #292]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7dc:	f7f2 f844 	bl	8000868 <HAL_DMA_Init>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d001      	beq.n	800e7ea <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800e7e6:	f7fe fbbb 	bl	800cf60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4a44      	ldr	r2, [pc, #272]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7ee:	67da      	str	r2, [r3, #124]	; 0x7c
 800e7f0:	4a43      	ldr	r2, [pc, #268]	; (800e900 <HAL_UART_MspInit+0x21c>)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 800e7f6:	4b44      	ldr	r3, [pc, #272]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e7f8:	4a44      	ldr	r2, [pc, #272]	; (800e90c <HAL_UART_MspInit+0x228>)
 800e7fa:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 800e7fc:	4b42      	ldr	r3, [pc, #264]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e7fe:	2242      	movs	r2, #66	; 0x42
 800e800:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e802:	4b41      	ldr	r3, [pc, #260]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e804:	2240      	movs	r2, #64	; 0x40
 800e806:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e808:	4b3f      	ldr	r3, [pc, #252]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e80e:	4b3e      	ldr	r3, [pc, #248]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e814:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e816:	4b3c      	ldr	r3, [pc, #240]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e818:	2200      	movs	r2, #0
 800e81a:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e81c:	4b3a      	ldr	r3, [pc, #232]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e81e:	2200      	movs	r2, #0
 800e820:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800e822:	4b39      	ldr	r3, [pc, #228]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e824:	2200      	movs	r2, #0
 800e826:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e828:	4b37      	ldr	r3, [pc, #220]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e82e:	4b36      	ldr	r3, [pc, #216]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e830:	2200      	movs	r2, #0
 800e832:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800e834:	4834      	ldr	r0, [pc, #208]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e836:	f7f2 f817 	bl	8000868 <HAL_DMA_Init>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d001      	beq.n	800e844 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 800e840:	f7fe fb8e 	bl	800cf60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a30      	ldr	r2, [pc, #192]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e848:	679a      	str	r2, [r3, #120]	; 0x78
 800e84a:	4a2f      	ldr	r2, [pc, #188]	; (800e908 <HAL_UART_MspInit+0x224>)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800e850:	2200      	movs	r2, #0
 800e852:	2105      	movs	r1, #5
 800e854:	2035      	movs	r0, #53	; 0x35
 800e856:	f7f1 ffdf 	bl	8000818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800e85a:	2035      	movs	r0, #53	; 0x35
 800e85c:	f7f1 fff6 	bl	800084c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800e860:	e1b0      	b.n	800ebc4 <HAL_UART_MspInit+0x4e0>
  else if(uartHandle->Instance==USART1)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a2a      	ldr	r2, [pc, #168]	; (800e910 <HAL_UART_MspInit+0x22c>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d155      	bne.n	800e918 <HAL_UART_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800e86c:	2301      	movs	r3, #1
 800e86e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800e870:	2300      	movs	r3, #0
 800e872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7f6 f852 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d001      	beq.n	800e88a <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800e886:	f7fe fb6b 	bl	800cf60 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e88a:	4b1b      	ldr	r3, [pc, #108]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e88c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e890:	4a19      	ldr	r2, [pc, #100]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e892:	f043 0310 	orr.w	r3, r3, #16
 800e896:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800e89a:	4b17      	ldr	r3, [pc, #92]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e89c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e8a0:	f003 0310 	and.w	r3, r3, #16
 800e8a4:	61fb      	str	r3, [r7, #28]
 800e8a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8a8:	4b13      	ldr	r3, [pc, #76]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e8aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e8ae:	4a12      	ldr	r2, [pc, #72]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e8b0:	f043 0301 	orr.w	r3, r3, #1
 800e8b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e8b8:	4b0f      	ldr	r3, [pc, #60]	; (800e8f8 <HAL_UART_MspInit+0x214>)
 800e8ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e8be:	f003 0301 	and.w	r3, r3, #1
 800e8c2:	61bb      	str	r3, [r7, #24]
 800e8c4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e8c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e8ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8ce:	2302      	movs	r3, #2
 800e8d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e8e0:	2307      	movs	r3, #7
 800e8e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	4809      	ldr	r0, [pc, #36]	; (800e914 <HAL_UART_MspInit+0x230>)
 800e8ee:	f7f4 fe01 	bl	80034f4 <HAL_GPIO_Init>
}
 800e8f2:	e167      	b.n	800ebc4 <HAL_UART_MspInit+0x4e0>
 800e8f4:	40005000 	.word	0x40005000
 800e8f8:	58024400 	.word	0x58024400
 800e8fc:	58020400 	.word	0x58020400
 800e900:	24007240 	.word	0x24007240
 800e904:	40020010 	.word	0x40020010
 800e908:	240072b8 	.word	0x240072b8
 800e90c:	40020028 	.word	0x40020028
 800e910:	40011000 	.word	0x40011000
 800e914:	58020000 	.word	0x58020000
  else if(uartHandle->Instance==USART2)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4aab      	ldr	r2, [pc, #684]	; (800ebcc <HAL_UART_MspInit+0x4e8>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	f040 80a5 	bne.w	800ea6e <HAL_UART_MspInit+0x38a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800e924:	2302      	movs	r3, #2
 800e926:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800e928:	2300      	movs	r3, #0
 800e92a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e92e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e932:	4618      	mov	r0, r3
 800e934:	f7f5 fff6 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d001      	beq.n	800e942 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800e93e:	f7fe fb0f 	bl	800cf60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e942:	4ba3      	ldr	r3, [pc, #652]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800e944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e948:	4aa1      	ldr	r2, [pc, #644]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800e94a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e94e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e952:	4b9f      	ldr	r3, [pc, #636]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800e954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e95c:	617b      	str	r3, [r7, #20]
 800e95e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e960:	4b9b      	ldr	r3, [pc, #620]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800e962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e966:	4a9a      	ldr	r2, [pc, #616]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800e968:	f043 0301 	orr.w	r3, r3, #1
 800e96c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e970:	4b97      	ldr	r3, [pc, #604]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800e972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	613b      	str	r3, [r7, #16]
 800e97c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800e97e:	230c      	movs	r3, #12
 800e980:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e984:	2302      	movs	r3, #2
 800e986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e98a:	2300      	movs	r3, #0
 800e98c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e990:	2300      	movs	r3, #0
 800e992:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e996:	2307      	movs	r3, #7
 800e998:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e99c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	488c      	ldr	r0, [pc, #560]	; (800ebd4 <HAL_UART_MspInit+0x4f0>)
 800e9a4:	f7f4 fda6 	bl	80034f4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 800e9a8:	4b8b      	ldr	r3, [pc, #556]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9aa:	4a8c      	ldr	r2, [pc, #560]	; (800ebdc <HAL_UART_MspInit+0x4f8>)
 800e9ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800e9ae:	4b8a      	ldr	r3, [pc, #552]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9b0:	222b      	movs	r2, #43	; 0x2b
 800e9b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e9b4:	4b88      	ldr	r3, [pc, #544]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e9ba:	4b87      	ldr	r3, [pc, #540]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9bc:	2200      	movs	r2, #0
 800e9be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e9c0:	4b85      	ldr	r3, [pc, #532]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e9c8:	4b83      	ldr	r3, [pc, #524]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e9ce:	4b82      	ldr	r3, [pc, #520]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800e9d4:	4b80      	ldr	r3, [pc, #512]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e9da:	4b7f      	ldr	r3, [pc, #508]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9dc:	2200      	movs	r2, #0
 800e9de:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e9e0:	4b7d      	ldr	r3, [pc, #500]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800e9e6:	487c      	ldr	r0, [pc, #496]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9e8:	f7f1 ff3e 	bl	8000868 <HAL_DMA_Init>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <HAL_UART_MspInit+0x312>
      Error_Handler();
 800e9f2:	f7fe fab5 	bl	800cf60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4a77      	ldr	r2, [pc, #476]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9fa:	67da      	str	r2, [r3, #124]	; 0x7c
 800e9fc:	4a76      	ldr	r2, [pc, #472]	; (800ebd8 <HAL_UART_MspInit+0x4f4>)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream3;
 800ea02:	4b77      	ldr	r3, [pc, #476]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea04:	4a77      	ldr	r2, [pc, #476]	; (800ebe4 <HAL_UART_MspInit+0x500>)
 800ea06:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800ea08:	4b75      	ldr	r3, [pc, #468]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea0a:	222c      	movs	r2, #44	; 0x2c
 800ea0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ea0e:	4b74      	ldr	r3, [pc, #464]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea10:	2240      	movs	r2, #64	; 0x40
 800ea12:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ea14:	4b72      	ldr	r3, [pc, #456]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea16:	2200      	movs	r2, #0
 800ea18:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ea1a:	4b71      	ldr	r3, [pc, #452]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ea20:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ea22:	4b6f      	ldr	r3, [pc, #444]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea24:	2200      	movs	r2, #0
 800ea26:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ea28:	4b6d      	ldr	r3, [pc, #436]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800ea2e:	4b6c      	ldr	r3, [pc, #432]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea30:	2200      	movs	r2, #0
 800ea32:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ea34:	4b6a      	ldr	r3, [pc, #424]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ea3a:	4b69      	ldr	r3, [pc, #420]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800ea40:	4867      	ldr	r0, [pc, #412]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea42:	f7f1 ff11 	bl	8000868 <HAL_DMA_Init>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d001      	beq.n	800ea50 <HAL_UART_MspInit+0x36c>
      Error_Handler();
 800ea4c:	f7fe fa88 	bl	800cf60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4a63      	ldr	r2, [pc, #396]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea54:	679a      	str	r2, [r3, #120]	; 0x78
 800ea56:	4a62      	ldr	r2, [pc, #392]	; (800ebe0 <HAL_UART_MspInit+0x4fc>)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	2105      	movs	r1, #5
 800ea60:	2026      	movs	r0, #38	; 0x26
 800ea62:	f7f1 fed9 	bl	8000818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ea66:	2026      	movs	r0, #38	; 0x26
 800ea68:	f7f1 fef0 	bl	800084c <HAL_NVIC_EnableIRQ>
}
 800ea6c:	e0aa      	b.n	800ebc4 <HAL_UART_MspInit+0x4e0>
  else if(uartHandle->Instance==USART3)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a5d      	ldr	r2, [pc, #372]	; (800ebe8 <HAL_UART_MspInit+0x504>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	f040 80a5 	bne.w	800ebc4 <HAL_UART_MspInit+0x4e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800ea7a:	2302      	movs	r3, #2
 800ea7c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ea84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7f5 ff4b 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d001      	beq.n	800ea98 <HAL_UART_MspInit+0x3b4>
      Error_Handler();
 800ea94:	f7fe fa64 	bl	800cf60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ea98:	4b4d      	ldr	r3, [pc, #308]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800ea9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ea9e:	4a4c      	ldr	r2, [pc, #304]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800eaa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eaa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800eaa8:	4b49      	ldr	r3, [pc, #292]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800eaaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eaae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eab2:	60fb      	str	r3, [r7, #12]
 800eab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800eab6:	4b46      	ldr	r3, [pc, #280]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800eab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eabc:	4a44      	ldr	r2, [pc, #272]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800eabe:	f043 0308 	orr.w	r3, r3, #8
 800eac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800eac6:	4b42      	ldr	r3, [pc, #264]	; (800ebd0 <HAL_UART_MspInit+0x4ec>)
 800eac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eacc:	f003 0308 	and.w	r3, r3, #8
 800ead0:	60bb      	str	r3, [r7, #8]
 800ead2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ead4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ead8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eadc:	2302      	movs	r3, #2
 800eade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eae2:	2300      	movs	r3, #0
 800eae4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eae8:	2300      	movs	r3, #0
 800eaea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800eaee:	2307      	movs	r3, #7
 800eaf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800eaf4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800eaf8:	4619      	mov	r1, r3
 800eafa:	483c      	ldr	r0, [pc, #240]	; (800ebec <HAL_UART_MspInit+0x508>)
 800eafc:	f7f4 fcfa 	bl	80034f4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream4;
 800eb00:	4b3b      	ldr	r3, [pc, #236]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb02:	4a3c      	ldr	r2, [pc, #240]	; (800ebf4 <HAL_UART_MspInit+0x510>)
 800eb04:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800eb06:	4b3a      	ldr	r3, [pc, #232]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb08:	222d      	movs	r2, #45	; 0x2d
 800eb0a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800eb0c:	4b38      	ldr	r3, [pc, #224]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eb12:	4b37      	ldr	r3, [pc, #220]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800eb18:	4b35      	ldr	r3, [pc, #212]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eb1e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eb20:	4b33      	ldr	r3, [pc, #204]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eb26:	4b32      	ldr	r3, [pc, #200]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800eb2c:	4b30      	ldr	r3, [pc, #192]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb2e:	2200      	movs	r2, #0
 800eb30:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800eb32:	4b2f      	ldr	r3, [pc, #188]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800eb38:	4b2d      	ldr	r3, [pc, #180]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800eb3e:	482c      	ldr	r0, [pc, #176]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb40:	f7f1 fe92 	bl	8000868 <HAL_DMA_Init>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d001      	beq.n	800eb4e <HAL_UART_MspInit+0x46a>
      Error_Handler();
 800eb4a:	f7fe fa09 	bl	800cf60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a27      	ldr	r2, [pc, #156]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb52:	67da      	str	r2, [r3, #124]	; 0x7c
 800eb54:	4a26      	ldr	r2, [pc, #152]	; (800ebf0 <HAL_UART_MspInit+0x50c>)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream5;
 800eb5a:	4b27      	ldr	r3, [pc, #156]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb5c:	4a27      	ldr	r2, [pc, #156]	; (800ebfc <HAL_UART_MspInit+0x518>)
 800eb5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800eb60:	4b25      	ldr	r3, [pc, #148]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb62:	222e      	movs	r2, #46	; 0x2e
 800eb64:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800eb66:	4b24      	ldr	r3, [pc, #144]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb68:	2240      	movs	r2, #64	; 0x40
 800eb6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eb6c:	4b22      	ldr	r3, [pc, #136]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800eb72:	4b21      	ldr	r3, [pc, #132]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eb78:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eb7a:	4b1f      	ldr	r3, [pc, #124]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eb80:	4b1d      	ldr	r3, [pc, #116]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800eb86:	4b1c      	ldr	r3, [pc, #112]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800eb8c:	4b1a      	ldr	r3, [pc, #104]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb8e:	2200      	movs	r2, #0
 800eb90:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800eb92:	4b19      	ldr	r3, [pc, #100]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800eb98:	4817      	ldr	r0, [pc, #92]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800eb9a:	f7f1 fe65 	bl	8000868 <HAL_DMA_Init>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d001      	beq.n	800eba8 <HAL_UART_MspInit+0x4c4>
      Error_Handler();
 800eba4:	f7fe f9dc 	bl	800cf60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a13      	ldr	r2, [pc, #76]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800ebac:	679a      	str	r2, [r3, #120]	; 0x78
 800ebae:	4a12      	ldr	r2, [pc, #72]	; (800ebf8 <HAL_UART_MspInit+0x514>)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	2105      	movs	r1, #5
 800ebb8:	2027      	movs	r0, #39	; 0x27
 800ebba:	f7f1 fe2d 	bl	8000818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ebbe:	2027      	movs	r0, #39	; 0x27
 800ebc0:	f7f1 fe44 	bl	800084c <HAL_NVIC_EnableIRQ>
}
 800ebc4:	bf00      	nop
 800ebc6:	37f8      	adds	r7, #248	; 0xf8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	40004400 	.word	0x40004400
 800ebd0:	58024400 	.word	0x58024400
 800ebd4:	58020000 	.word	0x58020000
 800ebd8:	24006e20 	.word	0x24006e20
 800ebdc:	40020040 	.word	0x40020040
 800ebe0:	240070a8 	.word	0x240070a8
 800ebe4:	40020058 	.word	0x40020058
 800ebe8:	40004800 	.word	0x40004800
 800ebec:	58020c00 	.word	0x58020c00
 800ebf0:	24006e98 	.word	0x24006e98
 800ebf4:	40020070 	.word	0x40020070
 800ebf8:	24006fa0 	.word	0x24006fa0
 800ebfc:	40020088 	.word	0x40020088

0800ec00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800ec00:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ec38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800ec04:	f7fe fca6 	bl	800d554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ec08:	480c      	ldr	r0, [pc, #48]	; (800ec3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ec0a:	490d      	ldr	r1, [pc, #52]	; (800ec40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ec0c:	4a0d      	ldr	r2, [pc, #52]	; (800ec44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ec0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ec10:	e002      	b.n	800ec18 <LoopCopyDataInit>

0800ec12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ec12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ec14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ec16:	3304      	adds	r3, #4

0800ec18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ec18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ec1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ec1c:	d3f9      	bcc.n	800ec12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ec1e:	4a0a      	ldr	r2, [pc, #40]	; (800ec48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ec20:	4c0a      	ldr	r4, [pc, #40]	; (800ec4c <LoopFillZerobss+0x22>)
  movs r3, #0
 800ec22:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ec24:	e001      	b.n	800ec2a <LoopFillZerobss>

0800ec26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ec26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ec28:	3204      	adds	r2, #4

0800ec2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ec2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ec2c:	d3fb      	bcc.n	800ec26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ec2e:	f000 f811 	bl	800ec54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ec32:	f7fe f87d 	bl	800cd30 <main>
  bx  lr
 800ec36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ec38:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800ec3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800ec40:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800ec44:	0800ee30 	.word	0x0800ee30
  ldr r2, =_sbss
 800ec48:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800ec4c:	24007330 	.word	0x24007330

0800ec50 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ec50:	e7fe      	b.n	800ec50 <ADC3_IRQHandler>
	...

0800ec54 <__libc_init_array>:
 800ec54:	b570      	push	{r4, r5, r6, lr}
 800ec56:	4d0d      	ldr	r5, [pc, #52]	; (800ec8c <__libc_init_array+0x38>)
 800ec58:	4c0d      	ldr	r4, [pc, #52]	; (800ec90 <__libc_init_array+0x3c>)
 800ec5a:	1b64      	subs	r4, r4, r5
 800ec5c:	10a4      	asrs	r4, r4, #2
 800ec5e:	2600      	movs	r6, #0
 800ec60:	42a6      	cmp	r6, r4
 800ec62:	d109      	bne.n	800ec78 <__libc_init_array+0x24>
 800ec64:	4d0b      	ldr	r5, [pc, #44]	; (800ec94 <__libc_init_array+0x40>)
 800ec66:	4c0c      	ldr	r4, [pc, #48]	; (800ec98 <__libc_init_array+0x44>)
 800ec68:	f000 f82e 	bl	800ecc8 <_init>
 800ec6c:	1b64      	subs	r4, r4, r5
 800ec6e:	10a4      	asrs	r4, r4, #2
 800ec70:	2600      	movs	r6, #0
 800ec72:	42a6      	cmp	r6, r4
 800ec74:	d105      	bne.n	800ec82 <__libc_init_array+0x2e>
 800ec76:	bd70      	pop	{r4, r5, r6, pc}
 800ec78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec7c:	4798      	blx	r3
 800ec7e:	3601      	adds	r6, #1
 800ec80:	e7ee      	b.n	800ec60 <__libc_init_array+0xc>
 800ec82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec86:	4798      	blx	r3
 800ec88:	3601      	adds	r6, #1
 800ec8a:	e7f2      	b.n	800ec72 <__libc_init_array+0x1e>
 800ec8c:	0800ee28 	.word	0x0800ee28
 800ec90:	0800ee28 	.word	0x0800ee28
 800ec94:	0800ee28 	.word	0x0800ee28
 800ec98:	0800ee2c 	.word	0x0800ee2c

0800ec9c <memcpy>:
 800ec9c:	440a      	add	r2, r1
 800ec9e:	4291      	cmp	r1, r2
 800eca0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eca4:	d100      	bne.n	800eca8 <memcpy+0xc>
 800eca6:	4770      	bx	lr
 800eca8:	b510      	push	{r4, lr}
 800ecaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecb2:	4291      	cmp	r1, r2
 800ecb4:	d1f9      	bne.n	800ecaa <memcpy+0xe>
 800ecb6:	bd10      	pop	{r4, pc}

0800ecb8 <memset>:
 800ecb8:	4402      	add	r2, r0
 800ecba:	4603      	mov	r3, r0
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d100      	bne.n	800ecc2 <memset+0xa>
 800ecc0:	4770      	bx	lr
 800ecc2:	f803 1b01 	strb.w	r1, [r3], #1
 800ecc6:	e7f9      	b.n	800ecbc <memset+0x4>

0800ecc8 <_init>:
 800ecc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecca:	bf00      	nop
 800eccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecce:	bc08      	pop	{r3}
 800ecd0:	469e      	mov	lr, r3
 800ecd2:	4770      	bx	lr

0800ecd4 <_fini>:
 800ecd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecd6:	bf00      	nop
 800ecd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecda:	bc08      	pop	{r3}
 800ecdc:	469e      	mov	lr, r3
 800ecde:	4770      	bx	lr
