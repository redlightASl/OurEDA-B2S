
OurEDA-B2S_PowH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4f8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800f798  0800f798  0001f798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f924  0800f924  0001f924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f92c  0800f92c  0001f92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f930  0800f930  0001f930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800f934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000073d8  24000014  0800f948  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240073ec  0800f948  000273ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032da5  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005360  00000000  00000000  00052de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001800  00000000  00000000  00058148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001648  00000000  00000000  00059948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b068  00000000  00000000  0005af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021ec1  00000000  00000000  00095ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f3e1  00000000  00000000  000b7eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022729a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006334  00000000  00000000  002272f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f780 	.word	0x0800f780

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800f780 	.word	0x0800f780

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 f90f 	bl	8000802 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e4:	f003 ff9e 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_Init+0x68>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	f003 030f 	and.w	r3, r3, #15
 80005f4:	4913      	ldr	r1, [pc, #76]	; (8000644 <HAL_Init+0x6c>)
 80005f6:	5ccb      	ldrb	r3, [r1, r3]
 80005f8:	f003 031f 	and.w	r3, r3, #31
 80005fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000600:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_Init+0x6c>)
 800060c:	5cd3      	ldrb	r3, [r2, r3]
 800060e:	f003 031f 	and.w	r3, r3, #31
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	fa22 f303 	lsr.w	r3, r2, r3
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_Init+0x70>)
 800061a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800061c:	4a0b      	ldr	r2, [pc, #44]	; (800064c <HAL_Init+0x74>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	200f      	movs	r0, #15
 8000624:	f00d fa1c 	bl	800da60 <HAL_InitTick>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e002      	b.n	8000638 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000632:	f00d f9f7 	bl	800da24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58024400 	.word	0x58024400
 8000644:	0800f914 	.word	0x0800f914
 8000648:	24000010 	.word	0x24000010
 800064c:	2400000c 	.word	0x2400000c

08000650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	24000004 	.word	0x24000004
 8000674:	2400403c 	.word	0x2400403c

08000678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2400403c 	.word	0x2400403c

08000690 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_GetREVID+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	0c1b      	lsrs	r3, r3, #16
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	5c001000 	.word	0x5c001000

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <__NVIC_SetPriorityGrouping+0x40>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x40>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	05fa0000 	.word	0x05fa0000

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff4c 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000826:	f7ff ff63 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 800082a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	68b9      	ldr	r1, [r7, #8]
 8000830:	6978      	ldr	r0, [r7, #20]
 8000832:	f7ff ffb3 	bl	800079c <NVIC_EncodePriority>
 8000836:	4602      	mov	r2, r0
 8000838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff82 	bl	8000748 <__NVIC_SetPriority>
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff56 	bl	800070c <__NVIC_EnableIRQ>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff ff02 	bl	8000678 <HAL_GetTick>
 8000874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	e316      	b.n	8000eae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a66      	ldr	r2, [pc, #408]	; (8000a20 <HAL_DMA_Init+0x1b8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d04a      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a65      	ldr	r2, [pc, #404]	; (8000a24 <HAL_DMA_Init+0x1bc>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d045      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a63      	ldr	r2, [pc, #396]	; (8000a28 <HAL_DMA_Init+0x1c0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d040      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a62      	ldr	r2, [pc, #392]	; (8000a2c <HAL_DMA_Init+0x1c4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d03b      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_DMA_Init+0x1c8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d036      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a5f      	ldr	r2, [pc, #380]	; (8000a34 <HAL_DMA_Init+0x1cc>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d031      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a5d      	ldr	r2, [pc, #372]	; (8000a38 <HAL_DMA_Init+0x1d0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d02c      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a5c      	ldr	r2, [pc, #368]	; (8000a3c <HAL_DMA_Init+0x1d4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d027      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a5a      	ldr	r2, [pc, #360]	; (8000a40 <HAL_DMA_Init+0x1d8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d022      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a59      	ldr	r2, [pc, #356]	; (8000a44 <HAL_DMA_Init+0x1dc>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d01d      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a57      	ldr	r2, [pc, #348]	; (8000a48 <HAL_DMA_Init+0x1e0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d018      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a56      	ldr	r2, [pc, #344]	; (8000a4c <HAL_DMA_Init+0x1e4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d013      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a54      	ldr	r2, [pc, #336]	; (8000a50 <HAL_DMA_Init+0x1e8>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d00e      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a53      	ldr	r2, [pc, #332]	; (8000a54 <HAL_DMA_Init+0x1ec>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d009      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a51      	ldr	r2, [pc, #324]	; (8000a58 <HAL_DMA_Init+0x1f0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d004      	beq.n	8000920 <HAL_DMA_Init+0xb8>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a50      	ldr	r2, [pc, #320]	; (8000a5c <HAL_DMA_Init+0x1f4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d101      	bne.n	8000924 <HAL_DMA_Init+0xbc>
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <HAL_DMA_Init+0xbe>
 8000924:	2300      	movs	r3, #0
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 813b 	beq.w	8000ba2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2202      	movs	r2, #2
 8000930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a37      	ldr	r2, [pc, #220]	; (8000a20 <HAL_DMA_Init+0x1b8>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d04a      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a36      	ldr	r2, [pc, #216]	; (8000a24 <HAL_DMA_Init+0x1bc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d045      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a34      	ldr	r2, [pc, #208]	; (8000a28 <HAL_DMA_Init+0x1c0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d040      	beq.n	80009dc <HAL_DMA_Init+0x174>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <HAL_DMA_Init+0x1c4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d03b      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <HAL_DMA_Init+0x1c8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d036      	beq.n	80009dc <HAL_DMA_Init+0x174>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <HAL_DMA_Init+0x1cc>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d031      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <HAL_DMA_Init+0x1d0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d02c      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a2d      	ldr	r2, [pc, #180]	; (8000a3c <HAL_DMA_Init+0x1d4>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d027      	beq.n	80009dc <HAL_DMA_Init+0x174>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2b      	ldr	r2, [pc, #172]	; (8000a40 <HAL_DMA_Init+0x1d8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d022      	beq.n	80009dc <HAL_DMA_Init+0x174>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <HAL_DMA_Init+0x1dc>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d01d      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <HAL_DMA_Init+0x1e0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d018      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <HAL_DMA_Init+0x1e4>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d013      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <HAL_DMA_Init+0x1e8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d00e      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a24      	ldr	r2, [pc, #144]	; (8000a54 <HAL_DMA_Init+0x1ec>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d009      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <HAL_DMA_Init+0x1f0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d004      	beq.n	80009dc <HAL_DMA_Init+0x174>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <HAL_DMA_Init+0x1f4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d108      	bne.n	80009ee <HAL_DMA_Init+0x186>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 0201 	bic.w	r2, r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e007      	b.n	80009fe <HAL_DMA_Init+0x196>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f022 0201 	bic.w	r2, r2, #1
 80009fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80009fe:	e02f      	b.n	8000a60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000a00:	f7ff fe3a 	bl	8000678 <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b05      	cmp	r3, #5
 8000a0c:	d928      	bls.n	8000a60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2220      	movs	r2, #32
 8000a12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2203      	movs	r2, #3
 8000a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e246      	b.n	8000eae <HAL_DMA_Init+0x646>
 8000a20:	40020010 	.word	0x40020010
 8000a24:	40020028 	.word	0x40020028
 8000a28:	40020040 	.word	0x40020040
 8000a2c:	40020058 	.word	0x40020058
 8000a30:	40020070 	.word	0x40020070
 8000a34:	40020088 	.word	0x40020088
 8000a38:	400200a0 	.word	0x400200a0
 8000a3c:	400200b8 	.word	0x400200b8
 8000a40:	40020410 	.word	0x40020410
 8000a44:	40020428 	.word	0x40020428
 8000a48:	40020440 	.word	0x40020440
 8000a4c:	40020458 	.word	0x40020458
 8000a50:	40020470 	.word	0x40020470
 8000a54:	40020488 	.word	0x40020488
 8000a58:	400204a0 	.word	0x400204a0
 8000a5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1c8      	bne.n	8000a00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	4b83      	ldr	r3, [pc, #524]	; (8000c88 <HAL_DMA_Init+0x420>)
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000a86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a1b      	ldr	r3, [r3, #32]
 8000aa4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d107      	bne.n	8000ac4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4313      	orrs	r3, r2
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8000ac4:	4b71      	ldr	r3, [pc, #452]	; (8000c8c <HAL_DMA_Init+0x424>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b71      	ldr	r3, [pc, #452]	; (8000c90 <HAL_DMA_Init+0x428>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ad0:	d328      	bcc.n	8000b24 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b28      	cmp	r3, #40	; 0x28
 8000ad8:	d903      	bls.n	8000ae2 <HAL_DMA_Init+0x27a>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b2e      	cmp	r3, #46	; 0x2e
 8000ae0:	d917      	bls.n	8000b12 <HAL_DMA_Init+0x2aa>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8000ae8:	d903      	bls.n	8000af2 <HAL_DMA_Init+0x28a>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b42      	cmp	r3, #66	; 0x42
 8000af0:	d90f      	bls.n	8000b12 <HAL_DMA_Init+0x2aa>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b46      	cmp	r3, #70	; 0x46
 8000af8:	d903      	bls.n	8000b02 <HAL_DMA_Init+0x29a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b48      	cmp	r3, #72	; 0x48
 8000b00:	d907      	bls.n	8000b12 <HAL_DMA_Init+0x2aa>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b4e      	cmp	r3, #78	; 0x4e
 8000b08:	d905      	bls.n	8000b16 <HAL_DMA_Init+0x2ae>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2b52      	cmp	r3, #82	; 0x52
 8000b10:	d801      	bhi.n	8000b16 <HAL_DMA_Init+0x2ae>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <HAL_DMA_Init+0x2b0>
 8000b16:	2300      	movs	r3, #0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b22:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	f023 0307 	bic.w	r3, r3, #7
 8000b3a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d117      	bne.n	8000b7e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00e      	beq.n	8000b7e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f002 fb3d 	bl	80031e0 <DMA_CheckFifoParam>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d008      	beq.n	8000b7e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2240      	movs	r2, #64	; 0x40
 8000b70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e197      	b.n	8000eae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f002 fa78 	bl	800307c <DMA_CalcBaseAndBitshift>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	223f      	movs	r2, #63	; 0x3f
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	e0cd      	b.n	8000d3e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a3b      	ldr	r2, [pc, #236]	; (8000c94 <HAL_DMA_Init+0x42c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d022      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a39      	ldr	r2, [pc, #228]	; (8000c98 <HAL_DMA_Init+0x430>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d01d      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a38      	ldr	r2, [pc, #224]	; (8000c9c <HAL_DMA_Init+0x434>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d018      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <HAL_DMA_Init+0x438>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d013      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <HAL_DMA_Init+0x43c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00e      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <HAL_DMA_Init+0x440>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d009      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a32      	ldr	r2, [pc, #200]	; (8000cac <HAL_DMA_Init+0x444>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d004      	beq.n	8000bf2 <HAL_DMA_Init+0x38a>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <HAL_DMA_Init+0x448>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_DMA_Init+0x38e>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <HAL_DMA_Init+0x390>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 8097 	beq.w	8000d2c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a24      	ldr	r2, [pc, #144]	; (8000c94 <HAL_DMA_Init+0x42c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d021      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a22      	ldr	r2, [pc, #136]	; (8000c98 <HAL_DMA_Init+0x430>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d01c      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <HAL_DMA_Init+0x434>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d017      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a1f      	ldr	r2, [pc, #124]	; (8000ca0 <HAL_DMA_Init+0x438>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d012      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_DMA_Init+0x43c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d00d      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_DMA_Init+0x440>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d008      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <HAL_DMA_Init+0x444>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d003      	beq.n	8000c4c <HAL_DMA_Init+0x3e4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_DMA_Init+0x448>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2202      	movs	r2, #2
 8000c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_DMA_Init+0x44c>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b40      	cmp	r3, #64	; 0x40
 8000c74:	d020      	beq.n	8000cb8 <HAL_DMA_Init+0x450>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b80      	cmp	r3, #128	; 0x80
 8000c7c:	d102      	bne.n	8000c84 <HAL_DMA_Init+0x41c>
 8000c7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c82:	e01a      	b.n	8000cba <HAL_DMA_Init+0x452>
 8000c84:	2300      	movs	r3, #0
 8000c86:	e018      	b.n	8000cba <HAL_DMA_Init+0x452>
 8000c88:	fe10803f 	.word	0xfe10803f
 8000c8c:	5c001000 	.word	0x5c001000
 8000c90:	ffff0000 	.word	0xffff0000
 8000c94:	58025408 	.word	0x58025408
 8000c98:	5802541c 	.word	0x5802541c
 8000c9c:	58025430 	.word	0x58025430
 8000ca0:	58025444 	.word	0x58025444
 8000ca4:	58025458 	.word	0x58025458
 8000ca8:	5802546c 	.word	0x5802546c
 8000cac:	58025480 	.word	0x58025480
 8000cb0:	58025494 	.word	0x58025494
 8000cb4:	fffe000f 	.word	0xfffe000f
 8000cb8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68d2      	ldr	r2, [r2, #12]
 8000cbe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000cc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ce8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <HAL_DMA_Init+0x650>)
 8000d00:	4413      	add	r3, r2
 8000d02:	4a6e      	ldr	r2, [pc, #440]	; (8000ebc <HAL_DMA_Init+0x654>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	009a      	lsls	r2, r3, #2
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f002 f9b3 	bl	800307c <DMA_CalcBaseAndBitshift>
 8000d16:	4603      	mov	r3, r0
 8000d18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	2201      	movs	r2, #1
 8000d24:	409a      	lsls	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	e008      	b.n	8000d3e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2240      	movs	r2, #64	; 0x40
 8000d30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2203      	movs	r2, #3
 8000d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e0b7      	b.n	8000eae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a5f      	ldr	r2, [pc, #380]	; (8000ec0 <HAL_DMA_Init+0x658>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d072      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a5d      	ldr	r2, [pc, #372]	; (8000ec4 <HAL_DMA_Init+0x65c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d06d      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a5c      	ldr	r2, [pc, #368]	; (8000ec8 <HAL_DMA_Init+0x660>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d068      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a5a      	ldr	r2, [pc, #360]	; (8000ecc <HAL_DMA_Init+0x664>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d063      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a59      	ldr	r2, [pc, #356]	; (8000ed0 <HAL_DMA_Init+0x668>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d05e      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <HAL_DMA_Init+0x66c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d059      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a56      	ldr	r2, [pc, #344]	; (8000ed8 <HAL_DMA_Init+0x670>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d054      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a54      	ldr	r2, [pc, #336]	; (8000edc <HAL_DMA_Init+0x674>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d04f      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a53      	ldr	r2, [pc, #332]	; (8000ee0 <HAL_DMA_Init+0x678>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d04a      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a51      	ldr	r2, [pc, #324]	; (8000ee4 <HAL_DMA_Init+0x67c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d045      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a50      	ldr	r2, [pc, #320]	; (8000ee8 <HAL_DMA_Init+0x680>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d040      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a4e      	ldr	r2, [pc, #312]	; (8000eec <HAL_DMA_Init+0x684>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d03b      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a4d      	ldr	r2, [pc, #308]	; (8000ef0 <HAL_DMA_Init+0x688>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d036      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a4b      	ldr	r2, [pc, #300]	; (8000ef4 <HAL_DMA_Init+0x68c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d031      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a4a      	ldr	r2, [pc, #296]	; (8000ef8 <HAL_DMA_Init+0x690>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d02c      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a48      	ldr	r2, [pc, #288]	; (8000efc <HAL_DMA_Init+0x694>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d027      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a47      	ldr	r2, [pc, #284]	; (8000f00 <HAL_DMA_Init+0x698>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d022      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <HAL_DMA_Init+0x69c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01d      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <HAL_DMA_Init+0x6a0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d018      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a42      	ldr	r2, [pc, #264]	; (8000f0c <HAL_DMA_Init+0x6a4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a41      	ldr	r2, [pc, #260]	; (8000f10 <HAL_DMA_Init+0x6a8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d00e      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a3f      	ldr	r2, [pc, #252]	; (8000f14 <HAL_DMA_Init+0x6ac>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d009      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a3e      	ldr	r2, [pc, #248]	; (8000f18 <HAL_DMA_Init+0x6b0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d004      	beq.n	8000e2e <HAL_DMA_Init+0x5c6>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a3c      	ldr	r2, [pc, #240]	; (8000f1c <HAL_DMA_Init+0x6b4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_DMA_Init+0x5ca>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_DMA_Init+0x5cc>
 8000e32:	2300      	movs	r3, #0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d032      	beq.n	8000e9e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f002 fa4d 	bl	80032d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b80      	cmp	r3, #128	; 0x80
 8000e44:	d102      	bne.n	8000e4c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000e60:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d010      	beq.n	8000e8c <HAL_DMA_Init+0x624>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d80c      	bhi.n	8000e8c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f002 faca 	bl	800340c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	e008      	b.n	8000e9e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	a7fdabf8 	.word	0xa7fdabf8
 8000ebc:	cccccccd 	.word	0xcccccccd
 8000ec0:	40020010 	.word	0x40020010
 8000ec4:	40020028 	.word	0x40020028
 8000ec8:	40020040 	.word	0x40020040
 8000ecc:	40020058 	.word	0x40020058
 8000ed0:	40020070 	.word	0x40020070
 8000ed4:	40020088 	.word	0x40020088
 8000ed8:	400200a0 	.word	0x400200a0
 8000edc:	400200b8 	.word	0x400200b8
 8000ee0:	40020410 	.word	0x40020410
 8000ee4:	40020428 	.word	0x40020428
 8000ee8:	40020440 	.word	0x40020440
 8000eec:	40020458 	.word	0x40020458
 8000ef0:	40020470 	.word	0x40020470
 8000ef4:	40020488 	.word	0x40020488
 8000ef8:	400204a0 	.word	0x400204a0
 8000efc:	400204b8 	.word	0x400204b8
 8000f00:	58025408 	.word	0x58025408
 8000f04:	5802541c 	.word	0x5802541c
 8000f08:	58025430 	.word	0x58025430
 8000f0c:	58025444 	.word	0x58025444
 8000f10:	58025458 	.word	0x58025458
 8000f14:	5802546c 	.word	0x5802546c
 8000f18:	58025480 	.word	0x58025480
 8000f1c:	58025494 	.word	0x58025494

08000f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e226      	b.n	800138a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_DMA_Start_IT+0x2a>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e21f      	b.n	800138a <HAL_DMA_Start_IT+0x46a>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	f040 820a 	bne.w	8001374 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2202      	movs	r2, #2
 8000f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a68      	ldr	r2, [pc, #416]	; (8001114 <HAL_DMA_Start_IT+0x1f4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d04a      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a66      	ldr	r2, [pc, #408]	; (8001118 <HAL_DMA_Start_IT+0x1f8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d045      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a65      	ldr	r2, [pc, #404]	; (800111c <HAL_DMA_Start_IT+0x1fc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d040      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a63      	ldr	r2, [pc, #396]	; (8001120 <HAL_DMA_Start_IT+0x200>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d03b      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a62      	ldr	r2, [pc, #392]	; (8001124 <HAL_DMA_Start_IT+0x204>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d036      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a60      	ldr	r2, [pc, #384]	; (8001128 <HAL_DMA_Start_IT+0x208>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d031      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_DMA_Start_IT+0x20c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d02c      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a5d      	ldr	r2, [pc, #372]	; (8001130 <HAL_DMA_Start_IT+0x210>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d027      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a5c      	ldr	r2, [pc, #368]	; (8001134 <HAL_DMA_Start_IT+0x214>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d022      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a5a      	ldr	r2, [pc, #360]	; (8001138 <HAL_DMA_Start_IT+0x218>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01d      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a59      	ldr	r2, [pc, #356]	; (800113c <HAL_DMA_Start_IT+0x21c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d018      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a57      	ldr	r2, [pc, #348]	; (8001140 <HAL_DMA_Start_IT+0x220>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a56      	ldr	r2, [pc, #344]	; (8001144 <HAL_DMA_Start_IT+0x224>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d00e      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a54      	ldr	r2, [pc, #336]	; (8001148 <HAL_DMA_Start_IT+0x228>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d009      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a53      	ldr	r2, [pc, #332]	; (800114c <HAL_DMA_Start_IT+0x22c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d004      	beq.n	800100e <HAL_DMA_Start_IT+0xee>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a51      	ldr	r2, [pc, #324]	; (8001150 <HAL_DMA_Start_IT+0x230>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d108      	bne.n	8001020 <HAL_DMA_Start_IT+0x100>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 0201 	bic.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e007      	b.n	8001030 <HAL_DMA_Start_IT+0x110>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f001 fe74 	bl	8002d24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a34      	ldr	r2, [pc, #208]	; (8001114 <HAL_DMA_Start_IT+0x1f4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d04a      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <HAL_DMA_Start_IT+0x1f8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d045      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a31      	ldr	r2, [pc, #196]	; (800111c <HAL_DMA_Start_IT+0x1fc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d040      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a30      	ldr	r2, [pc, #192]	; (8001120 <HAL_DMA_Start_IT+0x200>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d03b      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <HAL_DMA_Start_IT+0x204>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d036      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <HAL_DMA_Start_IT+0x208>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d031      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a2b      	ldr	r2, [pc, #172]	; (800112c <HAL_DMA_Start_IT+0x20c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d02c      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a2a      	ldr	r2, [pc, #168]	; (8001130 <HAL_DMA_Start_IT+0x210>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d027      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <HAL_DMA_Start_IT+0x214>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d022      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a27      	ldr	r2, [pc, #156]	; (8001138 <HAL_DMA_Start_IT+0x218>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d01d      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a25      	ldr	r2, [pc, #148]	; (800113c <HAL_DMA_Start_IT+0x21c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d018      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a24      	ldr	r2, [pc, #144]	; (8001140 <HAL_DMA_Start_IT+0x220>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <HAL_DMA_Start_IT+0x224>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00e      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_DMA_Start_IT+0x228>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d009      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1f      	ldr	r2, [pc, #124]	; (800114c <HAL_DMA_Start_IT+0x22c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d004      	beq.n	80010dc <HAL_DMA_Start_IT+0x1bc>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <HAL_DMA_Start_IT+0x230>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d101      	bne.n	80010e0 <HAL_DMA_Start_IT+0x1c0>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_DMA_Start_IT+0x1c2>
 80010e0:	2300      	movs	r3, #0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d036      	beq.n	8001154 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 021e 	bic.w	r2, r3, #30
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0216 	orr.w	r2, r2, #22
 80010f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d03e      	beq.n	8001180 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0208 	orr.w	r2, r2, #8
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e035      	b.n	8001180 <HAL_DMA_Start_IT+0x260>
 8001114:	40020010 	.word	0x40020010
 8001118:	40020028 	.word	0x40020028
 800111c:	40020040 	.word	0x40020040
 8001120:	40020058 	.word	0x40020058
 8001124:	40020070 	.word	0x40020070
 8001128:	40020088 	.word	0x40020088
 800112c:	400200a0 	.word	0x400200a0
 8001130:	400200b8 	.word	0x400200b8
 8001134:	40020410 	.word	0x40020410
 8001138:	40020428 	.word	0x40020428
 800113c:	40020440 	.word	0x40020440
 8001140:	40020458 	.word	0x40020458
 8001144:	40020470 	.word	0x40020470
 8001148:	40020488 	.word	0x40020488
 800114c:	400204a0 	.word	0x400204a0
 8001150:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 020e 	bic.w	r2, r3, #14
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 020a 	orr.w	r2, r2, #10
 8001166:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0204 	orr.w	r2, r2, #4
 800117e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a83      	ldr	r2, [pc, #524]	; (8001394 <HAL_DMA_Start_IT+0x474>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d072      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a82      	ldr	r2, [pc, #520]	; (8001398 <HAL_DMA_Start_IT+0x478>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d06d      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a80      	ldr	r2, [pc, #512]	; (800139c <HAL_DMA_Start_IT+0x47c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d068      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a7f      	ldr	r2, [pc, #508]	; (80013a0 <HAL_DMA_Start_IT+0x480>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d063      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a7d      	ldr	r2, [pc, #500]	; (80013a4 <HAL_DMA_Start_IT+0x484>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d05e      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a7c      	ldr	r2, [pc, #496]	; (80013a8 <HAL_DMA_Start_IT+0x488>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d059      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a7a      	ldr	r2, [pc, #488]	; (80013ac <HAL_DMA_Start_IT+0x48c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d054      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a79      	ldr	r2, [pc, #484]	; (80013b0 <HAL_DMA_Start_IT+0x490>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d04f      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a77      	ldr	r2, [pc, #476]	; (80013b4 <HAL_DMA_Start_IT+0x494>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d04a      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a76      	ldr	r2, [pc, #472]	; (80013b8 <HAL_DMA_Start_IT+0x498>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d045      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a74      	ldr	r2, [pc, #464]	; (80013bc <HAL_DMA_Start_IT+0x49c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d040      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a73      	ldr	r2, [pc, #460]	; (80013c0 <HAL_DMA_Start_IT+0x4a0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d03b      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a71      	ldr	r2, [pc, #452]	; (80013c4 <HAL_DMA_Start_IT+0x4a4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d036      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a70      	ldr	r2, [pc, #448]	; (80013c8 <HAL_DMA_Start_IT+0x4a8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d031      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_DMA_Start_IT+0x4ac>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d02c      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6d      	ldr	r2, [pc, #436]	; (80013d0 <HAL_DMA_Start_IT+0x4b0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d027      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6b      	ldr	r2, [pc, #428]	; (80013d4 <HAL_DMA_Start_IT+0x4b4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d022      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6a      	ldr	r2, [pc, #424]	; (80013d8 <HAL_DMA_Start_IT+0x4b8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d01d      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a68      	ldr	r2, [pc, #416]	; (80013dc <HAL_DMA_Start_IT+0x4bc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d018      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a67      	ldr	r2, [pc, #412]	; (80013e0 <HAL_DMA_Start_IT+0x4c0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d013      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a65      	ldr	r2, [pc, #404]	; (80013e4 <HAL_DMA_Start_IT+0x4c4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00e      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a64      	ldr	r2, [pc, #400]	; (80013e8 <HAL_DMA_Start_IT+0x4c8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d009      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a62      	ldr	r2, [pc, #392]	; (80013ec <HAL_DMA_Start_IT+0x4cc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d004      	beq.n	8001270 <HAL_DMA_Start_IT+0x350>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a61      	ldr	r2, [pc, #388]	; (80013f0 <HAL_DMA_Start_IT+0x4d0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_DMA_Start_IT+0x354>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <HAL_DMA_Start_IT+0x356>
 8001274:	2300      	movs	r3, #0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d01a      	beq.n	80012b0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001296:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a37      	ldr	r2, [pc, #220]	; (8001394 <HAL_DMA_Start_IT+0x474>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d04a      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a36      	ldr	r2, [pc, #216]	; (8001398 <HAL_DMA_Start_IT+0x478>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d045      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a34      	ldr	r2, [pc, #208]	; (800139c <HAL_DMA_Start_IT+0x47c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d040      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a33      	ldr	r2, [pc, #204]	; (80013a0 <HAL_DMA_Start_IT+0x480>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d03b      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a31      	ldr	r2, [pc, #196]	; (80013a4 <HAL_DMA_Start_IT+0x484>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d036      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <HAL_DMA_Start_IT+0x488>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d031      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <HAL_DMA_Start_IT+0x48c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d02c      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a2d      	ldr	r2, [pc, #180]	; (80013b0 <HAL_DMA_Start_IT+0x490>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d027      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a2b      	ldr	r2, [pc, #172]	; (80013b4 <HAL_DMA_Start_IT+0x494>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d022      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <HAL_DMA_Start_IT+0x498>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d01d      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_DMA_Start_IT+0x49c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d018      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <HAL_DMA_Start_IT+0x4a0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d013      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <HAL_DMA_Start_IT+0x4a4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00e      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <HAL_DMA_Start_IT+0x4a8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d009      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_DMA_Start_IT+0x4ac>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d004      	beq.n	8001350 <HAL_DMA_Start_IT+0x430>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_DMA_Start_IT+0x4b0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d108      	bne.n	8001362 <HAL_DMA_Start_IT+0x442>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e012      	b.n	8001388 <HAL_DMA_Start_IT+0x468>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e009      	b.n	8001388 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001388:	7dfb      	ldrb	r3, [r7, #23]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020010 	.word	0x40020010
 8001398:	40020028 	.word	0x40020028
 800139c:	40020040 	.word	0x40020040
 80013a0:	40020058 	.word	0x40020058
 80013a4:	40020070 	.word	0x40020070
 80013a8:	40020088 	.word	0x40020088
 80013ac:	400200a0 	.word	0x400200a0
 80013b0:	400200b8 	.word	0x400200b8
 80013b4:	40020410 	.word	0x40020410
 80013b8:	40020428 	.word	0x40020428
 80013bc:	40020440 	.word	0x40020440
 80013c0:	40020458 	.word	0x40020458
 80013c4:	40020470 	.word	0x40020470
 80013c8:	40020488 	.word	0x40020488
 80013cc:	400204a0 	.word	0x400204a0
 80013d0:	400204b8 	.word	0x400204b8
 80013d4:	58025408 	.word	0x58025408
 80013d8:	5802541c 	.word	0x5802541c
 80013dc:	58025430 	.word	0x58025430
 80013e0:	58025444 	.word	0x58025444
 80013e4:	58025458 	.word	0x58025458
 80013e8:	5802546c 	.word	0x5802546c
 80013ec:	58025480 	.word	0x58025480
 80013f0:	58025494 	.word	0x58025494

080013f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff f93c 	bl	8000678 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e2dc      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d008      	beq.n	800142a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e2cd      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a76      	ldr	r2, [pc, #472]	; (8001608 <HAL_DMA_Abort+0x214>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d04a      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a74      	ldr	r2, [pc, #464]	; (800160c <HAL_DMA_Abort+0x218>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d045      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a73      	ldr	r2, [pc, #460]	; (8001610 <HAL_DMA_Abort+0x21c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d040      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a71      	ldr	r2, [pc, #452]	; (8001614 <HAL_DMA_Abort+0x220>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d03b      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a70      	ldr	r2, [pc, #448]	; (8001618 <HAL_DMA_Abort+0x224>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d036      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a6e      	ldr	r2, [pc, #440]	; (800161c <HAL_DMA_Abort+0x228>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d031      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6d      	ldr	r2, [pc, #436]	; (8001620 <HAL_DMA_Abort+0x22c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d02c      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6b      	ldr	r2, [pc, #428]	; (8001624 <HAL_DMA_Abort+0x230>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d027      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6a      	ldr	r2, [pc, #424]	; (8001628 <HAL_DMA_Abort+0x234>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a68      	ldr	r2, [pc, #416]	; (800162c <HAL_DMA_Abort+0x238>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01d      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a67      	ldr	r2, [pc, #412]	; (8001630 <HAL_DMA_Abort+0x23c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d018      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_DMA_Abort+0x240>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a64      	ldr	r2, [pc, #400]	; (8001638 <HAL_DMA_Abort+0x244>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00e      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a62      	ldr	r2, [pc, #392]	; (800163c <HAL_DMA_Abort+0x248>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d009      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a61      	ldr	r2, [pc, #388]	; (8001640 <HAL_DMA_Abort+0x24c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d004      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a5f      	ldr	r2, [pc, #380]	; (8001644 <HAL_DMA_Abort+0x250>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_DMA_Abort+0xda>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_DMA_Abort+0xdc>
 80014ce:	2300      	movs	r3, #0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 021e 	bic.w	r2, r2, #30
 80014e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e00a      	b.n	8001512 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 020e 	bic.w	r2, r2, #14
 800150a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <HAL_DMA_Abort+0x214>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d072      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a3a      	ldr	r2, [pc, #232]	; (800160c <HAL_DMA_Abort+0x218>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d06d      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a39      	ldr	r2, [pc, #228]	; (8001610 <HAL_DMA_Abort+0x21c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d068      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a37      	ldr	r2, [pc, #220]	; (8001614 <HAL_DMA_Abort+0x220>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d063      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a36      	ldr	r2, [pc, #216]	; (8001618 <HAL_DMA_Abort+0x224>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d05e      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a34      	ldr	r2, [pc, #208]	; (800161c <HAL_DMA_Abort+0x228>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d059      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a33      	ldr	r2, [pc, #204]	; (8001620 <HAL_DMA_Abort+0x22c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d054      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a31      	ldr	r2, [pc, #196]	; (8001624 <HAL_DMA_Abort+0x230>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d04f      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a30      	ldr	r2, [pc, #192]	; (8001628 <HAL_DMA_Abort+0x234>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d04a      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2e      	ldr	r2, [pc, #184]	; (800162c <HAL_DMA_Abort+0x238>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d045      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <HAL_DMA_Abort+0x23c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d040      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <HAL_DMA_Abort+0x240>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d03b      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <HAL_DMA_Abort+0x244>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d036      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a28      	ldr	r2, [pc, #160]	; (800163c <HAL_DMA_Abort+0x248>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d031      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a27      	ldr	r2, [pc, #156]	; (8001640 <HAL_DMA_Abort+0x24c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d02c      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a25      	ldr	r2, [pc, #148]	; (8001644 <HAL_DMA_Abort+0x250>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d027      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_DMA_Abort+0x254>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d022      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a22      	ldr	r2, [pc, #136]	; (800164c <HAL_DMA_Abort+0x258>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01d      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <HAL_DMA_Abort+0x25c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d018      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_DMA_Abort+0x260>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_DMA_Abort+0x264>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00e      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_DMA_Abort+0x268>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d009      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_DMA_Abort+0x26c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_DMA_Abort+0x270>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d132      	bne.n	8001668 <HAL_DMA_Abort+0x274>
 8001602:	2301      	movs	r3, #1
 8001604:	e031      	b.n	800166a <HAL_DMA_Abort+0x276>
 8001606:	bf00      	nop
 8001608:	40020010 	.word	0x40020010
 800160c:	40020028 	.word	0x40020028
 8001610:	40020040 	.word	0x40020040
 8001614:	40020058 	.word	0x40020058
 8001618:	40020070 	.word	0x40020070
 800161c:	40020088 	.word	0x40020088
 8001620:	400200a0 	.word	0x400200a0
 8001624:	400200b8 	.word	0x400200b8
 8001628:	40020410 	.word	0x40020410
 800162c:	40020428 	.word	0x40020428
 8001630:	40020440 	.word	0x40020440
 8001634:	40020458 	.word	0x40020458
 8001638:	40020470 	.word	0x40020470
 800163c:	40020488 	.word	0x40020488
 8001640:	400204a0 	.word	0x400204a0
 8001644:	400204b8 	.word	0x400204b8
 8001648:	58025408 	.word	0x58025408
 800164c:	5802541c 	.word	0x5802541c
 8001650:	58025430 	.word	0x58025430
 8001654:	58025444 	.word	0x58025444
 8001658:	58025458 	.word	0x58025458
 800165c:	5802546c 	.word	0x5802546c
 8001660:	58025480 	.word	0x58025480
 8001664:	58025494 	.word	0x58025494
 8001668:	2300      	movs	r3, #0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800167c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6d      	ldr	r2, [pc, #436]	; (8001838 <HAL_DMA_Abort+0x444>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d04a      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a6b      	ldr	r2, [pc, #428]	; (800183c <HAL_DMA_Abort+0x448>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d045      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6a      	ldr	r2, [pc, #424]	; (8001840 <HAL_DMA_Abort+0x44c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d040      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a68      	ldr	r2, [pc, #416]	; (8001844 <HAL_DMA_Abort+0x450>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d03b      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a67      	ldr	r2, [pc, #412]	; (8001848 <HAL_DMA_Abort+0x454>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d036      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a65      	ldr	r2, [pc, #404]	; (800184c <HAL_DMA_Abort+0x458>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d031      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a64      	ldr	r2, [pc, #400]	; (8001850 <HAL_DMA_Abort+0x45c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d02c      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a62      	ldr	r2, [pc, #392]	; (8001854 <HAL_DMA_Abort+0x460>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d027      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a61      	ldr	r2, [pc, #388]	; (8001858 <HAL_DMA_Abort+0x464>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d022      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a5f      	ldr	r2, [pc, #380]	; (800185c <HAL_DMA_Abort+0x468>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01d      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5e      	ldr	r2, [pc, #376]	; (8001860 <HAL_DMA_Abort+0x46c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d018      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5c      	ldr	r2, [pc, #368]	; (8001864 <HAL_DMA_Abort+0x470>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5b      	ldr	r2, [pc, #364]	; (8001868 <HAL_DMA_Abort+0x474>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d00e      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a59      	ldr	r2, [pc, #356]	; (800186c <HAL_DMA_Abort+0x478>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d009      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_DMA_Abort+0x47c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d004      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a56      	ldr	r2, [pc, #344]	; (8001874 <HAL_DMA_Abort+0x480>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d108      	bne.n	8001730 <HAL_DMA_Abort+0x33c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e007      	b.n	8001740 <HAL_DMA_Abort+0x34c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001740:	e013      	b.n	800176a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001742:	f7fe ff99 	bl	8000678 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b05      	cmp	r3, #5
 800174e:	d90c      	bls.n	800176a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2220      	movs	r2, #32
 8001754:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e12d      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1e5      	bne.n	8001742 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <HAL_DMA_Abort+0x444>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d04a      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a2d      	ldr	r2, [pc, #180]	; (800183c <HAL_DMA_Abort+0x448>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d045      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <HAL_DMA_Abort+0x44c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d040      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2a      	ldr	r2, [pc, #168]	; (8001844 <HAL_DMA_Abort+0x450>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d03b      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_DMA_Abort+0x454>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d036      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <HAL_DMA_Abort+0x458>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d031      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a26      	ldr	r2, [pc, #152]	; (8001850 <HAL_DMA_Abort+0x45c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d02c      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a24      	ldr	r2, [pc, #144]	; (8001854 <HAL_DMA_Abort+0x460>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d027      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_DMA_Abort+0x464>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d022      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a21      	ldr	r2, [pc, #132]	; (800185c <HAL_DMA_Abort+0x468>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01d      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a20      	ldr	r2, [pc, #128]	; (8001860 <HAL_DMA_Abort+0x46c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d018      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_DMA_Abort+0x470>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_DMA_Abort+0x474>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00e      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_DMA_Abort+0x478>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d009      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_DMA_Abort+0x47c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d004      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <HAL_DMA_Abort+0x480>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_DMA_Abort+0x426>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_DMA_Abort+0x428>
 800181a:	2300      	movs	r3, #0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02b      	beq.n	8001878 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	223f      	movs	r2, #63	; 0x3f
 8001830:	409a      	lsls	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	e02a      	b.n	800188e <HAL_DMA_Abort+0x49a>
 8001838:	40020010 	.word	0x40020010
 800183c:	40020028 	.word	0x40020028
 8001840:	40020040 	.word	0x40020040
 8001844:	40020058 	.word	0x40020058
 8001848:	40020070 	.word	0x40020070
 800184c:	40020088 	.word	0x40020088
 8001850:	400200a0 	.word	0x400200a0
 8001854:	400200b8 	.word	0x400200b8
 8001858:	40020410 	.word	0x40020410
 800185c:	40020428 	.word	0x40020428
 8001860:	40020440 	.word	0x40020440
 8001864:	40020458 	.word	0x40020458
 8001868:	40020470 	.word	0x40020470
 800186c:	40020488 	.word	0x40020488
 8001870:	400204a0 	.word	0x400204a0
 8001874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	2201      	movs	r2, #1
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_DMA_Abort+0x5dc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d072      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4d      	ldr	r2, [pc, #308]	; (80019d4 <HAL_DMA_Abort+0x5e0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d06d      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_DMA_Abort+0x5e4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d068      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a4a      	ldr	r2, [pc, #296]	; (80019dc <HAL_DMA_Abort+0x5e8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d063      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a49      	ldr	r2, [pc, #292]	; (80019e0 <HAL_DMA_Abort+0x5ec>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d05e      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_DMA_Abort+0x5f0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d059      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_DMA_Abort+0x5f4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d054      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a44      	ldr	r2, [pc, #272]	; (80019ec <HAL_DMA_Abort+0x5f8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d04f      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a43      	ldr	r2, [pc, #268]	; (80019f0 <HAL_DMA_Abort+0x5fc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04a      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a41      	ldr	r2, [pc, #260]	; (80019f4 <HAL_DMA_Abort+0x600>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d045      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a40      	ldr	r2, [pc, #256]	; (80019f8 <HAL_DMA_Abort+0x604>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d040      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <HAL_DMA_Abort+0x608>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d03b      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <HAL_DMA_Abort+0x60c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d036      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3b      	ldr	r2, [pc, #236]	; (8001a04 <HAL_DMA_Abort+0x610>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d031      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <HAL_DMA_Abort+0x614>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d02c      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_DMA_Abort+0x618>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d027      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a37      	ldr	r2, [pc, #220]	; (8001a10 <HAL_DMA_Abort+0x61c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d022      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a35      	ldr	r2, [pc, #212]	; (8001a14 <HAL_DMA_Abort+0x620>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01d      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <HAL_DMA_Abort+0x624>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d018      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a32      	ldr	r2, [pc, #200]	; (8001a1c <HAL_DMA_Abort+0x628>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <HAL_DMA_Abort+0x62c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00e      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_DMA_Abort+0x630>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d009      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <HAL_DMA_Abort+0x634>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d004      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <HAL_DMA_Abort+0x638>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_DMA_Abort+0x58e>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_DMA_Abort+0x590>
 8001982:	2300      	movs	r3, #0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d015      	beq.n	80019b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001990:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40020010 	.word	0x40020010
 80019d4:	40020028 	.word	0x40020028
 80019d8:	40020040 	.word	0x40020040
 80019dc:	40020058 	.word	0x40020058
 80019e0:	40020070 	.word	0x40020070
 80019e4:	40020088 	.word	0x40020088
 80019e8:	400200a0 	.word	0x400200a0
 80019ec:	400200b8 	.word	0x400200b8
 80019f0:	40020410 	.word	0x40020410
 80019f4:	40020428 	.word	0x40020428
 80019f8:	40020440 	.word	0x40020440
 80019fc:	40020458 	.word	0x40020458
 8001a00:	40020470 	.word	0x40020470
 8001a04:	40020488 	.word	0x40020488
 8001a08:	400204a0 	.word	0x400204a0
 8001a0c:	400204b8 	.word	0x400204b8
 8001a10:	58025408 	.word	0x58025408
 8001a14:	5802541c 	.word	0x5802541c
 8001a18:	58025430 	.word	0x58025430
 8001a1c:	58025444 	.word	0x58025444
 8001a20:	58025458 	.word	0x58025458
 8001a24:	5802546c 	.word	0x5802546c
 8001a28:	58025480 	.word	0x58025480
 8001a2c:	58025494 	.word	0x58025494

08001a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e205      	b.n	8001e4e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d004      	beq.n	8001a58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e1fa      	b.n	8001e4e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a8c      	ldr	r2, [pc, #560]	; (8001c90 <HAL_DMA_Abort_IT+0x260>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d04a      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a8b      	ldr	r2, [pc, #556]	; (8001c94 <HAL_DMA_Abort_IT+0x264>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d045      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a89      	ldr	r2, [pc, #548]	; (8001c98 <HAL_DMA_Abort_IT+0x268>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d040      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a88      	ldr	r2, [pc, #544]	; (8001c9c <HAL_DMA_Abort_IT+0x26c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d03b      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a86      	ldr	r2, [pc, #536]	; (8001ca0 <HAL_DMA_Abort_IT+0x270>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d036      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a85      	ldr	r2, [pc, #532]	; (8001ca4 <HAL_DMA_Abort_IT+0x274>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d031      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a83      	ldr	r2, [pc, #524]	; (8001ca8 <HAL_DMA_Abort_IT+0x278>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d02c      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a82      	ldr	r2, [pc, #520]	; (8001cac <HAL_DMA_Abort_IT+0x27c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d027      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a80      	ldr	r2, [pc, #512]	; (8001cb0 <HAL_DMA_Abort_IT+0x280>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d022      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a7f      	ldr	r2, [pc, #508]	; (8001cb4 <HAL_DMA_Abort_IT+0x284>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d01d      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a7d      	ldr	r2, [pc, #500]	; (8001cb8 <HAL_DMA_Abort_IT+0x288>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d018      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7c      	ldr	r2, [pc, #496]	; (8001cbc <HAL_DMA_Abort_IT+0x28c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d013      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a7a      	ldr	r2, [pc, #488]	; (8001cc0 <HAL_DMA_Abort_IT+0x290>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00e      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a79      	ldr	r2, [pc, #484]	; (8001cc4 <HAL_DMA_Abort_IT+0x294>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d009      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a77      	ldr	r2, [pc, #476]	; (8001cc8 <HAL_DMA_Abort_IT+0x298>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d004      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a76      	ldr	r2, [pc, #472]	; (8001ccc <HAL_DMA_Abort_IT+0x29c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_DMA_Abort_IT+0xcc>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_DMA_Abort_IT+0xce>
 8001afc:	2300      	movs	r3, #0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d065      	beq.n	8001bce <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2204      	movs	r2, #4
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a60      	ldr	r2, [pc, #384]	; (8001c90 <HAL_DMA_Abort_IT+0x260>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d04a      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a5e      	ldr	r2, [pc, #376]	; (8001c94 <HAL_DMA_Abort_IT+0x264>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d045      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_DMA_Abort_IT+0x268>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d040      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <HAL_DMA_Abort_IT+0x26c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d03b      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a5a      	ldr	r2, [pc, #360]	; (8001ca0 <HAL_DMA_Abort_IT+0x270>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d036      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_DMA_Abort_IT+0x274>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d031      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_DMA_Abort_IT+0x278>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d02c      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a55      	ldr	r2, [pc, #340]	; (8001cac <HAL_DMA_Abort_IT+0x27c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d027      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a54      	ldr	r2, [pc, #336]	; (8001cb0 <HAL_DMA_Abort_IT+0x280>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d022      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_DMA_Abort_IT+0x284>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01d      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a51      	ldr	r2, [pc, #324]	; (8001cb8 <HAL_DMA_Abort_IT+0x288>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d018      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_DMA_Abort_IT+0x28c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <HAL_DMA_Abort_IT+0x290>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00e      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a4c      	ldr	r2, [pc, #304]	; (8001cc4 <HAL_DMA_Abort_IT+0x294>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d009      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a4b      	ldr	r2, [pc, #300]	; (8001cc8 <HAL_DMA_Abort_IT+0x298>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d004      	beq.n	8001baa <HAL_DMA_Abort_IT+0x17a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_DMA_Abort_IT+0x29c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d108      	bne.n	8001bbc <HAL_DMA_Abort_IT+0x18c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	e147      	b.n	8001e4c <HAL_DMA_Abort_IT+0x41c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e13e      	b.n	8001e4c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 020e 	bic.w	r2, r2, #14
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <HAL_DMA_Abort_IT+0x260>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d04a      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a29      	ldr	r2, [pc, #164]	; (8001c94 <HAL_DMA_Abort_IT+0x264>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d045      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a28      	ldr	r2, [pc, #160]	; (8001c98 <HAL_DMA_Abort_IT+0x268>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d040      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a26      	ldr	r2, [pc, #152]	; (8001c9c <HAL_DMA_Abort_IT+0x26c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d03b      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <HAL_DMA_Abort_IT+0x270>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d036      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_DMA_Abort_IT+0x274>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d031      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <HAL_DMA_Abort_IT+0x278>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d02c      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <HAL_DMA_Abort_IT+0x27c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d027      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_DMA_Abort_IT+0x280>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d022      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_DMA_Abort_IT+0x284>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01d      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_DMA_Abort_IT+0x288>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d018      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_DMA_Abort_IT+0x28c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_DMA_Abort_IT+0x290>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00e      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_DMA_Abort_IT+0x294>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_DMA_Abort_IT+0x298>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d004      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x24e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_DMA_Abort_IT+0x29c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d128      	bne.n	8001cd0 <HAL_DMA_Abort_IT+0x2a0>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e027      	b.n	8001ce0 <HAL_DMA_Abort_IT+0x2b0>
 8001c90:	40020010 	.word	0x40020010
 8001c94:	40020028 	.word	0x40020028
 8001c98:	40020040 	.word	0x40020040
 8001c9c:	40020058 	.word	0x40020058
 8001ca0:	40020070 	.word	0x40020070
 8001ca4:	40020088 	.word	0x40020088
 8001ca8:	400200a0 	.word	0x400200a0
 8001cac:	400200b8 	.word	0x400200b8
 8001cb0:	40020410 	.word	0x40020410
 8001cb4:	40020428 	.word	0x40020428
 8001cb8:	40020440 	.word	0x40020440
 8001cbc:	40020458 	.word	0x40020458
 8001cc0:	40020470 	.word	0x40020470
 8001cc4:	40020488 	.word	0x40020488
 8001cc8:	400204a0 	.word	0x400204a0
 8001ccc:	400204b8 	.word	0x400204b8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_DMA_Abort_IT+0x428>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d072      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <HAL_DMA_Abort_IT+0x42c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d06d      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <HAL_DMA_Abort_IT+0x430>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d068      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_DMA_Abort_IT+0x434>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d063      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_DMA_Abort_IT+0x438>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d05e      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a55      	ldr	r2, [pc, #340]	; (8001e6c <HAL_DMA_Abort_IT+0x43c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d059      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_DMA_Abort_IT+0x440>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d054      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_DMA_Abort_IT+0x444>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d04f      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <HAL_DMA_Abort_IT+0x448>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d04a      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_DMA_Abort_IT+0x44c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d045      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_DMA_Abort_IT+0x450>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d040      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <HAL_DMA_Abort_IT+0x454>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d03b      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a4a      	ldr	r2, [pc, #296]	; (8001e88 <HAL_DMA_Abort_IT+0x458>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d036      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a49      	ldr	r2, [pc, #292]	; (8001e8c <HAL_DMA_Abort_IT+0x45c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d031      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_DMA_Abort_IT+0x460>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02c      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a46      	ldr	r2, [pc, #280]	; (8001e94 <HAL_DMA_Abort_IT+0x464>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d027      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a44      	ldr	r2, [pc, #272]	; (8001e98 <HAL_DMA_Abort_IT+0x468>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d022      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <HAL_DMA_Abort_IT+0x46c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d01d      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a41      	ldr	r2, [pc, #260]	; (8001ea0 <HAL_DMA_Abort_IT+0x470>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d018      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a40      	ldr	r2, [pc, #256]	; (8001ea4 <HAL_DMA_Abort_IT+0x474>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <HAL_DMA_Abort_IT+0x478>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00e      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a3d      	ldr	r2, [pc, #244]	; (8001eac <HAL_DMA_Abort_IT+0x47c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_DMA_Abort_IT+0x480>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x3a0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <HAL_DMA_Abort_IT+0x484>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_DMA_Abort_IT+0x3a4>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_DMA_Abort_IT+0x3a6>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d028      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2201      	movs	r2, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e08:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00c      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e20:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e2a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40020010 	.word	0x40020010
 8001e5c:	40020028 	.word	0x40020028
 8001e60:	40020040 	.word	0x40020040
 8001e64:	40020058 	.word	0x40020058
 8001e68:	40020070 	.word	0x40020070
 8001e6c:	40020088 	.word	0x40020088
 8001e70:	400200a0 	.word	0x400200a0
 8001e74:	400200b8 	.word	0x400200b8
 8001e78:	40020410 	.word	0x40020410
 8001e7c:	40020428 	.word	0x40020428
 8001e80:	40020440 	.word	0x40020440
 8001e84:	40020458 	.word	0x40020458
 8001e88:	40020470 	.word	0x40020470
 8001e8c:	40020488 	.word	0x40020488
 8001e90:	400204a0 	.word	0x400204a0
 8001e94:	400204b8 	.word	0x400204b8
 8001e98:	58025408 	.word	0x58025408
 8001e9c:	5802541c 	.word	0x5802541c
 8001ea0:	58025430 	.word	0x58025430
 8001ea4:	58025444 	.word	0x58025444
 8001ea8:	58025458 	.word	0x58025458
 8001eac:	5802546c 	.word	0x5802546c
 8001eb0:	58025480 	.word	0x58025480
 8001eb4:	58025494 	.word	0x58025494

08001eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec4:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_DMA_IRQHandler+0x1ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	; (8002068 <HAL_DMA_IRQHandler+0x1b0>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0a9b      	lsrs	r3, r3, #10
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5f      	ldr	r2, [pc, #380]	; (800206c <HAL_DMA_IRQHandler+0x1b4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d04a      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <HAL_DMA_IRQHandler+0x1b8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d045      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5c      	ldr	r2, [pc, #368]	; (8002074 <HAL_DMA_IRQHandler+0x1bc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d040      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a5a      	ldr	r2, [pc, #360]	; (8002078 <HAL_DMA_IRQHandler+0x1c0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d03b      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a59      	ldr	r2, [pc, #356]	; (800207c <HAL_DMA_IRQHandler+0x1c4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d036      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a57      	ldr	r2, [pc, #348]	; (8002080 <HAL_DMA_IRQHandler+0x1c8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d031      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_DMA_IRQHandler+0x1cc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d02c      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a54      	ldr	r2, [pc, #336]	; (8002088 <HAL_DMA_IRQHandler+0x1d0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d027      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a53      	ldr	r2, [pc, #332]	; (800208c <HAL_DMA_IRQHandler+0x1d4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d022      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_DMA_IRQHandler+0x1d8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01d      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_DMA_IRQHandler+0x1dc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d018      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a4e      	ldr	r2, [pc, #312]	; (8002098 <HAL_DMA_IRQHandler+0x1e0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a4d      	ldr	r2, [pc, #308]	; (800209c <HAL_DMA_IRQHandler+0x1e4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00e      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4b      	ldr	r2, [pc, #300]	; (80020a0 <HAL_DMA_IRQHandler+0x1e8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_DMA_IRQHandler+0x1ec>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a48      	ldr	r2, [pc, #288]	; (80020a8 <HAL_DMA_IRQHandler+0x1f0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_IRQHandler+0xd6>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_DMA_IRQHandler+0xd8>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 842b 	beq.w	80027ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80a2 	beq.w	80020f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2e      	ldr	r2, [pc, #184]	; (800206c <HAL_DMA_IRQHandler+0x1b4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d04a      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2d      	ldr	r2, [pc, #180]	; (8002070 <HAL_DMA_IRQHandler+0x1b8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d045      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	; (8002074 <HAL_DMA_IRQHandler+0x1bc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d040      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <HAL_DMA_IRQHandler+0x1c0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d03b      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_DMA_IRQHandler+0x1c4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d036      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_DMA_IRQHandler+0x1c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d031      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a25      	ldr	r2, [pc, #148]	; (8002084 <HAL_DMA_IRQHandler+0x1cc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02c      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a24      	ldr	r2, [pc, #144]	; (8002088 <HAL_DMA_IRQHandler+0x1d0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d027      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_DMA_IRQHandler+0x1d4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d022      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_DMA_IRQHandler+0x1d8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d01d      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_DMA_IRQHandler+0x1dc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d018      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_DMA_IRQHandler+0x1e0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_DMA_IRQHandler+0x1e4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00e      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_DMA_IRQHandler+0x1e8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_DMA_IRQHandler+0x1ec>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d004      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_DMA_IRQHandler+0x1f0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d12f      	bne.n	80020ac <HAL_DMA_IRQHandler+0x1f4>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e02e      	b.n	80020c0 <HAL_DMA_IRQHandler+0x208>
 8002062:	bf00      	nop
 8002064:	2400000c 	.word	0x2400000c
 8002068:	1b4e81b5 	.word	0x1b4e81b5
 800206c:	40020010 	.word	0x40020010
 8002070:	40020028 	.word	0x40020028
 8002074:	40020040 	.word	0x40020040
 8002078:	40020058 	.word	0x40020058
 800207c:	40020070 	.word	0x40020070
 8002080:	40020088 	.word	0x40020088
 8002084:	400200a0 	.word	0x400200a0
 8002088:	400200b8 	.word	0x400200b8
 800208c:	40020410 	.word	0x40020410
 8002090:	40020428 	.word	0x40020428
 8002094:	40020440 	.word	0x40020440
 8002098:	40020458 	.word	0x40020458
 800209c:	40020470 	.word	0x40020470
 80020a0:	40020488 	.word	0x40020488
 80020a4:	400204a0 	.word	0x400204a0
 80020a8:	400204b8 	.word	0x400204b8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2208      	movs	r2, #8
 80020de:	409a      	lsls	r2, r3
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d06e      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a69      	ldr	r2, [pc, #420]	; (80022b0 <HAL_DMA_IRQHandler+0x3f8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d04a      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a67      	ldr	r2, [pc, #412]	; (80022b4 <HAL_DMA_IRQHandler+0x3fc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d045      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_DMA_IRQHandler+0x400>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d040      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a64      	ldr	r2, [pc, #400]	; (80022bc <HAL_DMA_IRQHandler+0x404>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d03b      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_DMA_IRQHandler+0x408>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d036      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a61      	ldr	r2, [pc, #388]	; (80022c4 <HAL_DMA_IRQHandler+0x40c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d031      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a60      	ldr	r2, [pc, #384]	; (80022c8 <HAL_DMA_IRQHandler+0x410>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d02c      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a5e      	ldr	r2, [pc, #376]	; (80022cc <HAL_DMA_IRQHandler+0x414>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d027      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5d      	ldr	r2, [pc, #372]	; (80022d0 <HAL_DMA_IRQHandler+0x418>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <HAL_DMA_IRQHandler+0x41c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01d      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <HAL_DMA_IRQHandler+0x420>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d018      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_DMA_IRQHandler+0x424>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_DMA_IRQHandler+0x428>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_DMA_IRQHandler+0x42c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a54      	ldr	r2, [pc, #336]	; (80022e8 <HAL_DMA_IRQHandler+0x430>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d004      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a52      	ldr	r2, [pc, #328]	; (80022ec <HAL_DMA_IRQHandler+0x434>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10a      	bne.n	80021bc <HAL_DMA_IRQHandler+0x304>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e003      	b.n	80021c4 <HAL_DMA_IRQHandler+0x30c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2201      	movs	r2, #1
 80021d2:	409a      	lsls	r2, r3
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0202 	orr.w	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2204      	movs	r2, #4
 80021ee:	409a      	lsls	r2, r3
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 808f 	beq.w	8002318 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <HAL_DMA_IRQHandler+0x3f8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04a      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <HAL_DMA_IRQHandler+0x3fc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d045      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a29      	ldr	r2, [pc, #164]	; (80022b8 <HAL_DMA_IRQHandler+0x400>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d040      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_DMA_IRQHandler+0x404>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d03b      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <HAL_DMA_IRQHandler+0x408>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d036      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_DMA_IRQHandler+0x40c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <HAL_DMA_IRQHandler+0x410>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d02c      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_DMA_IRQHandler+0x414>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d027      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <HAL_DMA_IRQHandler+0x418>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_DMA_IRQHandler+0x41c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_DMA_IRQHandler+0x420>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d018      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_DMA_IRQHandler+0x424>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_DMA_IRQHandler+0x428>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_DMA_IRQHandler+0x42c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_DMA_IRQHandler+0x430>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a15      	ldr	r2, [pc, #84]	; (80022ec <HAL_DMA_IRQHandler+0x434>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12a      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x438>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e023      	b.n	80022f8 <HAL_DMA_IRQHandler+0x440>
 80022b0:	40020010 	.word	0x40020010
 80022b4:	40020028 	.word	0x40020028
 80022b8:	40020040 	.word	0x40020040
 80022bc:	40020058 	.word	0x40020058
 80022c0:	40020070 	.word	0x40020070
 80022c4:	40020088 	.word	0x40020088
 80022c8:	400200a0 	.word	0x400200a0
 80022cc:	400200b8 	.word	0x400200b8
 80022d0:	40020410 	.word	0x40020410
 80022d4:	40020428 	.word	0x40020428
 80022d8:	40020440 	.word	0x40020440
 80022dc:	40020458 	.word	0x40020458
 80022e0:	40020470 	.word	0x40020470
 80022e4:	40020488 	.word	0x40020488
 80022e8:	400204a0 	.word	0x400204a0
 80022ec:	400204b8 	.word	0x400204b8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2204      	movs	r2, #4
 8002306:	409a      	lsls	r2, r3
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f043 0204 	orr.w	r2, r3, #4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	2210      	movs	r2, #16
 8002322:	409a      	lsls	r2, r3
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a6 	beq.w	800247a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a85      	ldr	r2, [pc, #532]	; (8002548 <HAL_DMA_IRQHandler+0x690>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04a      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a83      	ldr	r2, [pc, #524]	; (800254c <HAL_DMA_IRQHandler+0x694>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d045      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a82      	ldr	r2, [pc, #520]	; (8002550 <HAL_DMA_IRQHandler+0x698>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d040      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a80      	ldr	r2, [pc, #512]	; (8002554 <HAL_DMA_IRQHandler+0x69c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d03b      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7f      	ldr	r2, [pc, #508]	; (8002558 <HAL_DMA_IRQHandler+0x6a0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d036      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7d      	ldr	r2, [pc, #500]	; (800255c <HAL_DMA_IRQHandler+0x6a4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d031      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7c      	ldr	r2, [pc, #496]	; (8002560 <HAL_DMA_IRQHandler+0x6a8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d02c      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a7a      	ldr	r2, [pc, #488]	; (8002564 <HAL_DMA_IRQHandler+0x6ac>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d027      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a79      	ldr	r2, [pc, #484]	; (8002568 <HAL_DMA_IRQHandler+0x6b0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a77      	ldr	r2, [pc, #476]	; (800256c <HAL_DMA_IRQHandler+0x6b4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01d      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a76      	ldr	r2, [pc, #472]	; (8002570 <HAL_DMA_IRQHandler+0x6b8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d018      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a74      	ldr	r2, [pc, #464]	; (8002574 <HAL_DMA_IRQHandler+0x6bc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a73      	ldr	r2, [pc, #460]	; (8002578 <HAL_DMA_IRQHandler+0x6c0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_DMA_IRQHandler+0x6c4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a70      	ldr	r2, [pc, #448]	; (8002580 <HAL_DMA_IRQHandler+0x6c8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_DMA_IRQHandler+0x6cc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10a      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x52c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e009      	b.n	80023f8 <HAL_DMA_IRQHandler+0x540>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03e      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2210      	movs	r2, #16
 8002406:	409a      	lsls	r2, r3
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d108      	bne.n	800243a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d024      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e01f      	b.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01b      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
 800244a:	e016      	b.n	800247a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0208 	bic.w	r2, r2, #8
 8002468:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2220      	movs	r2, #32
 8002484:	409a      	lsls	r2, r3
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8110 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2c      	ldr	r2, [pc, #176]	; (8002548 <HAL_DMA_IRQHandler+0x690>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d04a      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_DMA_IRQHandler+0x694>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d045      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a29      	ldr	r2, [pc, #164]	; (8002550 <HAL_DMA_IRQHandler+0x698>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d040      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a28      	ldr	r2, [pc, #160]	; (8002554 <HAL_DMA_IRQHandler+0x69c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d03b      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <HAL_DMA_IRQHandler+0x6a0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d036      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a25      	ldr	r2, [pc, #148]	; (800255c <HAL_DMA_IRQHandler+0x6a4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d031      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a23      	ldr	r2, [pc, #140]	; (8002560 <HAL_DMA_IRQHandler+0x6a8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02c      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a22      	ldr	r2, [pc, #136]	; (8002564 <HAL_DMA_IRQHandler+0x6ac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d027      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_DMA_IRQHandler+0x6b0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d022      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_DMA_IRQHandler+0x6b4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d01d      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_DMA_IRQHandler+0x6b8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d018      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_DMA_IRQHandler+0x6bc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <HAL_DMA_IRQHandler+0x6c0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_DMA_IRQHandler+0x6c4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_DMA_IRQHandler+0x6c8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a16      	ldr	r2, [pc, #88]	; (8002584 <HAL_DMA_IRQHandler+0x6cc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d12b      	bne.n	8002588 <HAL_DMA_IRQHandler+0x6d0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf14      	ite	ne
 800253e:	2301      	movne	r3, #1
 8002540:	2300      	moveq	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	e02a      	b.n	800259c <HAL_DMA_IRQHandler+0x6e4>
 8002546:	bf00      	nop
 8002548:	40020010 	.word	0x40020010
 800254c:	40020028 	.word	0x40020028
 8002550:	40020040 	.word	0x40020040
 8002554:	40020058 	.word	0x40020058
 8002558:	40020070 	.word	0x40020070
 800255c:	40020088 	.word	0x40020088
 8002560:	400200a0 	.word	0x400200a0
 8002564:	400200b8 	.word	0x400200b8
 8002568:	40020410 	.word	0x40020410
 800256c:	40020428 	.word	0x40020428
 8002570:	40020440 	.word	0x40020440
 8002574:	40020458 	.word	0x40020458
 8002578:	40020470 	.word	0x40020470
 800257c:	40020488 	.word	0x40020488
 8002580:	400204a0 	.word	0x400204a0
 8002584:	400204b8 	.word	0x400204b8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8087 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2220      	movs	r2, #32
 80025ac:	409a      	lsls	r2, r3
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d139      	bne.n	8002632 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0216 	bic.w	r2, r2, #22
 80025cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_DMA_IRQHandler+0x736>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0208 	bic.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	223f      	movs	r2, #63	; 0x3f
 8002608:	409a      	lsls	r2, r3
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 834a 	beq.w	8002cbc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
          }
          return;
 8002630:	e344      	b.n	8002cbc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d018      	beq.n	8002672 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02c      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
 800265e:	e027      	b.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d023      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
 8002670:	e01e      	b.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10f      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0210 	bic.w	r2, r2, #16
 800268e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8306 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8088 	beq.w	80027d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7a      	ldr	r2, [pc, #488]	; (80028c0 <HAL_DMA_IRQHandler+0xa08>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d04a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a79      	ldr	r2, [pc, #484]	; (80028c4 <HAL_DMA_IRQHandler+0xa0c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d045      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_DMA_IRQHandler+0xa10>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d040      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a76      	ldr	r2, [pc, #472]	; (80028cc <HAL_DMA_IRQHandler+0xa14>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d03b      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a74      	ldr	r2, [pc, #464]	; (80028d0 <HAL_DMA_IRQHandler+0xa18>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d036      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a73      	ldr	r2, [pc, #460]	; (80028d4 <HAL_DMA_IRQHandler+0xa1c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d031      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a71      	ldr	r2, [pc, #452]	; (80028d8 <HAL_DMA_IRQHandler+0xa20>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02c      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_DMA_IRQHandler+0xa24>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d027      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6e      	ldr	r2, [pc, #440]	; (80028e0 <HAL_DMA_IRQHandler+0xa28>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d022      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6d      	ldr	r2, [pc, #436]	; (80028e4 <HAL_DMA_IRQHandler+0xa2c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d01d      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6b      	ldr	r2, [pc, #428]	; (80028e8 <HAL_DMA_IRQHandler+0xa30>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d018      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6a      	ldr	r2, [pc, #424]	; (80028ec <HAL_DMA_IRQHandler+0xa34>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <HAL_DMA_IRQHandler+0xa38>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00e      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a67      	ldr	r2, [pc, #412]	; (80028f4 <HAL_DMA_IRQHandler+0xa3c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a65      	ldr	r2, [pc, #404]	; (80028f8 <HAL_DMA_IRQHandler+0xa40>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a64      	ldr	r2, [pc, #400]	; (80028fc <HAL_DMA_IRQHandler+0xa44>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <HAL_DMA_IRQHandler+0x8ca>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e007      	b.n	8002792 <HAL_DMA_IRQHandler+0x8da>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	429a      	cmp	r2, r3
 800279c:	d307      	bcc.n	80027ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f2      	bne.n	8002792 <HAL_DMA_IRQHandler+0x8da>
 80027ac:	e000      	b.n	80027b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80027ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80027c6:	e003      	b.n	80027d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8272 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
 80027ea:	e26c      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_DMA_IRQHandler+0xa48>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d022      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a42      	ldr	r2, [pc, #264]	; (8002904 <HAL_DMA_IRQHandler+0xa4c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d01d      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a40      	ldr	r2, [pc, #256]	; (8002908 <HAL_DMA_IRQHandler+0xa50>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d018      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3f      	ldr	r2, [pc, #252]	; (800290c <HAL_DMA_IRQHandler+0xa54>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d013      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3d      	ldr	r2, [pc, #244]	; (8002910 <HAL_DMA_IRQHandler+0xa58>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00e      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3c      	ldr	r2, [pc, #240]	; (8002914 <HAL_DMA_IRQHandler+0xa5c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a3a      	ldr	r2, [pc, #232]	; (8002918 <HAL_DMA_IRQHandler+0xa60>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_DMA_IRQHandler+0xa64>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_DMA_IRQHandler+0x988>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_DMA_IRQHandler+0x98a>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 823f 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2204      	movs	r2, #4
 800285a:	409a      	lsls	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80cd 	beq.w	8002a00 <HAL_DMA_IRQHandler+0xb48>
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80c7 	beq.w	8002a00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	2204      	movs	r2, #4
 800287c:	409a      	lsls	r2, r3
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d049      	beq.n	8002920 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8210 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028a8:	e20a      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8206 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028bc:	e200      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
 80028be:	bf00      	nop
 80028c0:	40020010 	.word	0x40020010
 80028c4:	40020028 	.word	0x40020028
 80028c8:	40020040 	.word	0x40020040
 80028cc:	40020058 	.word	0x40020058
 80028d0:	40020070 	.word	0x40020070
 80028d4:	40020088 	.word	0x40020088
 80028d8:	400200a0 	.word	0x400200a0
 80028dc:	400200b8 	.word	0x400200b8
 80028e0:	40020410 	.word	0x40020410
 80028e4:	40020428 	.word	0x40020428
 80028e8:	40020440 	.word	0x40020440
 80028ec:	40020458 	.word	0x40020458
 80028f0:	40020470 	.word	0x40020470
 80028f4:	40020488 	.word	0x40020488
 80028f8:	400204a0 	.word	0x400204a0
 80028fc:	400204b8 	.word	0x400204b8
 8002900:	58025408 	.word	0x58025408
 8002904:	5802541c 	.word	0x5802541c
 8002908:	58025430 	.word	0x58025430
 800290c:	58025444 	.word	0x58025444
 8002910:	58025458 	.word	0x58025458
 8002914:	5802546c 	.word	0x5802546c
 8002918:	58025480 	.word	0x58025480
 800291c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d160      	bne.n	80029ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a8c      	ldr	r2, [pc, #560]	; (8002b60 <HAL_DMA_IRQHandler+0xca8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d04a      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a8a      	ldr	r2, [pc, #552]	; (8002b64 <HAL_DMA_IRQHandler+0xcac>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d045      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a89      	ldr	r2, [pc, #548]	; (8002b68 <HAL_DMA_IRQHandler+0xcb0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d040      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a87      	ldr	r2, [pc, #540]	; (8002b6c <HAL_DMA_IRQHandler+0xcb4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d03b      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a86      	ldr	r2, [pc, #536]	; (8002b70 <HAL_DMA_IRQHandler+0xcb8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d036      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a84      	ldr	r2, [pc, #528]	; (8002b74 <HAL_DMA_IRQHandler+0xcbc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d031      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a83      	ldr	r2, [pc, #524]	; (8002b78 <HAL_DMA_IRQHandler+0xcc0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d02c      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a81      	ldr	r2, [pc, #516]	; (8002b7c <HAL_DMA_IRQHandler+0xcc4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d027      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a80      	ldr	r2, [pc, #512]	; (8002b80 <HAL_DMA_IRQHandler+0xcc8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7e      	ldr	r2, [pc, #504]	; (8002b84 <HAL_DMA_IRQHandler+0xccc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01d      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7d      	ldr	r2, [pc, #500]	; (8002b88 <HAL_DMA_IRQHandler+0xcd0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d018      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a7b      	ldr	r2, [pc, #492]	; (8002b8c <HAL_DMA_IRQHandler+0xcd4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7a      	ldr	r2, [pc, #488]	; (8002b90 <HAL_DMA_IRQHandler+0xcd8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a78      	ldr	r2, [pc, #480]	; (8002b94 <HAL_DMA_IRQHandler+0xcdc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a77      	ldr	r2, [pc, #476]	; (8002b98 <HAL_DMA_IRQHandler+0xce0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a75      	ldr	r2, [pc, #468]	; (8002b9c <HAL_DMA_IRQHandler+0xce4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d108      	bne.n	80029dc <HAL_DMA_IRQHandler+0xb24>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0208 	bic.w	r2, r2, #8
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e007      	b.n	80029ec <HAL_DMA_IRQHandler+0xb34>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0204 	bic.w	r2, r2, #4
 80029ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8165 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029fe:	e15f      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2202      	movs	r2, #2
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80c5 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0xce8>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80bf 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 813a 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a58:	e134      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8130 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a6c:	e12a      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d168      	bne.n	8002b4a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a38      	ldr	r2, [pc, #224]	; (8002b60 <HAL_DMA_IRQHandler+0xca8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d04a      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a37      	ldr	r2, [pc, #220]	; (8002b64 <HAL_DMA_IRQHandler+0xcac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d045      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <HAL_DMA_IRQHandler+0xcb0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d040      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <HAL_DMA_IRQHandler+0xcb4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d03b      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <HAL_DMA_IRQHandler+0xcb8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d036      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_DMA_IRQHandler+0xcbc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d031      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <HAL_DMA_IRQHandler+0xcc0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02c      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <HAL_DMA_IRQHandler+0xcc4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d027      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2c      	ldr	r2, [pc, #176]	; (8002b80 <HAL_DMA_IRQHandler+0xcc8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <HAL_DMA_IRQHandler+0xccc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_DMA_IRQHandler+0xcd0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <HAL_DMA_IRQHandler+0xcd4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_DMA_IRQHandler+0xcd8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <HAL_DMA_IRQHandler+0xcdc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_DMA_IRQHandler+0xce0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_DMA_IRQHandler+0xce4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <HAL_DMA_IRQHandler+0xc72>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0214 	bic.w	r2, r2, #20
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e007      	b.n	8002b3a <HAL_DMA_IRQHandler+0xc82>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 020a 	bic.w	r2, r2, #10
 8002b38:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80b8 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b5c:	e0b2      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
 8002b5e:	bf00      	nop
 8002b60:	40020010 	.word	0x40020010
 8002b64:	40020028 	.word	0x40020028
 8002b68:	40020040 	.word	0x40020040
 8002b6c:	40020058 	.word	0x40020058
 8002b70:	40020070 	.word	0x40020070
 8002b74:	40020088 	.word	0x40020088
 8002b78:	400200a0 	.word	0x400200a0
 8002b7c:	400200b8 	.word	0x400200b8
 8002b80:	40020410 	.word	0x40020410
 8002b84:	40020428 	.word	0x40020428
 8002b88:	40020440 	.word	0x40020440
 8002b8c:	40020458 	.word	0x40020458
 8002b90:	40020470 	.word	0x40020470
 8002b94:	40020488 	.word	0x40020488
 8002b98:	400204a0 	.word	0x400204a0
 8002b9c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2208      	movs	r2, #8
 8002baa:	409a      	lsls	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8088 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8082 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a41      	ldr	r2, [pc, #260]	; (8002ccc <HAL_DMA_IRQHandler+0xe14>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d04a      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_DMA_IRQHandler+0xe18>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d045      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3e      	ldr	r2, [pc, #248]	; (8002cd4 <HAL_DMA_IRQHandler+0xe1c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d040      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3c      	ldr	r2, [pc, #240]	; (8002cd8 <HAL_DMA_IRQHandler+0xe20>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d03b      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a3b      	ldr	r2, [pc, #236]	; (8002cdc <HAL_DMA_IRQHandler+0xe24>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d036      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_DMA_IRQHandler+0xe28>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d031      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a38      	ldr	r2, [pc, #224]	; (8002ce4 <HAL_DMA_IRQHandler+0xe2c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d02c      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a36      	ldr	r2, [pc, #216]	; (8002ce8 <HAL_DMA_IRQHandler+0xe30>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d027      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a35      	ldr	r2, [pc, #212]	; (8002cec <HAL_DMA_IRQHandler+0xe34>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <HAL_DMA_IRQHandler+0xe38>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01d      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a32      	ldr	r2, [pc, #200]	; (8002cf4 <HAL_DMA_IRQHandler+0xe3c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d018      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a30      	ldr	r2, [pc, #192]	; (8002cf8 <HAL_DMA_IRQHandler+0xe40>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <HAL_DMA_IRQHandler+0xe44>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00e      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_DMA_IRQHandler+0xe48>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <HAL_DMA_IRQHandler+0xe4c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <HAL_DMA_IRQHandler+0xe50>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d108      	bne.n	8002c74 <HAL_DMA_IRQHandler+0xdbc>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 021c 	bic.w	r2, r2, #28
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e007      	b.n	8002c84 <HAL_DMA_IRQHandler+0xdcc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 020e 	bic.w	r2, r2, #14
 8002c82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
 8002cba:	e004      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002cbc:	bf00      	nop
 8002cbe:	e002      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002cc6:	3728      	adds	r7, #40	; 0x28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40020010 	.word	0x40020010
 8002cd0:	40020028 	.word	0x40020028
 8002cd4:	40020040 	.word	0x40020040
 8002cd8:	40020058 	.word	0x40020058
 8002cdc:	40020070 	.word	0x40020070
 8002ce0:	40020088 	.word	0x40020088
 8002ce4:	400200a0 	.word	0x400200a0
 8002ce8:	400200b8 	.word	0x400200b8
 8002cec:	40020410 	.word	0x40020410
 8002cf0:	40020428 	.word	0x40020428
 8002cf4:	40020440 	.word	0x40020440
 8002cf8:	40020458 	.word	0x40020458
 8002cfc:	40020470 	.word	0x40020470
 8002d00:	40020488 	.word	0x40020488
 8002d04:	400204a0 	.word	0x400204a0
 8002d08:	400204b8 	.word	0x400204b8

08002d0c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a84      	ldr	r2, [pc, #528]	; (8002f54 <DMA_SetConfig+0x230>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d072      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a82      	ldr	r2, [pc, #520]	; (8002f58 <DMA_SetConfig+0x234>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d06d      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a81      	ldr	r2, [pc, #516]	; (8002f5c <DMA_SetConfig+0x238>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d068      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a7f      	ldr	r2, [pc, #508]	; (8002f60 <DMA_SetConfig+0x23c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d063      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <DMA_SetConfig+0x240>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d05e      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <DMA_SetConfig+0x244>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d059      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a7b      	ldr	r2, [pc, #492]	; (8002f6c <DMA_SetConfig+0x248>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d054      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a79      	ldr	r2, [pc, #484]	; (8002f70 <DMA_SetConfig+0x24c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d04f      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a78      	ldr	r2, [pc, #480]	; (8002f74 <DMA_SetConfig+0x250>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d04a      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a76      	ldr	r2, [pc, #472]	; (8002f78 <DMA_SetConfig+0x254>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d045      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a75      	ldr	r2, [pc, #468]	; (8002f7c <DMA_SetConfig+0x258>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d040      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a73      	ldr	r2, [pc, #460]	; (8002f80 <DMA_SetConfig+0x25c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d03b      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a72      	ldr	r2, [pc, #456]	; (8002f84 <DMA_SetConfig+0x260>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d036      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a70      	ldr	r2, [pc, #448]	; (8002f88 <DMA_SetConfig+0x264>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d031      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6f      	ldr	r2, [pc, #444]	; (8002f8c <DMA_SetConfig+0x268>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d02c      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a6d      	ldr	r2, [pc, #436]	; (8002f90 <DMA_SetConfig+0x26c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d027      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6c      	ldr	r2, [pc, #432]	; (8002f94 <DMA_SetConfig+0x270>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <DMA_SetConfig+0x274>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01d      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a69      	ldr	r2, [pc, #420]	; (8002f9c <DMA_SetConfig+0x278>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d018      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a67      	ldr	r2, [pc, #412]	; (8002fa0 <DMA_SetConfig+0x27c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a66      	ldr	r2, [pc, #408]	; (8002fa4 <DMA_SetConfig+0x280>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a64      	ldr	r2, [pc, #400]	; (8002fa8 <DMA_SetConfig+0x284>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a63      	ldr	r2, [pc, #396]	; (8002fac <DMA_SetConfig+0x288>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <DMA_SetConfig+0x10a>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a61      	ldr	r2, [pc, #388]	; (8002fb0 <DMA_SetConfig+0x28c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <DMA_SetConfig+0x10e>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <DMA_SetConfig+0x110>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a3e      	ldr	r2, [pc, #248]	; (8002f54 <DMA_SetConfig+0x230>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d04a      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3d      	ldr	r2, [pc, #244]	; (8002f58 <DMA_SetConfig+0x234>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d045      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a3b      	ldr	r2, [pc, #236]	; (8002f5c <DMA_SetConfig+0x238>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d040      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <DMA_SetConfig+0x23c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d03b      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a38      	ldr	r2, [pc, #224]	; (8002f64 <DMA_SetConfig+0x240>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d036      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a37      	ldr	r2, [pc, #220]	; (8002f68 <DMA_SetConfig+0x244>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d031      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a35      	ldr	r2, [pc, #212]	; (8002f6c <DMA_SetConfig+0x248>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02c      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a34      	ldr	r2, [pc, #208]	; (8002f70 <DMA_SetConfig+0x24c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d027      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <DMA_SetConfig+0x250>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d022      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <DMA_SetConfig+0x254>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d01d      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2f      	ldr	r2, [pc, #188]	; (8002f7c <DMA_SetConfig+0x258>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d018      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2e      	ldr	r2, [pc, #184]	; (8002f80 <DMA_SetConfig+0x25c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2c      	ldr	r2, [pc, #176]	; (8002f84 <DMA_SetConfig+0x260>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00e      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <DMA_SetConfig+0x264>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <DMA_SetConfig+0x268>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <DMA_SetConfig+0x1d0>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <DMA_SetConfig+0x26c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <DMA_SetConfig+0x1d4>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <DMA_SetConfig+0x1d6>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d05a      	beq.n	8002fb4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	223f      	movs	r2, #63	; 0x3f
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	d108      	bne.n	8002f40 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f3e:	e087      	b.n	8003050 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
}
 8002f50:	e07e      	b.n	8003050 <DMA_SetConfig+0x32c>
 8002f52:	bf00      	nop
 8002f54:	40020010 	.word	0x40020010
 8002f58:	40020028 	.word	0x40020028
 8002f5c:	40020040 	.word	0x40020040
 8002f60:	40020058 	.word	0x40020058
 8002f64:	40020070 	.word	0x40020070
 8002f68:	40020088 	.word	0x40020088
 8002f6c:	400200a0 	.word	0x400200a0
 8002f70:	400200b8 	.word	0x400200b8
 8002f74:	40020410 	.word	0x40020410
 8002f78:	40020428 	.word	0x40020428
 8002f7c:	40020440 	.word	0x40020440
 8002f80:	40020458 	.word	0x40020458
 8002f84:	40020470 	.word	0x40020470
 8002f88:	40020488 	.word	0x40020488
 8002f8c:	400204a0 	.word	0x400204a0
 8002f90:	400204b8 	.word	0x400204b8
 8002f94:	58025408 	.word	0x58025408
 8002f98:	5802541c 	.word	0x5802541c
 8002f9c:	58025430 	.word	0x58025430
 8002fa0:	58025444 	.word	0x58025444
 8002fa4:	58025458 	.word	0x58025458
 8002fa8:	5802546c 	.word	0x5802546c
 8002fac:	58025480 	.word	0x58025480
 8002fb0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a28      	ldr	r2, [pc, #160]	; (800305c <DMA_SetConfig+0x338>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d022      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a27      	ldr	r2, [pc, #156]	; (8003060 <DMA_SetConfig+0x33c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d01d      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a25      	ldr	r2, [pc, #148]	; (8003064 <DMA_SetConfig+0x340>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d018      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <DMA_SetConfig+0x344>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d013      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <DMA_SetConfig+0x348>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00e      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a21      	ldr	r2, [pc, #132]	; (8003070 <DMA_SetConfig+0x34c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d009      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <DMA_SetConfig+0x350>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d004      	beq.n	8003004 <DMA_SetConfig+0x2e0>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <DMA_SetConfig+0x354>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <DMA_SetConfig+0x2e4>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <DMA_SetConfig+0x2e6>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d020      	beq.n	8003050 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2201      	movs	r2, #1
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d108      	bne.n	8003040 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	60da      	str	r2, [r3, #12]
}
 800303e:	e007      	b.n	8003050 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	58025408 	.word	0x58025408
 8003060:	5802541c 	.word	0x5802541c
 8003064:	58025430 	.word	0x58025430
 8003068:	58025444 	.word	0x58025444
 800306c:	58025458 	.word	0x58025458
 8003070:	5802546c 	.word	0x5802546c
 8003074:	58025480 	.word	0x58025480
 8003078:	58025494 	.word	0x58025494

0800307c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a42      	ldr	r2, [pc, #264]	; (8003194 <DMA_CalcBaseAndBitshift+0x118>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d04a      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a41      	ldr	r2, [pc, #260]	; (8003198 <DMA_CalcBaseAndBitshift+0x11c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d045      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3f      	ldr	r2, [pc, #252]	; (800319c <DMA_CalcBaseAndBitshift+0x120>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d040      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a3e      	ldr	r2, [pc, #248]	; (80031a0 <DMA_CalcBaseAndBitshift+0x124>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d03b      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3c      	ldr	r2, [pc, #240]	; (80031a4 <DMA_CalcBaseAndBitshift+0x128>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d036      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a3b      	ldr	r2, [pc, #236]	; (80031a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d031      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a39      	ldr	r2, [pc, #228]	; (80031ac <DMA_CalcBaseAndBitshift+0x130>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02c      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a38      	ldr	r2, [pc, #224]	; (80031b0 <DMA_CalcBaseAndBitshift+0x134>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d027      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a36      	ldr	r2, [pc, #216]	; (80031b4 <DMA_CalcBaseAndBitshift+0x138>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d022      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a35      	ldr	r2, [pc, #212]	; (80031b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d01d      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a33      	ldr	r2, [pc, #204]	; (80031bc <DMA_CalcBaseAndBitshift+0x140>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d018      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a32      	ldr	r2, [pc, #200]	; (80031c0 <DMA_CalcBaseAndBitshift+0x144>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a30      	ldr	r2, [pc, #192]	; (80031c4 <DMA_CalcBaseAndBitshift+0x148>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00e      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d009      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2d      	ldr	r2, [pc, #180]	; (80031cc <DMA_CalcBaseAndBitshift+0x150>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <DMA_CalcBaseAndBitshift+0xa8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <DMA_CalcBaseAndBitshift+0x154>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <DMA_CalcBaseAndBitshift+0xac>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <DMA_CalcBaseAndBitshift+0xae>
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d024      	beq.n	8003178 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	3b10      	subs	r3, #16
 8003136:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <DMA_CalcBaseAndBitshift+0x158>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	4a24      	ldr	r2, [pc, #144]	; (80031d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003148:	5cd3      	ldrb	r3, [r2, r3]
 800314a:	461a      	mov	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d908      	bls.n	8003168 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <DMA_CalcBaseAndBitshift+0x160>)
 800315e:	4013      	ands	r3, r2
 8003160:	1d1a      	adds	r2, r3, #4
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	659a      	str	r2, [r3, #88]	; 0x58
 8003166:	e00d      	b.n	8003184 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <DMA_CalcBaseAndBitshift+0x160>)
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6593      	str	r3, [r2, #88]	; 0x58
 8003176:	e005      	b.n	8003184 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40020010 	.word	0x40020010
 8003198:	40020028 	.word	0x40020028
 800319c:	40020040 	.word	0x40020040
 80031a0:	40020058 	.word	0x40020058
 80031a4:	40020070 	.word	0x40020070
 80031a8:	40020088 	.word	0x40020088
 80031ac:	400200a0 	.word	0x400200a0
 80031b0:	400200b8 	.word	0x400200b8
 80031b4:	40020410 	.word	0x40020410
 80031b8:	40020428 	.word	0x40020428
 80031bc:	40020440 	.word	0x40020440
 80031c0:	40020458 	.word	0x40020458
 80031c4:	40020470 	.word	0x40020470
 80031c8:	40020488 	.word	0x40020488
 80031cc:	400204a0 	.word	0x400204a0
 80031d0:	400204b8 	.word	0x400204b8
 80031d4:	aaaaaaab 	.word	0xaaaaaaab
 80031d8:	0800f8e4 	.word	0x0800f8e4
 80031dc:	fffffc00 	.word	0xfffffc00

080031e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d120      	bne.n	8003236 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d858      	bhi.n	80032ae <DMA_CheckFifoParam+0xce>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <DMA_CheckFifoParam+0x24>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003215 	.word	0x08003215
 8003208:	08003227 	.word	0x08003227
 800320c:	08003215 	.word	0x08003215
 8003210:	080032af 	.word	0x080032af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d048      	beq.n	80032b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003224:	e045      	b.n	80032b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800322e:	d142      	bne.n	80032b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003234:	e03f      	b.n	80032b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323e:	d123      	bne.n	8003288 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	2b03      	cmp	r3, #3
 8003246:	d838      	bhi.n	80032ba <DMA_CheckFifoParam+0xda>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <DMA_CheckFifoParam+0x70>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003261 	.word	0x08003261
 8003254:	08003267 	.word	0x08003267
 8003258:	08003261 	.word	0x08003261
 800325c:	08003279 	.word	0x08003279
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
        break;
 8003264:	e030      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d025      	beq.n	80032be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003276:	e022      	b.n	80032be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003280:	d11f      	bne.n	80032c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003286:	e01c      	b.n	80032c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	2b02      	cmp	r3, #2
 800328e:	d902      	bls.n	8003296 <DMA_CheckFifoParam+0xb6>
 8003290:	2b03      	cmp	r3, #3
 8003292:	d003      	beq.n	800329c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003294:	e018      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
        break;
 800329a:	e015      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
    break;
 80032ac:	e00b      	b.n	80032c6 <DMA_CheckFifoParam+0xe6>
        break;
 80032ae:	bf00      	nop
 80032b0:	e00a      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        break;
 80032b2:	bf00      	nop
 80032b4:	e008      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        break;
 80032b6:	bf00      	nop
 80032b8:	e006      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        break;
 80032ba:	bf00      	nop
 80032bc:	e004      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        break;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
        break;
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
    break;
 80032c6:	bf00      	nop
    }
  }

  return status;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a38      	ldr	r2, [pc, #224]	; (80033cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a36      	ldr	r2, [pc, #216]	; (80033d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a35      	ldr	r2, [pc, #212]	; (80033d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a32      	ldr	r2, [pc, #200]	; (80033dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a30      	ldr	r2, [pc, #192]	; (80033e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2f      	ldr	r2, [pc, #188]	; (80033e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01a      	beq.n	8003376 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	3b08      	subs	r3, #8
 8003348:	4a28      	ldr	r2, [pc, #160]	; (80033ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4b26      	ldr	r3, [pc, #152]	; (80033f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	461a      	mov	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003364:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2201      	movs	r2, #1
 800336e:	409a      	lsls	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003374:	e024      	b.n	80033c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3b10      	subs	r3, #16
 800337e:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d806      	bhi.n	800339e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4a1b      	ldr	r2, [pc, #108]	; (8003400 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d902      	bls.n	800339e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3308      	adds	r3, #8
 800339c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4b18      	ldr	r3, [pc, #96]	; (8003404 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	461a      	mov	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a16      	ldr	r2, [pc, #88]	; (8003408 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80033b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2201      	movs	r2, #1
 80033ba:	409a      	lsls	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	58025408 	.word	0x58025408
 80033d0:	5802541c 	.word	0x5802541c
 80033d4:	58025430 	.word	0x58025430
 80033d8:	58025444 	.word	0x58025444
 80033dc:	58025458 	.word	0x58025458
 80033e0:	5802546c 	.word	0x5802546c
 80033e4:	58025480 	.word	0x58025480
 80033e8:	58025494 	.word	0x58025494
 80033ec:	cccccccd 	.word	0xcccccccd
 80033f0:	16009600 	.word	0x16009600
 80033f4:	58025880 	.word	0x58025880
 80033f8:	aaaaaaab 	.word	0xaaaaaaab
 80033fc:	400204b8 	.word	0x400204b8
 8003400:	4002040f 	.word	0x4002040f
 8003404:	10008200 	.word	0x10008200
 8003408:	40020880 	.word	0x40020880

0800340c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d04a      	beq.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d847      	bhi.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a25      	ldr	r2, [pc, #148]	; (80034c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d01d      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a22      	ldr	r2, [pc, #136]	; (80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1f      	ldr	r2, [pc, #124]	; (80034d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800347c:	2300      	movs	r3, #0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	461a      	mov	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a15      	ldr	r2, [pc, #84]	; (80034e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003494:	671a      	str	r2, [r3, #112]	; 0x70
 8003496:	e009      	b.n	80034ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4b14      	ldr	r3, [pc, #80]	; (80034ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	461a      	mov	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80034aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	2201      	movs	r2, #1
 80034b2:	409a      	lsls	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	58025408 	.word	0x58025408
 80034c8:	5802541c 	.word	0x5802541c
 80034cc:	58025430 	.word	0x58025430
 80034d0:	58025444 	.word	0x58025444
 80034d4:	58025458 	.word	0x58025458
 80034d8:	5802546c 	.word	0x5802546c
 80034dc:	58025480 	.word	0x58025480
 80034e0:	58025494 	.word	0x58025494
 80034e4:	1600963f 	.word	0x1600963f
 80034e8:	58025940 	.word	0x58025940
 80034ec:	1000823f 	.word	0x1000823f
 80034f0:	40020940 	.word	0x40020940

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003502:	4b89      	ldr	r3, [pc, #548]	; (8003728 <HAL_GPIO_Init+0x234>)
 8003504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003506:	e194      	b.n	8003832 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8186 	beq.w	800382c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d005      	beq.n	8003538 <HAL_GPIO_Init+0x44>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d130      	bne.n	800359a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800356e:	2201      	movs	r2, #1
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 0201 	and.w	r2, r3, #1
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d017      	beq.n	80035d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2203      	movs	r2, #3
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d123      	bne.n	800362a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	08da      	lsrs	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3208      	adds	r2, #8
 80035ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	69b9      	ldr	r1, [r7, #24]
 8003626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	2203      	movs	r2, #3
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0203 	and.w	r2, r3, #3
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80e0 	beq.w	800382c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366c:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_GPIO_Init+0x238>)
 800366e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003672:	4a2e      	ldr	r2, [pc, #184]	; (800372c <HAL_GPIO_Init+0x238>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_GPIO_Init+0x238>)
 800367e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800368a:	4a29      	ldr	r2, [pc, #164]	; (8003730 <HAL_GPIO_Init+0x23c>)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a20      	ldr	r2, [pc, #128]	; (8003734 <HAL_GPIO_Init+0x240>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d052      	beq.n	800375c <HAL_GPIO_Init+0x268>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <HAL_GPIO_Init+0x244>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d031      	beq.n	8003722 <HAL_GPIO_Init+0x22e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a1e      	ldr	r2, [pc, #120]	; (800373c <HAL_GPIO_Init+0x248>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02b      	beq.n	800371e <HAL_GPIO_Init+0x22a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <HAL_GPIO_Init+0x24c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d025      	beq.n	800371a <HAL_GPIO_Init+0x226>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <HAL_GPIO_Init+0x250>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01f      	beq.n	8003716 <HAL_GPIO_Init+0x222>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <HAL_GPIO_Init+0x254>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d019      	beq.n	8003712 <HAL_GPIO_Init+0x21e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1a      	ldr	r2, [pc, #104]	; (800374c <HAL_GPIO_Init+0x258>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_GPIO_Init+0x21a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a19      	ldr	r2, [pc, #100]	; (8003750 <HAL_GPIO_Init+0x25c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00d      	beq.n	800370a <HAL_GPIO_Init+0x216>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_GPIO_Init+0x260>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <HAL_GPIO_Init+0x212>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_GPIO_Init+0x264>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_GPIO_Init+0x20e>
 80036fe:	2309      	movs	r3, #9
 8003700:	e02d      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003702:	230a      	movs	r3, #10
 8003704:	e02b      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003706:	2308      	movs	r3, #8
 8003708:	e029      	b.n	800375e <HAL_GPIO_Init+0x26a>
 800370a:	2307      	movs	r3, #7
 800370c:	e027      	b.n	800375e <HAL_GPIO_Init+0x26a>
 800370e:	2306      	movs	r3, #6
 8003710:	e025      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003712:	2305      	movs	r3, #5
 8003714:	e023      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003716:	2304      	movs	r3, #4
 8003718:	e021      	b.n	800375e <HAL_GPIO_Init+0x26a>
 800371a:	2303      	movs	r3, #3
 800371c:	e01f      	b.n	800375e <HAL_GPIO_Init+0x26a>
 800371e:	2302      	movs	r3, #2
 8003720:	e01d      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003722:	2301      	movs	r3, #1
 8003724:	e01b      	b.n	800375e <HAL_GPIO_Init+0x26a>
 8003726:	bf00      	nop
 8003728:	58000080 	.word	0x58000080
 800372c:	58024400 	.word	0x58024400
 8003730:	58000400 	.word	0x58000400
 8003734:	58020000 	.word	0x58020000
 8003738:	58020400 	.word	0x58020400
 800373c:	58020800 	.word	0x58020800
 8003740:	58020c00 	.word	0x58020c00
 8003744:	58021000 	.word	0x58021000
 8003748:	58021400 	.word	0x58021400
 800374c:	58021800 	.word	0x58021800
 8003750:	58021c00 	.word	0x58021c00
 8003754:	58022000 	.word	0x58022000
 8003758:	58022400 	.word	0x58022400
 800375c:	2300      	movs	r3, #0
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	f002 0203 	and.w	r2, r2, #3
 8003764:	0092      	lsls	r2, r2, #2
 8003766:	4093      	lsls	r3, r2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376e:	4938      	ldr	r1, [pc, #224]	; (8003850 <HAL_GPIO_Init+0x35c>)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	3302      	adds	r3, #2
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800377c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80037a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80037d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	3301      	adds	r3, #1
 8003830:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	f47f ae63 	bne.w	8003508 <HAL_GPIO_Init+0x14>
  }
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	3724      	adds	r7, #36	; 0x24
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	58000400 	.word	0x58000400

08003854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	887b      	ldrh	r3, [r7, #2]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e001      	b.n	8003876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
 8003890:	4613      	mov	r3, r2
 8003892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038a0:	e003      	b.n	80038aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038a2:	887b      	ldrh	r3, [r7, #2]
 80038a4:	041a      	lsls	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	619a      	str	r2, [r3, #24]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038c8:	887a      	ldrh	r2, [r7, #2]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4013      	ands	r3, r2
 80038ce:	041a      	lsls	r2, r3, #16
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43d9      	mvns	r1, r3
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	400b      	ands	r3, r1
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	619a      	str	r2, [r3, #24]
}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_PWREx_ConfigSupply+0x70>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d00a      	beq.n	8003916 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003900:	4b16      	ldr	r3, [pc, #88]	; (800395c <HAL_PWREx_ConfigSupply+0x70>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d001      	beq.n	8003912 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e01f      	b.n	8003952 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e01d      	b.n	8003952 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003916:	4b11      	ldr	r3, [pc, #68]	; (800395c <HAL_PWREx_ConfigSupply+0x70>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 0207 	bic.w	r2, r3, #7
 800391e:	490f      	ldr	r1, [pc, #60]	; (800395c <HAL_PWREx_ConfigSupply+0x70>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4313      	orrs	r3, r2
 8003924:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003926:	f7fc fea7 	bl	8000678 <HAL_GetTick>
 800392a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800392c:	e009      	b.n	8003942 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800392e:	f7fc fea3 	bl	8000678 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800393c:	d901      	bls.n	8003942 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e007      	b.n	8003952 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_PWREx_ConfigSupply+0x70>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394e:	d1ee      	bne.n	800392e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	58024800 	.word	0x58024800

08003960 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f000 bc1c 	b.w	80041ac <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8087 	beq.w	8003a90 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003982:	4b9e      	ldr	r3, [pc, #632]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800398c:	4b9b      	ldr	r3, [pc, #620]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	2b10      	cmp	r3, #16
 8003996:	d007      	beq.n	80039a8 <HAL_RCC_OscConfig+0x48>
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	2b18      	cmp	r3, #24
 800399c:	d110      	bne.n	80039c0 <HAL_RCC_OscConfig+0x60>
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d10b      	bne.n	80039c0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	4b94      	ldr	r3, [pc, #592]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d06c      	beq.n	8003a8e <HAL_RCC_OscConfig+0x12e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d168      	bne.n	8003a8e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e3f5      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c8:	d106      	bne.n	80039d8 <HAL_RCC_OscConfig+0x78>
 80039ca:	4b8c      	ldr	r3, [pc, #560]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a8b      	ldr	r2, [pc, #556]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e02e      	b.n	8003a36 <HAL_RCC_OscConfig+0xd6>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10c      	bne.n	80039fa <HAL_RCC_OscConfig+0x9a>
 80039e0:	4b86      	ldr	r3, [pc, #536]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a85      	ldr	r2, [pc, #532]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 80039e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b83      	ldr	r3, [pc, #524]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a82      	ldr	r2, [pc, #520]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 80039f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	e01d      	b.n	8003a36 <HAL_RCC_OscConfig+0xd6>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a02:	d10c      	bne.n	8003a1e <HAL_RCC_OscConfig+0xbe>
 8003a04:	4b7d      	ldr	r3, [pc, #500]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a7c      	ldr	r2, [pc, #496]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b7a      	ldr	r3, [pc, #488]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a79      	ldr	r2, [pc, #484]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	e00b      	b.n	8003a36 <HAL_RCC_OscConfig+0xd6>
 8003a1e:	4b77      	ldr	r3, [pc, #476]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a76      	ldr	r2, [pc, #472]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b74      	ldr	r3, [pc, #464]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a73      	ldr	r2, [pc, #460]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d013      	beq.n	8003a66 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fc fe1b 	bl	8000678 <HAL_GetTick>
 8003a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a46:	f7fc fe17 	bl	8000678 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	; 0x64
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e3a9      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a58:	4b68      	ldr	r3, [pc, #416]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0xe6>
 8003a64:	e014      	b.n	8003a90 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fc fe07 	bl	8000678 <HAL_GetTick>
 8003a6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a6e:	f7fc fe03 	bl	8000678 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b64      	cmp	r3, #100	; 0x64
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e395      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a80:	4b5e      	ldr	r3, [pc, #376]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f0      	bne.n	8003a6e <HAL_RCC_OscConfig+0x10e>
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80ca 	beq.w	8003c32 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9e:	4b57      	ldr	r3, [pc, #348]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa8:	4b54      	ldr	r3, [pc, #336]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x164>
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	2b18      	cmp	r3, #24
 8003ab8:	d156      	bne.n	8003b68 <HAL_RCC_OscConfig+0x208>
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d151      	bne.n	8003b68 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac4:	4b4d      	ldr	r3, [pc, #308]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_OscConfig+0x17c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e367      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003adc:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 0219 	bic.w	r2, r3, #25
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4944      	ldr	r1, [pc, #272]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003aee:	f7fc fdc3 	bl	8000678 <HAL_GetTick>
 8003af2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af6:	f7fc fdbf 	bl	8000678 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e351      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b08:	4b3c      	ldr	r3, [pc, #240]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	f7fc fdbc 	bl	8000690 <HAL_GetREVID>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d817      	bhi.n	8003b52 <HAL_RCC_OscConfig+0x1f2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d108      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1dc>
 8003b2a:	4b34      	ldr	r3, [pc, #208]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b32:	4a32      	ldr	r2, [pc, #200]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b38:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b3a:	e07a      	b.n	8003c32 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	031b      	lsls	r3, r3, #12
 8003b4a:	492c      	ldr	r1, [pc, #176]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b50:	e06f      	b.n	8003c32 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b52:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	061b      	lsls	r3, r3, #24
 8003b60:	4926      	ldr	r1, [pc, #152]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b66:	e064      	b.n	8003c32 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d047      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b70:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 0219 	bic.w	r2, r3, #25
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	491f      	ldr	r1, [pc, #124]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fc fd79 	bl	8000678 <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fc fd75 	bl	8000678 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e307      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b9c:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	f7fc fd72 	bl	8000690 <HAL_GetREVID>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d817      	bhi.n	8003be6 <HAL_RCC_OscConfig+0x286>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d108      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x270>
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003bc6:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bcc:	6053      	str	r3, [r2, #4]
 8003bce:	e030      	b.n	8003c32 <HAL_RCC_OscConfig+0x2d2>
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	031b      	lsls	r3, r3, #12
 8003bde:	4907      	ldr	r1, [pc, #28]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
 8003be4:	e025      	b.n	8003c32 <HAL_RCC_OscConfig+0x2d2>
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	4901      	ldr	r1, [pc, #4]	; (8003bfc <HAL_RCC_OscConfig+0x29c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
 8003bfa:	e01a      	b.n	8003c32 <HAL_RCC_OscConfig+0x2d2>
 8003bfc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c00:	4b9e      	ldr	r3, [pc, #632]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a9d      	ldr	r2, [pc, #628]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fc fd34 	bl	8000678 <HAL_GetTick>
 8003c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fc fd30 	bl	8000678 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e2c2      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c26:	4b95      	ldr	r3, [pc, #596]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80a9 	beq.w	8003d92 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c40:	4b8e      	ldr	r3, [pc, #568]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c4a:	4b8c      	ldr	r3, [pc, #560]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d007      	beq.n	8003c66 <HAL_RCC_OscConfig+0x306>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b18      	cmp	r3, #24
 8003c5a:	d13a      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x372>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d135      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c66:	4b85      	ldr	r3, [pc, #532]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x31e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2b80      	cmp	r3, #128	; 0x80
 8003c78:	d001      	beq.n	8003c7e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e296      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c7e:	f7fc fd07 	bl	8000690 <HAL_GetREVID>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d817      	bhi.n	8003cbc <HAL_RCC_OscConfig+0x35c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d108      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x346>
 8003c94:	4b79      	ldr	r3, [pc, #484]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c9c:	4a77      	ldr	r2, [pc, #476]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ca2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ca4:	e075      	b.n	8003d92 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ca6:	4b75      	ldr	r3, [pc, #468]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	069b      	lsls	r3, r3, #26
 8003cb4:	4971      	ldr	r1, [pc, #452]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cba:	e06a      	b.n	8003d92 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	496c      	ldr	r1, [pc, #432]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cd0:	e05f      	b.n	8003d92 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d042      	beq.n	8003d60 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003cda:	4b68      	ldr	r3, [pc, #416]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a67      	ldr	r2, [pc, #412]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fc fcc7 	bl	8000678 <HAL_GetTick>
 8003cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cee:	f7fc fcc3 	bl	8000678 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e255      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d00:	4b5e      	ldr	r3, [pc, #376]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d0c:	f7fc fcc0 	bl	8000690 <HAL_GetREVID>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d817      	bhi.n	8003d4a <HAL_RCC_OscConfig+0x3ea>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d108      	bne.n	8003d34 <HAL_RCC_OscConfig+0x3d4>
 8003d22:	4b56      	ldr	r3, [pc, #344]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d2a:	4a54      	ldr	r2, [pc, #336]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003d2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d30:	6053      	str	r3, [r2, #4]
 8003d32:	e02e      	b.n	8003d92 <HAL_RCC_OscConfig+0x432>
 8003d34:	4b51      	ldr	r3, [pc, #324]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	069b      	lsls	r3, r3, #26
 8003d42:	494e      	ldr	r1, [pc, #312]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
 8003d48:	e023      	b.n	8003d92 <HAL_RCC_OscConfig+0x432>
 8003d4a:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	061b      	lsls	r3, r3, #24
 8003d58:	4948      	ldr	r1, [pc, #288]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60cb      	str	r3, [r1, #12]
 8003d5e:	e018      	b.n	8003d92 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d60:	4b46      	ldr	r3, [pc, #280]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a45      	ldr	r2, [pc, #276]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fc fc84 	bl	8000678 <HAL_GetTick>
 8003d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d74:	f7fc fc80 	bl	8000678 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e212      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d86:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d036      	beq.n	8003e0c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d019      	beq.n	8003dda <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da6:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	4a34      	ldr	r2, [pc, #208]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db2:	f7fc fc61 	bl	8000678 <HAL_GetTick>
 8003db6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dba:	f7fc fc5d 	bl	8000678 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1ef      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x45a>
 8003dd8:	e018      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dda:	4b28      	ldr	r3, [pc, #160]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dde:	4a27      	ldr	r2, [pc, #156]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fc fc47 	bl	8000678 <HAL_GetTick>
 8003dea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dee:	f7fc fc43 	bl	8000678 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e1d5      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f0      	bne.n	8003dee <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d039      	beq.n	8003e8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d019      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003e26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e2c:	f7fc fc24 	bl	8000678 <HAL_GetTick>
 8003e30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e34:	f7fc fc20 	bl	8000678 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e1b2      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4d4>
 8003e52:	e01b      	b.n	8003e8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <HAL_RCC_OscConfig+0x51c>)
 8003e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e60:	f7fc fc0a 	bl	8000678 <HAL_GetTick>
 8003e64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e68:	f7fc fc06 	bl	8000678 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d904      	bls.n	8003e80 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e198      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
 8003e7a:	bf00      	nop
 8003e7c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e80:	4ba3      	ldr	r3, [pc, #652]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ed      	bne.n	8003e68 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8081 	beq.w	8003f9c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e9a:	4b9e      	ldr	r3, [pc, #632]	; (8004114 <HAL_RCC_OscConfig+0x7b4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a9d      	ldr	r2, [pc, #628]	; (8004114 <HAL_RCC_OscConfig+0x7b4>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ea6:	f7fc fbe7 	bl	8000678 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eae:	f7fc fbe3 	bl	8000678 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e175      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec0:	4b94      	ldr	r3, [pc, #592]	; (8004114 <HAL_RCC_OscConfig+0x7b4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x582>
 8003ed4:	4b8e      	ldr	r3, [pc, #568]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a8d      	ldr	r2, [pc, #564]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	e02d      	b.n	8003f3e <HAL_RCC_OscConfig+0x5de>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x5a4>
 8003eea:	4b89      	ldr	r3, [pc, #548]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a88      	ldr	r2, [pc, #544]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef6:	4b86      	ldr	r3, [pc, #536]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a85      	ldr	r2, [pc, #532]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	e01c      	b.n	8003f3e <HAL_RCC_OscConfig+0x5de>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5c6>
 8003f0c:	4b80      	ldr	r3, [pc, #512]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a7f      	ldr	r2, [pc, #508]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003f12:	f043 0304 	orr.w	r3, r3, #4
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
 8003f18:	4b7d      	ldr	r3, [pc, #500]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	4a7c      	ldr	r2, [pc, #496]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6713      	str	r3, [r2, #112]	; 0x70
 8003f24:	e00b      	b.n	8003f3e <HAL_RCC_OscConfig+0x5de>
 8003f26:	4b7a      	ldr	r3, [pc, #488]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	4a79      	ldr	r2, [pc, #484]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70
 8003f32:	4b77      	ldr	r3, [pc, #476]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	4a76      	ldr	r2, [pc, #472]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003f38:	f023 0304 	bic.w	r3, r3, #4
 8003f3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d015      	beq.n	8003f72 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f46:	f7fc fb97 	bl	8000678 <HAL_GetTick>
 8003f4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fc fb93 	bl	8000678 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e123      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f64:	4b6a      	ldr	r3, [pc, #424]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ee      	beq.n	8003f4e <HAL_RCC_OscConfig+0x5ee>
 8003f70:	e014      	b.n	8003f9c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f72:	f7fc fb81 	bl	8000678 <HAL_GetTick>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fc fb7d 	bl	8000678 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e10d      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f90:	4b5f      	ldr	r3, [pc, #380]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ee      	bne.n	8003f7a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8102 	beq.w	80041aa <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003fa6:	4b5a      	ldr	r3, [pc, #360]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fae:	2b18      	cmp	r3, #24
 8003fb0:	f000 80bd 	beq.w	800412e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	f040 8095 	bne.w	80040e8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbe:	4b54      	ldr	r3, [pc, #336]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a53      	ldr	r2, [pc, #332]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fc fb55 	bl	8000678 <HAL_GetTick>
 8003fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fc fb51 	bl	8000678 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e0e3      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe4:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ff0:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8003ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ff4:	4b48      	ldr	r3, [pc, #288]	; (8004118 <HAL_RCC_OscConfig+0x7b8>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	430a      	orrs	r2, r1
 8004004:	4942      	ldr	r1, [pc, #264]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8004006:	4313      	orrs	r3, r2
 8004008:	628b      	str	r3, [r1, #40]	; 0x28
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	3b01      	subs	r3, #1
 8004010:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004018:	3b01      	subs	r3, #1
 800401a:	025b      	lsls	r3, r3, #9
 800401c:	b29b      	uxth	r3, r3
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	3b01      	subs	r3, #1
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	3b01      	subs	r3, #1
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800403a:	4935      	ldr	r1, [pc, #212]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004040:	4b33      	ldr	r3, [pc, #204]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4a32      	ldr	r2, [pc, #200]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 800404e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004050:	4b32      	ldr	r3, [pc, #200]	; (800411c <HAL_RCC_OscConfig+0x7bc>)
 8004052:	4013      	ands	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004058:	00d2      	lsls	r2, r2, #3
 800405a:	492d      	ldr	r1, [pc, #180]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 800405c:	4313      	orrs	r3, r2
 800405e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004060:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	f023 020c 	bic.w	r2, r3, #12
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	4928      	ldr	r1, [pc, #160]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 800406e:	4313      	orrs	r3, r2
 8004070:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004072:	4b27      	ldr	r3, [pc, #156]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	f023 0202 	bic.w	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	4924      	ldr	r1, [pc, #144]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004084:	4b22      	ldr	r3, [pc, #136]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	4a21      	ldr	r2, [pc, #132]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 800408a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004090:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 8004096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800409a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800409c:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80040a8:	4b19      	ldr	r3, [pc, #100]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4a18      	ldr	r2, [pc, #96]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b4:	4b16      	ldr	r3, [pc, #88]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a15      	ldr	r2, [pc, #84]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fc fada 	bl	8000678 <HAL_GetTick>
 80040c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fc fad6 	bl	8000678 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e068      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x768>
 80040e6:	e060      	b.n	80041aa <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a08      	ldr	r2, [pc, #32]	; (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fc fac0 	bl	8000678 <HAL_GetTick>
 80040f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040fa:	e011      	b.n	8004120 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fc fabc 	bl	8000678 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d90a      	bls.n	8004120 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e04e      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
 800410e:	bf00      	nop
 8004110:	58024400 	.word	0x58024400
 8004114:	58024800 	.word	0x58024800
 8004118:	fffffc0c 	.word	0xfffffc0c
 800411c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004120:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_RCC_OscConfig+0x854>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e7      	bne.n	80040fc <HAL_RCC_OscConfig+0x79c>
 800412c:	e03d      	b.n	80041aa <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800412e:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_RCC_OscConfig+0x854>)
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004134:	4b1f      	ldr	r3, [pc, #124]	; (80041b4 <HAL_RCC_OscConfig+0x854>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b01      	cmp	r3, #1
 8004140:	d031      	beq.n	80041a6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0203 	and.w	r2, r3, #3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d12a      	bne.n	80041a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d122      	bne.n	80041a6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d11a      	bne.n	80041a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	0a5b      	lsrs	r3, r3, #9
 8004174:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d111      	bne.n	80041a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d108      	bne.n	80041a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	0e1b      	lsrs	r3, r3, #24
 8004198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d001      	beq.n	80041aa <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3730      	adds	r7, #48	; 0x30
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	58024400 	.word	0x58024400

080041b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e19c      	b.n	8004506 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b8a      	ldr	r3, [pc, #552]	; (80043f8 <HAL_RCC_ClockConfig+0x240>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d910      	bls.n	80041fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b87      	ldr	r3, [pc, #540]	; (80043f8 <HAL_RCC_ClockConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 020f 	bic.w	r2, r3, #15
 80041e2:	4985      	ldr	r1, [pc, #532]	; (80043f8 <HAL_RCC_ClockConfig+0x240>)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b83      	ldr	r3, [pc, #524]	; (80043f8 <HAL_RCC_ClockConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e184      	b.n	8004506 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d010      	beq.n	800422a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	4b7b      	ldr	r3, [pc, #492]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004214:	429a      	cmp	r2, r3
 8004216:	d908      	bls.n	800422a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004218:	4b78      	ldr	r3, [pc, #480]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	4975      	ldr	r1, [pc, #468]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 8004226:	4313      	orrs	r3, r2
 8004228:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d010      	beq.n	8004258 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	4b70      	ldr	r3, [pc, #448]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004242:	429a      	cmp	r2, r3
 8004244:	d908      	bls.n	8004258 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004246:	4b6d      	ldr	r3, [pc, #436]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	496a      	ldr	r1, [pc, #424]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 8004254:	4313      	orrs	r3, r2
 8004256:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	4b64      	ldr	r3, [pc, #400]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004270:	429a      	cmp	r2, r3
 8004272:	d908      	bls.n	8004286 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004274:	4b61      	ldr	r3, [pc, #388]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	495e      	ldr	r1, [pc, #376]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 8004282:	4313      	orrs	r3, r2
 8004284:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d010      	beq.n	80042b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	4b59      	ldr	r3, [pc, #356]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800429e:	429a      	cmp	r2, r3
 80042a0:	d908      	bls.n	80042b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80042a2:	4b56      	ldr	r3, [pc, #344]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4953      	ldr	r1, [pc, #332]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d010      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	4b4d      	ldr	r3, [pc, #308]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d908      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d0:	4b4a      	ldr	r3, [pc, #296]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f023 020f 	bic.w	r2, r3, #15
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4947      	ldr	r1, [pc, #284]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d055      	beq.n	800439a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042ee:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	4940      	ldr	r1, [pc, #256]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d107      	bne.n	8004318 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004308:	4b3c      	ldr	r3, [pc, #240]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d121      	bne.n	8004358 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0f6      	b.n	8004506 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d107      	bne.n	8004330 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004320:	4b36      	ldr	r3, [pc, #216]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d115      	bne.n	8004358 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0ea      	b.n	8004506 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d107      	bne.n	8004348 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004338:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0de      	b.n	8004506 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004348:	4b2c      	ldr	r3, [pc, #176]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0d6      	b.n	8004506 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004358:	4b28      	ldr	r3, [pc, #160]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f023 0207 	bic.w	r2, r3, #7
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4925      	ldr	r1, [pc, #148]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 8004366:	4313      	orrs	r3, r2
 8004368:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436a:	f7fc f985 	bl	8000678 <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004370:	e00a      	b.n	8004388 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004372:	f7fc f981 	bl	8000678 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e0be      	b.n	8004506 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004388:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	429a      	cmp	r2, r3
 8004398:	d1eb      	bne.n	8004372 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d010      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	4b14      	ldr	r3, [pc, #80]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d208      	bcs.n	80043c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b6:	4b11      	ldr	r3, [pc, #68]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f023 020f 	bic.w	r2, r3, #15
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	490e      	ldr	r1, [pc, #56]	; (80043fc <HAL_RCC_ClockConfig+0x244>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_ClockConfig+0x240>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d214      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <HAL_RCC_ClockConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 020f 	bic.w	r2, r3, #15
 80043de:	4906      	ldr	r1, [pc, #24]	; (80043f8 <HAL_RCC_ClockConfig+0x240>)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <HAL_RCC_ClockConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e086      	b.n	8004506 <HAL_RCC_ClockConfig+0x34e>
 80043f8:	52002000 	.word	0x52002000
 80043fc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d010      	beq.n	800442e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	4b3f      	ldr	r3, [pc, #252]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004418:	429a      	cmp	r2, r3
 800441a:	d208      	bcs.n	800442e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800441c:	4b3c      	ldr	r3, [pc, #240]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	4939      	ldr	r1, [pc, #228]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 800442a:	4313      	orrs	r3, r2
 800442c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d010      	beq.n	800445c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	4b34      	ldr	r3, [pc, #208]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004446:	429a      	cmp	r2, r3
 8004448:	d208      	bcs.n	800445c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800444a:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	492e      	ldr	r1, [pc, #184]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 8004458:	4313      	orrs	r3, r2
 800445a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699a      	ldr	r2, [r3, #24]
 800446c:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004474:	429a      	cmp	r2, r3
 8004476:	d208      	bcs.n	800448a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004478:	4b25      	ldr	r3, [pc, #148]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	4922      	ldr	r1, [pc, #136]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 8004486:	4313      	orrs	r3, r2
 8004488:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d010      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d208      	bcs.n	80044b8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80044a6:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	4917      	ldr	r1, [pc, #92]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044b8:	f000 f834 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b14      	ldr	r3, [pc, #80]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	4912      	ldr	r1, [pc, #72]	; (8004514 <HAL_RCC_ClockConfig+0x35c>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
 80044d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044d6:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <HAL_RCC_ClockConfig+0x358>)
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	4a0d      	ldr	r2, [pc, #52]	; (8004514 <HAL_RCC_ClockConfig+0x35c>)
 80044e0:	5cd3      	ldrb	r3, [r2, r3]
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ec:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <HAL_RCC_ClockConfig+0x360>)
 80044ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044f0:	4a0a      	ldr	r2, [pc, #40]	; (800451c <HAL_RCC_ClockConfig+0x364>)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <HAL_RCC_ClockConfig+0x368>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f009 fab0 	bl	800da60 <HAL_InitTick>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	58024400 	.word	0x58024400
 8004514:	0800f914 	.word	0x0800f914
 8004518:	24000010 	.word	0x24000010
 800451c:	2400000c 	.word	0x2400000c
 8004520:	24000000 	.word	0x24000000

08004524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	b089      	sub	sp, #36	; 0x24
 8004528:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800452a:	4bb3      	ldr	r3, [pc, #716]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004532:	2b18      	cmp	r3, #24
 8004534:	f200 8155 	bhi.w	80047e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <HAL_RCC_GetSysClockFreq+0x1c>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	080045a5 	.word	0x080045a5
 8004544:	080047e3 	.word	0x080047e3
 8004548:	080047e3 	.word	0x080047e3
 800454c:	080047e3 	.word	0x080047e3
 8004550:	080047e3 	.word	0x080047e3
 8004554:	080047e3 	.word	0x080047e3
 8004558:	080047e3 	.word	0x080047e3
 800455c:	080047e3 	.word	0x080047e3
 8004560:	080045cb 	.word	0x080045cb
 8004564:	080047e3 	.word	0x080047e3
 8004568:	080047e3 	.word	0x080047e3
 800456c:	080047e3 	.word	0x080047e3
 8004570:	080047e3 	.word	0x080047e3
 8004574:	080047e3 	.word	0x080047e3
 8004578:	080047e3 	.word	0x080047e3
 800457c:	080047e3 	.word	0x080047e3
 8004580:	080045d1 	.word	0x080045d1
 8004584:	080047e3 	.word	0x080047e3
 8004588:	080047e3 	.word	0x080047e3
 800458c:	080047e3 	.word	0x080047e3
 8004590:	080047e3 	.word	0x080047e3
 8004594:	080047e3 	.word	0x080047e3
 8004598:	080047e3 	.word	0x080047e3
 800459c:	080047e3 	.word	0x080047e3
 80045a0:	080045d7 	.word	0x080045d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045a4:	4b94      	ldr	r3, [pc, #592]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045b0:	4b91      	ldr	r3, [pc, #580]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	08db      	lsrs	r3, r3, #3
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	4a90      	ldr	r2, [pc, #576]	; (80047fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80045c2:	e111      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80045c4:	4b8d      	ldr	r3, [pc, #564]	; (80047fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045c6:	61bb      	str	r3, [r7, #24]
    break;
 80045c8:	e10e      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80045ca:	4b8d      	ldr	r3, [pc, #564]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045cc:	61bb      	str	r3, [r7, #24]
    break;
 80045ce:	e10b      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80045d0:	4b8c      	ldr	r3, [pc, #560]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045d2:	61bb      	str	r3, [r7, #24]
    break;
 80045d4:	e108      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045d6:	4b88      	ldr	r3, [pc, #544]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80045e0:	4b85      	ldr	r3, [pc, #532]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045ec:	4b82      	ldr	r3, [pc, #520]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045f6:	4b80      	ldr	r3, [pc, #512]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	08db      	lsrs	r3, r3, #3
 80045fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80e1 	beq.w	80047dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b02      	cmp	r3, #2
 800461e:	f000 8083 	beq.w	8004728 <HAL_RCC_GetSysClockFreq+0x204>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b02      	cmp	r3, #2
 8004626:	f200 80a1 	bhi.w	800476c <HAL_RCC_GetSysClockFreq+0x248>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0x114>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d056      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004636:	e099      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004638:	4b6f      	ldr	r3, [pc, #444]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d02d      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004644:	4b6c      	ldr	r3, [pc, #432]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	08db      	lsrs	r3, r3, #3
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	4a6b      	ldr	r2, [pc, #428]	; (80047fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
 8004654:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466e:	4b62      	ldr	r3, [pc, #392]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004682:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004808 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800469e:	e087      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800480c <HAL_RCC_GetSysClockFreq+0x2e8>
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004808 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046e2:	e065      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004810 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b40      	ldr	r3, [pc, #256]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a02 	vldr	s12, [r7, #8]
 800470a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004808 <HAL_RCC_GetSysClockFreq+0x2e4>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004726:	e043      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004814 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473a:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474a:	ed97 6a02 	vldr	s12, [r7, #8]
 800474e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004808 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800476a:	e021      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004810 <HAL_RCC_GetSysClockFreq+0x2ec>
 800477a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004792:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004808 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80047b0:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	0a5b      	lsrs	r3, r3, #9
 80047b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ba:	3301      	adds	r3, #1
 80047bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d4:	ee17 3a90 	vmov	r3, s15
 80047d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80047da:	e005      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	61bb      	str	r3, [r7, #24]
    break;
 80047e0:	e002      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80047e2:	4b07      	ldr	r3, [pc, #28]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047e4:	61bb      	str	r3, [r7, #24]
    break;
 80047e6:	bf00      	nop
  }

  return sysclockfreq;
 80047e8:	69bb      	ldr	r3, [r7, #24]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3724      	adds	r7, #36	; 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	58024400 	.word	0x58024400
 80047fc:	03d09000 	.word	0x03d09000
 8004800:	003d0900 	.word	0x003d0900
 8004804:	017d7840 	.word	0x017d7840
 8004808:	46000000 	.word	0x46000000
 800480c:	4c742400 	.word	0x4c742400
 8004810:	4a742400 	.word	0x4a742400
 8004814:	4bbebc20 	.word	0x4bbebc20

08004818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800481e:	f7ff fe81 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8004822:	4602      	mov	r2, r0
 8004824:	4b10      	ldr	r3, [pc, #64]	; (8004868 <HAL_RCC_GetHCLKFreq+0x50>)
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	490f      	ldr	r1, [pc, #60]	; (800486c <HAL_RCC_GetHCLKFreq+0x54>)
 8004830:	5ccb      	ldrb	r3, [r1, r3]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <HAL_RCC_GetHCLKFreq+0x50>)
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	4a09      	ldr	r2, [pc, #36]	; (800486c <HAL_RCC_GetHCLKFreq+0x54>)
 8004846:	5cd3      	ldrb	r3, [r2, r3]
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	fa22 f303 	lsr.w	r3, r2, r3
 8004852:	4a07      	ldr	r2, [pc, #28]	; (8004870 <HAL_RCC_GetHCLKFreq+0x58>)
 8004854:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004856:	4a07      	ldr	r2, [pc, #28]	; (8004874 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <HAL_RCC_GetHCLKFreq+0x58>)
 800485e:	681b      	ldr	r3, [r3, #0]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	58024400 	.word	0x58024400
 800486c:	0800f914 	.word	0x0800f914
 8004870:	24000010 	.word	0x24000010
 8004874:	2400000c 	.word	0x2400000c

08004878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800487c:	f7ff ffcc 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	4904      	ldr	r1, [pc, #16]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	58024400 	.word	0x58024400
 80048a0:	0800f914 	.word	0x0800f914

080048a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80048a8:	f7ff ffb6 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	0a1b      	lsrs	r3, r3, #8
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4904      	ldr	r1, [pc, #16]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ba:	5ccb      	ldrb	r3, [r1, r3]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	58024400 	.word	0x58024400
 80048cc:	0800f914 	.word	0x0800f914

080048d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	223f      	movs	r2, #63	; 0x3f
 80048de:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048e0:	4b1a      	ldr	r3, [pc, #104]	; (800494c <HAL_RCC_GetClockConfig+0x7c>)
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0207 	and.w	r2, r3, #7
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80048ec:	4b17      	ldr	r3, [pc, #92]	; (800494c <HAL_RCC_GetClockConfig+0x7c>)
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80048f8:	4b14      	ldr	r3, [pc, #80]	; (800494c <HAL_RCC_GetClockConfig+0x7c>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f003 020f 	and.w	r2, r3, #15
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004904:	4b11      	ldr	r3, [pc, #68]	; (800494c <HAL_RCC_GetClockConfig+0x7c>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004910:	4b0e      	ldr	r3, [pc, #56]	; (800494c <HAL_RCC_GetClockConfig+0x7c>)
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_RCC_GetClockConfig+0x7c>)
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004928:	4b08      	ldr	r3, [pc, #32]	; (800494c <HAL_RCC_GetClockConfig+0x7c>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_RCC_GetClockConfig+0x80>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	601a      	str	r2, [r3, #0]
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	58024400 	.word	0x58024400
 8004950:	52002000 	.word	0x52002000

08004954 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800495c:	2300      	movs	r3, #0
 800495e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004960:	2300      	movs	r3, #0
 8004962:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d03f      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004974:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004978:	d02a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800497a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800497e:	d824      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004984:	d018      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800498a:	d81e      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004994:	d007      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004996:	e018      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004998:	4bab      	ldr	r3, [pc, #684]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	4aaa      	ldr	r2, [pc, #680]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800499e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049a4:	e015      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3304      	adds	r3, #4
 80049aa:	2102      	movs	r1, #2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 f9cf 	bl	8005d50 <RCCEx_PLL2_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049b6:	e00c      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3324      	adds	r3, #36	; 0x24
 80049bc:	2102      	movs	r1, #2
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 fa78 	bl	8005eb4 <RCCEx_PLL3_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	75fb      	strb	r3, [r7, #23]
      break;
 80049ce:	e000      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d109      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049d8:	4b9b      	ldr	r3, [pc, #620]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e4:	4998      	ldr	r1, [pc, #608]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	650b      	str	r3, [r1, #80]	; 0x50
 80049ea:	e001      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d03d      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d826      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a21 	.word	0x08004a21
 8004a10:	08004a2f 	.word	0x08004a2f
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004a59 	.word	0x08004a59
 8004a1c:	08004a59 	.word	0x08004a59
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a20:	4b89      	ldr	r3, [pc, #548]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	4a88      	ldr	r2, [pc, #544]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a2c:	e015      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3304      	adds	r3, #4
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 f98b 	bl	8005d50 <RCCEx_PLL2_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a3e:	e00c      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3324      	adds	r3, #36	; 0x24
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 fa34 	bl	8005eb4 <RCCEx_PLL3_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a50:	e003      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	75fb      	strb	r3, [r7, #23]
      break;
 8004a56:	e000      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a60:	4b79      	ldr	r3, [pc, #484]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a64:	f023 0207 	bic.w	r2, r3, #7
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	4976      	ldr	r1, [pc, #472]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	650b      	str	r3, [r1, #80]	; 0x50
 8004a72:	e001      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d042      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8c:	d02b      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a92:	d825      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a94:	2bc0      	cmp	r3, #192	; 0xc0
 8004a96:	d028      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a98:	2bc0      	cmp	r3, #192	; 0xc0
 8004a9a:	d821      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a9c:	2b80      	cmp	r3, #128	; 0x80
 8004a9e:	d016      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004aa0:	2b80      	cmp	r3, #128	; 0x80
 8004aa2:	d81d      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d007      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004aac:	e018      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aae:	4b66      	ldr	r3, [pc, #408]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	4a65      	ldr	r2, [pc, #404]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004aba:	e017      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 f944 	bl	8005d50 <RCCEx_PLL2_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004acc:	e00e      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3324      	adds	r3, #36	; 0x24
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 f9ed 	bl	8005eb4 <RCCEx_PLL3_Config>
 8004ada:	4603      	mov	r3, r0
 8004adc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ade:	e005      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004af2:	4b55      	ldr	r3, [pc, #340]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	4952      	ldr	r1, [pc, #328]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	650b      	str	r3, [r1, #80]	; 0x50
 8004b04:	e001      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d049      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b20:	d030      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b26:	d82a      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b2c:	d02c      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004b2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b32:	d824      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b38:	d018      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b3e:	d81e      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b48:	d007      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004b4a:	e018      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b4c:	4b3e      	ldr	r3, [pc, #248]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a3d      	ldr	r2, [pc, #244]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b58:	e017      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 f8f5 	bl	8005d50 <RCCEx_PLL2_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b6a:	e00e      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3324      	adds	r3, #36	; 0x24
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 f99e 	bl	8005eb4 <RCCEx_PLL3_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b7c:	e005      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	75fb      	strb	r3, [r7, #23]
      break;
 8004b82:	e002      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b9e:	492a      	ldr	r1, [pc, #168]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	658b      	str	r3, [r1, #88]	; 0x58
 8004ba4:	e001      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d04c      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bc0:	d030      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bc6:	d82a      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bcc:	d02c      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004bce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bd2:	d824      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bd8:	d018      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bde:	d81e      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004be8:	d007      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004bea:	e018      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4b16      	ldr	r3, [pc, #88]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4a15      	ldr	r2, [pc, #84]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bf8:	e017      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 f8a5 	bl	8005d50 <RCCEx_PLL2_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c0a:	e00e      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3324      	adds	r3, #36	; 0x24
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 f94e 	bl	8005eb4 <RCCEx_PLL3_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c1c:	e005      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
      break;
 8004c22:	e002      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004c24:	bf00      	nop
 8004c26:	e000      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10d      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c3e:	4902      	ldr	r1, [pc, #8]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	658b      	str	r3, [r1, #88]	; 0x58
 8004c44:	e004      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004c46:	bf00      	nop
 8004c48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d032      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c60:	2b30      	cmp	r3, #48	; 0x30
 8004c62:	d01c      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004c64:	2b30      	cmp	r3, #48	; 0x30
 8004c66:	d817      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d00c      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d813      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d016      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d10f      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c78:	4baf      	ldr	r3, [pc, #700]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	4aae      	ldr	r2, [pc, #696]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c84:	e00e      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 f85f 	bl	8005d50 <RCCEx_PLL2_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c96:	e005      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9c:	e002      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004c9e:	bf00      	nop
 8004ca0:	e000      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004ca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004caa:	4ba3      	ldr	r3, [pc, #652]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb6:	49a0      	ldr	r1, [pc, #640]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004cbc:	e001      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d047      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cd6:	d030      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cdc:	d82a      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004cde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ce2:	d02c      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004ce4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ce8:	d824      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cee:	d018      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf4:	d81e      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfe:	d007      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004d00:	e018      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d02:	4b8d      	ldr	r3, [pc, #564]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	4a8c      	ldr	r2, [pc, #560]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d0e:	e017      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 f81a 	bl	8005d50 <RCCEx_PLL2_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d20:	e00e      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3324      	adds	r3, #36	; 0x24
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 f8c3 	bl	8005eb4 <RCCEx_PLL3_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d32:	e005      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75fb      	strb	r3, [r7, #23]
      break;
 8004d38:	e002      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004d3a:	bf00      	nop
 8004d3c:	e000      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d46:	4b7c      	ldr	r3, [pc, #496]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d52:	4979      	ldr	r1, [pc, #484]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	650b      	str	r3, [r1, #80]	; 0x50
 8004d58:	e001      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5a:	7dfb      	ldrb	r3, [r7, #23]
 8004d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d049      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d72:	d02e      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d78:	d828      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d7e:	d02a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004d80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d84:	d822      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d8a:	d026      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d90:	d81c      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d96:	d010      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d9c:	d816      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01d      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da6:	d111      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 ffce 	bl	8005d50 <RCCEx_PLL2_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004db8:	e012      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3324      	adds	r3, #36	; 0x24
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f001 f877 	bl	8005eb4 <RCCEx_PLL3_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004dca:	e009      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd0:	e006      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004dd2:	bf00      	nop
 8004dd4:	e004      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004de6:	4b54      	ldr	r3, [pc, #336]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df2:	4951      	ldr	r1, [pc, #324]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	650b      	str	r3, [r1, #80]	; 0x50
 8004df8:	e001      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d04b      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e14:	d02e      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e1a:	d828      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d02a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e26:	d822      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e2c:	d026      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004e2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e32:	d81c      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e38:	d010      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e3e:	d816      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01d      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e48:	d111      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 ff7d 	bl	8005d50 <RCCEx_PLL2_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e5a:	e012      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3324      	adds	r3, #36	; 0x24
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 f826 	bl	8005eb4 <RCCEx_PLL3_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e6c:	e009      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
      break;
 8004e72:	e006      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e74:	bf00      	nop
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e78:	bf00      	nop
 8004e7a:	e002      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e7c:	bf00      	nop
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e88:	4b2b      	ldr	r3, [pc, #172]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e96:	4928      	ldr	r1, [pc, #160]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	658b      	str	r3, [r1, #88]	; 0x58
 8004e9c:	e001      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d02f      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ebc:	d814      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d015      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec6:	d10f      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec8:	4b1b      	ldr	r3, [pc, #108]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ed4:	e00c      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	2101      	movs	r1, #1
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 ff37 	bl	8005d50 <RCCEx_PLL2_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ee6:	e003      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	75fb      	strb	r3, [r7, #23]
      break;
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f02:	490d      	ldr	r1, [pc, #52]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	650b      	str	r3, [r1, #80]	; 0x50
 8004f08:	e001      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d033      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d81c      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f63 	.word	0x08004f63
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f4b 	.word	0x08004f4b
 8004f34:	08004f63 	.word	0x08004f63
 8004f38:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f3c:	4bb8      	ldr	r3, [pc, #736]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	4ab7      	ldr	r2, [pc, #732]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f48:	e00c      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	2102      	movs	r1, #2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fefd 	bl	8005d50 <RCCEx_PLL2_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f5a:	e003      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f6a:	4bad      	ldr	r3, [pc, #692]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6e:	f023 0203 	bic.w	r2, r3, #3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	49aa      	ldr	r1, [pc, #680]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f7c:	e001      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8086 	beq.w	800509c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f90:	4ba4      	ldr	r3, [pc, #656]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4aa3      	ldr	r2, [pc, #652]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f9c:	f7fb fb6c 	bl	8000678 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fa2:	e009      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa4:	f7fb fb68 	bl	8000678 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b64      	cmp	r3, #100	; 0x64
 8004fb0:	d902      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	75fb      	strb	r3, [r7, #23]
        break;
 8004fb6:	e005      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb8:	4b9a      	ldr	r3, [pc, #616]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0ef      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d166      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fca:	4b95      	ldr	r3, [pc, #596]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fd4:	4053      	eors	r3, r2
 8004fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d013      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fde:	4b90      	ldr	r3, [pc, #576]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fe8:	4b8d      	ldr	r3, [pc, #564]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	4a8c      	ldr	r2, [pc, #560]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff4:	4b8a      	ldr	r3, [pc, #552]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	4a89      	ldr	r2, [pc, #548]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005000:	4a87      	ldr	r2, [pc, #540]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800500c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005010:	d115      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005012:	f7fb fb31 	bl	8000678 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005018:	e00b      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501a:	f7fb fb2d 	bl	8000678 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f241 3288 	movw	r2, #5000	; 0x1388
 8005028:	4293      	cmp	r3, r2
 800502a:	d902      	bls.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	75fb      	strb	r3, [r7, #23]
            break;
 8005030:	e005      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005032:	4b7b      	ldr	r3, [pc, #492]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0ed      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800503e:	7dfb      	ldrb	r3, [r7, #23]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d126      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005052:	d10d      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005054:	4b72      	ldr	r3, [pc, #456]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005062:	0919      	lsrs	r1, r3, #4
 8005064:	4b70      	ldr	r3, [pc, #448]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005066:	400b      	ands	r3, r1
 8005068:	496d      	ldr	r1, [pc, #436]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800506a:	4313      	orrs	r3, r2
 800506c:	610b      	str	r3, [r1, #16]
 800506e:	e005      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005070:	4b6b      	ldr	r3, [pc, #428]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	4a6a      	ldr	r2, [pc, #424]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005076:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800507a:	6113      	str	r3, [r2, #16]
 800507c:	4b68      	ldr	r3, [pc, #416]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800507e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800508a:	4965      	ldr	r1, [pc, #404]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800508c:	4313      	orrs	r3, r2
 800508e:	670b      	str	r3, [r1, #112]	; 0x70
 8005090:	e004      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	75bb      	strb	r3, [r7, #22]
 8005096:	e001      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005098:	7dfb      	ldrb	r3, [r7, #23]
 800509a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d07e      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ac:	2b28      	cmp	r3, #40	; 0x28
 80050ae:	d867      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	08005187 	.word	0x08005187
 80050bc:	08005181 	.word	0x08005181
 80050c0:	08005181 	.word	0x08005181
 80050c4:	08005181 	.word	0x08005181
 80050c8:	08005181 	.word	0x08005181
 80050cc:	08005181 	.word	0x08005181
 80050d0:	08005181 	.word	0x08005181
 80050d4:	08005181 	.word	0x08005181
 80050d8:	0800515d 	.word	0x0800515d
 80050dc:	08005181 	.word	0x08005181
 80050e0:	08005181 	.word	0x08005181
 80050e4:	08005181 	.word	0x08005181
 80050e8:	08005181 	.word	0x08005181
 80050ec:	08005181 	.word	0x08005181
 80050f0:	08005181 	.word	0x08005181
 80050f4:	08005181 	.word	0x08005181
 80050f8:	0800516f 	.word	0x0800516f
 80050fc:	08005181 	.word	0x08005181
 8005100:	08005181 	.word	0x08005181
 8005104:	08005181 	.word	0x08005181
 8005108:	08005181 	.word	0x08005181
 800510c:	08005181 	.word	0x08005181
 8005110:	08005181 	.word	0x08005181
 8005114:	08005181 	.word	0x08005181
 8005118:	08005187 	.word	0x08005187
 800511c:	08005181 	.word	0x08005181
 8005120:	08005181 	.word	0x08005181
 8005124:	08005181 	.word	0x08005181
 8005128:	08005181 	.word	0x08005181
 800512c:	08005181 	.word	0x08005181
 8005130:	08005181 	.word	0x08005181
 8005134:	08005181 	.word	0x08005181
 8005138:	08005187 	.word	0x08005187
 800513c:	08005181 	.word	0x08005181
 8005140:	08005181 	.word	0x08005181
 8005144:	08005181 	.word	0x08005181
 8005148:	08005181 	.word	0x08005181
 800514c:	08005181 	.word	0x08005181
 8005150:	08005181 	.word	0x08005181
 8005154:	08005181 	.word	0x08005181
 8005158:	08005187 	.word	0x08005187
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	2101      	movs	r1, #1
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fdf4 	bl	8005d50 <RCCEx_PLL2_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800516c:	e00c      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3324      	adds	r3, #36	; 0x24
 8005172:	2101      	movs	r1, #1
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fe9d 	bl	8005eb4 <RCCEx_PLL3_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800517e:	e003      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
      break;
 8005184:	e000      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800518e:	4b24      	ldr	r3, [pc, #144]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800519a:	4921      	ldr	r1, [pc, #132]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	654b      	str	r3, [r1, #84]	; 0x54
 80051a0:	e001      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d03e      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d820      	bhi.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	08005203 	.word	0x08005203
 80051c4:	080051d9 	.word	0x080051d9
 80051c8:	080051eb 	.word	0x080051eb
 80051cc:	08005203 	.word	0x08005203
 80051d0:	08005203 	.word	0x08005203
 80051d4:	08005203 	.word	0x08005203
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	2101      	movs	r1, #1
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fdb6 	bl	8005d50 <RCCEx_PLL2_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051e8:	e00c      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3324      	adds	r3, #36	; 0x24
 80051ee:	2101      	movs	r1, #1
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fe5f 	bl	8005eb4 <RCCEx_PLL3_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051fa:	e003      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005200:	e000      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d110      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	f023 0207 	bic.w	r2, r3, #7
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005216:	4902      	ldr	r1, [pc, #8]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	654b      	str	r3, [r1, #84]	; 0x54
 800521c:	e008      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800521e:	bf00      	nop
 8005220:	58024400 	.word	0x58024400
 8005224:	58024800 	.word	0x58024800
 8005228:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d039      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005242:	2b05      	cmp	r3, #5
 8005244:	d820      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	0800528f 	.word	0x0800528f
 8005250:	08005265 	.word	0x08005265
 8005254:	08005277 	.word	0x08005277
 8005258:	0800528f 	.word	0x0800528f
 800525c:	0800528f 	.word	0x0800528f
 8005260:	0800528f 	.word	0x0800528f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	2101      	movs	r1, #1
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fd70 	bl	8005d50 <RCCEx_PLL2_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005274:	e00c      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3324      	adds	r3, #36	; 0x24
 800527a:	2101      	movs	r1, #1
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fe19 	bl	8005eb4 <RCCEx_PLL3_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005286:	e003      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
      break;
 800528c:	e000      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800528e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005290:	7dfb      	ldrb	r3, [r7, #23]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005296:	4bb7      	ldr	r3, [pc, #732]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529a:	f023 0207 	bic.w	r2, r3, #7
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a4:	49b3      	ldr	r1, [pc, #716]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	658b      	str	r3, [r1, #88]	; 0x58
 80052aa:	e001      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ac:	7dfb      	ldrb	r3, [r7, #23]
 80052ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d04b      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c6:	d02e      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80052c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052cc:	d828      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d02a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d822      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80052da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052de:	d026      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80052e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052e4:	d81c      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80052e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ea:	d010      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80052ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f0:	d816      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d01d      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80052f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052fa:	d111      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fd24 	bl	8005d50 <RCCEx_PLL2_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800530c:	e012      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3324      	adds	r3, #36	; 0x24
 8005312:	2102      	movs	r1, #2
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fdcd 	bl	8005eb4 <RCCEx_PLL3_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800531e:	e009      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	75fb      	strb	r3, [r7, #23]
      break;
 8005324:	e006      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005326:	bf00      	nop
 8005328:	e004      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800532a:	bf00      	nop
 800532c:	e002      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800532e:	bf00      	nop
 8005330:	e000      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800533a:	4b8e      	ldr	r3, [pc, #568]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005348:	498a      	ldr	r1, [pc, #552]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800534a:	4313      	orrs	r3, r2
 800534c:	654b      	str	r3, [r1, #84]	; 0x54
 800534e:	e001      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d04b      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800536a:	d02e      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800536c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005370:	d828      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005376:	d02a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537c:	d822      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800537e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005382:	d026      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005388:	d81c      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800538a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800538e:	d010      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005394:	d816      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01d      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800539a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800539e:	d111      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	2100      	movs	r1, #0
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fcd2 	bl	8005d50 <RCCEx_PLL2_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053b0:	e012      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3324      	adds	r3, #36	; 0x24
 80053b6:	2102      	movs	r1, #2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fd7b 	bl	8005eb4 <RCCEx_PLL3_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053c2:	e009      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	75fb      	strb	r3, [r7, #23]
      break;
 80053c8:	e006      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80053ca:	bf00      	nop
 80053cc:	e004      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80053ce:	bf00      	nop
 80053d0:	e002      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80053d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053de:	4b65      	ldr	r3, [pc, #404]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ec:	4961      	ldr	r1, [pc, #388]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	658b      	str	r3, [r1, #88]	; 0x58
 80053f2:	e001      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b00      	cmp	r3, #0
 8005402:	d04b      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800540a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800540e:	d02e      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005410:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005414:	d828      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541a:	d02a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005420:	d822      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005422:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005426:	d026      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005428:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800542c:	d81c      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800542e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005432:	d010      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005438:	d816      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01d      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800543e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005442:	d111      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	2100      	movs	r1, #0
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fc80 	bl	8005d50 <RCCEx_PLL2_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005454:	e012      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3324      	adds	r3, #36	; 0x24
 800545a:	2102      	movs	r1, #2
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fd29 	bl	8005eb4 <RCCEx_PLL3_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005466:	e009      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	75fb      	strb	r3, [r7, #23]
      break;
 800546c:	e006      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800546e:	bf00      	nop
 8005470:	e004      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005472:	bf00      	nop
 8005474:	e002      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800547a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800547c:	7dfb      	ldrb	r3, [r7, #23]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005482:	4b3c      	ldr	r3, [pc, #240]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005490:	4938      	ldr	r1, [pc, #224]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005492:	4313      	orrs	r3, r2
 8005494:	658b      	str	r3, [r1, #88]	; 0x58
 8005496:	e001      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b2:	d10a      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3324      	adds	r3, #36	; 0x24
 80054b8:	2102      	movs	r1, #2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fcfa 	bl	8005eb4 <RCCEx_PLL3_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054ca:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d8:	4926      	ldr	r1, [pc, #152]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f4:	d10a      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3324      	adds	r3, #36	; 0x24
 80054fa:	2102      	movs	r1, #2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fcd9 	bl	8005eb4 <RCCEx_PLL3_Config>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800550c:	4b19      	ldr	r3, [pc, #100]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800550e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800551a:	4916      	ldr	r1, [pc, #88]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800551c:	4313      	orrs	r3, r2
 800551e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d036      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005536:	d01f      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800553c:	d817      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005546:	d009      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005548:	e011      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3304      	adds	r3, #4
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fbfd 	bl	8005d50 <RCCEx_PLL2_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800555a:	e00e      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3324      	adds	r3, #36	; 0x24
 8005560:	2102      	movs	r1, #2
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fca6 	bl	8005eb4 <RCCEx_PLL3_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800556c:	e005      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
      break;
 8005572:	e002      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005574:	58024400 	.word	0x58024400
      break;
 8005578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800557a:	7dfb      	ldrb	r3, [r7, #23]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005580:	4b93      	ldr	r3, [pc, #588]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800558e:	4990      	ldr	r1, [pc, #576]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005590:	4313      	orrs	r3, r2
 8005592:	658b      	str	r3, [r1, #88]	; 0x58
 8005594:	e001      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d033      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055b0:	d01c      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80055b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055b6:	d816      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80055b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055bc:	d003      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80055be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055c2:	d007      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80055c4:	e00f      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c6:	4b82      	ldr	r3, [pc, #520]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	4a81      	ldr	r2, [pc, #516]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80055d2:	e00c      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3324      	adds	r3, #36	; 0x24
 80055d8:	2101      	movs	r1, #1
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fc6a 	bl	8005eb4 <RCCEx_PLL3_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80055e4:	e003      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
      break;
 80055ea:	e000      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80055ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055f4:	4b76      	ldr	r3, [pc, #472]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005602:	4973      	ldr	r1, [pc, #460]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005604:	4313      	orrs	r3, r2
 8005606:	654b      	str	r3, [r1, #84]	; 0x54
 8005608:	e001      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d029      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005626:	d007      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005628:	e00f      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562a:	4b69      	ldr	r3, [pc, #420]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	4a68      	ldr	r2, [pc, #416]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005636:	e00b      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3304      	adds	r3, #4
 800563c:	2102      	movs	r1, #2
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fb86 	bl	8005d50 <RCCEx_PLL2_Config>
 8005644:	4603      	mov	r3, r0
 8005646:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005648:	e002      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	75fb      	strb	r3, [r7, #23]
      break;
 800564e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005656:	4b5e      	ldr	r3, [pc, #376]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	495b      	ldr	r1, [pc, #364]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005664:	4313      	orrs	r3, r2
 8005666:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005668:	e001      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566a:	7dfb      	ldrb	r3, [r7, #23]
 800566c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3324      	adds	r3, #36	; 0x24
 800567e:	2102      	movs	r1, #2
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fc17 	bl	8005eb4 <RCCEx_PLL3_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d030      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056a4:	d017      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80056a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056aa:	d811      	bhi.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80056ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b0:	d013      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80056b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b6:	d80b      	bhi.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d010      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80056bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c0:	d106      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c2:	4b43      	ldr	r3, [pc, #268]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	4a42      	ldr	r2, [pc, #264]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80056ce:	e007      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	75fb      	strb	r3, [r7, #23]
      break;
 80056d4:	e004      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80056d6:	bf00      	nop
 80056d8:	e002      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80056da:	bf00      	nop
 80056dc:	e000      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80056de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056e6:	4b3a      	ldr	r3, [pc, #232]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f2:	4937      	ldr	r1, [pc, #220]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	654b      	str	r3, [r1, #84]	; 0x54
 80056f8:	e001      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800570c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	492e      	ldr	r1, [pc, #184]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d009      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005728:	4b29      	ldr	r3, [pc, #164]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005736:	4926      	ldr	r1, [pc, #152]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005738:	4313      	orrs	r3, r2
 800573a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005748:	4b21      	ldr	r3, [pc, #132]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800574a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800574c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005754:	491e      	ldr	r1, [pc, #120]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00d      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005766:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	4a19      	ldr	r2, [pc, #100]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800576c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005770:	6113      	str	r3, [r2, #16]
 8005772:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800577c:	4914      	ldr	r1, [pc, #80]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800577e:	4313      	orrs	r3, r2
 8005780:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	da08      	bge.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800578a:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005796:	490e      	ldr	r1, [pc, #56]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005798:	4313      	orrs	r3, r2
 800579a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	4906      	ldr	r1, [pc, #24]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80057bc:	7dbb      	ldrb	r3, [r7, #22]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e000      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	58024400 	.word	0x58024400

080057d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80057d8:	f7ff f81e 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 80057dc:	4602      	mov	r2, r0
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	4904      	ldr	r1, [pc, #16]	; (80057fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80057ea:	5ccb      	ldrb	r3, [r1, r3]
 80057ec:	f003 031f 	and.w	r3, r3, #31
 80057f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	58024400 	.word	0x58024400
 80057fc:	0800f914 	.word	0x0800f914

08005800 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005800:	b480      	push	{r7}
 8005802:	b089      	sub	sp, #36	; 0x24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005808:	4ba1      	ldr	r3, [pc, #644]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005812:	4b9f      	ldr	r3, [pc, #636]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	0b1b      	lsrs	r3, r3, #12
 8005818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800581c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800581e:	4b9c      	ldr	r3, [pc, #624]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800582a:	4b99      	ldr	r3, [pc, #612]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582e:	08db      	lsrs	r3, r3, #3
 8005830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8111 	beq.w	8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b02      	cmp	r3, #2
 8005852:	f000 8083 	beq.w	800595c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b02      	cmp	r3, #2
 800585a:	f200 80a1 	bhi.w	80059a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d056      	beq.n	8005918 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800586a:	e099      	b.n	80059a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800586c:	4b88      	ldr	r3, [pc, #544]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d02d      	beq.n	80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005878:	4b85      	ldr	r3, [pc, #532]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	08db      	lsrs	r3, r3, #3
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	4a84      	ldr	r2, [pc, #528]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
 8005888:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a2:	4b7b      	ldr	r3, [pc, #492]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80058d2:	e087      	b.n	80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e6:	4b6a      	ldr	r3, [pc, #424]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005916:	e065      	b.n	80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592a:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593a:	ed97 6a03 	vldr	s12, [r7, #12]
 800593e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800595a:	e043      	b.n	80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005966:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800596a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596e:	4b48      	ldr	r3, [pc, #288]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005982:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800599e:	e021      	b.n	80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b2:	4b37      	ldr	r3, [pc, #220]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80059e4:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	0a5b      	lsrs	r3, r3, #9
 80059ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0a:	ee17 2a90 	vmov	r2, s15
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005a12:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a38:	ee17 2a90 	vmov	r2, s15
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005a40:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	0e1b      	lsrs	r3, r3, #24
 8005a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a66:	ee17 2a90 	vmov	r2, s15
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a6e:	e008      	b.n	8005a82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	609a      	str	r2, [r3, #8]
}
 8005a82:	bf00      	nop
 8005a84:	3724      	adds	r7, #36	; 0x24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	58024400 	.word	0x58024400
 8005a94:	03d09000 	.word	0x03d09000
 8005a98:	46000000 	.word	0x46000000
 8005a9c:	4c742400 	.word	0x4c742400
 8005aa0:	4a742400 	.word	0x4a742400
 8005aa4:	4bbebc20 	.word	0x4bbebc20

08005aa8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b089      	sub	sp, #36	; 0x24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ab0:	4ba1      	ldr	r3, [pc, #644]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005aba:	4b9f      	ldr	r3, [pc, #636]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	0d1b      	lsrs	r3, r3, #20
 8005ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ac6:	4b9c      	ldr	r3, [pc, #624]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005ad2:	4b99      	ldr	r3, [pc, #612]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	08db      	lsrs	r3, r3, #3
 8005ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8111 	beq.w	8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	f000 8083 	beq.w	8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	f200 80a1 	bhi.w	8005c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d056      	beq.n	8005bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b12:	e099      	b.n	8005c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b14:	4b88      	ldr	r3, [pc, #544]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d02d      	beq.n	8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b20:	4b85      	ldr	r3, [pc, #532]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	08db      	lsrs	r3, r3, #3
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	4a84      	ldr	r2, [pc, #528]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b30:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	ee07 3a90 	vmov	s15, r3
 8005b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b4a:	4b7b      	ldr	r3, [pc, #492]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b7a:	e087      	b.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b8e:	4b6a      	ldr	r3, [pc, #424]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ba2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bbe:	e065      	b.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd2:	4b59      	ldr	r3, [pc, #356]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c02:	e043      	b.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	ee07 3a90 	vmov	s15, r3
 8005c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c16:	4b48      	ldr	r3, [pc, #288]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c46:	e021      	b.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5a:	4b37      	ldr	r3, [pc, #220]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005c8c:	4b2a      	ldr	r3, [pc, #168]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	0a5b      	lsrs	r3, r3, #9
 8005c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb2:	ee17 2a90 	vmov	r2, s15
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005cba:	4b1f      	ldr	r3, [pc, #124]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	0c1b      	lsrs	r3, r3, #16
 8005cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce0:	ee17 2a90 	vmov	r2, s15
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005ce8:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	0e1b      	lsrs	r3, r3, #24
 8005cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d0e:	ee17 2a90 	vmov	r2, s15
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d16:	e008      	b.n	8005d2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	609a      	str	r2, [r3, #8]
}
 8005d2a:	bf00      	nop
 8005d2c:	3724      	adds	r7, #36	; 0x24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	58024400 	.word	0x58024400
 8005d3c:	03d09000 	.word	0x03d09000
 8005d40:	46000000 	.word	0x46000000
 8005d44:	4c742400 	.word	0x4c742400
 8005d48:	4a742400 	.word	0x4a742400
 8005d4c:	4bbebc20 	.word	0x4bbebc20

08005d50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d5e:	4b53      	ldr	r3, [pc, #332]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d101      	bne.n	8005d6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e099      	b.n	8005ea2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005d6e:	4b4f      	ldr	r3, [pc, #316]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a4e      	ldr	r2, [pc, #312]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005d74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7a:	f7fa fc7d 	bl	8000678 <HAL_GetTick>
 8005d7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d80:	e008      	b.n	8005d94 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d82:	f7fa fc79 	bl	8000678 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e086      	b.n	8005ea2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d94:	4b45      	ldr	r3, [pc, #276]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f0      	bne.n	8005d82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005da0:	4b42      	ldr	r3, [pc, #264]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	031b      	lsls	r3, r3, #12
 8005dae:	493f      	ldr	r1, [pc, #252]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	628b      	str	r3, [r1, #40]	; 0x28
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	025b      	lsls	r3, r3, #9
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	061b      	lsls	r3, r3, #24
 8005de0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005de4:	4931      	ldr	r1, [pc, #196]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005dea:	4b30      	ldr	r3, [pc, #192]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	492d      	ldr	r1, [pc, #180]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005dfc:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	f023 0220 	bic.w	r2, r3, #32
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	4928      	ldr	r1, [pc, #160]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e0e:	4b27      	ldr	r3, [pc, #156]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	4a26      	ldr	r2, [pc, #152]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e14:	f023 0310 	bic.w	r3, r3, #16
 8005e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e1a:	4b24      	ldr	r3, [pc, #144]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e1e:	4b24      	ldr	r3, [pc, #144]	; (8005eb0 <RCCEx_PLL2_Config+0x160>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	69d2      	ldr	r2, [r2, #28]
 8005e26:	00d2      	lsls	r2, r2, #3
 8005e28:	4920      	ldr	r1, [pc, #128]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e2e:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e34:	f043 0310 	orr.w	r3, r3, #16
 8005e38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e40:	4b1a      	ldr	r3, [pc, #104]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4a19      	ldr	r2, [pc, #100]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e4c:	e00f      	b.n	8005e6e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d106      	bne.n	8005e62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	4a14      	ldr	r2, [pc, #80]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e60:	e005      	b.n	8005e6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	4a11      	ldr	r2, [pc, #68]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a0e      	ldr	r2, [pc, #56]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e7a:	f7fa fbfd 	bl	8000678 <HAL_GetTick>
 8005e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e80:	e008      	b.n	8005e94 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e82:	f7fa fbf9 	bl	8000678 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e006      	b.n	8005ea2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <RCCEx_PLL2_Config+0x15c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f0      	beq.n	8005e82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	58024400 	.word	0x58024400
 8005eb0:	ffff0007 	.word	0xffff0007

08005eb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ec2:	4b53      	ldr	r3, [pc, #332]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d101      	bne.n	8005ed2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e099      	b.n	8006006 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005ed2:	4b4f      	ldr	r3, [pc, #316]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a4e      	ldr	r2, [pc, #312]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ede:	f7fa fbcb 	bl	8000678 <HAL_GetTick>
 8005ee2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ee4:	e008      	b.n	8005ef8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ee6:	f7fa fbc7 	bl	8000678 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e086      	b.n	8006006 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ef8:	4b45      	ldr	r3, [pc, #276]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1f0      	bne.n	8005ee6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f04:	4b42      	ldr	r3, [pc, #264]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	051b      	lsls	r3, r3, #20
 8005f12:	493f      	ldr	r1, [pc, #252]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	628b      	str	r3, [r1, #40]	; 0x28
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	025b      	lsls	r3, r3, #9
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	041b      	lsls	r3, r3, #16
 8005f36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	061b      	lsls	r3, r3, #24
 8005f44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f48:	4931      	ldr	r1, [pc, #196]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f4e:	4b30      	ldr	r3, [pc, #192]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	492d      	ldr	r1, [pc, #180]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f60:	4b2b      	ldr	r3, [pc, #172]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	4928      	ldr	r1, [pc, #160]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f72:	4b27      	ldr	r3, [pc, #156]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	4a26      	ldr	r2, [pc, #152]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f7e:	4b24      	ldr	r3, [pc, #144]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f82:	4b24      	ldr	r3, [pc, #144]	; (8006014 <RCCEx_PLL3_Config+0x160>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	69d2      	ldr	r2, [r2, #28]
 8005f8a:	00d2      	lsls	r2, r2, #3
 8005f8c:	4920      	ldr	r1, [pc, #128]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005f92:	4b1f      	ldr	r3, [pc, #124]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d106      	bne.n	8005fb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005fa4:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	4a19      	ldr	r2, [pc, #100]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005faa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fb0:	e00f      	b.n	8005fd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d106      	bne.n	8005fc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005fb8:	4b15      	ldr	r3, [pc, #84]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	4a14      	ldr	r2, [pc, #80]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005fbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fc4:	e005      	b.n	8005fd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005fc6:	4b12      	ldr	r3, [pc, #72]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	4a11      	ldr	r2, [pc, #68]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a0e      	ldr	r2, [pc, #56]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fde:	f7fa fb4b 	bl	8000678 <HAL_GetTick>
 8005fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005fe4:	e008      	b.n	8005ff8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005fe6:	f7fa fb47 	bl	8000678 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e006      	b.n	8006006 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <RCCEx_PLL3_Config+0x15c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0f0      	beq.n	8005fe6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	58024400 	.word	0x58024400
 8006014:	ffff0007 	.word	0xffff0007

08006018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e049      	b.n	80060be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f008 fd22 	bl	800ea88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f000 fd72 	bl	8006b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d001      	beq.n	80060e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e054      	b.n	800618a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a26      	ldr	r2, [pc, #152]	; (8006198 <HAL_TIM_Base_Start_IT+0xd0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d01d      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a22      	ldr	r2, [pc, #136]	; (800619c <HAL_TIM_Base_Start_IT+0xd4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a21      	ldr	r2, [pc, #132]	; (80061a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1c      	ldr	r2, [pc, #112]	; (80061ac <HAL_TIM_Base_Start_IT+0xe4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d115      	bne.n	8006174 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <HAL_TIM_Base_Start_IT+0xec>)
 8006150:	4013      	ands	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b06      	cmp	r3, #6
 8006158:	d015      	beq.n	8006186 <HAL_TIM_Base_Start_IT+0xbe>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006160:	d011      	beq.n	8006186 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0201 	orr.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006172:	e008      	b.n	8006186 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	e000      	b.n	8006188 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006186:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40010000 	.word	0x40010000
 800619c:	40000400 	.word	0x40000400
 80061a0:	40000800 	.word	0x40000800
 80061a4:	40000c00 	.word	0x40000c00
 80061a8:	40010400 	.word	0x40010400
 80061ac:	40001800 	.word	0x40001800
 80061b0:	40014000 	.word	0x40014000
 80061b4:	00010007 	.word	0x00010007

080061b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e049      	b.n	800625e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f841 	bl	8006266 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4619      	mov	r1, r3
 80061f6:	4610      	mov	r0, r2
 80061f8:	f000 fca2 	bl	8006b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <HAL_TIM_PWM_Start+0x24>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	bf14      	ite	ne
 8006298:	2301      	movne	r3, #1
 800629a:	2300      	moveq	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	e03c      	b.n	800631a <HAL_TIM_PWM_Start+0x9e>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d109      	bne.n	80062ba <HAL_TIM_PWM_Start+0x3e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	bf14      	ite	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	2300      	moveq	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	e02f      	b.n	800631a <HAL_TIM_PWM_Start+0x9e>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d109      	bne.n	80062d4 <HAL_TIM_PWM_Start+0x58>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	e022      	b.n	800631a <HAL_TIM_PWM_Start+0x9e>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b0c      	cmp	r3, #12
 80062d8:	d109      	bne.n	80062ee <HAL_TIM_PWM_Start+0x72>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	bf14      	ite	ne
 80062e6:	2301      	movne	r3, #1
 80062e8:	2300      	moveq	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	e015      	b.n	800631a <HAL_TIM_PWM_Start+0x9e>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d109      	bne.n	8006308 <HAL_TIM_PWM_Start+0x8c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	bf14      	ite	ne
 8006300:	2301      	movne	r3, #1
 8006302:	2300      	moveq	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	e008      	b.n	800631a <HAL_TIM_PWM_Start+0x9e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b01      	cmp	r3, #1
 8006312:	bf14      	ite	ne
 8006314:	2301      	movne	r3, #1
 8006316:	2300      	moveq	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e0a1      	b.n	8006466 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <HAL_TIM_PWM_Start+0xb6>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006330:	e023      	b.n	800637a <HAL_TIM_PWM_Start+0xfe>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d104      	bne.n	8006342 <HAL_TIM_PWM_Start+0xc6>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006340:	e01b      	b.n	800637a <HAL_TIM_PWM_Start+0xfe>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b08      	cmp	r3, #8
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Start+0xd6>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006350:	e013      	b.n	800637a <HAL_TIM_PWM_Start+0xfe>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b0c      	cmp	r3, #12
 8006356:	d104      	bne.n	8006362 <HAL_TIM_PWM_Start+0xe6>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006360:	e00b      	b.n	800637a <HAL_TIM_PWM_Start+0xfe>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b10      	cmp	r3, #16
 8006366:	d104      	bne.n	8006372 <HAL_TIM_PWM_Start+0xf6>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006370:	e003      	b.n	800637a <HAL_TIM_PWM_Start+0xfe>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2201      	movs	r2, #1
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 ffea 	bl	800735c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a38      	ldr	r2, [pc, #224]	; (8006470 <HAL_TIM_PWM_Start+0x1f4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <HAL_TIM_PWM_Start+0x13e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a37      	ldr	r2, [pc, #220]	; (8006474 <HAL_TIM_PWM_Start+0x1f8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00e      	beq.n	80063ba <HAL_TIM_PWM_Start+0x13e>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a35      	ldr	r2, [pc, #212]	; (8006478 <HAL_TIM_PWM_Start+0x1fc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d009      	beq.n	80063ba <HAL_TIM_PWM_Start+0x13e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a34      	ldr	r2, [pc, #208]	; (800647c <HAL_TIM_PWM_Start+0x200>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_TIM_PWM_Start+0x13e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a32      	ldr	r2, [pc, #200]	; (8006480 <HAL_TIM_PWM_Start+0x204>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d101      	bne.n	80063be <HAL_TIM_PWM_Start+0x142>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <HAL_TIM_PWM_Start+0x144>
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a25      	ldr	r2, [pc, #148]	; (8006470 <HAL_TIM_PWM_Start+0x1f4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d022      	beq.n	8006424 <HAL_TIM_PWM_Start+0x1a8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e6:	d01d      	beq.n	8006424 <HAL_TIM_PWM_Start+0x1a8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a25      	ldr	r2, [pc, #148]	; (8006484 <HAL_TIM_PWM_Start+0x208>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d018      	beq.n	8006424 <HAL_TIM_PWM_Start+0x1a8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a24      	ldr	r2, [pc, #144]	; (8006488 <HAL_TIM_PWM_Start+0x20c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d013      	beq.n	8006424 <HAL_TIM_PWM_Start+0x1a8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a22      	ldr	r2, [pc, #136]	; (800648c <HAL_TIM_PWM_Start+0x210>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00e      	beq.n	8006424 <HAL_TIM_PWM_Start+0x1a8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <HAL_TIM_PWM_Start+0x1f8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_TIM_PWM_Start+0x1a8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <HAL_TIM_PWM_Start+0x214>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_TIM_PWM_Start+0x1a8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a16      	ldr	r2, [pc, #88]	; (8006478 <HAL_TIM_PWM_Start+0x1fc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d115      	bne.n	8006450 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	4b1a      	ldr	r3, [pc, #104]	; (8006494 <HAL_TIM_PWM_Start+0x218>)
 800642c:	4013      	ands	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b06      	cmp	r3, #6
 8006434:	d015      	beq.n	8006462 <HAL_TIM_PWM_Start+0x1e6>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643c:	d011      	beq.n	8006462 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0201 	orr.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644e:	e008      	b.n	8006462 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e000      	b.n	8006464 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006462:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40010000 	.word	0x40010000
 8006474:	40010400 	.word	0x40010400
 8006478:	40014000 	.word	0x40014000
 800647c:	40014400 	.word	0x40014400
 8006480:	40014800 	.word	0x40014800
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800
 800648c:	40000c00 	.word	0x40000c00
 8006490:	40001800 	.word	0x40001800
 8006494:	00010007 	.word	0x00010007

08006498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d122      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d11b      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0202 	mvn.w	r2, #2
 80064c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fb12 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 80064e0:	e005      	b.n	80064ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fb04 	bl	8006af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fb15 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d122      	bne.n	8006548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b04      	cmp	r3, #4
 800650e:	d11b      	bne.n	8006548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f06f 0204 	mvn.w	r2, #4
 8006518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2202      	movs	r2, #2
 800651e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fae8 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 8006534:	e005      	b.n	8006542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fada 	bl	8006af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 faeb 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b08      	cmp	r3, #8
 8006554:	d122      	bne.n	800659c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b08      	cmp	r3, #8
 8006562:	d11b      	bne.n	800659c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0208 	mvn.w	r2, #8
 800656c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2204      	movs	r2, #4
 8006572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fabe 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 8006588:	e005      	b.n	8006596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fab0 	bl	8006af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fac1 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b10      	cmp	r3, #16
 80065a8:	d122      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0310 	and.w	r3, r3, #16
 80065b4:	2b10      	cmp	r3, #16
 80065b6:	d11b      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0210 	mvn.w	r2, #16
 80065c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2208      	movs	r2, #8
 80065c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa94 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 80065dc:	e005      	b.n	80065ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa86 	bl	8006af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fa97 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d10e      	bne.n	800661c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b01      	cmp	r3, #1
 800660a:	d107      	bne.n	800661c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0201 	mvn.w	r2, #1
 8006614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f007 f9ec 	bl	800d9f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006626:	2b80      	cmp	r3, #128	; 0x80
 8006628:	d10e      	bne.n	8006648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006634:	2b80      	cmp	r3, #128	; 0x80
 8006636:	d107      	bne.n	8006648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 ffc6 	bl	80075d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006656:	d10e      	bne.n	8006676 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006662:	2b80      	cmp	r3, #128	; 0x80
 8006664:	d107      	bne.n	8006676 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800666e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 ffb9 	bl	80075e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006680:	2b40      	cmp	r3, #64	; 0x40
 8006682:	d10e      	bne.n	80066a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d107      	bne.n	80066a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800669a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fa45 	bl	8006b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d10e      	bne.n	80066ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d107      	bne.n	80066ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f06f 0220 	mvn.w	r2, #32
 80066c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 ff79 	bl	80075c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e0ff      	b.n	80068f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b14      	cmp	r3, #20
 8006702:	f200 80f0 	bhi.w	80068e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006706:	a201      	add	r2, pc, #4	; (adr r2, 800670c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	08006761 	.word	0x08006761
 8006710:	080068e7 	.word	0x080068e7
 8006714:	080068e7 	.word	0x080068e7
 8006718:	080068e7 	.word	0x080068e7
 800671c:	080067a1 	.word	0x080067a1
 8006720:	080068e7 	.word	0x080068e7
 8006724:	080068e7 	.word	0x080068e7
 8006728:	080068e7 	.word	0x080068e7
 800672c:	080067e3 	.word	0x080067e3
 8006730:	080068e7 	.word	0x080068e7
 8006734:	080068e7 	.word	0x080068e7
 8006738:	080068e7 	.word	0x080068e7
 800673c:	08006823 	.word	0x08006823
 8006740:	080068e7 	.word	0x080068e7
 8006744:	080068e7 	.word	0x080068e7
 8006748:	080068e7 	.word	0x080068e7
 800674c:	08006865 	.word	0x08006865
 8006750:	080068e7 	.word	0x080068e7
 8006754:	080068e7 	.word	0x080068e7
 8006758:	080068e7 	.word	0x080068e7
 800675c:	080068a5 	.word	0x080068a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fa84 	bl	8006c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0208 	orr.w	r2, r2, #8
 800677a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0204 	bic.w	r2, r2, #4
 800678a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6999      	ldr	r1, [r3, #24]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	691a      	ldr	r2, [r3, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	619a      	str	r2, [r3, #24]
      break;
 800679e:	e0a5      	b.n	80068ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 faf4 	bl	8006d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6999      	ldr	r1, [r3, #24]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	021a      	lsls	r2, r3, #8
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	619a      	str	r2, [r3, #24]
      break;
 80067e0:	e084      	b.n	80068ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fb5d 	bl	8006ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69da      	ldr	r2, [r3, #28]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0208 	orr.w	r2, r2, #8
 80067fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0204 	bic.w	r2, r2, #4
 800680c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69d9      	ldr	r1, [r3, #28]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	61da      	str	r2, [r3, #28]
      break;
 8006820:	e064      	b.n	80068ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fbc5 	bl	8006fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800683c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69d9      	ldr	r1, [r3, #28]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	021a      	lsls	r2, r3, #8
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	61da      	str	r2, [r3, #28]
      break;
 8006862:	e043      	b.n	80068ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fc0e 	bl	800708c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0208 	orr.w	r2, r2, #8
 800687e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0204 	bic.w	r2, r2, #4
 800688e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068a2:	e023      	b.n	80068ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fc52 	bl	8007154 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	021a      	lsls	r2, r3, #8
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068e4:	e002      	b.n	80068ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	75fb      	strb	r3, [r7, #23]
      break;
 80068ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop

08006900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_TIM_ConfigClockSource+0x1c>
 8006918:	2302      	movs	r3, #2
 800691a:	e0dc      	b.n	8006ad6 <HAL_TIM_ConfigClockSource+0x1d6>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	4b6a      	ldr	r3, [pc, #424]	; (8006ae0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006938:	4013      	ands	r3, r2
 800693a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a64      	ldr	r2, [pc, #400]	; (8006ae4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	f000 80a9 	beq.w	8006aaa <HAL_TIM_ConfigClockSource+0x1aa>
 8006958:	4a62      	ldr	r2, [pc, #392]	; (8006ae4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	f200 80ae 	bhi.w	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 8006960:	4a61      	ldr	r2, [pc, #388]	; (8006ae8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	f000 80a1 	beq.w	8006aaa <HAL_TIM_ConfigClockSource+0x1aa>
 8006968:	4a5f      	ldr	r2, [pc, #380]	; (8006ae8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	f200 80a6 	bhi.w	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 8006970:	4a5e      	ldr	r2, [pc, #376]	; (8006aec <HAL_TIM_ConfigClockSource+0x1ec>)
 8006972:	4293      	cmp	r3, r2
 8006974:	f000 8099 	beq.w	8006aaa <HAL_TIM_ConfigClockSource+0x1aa>
 8006978:	4a5c      	ldr	r2, [pc, #368]	; (8006aec <HAL_TIM_ConfigClockSource+0x1ec>)
 800697a:	4293      	cmp	r3, r2
 800697c:	f200 809e 	bhi.w	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 8006980:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006984:	f000 8091 	beq.w	8006aaa <HAL_TIM_ConfigClockSource+0x1aa>
 8006988:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800698c:	f200 8096 	bhi.w	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 8006990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006994:	f000 8089 	beq.w	8006aaa <HAL_TIM_ConfigClockSource+0x1aa>
 8006998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699c:	f200 808e 	bhi.w	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 80069a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a4:	d03e      	beq.n	8006a24 <HAL_TIM_ConfigClockSource+0x124>
 80069a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069aa:	f200 8087 	bhi.w	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 80069ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b2:	f000 8086 	beq.w	8006ac2 <HAL_TIM_ConfigClockSource+0x1c2>
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ba:	d87f      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 80069bc:	2b70      	cmp	r3, #112	; 0x70
 80069be:	d01a      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0xf6>
 80069c0:	2b70      	cmp	r3, #112	; 0x70
 80069c2:	d87b      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 80069c4:	2b60      	cmp	r3, #96	; 0x60
 80069c6:	d050      	beq.n	8006a6a <HAL_TIM_ConfigClockSource+0x16a>
 80069c8:	2b60      	cmp	r3, #96	; 0x60
 80069ca:	d877      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 80069cc:	2b50      	cmp	r3, #80	; 0x50
 80069ce:	d03c      	beq.n	8006a4a <HAL_TIM_ConfigClockSource+0x14a>
 80069d0:	2b50      	cmp	r3, #80	; 0x50
 80069d2:	d873      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d058      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x18a>
 80069d8:	2b40      	cmp	r3, #64	; 0x40
 80069da:	d86f      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 80069dc:	2b30      	cmp	r3, #48	; 0x30
 80069de:	d064      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x1aa>
 80069e0:	2b30      	cmp	r3, #48	; 0x30
 80069e2:	d86b      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d060      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x1aa>
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d867      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d05c      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x1aa>
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d05a      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x1aa>
 80069f4:	e062      	b.n	8006abc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6899      	ldr	r1, [r3, #8]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f000 fc89 	bl	800731c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	609a      	str	r2, [r3, #8]
      break;
 8006a22:	e04f      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	6899      	ldr	r1, [r3, #8]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f000 fc72 	bl	800731c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a46:	609a      	str	r2, [r3, #8]
      break;
 8006a48:	e03c      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	6859      	ldr	r1, [r3, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f000 fbe2 	bl	8007220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2150      	movs	r1, #80	; 0x50
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fc3c 	bl	80072e0 <TIM_ITRx_SetConfig>
      break;
 8006a68:	e02c      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6859      	ldr	r1, [r3, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f000 fc01 	bl	800727e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2160      	movs	r1, #96	; 0x60
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fc2c 	bl	80072e0 <TIM_ITRx_SetConfig>
      break;
 8006a88:	e01c      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6859      	ldr	r1, [r3, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f000 fbc2 	bl	8007220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2140      	movs	r1, #64	; 0x40
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fc1c 	bl	80072e0 <TIM_ITRx_SetConfig>
      break;
 8006aa8:	e00c      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f000 fc13 	bl	80072e0 <TIM_ITRx_SetConfig>
      break;
 8006aba:	e003      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac0:	e000      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	ffceff88 	.word	0xffceff88
 8006ae4:	00100040 	.word	0x00100040
 8006ae8:	00100030 	.word	0x00100030
 8006aec:	00100020 	.word	0x00100020

08006af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a40      	ldr	r2, [pc, #256]	; (8006c54 <TIM_Base_SetConfig+0x114>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <TIM_Base_SetConfig+0x40>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5e:	d00f      	beq.n	8006b80 <TIM_Base_SetConfig+0x40>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a3d      	ldr	r2, [pc, #244]	; (8006c58 <TIM_Base_SetConfig+0x118>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00b      	beq.n	8006b80 <TIM_Base_SetConfig+0x40>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a3c      	ldr	r2, [pc, #240]	; (8006c5c <TIM_Base_SetConfig+0x11c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d007      	beq.n	8006b80 <TIM_Base_SetConfig+0x40>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a3b      	ldr	r2, [pc, #236]	; (8006c60 <TIM_Base_SetConfig+0x120>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_Base_SetConfig+0x40>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a3a      	ldr	r2, [pc, #232]	; (8006c64 <TIM_Base_SetConfig+0x124>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d108      	bne.n	8006b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a2f      	ldr	r2, [pc, #188]	; (8006c54 <TIM_Base_SetConfig+0x114>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d01f      	beq.n	8006bda <TIM_Base_SetConfig+0x9a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba0:	d01b      	beq.n	8006bda <TIM_Base_SetConfig+0x9a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <TIM_Base_SetConfig+0x118>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d017      	beq.n	8006bda <TIM_Base_SetConfig+0x9a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a2b      	ldr	r2, [pc, #172]	; (8006c5c <TIM_Base_SetConfig+0x11c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <TIM_Base_SetConfig+0x9a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a2a      	ldr	r2, [pc, #168]	; (8006c60 <TIM_Base_SetConfig+0x120>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00f      	beq.n	8006bda <TIM_Base_SetConfig+0x9a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a29      	ldr	r2, [pc, #164]	; (8006c64 <TIM_Base_SetConfig+0x124>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00b      	beq.n	8006bda <TIM_Base_SetConfig+0x9a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a28      	ldr	r2, [pc, #160]	; (8006c68 <TIM_Base_SetConfig+0x128>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <TIM_Base_SetConfig+0x9a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a27      	ldr	r2, [pc, #156]	; (8006c6c <TIM_Base_SetConfig+0x12c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_Base_SetConfig+0x9a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a26      	ldr	r2, [pc, #152]	; (8006c70 <TIM_Base_SetConfig+0x130>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d108      	bne.n	8006bec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a10      	ldr	r2, [pc, #64]	; (8006c54 <TIM_Base_SetConfig+0x114>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00f      	beq.n	8006c38 <TIM_Base_SetConfig+0xf8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a12      	ldr	r2, [pc, #72]	; (8006c64 <TIM_Base_SetConfig+0x124>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <TIM_Base_SetConfig+0xf8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <TIM_Base_SetConfig+0x128>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d007      	beq.n	8006c38 <TIM_Base_SetConfig+0xf8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a10      	ldr	r2, [pc, #64]	; (8006c6c <TIM_Base_SetConfig+0x12c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_Base_SetConfig+0xf8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a0f      	ldr	r2, [pc, #60]	; (8006c70 <TIM_Base_SetConfig+0x130>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d103      	bne.n	8006c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	615a      	str	r2, [r3, #20]
}
 8006c46:	bf00      	nop
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40010000 	.word	0x40010000
 8006c58:	40000400 	.word	0x40000400
 8006c5c:	40000800 	.word	0x40000800
 8006c60:	40000c00 	.word	0x40000c00
 8006c64:	40010400 	.word	0x40010400
 8006c68:	40014000 	.word	0x40014000
 8006c6c:	40014400 	.word	0x40014400
 8006c70:	40014800 	.word	0x40014800

08006c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f023 0201 	bic.w	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4b37      	ldr	r3, [pc, #220]	; (8006d7c <TIM_OC1_SetConfig+0x108>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0303 	bic.w	r3, r3, #3
 8006caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f023 0302 	bic.w	r3, r3, #2
 8006cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a2d      	ldr	r2, [pc, #180]	; (8006d80 <TIM_OC1_SetConfig+0x10c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00f      	beq.n	8006cf0 <TIM_OC1_SetConfig+0x7c>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a2c      	ldr	r2, [pc, #176]	; (8006d84 <TIM_OC1_SetConfig+0x110>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00b      	beq.n	8006cf0 <TIM_OC1_SetConfig+0x7c>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a2b      	ldr	r2, [pc, #172]	; (8006d88 <TIM_OC1_SetConfig+0x114>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d007      	beq.n	8006cf0 <TIM_OC1_SetConfig+0x7c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <TIM_OC1_SetConfig+0x118>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_OC1_SetConfig+0x7c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <TIM_OC1_SetConfig+0x11c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d10c      	bne.n	8006d0a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f023 0308 	bic.w	r3, r3, #8
 8006cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f023 0304 	bic.w	r3, r3, #4
 8006d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a1c      	ldr	r2, [pc, #112]	; (8006d80 <TIM_OC1_SetConfig+0x10c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00f      	beq.n	8006d32 <TIM_OC1_SetConfig+0xbe>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a1b      	ldr	r2, [pc, #108]	; (8006d84 <TIM_OC1_SetConfig+0x110>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00b      	beq.n	8006d32 <TIM_OC1_SetConfig+0xbe>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1a      	ldr	r2, [pc, #104]	; (8006d88 <TIM_OC1_SetConfig+0x114>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d007      	beq.n	8006d32 <TIM_OC1_SetConfig+0xbe>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a19      	ldr	r2, [pc, #100]	; (8006d8c <TIM_OC1_SetConfig+0x118>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_OC1_SetConfig+0xbe>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a18      	ldr	r2, [pc, #96]	; (8006d90 <TIM_OC1_SetConfig+0x11c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d111      	bne.n	8006d56 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	621a      	str	r2, [r3, #32]
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	fffeff8f 	.word	0xfffeff8f
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40010400 	.word	0x40010400
 8006d88:	40014000 	.word	0x40014000
 8006d8c:	40014400 	.word	0x40014400
 8006d90:	40014800 	.word	0x40014800

08006d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f023 0210 	bic.w	r2, r3, #16
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4b34      	ldr	r3, [pc, #208]	; (8006e90 <TIM_OC2_SetConfig+0xfc>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f023 0320 	bic.w	r3, r3, #32
 8006dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a29      	ldr	r2, [pc, #164]	; (8006e94 <TIM_OC2_SetConfig+0x100>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_OC2_SetConfig+0x68>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a28      	ldr	r2, [pc, #160]	; (8006e98 <TIM_OC2_SetConfig+0x104>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d10d      	bne.n	8006e18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a1e      	ldr	r2, [pc, #120]	; (8006e94 <TIM_OC2_SetConfig+0x100>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00f      	beq.n	8006e40 <TIM_OC2_SetConfig+0xac>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a1d      	ldr	r2, [pc, #116]	; (8006e98 <TIM_OC2_SetConfig+0x104>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00b      	beq.n	8006e40 <TIM_OC2_SetConfig+0xac>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a1c      	ldr	r2, [pc, #112]	; (8006e9c <TIM_OC2_SetConfig+0x108>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d007      	beq.n	8006e40 <TIM_OC2_SetConfig+0xac>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <TIM_OC2_SetConfig+0x10c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d003      	beq.n	8006e40 <TIM_OC2_SetConfig+0xac>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ea4 <TIM_OC2_SetConfig+0x110>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d113      	bne.n	8006e68 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	feff8fff 	.word	0xfeff8fff
 8006e94:	40010000 	.word	0x40010000
 8006e98:	40010400 	.word	0x40010400
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800

08006ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4b33      	ldr	r3, [pc, #204]	; (8006fa0 <TIM_OC3_SetConfig+0xf8>)
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a28      	ldr	r2, [pc, #160]	; (8006fa4 <TIM_OC3_SetConfig+0xfc>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d003      	beq.n	8006f0e <TIM_OC3_SetConfig+0x66>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a27      	ldr	r2, [pc, #156]	; (8006fa8 <TIM_OC3_SetConfig+0x100>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d10d      	bne.n	8006f2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	021b      	lsls	r3, r3, #8
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <TIM_OC3_SetConfig+0xfc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00f      	beq.n	8006f52 <TIM_OC3_SetConfig+0xaa>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a1c      	ldr	r2, [pc, #112]	; (8006fa8 <TIM_OC3_SetConfig+0x100>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00b      	beq.n	8006f52 <TIM_OC3_SetConfig+0xaa>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <TIM_OC3_SetConfig+0x104>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d007      	beq.n	8006f52 <TIM_OC3_SetConfig+0xaa>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a1a      	ldr	r2, [pc, #104]	; (8006fb0 <TIM_OC3_SetConfig+0x108>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d003      	beq.n	8006f52 <TIM_OC3_SetConfig+0xaa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <TIM_OC3_SetConfig+0x10c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d113      	bne.n	8006f7a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	621a      	str	r2, [r3, #32]
}
 8006f94:	bf00      	nop
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	fffeff8f 	.word	0xfffeff8f
 8006fa4:	40010000 	.word	0x40010000
 8006fa8:	40010400 	.word	0x40010400
 8006fac:	40014000 	.word	0x40014000
 8006fb0:	40014400 	.word	0x40014400
 8006fb4:	40014800 	.word	0x40014800

08006fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <TIM_OC4_SetConfig+0xbc>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	031b      	lsls	r3, r3, #12
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a19      	ldr	r2, [pc, #100]	; (8007078 <TIM_OC4_SetConfig+0xc0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00f      	beq.n	8007038 <TIM_OC4_SetConfig+0x80>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a18      	ldr	r2, [pc, #96]	; (800707c <TIM_OC4_SetConfig+0xc4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00b      	beq.n	8007038 <TIM_OC4_SetConfig+0x80>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a17      	ldr	r2, [pc, #92]	; (8007080 <TIM_OC4_SetConfig+0xc8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d007      	beq.n	8007038 <TIM_OC4_SetConfig+0x80>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a16      	ldr	r2, [pc, #88]	; (8007084 <TIM_OC4_SetConfig+0xcc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d003      	beq.n	8007038 <TIM_OC4_SetConfig+0x80>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a15      	ldr	r2, [pc, #84]	; (8007088 <TIM_OC4_SetConfig+0xd0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d109      	bne.n	800704c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800703e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	019b      	lsls	r3, r3, #6
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	621a      	str	r2, [r3, #32]
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	feff8fff 	.word	0xfeff8fff
 8007078:	40010000 	.word	0x40010000
 800707c:	40010400 	.word	0x40010400
 8007080:	40014000 	.word	0x40014000
 8007084:	40014400 	.word	0x40014400
 8007088:	40014800 	.word	0x40014800

0800708c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4b21      	ldr	r3, [pc, #132]	; (800713c <TIM_OC5_SetConfig+0xb0>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	041b      	lsls	r3, r3, #16
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a18      	ldr	r2, [pc, #96]	; (8007140 <TIM_OC5_SetConfig+0xb4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00f      	beq.n	8007102 <TIM_OC5_SetConfig+0x76>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a17      	ldr	r2, [pc, #92]	; (8007144 <TIM_OC5_SetConfig+0xb8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d00b      	beq.n	8007102 <TIM_OC5_SetConfig+0x76>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a16      	ldr	r2, [pc, #88]	; (8007148 <TIM_OC5_SetConfig+0xbc>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d007      	beq.n	8007102 <TIM_OC5_SetConfig+0x76>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a15      	ldr	r2, [pc, #84]	; (800714c <TIM_OC5_SetConfig+0xc0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d003      	beq.n	8007102 <TIM_OC5_SetConfig+0x76>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a14      	ldr	r2, [pc, #80]	; (8007150 <TIM_OC5_SetConfig+0xc4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d109      	bne.n	8007116 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007108:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	621a      	str	r2, [r3, #32]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	fffeff8f 	.word	0xfffeff8f
 8007140:	40010000 	.word	0x40010000
 8007144:	40010400 	.word	0x40010400
 8007148:	40014000 	.word	0x40014000
 800714c:	40014400 	.word	0x40014400
 8007150:	40014800 	.word	0x40014800

08007154 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4b22      	ldr	r3, [pc, #136]	; (8007208 <TIM_OC6_SetConfig+0xb4>)
 8007180:	4013      	ands	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	051b      	lsls	r3, r3, #20
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a19      	ldr	r2, [pc, #100]	; (800720c <TIM_OC6_SetConfig+0xb8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00f      	beq.n	80071cc <TIM_OC6_SetConfig+0x78>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a18      	ldr	r2, [pc, #96]	; (8007210 <TIM_OC6_SetConfig+0xbc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00b      	beq.n	80071cc <TIM_OC6_SetConfig+0x78>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a17      	ldr	r2, [pc, #92]	; (8007214 <TIM_OC6_SetConfig+0xc0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d007      	beq.n	80071cc <TIM_OC6_SetConfig+0x78>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a16      	ldr	r2, [pc, #88]	; (8007218 <TIM_OC6_SetConfig+0xc4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_OC6_SetConfig+0x78>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a15      	ldr	r2, [pc, #84]	; (800721c <TIM_OC6_SetConfig+0xc8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d109      	bne.n	80071e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	029b      	lsls	r3, r3, #10
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	feff8fff 	.word	0xfeff8fff
 800720c:	40010000 	.word	0x40010000
 8007210:	40010400 	.word	0x40010400
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400
 800721c:	40014800 	.word	0x40014800

08007220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f023 0201 	bic.w	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800724a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f023 030a 	bic.w	r3, r3, #10
 800725c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	621a      	str	r2, [r3, #32]
}
 8007272:	bf00      	nop
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800727e:	b480      	push	{r7}
 8007280:	b087      	sub	sp, #28
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f023 0210 	bic.w	r2, r3, #16
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	031b      	lsls	r3, r3, #12
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	621a      	str	r2, [r3, #32]
}
 80072d2:	bf00      	nop
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
	...

080072e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4b09      	ldr	r3, [pc, #36]	; (8007318 <TIM_ITRx_SetConfig+0x38>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f043 0307 	orr.w	r3, r3, #7
 8007302:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	609a      	str	r2, [r3, #8]
}
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	ffcfff8f 	.word	0xffcfff8f

0800731c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	021a      	lsls	r2, r3, #8
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	431a      	orrs	r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	4313      	orrs	r3, r2
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	609a      	str	r2, [r3, #8]
}
 8007350:	bf00      	nop
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 031f 	and.w	r3, r3, #31
 800736e:	2201      	movs	r2, #1
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a1a      	ldr	r2, [r3, #32]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	43db      	mvns	r3, r3
 800737e:	401a      	ands	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a1a      	ldr	r2, [r3, #32]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	fa01 f303 	lsl.w	r3, r1, r3
 8007394:	431a      	orrs	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
}
 800739a:	bf00      	nop
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073bc:	2302      	movs	r3, #2
 80073be:	e06d      	b.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a30      	ldr	r2, [pc, #192]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d004      	beq.n	80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a2f      	ldr	r2, [pc, #188]	; (80074ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d108      	bne.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a20      	ldr	r2, [pc, #128]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007432:	d01d      	beq.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1d      	ldr	r2, [pc, #116]	; (80074b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a1c      	ldr	r2, [pc, #112]	; (80074b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1a      	ldr	r2, [pc, #104]	; (80074b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a15      	ldr	r2, [pc, #84]	; (80074ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a16      	ldr	r2, [pc, #88]	; (80074bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a15      	ldr	r2, [pc, #84]	; (80074c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d10c      	bne.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007476:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	4313      	orrs	r3, r2
 8007480:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40010000 	.word	0x40010000
 80074ac:	40010400 	.word	0x40010400
 80074b0:	40000400 	.word	0x40000400
 80074b4:	40000800 	.word	0x40000800
 80074b8:	40000c00 	.word	0x40000c00
 80074bc:	40001800 	.word	0x40001800
 80074c0:	40014000 	.word	0x40014000

080074c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074dc:	2302      	movs	r3, #2
 80074de:	e065      	b.n	80075ac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	041b      	lsls	r3, r3, #16
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a16      	ldr	r2, [pc, #88]	; (80075b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d004      	beq.n	800756e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a14      	ldr	r2, [pc, #80]	; (80075bc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d115      	bne.n	800759a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	051b      	lsls	r3, r3, #20
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	40010000 	.word	0x40010000
 80075bc:	40010400 	.word	0x40010400

080075c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e042      	b.n	8007694 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f007 fdbb 	bl	800f19c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2224      	movs	r2, #36	; 0x24
 800762a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0201 	bic.w	r2, r2, #1
 800763c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fd84 	bl	800814c <UART_SetConfig>
 8007644:	4603      	mov	r3, r0
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e022      	b.n	8007694 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fad8 	bl	8008c0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800766a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800767a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 fb5f 	bl	8008d50 <UART_CheckIdleState>
 8007692:	4603      	mov	r3, r0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	; 0x28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	4613      	mov	r3, r2
 80076a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	d17a      	bne.n	80077aa <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <HAL_UART_Transmit_DMA+0x24>
 80076ba:	88fb      	ldrh	r3, [r7, #6]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e073      	b.n	80077ac <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d101      	bne.n	80076d2 <HAL_UART_Transmit_DMA+0x36>
 80076ce:	2302      	movs	r3, #2
 80076d0:	e06c      	b.n	80077ac <HAL_UART_Transmit_DMA+0x110>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	88fa      	ldrh	r2, [r7, #6]
 80076e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	88fa      	ldrh	r2, [r7, #6]
 80076ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2221      	movs	r2, #33	; 0x21
 80076fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007704:	2b00      	cmp	r3, #0
 8007706:	d02c      	beq.n	8007762 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800770c:	4a29      	ldr	r2, [pc, #164]	; (80077b4 <HAL_UART_Transmit_DMA+0x118>)
 800770e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007714:	4a28      	ldr	r2, [pc, #160]	; (80077b8 <HAL_UART_Transmit_DMA+0x11c>)
 8007716:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800771c:	4a27      	ldr	r2, [pc, #156]	; (80077bc <HAL_UART_Transmit_DMA+0x120>)
 800771e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007724:	2200      	movs	r2, #0
 8007726:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007730:	4619      	mov	r1, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3328      	adds	r3, #40	; 0x28
 8007738:	461a      	mov	r2, r3
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	f7f9 fbf0 	bl	8000f20 <HAL_DMA_Start_IT>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00d      	beq.n	8007762 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2210      	movs	r2, #16
 800774a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e024      	b.n	80077ac <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2240      	movs	r2, #64	; 0x40
 8007768:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	613b      	str	r3, [r7, #16]
   return(result);
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3308      	adds	r3, #8
 8007790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007792:	623a      	str	r2, [r7, #32]
 8007794:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	69f9      	ldr	r1, [r7, #28]
 8007798:	6a3a      	ldr	r2, [r7, #32]
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	61bb      	str	r3, [r7, #24]
   return(result);
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e5      	bne.n	8007772 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e000      	b.n	80077ac <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
  }
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3728      	adds	r7, #40	; 0x28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	08009219 	.word	0x08009219
 80077b8:	080092af 	.word	0x080092af
 80077bc:	08009425 	.word	0x08009425

080077c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08a      	sub	sp, #40	; 0x28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d142      	bne.n	800785e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_UART_Receive_DMA+0x24>
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e03b      	b.n	8007860 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <HAL_UART_Receive_DMA+0x36>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e034      	b.n	8007860 <HAL_UART_Receive_DMA+0xa0>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a17      	ldr	r2, [pc, #92]	; (8007868 <HAL_UART_Receive_DMA+0xa8>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d01f      	beq.n	800784e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d018      	beq.n	800784e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	613b      	str	r3, [r7, #16]
   return(result);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	623b      	str	r3, [r7, #32]
 800783c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	69f9      	ldr	r1, [r7, #28]
 8007840:	6a3a      	ldr	r2, [r7, #32]
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	61bb      	str	r3, [r7, #24]
   return(result);
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e6      	bne.n	800781c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800784e:	88fb      	ldrh	r3, [r7, #6]
 8007850:	461a      	mov	r2, r3
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f001 fb8f 	bl	8008f78 <UART_Start_Receive_DMA>
 800785a:	4603      	mov	r3, r0
 800785c:	e000      	b.n	8007860 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800785e:	2302      	movs	r3, #2
  }
}
 8007860:	4618      	mov	r0, r3
 8007862:	3728      	adds	r7, #40	; 0x28
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	58000c00 	.word	0x58000c00

0800786c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b090      	sub	sp, #64	; 0x40
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007882:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788e:	2b80      	cmp	r3, #128	; 0x80
 8007890:	d139      	bne.n	8007906 <HAL_UART_DMAStop+0x9a>
 8007892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007894:	2b21      	cmp	r3, #33	; 0x21
 8007896:	d136      	bne.n	8007906 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3308      	adds	r3, #8
 800789e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3308      	adds	r3, #8
 80078b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c0:	e841 2300 	strex	r3, r2, [r1]
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e5      	bne.n	8007898 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d015      	beq.n	8007900 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078d8:	4618      	mov	r0, r3
 80078da:	f7f9 fd8b 	bl	80013f4 <HAL_DMA_Abort>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00d      	beq.n	8007900 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fb fa0f 	bl	8002d0c <HAL_DMA_GetError>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	d105      	bne.n	8007900 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2210      	movs	r2, #16
 80078f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e044      	b.n	800798a <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fbe1 	bl	80090c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007910:	2b40      	cmp	r3, #64	; 0x40
 8007912:	d139      	bne.n	8007988 <HAL_UART_DMAStop+0x11c>
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	2b22      	cmp	r3, #34	; 0x22
 8007918:	d136      	bne.n	8007988 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3308      	adds	r3, #8
 8007920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	60bb      	str	r3, [r7, #8]
   return(result);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007930:	633b      	str	r3, [r7, #48]	; 0x30
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800793a:	61ba      	str	r2, [r7, #24]
 800793c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6979      	ldr	r1, [r7, #20]
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	613b      	str	r3, [r7, #16]
   return(result);
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e5      	bne.n	800791a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d015      	beq.n	8007982 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800795a:	4618      	mov	r0, r3
 800795c:	f7f9 fd4a 	bl	80013f4 <HAL_DMA_Abort>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00d      	beq.n	8007982 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800796a:	4618      	mov	r0, r3
 800796c:	f7fb f9ce 	bl	8002d0c <HAL_DMA_GetError>
 8007970:	4603      	mov	r3, r0
 8007972:	2b20      	cmp	r3, #32
 8007974:	d105      	bne.n	8007982 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2210      	movs	r2, #16
 800797a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e003      	b.n	800798a <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 fbe2 	bl	800914c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3740      	adds	r7, #64	; 0x40
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b0ba      	sub	sp, #232	; 0xe8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079be:	f640 030f 	movw	r3, #2063	; 0x80f
 80079c2:	4013      	ands	r3, r2
 80079c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d11b      	bne.n	8007a08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d015      	beq.n	8007a08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e0:	f003 0320 	and.w	r3, r3, #32
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d105      	bne.n	80079f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d009      	beq.n	8007a08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 835a 	beq.w	80080b2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
      }
      return;
 8007a06:	e354      	b.n	80080b2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 811f 	beq.w	8007c50 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a16:	4b8b      	ldr	r3, [pc, #556]	; (8007c44 <HAL_UART_IRQHandler+0x2b0>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a22:	4b89      	ldr	r3, [pc, #548]	; (8007c48 <HAL_UART_IRQHandler+0x2b4>)
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 8112 	beq.w	8007c50 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d011      	beq.n	8007a5c <HAL_UART_IRQHandler+0xc8>
 8007a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a52:	f043 0201 	orr.w	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d011      	beq.n	8007a8c <HAL_UART_IRQHandler+0xf8>
 8007a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a82:	f043 0204 	orr.w	r2, r3, #4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d011      	beq.n	8007abc <HAL_UART_IRQHandler+0x128>
 8007a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2204      	movs	r2, #4
 8007aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab2:	f043 0202 	orr.w	r2, r3, #2
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d017      	beq.n	8007af8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d105      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ad4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ad8:	4b5a      	ldr	r3, [pc, #360]	; (8007c44 <HAL_UART_IRQHandler+0x2b0>)
 8007ada:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aee:	f043 0208 	orr.w	r2, r3, #8
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d012      	beq.n	8007b2a <HAL_UART_IRQHandler+0x196>
 8007b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00c      	beq.n	8007b2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b20:	f043 0220 	orr.w	r2, r3, #32
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 82c0 	beq.w	80080b6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d013      	beq.n	8007b6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d007      	beq.n	8007b6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7e:	2b40      	cmp	r3, #64	; 0x40
 8007b80:	d005      	beq.n	8007b8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d04f      	beq.n	8007c2e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 fadc 	bl	800914c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9e:	2b40      	cmp	r3, #64	; 0x40
 8007ba0:	d141      	bne.n	8007c26 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1d9      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d013      	beq.n	8007c1e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfa:	4a14      	ldr	r2, [pc, #80]	; (8007c4c <HAL_UART_IRQHandler+0x2b8>)
 8007bfc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7f9 ff14 	bl	8001a30 <HAL_DMA_Abort_IT>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d017      	beq.n	8007c3e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c1c:	e00f      	b.n	8007c3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa7e 	bl	8008120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c24:	e00b      	b.n	8007c3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa7a 	bl	8008120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2c:	e007      	b.n	8007c3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa76 	bl	8008120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007c3c:	e23b      	b.n	80080b6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3e:	bf00      	nop
    return;
 8007c40:	e239      	b.n	80080b6 <HAL_UART_IRQHandler+0x722>
 8007c42:	bf00      	nop
 8007c44:	10000001 	.word	0x10000001
 8007c48:	04000120 	.word	0x04000120
 8007c4c:	080094a5 	.word	0x080094a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	f040 81ce 	bne.w	8007ff6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 81c7 	beq.w	8007ff6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 81c0 	beq.w	8007ff6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2210      	movs	r2, #16
 8007c7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c88:	2b40      	cmp	r3, #64	; 0x40
 8007c8a:	f040 813b 	bne.w	8007f04 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a8b      	ldr	r2, [pc, #556]	; (8007ec4 <HAL_UART_IRQHandler+0x530>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d059      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a89      	ldr	r2, [pc, #548]	; (8007ec8 <HAL_UART_IRQHandler+0x534>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d053      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a87      	ldr	r2, [pc, #540]	; (8007ecc <HAL_UART_IRQHandler+0x538>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d04d      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a85      	ldr	r2, [pc, #532]	; (8007ed0 <HAL_UART_IRQHandler+0x53c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d047      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a83      	ldr	r2, [pc, #524]	; (8007ed4 <HAL_UART_IRQHandler+0x540>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d041      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a81      	ldr	r2, [pc, #516]	; (8007ed8 <HAL_UART_IRQHandler+0x544>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d03b      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a7f      	ldr	r2, [pc, #508]	; (8007edc <HAL_UART_IRQHandler+0x548>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d035      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a7d      	ldr	r2, [pc, #500]	; (8007ee0 <HAL_UART_IRQHandler+0x54c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d02f      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a7b      	ldr	r2, [pc, #492]	; (8007ee4 <HAL_UART_IRQHandler+0x550>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d029      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a79      	ldr	r2, [pc, #484]	; (8007ee8 <HAL_UART_IRQHandler+0x554>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d023      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a77      	ldr	r2, [pc, #476]	; (8007eec <HAL_UART_IRQHandler+0x558>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d01d      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a75      	ldr	r2, [pc, #468]	; (8007ef0 <HAL_UART_IRQHandler+0x55c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d017      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a73      	ldr	r2, [pc, #460]	; (8007ef4 <HAL_UART_IRQHandler+0x560>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d011      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a71      	ldr	r2, [pc, #452]	; (8007ef8 <HAL_UART_IRQHandler+0x564>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00b      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a6f      	ldr	r2, [pc, #444]	; (8007efc <HAL_UART_IRQHandler+0x568>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d005      	beq.n	8007d4e <HAL_UART_IRQHandler+0x3ba>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a6d      	ldr	r2, [pc, #436]	; (8007f00 <HAL_UART_IRQHandler+0x56c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d105      	bne.n	8007d5a <HAL_UART_IRQHandler+0x3c6>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	e004      	b.n	8007d64 <HAL_UART_IRQHandler+0x3d0>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 81a4 	beq.w	80080ba <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	f080 819c 	bcs.w	80080ba <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d96:	f000 8086 	beq.w	8007ea6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007db6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007dc8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dd4:	e841 2300 	strex	r3, r2, [r1]
 8007dd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1da      	bne.n	8007d9a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007df6:	f023 0301 	bic.w	r3, r3, #1
 8007dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e08:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e1      	bne.n	8007de4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e4c:	e841 2300 	strex	r3, r2, [r1]
 8007e50:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e3      	bne.n	8007e20 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e76:	f023 0310 	bic.w	r3, r3, #16
 8007e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e88:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e8a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e4      	bne.n	8007e66 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7f9 faa7 	bl	80013f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f93a 	bl	8008134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ec0:	e0fb      	b.n	80080ba <HAL_UART_IRQHandler+0x726>
 8007ec2:	bf00      	nop
 8007ec4:	40020010 	.word	0x40020010
 8007ec8:	40020028 	.word	0x40020028
 8007ecc:	40020040 	.word	0x40020040
 8007ed0:	40020058 	.word	0x40020058
 8007ed4:	40020070 	.word	0x40020070
 8007ed8:	40020088 	.word	0x40020088
 8007edc:	400200a0 	.word	0x400200a0
 8007ee0:	400200b8 	.word	0x400200b8
 8007ee4:	40020410 	.word	0x40020410
 8007ee8:	40020428 	.word	0x40020428
 8007eec:	40020440 	.word	0x40020440
 8007ef0:	40020458 	.word	0x40020458
 8007ef4:	40020470 	.word	0x40020470
 8007ef8:	40020488 	.word	0x40020488
 8007efc:	400204a0 	.word	0x400204a0
 8007f00:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 80cc 	beq.w	80080be <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007f26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 80c7 	beq.w	80080be <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f52:	647b      	str	r3, [r7, #68]	; 0x44
 8007f54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e4      	bne.n	8007f30 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	623b      	str	r3, [r7, #32]
   return(result);
 8007f76:	6a3a      	ldr	r2, [r7, #32]
 8007f78:	4b54      	ldr	r3, [pc, #336]	; (80080cc <HAL_UART_IRQHandler+0x738>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f8a:	633a      	str	r2, [r7, #48]	; 0x30
 8007f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e3      	bne.n	8007f66 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0310 	bic.w	r3, r3, #16
 8007fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd8:	69b9      	ldr	r1, [r7, #24]
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	e841 2300 	strex	r3, r2, [r1]
 8007fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1e4      	bne.n	8007fb2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f8a0 	bl	8008134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ff4:	e063      	b.n	80080be <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00e      	beq.n	8008020 <HAL_UART_IRQHandler+0x68c>
 8008002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d008      	beq.n	8008020 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008016:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 fa84 	bl	8009526 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800801e:	e051      	b.n	80080c4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008028:	2b00      	cmp	r3, #0
 800802a:	d014      	beq.n	8008056 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d008      	beq.n	8008056 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008048:	2b00      	cmp	r3, #0
 800804a:	d03a      	beq.n	80080c2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	4798      	blx	r3
    }
    return;
 8008054:	e035      	b.n	80080c2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d009      	beq.n	8008076 <HAL_UART_IRQHandler+0x6e2>
 8008062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 fa2e 	bl	80094d0 <UART_EndTransmit_IT>
    return;
 8008074:	e026      	b.n	80080c4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <HAL_UART_IRQHandler+0x702>
 8008082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008086:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f001 fa5d 	bl	800954e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008094:	e016      	b.n	80080c4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d010      	beq.n	80080c4 <HAL_UART_IRQHandler+0x730>
 80080a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da0c      	bge.n	80080c4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 fa45 	bl	800953a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080b0:	e008      	b.n	80080c4 <HAL_UART_IRQHandler+0x730>
      return;
 80080b2:	bf00      	nop
 80080b4:	e006      	b.n	80080c4 <HAL_UART_IRQHandler+0x730>
    return;
 80080b6:	bf00      	nop
 80080b8:	e004      	b.n	80080c4 <HAL_UART_IRQHandler+0x730>
      return;
 80080ba:	bf00      	nop
 80080bc:	e002      	b.n	80080c4 <HAL_UART_IRQHandler+0x730>
      return;
 80080be:	bf00      	nop
 80080c0:	e000      	b.n	80080c4 <HAL_UART_IRQHandler+0x730>
    return;
 80080c2:	bf00      	nop
  }
}
 80080c4:	37e8      	adds	r7, #232	; 0xe8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	effffffe 	.word	0xeffffffe

080080d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800814c:	b5b0      	push	{r4, r5, r7, lr}
 800814e:	b08e      	sub	sp, #56	; 0x38
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	4313      	orrs	r3, r2
 8008170:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	4bbf      	ldr	r3, [pc, #764]	; (8008478 <UART_SetConfig+0x32c>)
 800817a:	4013      	ands	r3, r2
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6812      	ldr	r2, [r2, #0]
 8008180:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008182:	430b      	orrs	r3, r1
 8008184:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4ab5      	ldr	r2, [pc, #724]	; (800847c <UART_SetConfig+0x330>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d004      	beq.n	80081b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081b2:	4313      	orrs	r3, r2
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	4bb0      	ldr	r3, [pc, #704]	; (8008480 <UART_SetConfig+0x334>)
 80081be:	4013      	ands	r3, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081c6:	430b      	orrs	r3, r1
 80081c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	f023 010f 	bic.w	r1, r3, #15
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4aa7      	ldr	r2, [pc, #668]	; (8008484 <UART_SetConfig+0x338>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d176      	bne.n	80082d8 <UART_SetConfig+0x18c>
 80081ea:	4ba7      	ldr	r3, [pc, #668]	; (8008488 <UART_SetConfig+0x33c>)
 80081ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081f2:	2b28      	cmp	r3, #40	; 0x28
 80081f4:	d86c      	bhi.n	80082d0 <UART_SetConfig+0x184>
 80081f6:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <UART_SetConfig+0xb0>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	080082a1 	.word	0x080082a1
 8008200:	080082d1 	.word	0x080082d1
 8008204:	080082d1 	.word	0x080082d1
 8008208:	080082d1 	.word	0x080082d1
 800820c:	080082d1 	.word	0x080082d1
 8008210:	080082d1 	.word	0x080082d1
 8008214:	080082d1 	.word	0x080082d1
 8008218:	080082d1 	.word	0x080082d1
 800821c:	080082a9 	.word	0x080082a9
 8008220:	080082d1 	.word	0x080082d1
 8008224:	080082d1 	.word	0x080082d1
 8008228:	080082d1 	.word	0x080082d1
 800822c:	080082d1 	.word	0x080082d1
 8008230:	080082d1 	.word	0x080082d1
 8008234:	080082d1 	.word	0x080082d1
 8008238:	080082d1 	.word	0x080082d1
 800823c:	080082b1 	.word	0x080082b1
 8008240:	080082d1 	.word	0x080082d1
 8008244:	080082d1 	.word	0x080082d1
 8008248:	080082d1 	.word	0x080082d1
 800824c:	080082d1 	.word	0x080082d1
 8008250:	080082d1 	.word	0x080082d1
 8008254:	080082d1 	.word	0x080082d1
 8008258:	080082d1 	.word	0x080082d1
 800825c:	080082b9 	.word	0x080082b9
 8008260:	080082d1 	.word	0x080082d1
 8008264:	080082d1 	.word	0x080082d1
 8008268:	080082d1 	.word	0x080082d1
 800826c:	080082d1 	.word	0x080082d1
 8008270:	080082d1 	.word	0x080082d1
 8008274:	080082d1 	.word	0x080082d1
 8008278:	080082d1 	.word	0x080082d1
 800827c:	080082c1 	.word	0x080082c1
 8008280:	080082d1 	.word	0x080082d1
 8008284:	080082d1 	.word	0x080082d1
 8008288:	080082d1 	.word	0x080082d1
 800828c:	080082d1 	.word	0x080082d1
 8008290:	080082d1 	.word	0x080082d1
 8008294:	080082d1 	.word	0x080082d1
 8008298:	080082d1 	.word	0x080082d1
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082a6:	e222      	b.n	80086ee <UART_SetConfig+0x5a2>
 80082a8:	2304      	movs	r3, #4
 80082aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ae:	e21e      	b.n	80086ee <UART_SetConfig+0x5a2>
 80082b0:	2308      	movs	r3, #8
 80082b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082b6:	e21a      	b.n	80086ee <UART_SetConfig+0x5a2>
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082be:	e216      	b.n	80086ee <UART_SetConfig+0x5a2>
 80082c0:	2320      	movs	r3, #32
 80082c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082c6:	e212      	b.n	80086ee <UART_SetConfig+0x5a2>
 80082c8:	2340      	movs	r3, #64	; 0x40
 80082ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ce:	e20e      	b.n	80086ee <UART_SetConfig+0x5a2>
 80082d0:	2380      	movs	r3, #128	; 0x80
 80082d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082d6:	e20a      	b.n	80086ee <UART_SetConfig+0x5a2>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a6b      	ldr	r2, [pc, #428]	; (800848c <UART_SetConfig+0x340>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d130      	bne.n	8008344 <UART_SetConfig+0x1f8>
 80082e2:	4b69      	ldr	r3, [pc, #420]	; (8008488 <UART_SetConfig+0x33c>)
 80082e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	d826      	bhi.n	800833c <UART_SetConfig+0x1f0>
 80082ee:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <UART_SetConfig+0x1a8>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	0800830d 	.word	0x0800830d
 80082f8:	08008315 	.word	0x08008315
 80082fc:	0800831d 	.word	0x0800831d
 8008300:	08008325 	.word	0x08008325
 8008304:	0800832d 	.word	0x0800832d
 8008308:	08008335 	.word	0x08008335
 800830c:	2300      	movs	r3, #0
 800830e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008312:	e1ec      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008314:	2304      	movs	r3, #4
 8008316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800831a:	e1e8      	b.n	80086ee <UART_SetConfig+0x5a2>
 800831c:	2308      	movs	r3, #8
 800831e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008322:	e1e4      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008324:	2310      	movs	r3, #16
 8008326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800832a:	e1e0      	b.n	80086ee <UART_SetConfig+0x5a2>
 800832c:	2320      	movs	r3, #32
 800832e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008332:	e1dc      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008334:	2340      	movs	r3, #64	; 0x40
 8008336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800833a:	e1d8      	b.n	80086ee <UART_SetConfig+0x5a2>
 800833c:	2380      	movs	r3, #128	; 0x80
 800833e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008342:	e1d4      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a51      	ldr	r2, [pc, #324]	; (8008490 <UART_SetConfig+0x344>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d130      	bne.n	80083b0 <UART_SetConfig+0x264>
 800834e:	4b4e      	ldr	r3, [pc, #312]	; (8008488 <UART_SetConfig+0x33c>)
 8008350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008352:	f003 0307 	and.w	r3, r3, #7
 8008356:	2b05      	cmp	r3, #5
 8008358:	d826      	bhi.n	80083a8 <UART_SetConfig+0x25c>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <UART_SetConfig+0x214>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	08008379 	.word	0x08008379
 8008364:	08008381 	.word	0x08008381
 8008368:	08008389 	.word	0x08008389
 800836c:	08008391 	.word	0x08008391
 8008370:	08008399 	.word	0x08008399
 8008374:	080083a1 	.word	0x080083a1
 8008378:	2300      	movs	r3, #0
 800837a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800837e:	e1b6      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008380:	2304      	movs	r3, #4
 8008382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008386:	e1b2      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008388:	2308      	movs	r3, #8
 800838a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800838e:	e1ae      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008390:	2310      	movs	r3, #16
 8008392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008396:	e1aa      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008398:	2320      	movs	r3, #32
 800839a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800839e:	e1a6      	b.n	80086ee <UART_SetConfig+0x5a2>
 80083a0:	2340      	movs	r3, #64	; 0x40
 80083a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083a6:	e1a2      	b.n	80086ee <UART_SetConfig+0x5a2>
 80083a8:	2380      	movs	r3, #128	; 0x80
 80083aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ae:	e19e      	b.n	80086ee <UART_SetConfig+0x5a2>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a37      	ldr	r2, [pc, #220]	; (8008494 <UART_SetConfig+0x348>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d130      	bne.n	800841c <UART_SetConfig+0x2d0>
 80083ba:	4b33      	ldr	r3, [pc, #204]	; (8008488 <UART_SetConfig+0x33c>)
 80083bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	2b05      	cmp	r3, #5
 80083c4:	d826      	bhi.n	8008414 <UART_SetConfig+0x2c8>
 80083c6:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <UART_SetConfig+0x280>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	080083e5 	.word	0x080083e5
 80083d0:	080083ed 	.word	0x080083ed
 80083d4:	080083f5 	.word	0x080083f5
 80083d8:	080083fd 	.word	0x080083fd
 80083dc:	08008405 	.word	0x08008405
 80083e0:	0800840d 	.word	0x0800840d
 80083e4:	2300      	movs	r3, #0
 80083e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ea:	e180      	b.n	80086ee <UART_SetConfig+0x5a2>
 80083ec:	2304      	movs	r3, #4
 80083ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083f2:	e17c      	b.n	80086ee <UART_SetConfig+0x5a2>
 80083f4:	2308      	movs	r3, #8
 80083f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083fa:	e178      	b.n	80086ee <UART_SetConfig+0x5a2>
 80083fc:	2310      	movs	r3, #16
 80083fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008402:	e174      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008404:	2320      	movs	r3, #32
 8008406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800840a:	e170      	b.n	80086ee <UART_SetConfig+0x5a2>
 800840c:	2340      	movs	r3, #64	; 0x40
 800840e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008412:	e16c      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008414:	2380      	movs	r3, #128	; 0x80
 8008416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800841a:	e168      	b.n	80086ee <UART_SetConfig+0x5a2>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1d      	ldr	r2, [pc, #116]	; (8008498 <UART_SetConfig+0x34c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d142      	bne.n	80084ac <UART_SetConfig+0x360>
 8008426:	4b18      	ldr	r3, [pc, #96]	; (8008488 <UART_SetConfig+0x33c>)
 8008428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	2b05      	cmp	r3, #5
 8008430:	d838      	bhi.n	80084a4 <UART_SetConfig+0x358>
 8008432:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <UART_SetConfig+0x2ec>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	08008451 	.word	0x08008451
 800843c:	08008459 	.word	0x08008459
 8008440:	08008461 	.word	0x08008461
 8008444:	08008469 	.word	0x08008469
 8008448:	08008471 	.word	0x08008471
 800844c:	0800849d 	.word	0x0800849d
 8008450:	2300      	movs	r3, #0
 8008452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008456:	e14a      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008458:	2304      	movs	r3, #4
 800845a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800845e:	e146      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008460:	2308      	movs	r3, #8
 8008462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008466:	e142      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008468:	2310      	movs	r3, #16
 800846a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800846e:	e13e      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008470:	2320      	movs	r3, #32
 8008472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008476:	e13a      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008478:	cfff69f3 	.word	0xcfff69f3
 800847c:	58000c00 	.word	0x58000c00
 8008480:	11fff4ff 	.word	0x11fff4ff
 8008484:	40011000 	.word	0x40011000
 8008488:	58024400 	.word	0x58024400
 800848c:	40004400 	.word	0x40004400
 8008490:	40004800 	.word	0x40004800
 8008494:	40004c00 	.word	0x40004c00
 8008498:	40005000 	.word	0x40005000
 800849c:	2340      	movs	r3, #64	; 0x40
 800849e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084a2:	e124      	b.n	80086ee <UART_SetConfig+0x5a2>
 80084a4:	2380      	movs	r3, #128	; 0x80
 80084a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084aa:	e120      	b.n	80086ee <UART_SetConfig+0x5a2>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4acc      	ldr	r2, [pc, #816]	; (80087e4 <UART_SetConfig+0x698>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d176      	bne.n	80085a4 <UART_SetConfig+0x458>
 80084b6:	4bcc      	ldr	r3, [pc, #816]	; (80087e8 <UART_SetConfig+0x69c>)
 80084b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084be:	2b28      	cmp	r3, #40	; 0x28
 80084c0:	d86c      	bhi.n	800859c <UART_SetConfig+0x450>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <UART_SetConfig+0x37c>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	0800856d 	.word	0x0800856d
 80084cc:	0800859d 	.word	0x0800859d
 80084d0:	0800859d 	.word	0x0800859d
 80084d4:	0800859d 	.word	0x0800859d
 80084d8:	0800859d 	.word	0x0800859d
 80084dc:	0800859d 	.word	0x0800859d
 80084e0:	0800859d 	.word	0x0800859d
 80084e4:	0800859d 	.word	0x0800859d
 80084e8:	08008575 	.word	0x08008575
 80084ec:	0800859d 	.word	0x0800859d
 80084f0:	0800859d 	.word	0x0800859d
 80084f4:	0800859d 	.word	0x0800859d
 80084f8:	0800859d 	.word	0x0800859d
 80084fc:	0800859d 	.word	0x0800859d
 8008500:	0800859d 	.word	0x0800859d
 8008504:	0800859d 	.word	0x0800859d
 8008508:	0800857d 	.word	0x0800857d
 800850c:	0800859d 	.word	0x0800859d
 8008510:	0800859d 	.word	0x0800859d
 8008514:	0800859d 	.word	0x0800859d
 8008518:	0800859d 	.word	0x0800859d
 800851c:	0800859d 	.word	0x0800859d
 8008520:	0800859d 	.word	0x0800859d
 8008524:	0800859d 	.word	0x0800859d
 8008528:	08008585 	.word	0x08008585
 800852c:	0800859d 	.word	0x0800859d
 8008530:	0800859d 	.word	0x0800859d
 8008534:	0800859d 	.word	0x0800859d
 8008538:	0800859d 	.word	0x0800859d
 800853c:	0800859d 	.word	0x0800859d
 8008540:	0800859d 	.word	0x0800859d
 8008544:	0800859d 	.word	0x0800859d
 8008548:	0800858d 	.word	0x0800858d
 800854c:	0800859d 	.word	0x0800859d
 8008550:	0800859d 	.word	0x0800859d
 8008554:	0800859d 	.word	0x0800859d
 8008558:	0800859d 	.word	0x0800859d
 800855c:	0800859d 	.word	0x0800859d
 8008560:	0800859d 	.word	0x0800859d
 8008564:	0800859d 	.word	0x0800859d
 8008568:	08008595 	.word	0x08008595
 800856c:	2301      	movs	r3, #1
 800856e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008572:	e0bc      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008574:	2304      	movs	r3, #4
 8008576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857a:	e0b8      	b.n	80086ee <UART_SetConfig+0x5a2>
 800857c:	2308      	movs	r3, #8
 800857e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008582:	e0b4      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008584:	2310      	movs	r3, #16
 8008586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800858a:	e0b0      	b.n	80086ee <UART_SetConfig+0x5a2>
 800858c:	2320      	movs	r3, #32
 800858e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008592:	e0ac      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008594:	2340      	movs	r3, #64	; 0x40
 8008596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800859a:	e0a8      	b.n	80086ee <UART_SetConfig+0x5a2>
 800859c:	2380      	movs	r3, #128	; 0x80
 800859e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085a2:	e0a4      	b.n	80086ee <UART_SetConfig+0x5a2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a90      	ldr	r2, [pc, #576]	; (80087ec <UART_SetConfig+0x6a0>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d130      	bne.n	8008610 <UART_SetConfig+0x4c4>
 80085ae:	4b8e      	ldr	r3, [pc, #568]	; (80087e8 <UART_SetConfig+0x69c>)
 80085b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	2b05      	cmp	r3, #5
 80085b8:	d826      	bhi.n	8008608 <UART_SetConfig+0x4bc>
 80085ba:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <UART_SetConfig+0x474>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	080085d9 	.word	0x080085d9
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	080085e9 	.word	0x080085e9
 80085cc:	080085f1 	.word	0x080085f1
 80085d0:	080085f9 	.word	0x080085f9
 80085d4:	08008601 	.word	0x08008601
 80085d8:	2300      	movs	r3, #0
 80085da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085de:	e086      	b.n	80086ee <UART_SetConfig+0x5a2>
 80085e0:	2304      	movs	r3, #4
 80085e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085e6:	e082      	b.n	80086ee <UART_SetConfig+0x5a2>
 80085e8:	2308      	movs	r3, #8
 80085ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ee:	e07e      	b.n	80086ee <UART_SetConfig+0x5a2>
 80085f0:	2310      	movs	r3, #16
 80085f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085f6:	e07a      	b.n	80086ee <UART_SetConfig+0x5a2>
 80085f8:	2320      	movs	r3, #32
 80085fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085fe:	e076      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008600:	2340      	movs	r3, #64	; 0x40
 8008602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008606:	e072      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008608:	2380      	movs	r3, #128	; 0x80
 800860a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800860e:	e06e      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a76      	ldr	r2, [pc, #472]	; (80087f0 <UART_SetConfig+0x6a4>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d130      	bne.n	800867c <UART_SetConfig+0x530>
 800861a:	4b73      	ldr	r3, [pc, #460]	; (80087e8 <UART_SetConfig+0x69c>)
 800861c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	2b05      	cmp	r3, #5
 8008624:	d826      	bhi.n	8008674 <UART_SetConfig+0x528>
 8008626:	a201      	add	r2, pc, #4	; (adr r2, 800862c <UART_SetConfig+0x4e0>)
 8008628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862c:	08008645 	.word	0x08008645
 8008630:	0800864d 	.word	0x0800864d
 8008634:	08008655 	.word	0x08008655
 8008638:	0800865d 	.word	0x0800865d
 800863c:	08008665 	.word	0x08008665
 8008640:	0800866d 	.word	0x0800866d
 8008644:	2300      	movs	r3, #0
 8008646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800864a:	e050      	b.n	80086ee <UART_SetConfig+0x5a2>
 800864c:	2304      	movs	r3, #4
 800864e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008652:	e04c      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008654:	2308      	movs	r3, #8
 8008656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800865a:	e048      	b.n	80086ee <UART_SetConfig+0x5a2>
 800865c:	2310      	movs	r3, #16
 800865e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008662:	e044      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008664:	2320      	movs	r3, #32
 8008666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800866a:	e040      	b.n	80086ee <UART_SetConfig+0x5a2>
 800866c:	2340      	movs	r3, #64	; 0x40
 800866e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008672:	e03c      	b.n	80086ee <UART_SetConfig+0x5a2>
 8008674:	2380      	movs	r3, #128	; 0x80
 8008676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800867a:	e038      	b.n	80086ee <UART_SetConfig+0x5a2>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a5c      	ldr	r2, [pc, #368]	; (80087f4 <UART_SetConfig+0x6a8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d130      	bne.n	80086e8 <UART_SetConfig+0x59c>
 8008686:	4b58      	ldr	r3, [pc, #352]	; (80087e8 <UART_SetConfig+0x69c>)
 8008688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800868a:	f003 0307 	and.w	r3, r3, #7
 800868e:	2b05      	cmp	r3, #5
 8008690:	d826      	bhi.n	80086e0 <UART_SetConfig+0x594>
 8008692:	a201      	add	r2, pc, #4	; (adr r2, 8008698 <UART_SetConfig+0x54c>)
 8008694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008698:	080086b1 	.word	0x080086b1
 800869c:	080086b9 	.word	0x080086b9
 80086a0:	080086c1 	.word	0x080086c1
 80086a4:	080086c9 	.word	0x080086c9
 80086a8:	080086d1 	.word	0x080086d1
 80086ac:	080086d9 	.word	0x080086d9
 80086b0:	2302      	movs	r3, #2
 80086b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086b6:	e01a      	b.n	80086ee <UART_SetConfig+0x5a2>
 80086b8:	2304      	movs	r3, #4
 80086ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086be:	e016      	b.n	80086ee <UART_SetConfig+0x5a2>
 80086c0:	2308      	movs	r3, #8
 80086c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086c6:	e012      	b.n	80086ee <UART_SetConfig+0x5a2>
 80086c8:	2310      	movs	r3, #16
 80086ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ce:	e00e      	b.n	80086ee <UART_SetConfig+0x5a2>
 80086d0:	2320      	movs	r3, #32
 80086d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086d6:	e00a      	b.n	80086ee <UART_SetConfig+0x5a2>
 80086d8:	2340      	movs	r3, #64	; 0x40
 80086da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086de:	e006      	b.n	80086ee <UART_SetConfig+0x5a2>
 80086e0:	2380      	movs	r3, #128	; 0x80
 80086e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086e6:	e002      	b.n	80086ee <UART_SetConfig+0x5a2>
 80086e8:	2380      	movs	r3, #128	; 0x80
 80086ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a40      	ldr	r2, [pc, #256]	; (80087f4 <UART_SetConfig+0x6a8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	f040 80ef 	bne.w	80088d8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086fe:	2b20      	cmp	r3, #32
 8008700:	dc46      	bgt.n	8008790 <UART_SetConfig+0x644>
 8008702:	2b02      	cmp	r3, #2
 8008704:	f2c0 8081 	blt.w	800880a <UART_SetConfig+0x6be>
 8008708:	3b02      	subs	r3, #2
 800870a:	2b1e      	cmp	r3, #30
 800870c:	d87d      	bhi.n	800880a <UART_SetConfig+0x6be>
 800870e:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <UART_SetConfig+0x5c8>)
 8008710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008714:	08008797 	.word	0x08008797
 8008718:	0800880b 	.word	0x0800880b
 800871c:	0800879f 	.word	0x0800879f
 8008720:	0800880b 	.word	0x0800880b
 8008724:	0800880b 	.word	0x0800880b
 8008728:	0800880b 	.word	0x0800880b
 800872c:	080087af 	.word	0x080087af
 8008730:	0800880b 	.word	0x0800880b
 8008734:	0800880b 	.word	0x0800880b
 8008738:	0800880b 	.word	0x0800880b
 800873c:	0800880b 	.word	0x0800880b
 8008740:	0800880b 	.word	0x0800880b
 8008744:	0800880b 	.word	0x0800880b
 8008748:	0800880b 	.word	0x0800880b
 800874c:	080087bf 	.word	0x080087bf
 8008750:	0800880b 	.word	0x0800880b
 8008754:	0800880b 	.word	0x0800880b
 8008758:	0800880b 	.word	0x0800880b
 800875c:	0800880b 	.word	0x0800880b
 8008760:	0800880b 	.word	0x0800880b
 8008764:	0800880b 	.word	0x0800880b
 8008768:	0800880b 	.word	0x0800880b
 800876c:	0800880b 	.word	0x0800880b
 8008770:	0800880b 	.word	0x0800880b
 8008774:	0800880b 	.word	0x0800880b
 8008778:	0800880b 	.word	0x0800880b
 800877c:	0800880b 	.word	0x0800880b
 8008780:	0800880b 	.word	0x0800880b
 8008784:	0800880b 	.word	0x0800880b
 8008788:	0800880b 	.word	0x0800880b
 800878c:	080087fd 	.word	0x080087fd
 8008790:	2b40      	cmp	r3, #64	; 0x40
 8008792:	d036      	beq.n	8008802 <UART_SetConfig+0x6b6>
 8008794:	e039      	b.n	800880a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008796:	f7fd f81d 	bl	80057d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800879a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800879c:	e03b      	b.n	8008816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800879e:	f107 0314 	add.w	r3, r7, #20
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fd f82c 	bl	8005800 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087ac:	e033      	b.n	8008816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ae:	f107 0308 	add.w	r3, r7, #8
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fd f978 	bl	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087bc:	e02b      	b.n	8008816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087be:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <UART_SetConfig+0x69c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0320 	and.w	r3, r3, #32
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087ca:	4b07      	ldr	r3, [pc, #28]	; (80087e8 <UART_SetConfig+0x69c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	08db      	lsrs	r3, r3, #3
 80087d0:	f003 0303 	and.w	r3, r3, #3
 80087d4:	4a08      	ldr	r2, [pc, #32]	; (80087f8 <UART_SetConfig+0x6ac>)
 80087d6:	fa22 f303 	lsr.w	r3, r2, r3
 80087da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087dc:	e01b      	b.n	8008816 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80087de:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <UART_SetConfig+0x6ac>)
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087e2:	e018      	b.n	8008816 <UART_SetConfig+0x6ca>
 80087e4:	40011400 	.word	0x40011400
 80087e8:	58024400 	.word	0x58024400
 80087ec:	40007800 	.word	0x40007800
 80087f0:	40007c00 	.word	0x40007c00
 80087f4:	58000c00 	.word	0x58000c00
 80087f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087fc:	4bc4      	ldr	r3, [pc, #784]	; (8008b10 <UART_SetConfig+0x9c4>)
 80087fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008800:	e009      	b.n	8008816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008808:	e005      	b.n	8008816 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008814:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 81da 	beq.w	8008bd2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	4abc      	ldr	r2, [pc, #752]	; (8008b14 <UART_SetConfig+0x9c8>)
 8008824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008828:	461a      	mov	r2, r3
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008830:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	4613      	mov	r3, r2
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	4413      	add	r3, r2
 800883c:	6a3a      	ldr	r2, [r7, #32]
 800883e:	429a      	cmp	r2, r3
 8008840:	d305      	bcc.n	800884e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008848:	6a3a      	ldr	r2, [r7, #32]
 800884a:	429a      	cmp	r2, r3
 800884c:	d903      	bls.n	8008856 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008854:	e1bd      	b.n	8008bd2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008858:	4618      	mov	r0, r3
 800885a:	f04f 0100 	mov.w	r1, #0
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	4aac      	ldr	r2, [pc, #688]	; (8008b14 <UART_SetConfig+0x9c8>)
 8008864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008868:	b29a      	uxth	r2, r3
 800886a:	f04f 0300 	mov.w	r3, #0
 800886e:	f7f7 fd37 	bl	80002e0 <__aeabi_uldivmod>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4610      	mov	r0, r2
 8008878:	4619      	mov	r1, r3
 800887a:	f04f 0200 	mov.w	r2, #0
 800887e:	f04f 0300 	mov.w	r3, #0
 8008882:	020b      	lsls	r3, r1, #8
 8008884:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008888:	0202      	lsls	r2, r0, #8
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	6849      	ldr	r1, [r1, #4]
 800888e:	0849      	lsrs	r1, r1, #1
 8008890:	4608      	mov	r0, r1
 8008892:	f04f 0100 	mov.w	r1, #0
 8008896:	1814      	adds	r4, r2, r0
 8008898:	eb43 0501 	adc.w	r5, r3, r1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	461a      	mov	r2, r3
 80088a2:	f04f 0300 	mov.w	r3, #0
 80088a6:	4620      	mov	r0, r4
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7f7 fd19 	bl	80002e0 <__aeabi_uldivmod>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4613      	mov	r3, r2
 80088b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088bc:	d308      	bcc.n	80088d0 <UART_SetConfig+0x784>
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088c4:	d204      	bcs.n	80088d0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088cc:	60da      	str	r2, [r3, #12]
 80088ce:	e180      	b.n	8008bd2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80088d6:	e17c      	b.n	8008bd2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088e0:	f040 80be 	bne.w	8008a60 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 80088e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	dc49      	bgt.n	8008980 <UART_SetConfig+0x834>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	db7c      	blt.n	80089ea <UART_SetConfig+0x89e>
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	d87a      	bhi.n	80089ea <UART_SetConfig+0x89e>
 80088f4:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <UART_SetConfig+0x7b0>)
 80088f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fa:	bf00      	nop
 80088fc:	08008987 	.word	0x08008987
 8008900:	0800898f 	.word	0x0800898f
 8008904:	080089eb 	.word	0x080089eb
 8008908:	080089eb 	.word	0x080089eb
 800890c:	08008997 	.word	0x08008997
 8008910:	080089eb 	.word	0x080089eb
 8008914:	080089eb 	.word	0x080089eb
 8008918:	080089eb 	.word	0x080089eb
 800891c:	080089a7 	.word	0x080089a7
 8008920:	080089eb 	.word	0x080089eb
 8008924:	080089eb 	.word	0x080089eb
 8008928:	080089eb 	.word	0x080089eb
 800892c:	080089eb 	.word	0x080089eb
 8008930:	080089eb 	.word	0x080089eb
 8008934:	080089eb 	.word	0x080089eb
 8008938:	080089eb 	.word	0x080089eb
 800893c:	080089b7 	.word	0x080089b7
 8008940:	080089eb 	.word	0x080089eb
 8008944:	080089eb 	.word	0x080089eb
 8008948:	080089eb 	.word	0x080089eb
 800894c:	080089eb 	.word	0x080089eb
 8008950:	080089eb 	.word	0x080089eb
 8008954:	080089eb 	.word	0x080089eb
 8008958:	080089eb 	.word	0x080089eb
 800895c:	080089eb 	.word	0x080089eb
 8008960:	080089eb 	.word	0x080089eb
 8008964:	080089eb 	.word	0x080089eb
 8008968:	080089eb 	.word	0x080089eb
 800896c:	080089eb 	.word	0x080089eb
 8008970:	080089eb 	.word	0x080089eb
 8008974:	080089eb 	.word	0x080089eb
 8008978:	080089eb 	.word	0x080089eb
 800897c:	080089dd 	.word	0x080089dd
 8008980:	2b40      	cmp	r3, #64	; 0x40
 8008982:	d02e      	beq.n	80089e2 <UART_SetConfig+0x896>
 8008984:	e031      	b.n	80089ea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008986:	f7fb ff77 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 800898a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800898c:	e033      	b.n	80089f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800898e:	f7fb ff89 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8008992:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008994:	e02f      	b.n	80089f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008996:	f107 0314 	add.w	r3, r7, #20
 800899a:	4618      	mov	r0, r3
 800899c:	f7fc ff30 	bl	8005800 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089a4:	e027      	b.n	80089f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a6:	f107 0308 	add.w	r3, r7, #8
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fd f87c 	bl	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089b4:	e01f      	b.n	80089f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b6:	4b58      	ldr	r3, [pc, #352]	; (8008b18 <UART_SetConfig+0x9cc>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089c2:	4b55      	ldr	r3, [pc, #340]	; (8008b18 <UART_SetConfig+0x9cc>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	08db      	lsrs	r3, r3, #3
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	4a53      	ldr	r2, [pc, #332]	; (8008b1c <UART_SetConfig+0x9d0>)
 80089ce:	fa22 f303 	lsr.w	r3, r2, r3
 80089d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089d4:	e00f      	b.n	80089f6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80089d6:	4b51      	ldr	r3, [pc, #324]	; (8008b1c <UART_SetConfig+0x9d0>)
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089da:	e00c      	b.n	80089f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089dc:	4b4c      	ldr	r3, [pc, #304]	; (8008b10 <UART_SetConfig+0x9c4>)
 80089de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089e0:	e009      	b.n	80089f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089e8:	e005      	b.n	80089f6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80089f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 80ea 	beq.w	8008bd2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	4a44      	ldr	r2, [pc, #272]	; (8008b14 <UART_SetConfig+0x9c8>)
 8008a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a10:	005a      	lsls	r2, r3, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	085b      	lsrs	r3, r3, #1
 8008a18:	441a      	add	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	2b0f      	cmp	r3, #15
 8008a28:	d916      	bls.n	8008a58 <UART_SetConfig+0x90c>
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a30:	d212      	bcs.n	8008a58 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	f023 030f 	bic.w	r3, r3, #15
 8008a3a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f003 0307 	and.w	r3, r3, #7
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a54:	60da      	str	r2, [r3, #12]
 8008a56:	e0bc      	b.n	8008bd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008a5e:	e0b8      	b.n	8008bd2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a64:	2b20      	cmp	r3, #32
 8008a66:	dc4b      	bgt.n	8008b00 <UART_SetConfig+0x9b4>
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f2c0 8087 	blt.w	8008b7c <UART_SetConfig+0xa30>
 8008a6e:	2b20      	cmp	r3, #32
 8008a70:	f200 8084 	bhi.w	8008b7c <UART_SetConfig+0xa30>
 8008a74:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <UART_SetConfig+0x930>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008b07 	.word	0x08008b07
 8008a80:	08008b21 	.word	0x08008b21
 8008a84:	08008b7d 	.word	0x08008b7d
 8008a88:	08008b7d 	.word	0x08008b7d
 8008a8c:	08008b29 	.word	0x08008b29
 8008a90:	08008b7d 	.word	0x08008b7d
 8008a94:	08008b7d 	.word	0x08008b7d
 8008a98:	08008b7d 	.word	0x08008b7d
 8008a9c:	08008b39 	.word	0x08008b39
 8008aa0:	08008b7d 	.word	0x08008b7d
 8008aa4:	08008b7d 	.word	0x08008b7d
 8008aa8:	08008b7d 	.word	0x08008b7d
 8008aac:	08008b7d 	.word	0x08008b7d
 8008ab0:	08008b7d 	.word	0x08008b7d
 8008ab4:	08008b7d 	.word	0x08008b7d
 8008ab8:	08008b7d 	.word	0x08008b7d
 8008abc:	08008b49 	.word	0x08008b49
 8008ac0:	08008b7d 	.word	0x08008b7d
 8008ac4:	08008b7d 	.word	0x08008b7d
 8008ac8:	08008b7d 	.word	0x08008b7d
 8008acc:	08008b7d 	.word	0x08008b7d
 8008ad0:	08008b7d 	.word	0x08008b7d
 8008ad4:	08008b7d 	.word	0x08008b7d
 8008ad8:	08008b7d 	.word	0x08008b7d
 8008adc:	08008b7d 	.word	0x08008b7d
 8008ae0:	08008b7d 	.word	0x08008b7d
 8008ae4:	08008b7d 	.word	0x08008b7d
 8008ae8:	08008b7d 	.word	0x08008b7d
 8008aec:	08008b7d 	.word	0x08008b7d
 8008af0:	08008b7d 	.word	0x08008b7d
 8008af4:	08008b7d 	.word	0x08008b7d
 8008af8:	08008b7d 	.word	0x08008b7d
 8008afc:	08008b6f 	.word	0x08008b6f
 8008b00:	2b40      	cmp	r3, #64	; 0x40
 8008b02:	d037      	beq.n	8008b74 <UART_SetConfig+0xa28>
 8008b04:	e03a      	b.n	8008b7c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b06:	f7fb feb7 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8008b0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008b0c:	e03c      	b.n	8008b88 <UART_SetConfig+0xa3c>
 8008b0e:	bf00      	nop
 8008b10:	003d0900 	.word	0x003d0900
 8008b14:	0800f8ec 	.word	0x0800f8ec
 8008b18:	58024400 	.word	0x58024400
 8008b1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b20:	f7fb fec0 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8008b24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008b26:	e02f      	b.n	8008b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fc fe67 	bl	8005800 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b36:	e027      	b.n	8008b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b38:	f107 0308 	add.w	r3, r7, #8
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fc ffb3 	bl	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b46:	e01f      	b.n	8008b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b48:	4b2c      	ldr	r3, [pc, #176]	; (8008bfc <UART_SetConfig+0xab0>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0320 	and.w	r3, r3, #32
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b54:	4b29      	ldr	r3, [pc, #164]	; (8008bfc <UART_SetConfig+0xab0>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	08db      	lsrs	r3, r3, #3
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	4a28      	ldr	r2, [pc, #160]	; (8008c00 <UART_SetConfig+0xab4>)
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
 8008b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b66:	e00f      	b.n	8008b88 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008b68:	4b25      	ldr	r3, [pc, #148]	; (8008c00 <UART_SetConfig+0xab4>)
 8008b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b6c:	e00c      	b.n	8008b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b6e:	4b25      	ldr	r3, [pc, #148]	; (8008c04 <UART_SetConfig+0xab8>)
 8008b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b72:	e009      	b.n	8008b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b7a:	e005      	b.n	8008b88 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008b86:	bf00      	nop
    }

    if (pclk != 0U)
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d021      	beq.n	8008bd2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b92:	4a1d      	ldr	r2, [pc, #116]	; (8008c08 <UART_SetConfig+0xabc>)
 8008b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	085b      	lsrs	r3, r3, #1
 8008ba6:	441a      	add	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	2b0f      	cmp	r3, #15
 8008bb6:	d909      	bls.n	8008bcc <UART_SetConfig+0xa80>
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bbe:	d205      	bcs.n	8008bcc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60da      	str	r2, [r3, #12]
 8008bca:	e002      	b.n	8008bd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008bee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3738      	adds	r7, #56	; 0x38
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	58024400 	.word	0x58024400
 8008c00:	03d09000 	.word	0x03d09000
 8008c04:	003d0900 	.word	0x003d0900
 8008c08:	0800f8ec 	.word	0x0800f8ec

08008c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00a      	beq.n	8008c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7e:	f003 0308 	and.w	r3, r3, #8
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00a      	beq.n	8008c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01a      	beq.n	8008d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d0a:	d10a      	bne.n	8008d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	605a      	str	r2, [r3, #4]
  }
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d60:	f7f7 fc8a 	bl	8000678 <HAL_GetTick>
 8008d64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d10e      	bne.n	8008d92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f82f 	bl	8008de6 <UART_WaitOnFlagUntilTimeout>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e025      	b.n	8008dde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d10e      	bne.n	8008dbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f819 	bl	8008de6 <UART_WaitOnFlagUntilTimeout>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e00f      	b.n	8008dde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b09c      	sub	sp, #112	; 0x70
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	603b      	str	r3, [r7, #0]
 8008df2:	4613      	mov	r3, r2
 8008df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df6:	e0a9      	b.n	8008f4c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfe:	f000 80a5 	beq.w	8008f4c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e02:	f7f7 fc39 	bl	8000678 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d302      	bcc.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d140      	bne.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e2c:	667b      	str	r3, [r7, #100]	; 0x64
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e6      	bne.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	f023 0301 	bic.w	r3, r3, #1
 8008e60:	663b      	str	r3, [r7, #96]	; 0x60
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3308      	adds	r3, #8
 8008e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e5      	bne.n	8008e4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e069      	b.n	8008f6e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d051      	beq.n	8008f4c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eb6:	d149      	bne.n	8008f4c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ec0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ee8:	e841 2300 	strex	r3, r2, [r1]
 8008eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e6      	bne.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	e853 3f00 	ldrex	r3, [r3]
 8008f02:	613b      	str	r3, [r7, #16]
   return(result);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f023 0301 	bic.w	r3, r3, #1
 8008f0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3308      	adds	r3, #8
 8008f12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f14:	623a      	str	r2, [r7, #32]
 8008f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	69f9      	ldr	r1, [r7, #28]
 8008f1a:	6a3a      	ldr	r2, [r7, #32]
 8008f1c:	e841 2300 	strex	r3, r2, [r1]
 8008f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e5      	bne.n	8008ef4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2220      	movs	r2, #32
 8008f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e010      	b.n	8008f6e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	69da      	ldr	r2, [r3, #28]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	4013      	ands	r3, r2
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	bf0c      	ite	eq
 8008f5c:	2301      	moveq	r3, #1
 8008f5e:	2300      	movne	r3, #0
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	461a      	mov	r2, r3
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	f43f af46 	beq.w	8008df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3770      	adds	r7, #112	; 0x70
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b096      	sub	sp, #88	; 0x58
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	4613      	mov	r3, r2
 8008f84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	88fa      	ldrh	r2, [r7, #6]
 8008f90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2222      	movs	r2, #34	; 0x22
 8008fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d02c      	beq.n	8009006 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb0:	4a42      	ldr	r2, [pc, #264]	; (80090bc <UART_Start_Receive_DMA+0x144>)
 8008fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb8:	4a41      	ldr	r2, [pc, #260]	; (80090c0 <UART_Start_Receive_DMA+0x148>)
 8008fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fc0:	4a40      	ldr	r2, [pc, #256]	; (80090c4 <UART_Start_Receive_DMA+0x14c>)
 8008fc2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fc8:	2200      	movs	r2, #0
 8008fca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3324      	adds	r3, #36	; 0x24
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fdc:	461a      	mov	r2, r3
 8008fde:	88fb      	ldrh	r3, [r7, #6]
 8008fe0:	f7f7 ff9e 	bl	8000f20 <HAL_DMA_Start_IT>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00d      	beq.n	8009006 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2210      	movs	r2, #16
 8008fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e055      	b.n	80090b2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d018      	beq.n	8009048 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800902a:	657b      	str	r3, [r7, #84]	; 0x54
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009034:	64bb      	str	r3, [r7, #72]	; 0x48
 8009036:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800903a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e6      	bne.n	8009016 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3308      	adds	r3, #8
 800904e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	f043 0301 	orr.w	r3, r3, #1
 800905e:	653b      	str	r3, [r7, #80]	; 0x50
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3308      	adds	r3, #8
 8009066:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009068:	637a      	str	r2, [r7, #52]	; 0x34
 800906a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800906e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009070:	e841 2300 	strex	r3, r2, [r1]
 8009074:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e5      	bne.n	8009048 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3308      	adds	r3, #8
 8009082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	613b      	str	r3, [r7, #16]
   return(result);
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3308      	adds	r3, #8
 800909a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800909c:	623a      	str	r2, [r7, #32]
 800909e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	69f9      	ldr	r1, [r7, #28]
 80090a2:	6a3a      	ldr	r2, [r7, #32]
 80090a4:	e841 2300 	strex	r3, r2, [r1]
 80090a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e5      	bne.n	800907c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3758      	adds	r7, #88	; 0x58
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	080092cb 	.word	0x080092cb
 80090c0:	080093ed 	.word	0x080093ed
 80090c4:	08009425 	.word	0x08009425

080090c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b08f      	sub	sp, #60	; 0x3c
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80090e4:	637b      	str	r3, [r7, #52]	; 0x34
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e6      	bne.n	80090d0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3308      	adds	r3, #8
 8009108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	60bb      	str	r3, [r7, #8]
   return(result);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009118:	633b      	str	r3, [r7, #48]	; 0x30
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3308      	adds	r3, #8
 8009120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009122:	61ba      	str	r2, [r7, #24]
 8009124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	6979      	ldr	r1, [r7, #20]
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	613b      	str	r3, [r7, #16]
   return(result);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e5      	bne.n	8009102 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2220      	movs	r2, #32
 800913a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800913e:	bf00      	nop
 8009140:	373c      	adds	r7, #60	; 0x3c
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
	...

0800914c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800914c:	b480      	push	{r7}
 800914e:	b095      	sub	sp, #84	; 0x54
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009172:	643b      	str	r3, [r7, #64]	; 0x40
 8009174:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e6      	bne.n	8009154 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3308      	adds	r3, #8
 800918c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	61fb      	str	r3, [r7, #28]
   return(result);
 8009196:	69fa      	ldr	r2, [r7, #28]
 8009198:	4b1e      	ldr	r3, [pc, #120]	; (8009214 <UART_EndRxTransfer+0xc8>)
 800919a:	4013      	ands	r3, r2
 800919c:	64bb      	str	r3, [r7, #72]	; 0x48
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e5      	bne.n	8009186 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d118      	bne.n	80091f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f023 0310 	bic.w	r3, r3, #16
 80091d6:	647b      	str	r3, [r7, #68]	; 0x44
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	461a      	mov	r2, r3
 80091de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091e0:	61bb      	str	r3, [r7, #24]
 80091e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6979      	ldr	r1, [r7, #20]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	613b      	str	r3, [r7, #16]
   return(result);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e6      	bne.n	80091c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009208:	bf00      	nop
 800920a:	3754      	adds	r7, #84	; 0x54
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	effffffe 	.word	0xeffffffe

08009218 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b090      	sub	sp, #64	; 0x40
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800922e:	d037      	beq.n	80092a0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009232:	2200      	movs	r2, #0
 8009234:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3308      	adds	r3, #8
 800923e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	623b      	str	r3, [r7, #32]
   return(result);
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800924e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3308      	adds	r3, #8
 8009256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009258:	633a      	str	r2, [r7, #48]	; 0x30
 800925a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800925e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e5      	bne.n	8009238 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800926c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	60fb      	str	r3, [r7, #12]
   return(result);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009280:	637b      	str	r3, [r7, #52]	; 0x34
 8009282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	69b9      	ldr	r1, [r7, #24]
 8009290:	69fa      	ldr	r2, [r7, #28]
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	617b      	str	r3, [r7, #20]
   return(result);
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e6      	bne.n	800926c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800929e:	e002      	b.n	80092a6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80092a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092a2:	f7fe ff15 	bl	80080d0 <HAL_UART_TxCpltCallback>
}
 80092a6:	bf00      	nop
 80092a8:	3740      	adds	r7, #64	; 0x40
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7fe ff11 	bl	80080e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092c2:	bf00      	nop
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b09c      	sub	sp, #112	; 0x70
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e0:	d071      	beq.n	80093c6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80092e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009308:	65bb      	str	r3, [r7, #88]	; 0x58
 800930a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800930e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e6      	bne.n	80092ea <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3308      	adds	r3, #8
 8009322:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	e853 3f00 	ldrex	r3, [r3]
 800932a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932e:	f023 0301 	bic.w	r3, r3, #1
 8009332:	667b      	str	r3, [r7, #100]	; 0x64
 8009334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3308      	adds	r3, #8
 800933a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800933c:	647a      	str	r2, [r7, #68]	; 0x44
 800933e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800934a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e5      	bne.n	800931c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3308      	adds	r3, #8
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	e853 3f00 	ldrex	r3, [r3]
 800935e:	623b      	str	r3, [r7, #32]
   return(result);
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009366:	663b      	str	r3, [r7, #96]	; 0x60
 8009368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3308      	adds	r3, #8
 800936e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009370:	633a      	str	r2, [r7, #48]	; 0x30
 8009372:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009378:	e841 2300 	strex	r3, r2, [r1]
 800937c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e5      	bne.n	8009350 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009386:	2220      	movs	r2, #32
 8009388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800938c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800938e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009390:	2b01      	cmp	r3, #1
 8009392:	d118      	bne.n	80093c6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f023 0310 	bic.w	r3, r3, #16
 80093a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093b2:	61fb      	str	r3, [r7, #28]
 80093b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b6:	69b9      	ldr	r1, [r7, #24]
 80093b8:	69fa      	ldr	r2, [r7, #28]
 80093ba:	e841 2300 	strex	r3, r2, [r1]
 80093be:	617b      	str	r3, [r7, #20]
   return(result);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e6      	bne.n	8009394 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d107      	bne.n	80093de <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093d4:	4619      	mov	r1, r3
 80093d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093d8:	f7fe feac 	bl	8008134 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093dc:	e002      	b.n	80093e4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 80093de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093e0:	f7fe fe8a 	bl	80080f8 <HAL_UART_RxCpltCallback>
}
 80093e4:	bf00      	nop
 80093e6:	3770      	adds	r7, #112	; 0x70
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d109      	bne.n	8009416 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009408:	085b      	lsrs	r3, r3, #1
 800940a:	b29b      	uxth	r3, r3
 800940c:	4619      	mov	r1, r3
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7fe fe90 	bl	8008134 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009414:	e002      	b.n	800941c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f7fe fe78 	bl	800810c <HAL_UART_RxHalfCpltCallback>
}
 800941c:	bf00      	nop
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009430:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009438:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009440:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944c:	2b80      	cmp	r3, #128	; 0x80
 800944e:	d109      	bne.n	8009464 <UART_DMAError+0x40>
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	2b21      	cmp	r3, #33	; 0x21
 8009454:	d106      	bne.n	8009464 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2200      	movs	r2, #0
 800945a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800945e:	6978      	ldr	r0, [r7, #20]
 8009460:	f7ff fe32 	bl	80090c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946e:	2b40      	cmp	r3, #64	; 0x40
 8009470:	d109      	bne.n	8009486 <UART_DMAError+0x62>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b22      	cmp	r3, #34	; 0x22
 8009476:	d106      	bne.n	8009486 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	2200      	movs	r2, #0
 800947c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009480:	6978      	ldr	r0, [r7, #20]
 8009482:	f7ff fe63 	bl	800914c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800948c:	f043 0210 	orr.w	r2, r3, #16
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009496:	6978      	ldr	r0, [r7, #20]
 8009498:	f7fe fe42 	bl	8008120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800949c:	bf00      	nop
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7fe fe2c 	bl	8008120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	61bb      	str	r3, [r7, #24]
 80094f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	6979      	ldr	r1, [r7, #20]
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	613b      	str	r3, [r7, #16]
   return(result);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e6      	bne.n	80094d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7fe fdd9 	bl	80080d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800951e:	bf00      	nop
 8009520:	3720      	adds	r7, #32
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800952e:	bf00      	nop
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009556:	bf00      	nop
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009570:	2b01      	cmp	r3, #1
 8009572:	d101      	bne.n	8009578 <HAL_UARTEx_DisableFifoMode+0x16>
 8009574:	2302      	movs	r3, #2
 8009576:	e027      	b.n	80095c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2224      	movs	r2, #36	; 0x24
 8009584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f022 0201 	bic.w	r2, r2, #1
 800959e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d101      	bne.n	80095ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095e8:	2302      	movs	r3, #2
 80095ea:	e02d      	b.n	8009648 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2224      	movs	r2, #36	; 0x24
 80095f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f022 0201 	bic.w	r2, r2, #1
 8009612:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	430a      	orrs	r2, r1
 8009626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f84f 	bl	80096cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2220      	movs	r2, #32
 800963a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009664:	2302      	movs	r3, #2
 8009666:	e02d      	b.n	80096c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2224      	movs	r2, #36	; 0x24
 8009674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f022 0201 	bic.w	r2, r2, #1
 800968e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	430a      	orrs	r2, r1
 80096a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f811 	bl	80096cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d108      	bne.n	80096ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096ec:	e031      	b.n	8009752 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096ee:	2310      	movs	r3, #16
 80096f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096f2:	2310      	movs	r3, #16
 80096f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	0e5b      	lsrs	r3, r3, #25
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	f003 0307 	and.w	r3, r3, #7
 8009704:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	0f5b      	lsrs	r3, r3, #29
 800970e:	b2db      	uxtb	r3, r3
 8009710:	f003 0307 	and.w	r3, r3, #7
 8009714:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	7b3a      	ldrb	r2, [r7, #12]
 800971a:	4911      	ldr	r1, [pc, #68]	; (8009760 <UARTEx_SetNbDataToProcess+0x94>)
 800971c:	5c8a      	ldrb	r2, [r1, r2]
 800971e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009722:	7b3a      	ldrb	r2, [r7, #12]
 8009724:	490f      	ldr	r1, [pc, #60]	; (8009764 <UARTEx_SetNbDataToProcess+0x98>)
 8009726:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009728:	fb93 f3f2 	sdiv	r3, r3, r2
 800972c:	b29a      	uxth	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	7b7a      	ldrb	r2, [r7, #13]
 8009738:	4909      	ldr	r1, [pc, #36]	; (8009760 <UARTEx_SetNbDataToProcess+0x94>)
 800973a:	5c8a      	ldrb	r2, [r1, r2]
 800973c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009740:	7b7a      	ldrb	r2, [r7, #13]
 8009742:	4908      	ldr	r1, [pc, #32]	; (8009764 <UARTEx_SetNbDataToProcess+0x98>)
 8009744:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009746:	fb93 f3f2 	sdiv	r3, r3, r2
 800974a:	b29a      	uxth	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009752:	bf00      	nop
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	0800f904 	.word	0x0800f904
 8009764:	0800f90c 	.word	0x0800f90c

08009768 <initPID>:
		return ROV_FALSE; //false
	}
}

void initPID(Algorithm_PID_t Pid, uint8_t mode, float_t fb_gain)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	460b      	mov	r3, r1
 8009772:	ed87 0a01 	vstr	s0, [r7, #4]
 8009776:	72fb      	strb	r3, [r7, #11]
	Pid->mode = mode;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	7afa      	ldrb	r2, [r7, #11]
 800977c:	701a      	strb	r2, [r3, #0]
	Pid->FeedBack_gain = fb_gain;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	60da      	str	r2, [r3, #12]
//    else
//    {
//
//    }
#else
	Pid->Kp = 0.5;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800978a:	621a      	str	r2, [r3, #32]
	Pid->Ki = 0.3;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4a16      	ldr	r2, [pc, #88]	; (80097e8 <initPID+0x80>)
 8009790:	625a      	str	r2, [r3, #36]	; 0x24
	Pid->Kd = 0.7;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4a15      	ldr	r2, [pc, #84]	; (80097ec <initPID+0x84>)
 8009796:	629a      	str	r2, [r3, #40]	; 0x28
	Pid->IntDecay = 10;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4a15      	ldr	r2, [pc, #84]	; (80097f0 <initPID+0x88>)
 800979c:	635a      	str	r2, [r3, #52]	; 0x34
	Pid->IntMinValue = -30;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4a14      	ldr	r2, [pc, #80]	; (80097f4 <initPID+0x8c>)
 80097a2:	62da      	str	r2, [r3, #44]	; 0x2c
	Pid->IntMaxValue = 30;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4a14      	ldr	r2, [pc, #80]	; (80097f8 <initPID+0x90>)
 80097a8:	631a      	str	r2, [r3, #48]	; 0x30
	Pid->DifMinValue = -50;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4a13      	ldr	r2, [pc, #76]	; (80097fc <initPID+0x94>)
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38
	Pid->DifMaxValue = 50;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4a13      	ldr	r2, [pc, #76]	; (8009800 <initPID+0x98>)
 80097b4:	63da      	str	r2, [r3, #60]	; 0x3c
	Pid->OutMinValue = -100;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4a12      	ldr	r2, [pc, #72]	; (8009804 <initPID+0x9c>)
 80097ba:	641a      	str	r2, [r3, #64]	; 0x40
	Pid->OutMaxValue = -100;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4a11      	ldr	r2, [pc, #68]	; (8009804 <initPID+0x9c>)
 80097c0:	645a      	str	r2, [r3, #68]	; 0x44
	Pid->Error = 0.0;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f04f 0200 	mov.w	r2, #0
 80097c8:	611a      	str	r2, [r3, #16]
	Pid->LastError = 0.0;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f04f 0200 	mov.w	r2, #0
 80097d0:	615a      	str	r2, [r3, #20]
	Pid->Output = 0.0;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f04f 0200 	mov.w	r2, #0
 80097d8:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 80097da:	bf00      	nop
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	3e99999a 	.word	0x3e99999a
 80097ec:	3f333333 	.word	0x3f333333
 80097f0:	41200000 	.word	0x41200000
 80097f4:	c1f00000 	.word	0xc1f00000
 80097f8:	41f00000 	.word	0x41f00000
 80097fc:	c2480000 	.word	0xc2480000
 8009800:	42480000 	.word	0x42480000
 8009804:	c2c80000 	.word	0xc2c80000

08009808 <calculatePID_position>:

float_t calculatePID_position(Algorithm_PID_t Pid, float_t target,
		float_t value)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	ed87 0a02 	vstr	s0, [r7, #8]
 8009814:	edc7 0a01 	vstr	s1, [r7, #4]
	Pid->Target = target;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	605a      	str	r2, [r3, #4]
	Pid->Error = Pid->Target - value; //calculate err(t)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	ed93 7a01 	vldr	s14, [r3, #4]
 8009824:	edd7 7a01 	vldr	s15, [r7, #4]
 8009828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	edc3 7a04 	vstr	s15, [r3, #16]

	//only for this work
	if (abs(Pid->Error) > 32768)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	edd3 7a04 	vldr	s15, [r3, #16]
 8009838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800983c:	ee17 3a90 	vmov	r3, s15
 8009840:	2b00      	cmp	r3, #0
 8009842:	bfb8      	it	lt
 8009844:	425b      	neglt	r3, r3
 8009846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800984a:	dd1d      	ble.n	8009888 <calculatePID_position+0x80>
	{
		if (value > 32768)
 800984c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009850:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8009a38 <calculatePID_position+0x230>
 8009854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985c:	dd0a      	ble.n	8009874 <calculatePID_position+0x6c>
		{
			Pid->Error += 32768;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	edd3 7a04 	vldr	s15, [r3, #16]
 8009864:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8009a38 <calculatePID_position+0x230>
 8009868:	ee77 7a87 	vadd.f32	s15, s15, s14
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	edc3 7a04 	vstr	s15, [r3, #16]
 8009872:	e009      	b.n	8009888 <calculatePID_position+0x80>
		}
		else
		{
			Pid->Error -= 32768;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	edd3 7a04 	vldr	s15, [r3, #16]
 800987a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8009a38 <calculatePID_position+0x230>
 800987e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	edc3 7a04 	vstr	s15, [r3, #16]
		}
	}

	//calculate integrate
	Pid->DeltaIntegral += Pid->Error;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	ed93 7a06 	vldr	s14, [r3, #24]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	edd3 7a04 	vldr	s15, [r3, #16]
 8009894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	edc3 7a06 	vstr	s15, [r3, #24]
	if ((Pid->Error < -5) || (Pid->Error > 5))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80098a4:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80098a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b0:	d409      	bmi.n	80098c6 <calculatePID_position+0xbe>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80098b8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80098bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c4:	dd16      	ble.n	80098f4 <calculatePID_position+0xec>
	{
		Pid->DeltaIntegral -= Pid->IntDecay;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80098d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	edc3 7a06 	vstr	s15, [r3, #24]
		if (Pid->DeltaIntegral <= 0)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	edd3 7a06 	vldr	s15, [r3, #24]
 80098e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ea:	d803      	bhi.n	80098f4 <calculatePID_position+0xec>
		{
			Pid->DeltaIntegral = 0;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f04f 0200 	mov.w	r2, #0
 80098f2:	619a      	str	r2, [r3, #24]
		}
	}

	if (Pid->DeltaIntegral > Pid->IntMaxValue) //restrict integrate
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009908:	dd04      	ble.n	8009914 <calculatePID_position+0x10c>
	{
		Pid->DeltaIntegral = Pid->IntMaxValue;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	619a      	str	r2, [r3, #24]
 8009912:	e00e      	b.n	8009932 <calculatePID_position+0x12a>
	}
	else if (Pid->DeltaIntegral < Pid->IntMinValue)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	ed93 7a06 	vldr	s14, [r3, #24]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009928:	d503      	bpl.n	8009932 <calculatePID_position+0x12a>
	{
		Pid->DeltaIntegral = Pid->IntMinValue;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	619a      	str	r2, [r3, #24]
	}

	//calculate difference
	Pid->DeltaDifference = Pid->Error - Pid->LastError;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	ed93 7a04 	vldr	s14, [r3, #16]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	edd3 7a05 	vldr	s15, [r3, #20]
 800993e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	edc3 7a07 	vstr	s15, [r3, #28]
	if (Pid->DeltaDifference > Pid->DifMaxValue) //restrict difference
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	ed93 7a07 	vldr	s14, [r3, #28]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8009954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800995c:	dd04      	ble.n	8009968 <calculatePID_position+0x160>
	{
		Pid->DeltaDifference = Pid->DifMaxValue;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	61da      	str	r2, [r3, #28]
 8009966:	e00e      	b.n	8009986 <calculatePID_position+0x17e>
	}
	else if (Pid->DeltaDifference < Pid->DifMinValue)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	ed93 7a07 	vldr	s14, [r3, #28]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997c:	d503      	bpl.n	8009986 <calculatePID_position+0x17e>
	{
		Pid->DeltaDifference = Pid->DifMinValue;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	61da      	str	r2, [r3, #28]
	}

	Pid->Output = Pid->Kp * Pid->Error + Pid->Ki * Pid->DeltaIntegral
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	ed93 7a08 	vldr	s14, [r3, #32]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	edd3 7a06 	vldr	s15, [r3, #24]
 80099a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099a6:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Pid->Kd * Pid->DeltaDifference; //PID
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80099b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099ba:	ee77 7a27 	vadd.f32	s15, s14, s15
	Pid->Output = Pid->Kp * Pid->Error + Pid->Ki * Pid->DeltaIntegral
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	if (Pid->Output < Pid->OutMinValue) //restrict output
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80099d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099d8:	d504      	bpl.n	80099e4 <calculatePID_position+0x1dc>
	{
		Pid->Output = Pid->OutMinValue;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	649a      	str	r2, [r3, #72]	; 0x48
 80099e2:	e00e      	b.n	8009a02 <calculatePID_position+0x1fa>
	}
	else if (Pid->Output > Pid->OutMaxValue)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80099f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f8:	dd03      	ble.n	8009a02 <calculatePID_position+0x1fa>
	{
		Pid->Output = Pid->OutMaxValue;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	649a      	str	r2, [r3, #72]	; 0x48
	}

	Pid->LastError = Pid->Error; //load err_1(t)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	691a      	ldr	r2, [r3, #16]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	615a      	str	r2, [r3, #20]
	Pid->FeedBack = Pid->Output * Pid->FeedBack_gain; //load feedback
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	edd3 7a03 	vldr	s15, [r3, #12]
 8009a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	edc3 7a02 	vstr	s15, [r3, #8]

	return Pid->Output;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a24:	ee07 3a90 	vmov	s15, r3
}
 8009a28:	eeb0 0a67 	vmov.f32	s0, s15
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	47000000 	.word	0x47000000

08009a3c <MoveControl>:
#include <math.h>


void MoveControl(PwmVal_t* ThrusterTemp, uint16_t StraightNum, uint16_t RotateNum,
		uint16_t VerticalNum, uint8_t ModeNum)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	817b      	strh	r3, [r7, #10]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	813b      	strh	r3, [r7, #8]
 8009a52:	4613      	mov	r3, r2
 8009a54:	80fb      	strh	r3, [r7, #6]
	uint8_t AFlag = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	75fb      	strb	r3, [r7, #23]
	uint8_t BFlag = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	75bb      	strb	r3, [r7, #22]
	uint8_t CFlag = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	757b      	strb	r3, [r7, #21]
	uint8_t DFlag = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	753b      	strb	r3, [r7, #20]
	uint8_t SFlag = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	74fb      	strb	r3, [r7, #19]

#if (NUMBER_OF_VERTICAL_THRUSTER == 2) && (NUMBER_OF_HORIZENTAL_THRUSTER == 4) /* 六轴 */
	switch (ModeNum)
 8009a6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	f200 80f2 	bhi.w	8009c58 <MoveControl+0x21c>
 8009a74:	a201      	add	r2, pc, #4	; (adr r2, 8009a7c <MoveControl+0x40>)
 8009a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7a:	bf00      	nop
 8009a7c:	08009a91 	.word	0x08009a91
 8009a80:	08009c23 	.word	0x08009c23
 8009a84:	08009c59 	.word	0x08009c59
 8009a88:	08009c59 	.word	0x08009c59
 8009a8c:	08009c59 	.word	0x08009c59
	{
	case NORMAL_MODE:
		//Horizental Control
		AFlag = (RotateNum > StraightNum);
 8009a90:	893a      	ldrh	r2, [r7, #8]
 8009a92:	897b      	ldrh	r3, [r7, #10]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	bf8c      	ite	hi
 8009a98:	2301      	movhi	r3, #1
 8009a9a:	2300      	movls	r3, #0
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	75fb      	strb	r3, [r7, #23]
		BFlag = ((RotateNum + StraightNum) > (2 * PWM_MIDDLE_POSITION));
 8009aa0:	893a      	ldrh	r2, [r7, #8]
 8009aa2:	897b      	ldrh	r3, [r7, #10]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	bfcc      	ite	gt
 8009aae:	2301      	movgt	r3, #1
 8009ab0:	2300      	movle	r3, #0
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	75bb      	strb	r3, [r7, #22]
		CFlag = (RotateNum > PWM_MIDDLE_POSITION);
 8009ab6:	893b      	ldrh	r3, [r7, #8]
 8009ab8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009abc:	4293      	cmp	r3, r2
 8009abe:	bf8c      	ite	hi
 8009ac0:	2301      	movhi	r3, #1
 8009ac2:	2300      	movls	r3, #0
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	757b      	strb	r3, [r7, #21]
		DFlag = (StraightNum > PWM_MIDDLE_POSITION);
 8009ac8:	897b      	ldrh	r3, [r7, #10]
 8009aca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	bf8c      	ite	hi
 8009ad2:	2301      	movhi	r3, #1
 8009ad4:	2300      	movls	r3, #0
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	753b      	strb	r3, [r7, #20]
		SFlag = AFlag * 8 + BFlag * 4 + CFlag * 2 + DFlag;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	005a      	lsls	r2, r3, #1
 8009ade:	7dbb      	ldrb	r3, [r7, #22]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	005a      	lsls	r2, r3, #1
 8009ae4:	7d7b      	ldrb	r3, [r7, #21]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	7d3b      	ldrb	r3, [r7, #20]
 8009af0:	4413      	add	r3, r2
 8009af2:	74fb      	strb	r3, [r7, #19]
		switch (SFlag)
 8009af4:	7cfb      	ldrb	r3, [r7, #19]
 8009af6:	2b0f      	cmp	r3, #15
 8009af8:	f200 808c 	bhi.w	8009c14 <MoveControl+0x1d8>
 8009afc:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <MoveControl+0xc8>)
 8009afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b02:	bf00      	nop
 8009b04:	08009b45 	.word	0x08009b45
 8009b08:	08009bd7 	.word	0x08009bd7
 8009b0c:	08009c15 	.word	0x08009c15
 8009b10:	08009c15 	.word	0x08009c15
 8009b14:	08009c15 	.word	0x08009c15
 8009b18:	08009ba9 	.word	0x08009ba9
 8009b1c:	08009c15 	.word	0x08009c15
 8009b20:	08009b77 	.word	0x08009b77
 8009b24:	08009b77 	.word	0x08009b77
 8009b28:	08009c15 	.word	0x08009c15
 8009b2c:	08009ba9 	.word	0x08009ba9
 8009b30:	08009c15 	.word	0x08009c15
 8009b34:	08009c15 	.word	0x08009c15
 8009b38:	08009c15 	.word	0x08009c15
 8009b3c:	08009bd7 	.word	0x08009bd7
 8009b40:	08009b45 	.word	0x08009b45
		{
		case 0:
		case 15:
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) (RotateNum);
 8009b44:	893a      	ldrh	r2, [r7, #8]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	601a      	str	r2, [r3, #0]
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) (RotateNum);
 8009b4a:	893a      	ldrh	r2, [r7, #8]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	605a      	str	r2, [r3, #4]
			ThrusterTemp->HorizontalThruster[2] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 8009b50:	893a      	ldrh	r2, [r7, #8]
 8009b52:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009b56:	1a9b      	subs	r3, r3, r2
 8009b58:	897a      	ldrh	r2, [r7, #10]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	461a      	mov	r2, r3
			ThrusterTemp->HorizontalThruster[2] =
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	609a      	str	r2, [r3, #8]
			ThrusterTemp->HorizontalThruster[3] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 8009b62:	893a      	ldrh	r2, [r7, #8]
 8009b64:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009b68:	1a9b      	subs	r3, r3, r2
 8009b6a:	897a      	ldrh	r2, [r7, #10]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	461a      	mov	r2, r3
			ThrusterTemp->HorizontalThruster[3] =
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	60da      	str	r2, [r3, #12]
			break;
 8009b74:	e04e      	b.n	8009c14 <MoveControl+0x1d8>
		case 7:
		case 8:
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) (StraightNum);
 8009b76:	897a      	ldrh	r2, [r7, #10]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	601a      	str	r2, [r3, #0]
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) (StraightNum);
 8009b7c:	897a      	ldrh	r2, [r7, #10]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	605a      	str	r2, [r3, #4]
			ThrusterTemp->HorizontalThruster[2] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 8009b82:	893a      	ldrh	r2, [r7, #8]
 8009b84:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009b88:	1a9b      	subs	r3, r3, r2
 8009b8a:	897a      	ldrh	r2, [r7, #10]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	461a      	mov	r2, r3
			ThrusterTemp->HorizontalThruster[2] =
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	609a      	str	r2, [r3, #8]
			ThrusterTemp->HorizontalThruster[3] =
					(uint32_t) ((PWM_MIDDLE_POSITION - RotateNum + StraightNum));
 8009b94:	893a      	ldrh	r2, [r7, #8]
 8009b96:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009b9a:	1a9b      	subs	r3, r3, r2
 8009b9c:	897a      	ldrh	r2, [r7, #10]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	461a      	mov	r2, r3
			ThrusterTemp->HorizontalThruster[3] =
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	60da      	str	r2, [r3, #12]
			break;
 8009ba6:	e035      	b.n	8009c14 <MoveControl+0x1d8>
		case 5:
		case 10:
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 8009ba8:	893a      	ldrh	r2, [r7, #8]
 8009baa:	897b      	ldrh	r3, [r7, #10]
 8009bac:	4413      	add	r3, r2
 8009bae:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((RotateNum
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	601a      	str	r2, [r3, #0]
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 8009bb8:	893a      	ldrh	r2, [r7, #8]
 8009bba:	897b      	ldrh	r3, [r7, #10]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) ((RotateNum
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	605a      	str	r2, [r3, #4]
			ThrusterTemp->HorizontalThruster[2] = (uint32_t) (StraightNum);
 8009bc8:	897a      	ldrh	r2, [r7, #10]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	609a      	str	r2, [r3, #8]
			ThrusterTemp->HorizontalThruster[3] = (uint32_t) (StraightNum);
 8009bce:	897a      	ldrh	r2, [r7, #10]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	60da      	str	r2, [r3, #12]
			break;
 8009bd4:	e01e      	b.n	8009c14 <MoveControl+0x1d8>
		case 1:
		case 14:
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 8009bd6:	893a      	ldrh	r2, [r7, #8]
 8009bd8:	897b      	ldrh	r3, [r7, #10]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((RotateNum
 8009be0:	461a      	mov	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	601a      	str	r2, [r3, #0]
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) ((RotateNum
					+ StraightNum - PWM_MIDDLE_POSITION));
 8009be6:	893a      	ldrh	r2, [r7, #8]
 8009be8:	897b      	ldrh	r3, [r7, #10]
 8009bea:	4413      	add	r3, r2
 8009bec:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
			ThrusterTemp->HorizontalThruster[1] = (uint32_t) ((RotateNum
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	605a      	str	r2, [r3, #4]
			ThrusterTemp->HorizontalThruster[2] = (uint32_t) (((2
					* PWM_MIDDLE_POSITION) - RotateNum));
 8009bf6:	893a      	ldrh	r2, [r7, #8]
 8009bf8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009bfc:	1a9b      	subs	r3, r3, r2
			ThrusterTemp->HorizontalThruster[2] = (uint32_t) (((2
 8009bfe:	461a      	mov	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	609a      	str	r2, [r3, #8]
			ThrusterTemp->HorizontalThruster[3] = (uint32_t) (((2
					* PWM_MIDDLE_POSITION) - RotateNum));
 8009c04:	893a      	ldrh	r2, [r7, #8]
 8009c06:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009c0a:	1a9b      	subs	r3, r3, r2
			ThrusterTemp->HorizontalThruster[3] = (uint32_t) (((2
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	60da      	str	r2, [r3, #12]
			break;
 8009c12:	bf00      	nop
		}
		//Veritical Control
		ThrusterTemp->VerticalThruster[0] = (uint32_t) (VerticalNum);
 8009c14:	88fa      	ldrh	r2, [r7, #6]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	611a      	str	r2, [r3, #16]
		ThrusterTemp->VerticalThruster[1] = (uint32_t) (VerticalNum);
 8009c1a:	88fa      	ldrh	r2, [r7, #6]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	615a      	str	r2, [r3, #20]
		break;
 8009c20:	e01b      	b.n	8009c5a <MoveControl+0x21e>
	case SIDEPUSH_MODE:
		//Horizental Control
		ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((2
				* PWM_MIDDLE_POSITION) - RotateNum);
 8009c22:	893a      	ldrh	r2, [r7, #8]
 8009c24:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009c28:	1a9b      	subs	r3, r3, r2
		ThrusterTemp->HorizontalThruster[0] = (uint32_t) ((2
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	601a      	str	r2, [r3, #0]
		ThrusterTemp->HorizontalThruster[1] = (uint32_t) (RotateNum);
 8009c30:	893a      	ldrh	r2, [r7, #8]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	605a      	str	r2, [r3, #4]
		ThrusterTemp->HorizontalThruster[2] = (uint32_t) ((2
				* PWM_MIDDLE_POSITION) - RotateNum);
 8009c36:	893a      	ldrh	r2, [r7, #8]
 8009c38:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009c3c:	1a9b      	subs	r3, r3, r2
		ThrusterTemp->HorizontalThruster[2] = (uint32_t) ((2
 8009c3e:	461a      	mov	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	609a      	str	r2, [r3, #8]
		ThrusterTemp->HorizontalThruster[3] = (uint32_t) (RotateNum);
 8009c44:	893a      	ldrh	r2, [r7, #8]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	60da      	str	r2, [r3, #12]
		//Veritical Control
		ThrusterTemp->VerticalThruster[0] = (uint32_t) (VerticalNum);
 8009c4a:	88fa      	ldrh	r2, [r7, #6]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	611a      	str	r2, [r3, #16]
		ThrusterTemp->VerticalThruster[1] = (uint32_t) (VerticalNum);
 8009c50:	88fa      	ldrh	r2, [r7, #6]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	615a      	str	r2, [r3, #20]
		break;
 8009c56:	e000      	b.n	8009c5a <MoveControl+0x21e>
	case ROLL_MODE: //Unavailable in 6axis ROV
		break;
	case MIX_MODE: //Unavailable in 6axis ROV
		break;
	default:
		break;
 8009c58:	bf00      	nop
        break;
    default:
        break;
    }
#endif
	return ThrusterTemp;
 8009c5a:	bf00      	nop
}
 8009c5c:	371c      	adds	r7, #28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop

08009c68 <ControlDataAnalysis>:

void ControlDataAnalysis(ControlData_t controller, PwmVal_t* temp_pwm, uint8_t ModeNum)
{
 8009c68:	b084      	sub	sp, #16
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af02      	add	r7, sp, #8
 8009c70:	f107 0c08 	add.w	ip, r7, #8
 8009c74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MoveControl(temp_pwm, controller.StraightNum, controller.RotateNum,
 8009c78:	8979      	ldrh	r1, [r7, #10]
 8009c7a:	89ba      	ldrh	r2, [r7, #12]
 8009c7c:	89f8      	ldrh	r0, [r7, #14]
 8009c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	4603      	mov	r3, r0
 8009c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c88:	f7ff fed8 	bl	8009a3c <MoveControl>
			controller.VerticalNum, ModeNum);

	temp_pwm->LightServo = controller.LightNum; //light
 8009c8c:	8a3b      	ldrh	r3, [r7, #16]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	619a      	str	r2, [r3, #24]
	temp_pwm->PanServo = controller.PanNum; //pan
 8009c94:	8a7b      	ldrh	r3, [r7, #18]
 8009c96:	461a      	mov	r2, r3
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	61da      	str	r2, [r3, #28]
	temp_pwm->ConveyServo = controller.ConveyNum; //convey
 8009c9c:	8abb      	ldrh	r3, [r7, #20]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	621a      	str	r2, [r3, #32]
	temp_pwm->ArmServo[0] = controller.ArmNum[0]; //Horizental
 8009ca4:	8afb      	ldrh	r3, [r7, #22]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	625a      	str	r2, [r3, #36]	; 0x24
	temp_pwm->ArmServo[1] = controller.ArmNum[1]; //Main
 8009cac:	8b3b      	ldrh	r3, [r7, #24]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb2:	629a      	str	r2, [r3, #40]	; 0x28
	temp_pwm->ArmServo[2] = controller.ArmNum[2]; //Middle
 8009cb4:	8b7b      	ldrh	r3, [r7, #26]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	62da      	str	r2, [r3, #44]	; 0x2c
	temp_pwm->ArmServo[3] = controller.ArmNum[3]; //Front
 8009cbc:	8bbb      	ldrh	r3, [r7, #28]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	631a      	str	r2, [r3, #48]	; 0x30
	temp_pwm->ArmServo[4] = controller.ArmNum[4]; //Grab
 8009cc4:	8bfb      	ldrh	r3, [r7, #30]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	635a      	str	r2, [r3, #52]	; 0x34
	temp_pwm->ArmServo[5] = controller.ArmNum[5]; //rest machine arm
 8009ccc:	8c3b      	ldrh	r3, [r7, #32]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	639a      	str	r2, [r3, #56]	; 0x38
	temp_pwm->RestServo = controller.RestNum; //rest pwm
 8009cd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cda:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009cdc:	bf00      	nop
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ce4:	b004      	add	sp, #16
 8009ce6:	4770      	bx	lr

08009ce8 <CaptureReportData>:

void CaptureReportData(ReportData_t SendData, uint8_t *ReportTransmit)
{
 8009ce8:	b084      	sub	sp, #16
 8009cea:	b490      	push	{r4, r7}
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	f107 0408 	add.w	r4, r7, #8
 8009cf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ReportTransmit[0] = (uint8_t) (SendData.FrameHead);
 8009cf6:	7a3a      	ldrb	r2, [r7, #8]
 8009cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cfa:	701a      	strb	r2, [r3, #0]
	ReportTransmit[1] = (uint8_t) ((SendData.CabinFunction)
 8009cfc:	7a7b      	ldrb	r3, [r7, #9]
 8009cfe:	b25a      	sxtb	r2, r3
			| (SendData.WaterDetect << 1));
 8009d00:	7abb      	ldrb	r3, [r7, #10]
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	b25b      	sxtb	r3, r3
 8009d06:	4313      	orrs	r3, r2
 8009d08:	b25a      	sxtb	r2, r3
	ReportTransmit[1] = (uint8_t) ((SendData.CabinFunction)
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	b2d2      	uxtb	r2, r2
 8009d10:	701a      	strb	r2, [r3, #0]
	ReportTransmit[2] = (uint8_t) ((SendData.CabinTemperature & 0xFF00) >> 8);
 8009d12:	89bb      	ldrh	r3, [r7, #12]
 8009d14:	0a1b      	lsrs	r3, r3, #8
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1a:	3302      	adds	r3, #2
 8009d1c:	b2d2      	uxtb	r2, r2
 8009d1e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[3] = (uint8_t) (SendData.CabinTemperature & 0x00FF);
 8009d20:	89ba      	ldrh	r2, [r7, #12]
 8009d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d24:	3303      	adds	r3, #3
 8009d26:	b2d2      	uxtb	r2, r2
 8009d28:	701a      	strb	r2, [r3, #0]
	ReportTransmit[4] =
			(uint8_t) ((SendData.CabinBarometric & 0xFF000000) >> 24);
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	0e1a      	lsrs	r2, r3, #24
	ReportTransmit[4] =
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d30:	3304      	adds	r3, #4
			(uint8_t) ((SendData.CabinBarometric & 0xFF000000) >> 24);
 8009d32:	b2d2      	uxtb	r2, r2
	ReportTransmit[4] =
 8009d34:	701a      	strb	r2, [r3, #0]
	ReportTransmit[5] =
			(uint8_t) ((SendData.CabinBarometric & 0x00FF0000) >> 16);
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	0c1a      	lsrs	r2, r3, #16
	ReportTransmit[5] =
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3c:	3305      	adds	r3, #5
			(uint8_t) ((SendData.CabinBarometric & 0x00FF0000) >> 16);
 8009d3e:	b2d2      	uxtb	r2, r2
	ReportTransmit[5] =
 8009d40:	701a      	strb	r2, [r3, #0]
	ReportTransmit[6] =
			(uint8_t) ((SendData.CabinBarometric & 0x0000FF00) >> 8);
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	0a1a      	lsrs	r2, r3, #8
	ReportTransmit[6] =
 8009d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d48:	3306      	adds	r3, #6
			(uint8_t) ((SendData.CabinBarometric & 0x0000FF00) >> 8);
 8009d4a:	b2d2      	uxtb	r2, r2
	ReportTransmit[6] =
 8009d4c:	701a      	strb	r2, [r3, #0]
	ReportTransmit[7] = (uint8_t) (SendData.CabinBarometric & 0x000000FF);
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d52:	3307      	adds	r3, #7
 8009d54:	b2d2      	uxtb	r2, r2
 8009d56:	701a      	strb	r2, [r3, #0]
	ReportTransmit[8] = (uint8_t) ((SendData.CabinHumidity & 0xFF00) >> 8);
 8009d58:	8abb      	ldrh	r3, [r7, #20]
 8009d5a:	0a1b      	lsrs	r3, r3, #8
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d60:	3308      	adds	r3, #8
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	701a      	strb	r2, [r3, #0]
	ReportTransmit[9] = (uint8_t) (SendData.CabinHumidity & 0x00FF);
 8009d66:	8aba      	ldrh	r2, [r7, #20]
 8009d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6a:	3309      	adds	r3, #9
 8009d6c:	b2d2      	uxtb	r2, r2
 8009d6e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[10] = (uint8_t) ((SendData.AccNum[0] & 0xFF00) >> 8);
 8009d70:	8afb      	ldrh	r3, [r7, #22]
 8009d72:	0a1b      	lsrs	r3, r3, #8
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d78:	330a      	adds	r3, #10
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	701a      	strb	r2, [r3, #0]
	ReportTransmit[11] = (uint8_t) (SendData.AccNum[0] & 0x00FF);
 8009d7e:	8afa      	ldrh	r2, [r7, #22]
 8009d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d82:	330b      	adds	r3, #11
 8009d84:	b2d2      	uxtb	r2, r2
 8009d86:	701a      	strb	r2, [r3, #0]
	ReportTransmit[12] = (uint8_t) ((SendData.AccNum[1] & 0xFF00) >> 8);
 8009d88:	8b3b      	ldrh	r3, [r7, #24]
 8009d8a:	0a1b      	lsrs	r3, r3, #8
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d90:	330c      	adds	r3, #12
 8009d92:	b2d2      	uxtb	r2, r2
 8009d94:	701a      	strb	r2, [r3, #0]
	ReportTransmit[13] = (uint8_t) (SendData.AccNum[1] & 0x00FF);
 8009d96:	8b3a      	ldrh	r2, [r7, #24]
 8009d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9a:	330d      	adds	r3, #13
 8009d9c:	b2d2      	uxtb	r2, r2
 8009d9e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[14] = (uint8_t) ((SendData.AccNum[2] & 0xFF00) >> 8);
 8009da0:	8b7b      	ldrh	r3, [r7, #26]
 8009da2:	0a1b      	lsrs	r3, r3, #8
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da8:	330e      	adds	r3, #14
 8009daa:	b2d2      	uxtb	r2, r2
 8009dac:	701a      	strb	r2, [r3, #0]
	ReportTransmit[15] = (uint8_t) (SendData.AccNum[2] & 0x00FF);
 8009dae:	8b7a      	ldrh	r2, [r7, #26]
 8009db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db2:	330f      	adds	r3, #15
 8009db4:	b2d2      	uxtb	r2, r2
 8009db6:	701a      	strb	r2, [r3, #0]
	ReportTransmit[16] = (uint8_t) ((SendData.RotNum[0] & 0xFF00) >> 8);
 8009db8:	8bbb      	ldrh	r3, [r7, #28]
 8009dba:	0a1b      	lsrs	r3, r3, #8
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc0:	3310      	adds	r3, #16
 8009dc2:	b2d2      	uxtb	r2, r2
 8009dc4:	701a      	strb	r2, [r3, #0]
	ReportTransmit[17] = (uint8_t) (SendData.RotNum[0] & 0x00FF);
 8009dc6:	8bba      	ldrh	r2, [r7, #28]
 8009dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dca:	3311      	adds	r3, #17
 8009dcc:	b2d2      	uxtb	r2, r2
 8009dce:	701a      	strb	r2, [r3, #0]
	ReportTransmit[18] = (uint8_t) ((SendData.RotNum[1] & 0xFF00) >> 8);
 8009dd0:	8bfb      	ldrh	r3, [r7, #30]
 8009dd2:	0a1b      	lsrs	r3, r3, #8
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd8:	3312      	adds	r3, #18
 8009dda:	b2d2      	uxtb	r2, r2
 8009ddc:	701a      	strb	r2, [r3, #0]
	ReportTransmit[19] = (uint8_t) (SendData.RotNum[1] & 0x00FF);
 8009dde:	8bfa      	ldrh	r2, [r7, #30]
 8009de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de2:	3313      	adds	r3, #19
 8009de4:	b2d2      	uxtb	r2, r2
 8009de6:	701a      	strb	r2, [r3, #0]
	ReportTransmit[20] = (uint8_t) ((SendData.RotNum[2] & 0xFF00) >> 8);
 8009de8:	8c3b      	ldrh	r3, [r7, #32]
 8009dea:	0a1b      	lsrs	r3, r3, #8
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df0:	3314      	adds	r3, #20
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	701a      	strb	r2, [r3, #0]
	ReportTransmit[21] = (uint8_t) (SendData.RotNum[2] & 0x00FF);
 8009df6:	8c3a      	ldrh	r2, [r7, #32]
 8009df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfa:	3315      	adds	r3, #21
 8009dfc:	b2d2      	uxtb	r2, r2
 8009dfe:	701a      	strb	r2, [r3, #0]
	ReportTransmit[22] = (uint8_t) ((SendData.EulNum[0] & 0xFF00) >> 8);
 8009e00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e02:	0a1b      	lsrs	r3, r3, #8
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e08:	3316      	adds	r3, #22
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	701a      	strb	r2, [r3, #0]
	ReportTransmit[23] = (uint8_t) (SendData.EulNum[0] & 0x00FF);
 8009e0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e12:	3317      	adds	r3, #23
 8009e14:	b2d2      	uxtb	r2, r2
 8009e16:	701a      	strb	r2, [r3, #0]
	ReportTransmit[24] = (uint8_t) ((SendData.EulNum[1] & 0xFF00) >> 8);
 8009e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e1a:	0a1b      	lsrs	r3, r3, #8
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e20:	3318      	adds	r3, #24
 8009e22:	b2d2      	uxtb	r2, r2
 8009e24:	701a      	strb	r2, [r3, #0]
	ReportTransmit[25] = (uint8_t) (SendData.EulNum[1] & 0x00FF);
 8009e26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e2a:	3319      	adds	r3, #25
 8009e2c:	b2d2      	uxtb	r2, r2
 8009e2e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[26] = (uint8_t) ((SendData.EulNum[2] & 0xFF00) >> 8);
 8009e30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e38:	331a      	adds	r3, #26
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	701a      	strb	r2, [r3, #0]
	ReportTransmit[27] = (uint8_t) (SendData.EulNum[2] & 0x00FF);
 8009e3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e42:	331b      	adds	r3, #27
 8009e44:	b2d2      	uxtb	r2, r2
 8009e46:	701a      	strb	r2, [r3, #0]
	ReportTransmit[28] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 8009e48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e4a:	0a1b      	lsrs	r3, r3, #8
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e50:	331c      	adds	r3, #28
 8009e52:	b2d2      	uxtb	r2, r2
 8009e54:	701a      	strb	r2, [r3, #0]
	ReportTransmit[29] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 8009e56:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5a:	331d      	adds	r3, #29
 8009e5c:	b2d2      	uxtb	r2, r2
 8009e5e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[30] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 8009e60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e62:	0a1b      	lsrs	r3, r3, #8
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e68:	331e      	adds	r3, #30
 8009e6a:	b2d2      	uxtb	r2, r2
 8009e6c:	701a      	strb	r2, [r3, #0]
	ReportTransmit[31] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 8009e6e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e72:	331f      	adds	r3, #31
 8009e74:	b2d2      	uxtb	r2, r2
 8009e76:	701a      	strb	r2, [r3, #0]
	ReportTransmit[32] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 8009e78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e7a:	0a1b      	lsrs	r3, r3, #8
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e80:	3320      	adds	r3, #32
 8009e82:	b2d2      	uxtb	r2, r2
 8009e84:	701a      	strb	r2, [r3, #0]
	ReportTransmit[33] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 8009e86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8a:	3321      	adds	r3, #33	; 0x21
 8009e8c:	b2d2      	uxtb	r2, r2
 8009e8e:	701a      	strb	r2, [r3, #0]
//	ReportTransmit[39] = (uint8_t) ((SendData.SonarConfidence & 0xFF00) >> 8);
//	ReportTransmit[40] = (uint8_t) (SendData.WaterTemperature & 0x00FF);
//	ReportTransmit[41] = (uint8_t) ((SendData.WaterTemperature & 0xFF00) >> 8);
//	ReportTransmit[42] = (uint8_t) (SendData.WaterDepth & 0x00FF);
//	ReportTransmit[43] = (uint8_t) ((SendData.WaterDepth & 0xFF00) >> 8);
	ReportTransmit[34] = 0x00;
 8009e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e92:	3322      	adds	r3, #34	; 0x22
 8009e94:	2200      	movs	r2, #0
 8009e96:	701a      	strb	r2, [r3, #0]
	ReportTransmit[35] = 0x00;
 8009e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9a:	3323      	adds	r3, #35	; 0x23
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[36] = 0x00;
 8009ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea2:	3324      	adds	r3, #36	; 0x24
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	701a      	strb	r2, [r3, #0]
	ReportTransmit[37] = 0x00;
 8009ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eaa:	3325      	adds	r3, #37	; 0x25
 8009eac:	2200      	movs	r2, #0
 8009eae:	701a      	strb	r2, [r3, #0]
	ReportTransmit[38] = 0x00;
 8009eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb2:	3326      	adds	r3, #38	; 0x26
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	701a      	strb	r2, [r3, #0]
	ReportTransmit[39] = 0x00;
 8009eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eba:	3327      	adds	r3, #39	; 0x27
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	701a      	strb	r2, [r3, #0]
	ReportTransmit[40] = 0x00;
 8009ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec2:	3328      	adds	r3, #40	; 0x28
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	701a      	strb	r2, [r3, #0]
	ReportTransmit[41] = 0x00;
 8009ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eca:	3329      	adds	r3, #41	; 0x29
 8009ecc:	2200      	movs	r2, #0
 8009ece:	701a      	strb	r2, [r3, #0]
	ReportTransmit[42] = 0x00;
 8009ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed2:	332a      	adds	r3, #42	; 0x2a
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	701a      	strb	r2, [r3, #0]
	ReportTransmit[43] = 0x00;
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	332b      	adds	r3, #43	; 0x2b
 8009edc:	2200      	movs	r2, #0
 8009ede:	701a      	strb	r2, [r3, #0]
	ReportTransmit[44] = (uint8_t) 0x00;
 8009ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee2:	332c      	adds	r3, #44	; 0x2c
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	701a      	strb	r2, [r3, #0]
	ReportTransmit[45] = (uint8_t) ((SendData.FrameEnd & 0xFF00) >> 8);
 8009ee8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef0:	332d      	adds	r3, #45	; 0x2d
 8009ef2:	b2d2      	uxtb	r2, r2
 8009ef4:	701a      	strb	r2, [r3, #0]
	ReportTransmit[46] = (uint8_t) (SendData.FrameEnd & 0x00FF);
 8009ef6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efa:	332e      	adds	r3, #46	; 0x2e
 8009efc:	b2d2      	uxtb	r2, r2
 8009efe:	701a      	strb	r2, [r3, #0]
}
 8009f00:	bf00      	nop
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bc90      	pop	{r4, r7}
 8009f06:	b004      	add	sp, #16
 8009f08:	4770      	bx	lr

08009f0a <CaptureControlData>:

ControlData_t CaptureControlData(uint8_t *CommandReceive)
{
 8009f0a:	b4b0      	push	{r4, r5, r7}
 8009f0c:	b08d      	sub	sp, #52	; 0x34
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
	ControlData_t CaptureData;

	for (uint8_t i = 0; i < Master_UART_RXLen * 2; i++)
 8009f14:	2300      	movs	r3, #0
 8009f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009f1a:	e138      	b.n	800a18e <CaptureControlData+0x284>
	{
		if ((CommandReceive[i] == 0x25) && (CommandReceive[i + 29] == 0x21)
 8009f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	4413      	add	r3, r2
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b25      	cmp	r3, #37	; 0x25
 8009f28:	f040 8128 	bne.w	800a17c <CaptureControlData+0x272>
 8009f2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f30:	331d      	adds	r3, #29
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	4413      	add	r3, r2
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b21      	cmp	r3, #33	; 0x21
 8009f3a:	f040 811f 	bne.w	800a17c <CaptureControlData+0x272>
				&& (CommandReceive[i + 28] == 0x00))
 8009f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f42:	331c      	adds	r3, #28
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	4413      	add	r3, r2
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f040 8116 	bne.w	800a17c <CaptureControlData+0x272>
		{
			CaptureData.FrameHead = (CommandReceive[i]);
 8009f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	4413      	add	r3, r2
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	733b      	strb	r3, [r7, #12]
			CaptureData.StraightNum = ((CommandReceive[i + 1] << 8)
 8009f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f60:	3301      	adds	r3, #1
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	4413      	add	r3, r2
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 2]);
 8009f6a:	b21a      	sxth	r2, r3
 8009f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f70:	3302      	adds	r3, #2
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	440b      	add	r3, r1
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	b21b      	sxth	r3, r3
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	b21b      	sxth	r3, r3
 8009f7e:	b29b      	uxth	r3, r3
			CaptureData.StraightNum = ((CommandReceive[i + 1] << 8)
 8009f80:	81fb      	strh	r3, [r7, #14]
			CaptureData.RotateNum = ((CommandReceive[i + 3] << 8)
 8009f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f86:	3303      	adds	r3, #3
 8009f88:	683a      	ldr	r2, [r7, #0]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 4]);
 8009f90:	b21a      	sxth	r2, r3
 8009f92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f96:	3304      	adds	r3, #4
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	440b      	add	r3, r1
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	b21b      	sxth	r3, r3
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	b21b      	sxth	r3, r3
 8009fa4:	b29b      	uxth	r3, r3
			CaptureData.RotateNum = ((CommandReceive[i + 3] << 8)
 8009fa6:	823b      	strh	r3, [r7, #16]
			CaptureData.VerticalNum = ((CommandReceive[i + 5] << 8)
 8009fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fac:	3305      	adds	r3, #5
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 6]);
 8009fb6:	b21a      	sxth	r2, r3
 8009fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fbc:	3306      	adds	r3, #6
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	440b      	add	r3, r1
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	b21b      	sxth	r3, r3
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	b21b      	sxth	r3, r3
 8009fca:	b29b      	uxth	r3, r3
			CaptureData.VerticalNum = ((CommandReceive[i + 5] << 8)
 8009fcc:	827b      	strh	r3, [r7, #18]
			CaptureData.LightNum = ((CommandReceive[i + 7] << 8)
 8009fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fd2:	3307      	adds	r3, #7
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 8]);
 8009fdc:	b21a      	sxth	r2, r3
 8009fde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	440b      	add	r3, r1
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	b21b      	sxth	r3, r3
 8009fec:	4313      	orrs	r3, r2
 8009fee:	b21b      	sxth	r3, r3
 8009ff0:	b29b      	uxth	r3, r3
			CaptureData.LightNum = ((CommandReceive[i + 7] << 8)
 8009ff2:	82bb      	strh	r3, [r7, #20]
			CaptureData.PanNum = ((CommandReceive[i + 9] << 8)
 8009ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ff8:	3309      	adds	r3, #9
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 10]);
 800a002:	b21a      	sxth	r2, r3
 800a004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a008:	330a      	adds	r3, #10
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	440b      	add	r3, r1
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	b21b      	sxth	r3, r3
 800a012:	4313      	orrs	r3, r2
 800a014:	b21b      	sxth	r3, r3
 800a016:	b29b      	uxth	r3, r3
			CaptureData.PanNum = ((CommandReceive[i + 9] << 8)
 800a018:	82fb      	strh	r3, [r7, #22]
			CaptureData.ConveyNum = ((CommandReceive[i + 11] << 8)
 800a01a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a01e:	330b      	adds	r3, #11
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	4413      	add	r3, r2
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 12]);
 800a028:	b21a      	sxth	r2, r3
 800a02a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a02e:	330c      	adds	r3, #12
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	440b      	add	r3, r1
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	b21b      	sxth	r3, r3
 800a038:	4313      	orrs	r3, r2
 800a03a:	b21b      	sxth	r3, r3
 800a03c:	b29b      	uxth	r3, r3
			CaptureData.ConveyNum = ((CommandReceive[i + 11] << 8)
 800a03e:	833b      	strh	r3, [r7, #24]

			CaptureData.ArmNum[0] = ((CommandReceive[i + 13] << 8)
 800a040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a044:	330d      	adds	r3, #13
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	4413      	add	r3, r2
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 14]);
 800a04e:	b21a      	sxth	r2, r3
 800a050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a054:	330e      	adds	r3, #14
 800a056:	6839      	ldr	r1, [r7, #0]
 800a058:	440b      	add	r3, r1
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	b21b      	sxth	r3, r3
 800a05e:	4313      	orrs	r3, r2
 800a060:	b21b      	sxth	r3, r3
 800a062:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[0] = ((CommandReceive[i + 13] << 8)
 800a064:	837b      	strh	r3, [r7, #26]
			CaptureData.ArmNum[1] = ((CommandReceive[i + 15] << 8)
 800a066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a06a:	330f      	adds	r3, #15
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	4413      	add	r3, r2
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 16]);
 800a074:	b21a      	sxth	r2, r3
 800a076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a07a:	3310      	adds	r3, #16
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	440b      	add	r3, r1
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	b21b      	sxth	r3, r3
 800a084:	4313      	orrs	r3, r2
 800a086:	b21b      	sxth	r3, r3
 800a088:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[1] = ((CommandReceive[i + 15] << 8)
 800a08a:	83bb      	strh	r3, [r7, #28]
			CaptureData.ArmNum[2] = ((CommandReceive[i + 17] << 8)
 800a08c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a090:	3311      	adds	r3, #17
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	4413      	add	r3, r2
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 18]);
 800a09a:	b21a      	sxth	r2, r3
 800a09c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0a0:	3312      	adds	r3, #18
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	440b      	add	r3, r1
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	b21b      	sxth	r3, r3
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	b21b      	sxth	r3, r3
 800a0ae:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[2] = ((CommandReceive[i + 17] << 8)
 800a0b0:	83fb      	strh	r3, [r7, #30]
			CaptureData.ArmNum[3] = ((CommandReceive[i + 19] << 8)
 800a0b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0b6:	3313      	adds	r3, #19
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 20]);
 800a0c0:	b21a      	sxth	r2, r3
 800a0c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0c6:	3314      	adds	r3, #20
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	440b      	add	r3, r1
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	b21b      	sxth	r3, r3
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	b21b      	sxth	r3, r3
 800a0d4:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[3] = ((CommandReceive[i + 19] << 8)
 800a0d6:	843b      	strh	r3, [r7, #32]
			CaptureData.ArmNum[4] = ((CommandReceive[i + 21] << 8)
 800a0d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0dc:	3315      	adds	r3, #21
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 22]);
 800a0e6:	b21a      	sxth	r2, r3
 800a0e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0ec:	3316      	adds	r3, #22
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	440b      	add	r3, r1
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	b21b      	sxth	r3, r3
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	b21b      	sxth	r3, r3
 800a0fa:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[4] = ((CommandReceive[i + 21] << 8)
 800a0fc:	847b      	strh	r3, [r7, #34]	; 0x22
			CaptureData.ArmNum[5] = ((CommandReceive[i + 23] << 8)
 800a0fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a102:	3317      	adds	r3, #23
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	4413      	add	r3, r2
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 24]);
 800a10c:	b21a      	sxth	r2, r3
 800a10e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a112:	3318      	adds	r3, #24
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	440b      	add	r3, r1
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	b21b      	sxth	r3, r3
 800a11c:	4313      	orrs	r3, r2
 800a11e:	b21b      	sxth	r3, r3
 800a120:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[5] = ((CommandReceive[i + 23] << 8)
 800a122:	84bb      	strh	r3, [r7, #36]	; 0x24
			CaptureData.RestNum = ((CommandReceive[i + 25] << 8)
 800a124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a128:	3319      	adds	r3, #25
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	4413      	add	r3, r2
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 26]);
 800a132:	b21a      	sxth	r2, r3
 800a134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a138:	331a      	adds	r3, #26
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	440b      	add	r3, r1
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	b21b      	sxth	r3, r3
 800a142:	4313      	orrs	r3, r2
 800a144:	b21b      	sxth	r3, r3
 800a146:	b29b      	uxth	r3, r3
			CaptureData.RestNum = ((CommandReceive[i + 25] << 8)
 800a148:	84fb      	strh	r3, [r7, #38]	; 0x26
			CaptureData.Mode = CommandReceive[i + 27];
 800a14a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a14e:	331b      	adds	r3, #27
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	4413      	add	r3, r2
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			CaptureData.IdTest = CommandReceive[i + 28];
 800a15a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a15e:	331c      	adds	r3, #28
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	4413      	add	r3, r2
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			CaptureData.FrameEnd = (CommandReceive[i + 29]);
 800a16a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a16e:	331d      	adds	r3, #29
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	4413      	add	r3, r2
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a17a:	e003      	b.n	800a184 <CaptureControlData+0x27a>
		}
		else if(i > Master_UART_RXLen)
 800a17c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a180:	2b1e      	cmp	r3, #30
 800a182:	d80a      	bhi.n	800a19a <CaptureControlData+0x290>
	for (uint8_t i = 0; i < Master_UART_RXLen * 2; i++)
 800a184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a188:	3301      	adds	r3, #1
 800a18a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a18e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a192:	2b3b      	cmp	r3, #59	; 0x3b
 800a194:	f67f aec2 	bls.w	8009f1c <CaptureControlData+0x12>
 800a198:	e000      	b.n	800a19c <CaptureControlData+0x292>
		{
			break;
 800a19a:	bf00      	nop
		}
	}

	return CaptureData;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	461d      	mov	r5, r3
 800a1a0:	f107 040c 	add.w	r4, r7, #12
 800a1a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1a6:	6028      	str	r0, [r5, #0]
 800a1a8:	6069      	str	r1, [r5, #4]
 800a1aa:	60aa      	str	r2, [r5, #8]
 800a1ac:	60eb      	str	r3, [r5, #12]
 800a1ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1b0:	6128      	str	r0, [r5, #16]
 800a1b2:	6169      	str	r1, [r5, #20]
 800a1b4:	61aa      	str	r2, [r5, #24]
 800a1b6:	61eb      	str	r3, [r5, #28]
}
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	3734      	adds	r7, #52	; 0x34
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bcb0      	pop	{r4, r5, r7}
 800a1c0:	4770      	bx	lr

0800a1c2 <InitGY39>:

#endif

#ifdef USING_GY39_SENSOR
void InitGY39(uint8_t *GY39Send)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
	*(GY39Send + 0) = 0xA5;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	22a5      	movs	r2, #165	; 0xa5
 800a1ce:	701a      	strb	r2, [r3, #0]
	*(GY39Send + 1) = 0x82;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	2282      	movs	r2, #130	; 0x82
 800a1d6:	701a      	strb	r2, [r3, #0]
	*(GY39Send + 2) = 0x27;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	3302      	adds	r3, #2
 800a1dc:	2227      	movs	r2, #39	; 0x27
 800a1de:	701a      	strb	r2, [r3, #0]
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <ReceiveGY39>:

CarbinData_t ReceiveGY39(uint8_t *GY39Receive)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
	CarbinData_t RecvGY39;
	if ((GY39Receive[0] == 0x5A) && (GY39Receive[1] == 0x5A)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	2b5a      	cmp	r3, #90	; 0x5a
 800a1fc:	d140      	bne.n	800a280 <ReceiveGY39+0x94>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	2b5a      	cmp	r3, #90	; 0x5a
 800a206:	d13b      	bne.n	800a280 <ReceiveGY39+0x94>
			&& (GY39Receive[2] == 0x45))
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	3302      	adds	r3, #2
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b45      	cmp	r3, #69	; 0x45
 800a210:	d136      	bne.n	800a280 <ReceiveGY39+0x94>
	{
		RecvGY39.CarbinTemperature = ((GY39Receive[4] << 8) | GY39Receive[5]);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	3304      	adds	r3, #4
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	b21a      	sxth	r2, r3
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	3305      	adds	r3, #5
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	b21b      	sxth	r3, r3
 800a224:	4313      	orrs	r3, r2
 800a226:	b21b      	sxth	r3, r3
 800a228:	b29b      	uxth	r3, r3
 800a22a:	813b      	strh	r3, [r7, #8]
		RecvGY39.CarbinBarometric = ((GY39Receive[6] << 24)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	3306      	adds	r3, #6
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	061b      	lsls	r3, r3, #24
				| (GY39Receive[7] << 16) | (GY39Receive[8] << 8)
 800a234:	b21a      	sxth	r2, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	3307      	adds	r3, #7
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	041b      	lsls	r3, r3, #16
 800a23e:	b21b      	sxth	r3, r3
 800a240:	4313      	orrs	r3, r2
 800a242:	b21a      	sxth	r2, r3
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	3308      	adds	r3, #8
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	021b      	lsls	r3, r3, #8
 800a24c:	b21b      	sxth	r3, r3
 800a24e:	4313      	orrs	r3, r2
 800a250:	b21a      	sxth	r2, r3
				| GY39Receive[9]);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	3309      	adds	r3, #9
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	b21b      	sxth	r3, r3
 800a25a:	4313      	orrs	r3, r2
 800a25c:	b21b      	sxth	r3, r3
 800a25e:	b29b      	uxth	r3, r3
		RecvGY39.CarbinBarometric = ((GY39Receive[6] << 24)
 800a260:	81bb      	strh	r3, [r7, #12]
		RecvGY39.CarbinHumidity = ((GY39Receive[10] << 8) | GY39Receive[11]);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	330a      	adds	r3, #10
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	b21a      	sxth	r2, r3
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	330b      	adds	r3, #11
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	b21b      	sxth	r3, r3
 800a274:	4313      	orrs	r3, r2
 800a276:	b21b      	sxth	r3, r3
 800a278:	b29b      	uxth	r3, r3
 800a27a:	817b      	strh	r3, [r7, #10]
		RecvGY39.CarbinIllumination = 0x0000;
 800a27c:	2300      	movs	r3, #0
 800a27e:	81fb      	strh	r3, [r7, #14]
	}

	return RecvGY39;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	461a      	mov	r2, r3
 800a284:	f107 0308 	add.w	r3, r7, #8
 800a288:	cb03      	ldmia	r3!, {r0, r1}
 800a28a:	6010      	str	r0, [r2, #0]
 800a28c:	6051      	str	r1, [r2, #4]
}
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
	...

0800a29c <ReceiveWT931>:
#endif

#ifdef USING_WT931_SENSOR
IMUData_t ReceiveWT931(uint8_t *WT931Receive)
{
 800a29c:	b4b0      	push	{r4, r5, r7}
 800a29e:	b08b      	sub	sp, #44	; 0x2c
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
	IMUData_t RecvWT931;

	for (uint8_t i = 0; i < AXIS_UART_RXLen; i++)
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2ac:	e112      	b.n	800a4d4 <ReceiveWT931+0x238>
	{
		if(i > AXIS_UART_RXLen - 11)
 800a2ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2b2:	2b21      	cmp	r3, #33	; 0x21
 800a2b4:	f200 8114 	bhi.w	800a4e0 <ReceiveWT931+0x244>
		{
			break;
		}

		if (WT931Receive[i] == 0x55)
 800a2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	4413      	add	r3, r2
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	2b55      	cmp	r3, #85	; 0x55
 800a2c4:	f040 80fe 	bne.w	800a4c4 <ReceiveWT931+0x228>
		{
			switch (WT931Receive[i + 1])
 800a2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	3b51      	subs	r3, #81	; 0x51
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	f200 80f6 	bhi.w	800a4c8 <ReceiveWT931+0x22c>
 800a2dc:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <ReceiveWT931+0x48>)
 800a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e2:	bf00      	nop
 800a2e4:	0800a2f5 	.word	0x0800a2f5
 800a2e8:	0800a369 	.word	0x0800a369
 800a2ec:	0800a3dd 	.word	0x0800a3dd
 800a2f0:	0800a451 	.word	0x0800a451
			{
			case 0x51:
				RecvWT931.Acceleration[0] = (WT931Receive[i + 2]
 800a2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2f8:	3302      	adds	r3, #2
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800a302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a306:	3303      	adds	r3, #3
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	440b      	add	r3, r1
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	021b      	lsls	r3, r3, #8
 800a310:	b21b      	sxth	r3, r3
 800a312:	4313      	orrs	r3, r2
 800a314:	b21b      	sxth	r3, r3
 800a316:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[0] = (WT931Receive[i + 2]
 800a318:	81bb      	strh	r3, [r7, #12]
				RecvWT931.Acceleration[1] = (WT931Receive[i + 4]
 800a31a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a31e:	3304      	adds	r3, #4
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	4413      	add	r3, r2
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800a328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a32c:	3305      	adds	r3, #5
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	440b      	add	r3, r1
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	b21b      	sxth	r3, r3
 800a338:	4313      	orrs	r3, r2
 800a33a:	b21b      	sxth	r3, r3
 800a33c:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[1] = (WT931Receive[i + 4]
 800a33e:	81fb      	strh	r3, [r7, #14]
				RecvWT931.Acceleration[2] = (WT931Receive[i + 6]
 800a340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a344:	3306      	adds	r3, #6
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	4413      	add	r3, r2
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800a34e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a352:	3307      	adds	r3, #7
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	440b      	add	r3, r1
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	021b      	lsls	r3, r3, #8
 800a35c:	b21b      	sxth	r3, r3
 800a35e:	4313      	orrs	r3, r2
 800a360:	b21b      	sxth	r3, r3
 800a362:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[2] = (WT931Receive[i + 6]
 800a364:	823b      	strh	r3, [r7, #16]
				break;
 800a366:	e0b0      	b.n	800a4ca <ReceiveWT931+0x22e>
			case 0x52:
				RecvWT931.AngularSpeed[0] = (WT931Receive[i + 2]
 800a368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a36c:	3302      	adds	r3, #2
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	4413      	add	r3, r2
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800a376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a37a:	3303      	adds	r3, #3
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	440b      	add	r3, r1
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	021b      	lsls	r3, r3, #8
 800a384:	b21b      	sxth	r3, r3
 800a386:	4313      	orrs	r3, r2
 800a388:	b21b      	sxth	r3, r3
 800a38a:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[0] = (WT931Receive[i + 2]
 800a38c:	827b      	strh	r3, [r7, #18]
				RecvWT931.AngularSpeed[1] = (WT931Receive[i + 4]
 800a38e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a392:	3304      	adds	r3, #4
 800a394:	683a      	ldr	r2, [r7, #0]
 800a396:	4413      	add	r3, r2
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800a39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3a0:	3305      	adds	r3, #5
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	440b      	add	r3, r1
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	021b      	lsls	r3, r3, #8
 800a3aa:	b21b      	sxth	r3, r3
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	b21b      	sxth	r3, r3
 800a3b0:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[1] = (WT931Receive[i + 4]
 800a3b2:	82bb      	strh	r3, [r7, #20]
				RecvWT931.AngularSpeed[2] = (WT931Receive[i + 6]
 800a3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3b8:	3306      	adds	r3, #6
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	4413      	add	r3, r2
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800a3c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3c6:	3307      	adds	r3, #7
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	440b      	add	r3, r1
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	021b      	lsls	r3, r3, #8
 800a3d0:	b21b      	sxth	r3, r3
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	b21b      	sxth	r3, r3
 800a3d6:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[2] = (WT931Receive[i + 6]
 800a3d8:	82fb      	strh	r3, [r7, #22]
				break;
 800a3da:	e076      	b.n	800a4ca <ReceiveWT931+0x22e>
			case 0x53:
				RecvWT931.EulerAngle[0] = (WT931Receive[i + 2]
 800a3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3e0:	3302      	adds	r3, #2
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800a3ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3ee:	3303      	adds	r3, #3
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	440b      	add	r3, r1
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	021b      	lsls	r3, r3, #8
 800a3f8:	b21b      	sxth	r3, r3
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	b21b      	sxth	r3, r3
 800a3fe:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[0] = (WT931Receive[i + 2]
 800a400:	833b      	strh	r3, [r7, #24]
				RecvWT931.EulerAngle[1] = (WT931Receive[i + 4]
 800a402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a406:	3304      	adds	r3, #4
 800a408:	683a      	ldr	r2, [r7, #0]
 800a40a:	4413      	add	r3, r2
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800a410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a414:	3305      	adds	r3, #5
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	440b      	add	r3, r1
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	b21b      	sxth	r3, r3
 800a420:	4313      	orrs	r3, r2
 800a422:	b21b      	sxth	r3, r3
 800a424:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[1] = (WT931Receive[i + 4]
 800a426:	837b      	strh	r3, [r7, #26]
				RecvWT931.EulerAngle[2] = (WT931Receive[i + 6]
 800a428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a42c:	3306      	adds	r3, #6
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	4413      	add	r3, r2
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800a436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a43a:	3307      	adds	r3, #7
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	440b      	add	r3, r1
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	021b      	lsls	r3, r3, #8
 800a444:	b21b      	sxth	r3, r3
 800a446:	4313      	orrs	r3, r2
 800a448:	b21b      	sxth	r3, r3
 800a44a:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[2] = (WT931Receive[i + 6]
 800a44c:	83bb      	strh	r3, [r7, #28]
				break;
 800a44e:	e03c      	b.n	800a4ca <ReceiveWT931+0x22e>
			case 0x54:
				RecvWT931.MagneticValue[0] = (WT931Receive[i + 2]
 800a450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a454:	3302      	adds	r3, #2
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	4413      	add	r3, r2
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800a45e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a462:	3303      	adds	r3, #3
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	440b      	add	r3, r1
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	021b      	lsls	r3, r3, #8
 800a46c:	b21b      	sxth	r3, r3
 800a46e:	4313      	orrs	r3, r2
 800a470:	b21b      	sxth	r3, r3
 800a472:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[0] = (WT931Receive[i + 2]
 800a474:	83fb      	strh	r3, [r7, #30]
				RecvWT931.MagneticValue[1] = (WT931Receive[i + 4]
 800a476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a47a:	3304      	adds	r3, #4
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	4413      	add	r3, r2
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800a484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a488:	3305      	adds	r3, #5
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	440b      	add	r3, r1
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	021b      	lsls	r3, r3, #8
 800a492:	b21b      	sxth	r3, r3
 800a494:	4313      	orrs	r3, r2
 800a496:	b21b      	sxth	r3, r3
 800a498:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[1] = (WT931Receive[i + 4]
 800a49a:	843b      	strh	r3, [r7, #32]
				RecvWT931.MagneticValue[2] = (WT931Receive[i + 6]
 800a49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4a0:	3306      	adds	r3, #6
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800a4aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4ae:	3307      	adds	r3, #7
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	440b      	add	r3, r1
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	021b      	lsls	r3, r3, #8
 800a4b8:	b21b      	sxth	r3, r3
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	b21b      	sxth	r3, r3
 800a4be:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[2] = (WT931Receive[i + 6]
 800a4c0:	847b      	strh	r3, [r7, #34]	; 0x22
				break;
 800a4c2:	e002      	b.n	800a4ca <ReceiveWT931+0x22e>
				break;
			}
		}
		else
		{
			continue;
 800a4c4:	bf00      	nop
 800a4c6:	e000      	b.n	800a4ca <ReceiveWT931+0x22e>
				continue;
 800a4c8:	bf00      	nop
	for (uint8_t i = 0; i < AXIS_UART_RXLen; i++)
 800a4ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4d8:	2b2b      	cmp	r3, #43	; 0x2b
 800a4da:	f67f aee8 	bls.w	800a2ae <ReceiveWT931+0x12>
 800a4de:	e000      	b.n	800a4e2 <ReceiveWT931+0x246>
			break;
 800a4e0:	bf00      	nop
		}
	}

	return RecvWT931;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	461d      	mov	r5, r3
 800a4e6:	f107 040c 	add.w	r4, r7, #12
 800a4ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4ec:	6028      	str	r0, [r5, #0]
 800a4ee:	6069      	str	r1, [r5, #4]
 800a4f0:	60aa      	str	r2, [r5, #8]
 800a4f2:	60eb      	str	r3, [r5, #12]
 800a4f4:	cc03      	ldmia	r4!, {r0, r1}
 800a4f6:	6128      	str	r0, [r5, #16]
 800a4f8:	6169      	str	r1, [r5, #20]
}
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	372c      	adds	r7, #44	; 0x2c
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bcb0      	pop	{r4, r5, r7}
 800a502:	4770      	bx	lr

0800a504 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a50e:	2300      	movs	r3, #0
 800a510:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a516:	2b84      	cmp	r3, #132	; 0x84
 800a518:	d005      	beq.n	800a526 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a51a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	3303      	adds	r3, #3
 800a524:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a526:	68fb      	ldr	r3, [r7, #12]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a538:	f001 f914 	bl	800b764 <vTaskStartScheduler>
  
  return osOK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	bd80      	pop	{r7, pc}

0800a542 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a542:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a544:	b089      	sub	sp, #36	; 0x24
 800a546:	af04      	add	r7, sp, #16
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d020      	beq.n	800a596 <osThreadCreate+0x54>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d01c      	beq.n	800a596 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685c      	ldr	r4, [r3, #4]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681d      	ldr	r5, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	691e      	ldr	r6, [r3, #16]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff ffc8 	bl	800a504 <makeFreeRtosPriority>
 800a574:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a57e:	9202      	str	r2, [sp, #8]
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	9100      	str	r1, [sp, #0]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	4632      	mov	r2, r6
 800a588:	4629      	mov	r1, r5
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 ff22 	bl	800b3d4 <xTaskCreateStatic>
 800a590:	4603      	mov	r3, r0
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	e01c      	b.n	800a5d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685c      	ldr	r4, [r3, #4]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5a2:	b29e      	uxth	r6, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7ff ffaa 	bl	800a504 <makeFreeRtosPriority>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	f107 030c 	add.w	r3, r7, #12
 800a5b6:	9301      	str	r3, [sp, #4]
 800a5b8:	9200      	str	r2, [sp, #0]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	4632      	mov	r2, r6
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 ff64 	bl	800b48e <xTaskCreate>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d001      	beq.n	800a5d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	e000      	b.n	800a5d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <osDelay+0x16>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	e000      	b.n	800a5f2 <osDelay+0x18>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f001 f882 	bl	800b6fc <vTaskDelay>
  
  return osOK;
 800a5f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a602:	b580      	push	{r7, lr}
 800a604:	b086      	sub	sp, #24
 800a606:	af02      	add	r7, sp, #8
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00f      	beq.n	800a634 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d10a      	bne.n	800a630 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	2203      	movs	r2, #3
 800a620:	9200      	str	r2, [sp, #0]
 800a622:	2200      	movs	r2, #0
 800a624:	2100      	movs	r1, #0
 800a626:	2001      	movs	r0, #1
 800a628:	f000 f962 	bl	800a8f0 <xQueueGenericCreateStatic>
 800a62c:	4603      	mov	r3, r0
 800a62e:	e016      	b.n	800a65e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a630:	2300      	movs	r3, #0
 800a632:	e014      	b.n	800a65e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d110      	bne.n	800a65c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a63a:	2203      	movs	r2, #3
 800a63c:	2100      	movs	r1, #0
 800a63e:	2001      	movs	r0, #1
 800a640:	f000 f9ce 	bl	800a9e0 <xQueueGenericCreate>
 800a644:	60f8      	str	r0, [r7, #12]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d005      	beq.n	800a658 <osSemaphoreCreate+0x56>
 800a64c:	2300      	movs	r3, #0
 800a64e:	2200      	movs	r2, #0
 800a650:	2100      	movs	r1, #0
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 fa1e 	bl	800aa94 <xQueueGenericSend>
      return sema;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	e000      	b.n	800a65e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a65c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a666:	b590      	push	{r4, r7, lr}
 800a668:	b085      	sub	sp, #20
 800a66a:	af02      	add	r7, sp, #8
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d011      	beq.n	800a69c <osMessageCreate+0x36>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00d      	beq.n	800a69c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6818      	ldr	r0, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6859      	ldr	r1, [r3, #4]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	689a      	ldr	r2, [r3, #8]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	2400      	movs	r4, #0
 800a692:	9400      	str	r4, [sp, #0]
 800a694:	f000 f92c 	bl	800a8f0 <xQueueGenericCreateStatic>
 800a698:	4603      	mov	r3, r0
 800a69a:	e008      	b.n	800a6ae <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6818      	ldr	r0, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	f000 f99a 	bl	800a9e0 <xQueueGenericCreate>
 800a6ac:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd90      	pop	{r4, r7, pc}

0800a6b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f103 0208 	add.w	r2, r3, #8
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f103 0208 	add.w	r2, r3, #8
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f103 0208 	add.w	r2, r3, #8
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6ea:	bf00      	nop
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b083      	sub	sp, #12
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	689a      	ldr	r2, [r3, #8]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	601a      	str	r2, [r3, #0]
}
 800a74c:	bf00      	nop
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d103      	bne.n	800a778 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	60fb      	str	r3, [r7, #12]
 800a776:	e00c      	b.n	800a792 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3308      	adds	r3, #8
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	e002      	b.n	800a786 <vListInsert+0x2e>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	60fb      	str	r3, [r7, #12]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d2f6      	bcs.n	800a780 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	601a      	str	r2, [r3, #0]
}
 800a7be:	bf00      	nop
 800a7c0:	3714      	adds	r7, #20
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	b085      	sub	sp, #20
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	6892      	ldr	r2, [r2, #8]
 800a7e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	6852      	ldr	r2, [r2, #4]
 800a7ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d103      	bne.n	800a7fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	689a      	ldr	r2, [r3, #8]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	1e5a      	subs	r2, r3, #1
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
	...

0800a820 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10a      	bne.n	800a84a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a846:	bf00      	nop
 800a848:	e7fe      	b.n	800a848 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a84a:	f001 fedb 	bl	800c604 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a856:	68f9      	ldr	r1, [r7, #12]
 800a858:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a85a:	fb01 f303 	mul.w	r3, r1, r3
 800a85e:	441a      	add	r2, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a87a:	3b01      	subs	r3, #1
 800a87c:	68f9      	ldr	r1, [r7, #12]
 800a87e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a880:	fb01 f303 	mul.w	r3, r1, r3
 800a884:	441a      	add	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	22ff      	movs	r2, #255	; 0xff
 800a88e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	22ff      	movs	r2, #255	; 0xff
 800a896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d114      	bne.n	800a8ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d01a      	beq.n	800a8de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	3310      	adds	r3, #16
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f001 f99b 	bl	800bbe8 <xTaskRemoveFromEventList>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d012      	beq.n	800a8de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	; (800a8ec <xQueueGenericReset+0xcc>)
 800a8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	e009      	b.n	800a8de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	3310      	adds	r3, #16
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7ff fef1 	bl	800a6b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	3324      	adds	r3, #36	; 0x24
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7ff feec 	bl	800a6b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8de:	f001 fec1 	bl	800c664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8e2:	2301      	movs	r3, #1
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	e000ed04 	.word	0xe000ed04

0800a8f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08e      	sub	sp, #56	; 0x38
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a916:	bf00      	nop
 800a918:	e7fe      	b.n	800a918 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <xQueueGenericCreateStatic+0x52>
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <xQueueGenericCreateStatic+0x56>
 800a942:	2301      	movs	r3, #1
 800a944:	e000      	b.n	800a948 <xQueueGenericCreateStatic+0x58>
 800a946:	2300      	movs	r3, #0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10a      	bne.n	800a962 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	623b      	str	r3, [r7, #32]
}
 800a95e:	bf00      	nop
 800a960:	e7fe      	b.n	800a960 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d102      	bne.n	800a96e <xQueueGenericCreateStatic+0x7e>
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <xQueueGenericCreateStatic+0x82>
 800a96e:	2301      	movs	r3, #1
 800a970:	e000      	b.n	800a974 <xQueueGenericCreateStatic+0x84>
 800a972:	2300      	movs	r3, #0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10a      	bne.n	800a98e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	61fb      	str	r3, [r7, #28]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a98e:	2348      	movs	r3, #72	; 0x48
 800a990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b48      	cmp	r3, #72	; 0x48
 800a996:	d00a      	beq.n	800a9ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	61bb      	str	r3, [r7, #24]
}
 800a9aa:	bf00      	nop
 800a9ac:	e7fe      	b.n	800a9ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a9ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00d      	beq.n	800a9d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	68b9      	ldr	r1, [r7, #8]
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 f83f 	bl	800aa54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3730      	adds	r7, #48	; 0x30
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	; 0x28
 800a9e4:	af02      	add	r7, sp, #8
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10a      	bne.n	800aa0a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	613b      	str	r3, [r7, #16]
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	fb02 f303 	mul.w	r3, r2, r3
 800aa12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	3348      	adds	r3, #72	; 0x48
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f001 ff15 	bl	800c848 <pvPortMalloc>
 800aa1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d011      	beq.n	800aa4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	3348      	adds	r3, #72	; 0x48
 800aa2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa38:	79fa      	ldrb	r2, [r7, #7]
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 f805 	bl	800aa54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa4a:	69bb      	ldr	r3, [r7, #24]
	}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3720      	adds	r7, #32
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
 800aa60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d103      	bne.n	800aa70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	69ba      	ldr	r2, [r7, #24]
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	e002      	b.n	800aa76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa82:	2101      	movs	r1, #1
 800aa84:	69b8      	ldr	r0, [r7, #24]
 800aa86:	f7ff fecb 	bl	800a820 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa8a:	bf00      	nop
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
	...

0800aa94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b08e      	sub	sp, #56	; 0x38
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
 800aaa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <xQueueGenericSend+0x32>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aac2:	bf00      	nop
 800aac4:	e7fe      	b.n	800aac4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d103      	bne.n	800aad4 <xQueueGenericSend+0x40>
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <xQueueGenericSend+0x44>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e000      	b.n	800aada <xQueueGenericSend+0x46>
 800aad8:	2300      	movs	r3, #0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <xQueueGenericSend+0x60>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d103      	bne.n	800ab02 <xQueueGenericSend+0x6e>
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d101      	bne.n	800ab06 <xQueueGenericSend+0x72>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e000      	b.n	800ab08 <xQueueGenericSend+0x74>
 800ab06:	2300      	movs	r3, #0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <xQueueGenericSend+0x8e>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	623b      	str	r3, [r7, #32]
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab22:	f001 fa1d 	bl	800bf60 <xTaskGetSchedulerState>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <xQueueGenericSend+0x9e>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <xQueueGenericSend+0xa2>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e000      	b.n	800ab38 <xQueueGenericSend+0xa4>
 800ab36:	2300      	movs	r3, #0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <xQueueGenericSend+0xbe>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	61fb      	str	r3, [r7, #28]
}
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab52:	f001 fd57 	bl	800c604 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d302      	bcc.n	800ab68 <xQueueGenericSend+0xd4>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d129      	bne.n	800abbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	68b9      	ldr	r1, [r7, #8]
 800ab6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab6e:	f000 fb21 	bl	800b1b4 <prvCopyDataToQueue>
 800ab72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d010      	beq.n	800ab9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7e:	3324      	adds	r3, #36	; 0x24
 800ab80:	4618      	mov	r0, r3
 800ab82:	f001 f831 	bl	800bbe8 <xTaskRemoveFromEventList>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d013      	beq.n	800abb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab8c:	4b3f      	ldr	r3, [pc, #252]	; (800ac8c <xQueueGenericSend+0x1f8>)
 800ab8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	e00a      	b.n	800abb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d007      	beq.n	800abb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aba4:	4b39      	ldr	r3, [pc, #228]	; (800ac8c <xQueueGenericSend+0x1f8>)
 800aba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abb4:	f001 fd56 	bl	800c664 <vPortExitCritical>
				return pdPASS;
 800abb8:	2301      	movs	r3, #1
 800abba:	e063      	b.n	800ac84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d103      	bne.n	800abca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abc2:	f001 fd4f 	bl	800c664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abc6:	2300      	movs	r3, #0
 800abc8:	e05c      	b.n	800ac84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abd0:	f107 0314 	add.w	r3, r7, #20
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 f869 	bl	800bcac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abda:	2301      	movs	r3, #1
 800abdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abde:	f001 fd41 	bl	800c664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abe2:	f000 fe1f 	bl	800b824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abe6:	f001 fd0d 	bl	800c604 <vPortEnterCritical>
 800abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abf0:	b25b      	sxtb	r3, r3
 800abf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf6:	d103      	bne.n	800ac00 <xQueueGenericSend+0x16c>
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac06:	b25b      	sxtb	r3, r3
 800ac08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0c:	d103      	bne.n	800ac16 <xQueueGenericSend+0x182>
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac16:	f001 fd25 	bl	800c664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac1a:	1d3a      	adds	r2, r7, #4
 800ac1c:	f107 0314 	add.w	r3, r7, #20
 800ac20:	4611      	mov	r1, r2
 800ac22:	4618      	mov	r0, r3
 800ac24:	f001 f858 	bl	800bcd8 <xTaskCheckForTimeOut>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d124      	bne.n	800ac78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac30:	f000 fbb8 	bl	800b3a4 <prvIsQueueFull>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d018      	beq.n	800ac6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	3310      	adds	r3, #16
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	4611      	mov	r1, r2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 ffac 	bl	800bba0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac4a:	f000 fb43 	bl	800b2d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac4e:	f000 fdf7 	bl	800b840 <xTaskResumeAll>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f47f af7c 	bne.w	800ab52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ac5a:	4b0c      	ldr	r3, [pc, #48]	; (800ac8c <xQueueGenericSend+0x1f8>)
 800ac5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	e772      	b.n	800ab52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac6e:	f000 fb31 	bl	800b2d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac72:	f000 fde5 	bl	800b840 <xTaskResumeAll>
 800ac76:	e76c      	b.n	800ab52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac7a:	f000 fb2b 	bl	800b2d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac7e:	f000 fddf 	bl	800b840 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3738      	adds	r7, #56	; 0x38
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	e000ed04 	.word	0xe000ed04

0800ac90 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b08e      	sub	sp, #56	; 0x38
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xQueueGiveFromISR+0x2a>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	623b      	str	r3, [r7, #32]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00a      	beq.n	800acd8 <xQueueGiveFromISR+0x48>
	__asm volatile
 800acc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	61fb      	str	r3, [r7, #28]
}
 800acd4:	bf00      	nop
 800acd6:	e7fe      	b.n	800acd6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800acd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d103      	bne.n	800ace8 <xQueueGiveFromISR+0x58>
 800ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <xQueueGiveFromISR+0x5c>
 800ace8:	2301      	movs	r3, #1
 800acea:	e000      	b.n	800acee <xQueueGiveFromISR+0x5e>
 800acec:	2300      	movs	r3, #0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10a      	bne.n	800ad08 <xQueueGiveFromISR+0x78>
	__asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf6:	f383 8811 	msr	BASEPRI, r3
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	61bb      	str	r3, [r7, #24]
}
 800ad04:	bf00      	nop
 800ad06:	e7fe      	b.n	800ad06 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad08:	f001 fd5e 	bl	800c7c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad0c:	f3ef 8211 	mrs	r2, BASEPRI
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	617a      	str	r2, [r7, #20]
 800ad22:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad24:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad26:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d22b      	bcs.n	800ad90 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad52:	d112      	bne.n	800ad7a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d016      	beq.n	800ad8a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5e:	3324      	adds	r3, #36	; 0x24
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 ff41 	bl	800bbe8 <xTaskRemoveFromEventList>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00e      	beq.n	800ad8a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00b      	beq.n	800ad8a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2201      	movs	r2, #1
 800ad76:	601a      	str	r2, [r3, #0]
 800ad78:	e007      	b.n	800ad8a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad7e:	3301      	adds	r3, #1
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	b25a      	sxtb	r2, r3
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad8e:	e001      	b.n	800ad94 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	637b      	str	r3, [r7, #52]	; 0x34
 800ad94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad96:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ada0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3738      	adds	r7, #56	; 0x38
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
	...

0800adac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08c      	sub	sp, #48	; 0x30
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800adb8:	2300      	movs	r3, #0
 800adba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800adc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10a      	bne.n	800addc <xQueueReceive+0x30>
	__asm volatile
 800adc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adca:	f383 8811 	msr	BASEPRI, r3
 800adce:	f3bf 8f6f 	isb	sy
 800add2:	f3bf 8f4f 	dsb	sy
 800add6:	623b      	str	r3, [r7, #32]
}
 800add8:	bf00      	nop
 800adda:	e7fe      	b.n	800adda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d103      	bne.n	800adea <xQueueReceive+0x3e>
 800ade2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <xQueueReceive+0x42>
 800adea:	2301      	movs	r3, #1
 800adec:	e000      	b.n	800adf0 <xQueueReceive+0x44>
 800adee:	2300      	movs	r3, #0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <xQueueReceive+0x5e>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	61fb      	str	r3, [r7, #28]
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae0a:	f001 f8a9 	bl	800bf60 <xTaskGetSchedulerState>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d102      	bne.n	800ae1a <xQueueReceive+0x6e>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <xQueueReceive+0x72>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e000      	b.n	800ae20 <xQueueReceive+0x74>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10a      	bne.n	800ae3a <xQueueReceive+0x8e>
	__asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	61bb      	str	r3, [r7, #24]
}
 800ae36:	bf00      	nop
 800ae38:	e7fe      	b.n	800ae38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae3a:	f001 fbe3 	bl	800c604 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d01f      	beq.n	800ae8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae4e:	f000 fa1b 	bl	800b288 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae54:	1e5a      	subs	r2, r3, #1
 800ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00f      	beq.n	800ae82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae64:	3310      	adds	r3, #16
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 febe 	bl	800bbe8 <xTaskRemoveFromEventList>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d007      	beq.n	800ae82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae72:	4b3d      	ldr	r3, [pc, #244]	; (800af68 <xQueueReceive+0x1bc>)
 800ae74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae82:	f001 fbef 	bl	800c664 <vPortExitCritical>
				return pdPASS;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e069      	b.n	800af5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d103      	bne.n	800ae98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae90:	f001 fbe8 	bl	800c664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae94:	2300      	movs	r3, #0
 800ae96:	e062      	b.n	800af5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d106      	bne.n	800aeac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae9e:	f107 0310 	add.w	r3, r7, #16
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 ff02 	bl	800bcac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aeac:	f001 fbda 	bl	800c664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeb0:	f000 fcb8 	bl	800b824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeb4:	f001 fba6 	bl	800c604 <vPortEnterCritical>
 800aeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aebe:	b25b      	sxtb	r3, r3
 800aec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec4:	d103      	bne.n	800aece <xQueueReceive+0x122>
 800aec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec8:	2200      	movs	r2, #0
 800aeca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aed4:	b25b      	sxtb	r3, r3
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeda:	d103      	bne.n	800aee4 <xQueueReceive+0x138>
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aee4:	f001 fbbe 	bl	800c664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aee8:	1d3a      	adds	r2, r7, #4
 800aeea:	f107 0310 	add.w	r3, r7, #16
 800aeee:	4611      	mov	r1, r2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 fef1 	bl	800bcd8 <xTaskCheckForTimeOut>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d123      	bne.n	800af44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aefc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aefe:	f000 fa3b 	bl	800b378 <prvIsQueueEmpty>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d017      	beq.n	800af38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	3324      	adds	r3, #36	; 0x24
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f000 fe45 	bl	800bba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af18:	f000 f9dc 	bl	800b2d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af1c:	f000 fc90 	bl	800b840 <xTaskResumeAll>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d189      	bne.n	800ae3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800af26:	4b10      	ldr	r3, [pc, #64]	; (800af68 <xQueueReceive+0x1bc>)
 800af28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	e780      	b.n	800ae3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800af38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af3a:	f000 f9cb 	bl	800b2d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af3e:	f000 fc7f 	bl	800b840 <xTaskResumeAll>
 800af42:	e77a      	b.n	800ae3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af46:	f000 f9c5 	bl	800b2d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af4a:	f000 fc79 	bl	800b840 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af50:	f000 fa12 	bl	800b378 <prvIsQueueEmpty>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	f43f af6f 	beq.w	800ae3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3730      	adds	r7, #48	; 0x30
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	e000ed04 	.word	0xe000ed04

0800af6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08e      	sub	sp, #56	; 0x38
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800af76:	2300      	movs	r3, #0
 800af78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800af7e:	2300      	movs	r3, #0
 800af80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	623b      	str	r3, [r7, #32]
}
 800af9a:	bf00      	nop
 800af9c:	e7fe      	b.n	800af9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800afa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	61fb      	str	r3, [r7, #28]
}
 800afb8:	bf00      	nop
 800afba:	e7fe      	b.n	800afba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afbc:	f000 ffd0 	bl	800bf60 <xTaskGetSchedulerState>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d102      	bne.n	800afcc <xQueueSemaphoreTake+0x60>
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <xQueueSemaphoreTake+0x64>
 800afcc:	2301      	movs	r3, #1
 800afce:	e000      	b.n	800afd2 <xQueueSemaphoreTake+0x66>
 800afd0:	2300      	movs	r3, #0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10a      	bne.n	800afec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800afd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afda:	f383 8811 	msr	BASEPRI, r3
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	f3bf 8f4f 	dsb	sy
 800afe6:	61bb      	str	r3, [r7, #24]
}
 800afe8:	bf00      	nop
 800afea:	e7fe      	b.n	800afea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afec:	f001 fb0a 	bl	800c604 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d024      	beq.n	800b046 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affe:	1e5a      	subs	r2, r3, #1
 800b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b002:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d104      	bne.n	800b016 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b00c:	f001 f950 	bl	800c2b0 <pvTaskIncrementMutexHeldCount>
 800b010:	4602      	mov	r2, r0
 800b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b014:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00f      	beq.n	800b03e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b020:	3310      	adds	r3, #16
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fde0 	bl	800bbe8 <xTaskRemoveFromEventList>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d007      	beq.n	800b03e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b02e:	4b54      	ldr	r3, [pc, #336]	; (800b180 <xQueueSemaphoreTake+0x214>)
 800b030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b03e:	f001 fb11 	bl	800c664 <vPortExitCritical>
				return pdPASS;
 800b042:	2301      	movs	r3, #1
 800b044:	e097      	b.n	800b176 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d111      	bne.n	800b070 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00a      	beq.n	800b068 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	617b      	str	r3, [r7, #20]
}
 800b064:	bf00      	nop
 800b066:	e7fe      	b.n	800b066 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b068:	f001 fafc 	bl	800c664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b06c:	2300      	movs	r3, #0
 800b06e:	e082      	b.n	800b176 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b072:	2b00      	cmp	r3, #0
 800b074:	d106      	bne.n	800b084 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b076:	f107 030c 	add.w	r3, r7, #12
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 fe16 	bl	800bcac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b080:	2301      	movs	r3, #1
 800b082:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b084:	f001 faee 	bl	800c664 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b088:	f000 fbcc 	bl	800b824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b08c:	f001 faba 	bl	800c604 <vPortEnterCritical>
 800b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b096:	b25b      	sxtb	r3, r3
 800b098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09c:	d103      	bne.n	800b0a6 <xQueueSemaphoreTake+0x13a>
 800b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ac:	b25b      	sxtb	r3, r3
 800b0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b2:	d103      	bne.n	800b0bc <xQueueSemaphoreTake+0x150>
 800b0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0bc:	f001 fad2 	bl	800c664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0c0:	463a      	mov	r2, r7
 800b0c2:	f107 030c 	add.w	r3, r7, #12
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 fe05 	bl	800bcd8 <xTaskCheckForTimeOut>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d132      	bne.n	800b13a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0d6:	f000 f94f 	bl	800b378 <prvIsQueueEmpty>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d026      	beq.n	800b12e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d109      	bne.n	800b0fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b0e8:	f001 fa8c 	bl	800c604 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f000 ff53 	bl	800bf9c <xTaskPriorityInherit>
 800b0f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b0f8:	f001 fab4 	bl	800c664 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fe:	3324      	adds	r3, #36	; 0x24
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	4611      	mov	r1, r2
 800b104:	4618      	mov	r0, r3
 800b106:	f000 fd4b 	bl	800bba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b10a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b10c:	f000 f8e2 	bl	800b2d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b110:	f000 fb96 	bl	800b840 <xTaskResumeAll>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	f47f af68 	bne.w	800afec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b11c:	4b18      	ldr	r3, [pc, #96]	; (800b180 <xQueueSemaphoreTake+0x214>)
 800b11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	e75e      	b.n	800afec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b12e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b130:	f000 f8d0 	bl	800b2d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b134:	f000 fb84 	bl	800b840 <xTaskResumeAll>
 800b138:	e758      	b.n	800afec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b13a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b13c:	f000 f8ca 	bl	800b2d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b140:	f000 fb7e 	bl	800b840 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b146:	f000 f917 	bl	800b378 <prvIsQueueEmpty>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f43f af4d 	beq.w	800afec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00d      	beq.n	800b174 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b158:	f001 fa54 	bl	800c604 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b15c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b15e:	f000 f811 	bl	800b184 <prvGetDisinheritPriorityAfterTimeout>
 800b162:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b16a:	4618      	mov	r0, r3
 800b16c:	f001 f812 	bl	800c194 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b170:	f001 fa78 	bl	800c664 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b176:	4618      	mov	r0, r3
 800b178:	3738      	adds	r7, #56	; 0x38
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	e000ed04 	.word	0xe000ed04

0800b184 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b190:	2b00      	cmp	r3, #0
 800b192:	d006      	beq.n	800b1a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f1c3 0307 	rsb	r3, r3, #7
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	e001      	b.n	800b1a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
	}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10d      	bne.n	800b1ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d14d      	bne.n	800b276 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 ff52 	bl	800c088 <xTaskPriorityDisinherit>
 800b1e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	609a      	str	r2, [r3, #8]
 800b1ec:	e043      	b.n	800b276 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d119      	bne.n	800b228 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6858      	ldr	r0, [r3, #4]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	f004 faa8 	bl	800f754 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	685a      	ldr	r2, [r3, #4]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20c:	441a      	add	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d32b      	bcc.n	800b276 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	605a      	str	r2, [r3, #4]
 800b226:	e026      	b.n	800b276 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	68d8      	ldr	r0, [r3, #12]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b230:	461a      	mov	r2, r3
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	f004 fa8e 	bl	800f754 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	68da      	ldr	r2, [r3, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b240:	425b      	negs	r3, r3
 800b242:	441a      	add	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	68da      	ldr	r2, [r3, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	429a      	cmp	r2, r3
 800b252:	d207      	bcs.n	800b264 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	689a      	ldr	r2, [r3, #8]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25c:	425b      	negs	r3, r3
 800b25e:	441a      	add	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b02      	cmp	r3, #2
 800b268:	d105      	bne.n	800b276 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	3b01      	subs	r3, #1
 800b274:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b27e:	697b      	ldr	r3, [r7, #20]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b296:	2b00      	cmp	r3, #0
 800b298:	d018      	beq.n	800b2cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	68da      	ldr	r2, [r3, #12]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a2:	441a      	add	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	68da      	ldr	r2, [r3, #12]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d303      	bcc.n	800b2bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68d9      	ldr	r1, [r3, #12]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	6838      	ldr	r0, [r7, #0]
 800b2c8:	f004 fa44 	bl	800f754 <memcpy>
	}
}
 800b2cc:	bf00      	nop
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b2dc:	f001 f992 	bl	800c604 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2e8:	e011      	b.n	800b30e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d012      	beq.n	800b318 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	3324      	adds	r3, #36	; 0x24
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 fc76 	bl	800bbe8 <xTaskRemoveFromEventList>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b302:	f000 fd4b 	bl	800bd9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	3b01      	subs	r3, #1
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b30e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b312:	2b00      	cmp	r3, #0
 800b314:	dce9      	bgt.n	800b2ea <prvUnlockQueue+0x16>
 800b316:	e000      	b.n	800b31a <prvUnlockQueue+0x46>
					break;
 800b318:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	22ff      	movs	r2, #255	; 0xff
 800b31e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b322:	f001 f99f 	bl	800c664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b326:	f001 f96d 	bl	800c604 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b330:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b332:	e011      	b.n	800b358 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d012      	beq.n	800b362 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	3310      	adds	r3, #16
 800b340:	4618      	mov	r0, r3
 800b342:	f000 fc51 	bl	800bbe8 <xTaskRemoveFromEventList>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b34c:	f000 fd26 	bl	800bd9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b350:	7bbb      	ldrb	r3, [r7, #14]
 800b352:	3b01      	subs	r3, #1
 800b354:	b2db      	uxtb	r3, r3
 800b356:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	dce9      	bgt.n	800b334 <prvUnlockQueue+0x60>
 800b360:	e000      	b.n	800b364 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b362:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	22ff      	movs	r2, #255	; 0xff
 800b368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b36c:	f001 f97a 	bl	800c664 <vPortExitCritical>
}
 800b370:	bf00      	nop
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b380:	f001 f940 	bl	800c604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d102      	bne.n	800b392 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b38c:	2301      	movs	r3, #1
 800b38e:	60fb      	str	r3, [r7, #12]
 800b390:	e001      	b.n	800b396 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b392:	2300      	movs	r3, #0
 800b394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b396:	f001 f965 	bl	800c664 <vPortExitCritical>

	return xReturn;
 800b39a:	68fb      	ldr	r3, [r7, #12]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3ac:	f001 f92a 	bl	800c604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d102      	bne.n	800b3c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	e001      	b.n	800b3c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3c6:	f001 f94d 	bl	800c664 <vPortExitCritical>

	return xReturn;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b08e      	sub	sp, #56	; 0x38
 800b3d8:	af04      	add	r7, sp, #16
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d10a      	bne.n	800b3fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800b3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ec:	f383 8811 	msr	BASEPRI, r3
 800b3f0:	f3bf 8f6f 	isb	sy
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	623b      	str	r3, [r7, #32]
}
 800b3fa:	bf00      	nop
 800b3fc:	e7fe      	b.n	800b3fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <xTaskCreateStatic+0x46>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	61fb      	str	r3, [r7, #28]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b41a:	2354      	movs	r3, #84	; 0x54
 800b41c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	2b54      	cmp	r3, #84	; 0x54
 800b422:	d00a      	beq.n	800b43a <xTaskCreateStatic+0x66>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	61bb      	str	r3, [r7, #24]
}
 800b436:	bf00      	nop
 800b438:	e7fe      	b.n	800b438 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b43a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d01e      	beq.n	800b480 <xTaskCreateStatic+0xac>
 800b442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b444:	2b00      	cmp	r3, #0
 800b446:	d01b      	beq.n	800b480 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b450:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	2202      	movs	r2, #2
 800b456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b45a:	2300      	movs	r3, #0
 800b45c:	9303      	str	r3, [sp, #12]
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	9302      	str	r3, [sp, #8]
 800b462:	f107 0314 	add.w	r3, r7, #20
 800b466:	9301      	str	r3, [sp, #4]
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	68b9      	ldr	r1, [r7, #8]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f000 f850 	bl	800b518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b47a:	f000 f8d5 	bl	800b628 <prvAddNewTaskToReadyList>
 800b47e:	e001      	b.n	800b484 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b480:	2300      	movs	r3, #0
 800b482:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b484:	697b      	ldr	r3, [r7, #20]
	}
 800b486:	4618      	mov	r0, r3
 800b488:	3728      	adds	r7, #40	; 0x28
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b08c      	sub	sp, #48	; 0x30
 800b492:	af04      	add	r7, sp, #16
 800b494:	60f8      	str	r0, [r7, #12]
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	603b      	str	r3, [r7, #0]
 800b49a:	4613      	mov	r3, r2
 800b49c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b49e:	88fb      	ldrh	r3, [r7, #6]
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f001 f9d0 	bl	800c848 <pvPortMalloc>
 800b4a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00e      	beq.n	800b4ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b4b0:	2054      	movs	r0, #84	; 0x54
 800b4b2:	f001 f9c9 	bl	800c848 <pvPortMalloc>
 800b4b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d003      	beq.n	800b4c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	631a      	str	r2, [r3, #48]	; 0x30
 800b4c4:	e005      	b.n	800b4d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4c6:	6978      	ldr	r0, [r7, #20]
 800b4c8:	f001 fa8a 	bl	800c9e0 <vPortFree>
 800b4cc:	e001      	b.n	800b4d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d017      	beq.n	800b508 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b4e0:	88fa      	ldrh	r2, [r7, #6]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	9303      	str	r3, [sp, #12]
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	9302      	str	r3, [sp, #8]
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	68b9      	ldr	r1, [r7, #8]
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f000 f80e 	bl	800b518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4fc:	69f8      	ldr	r0, [r7, #28]
 800b4fe:	f000 f893 	bl	800b628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b502:	2301      	movs	r3, #1
 800b504:	61bb      	str	r3, [r7, #24]
 800b506:	e002      	b.n	800b50e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b508:	f04f 33ff 	mov.w	r3, #4294967295
 800b50c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b50e:	69bb      	ldr	r3, [r7, #24]
	}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
 800b524:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b530:	440b      	add	r3, r1
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	4413      	add	r3, r2
 800b536:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	f023 0307 	bic.w	r3, r3, #7
 800b53e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	f003 0307 	and.w	r3, r3, #7
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00a      	beq.n	800b560 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	617b      	str	r3, [r7, #20]
}
 800b55c:	bf00      	nop
 800b55e:	e7fe      	b.n	800b55e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d01f      	beq.n	800b5a6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b566:	2300      	movs	r3, #0
 800b568:	61fb      	str	r3, [r7, #28]
 800b56a:	e012      	b.n	800b592 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	4413      	add	r3, r2
 800b572:	7819      	ldrb	r1, [r3, #0]
 800b574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	4413      	add	r3, r2
 800b57a:	3334      	adds	r3, #52	; 0x34
 800b57c:	460a      	mov	r2, r1
 800b57e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	4413      	add	r3, r2
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d006      	beq.n	800b59a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	3301      	adds	r3, #1
 800b590:	61fb      	str	r3, [r7, #28]
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	2b0f      	cmp	r3, #15
 800b596:	d9e9      	bls.n	800b56c <prvInitialiseNewTask+0x54>
 800b598:	e000      	b.n	800b59c <prvInitialiseNewTask+0x84>
			{
				break;
 800b59a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5a4:	e003      	b.n	800b5ae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b0:	2b06      	cmp	r3, #6
 800b5b2:	d901      	bls.n	800b5b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b5b4:	2306      	movs	r3, #6
 800b5b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7ff f891 	bl	800a6f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d6:	3318      	adds	r3, #24
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7ff f88c 	bl	800a6f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	f1c3 0207 	rsb	r2, r3, #7
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	68f9      	ldr	r1, [r7, #12]
 800b606:	69b8      	ldr	r0, [r7, #24]
 800b608:	f000 fecc 	bl	800c3a4 <pxPortInitialiseStack>
 800b60c:	4602      	mov	r2, r0
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b61c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b61e:	bf00      	nop
 800b620:	3720      	adds	r7, #32
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
	...

0800b628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b630:	f000 ffe8 	bl	800c604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b634:	4b2a      	ldr	r3, [pc, #168]	; (800b6e0 <prvAddNewTaskToReadyList+0xb8>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3301      	adds	r3, #1
 800b63a:	4a29      	ldr	r2, [pc, #164]	; (800b6e0 <prvAddNewTaskToReadyList+0xb8>)
 800b63c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b63e:	4b29      	ldr	r3, [pc, #164]	; (800b6e4 <prvAddNewTaskToReadyList+0xbc>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d109      	bne.n	800b65a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b646:	4a27      	ldr	r2, [pc, #156]	; (800b6e4 <prvAddNewTaskToReadyList+0xbc>)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b64c:	4b24      	ldr	r3, [pc, #144]	; (800b6e0 <prvAddNewTaskToReadyList+0xb8>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d110      	bne.n	800b676 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b654:	f000 fbc6 	bl	800bde4 <prvInitialiseTaskLists>
 800b658:	e00d      	b.n	800b676 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b65a:	4b23      	ldr	r3, [pc, #140]	; (800b6e8 <prvAddNewTaskToReadyList+0xc0>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d109      	bne.n	800b676 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b662:	4b20      	ldr	r3, [pc, #128]	; (800b6e4 <prvAddNewTaskToReadyList+0xbc>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d802      	bhi.n	800b676 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b670:	4a1c      	ldr	r2, [pc, #112]	; (800b6e4 <prvAddNewTaskToReadyList+0xbc>)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b676:	4b1d      	ldr	r3, [pc, #116]	; (800b6ec <prvAddNewTaskToReadyList+0xc4>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3301      	adds	r3, #1
 800b67c:	4a1b      	ldr	r2, [pc, #108]	; (800b6ec <prvAddNewTaskToReadyList+0xc4>)
 800b67e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b684:	2201      	movs	r2, #1
 800b686:	409a      	lsls	r2, r3
 800b688:	4b19      	ldr	r3, [pc, #100]	; (800b6f0 <prvAddNewTaskToReadyList+0xc8>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4313      	orrs	r3, r2
 800b68e:	4a18      	ldr	r2, [pc, #96]	; (800b6f0 <prvAddNewTaskToReadyList+0xc8>)
 800b690:	6013      	str	r3, [r2, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b696:	4613      	mov	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4413      	add	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4a15      	ldr	r2, [pc, #84]	; (800b6f4 <prvAddNewTaskToReadyList+0xcc>)
 800b6a0:	441a      	add	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	f7ff f831 	bl	800a710 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b6ae:	f000 ffd9 	bl	800c664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b6b2:	4b0d      	ldr	r3, [pc, #52]	; (800b6e8 <prvAddNewTaskToReadyList+0xc0>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00e      	beq.n	800b6d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b6ba:	4b0a      	ldr	r3, [pc, #40]	; (800b6e4 <prvAddNewTaskToReadyList+0xbc>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d207      	bcs.n	800b6d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b6c8:	4b0b      	ldr	r3, [pc, #44]	; (800b6f8 <prvAddNewTaskToReadyList+0xd0>)
 800b6ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ce:	601a      	str	r2, [r3, #0]
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6d8:	bf00      	nop
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	24000130 	.word	0x24000130
 800b6e4:	24000030 	.word	0x24000030
 800b6e8:	2400013c 	.word	0x2400013c
 800b6ec:	2400014c 	.word	0x2400014c
 800b6f0:	24000138 	.word	0x24000138
 800b6f4:	24000034 	.word	0x24000034
 800b6f8:	e000ed04 	.word	0xe000ed04

0800b6fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d017      	beq.n	800b73e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b70e:	4b13      	ldr	r3, [pc, #76]	; (800b75c <vTaskDelay+0x60>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00a      	beq.n	800b72c <vTaskDelay+0x30>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	60bb      	str	r3, [r7, #8]
}
 800b728:	bf00      	nop
 800b72a:	e7fe      	b.n	800b72a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b72c:	f000 f87a 	bl	800b824 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b730:	2100      	movs	r1, #0
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fdd0 	bl	800c2d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b738:	f000 f882 	bl	800b840 <xTaskResumeAll>
 800b73c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d107      	bne.n	800b754 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b744:	4b06      	ldr	r3, [pc, #24]	; (800b760 <vTaskDelay+0x64>)
 800b746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b754:	bf00      	nop
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	24000158 	.word	0x24000158
 800b760:	e000ed04 	.word	0xe000ed04

0800b764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b08a      	sub	sp, #40	; 0x28
 800b768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b76a:	2300      	movs	r3, #0
 800b76c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b76e:	2300      	movs	r3, #0
 800b770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b772:	463a      	mov	r2, r7
 800b774:	1d39      	adds	r1, r7, #4
 800b776:	f107 0308 	add.w	r3, r7, #8
 800b77a:	4618      	mov	r0, r3
 800b77c:	f001 fa96 	bl	800ccac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68ba      	ldr	r2, [r7, #8]
 800b786:	9202      	str	r2, [sp, #8]
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	2300      	movs	r3, #0
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	2300      	movs	r3, #0
 800b790:	460a      	mov	r2, r1
 800b792:	491e      	ldr	r1, [pc, #120]	; (800b80c <vTaskStartScheduler+0xa8>)
 800b794:	481e      	ldr	r0, [pc, #120]	; (800b810 <vTaskStartScheduler+0xac>)
 800b796:	f7ff fe1d 	bl	800b3d4 <xTaskCreateStatic>
 800b79a:	4603      	mov	r3, r0
 800b79c:	4a1d      	ldr	r2, [pc, #116]	; (800b814 <vTaskStartScheduler+0xb0>)
 800b79e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7a0:	4b1c      	ldr	r3, [pc, #112]	; (800b814 <vTaskStartScheduler+0xb0>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	617b      	str	r3, [r7, #20]
 800b7ac:	e001      	b.n	800b7b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d116      	bne.n	800b7e6 <vTaskStartScheduler+0x82>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	613b      	str	r3, [r7, #16]
}
 800b7ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7cc:	4b12      	ldr	r3, [pc, #72]	; (800b818 <vTaskStartScheduler+0xb4>)
 800b7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7d4:	4b11      	ldr	r3, [pc, #68]	; (800b81c <vTaskStartScheduler+0xb8>)
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b7da:	4b11      	ldr	r3, [pc, #68]	; (800b820 <vTaskStartScheduler+0xbc>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b7e0:	f000 fe6e 	bl	800c4c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b7e4:	e00e      	b.n	800b804 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ec:	d10a      	bne.n	800b804 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	60fb      	str	r3, [r7, #12]
}
 800b800:	bf00      	nop
 800b802:	e7fe      	b.n	800b802 <vTaskStartScheduler+0x9e>
}
 800b804:	bf00      	nop
 800b806:	3718      	adds	r7, #24
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	0800f798 	.word	0x0800f798
 800b810:	0800bdb5 	.word	0x0800bdb5
 800b814:	24000154 	.word	0x24000154
 800b818:	24000150 	.word	0x24000150
 800b81c:	2400013c 	.word	0x2400013c
 800b820:	24000134 	.word	0x24000134

0800b824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b824:	b480      	push	{r7}
 800b826:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b828:	4b04      	ldr	r3, [pc, #16]	; (800b83c <vTaskSuspendAll+0x18>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3301      	adds	r3, #1
 800b82e:	4a03      	ldr	r2, [pc, #12]	; (800b83c <vTaskSuspendAll+0x18>)
 800b830:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b832:	bf00      	nop
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	24000158 	.word	0x24000158

0800b840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b846:	2300      	movs	r3, #0
 800b848:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b84a:	2300      	movs	r3, #0
 800b84c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b84e:	4b41      	ldr	r3, [pc, #260]	; (800b954 <xTaskResumeAll+0x114>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10a      	bne.n	800b86c <xTaskResumeAll+0x2c>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	603b      	str	r3, [r7, #0]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b86c:	f000 feca 	bl	800c604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b870:	4b38      	ldr	r3, [pc, #224]	; (800b954 <xTaskResumeAll+0x114>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3b01      	subs	r3, #1
 800b876:	4a37      	ldr	r2, [pc, #220]	; (800b954 <xTaskResumeAll+0x114>)
 800b878:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b87a:	4b36      	ldr	r3, [pc, #216]	; (800b954 <xTaskResumeAll+0x114>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d161      	bne.n	800b946 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b882:	4b35      	ldr	r3, [pc, #212]	; (800b958 <xTaskResumeAll+0x118>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d05d      	beq.n	800b946 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b88a:	e02e      	b.n	800b8ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b88c:	4b33      	ldr	r3, [pc, #204]	; (800b95c <xTaskResumeAll+0x11c>)
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	3318      	adds	r3, #24
 800b898:	4618      	mov	r0, r3
 800b89a:	f7fe ff96 	bl	800a7ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fe ff91 	bl	800a7ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	409a      	lsls	r2, r3
 800b8b0:	4b2b      	ldr	r3, [pc, #172]	; (800b960 <xTaskResumeAll+0x120>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	4a2a      	ldr	r2, [pc, #168]	; (800b960 <xTaskResumeAll+0x120>)
 800b8b8:	6013      	str	r3, [r2, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8be:	4613      	mov	r3, r2
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	4413      	add	r3, r2
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	4a27      	ldr	r2, [pc, #156]	; (800b964 <xTaskResumeAll+0x124>)
 800b8c8:	441a      	add	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	f7fe ff1d 	bl	800a710 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8da:	4b23      	ldr	r3, [pc, #140]	; (800b968 <xTaskResumeAll+0x128>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d302      	bcc.n	800b8ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b8e4:	4b21      	ldr	r3, [pc, #132]	; (800b96c <xTaskResumeAll+0x12c>)
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8ea:	4b1c      	ldr	r3, [pc, #112]	; (800b95c <xTaskResumeAll+0x11c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1cc      	bne.n	800b88c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d001      	beq.n	800b8fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8f8:	f000 fb12 	bl	800bf20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8fc:	4b1c      	ldr	r3, [pc, #112]	; (800b970 <xTaskResumeAll+0x130>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d010      	beq.n	800b92a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b908:	f000 f836 	bl	800b978 <xTaskIncrementTick>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d002      	beq.n	800b918 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b912:	4b16      	ldr	r3, [pc, #88]	; (800b96c <xTaskResumeAll+0x12c>)
 800b914:	2201      	movs	r2, #1
 800b916:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	3b01      	subs	r3, #1
 800b91c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1f1      	bne.n	800b908 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b924:	4b12      	ldr	r3, [pc, #72]	; (800b970 <xTaskResumeAll+0x130>)
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b92a:	4b10      	ldr	r3, [pc, #64]	; (800b96c <xTaskResumeAll+0x12c>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d009      	beq.n	800b946 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b932:	2301      	movs	r3, #1
 800b934:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b936:	4b0f      	ldr	r3, [pc, #60]	; (800b974 <xTaskResumeAll+0x134>)
 800b938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b93c:	601a      	str	r2, [r3, #0]
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b946:	f000 fe8d 	bl	800c664 <vPortExitCritical>

	return xAlreadyYielded;
 800b94a:	68bb      	ldr	r3, [r7, #8]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3710      	adds	r7, #16
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	24000158 	.word	0x24000158
 800b958:	24000130 	.word	0x24000130
 800b95c:	240000f0 	.word	0x240000f0
 800b960:	24000138 	.word	0x24000138
 800b964:	24000034 	.word	0x24000034
 800b968:	24000030 	.word	0x24000030
 800b96c:	24000144 	.word	0x24000144
 800b970:	24000140 	.word	0x24000140
 800b974:	e000ed04 	.word	0xe000ed04

0800b978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b97e:	2300      	movs	r3, #0
 800b980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b982:	4b4e      	ldr	r3, [pc, #312]	; (800babc <xTaskIncrementTick+0x144>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	f040 808e 	bne.w	800baa8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b98c:	4b4c      	ldr	r3, [pc, #304]	; (800bac0 <xTaskIncrementTick+0x148>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3301      	adds	r3, #1
 800b992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b994:	4a4a      	ldr	r2, [pc, #296]	; (800bac0 <xTaskIncrementTick+0x148>)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d120      	bne.n	800b9e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9a0:	4b48      	ldr	r3, [pc, #288]	; (800bac4 <xTaskIncrementTick+0x14c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00a      	beq.n	800b9c0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	603b      	str	r3, [r7, #0]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <xTaskIncrementTick+0x46>
 800b9c0:	4b40      	ldr	r3, [pc, #256]	; (800bac4 <xTaskIncrementTick+0x14c>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	4b40      	ldr	r3, [pc, #256]	; (800bac8 <xTaskIncrementTick+0x150>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a3e      	ldr	r2, [pc, #248]	; (800bac4 <xTaskIncrementTick+0x14c>)
 800b9cc:	6013      	str	r3, [r2, #0]
 800b9ce:	4a3e      	ldr	r2, [pc, #248]	; (800bac8 <xTaskIncrementTick+0x150>)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6013      	str	r3, [r2, #0]
 800b9d4:	4b3d      	ldr	r3, [pc, #244]	; (800bacc <xTaskIncrementTick+0x154>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	4a3c      	ldr	r2, [pc, #240]	; (800bacc <xTaskIncrementTick+0x154>)
 800b9dc:	6013      	str	r3, [r2, #0]
 800b9de:	f000 fa9f 	bl	800bf20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9e2:	4b3b      	ldr	r3, [pc, #236]	; (800bad0 <xTaskIncrementTick+0x158>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d348      	bcc.n	800ba7e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ec:	4b35      	ldr	r3, [pc, #212]	; (800bac4 <xTaskIncrementTick+0x14c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d104      	bne.n	800ba00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9f6:	4b36      	ldr	r3, [pc, #216]	; (800bad0 <xTaskIncrementTick+0x158>)
 800b9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9fc:	601a      	str	r2, [r3, #0]
					break;
 800b9fe:	e03e      	b.n	800ba7e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba00:	4b30      	ldr	r3, [pc, #192]	; (800bac4 <xTaskIncrementTick+0x14c>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d203      	bcs.n	800ba20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba18:	4a2d      	ldr	r2, [pc, #180]	; (800bad0 <xTaskIncrementTick+0x158>)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba1e:	e02e      	b.n	800ba7e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	3304      	adds	r3, #4
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fe fed0 	bl	800a7ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d004      	beq.n	800ba3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	3318      	adds	r3, #24
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe fec7 	bl	800a7ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba40:	2201      	movs	r2, #1
 800ba42:	409a      	lsls	r2, r3
 800ba44:	4b23      	ldr	r3, [pc, #140]	; (800bad4 <xTaskIncrementTick+0x15c>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	4a22      	ldr	r2, [pc, #136]	; (800bad4 <xTaskIncrementTick+0x15c>)
 800ba4c:	6013      	str	r3, [r2, #0]
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba52:	4613      	mov	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4a1f      	ldr	r2, [pc, #124]	; (800bad8 <xTaskIncrementTick+0x160>)
 800ba5c:	441a      	add	r2, r3
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	3304      	adds	r3, #4
 800ba62:	4619      	mov	r1, r3
 800ba64:	4610      	mov	r0, r2
 800ba66:	f7fe fe53 	bl	800a710 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6e:	4b1b      	ldr	r3, [pc, #108]	; (800badc <xTaskIncrementTick+0x164>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d3b9      	bcc.n	800b9ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba7c:	e7b6      	b.n	800b9ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba7e:	4b17      	ldr	r3, [pc, #92]	; (800badc <xTaskIncrementTick+0x164>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba84:	4914      	ldr	r1, [pc, #80]	; (800bad8 <xTaskIncrementTick+0x160>)
 800ba86:	4613      	mov	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	440b      	add	r3, r1
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d901      	bls.n	800ba9a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ba96:	2301      	movs	r3, #1
 800ba98:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba9a:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <xTaskIncrementTick+0x168>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d007      	beq.n	800bab2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800baa2:	2301      	movs	r3, #1
 800baa4:	617b      	str	r3, [r7, #20]
 800baa6:	e004      	b.n	800bab2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800baa8:	4b0e      	ldr	r3, [pc, #56]	; (800bae4 <xTaskIncrementTick+0x16c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3301      	adds	r3, #1
 800baae:	4a0d      	ldr	r2, [pc, #52]	; (800bae4 <xTaskIncrementTick+0x16c>)
 800bab0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bab2:	697b      	ldr	r3, [r7, #20]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3718      	adds	r7, #24
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	24000158 	.word	0x24000158
 800bac0:	24000134 	.word	0x24000134
 800bac4:	240000e8 	.word	0x240000e8
 800bac8:	240000ec 	.word	0x240000ec
 800bacc:	24000148 	.word	0x24000148
 800bad0:	24000150 	.word	0x24000150
 800bad4:	24000138 	.word	0x24000138
 800bad8:	24000034 	.word	0x24000034
 800badc:	24000030 	.word	0x24000030
 800bae0:	24000144 	.word	0x24000144
 800bae4:	24000140 	.word	0x24000140

0800bae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bae8:	b480      	push	{r7}
 800baea:	b087      	sub	sp, #28
 800baec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800baee:	4b27      	ldr	r3, [pc, #156]	; (800bb8c <vTaskSwitchContext+0xa4>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d003      	beq.n	800bafe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800baf6:	4b26      	ldr	r3, [pc, #152]	; (800bb90 <vTaskSwitchContext+0xa8>)
 800baf8:	2201      	movs	r2, #1
 800bafa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bafc:	e03f      	b.n	800bb7e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bafe:	4b24      	ldr	r3, [pc, #144]	; (800bb90 <vTaskSwitchContext+0xa8>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb04:	4b23      	ldr	r3, [pc, #140]	; (800bb94 <vTaskSwitchContext+0xac>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	fab3 f383 	clz	r3, r3
 800bb10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bb12:	7afb      	ldrb	r3, [r7, #11]
 800bb14:	f1c3 031f 	rsb	r3, r3, #31
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	491f      	ldr	r1, [pc, #124]	; (800bb98 <vTaskSwitchContext+0xb0>)
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	440b      	add	r3, r1
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10a      	bne.n	800bb44 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	607b      	str	r3, [r7, #4]
}
 800bb40:	bf00      	nop
 800bb42:	e7fe      	b.n	800bb42 <vTaskSwitchContext+0x5a>
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	4613      	mov	r3, r2
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	4413      	add	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4a12      	ldr	r2, [pc, #72]	; (800bb98 <vTaskSwitchContext+0xb0>)
 800bb50:	4413      	add	r3, r2
 800bb52:	613b      	str	r3, [r7, #16]
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	605a      	str	r2, [r3, #4]
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	685a      	ldr	r2, [r3, #4]
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	3308      	adds	r3, #8
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d104      	bne.n	800bb74 <vTaskSwitchContext+0x8c>
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	685a      	ldr	r2, [r3, #4]
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	605a      	str	r2, [r3, #4]
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	4a08      	ldr	r2, [pc, #32]	; (800bb9c <vTaskSwitchContext+0xb4>)
 800bb7c:	6013      	str	r3, [r2, #0]
}
 800bb7e:	bf00      	nop
 800bb80:	371c      	adds	r7, #28
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	24000158 	.word	0x24000158
 800bb90:	24000144 	.word	0x24000144
 800bb94:	24000138 	.word	0x24000138
 800bb98:	24000034 	.word	0x24000034
 800bb9c:	24000030 	.word	0x24000030

0800bba0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10a      	bne.n	800bbc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	60fb      	str	r3, [r7, #12]
}
 800bbc2:	bf00      	nop
 800bbc4:	e7fe      	b.n	800bbc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbc6:	4b07      	ldr	r3, [pc, #28]	; (800bbe4 <vTaskPlaceOnEventList+0x44>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	3318      	adds	r3, #24
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7fe fdc2 	bl	800a758 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	6838      	ldr	r0, [r7, #0]
 800bbd8:	f000 fb7e 	bl	800c2d8 <prvAddCurrentTaskToDelayedList>
}
 800bbdc:	bf00      	nop
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	24000030 	.word	0x24000030

0800bbe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b086      	sub	sp, #24
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d10a      	bne.n	800bc14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	60fb      	str	r3, [r7, #12]
}
 800bc10:	bf00      	nop
 800bc12:	e7fe      	b.n	800bc12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	3318      	adds	r3, #24
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fe fdd6 	bl	800a7ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc1e:	4b1d      	ldr	r3, [pc, #116]	; (800bc94 <xTaskRemoveFromEventList+0xac>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d11c      	bne.n	800bc60 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	3304      	adds	r3, #4
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fe fdcd 	bl	800a7ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc34:	2201      	movs	r2, #1
 800bc36:	409a      	lsls	r2, r3
 800bc38:	4b17      	ldr	r3, [pc, #92]	; (800bc98 <xTaskRemoveFromEventList+0xb0>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	4a16      	ldr	r2, [pc, #88]	; (800bc98 <xTaskRemoveFromEventList+0xb0>)
 800bc40:	6013      	str	r3, [r2, #0]
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc46:	4613      	mov	r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	4a13      	ldr	r2, [pc, #76]	; (800bc9c <xTaskRemoveFromEventList+0xb4>)
 800bc50:	441a      	add	r2, r3
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	3304      	adds	r3, #4
 800bc56:	4619      	mov	r1, r3
 800bc58:	4610      	mov	r0, r2
 800bc5a:	f7fe fd59 	bl	800a710 <vListInsertEnd>
 800bc5e:	e005      	b.n	800bc6c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	3318      	adds	r3, #24
 800bc64:	4619      	mov	r1, r3
 800bc66:	480e      	ldr	r0, [pc, #56]	; (800bca0 <xTaskRemoveFromEventList+0xb8>)
 800bc68:	f7fe fd52 	bl	800a710 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc70:	4b0c      	ldr	r3, [pc, #48]	; (800bca4 <xTaskRemoveFromEventList+0xbc>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d905      	bls.n	800bc86 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc7e:	4b0a      	ldr	r3, [pc, #40]	; (800bca8 <xTaskRemoveFromEventList+0xc0>)
 800bc80:	2201      	movs	r2, #1
 800bc82:	601a      	str	r2, [r3, #0]
 800bc84:	e001      	b.n	800bc8a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bc86:	2300      	movs	r3, #0
 800bc88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc8a:	697b      	ldr	r3, [r7, #20]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	24000158 	.word	0x24000158
 800bc98:	24000138 	.word	0x24000138
 800bc9c:	24000034 	.word	0x24000034
 800bca0:	240000f0 	.word	0x240000f0
 800bca4:	24000030 	.word	0x24000030
 800bca8:	24000144 	.word	0x24000144

0800bcac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bcb4:	4b06      	ldr	r3, [pc, #24]	; (800bcd0 <vTaskInternalSetTimeOutState+0x24>)
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bcbc:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <vTaskInternalSetTimeOutState+0x28>)
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	605a      	str	r2, [r3, #4]
}
 800bcc4:	bf00      	nop
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	24000148 	.word	0x24000148
 800bcd4:	24000134 	.word	0x24000134

0800bcd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b088      	sub	sp, #32
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	613b      	str	r3, [r7, #16]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10a      	bne.n	800bd1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	60fb      	str	r3, [r7, #12]
}
 800bd16:	bf00      	nop
 800bd18:	e7fe      	b.n	800bd18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bd1a:	f000 fc73 	bl	800c604 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd1e:	4b1d      	ldr	r3, [pc, #116]	; (800bd94 <xTaskCheckForTimeOut+0xbc>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd36:	d102      	bne.n	800bd3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	61fb      	str	r3, [r7, #28]
 800bd3c:	e023      	b.n	800bd86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	4b15      	ldr	r3, [pc, #84]	; (800bd98 <xTaskCheckForTimeOut+0xc0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d007      	beq.n	800bd5a <xTaskCheckForTimeOut+0x82>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d302      	bcc.n	800bd5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd54:	2301      	movs	r3, #1
 800bd56:	61fb      	str	r3, [r7, #28]
 800bd58:	e015      	b.n	800bd86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	697a      	ldr	r2, [r7, #20]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d20b      	bcs.n	800bd7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	1ad2      	subs	r2, r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f7ff ff9b 	bl	800bcac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd76:	2300      	movs	r3, #0
 800bd78:	61fb      	str	r3, [r7, #28]
 800bd7a:	e004      	b.n	800bd86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd82:	2301      	movs	r3, #1
 800bd84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd86:	f000 fc6d 	bl	800c664 <vPortExitCritical>

	return xReturn;
 800bd8a:	69fb      	ldr	r3, [r7, #28]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3720      	adds	r7, #32
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	24000134 	.word	0x24000134
 800bd98:	24000148 	.word	0x24000148

0800bd9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bda0:	4b03      	ldr	r3, [pc, #12]	; (800bdb0 <vTaskMissedYield+0x14>)
 800bda2:	2201      	movs	r2, #1
 800bda4:	601a      	str	r2, [r3, #0]
}
 800bda6:	bf00      	nop
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	24000144 	.word	0x24000144

0800bdb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bdbc:	f000 f852 	bl	800be64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdc0:	4b06      	ldr	r3, [pc, #24]	; (800bddc <prvIdleTask+0x28>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d9f9      	bls.n	800bdbc <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdc8:	4b05      	ldr	r3, [pc, #20]	; (800bde0 <prvIdleTask+0x2c>)
 800bdca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bdd8:	e7f0      	b.n	800bdbc <prvIdleTask+0x8>
 800bdda:	bf00      	nop
 800bddc:	24000034 	.word	0x24000034
 800bde0:	e000ed04 	.word	0xe000ed04

0800bde4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdea:	2300      	movs	r3, #0
 800bdec:	607b      	str	r3, [r7, #4]
 800bdee:	e00c      	b.n	800be0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4a12      	ldr	r2, [pc, #72]	; (800be44 <prvInitialiseTaskLists+0x60>)
 800bdfc:	4413      	add	r3, r2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fe fc59 	bl	800a6b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3301      	adds	r3, #1
 800be08:	607b      	str	r3, [r7, #4]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b06      	cmp	r3, #6
 800be0e:	d9ef      	bls.n	800bdf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be10:	480d      	ldr	r0, [pc, #52]	; (800be48 <prvInitialiseTaskLists+0x64>)
 800be12:	f7fe fc50 	bl	800a6b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be16:	480d      	ldr	r0, [pc, #52]	; (800be4c <prvInitialiseTaskLists+0x68>)
 800be18:	f7fe fc4d 	bl	800a6b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be1c:	480c      	ldr	r0, [pc, #48]	; (800be50 <prvInitialiseTaskLists+0x6c>)
 800be1e:	f7fe fc4a 	bl	800a6b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be22:	480c      	ldr	r0, [pc, #48]	; (800be54 <prvInitialiseTaskLists+0x70>)
 800be24:	f7fe fc47 	bl	800a6b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be28:	480b      	ldr	r0, [pc, #44]	; (800be58 <prvInitialiseTaskLists+0x74>)
 800be2a:	f7fe fc44 	bl	800a6b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be2e:	4b0b      	ldr	r3, [pc, #44]	; (800be5c <prvInitialiseTaskLists+0x78>)
 800be30:	4a05      	ldr	r2, [pc, #20]	; (800be48 <prvInitialiseTaskLists+0x64>)
 800be32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be34:	4b0a      	ldr	r3, [pc, #40]	; (800be60 <prvInitialiseTaskLists+0x7c>)
 800be36:	4a05      	ldr	r2, [pc, #20]	; (800be4c <prvInitialiseTaskLists+0x68>)
 800be38:	601a      	str	r2, [r3, #0]
}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	24000034 	.word	0x24000034
 800be48:	240000c0 	.word	0x240000c0
 800be4c:	240000d4 	.word	0x240000d4
 800be50:	240000f0 	.word	0x240000f0
 800be54:	24000104 	.word	0x24000104
 800be58:	2400011c 	.word	0x2400011c
 800be5c:	240000e8 	.word	0x240000e8
 800be60:	240000ec 	.word	0x240000ec

0800be64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be6a:	e019      	b.n	800bea0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be6c:	f000 fbca 	bl	800c604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be70:	4b10      	ldr	r3, [pc, #64]	; (800beb4 <prvCheckTasksWaitingTermination+0x50>)
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	3304      	adds	r3, #4
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7fe fca4 	bl	800a7ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be82:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <prvCheckTasksWaitingTermination+0x54>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	3b01      	subs	r3, #1
 800be88:	4a0b      	ldr	r2, [pc, #44]	; (800beb8 <prvCheckTasksWaitingTermination+0x54>)
 800be8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be8c:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <prvCheckTasksWaitingTermination+0x58>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3b01      	subs	r3, #1
 800be92:	4a0a      	ldr	r2, [pc, #40]	; (800bebc <prvCheckTasksWaitingTermination+0x58>)
 800be94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be96:	f000 fbe5 	bl	800c664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f810 	bl	800bec0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bea0:	4b06      	ldr	r3, [pc, #24]	; (800bebc <prvCheckTasksWaitingTermination+0x58>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1e1      	bne.n	800be6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	24000104 	.word	0x24000104
 800beb8:	24000130 	.word	0x24000130
 800bebc:	24000118 	.word	0x24000118

0800bec0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d108      	bne.n	800bee4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 fd82 	bl	800c9e0 <vPortFree>
				vPortFree( pxTCB );
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fd7f 	bl	800c9e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bee2:	e018      	b.n	800bf16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800beea:	2b01      	cmp	r3, #1
 800beec:	d103      	bne.n	800bef6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fd76 	bl	800c9e0 <vPortFree>
	}
 800bef4:	e00f      	b.n	800bf16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800befc:	2b02      	cmp	r3, #2
 800befe:	d00a      	beq.n	800bf16 <prvDeleteTCB+0x56>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	60fb      	str	r3, [r7, #12]
}
 800bf12:	bf00      	nop
 800bf14:	e7fe      	b.n	800bf14 <prvDeleteTCB+0x54>
	}
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf26:	4b0c      	ldr	r3, [pc, #48]	; (800bf58 <prvResetNextTaskUnblockTime+0x38>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d104      	bne.n	800bf3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf30:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <prvResetNextTaskUnblockTime+0x3c>)
 800bf32:	f04f 32ff 	mov.w	r2, #4294967295
 800bf36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf38:	e008      	b.n	800bf4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf3a:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <prvResetNextTaskUnblockTime+0x38>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	4a04      	ldr	r2, [pc, #16]	; (800bf5c <prvResetNextTaskUnblockTime+0x3c>)
 800bf4a:	6013      	str	r3, [r2, #0]
}
 800bf4c:	bf00      	nop
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	240000e8 	.word	0x240000e8
 800bf5c:	24000150 	.word	0x24000150

0800bf60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf66:	4b0b      	ldr	r3, [pc, #44]	; (800bf94 <xTaskGetSchedulerState+0x34>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d102      	bne.n	800bf74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	607b      	str	r3, [r7, #4]
 800bf72:	e008      	b.n	800bf86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf74:	4b08      	ldr	r3, [pc, #32]	; (800bf98 <xTaskGetSchedulerState+0x38>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	607b      	str	r3, [r7, #4]
 800bf80:	e001      	b.n	800bf86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf82:	2300      	movs	r3, #0
 800bf84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf86:	687b      	ldr	r3, [r7, #4]
	}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	2400013c 	.word	0x2400013c
 800bf98:	24000158 	.word	0x24000158

0800bf9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d05e      	beq.n	800c070 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb6:	4b31      	ldr	r3, [pc, #196]	; (800c07c <xTaskPriorityInherit+0xe0>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d24e      	bcs.n	800c05e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	699b      	ldr	r3, [r3, #24]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	db06      	blt.n	800bfd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfc8:	4b2c      	ldr	r3, [pc, #176]	; (800c07c <xTaskPriorityInherit+0xe0>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	f1c3 0207 	rsb	r2, r3, #7
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	6959      	ldr	r1, [r3, #20]
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfde:	4613      	mov	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	4413      	add	r3, r2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4a26      	ldr	r2, [pc, #152]	; (800c080 <xTaskPriorityInherit+0xe4>)
 800bfe8:	4413      	add	r3, r2
 800bfea:	4299      	cmp	r1, r3
 800bfec:	d12f      	bne.n	800c04e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	3304      	adds	r3, #4
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fe fbe9 	bl	800a7ca <uxListRemove>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10a      	bne.n	800c014 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	2201      	movs	r2, #1
 800c004:	fa02 f303 	lsl.w	r3, r2, r3
 800c008:	43da      	mvns	r2, r3
 800c00a:	4b1e      	ldr	r3, [pc, #120]	; (800c084 <xTaskPriorityInherit+0xe8>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4013      	ands	r3, r2
 800c010:	4a1c      	ldr	r2, [pc, #112]	; (800c084 <xTaskPriorityInherit+0xe8>)
 800c012:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c014:	4b19      	ldr	r3, [pc, #100]	; (800c07c <xTaskPriorityInherit+0xe0>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c022:	2201      	movs	r2, #1
 800c024:	409a      	lsls	r2, r3
 800c026:	4b17      	ldr	r3, [pc, #92]	; (800c084 <xTaskPriorityInherit+0xe8>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	4a15      	ldr	r2, [pc, #84]	; (800c084 <xTaskPriorityInherit+0xe8>)
 800c02e:	6013      	str	r3, [r2, #0]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c034:	4613      	mov	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4413      	add	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4a10      	ldr	r2, [pc, #64]	; (800c080 <xTaskPriorityInherit+0xe4>)
 800c03e:	441a      	add	r2, r3
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	3304      	adds	r3, #4
 800c044:	4619      	mov	r1, r3
 800c046:	4610      	mov	r0, r2
 800c048:	f7fe fb62 	bl	800a710 <vListInsertEnd>
 800c04c:	e004      	b.n	800c058 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c04e:	4b0b      	ldr	r3, [pc, #44]	; (800c07c <xTaskPriorityInherit+0xe0>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c058:	2301      	movs	r3, #1
 800c05a:	60fb      	str	r3, [r7, #12]
 800c05c:	e008      	b.n	800c070 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c062:	4b06      	ldr	r3, [pc, #24]	; (800c07c <xTaskPriorityInherit+0xe0>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c068:	429a      	cmp	r2, r3
 800c06a:	d201      	bcs.n	800c070 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c06c:	2301      	movs	r3, #1
 800c06e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c070:	68fb      	ldr	r3, [r7, #12]
	}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	24000030 	.word	0x24000030
 800c080:	24000034 	.word	0x24000034
 800c084:	24000138 	.word	0x24000138

0800c088 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b086      	sub	sp, #24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c094:	2300      	movs	r3, #0
 800c096:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d06e      	beq.n	800c17c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c09e:	4b3a      	ldr	r3, [pc, #232]	; (800c188 <xTaskPriorityDisinherit+0x100>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d00a      	beq.n	800c0be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	60fb      	str	r3, [r7, #12]
}
 800c0ba:	bf00      	nop
 800c0bc:	e7fe      	b.n	800c0bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10a      	bne.n	800c0dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	60bb      	str	r3, [r7, #8]
}
 800c0d8:	bf00      	nop
 800c0da:	e7fe      	b.n	800c0da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0e0:	1e5a      	subs	r2, r3, #1
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d044      	beq.n	800c17c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d140      	bne.n	800c17c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe fb63 	bl	800a7ca <uxListRemove>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d115      	bne.n	800c136 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10e:	491f      	ldr	r1, [pc, #124]	; (800c18c <xTaskPriorityDisinherit+0x104>)
 800c110:	4613      	mov	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	440b      	add	r3, r1
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10a      	bne.n	800c136 <xTaskPriorityDisinherit+0xae>
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c124:	2201      	movs	r2, #1
 800c126:	fa02 f303 	lsl.w	r3, r2, r3
 800c12a:	43da      	mvns	r2, r3
 800c12c:	4b18      	ldr	r3, [pc, #96]	; (800c190 <xTaskPriorityDisinherit+0x108>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4013      	ands	r3, r2
 800c132:	4a17      	ldr	r2, [pc, #92]	; (800c190 <xTaskPriorityDisinherit+0x108>)
 800c134:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c142:	f1c3 0207 	rsb	r2, r3, #7
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14e:	2201      	movs	r2, #1
 800c150:	409a      	lsls	r2, r3
 800c152:	4b0f      	ldr	r3, [pc, #60]	; (800c190 <xTaskPriorityDisinherit+0x108>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4313      	orrs	r3, r2
 800c158:	4a0d      	ldr	r2, [pc, #52]	; (800c190 <xTaskPriorityDisinherit+0x108>)
 800c15a:	6013      	str	r3, [r2, #0]
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c160:	4613      	mov	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	4413      	add	r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4a08      	ldr	r2, [pc, #32]	; (800c18c <xTaskPriorityDisinherit+0x104>)
 800c16a:	441a      	add	r2, r3
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	3304      	adds	r3, #4
 800c170:	4619      	mov	r1, r3
 800c172:	4610      	mov	r0, r2
 800c174:	f7fe facc 	bl	800a710 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c178:	2301      	movs	r3, #1
 800c17a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c17c:	697b      	ldr	r3, [r7, #20]
	}
 800c17e:	4618      	mov	r0, r3
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	24000030 	.word	0x24000030
 800c18c:	24000034 	.word	0x24000034
 800c190:	24000138 	.word	0x24000138

0800c194 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d077      	beq.n	800c29c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10a      	bne.n	800c1ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	60fb      	str	r3, [r7, #12]
}
 800c1c6:	bf00      	nop
 800c1c8:	e7fe      	b.n	800c1c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d902      	bls.n	800c1da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	61fb      	str	r3, [r7, #28]
 800c1d8:	e002      	b.n	800c1e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	69fa      	ldr	r2, [r7, #28]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d058      	beq.n	800c29c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d153      	bne.n	800c29c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c1f4:	4b2b      	ldr	r3, [pc, #172]	; (800c2a4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d10a      	bne.n	800c214 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	60bb      	str	r3, [r7, #8]
}
 800c210:	bf00      	nop
 800c212:	e7fe      	b.n	800c212 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c218:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	69fa      	ldr	r2, [r7, #28]
 800c21e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	699b      	ldr	r3, [r3, #24]
 800c224:	2b00      	cmp	r3, #0
 800c226:	db04      	blt.n	800c232 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	f1c3 0207 	rsb	r2, r3, #7
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	6959      	ldr	r1, [r3, #20]
 800c236:	693a      	ldr	r2, [r7, #16]
 800c238:	4613      	mov	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	4a19      	ldr	r2, [pc, #100]	; (800c2a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c242:	4413      	add	r3, r2
 800c244:	4299      	cmp	r1, r3
 800c246:	d129      	bne.n	800c29c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	3304      	adds	r3, #4
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fe fabc 	bl	800a7ca <uxListRemove>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25c:	2201      	movs	r2, #1
 800c25e:	fa02 f303 	lsl.w	r3, r2, r3
 800c262:	43da      	mvns	r2, r3
 800c264:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4013      	ands	r3, r2
 800c26a:	4a10      	ldr	r2, [pc, #64]	; (800c2ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c26c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c272:	2201      	movs	r2, #1
 800c274:	409a      	lsls	r2, r3
 800c276:	4b0d      	ldr	r3, [pc, #52]	; (800c2ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	4a0b      	ldr	r2, [pc, #44]	; (800c2ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c284:	4613      	mov	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4a06      	ldr	r2, [pc, #24]	; (800c2a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c28e:	441a      	add	r2, r3
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	3304      	adds	r3, #4
 800c294:	4619      	mov	r1, r3
 800c296:	4610      	mov	r0, r2
 800c298:	f7fe fa3a 	bl	800a710 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c29c:	bf00      	nop
 800c29e:	3720      	adds	r7, #32
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	24000030 	.word	0x24000030
 800c2a8:	24000034 	.word	0x24000034
 800c2ac:	24000138 	.word	0x24000138

0800c2b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c2b0:	b480      	push	{r7}
 800c2b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c2b4:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d004      	beq.n	800c2c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c2bc:	4b05      	ldr	r3, [pc, #20]	; (800c2d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2c2:	3201      	adds	r2, #1
 800c2c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c2c6:	4b03      	ldr	r3, [pc, #12]	; (800c2d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
	}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	24000030 	.word	0x24000030

0800c2d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2e2:	4b29      	ldr	r3, [pc, #164]	; (800c388 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2e8:	4b28      	ldr	r3, [pc, #160]	; (800c38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe fa6b 	bl	800a7ca <uxListRemove>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10b      	bne.n	800c312 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c2fa:	4b24      	ldr	r3, [pc, #144]	; (800c38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	2201      	movs	r2, #1
 800c302:	fa02 f303 	lsl.w	r3, r2, r3
 800c306:	43da      	mvns	r2, r3
 800c308:	4b21      	ldr	r3, [pc, #132]	; (800c390 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4013      	ands	r3, r2
 800c30e:	4a20      	ldr	r2, [pc, #128]	; (800c390 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c310:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c318:	d10a      	bne.n	800c330 <prvAddCurrentTaskToDelayedList+0x58>
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d007      	beq.n	800c330 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c320:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3304      	adds	r3, #4
 800c326:	4619      	mov	r1, r3
 800c328:	481a      	ldr	r0, [pc, #104]	; (800c394 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c32a:	f7fe f9f1 	bl	800a710 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c32e:	e026      	b.n	800c37e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4413      	add	r3, r2
 800c336:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c338:	4b14      	ldr	r3, [pc, #80]	; (800c38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	429a      	cmp	r2, r3
 800c346:	d209      	bcs.n	800c35c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c348:	4b13      	ldr	r3, [pc, #76]	; (800c398 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	4b0f      	ldr	r3, [pc, #60]	; (800c38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	3304      	adds	r3, #4
 800c352:	4619      	mov	r1, r3
 800c354:	4610      	mov	r0, r2
 800c356:	f7fe f9ff 	bl	800a758 <vListInsert>
}
 800c35a:	e010      	b.n	800c37e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c35c:	4b0f      	ldr	r3, [pc, #60]	; (800c39c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3304      	adds	r3, #4
 800c366:	4619      	mov	r1, r3
 800c368:	4610      	mov	r0, r2
 800c36a:	f7fe f9f5 	bl	800a758 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c36e:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	429a      	cmp	r2, r3
 800c376:	d202      	bcs.n	800c37e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c378:	4a09      	ldr	r2, [pc, #36]	; (800c3a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	6013      	str	r3, [r2, #0]
}
 800c37e:	bf00      	nop
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	24000134 	.word	0x24000134
 800c38c:	24000030 	.word	0x24000030
 800c390:	24000138 	.word	0x24000138
 800c394:	2400011c 	.word	0x2400011c
 800c398:	240000ec 	.word	0x240000ec
 800c39c:	240000e8 	.word	0x240000e8
 800c3a0:	24000150 	.word	0x24000150

0800c3a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	3b04      	subs	r3, #4
 800c3b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3b04      	subs	r3, #4
 800c3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f023 0201 	bic.w	r2, r3, #1
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3b04      	subs	r3, #4
 800c3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3d4:	4a0c      	ldr	r2, [pc, #48]	; (800c408 <pxPortInitialiseStack+0x64>)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3b14      	subs	r3, #20
 800c3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3b04      	subs	r3, #4
 800c3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f06f 0202 	mvn.w	r2, #2
 800c3f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	3b20      	subs	r3, #32
 800c3f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	0800c40d 	.word	0x0800c40d

0800c40c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c416:	4b12      	ldr	r3, [pc, #72]	; (800c460 <prvTaskExitError+0x54>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c41e:	d00a      	beq.n	800c436 <prvTaskExitError+0x2a>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	60fb      	str	r3, [r7, #12]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <prvTaskExitError+0x28>
	__asm volatile
 800c436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	60bb      	str	r3, [r7, #8]
}
 800c448:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c44a:	bf00      	nop
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d0fc      	beq.n	800c44c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr
 800c460:	24000008 	.word	0x24000008
	...

0800c470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c470:	4b07      	ldr	r3, [pc, #28]	; (800c490 <pxCurrentTCBConst2>)
 800c472:	6819      	ldr	r1, [r3, #0]
 800c474:	6808      	ldr	r0, [r1, #0]
 800c476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47a:	f380 8809 	msr	PSP, r0
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f04f 0000 	mov.w	r0, #0
 800c486:	f380 8811 	msr	BASEPRI, r0
 800c48a:	4770      	bx	lr
 800c48c:	f3af 8000 	nop.w

0800c490 <pxCurrentTCBConst2>:
 800c490:	24000030 	.word	0x24000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop

0800c498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c498:	4808      	ldr	r0, [pc, #32]	; (800c4bc <prvPortStartFirstTask+0x24>)
 800c49a:	6800      	ldr	r0, [r0, #0]
 800c49c:	6800      	ldr	r0, [r0, #0]
 800c49e:	f380 8808 	msr	MSP, r0
 800c4a2:	f04f 0000 	mov.w	r0, #0
 800c4a6:	f380 8814 	msr	CONTROL, r0
 800c4aa:	b662      	cpsie	i
 800c4ac:	b661      	cpsie	f
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	df00      	svc	0
 800c4b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4ba:	bf00      	nop
 800c4bc:	e000ed08 	.word	0xe000ed08

0800c4c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4c6:	4b46      	ldr	r3, [pc, #280]	; (800c5e0 <xPortStartScheduler+0x120>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a46      	ldr	r2, [pc, #280]	; (800c5e4 <xPortStartScheduler+0x124>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d10a      	bne.n	800c4e6 <xPortStartScheduler+0x26>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	613b      	str	r3, [r7, #16]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4e6:	4b3e      	ldr	r3, [pc, #248]	; (800c5e0 <xPortStartScheduler+0x120>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a3f      	ldr	r2, [pc, #252]	; (800c5e8 <xPortStartScheduler+0x128>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d10a      	bne.n	800c506 <xPortStartScheduler+0x46>
	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	60fb      	str	r3, [r7, #12]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c506:	4b39      	ldr	r3, [pc, #228]	; (800c5ec <xPortStartScheduler+0x12c>)
 800c508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	22ff      	movs	r2, #255	; 0xff
 800c516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	b2db      	uxtb	r3, r3
 800c524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c528:	b2da      	uxtb	r2, r3
 800c52a:	4b31      	ldr	r3, [pc, #196]	; (800c5f0 <xPortStartScheduler+0x130>)
 800c52c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c52e:	4b31      	ldr	r3, [pc, #196]	; (800c5f4 <xPortStartScheduler+0x134>)
 800c530:	2207      	movs	r2, #7
 800c532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c534:	e009      	b.n	800c54a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c536:	4b2f      	ldr	r3, [pc, #188]	; (800c5f4 <xPortStartScheduler+0x134>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	3b01      	subs	r3, #1
 800c53c:	4a2d      	ldr	r2, [pc, #180]	; (800c5f4 <xPortStartScheduler+0x134>)
 800c53e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	b2db      	uxtb	r3, r3
 800c544:	005b      	lsls	r3, r3, #1
 800c546:	b2db      	uxtb	r3, r3
 800c548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c54a:	78fb      	ldrb	r3, [r7, #3]
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c552:	2b80      	cmp	r3, #128	; 0x80
 800c554:	d0ef      	beq.n	800c536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c556:	4b27      	ldr	r3, [pc, #156]	; (800c5f4 <xPortStartScheduler+0x134>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f1c3 0307 	rsb	r3, r3, #7
 800c55e:	2b04      	cmp	r3, #4
 800c560:	d00a      	beq.n	800c578 <xPortStartScheduler+0xb8>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	60bb      	str	r3, [r7, #8]
}
 800c574:	bf00      	nop
 800c576:	e7fe      	b.n	800c576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c578:	4b1e      	ldr	r3, [pc, #120]	; (800c5f4 <xPortStartScheduler+0x134>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	021b      	lsls	r3, r3, #8
 800c57e:	4a1d      	ldr	r2, [pc, #116]	; (800c5f4 <xPortStartScheduler+0x134>)
 800c580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c582:	4b1c      	ldr	r3, [pc, #112]	; (800c5f4 <xPortStartScheduler+0x134>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c58a:	4a1a      	ldr	r2, [pc, #104]	; (800c5f4 <xPortStartScheduler+0x134>)
 800c58c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	b2da      	uxtb	r2, r3
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c596:	4b18      	ldr	r3, [pc, #96]	; (800c5f8 <xPortStartScheduler+0x138>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a17      	ldr	r2, [pc, #92]	; (800c5f8 <xPortStartScheduler+0x138>)
 800c59c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5a2:	4b15      	ldr	r3, [pc, #84]	; (800c5f8 <xPortStartScheduler+0x138>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a14      	ldr	r2, [pc, #80]	; (800c5f8 <xPortStartScheduler+0x138>)
 800c5a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c5ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5ae:	f000 f8dd 	bl	800c76c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5b2:	4b12      	ldr	r3, [pc, #72]	; (800c5fc <xPortStartScheduler+0x13c>)
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5b8:	f000 f8fc 	bl	800c7b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5bc:	4b10      	ldr	r3, [pc, #64]	; (800c600 <xPortStartScheduler+0x140>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a0f      	ldr	r2, [pc, #60]	; (800c600 <xPortStartScheduler+0x140>)
 800c5c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5c8:	f7ff ff66 	bl	800c498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5cc:	f7ff fa8c 	bl	800bae8 <vTaskSwitchContext>
	prvTaskExitError();
 800c5d0:	f7ff ff1c 	bl	800c40c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3718      	adds	r7, #24
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	e000ed00 	.word	0xe000ed00
 800c5e4:	410fc271 	.word	0x410fc271
 800c5e8:	410fc270 	.word	0x410fc270
 800c5ec:	e000e400 	.word	0xe000e400
 800c5f0:	2400015c 	.word	0x2400015c
 800c5f4:	24000160 	.word	0x24000160
 800c5f8:	e000ed20 	.word	0xe000ed20
 800c5fc:	24000008 	.word	0x24000008
 800c600:	e000ef34 	.word	0xe000ef34

0800c604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
	__asm volatile
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	607b      	str	r3, [r7, #4]
}
 800c61c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c61e:	4b0f      	ldr	r3, [pc, #60]	; (800c65c <vPortEnterCritical+0x58>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3301      	adds	r3, #1
 800c624:	4a0d      	ldr	r2, [pc, #52]	; (800c65c <vPortEnterCritical+0x58>)
 800c626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c628:	4b0c      	ldr	r3, [pc, #48]	; (800c65c <vPortEnterCritical+0x58>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d10f      	bne.n	800c650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c630:	4b0b      	ldr	r3, [pc, #44]	; (800c660 <vPortEnterCritical+0x5c>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	b2db      	uxtb	r3, r3
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00a      	beq.n	800c650 <vPortEnterCritical+0x4c>
	__asm volatile
 800c63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	603b      	str	r3, [r7, #0]
}
 800c64c:	bf00      	nop
 800c64e:	e7fe      	b.n	800c64e <vPortEnterCritical+0x4a>
	}
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	24000008 	.word	0x24000008
 800c660:	e000ed04 	.word	0xe000ed04

0800c664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c66a:	4b12      	ldr	r3, [pc, #72]	; (800c6b4 <vPortExitCritical+0x50>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10a      	bne.n	800c688 <vPortExitCritical+0x24>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	607b      	str	r3, [r7, #4]
}
 800c684:	bf00      	nop
 800c686:	e7fe      	b.n	800c686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c688:	4b0a      	ldr	r3, [pc, #40]	; (800c6b4 <vPortExitCritical+0x50>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	3b01      	subs	r3, #1
 800c68e:	4a09      	ldr	r2, [pc, #36]	; (800c6b4 <vPortExitCritical+0x50>)
 800c690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c692:	4b08      	ldr	r3, [pc, #32]	; (800c6b4 <vPortExitCritical+0x50>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d105      	bne.n	800c6a6 <vPortExitCritical+0x42>
 800c69a:	2300      	movs	r3, #0
 800c69c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	f383 8811 	msr	BASEPRI, r3
}
 800c6a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6a6:	bf00      	nop
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	24000008 	.word	0x24000008
	...

0800c6c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6c0:	f3ef 8009 	mrs	r0, PSP
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	4b15      	ldr	r3, [pc, #84]	; (800c720 <pxCurrentTCBConst>)
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	f01e 0f10 	tst.w	lr, #16
 800c6d0:	bf08      	it	eq
 800c6d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6da:	6010      	str	r0, [r2, #0]
 800c6dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6e4:	f380 8811 	msr	BASEPRI, r0
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f7ff f9fa 	bl	800bae8 <vTaskSwitchContext>
 800c6f4:	f04f 0000 	mov.w	r0, #0
 800c6f8:	f380 8811 	msr	BASEPRI, r0
 800c6fc:	bc09      	pop	{r0, r3}
 800c6fe:	6819      	ldr	r1, [r3, #0]
 800c700:	6808      	ldr	r0, [r1, #0]
 800c702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c706:	f01e 0f10 	tst.w	lr, #16
 800c70a:	bf08      	it	eq
 800c70c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c710:	f380 8809 	msr	PSP, r0
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	f3af 8000 	nop.w

0800c720 <pxCurrentTCBConst>:
 800c720:	24000030 	.word	0x24000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop

0800c728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	607b      	str	r3, [r7, #4]
}
 800c740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c742:	f7ff f919 	bl	800b978 <xTaskIncrementTick>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d003      	beq.n	800c754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c74c:	4b06      	ldr	r3, [pc, #24]	; (800c768 <SysTick_Handler+0x40>)
 800c74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c752:	601a      	str	r2, [r3, #0]
 800c754:	2300      	movs	r3, #0
 800c756:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	f383 8811 	msr	BASEPRI, r3
}
 800c75e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	e000ed04 	.word	0xe000ed04

0800c76c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c76c:	b480      	push	{r7}
 800c76e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c770:	4b0b      	ldr	r3, [pc, #44]	; (800c7a0 <vPortSetupTimerInterrupt+0x34>)
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c776:	4b0b      	ldr	r3, [pc, #44]	; (800c7a4 <vPortSetupTimerInterrupt+0x38>)
 800c778:	2200      	movs	r2, #0
 800c77a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c77c:	4b0a      	ldr	r3, [pc, #40]	; (800c7a8 <vPortSetupTimerInterrupt+0x3c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a0a      	ldr	r2, [pc, #40]	; (800c7ac <vPortSetupTimerInterrupt+0x40>)
 800c782:	fba2 2303 	umull	r2, r3, r2, r3
 800c786:	099b      	lsrs	r3, r3, #6
 800c788:	4a09      	ldr	r2, [pc, #36]	; (800c7b0 <vPortSetupTimerInterrupt+0x44>)
 800c78a:	3b01      	subs	r3, #1
 800c78c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c78e:	4b04      	ldr	r3, [pc, #16]	; (800c7a0 <vPortSetupTimerInterrupt+0x34>)
 800c790:	2207      	movs	r2, #7
 800c792:	601a      	str	r2, [r3, #0]
}
 800c794:	bf00      	nop
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	e000e010 	.word	0xe000e010
 800c7a4:	e000e018 	.word	0xe000e018
 800c7a8:	2400000c 	.word	0x2400000c
 800c7ac:	10624dd3 	.word	0x10624dd3
 800c7b0:	e000e014 	.word	0xe000e014

0800c7b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7c4 <vPortEnableVFP+0x10>
 800c7b8:	6801      	ldr	r1, [r0, #0]
 800c7ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7be:	6001      	str	r1, [r0, #0]
 800c7c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7c2:	bf00      	nop
 800c7c4:	e000ed88 	.word	0xe000ed88

0800c7c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7ce:	f3ef 8305 	mrs	r3, IPSR
 800c7d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2b0f      	cmp	r3, #15
 800c7d8:	d914      	bls.n	800c804 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7da:	4a17      	ldr	r2, [pc, #92]	; (800c838 <vPortValidateInterruptPriority+0x70>)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	4413      	add	r3, r2
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7e4:	4b15      	ldr	r3, [pc, #84]	; (800c83c <vPortValidateInterruptPriority+0x74>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	7afa      	ldrb	r2, [r7, #11]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d20a      	bcs.n	800c804 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	607b      	str	r3, [r7, #4]
}
 800c800:	bf00      	nop
 800c802:	e7fe      	b.n	800c802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c804:	4b0e      	ldr	r3, [pc, #56]	; (800c840 <vPortValidateInterruptPriority+0x78>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c80c:	4b0d      	ldr	r3, [pc, #52]	; (800c844 <vPortValidateInterruptPriority+0x7c>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	429a      	cmp	r2, r3
 800c812:	d90a      	bls.n	800c82a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c818:	f383 8811 	msr	BASEPRI, r3
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	603b      	str	r3, [r7, #0]
}
 800c826:	bf00      	nop
 800c828:	e7fe      	b.n	800c828 <vPortValidateInterruptPriority+0x60>
	}
 800c82a:	bf00      	nop
 800c82c:	3714      	adds	r7, #20
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	e000e3f0 	.word	0xe000e3f0
 800c83c:	2400015c 	.word	0x2400015c
 800c840:	e000ed0c 	.word	0xe000ed0c
 800c844:	24000160 	.word	0x24000160

0800c848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08a      	sub	sp, #40	; 0x28
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c850:	2300      	movs	r3, #0
 800c852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c854:	f7fe ffe6 	bl	800b824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c858:	4b5b      	ldr	r3, [pc, #364]	; (800c9c8 <pvPortMalloc+0x180>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d101      	bne.n	800c864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c860:	f000 f920 	bl	800caa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c864:	4b59      	ldr	r3, [pc, #356]	; (800c9cc <pvPortMalloc+0x184>)
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4013      	ands	r3, r2
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f040 8093 	bne.w	800c998 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d01d      	beq.n	800c8b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c878:	2208      	movs	r2, #8
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4413      	add	r3, r2
 800c87e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f003 0307 	and.w	r3, r3, #7
 800c886:	2b00      	cmp	r3, #0
 800c888:	d014      	beq.n	800c8b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f023 0307 	bic.w	r3, r3, #7
 800c890:	3308      	adds	r3, #8
 800c892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f003 0307 	and.w	r3, r3, #7
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00a      	beq.n	800c8b4 <pvPortMalloc+0x6c>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	617b      	str	r3, [r7, #20]
}
 800c8b0:	bf00      	nop
 800c8b2:	e7fe      	b.n	800c8b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d06e      	beq.n	800c998 <pvPortMalloc+0x150>
 800c8ba:	4b45      	ldr	r3, [pc, #276]	; (800c9d0 <pvPortMalloc+0x188>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d869      	bhi.n	800c998 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8c4:	4b43      	ldr	r3, [pc, #268]	; (800c9d4 <pvPortMalloc+0x18c>)
 800c8c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8c8:	4b42      	ldr	r3, [pc, #264]	; (800c9d4 <pvPortMalloc+0x18c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ce:	e004      	b.n	800c8da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d903      	bls.n	800c8ec <pvPortMalloc+0xa4>
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1f1      	bne.n	800c8d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8ec:	4b36      	ldr	r3, [pc, #216]	; (800c9c8 <pvPortMalloc+0x180>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d050      	beq.n	800c998 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8f6:	6a3b      	ldr	r3, [r7, #32]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2208      	movs	r2, #8
 800c8fc:	4413      	add	r3, r2
 800c8fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	1ad2      	subs	r2, r2, r3
 800c910:	2308      	movs	r3, #8
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	429a      	cmp	r2, r3
 800c916:	d91f      	bls.n	800c958 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4413      	add	r3, r2
 800c91e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	f003 0307 	and.w	r3, r3, #7
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00a      	beq.n	800c940 <pvPortMalloc+0xf8>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	613b      	str	r3, [r7, #16]
}
 800c93c:	bf00      	nop
 800c93e:	e7fe      	b.n	800c93e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	685a      	ldr	r2, [r3, #4]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	1ad2      	subs	r2, r2, r3
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c952:	69b8      	ldr	r0, [r7, #24]
 800c954:	f000 f908 	bl	800cb68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c958:	4b1d      	ldr	r3, [pc, #116]	; (800c9d0 <pvPortMalloc+0x188>)
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	1ad3      	subs	r3, r2, r3
 800c962:	4a1b      	ldr	r2, [pc, #108]	; (800c9d0 <pvPortMalloc+0x188>)
 800c964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c966:	4b1a      	ldr	r3, [pc, #104]	; (800c9d0 <pvPortMalloc+0x188>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b1b      	ldr	r3, [pc, #108]	; (800c9d8 <pvPortMalloc+0x190>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d203      	bcs.n	800c97a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c972:	4b17      	ldr	r3, [pc, #92]	; (800c9d0 <pvPortMalloc+0x188>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a18      	ldr	r2, [pc, #96]	; (800c9d8 <pvPortMalloc+0x190>)
 800c978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	4b13      	ldr	r3, [pc, #76]	; (800c9cc <pvPortMalloc+0x184>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	431a      	orrs	r2, r3
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98a:	2200      	movs	r2, #0
 800c98c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c98e:	4b13      	ldr	r3, [pc, #76]	; (800c9dc <pvPortMalloc+0x194>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	3301      	adds	r3, #1
 800c994:	4a11      	ldr	r2, [pc, #68]	; (800c9dc <pvPortMalloc+0x194>)
 800c996:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c998:	f7fe ff52 	bl	800b840 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	f003 0307 	and.w	r3, r3, #7
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00a      	beq.n	800c9bc <pvPortMalloc+0x174>
	__asm volatile
 800c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	60fb      	str	r3, [r7, #12]
}
 800c9b8:	bf00      	nop
 800c9ba:	e7fe      	b.n	800c9ba <pvPortMalloc+0x172>
	return pvReturn;
 800c9bc:	69fb      	ldr	r3, [r7, #28]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3728      	adds	r7, #40	; 0x28
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	24003d6c 	.word	0x24003d6c
 800c9cc:	24003d80 	.word	0x24003d80
 800c9d0:	24003d70 	.word	0x24003d70
 800c9d4:	24003d64 	.word	0x24003d64
 800c9d8:	24003d74 	.word	0x24003d74
 800c9dc:	24003d78 	.word	0x24003d78

0800c9e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d04d      	beq.n	800ca8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9f2:	2308      	movs	r3, #8
 800c9f4:	425b      	negs	r3, r3
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	685a      	ldr	r2, [r3, #4]
 800ca04:	4b24      	ldr	r3, [pc, #144]	; (800ca98 <vPortFree+0xb8>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4013      	ands	r3, r2
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d10a      	bne.n	800ca24 <vPortFree+0x44>
	__asm volatile
 800ca0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	60fb      	str	r3, [r7, #12]
}
 800ca20:	bf00      	nop
 800ca22:	e7fe      	b.n	800ca22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00a      	beq.n	800ca42 <vPortFree+0x62>
	__asm volatile
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	f383 8811 	msr	BASEPRI, r3
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	60bb      	str	r3, [r7, #8]
}
 800ca3e:	bf00      	nop
 800ca40:	e7fe      	b.n	800ca40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	685a      	ldr	r2, [r3, #4]
 800ca46:	4b14      	ldr	r3, [pc, #80]	; (800ca98 <vPortFree+0xb8>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d01e      	beq.n	800ca8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d11a      	bne.n	800ca8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	685a      	ldr	r2, [r3, #4]
 800ca5c:	4b0e      	ldr	r3, [pc, #56]	; (800ca98 <vPortFree+0xb8>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	43db      	mvns	r3, r3
 800ca62:	401a      	ands	r2, r3
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca68:	f7fe fedc 	bl	800b824 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	4b0a      	ldr	r3, [pc, #40]	; (800ca9c <vPortFree+0xbc>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4413      	add	r3, r2
 800ca76:	4a09      	ldr	r2, [pc, #36]	; (800ca9c <vPortFree+0xbc>)
 800ca78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca7a:	6938      	ldr	r0, [r7, #16]
 800ca7c:	f000 f874 	bl	800cb68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca80:	4b07      	ldr	r3, [pc, #28]	; (800caa0 <vPortFree+0xc0>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	3301      	adds	r3, #1
 800ca86:	4a06      	ldr	r2, [pc, #24]	; (800caa0 <vPortFree+0xc0>)
 800ca88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca8a:	f7fe fed9 	bl	800b840 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca8e:	bf00      	nop
 800ca90:	3718      	adds	r7, #24
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	24003d80 	.word	0x24003d80
 800ca9c:	24003d70 	.word	0x24003d70
 800caa0:	24003d7c 	.word	0x24003d7c

0800caa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800caaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800caae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cab0:	4b27      	ldr	r3, [pc, #156]	; (800cb50 <prvHeapInit+0xac>)
 800cab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f003 0307 	and.w	r3, r3, #7
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00c      	beq.n	800cad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	3307      	adds	r3, #7
 800cac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f023 0307 	bic.w	r3, r3, #7
 800caca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	4a1f      	ldr	r2, [pc, #124]	; (800cb50 <prvHeapInit+0xac>)
 800cad4:	4413      	add	r3, r2
 800cad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cadc:	4a1d      	ldr	r2, [pc, #116]	; (800cb54 <prvHeapInit+0xb0>)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cae2:	4b1c      	ldr	r3, [pc, #112]	; (800cb54 <prvHeapInit+0xb0>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	4413      	add	r3, r2
 800caee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800caf0:	2208      	movs	r2, #8
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	1a9b      	subs	r3, r3, r2
 800caf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f023 0307 	bic.w	r3, r3, #7
 800cafe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	4a15      	ldr	r2, [pc, #84]	; (800cb58 <prvHeapInit+0xb4>)
 800cb04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb06:	4b14      	ldr	r3, [pc, #80]	; (800cb58 <prvHeapInit+0xb4>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb0e:	4b12      	ldr	r3, [pc, #72]	; (800cb58 <prvHeapInit+0xb4>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	1ad2      	subs	r2, r2, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb24:	4b0c      	ldr	r3, [pc, #48]	; (800cb58 <prvHeapInit+0xb4>)
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	4a0a      	ldr	r2, [pc, #40]	; (800cb5c <prvHeapInit+0xb8>)
 800cb32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	4a09      	ldr	r2, [pc, #36]	; (800cb60 <prvHeapInit+0xbc>)
 800cb3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb3c:	4b09      	ldr	r3, [pc, #36]	; (800cb64 <prvHeapInit+0xc0>)
 800cb3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb42:	601a      	str	r2, [r3, #0]
}
 800cb44:	bf00      	nop
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	24000164 	.word	0x24000164
 800cb54:	24003d64 	.word	0x24003d64
 800cb58:	24003d6c 	.word	0x24003d6c
 800cb5c:	24003d74 	.word	0x24003d74
 800cb60:	24003d70 	.word	0x24003d70
 800cb64:	24003d80 	.word	0x24003d80

0800cb68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb70:	4b28      	ldr	r3, [pc, #160]	; (800cc14 <prvInsertBlockIntoFreeList+0xac>)
 800cb72:	60fb      	str	r3, [r7, #12]
 800cb74:	e002      	b.n	800cb7c <prvInsertBlockIntoFreeList+0x14>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d8f7      	bhi.n	800cb76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	68ba      	ldr	r2, [r7, #8]
 800cb90:	4413      	add	r3, r2
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d108      	bne.n	800cbaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	441a      	add	r2, r3
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	441a      	add	r2, r3
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d118      	bne.n	800cbf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	4b15      	ldr	r3, [pc, #84]	; (800cc18 <prvInsertBlockIntoFreeList+0xb0>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d00d      	beq.n	800cbe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	685a      	ldr	r2, [r3, #4]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	441a      	add	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	601a      	str	r2, [r3, #0]
 800cbe4:	e008      	b.n	800cbf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbe6:	4b0c      	ldr	r3, [pc, #48]	; (800cc18 <prvInsertBlockIntoFreeList+0xb0>)
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	e003      	b.n	800cbf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d002      	beq.n	800cc06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc06:	bf00      	nop
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	24003d64 	.word	0x24003d64
 800cc18:	24003d6c 	.word	0x24003d6c

0800cc1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800cc22:	4b21      	ldr	r3, [pc, #132]	; (800cca8 <MX_DMA_Init+0x8c>)
 800cc24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cc28:	4a1f      	ldr	r2, [pc, #124]	; (800cca8 <MX_DMA_Init+0x8c>)
 800cc2a:	f043 0301 	orr.w	r3, r3, #1
 800cc2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800cc32:	4b1d      	ldr	r3, [pc, #116]	; (800cca8 <MX_DMA_Init+0x8c>)
 800cc34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cc38:	f003 0301 	and.w	r3, r3, #1
 800cc3c:	607b      	str	r3, [r7, #4]
 800cc3e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800cc40:	2200      	movs	r2, #0
 800cc42:	2105      	movs	r1, #5
 800cc44:	200b      	movs	r0, #11
 800cc46:	f7f3 fde7 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800cc4a:	200b      	movs	r0, #11
 800cc4c:	f7f3 fdfe 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800cc50:	2200      	movs	r2, #0
 800cc52:	2105      	movs	r1, #5
 800cc54:	200c      	movs	r0, #12
 800cc56:	f7f3 fddf 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800cc5a:	200c      	movs	r0, #12
 800cc5c:	f7f3 fdf6 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800cc60:	2200      	movs	r2, #0
 800cc62:	2105      	movs	r1, #5
 800cc64:	200d      	movs	r0, #13
 800cc66:	f7f3 fdd7 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800cc6a:	200d      	movs	r0, #13
 800cc6c:	f7f3 fdee 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800cc70:	2200      	movs	r2, #0
 800cc72:	2105      	movs	r1, #5
 800cc74:	200e      	movs	r0, #14
 800cc76:	f7f3 fdcf 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800cc7a:	200e      	movs	r0, #14
 800cc7c:	f7f3 fde6 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800cc80:	2200      	movs	r2, #0
 800cc82:	2105      	movs	r1, #5
 800cc84:	200f      	movs	r0, #15
 800cc86:	f7f3 fdc7 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800cc8a:	200f      	movs	r0, #15
 800cc8c:	f7f3 fdde 	bl	800084c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800cc90:	2200      	movs	r2, #0
 800cc92:	2105      	movs	r1, #5
 800cc94:	2010      	movs	r0, #16
 800cc96:	f7f3 fdbf 	bl	8000818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800cc9a:	2010      	movs	r0, #16
 800cc9c:	f7f3 fdd6 	bl	800084c <HAL_NVIC_EnableIRQ>

}
 800cca0:	bf00      	nop
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	58024400 	.word	0x58024400

0800ccac <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	4a07      	ldr	r2, [pc, #28]	; (800ccd8 <vApplicationGetIdleTaskMemory+0x2c>)
 800ccbc:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	4a06      	ldr	r2, [pc, #24]	; (800ccdc <vApplicationGetIdleTaskMemory+0x30>)
 800ccc2:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2280      	movs	r2, #128	; 0x80
 800ccc8:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800ccca:	bf00      	nop
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
 800ccd6:	bf00      	nop
 800ccd8:	24003d84 	.word	0x24003d84
 800ccdc:	24003dd8 	.word	0x24003dd8

0800cce0 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 800cce0:	b5b0      	push	{r4, r5, r7, lr}
 800cce2:	b0b6      	sub	sp, #216	; 0xd8
 800cce4:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of WT931_DONE_sem */
	osSemaphoreStaticDef(WT931_DONE_sem, &WT931_DONE_semControlBlock);
 800cce6:	2300      	movs	r3, #0
 800cce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ccec:	4b5b      	ldr	r3, [pc, #364]	; (800ce5c <MX_FREERTOS_Init+0x17c>)
 800ccee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	WT931_DONE_semHandle = osSemaphoreCreate(osSemaphore(WT931_DONE_sem), 1);
 800ccf2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7fd fc82 	bl	800a602 <osSemaphoreCreate>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	4a57      	ldr	r2, [pc, #348]	; (800ce60 <MX_FREERTOS_Init+0x180>)
 800cd02:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39_Done_sem */
	osSemaphoreStaticDef(GY39_Done_sem, &GY39_Done_semControlBlock);
 800cd04:	2300      	movs	r3, #0
 800cd06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cd0a:	4b56      	ldr	r3, [pc, #344]	; (800ce64 <MX_FREERTOS_Init+0x184>)
 800cd0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	GY39_Done_semHandle = osSemaphoreCreate(osSemaphore(GY39_Done_sem), 1);
 800cd10:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800cd14:	2101      	movs	r1, #1
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fd fc73 	bl	800a602 <osSemaphoreCreate>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	4a52      	ldr	r2, [pc, #328]	; (800ce68 <MX_FREERTOS_Init+0x188>)
 800cd20:	6013      	str	r3, [r2, #0]

	/* definition and creation of CMD_DONE_sem */
	osSemaphoreStaticDef(CMD_DONE_sem, &CMD_DONE_semControlBlock);
 800cd22:	2300      	movs	r3, #0
 800cd24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cd28:	4b50      	ldr	r3, [pc, #320]	; (800ce6c <MX_FREERTOS_Init+0x18c>)
 800cd2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	CMD_DONE_semHandle = osSemaphoreCreate(osSemaphore(CMD_DONE_sem), 1);
 800cd2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800cd32:	2101      	movs	r1, #1
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fd fc64 	bl	800a602 <osSemaphoreCreate>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	4a4c      	ldr	r2, [pc, #304]	; (800ce70 <MX_FREERTOS_Init+0x190>)
 800cd3e:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of WT931_Queue */
	osMessageQStaticDef(WT931_Queue, 2, IMUData_t, WT931_QueueBuffer,
 800cd40:	4b4c      	ldr	r3, [pc, #304]	; (800ce74 <MX_FREERTOS_Init+0x194>)
 800cd42:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800cd46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&WT931_QueueControlBlock);
	WT931_QueueHandle = osMessageCreate(osMessageQ(WT931_Queue), NULL);
 800cd4c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800cd50:	2100      	movs	r1, #0
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fd fc87 	bl	800a666 <osMessageCreate>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	4a47      	ldr	r2, [pc, #284]	; (800ce78 <MX_FREERTOS_Init+0x198>)
 800cd5c:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39_Queue */
	osMessageQStaticDef(GY39_Queue, 2, CarbinData_t, GY39_QueueBuffer,
 800cd5e:	4b47      	ldr	r3, [pc, #284]	; (800ce7c <MX_FREERTOS_Init+0x19c>)
 800cd60:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800cd64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&GY39_QueueControlBlock);
	GY39_QueueHandle = osMessageCreate(osMessageQ(GY39_Queue), NULL);
 800cd6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800cd6e:	2100      	movs	r1, #0
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fd fc78 	bl	800a666 <osMessageCreate>
 800cd76:	4603      	mov	r3, r0
 800cd78:	4a41      	ldr	r2, [pc, #260]	; (800ce80 <MX_FREERTOS_Init+0x1a0>)
 800cd7a:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osMessageQStaticDef(Attitude_Queue, 2, IMUData_t, Attitude_QueueBuffer,
 800cd7c:	4b41      	ldr	r3, [pc, #260]	; (800ce84 <MX_FREERTOS_Init+0x1a4>)
 800cd7e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800cd82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&Attitude_QueueControlBlock);
	Attitude_QueueHandle = osMessageCreate(osMessageQ(Attitude_Queue), NULL);
 800cd88:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fd fc69 	bl	800a666 <osMessageCreate>
 800cd94:	4603      	mov	r3, r0
 800cd96:	4a3c      	ldr	r2, [pc, #240]	; (800ce88 <MX_FREERTOS_Init+0x1a8>)
 800cd98:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Thread_Idle */
	osThreadStaticDef(Thread_Idle, Thread_IdleEntry, osPriorityLow, 0, 512,
 800cd9a:	4b3c      	ldr	r3, [pc, #240]	; (800ce8c <MX_FREERTOS_Init+0x1ac>)
 800cd9c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800cda0:	461d      	mov	r5, r3
 800cda2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cda4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cda6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cdaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			Thread_IdleBuffer, &Thread_IdleControlBlock);
	Thread_IdleHandle = osThreadCreate(osThread(Thread_Idle), NULL);
 800cdae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fd fbc4 	bl	800a542 <osThreadCreate>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	4a34      	ldr	r2, [pc, #208]	; (800ce90 <MX_FREERTOS_Init+0x1b0>)
 800cdbe:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_GY39 */
//	osThreadStaticDef(Thread_GY39, Thread_GY39Entry, osPriorityNormal, 0, 512,
	osThreadStaticDef(Thread_GY39, Thread_GY39Entry, osPriorityBelowNormal, 0,
 800cdc0:	4b34      	ldr	r3, [pc, #208]	; (800ce94 <MX_FREERTOS_Init+0x1b4>)
 800cdc2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800cdc6:	461d      	mov	r5, r3
 800cdc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cdd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_GY39Buffer, &Thread_GY39ControlBlock);
	Thread_GY39Handle = osThreadCreate(osThread(Thread_GY39), NULL);
 800cdd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cdd8:	2100      	movs	r1, #0
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fd fbb1 	bl	800a542 <osThreadCreate>
 800cde0:	4603      	mov	r3, r0
 800cde2:	4a2d      	ldr	r2, [pc, #180]	; (800ce98 <MX_FREERTOS_Init+0x1b8>)
 800cde4:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_WT931 */
//	osThreadStaticDef(Thread_WT931, Thread_WT931Entry, osPriorityNormal, 0, 512,
	osThreadStaticDef(Thread_WT931, Thread_WT931Entry, osPriorityBelowNormal, 0,
 800cde6:	4b2d      	ldr	r3, [pc, #180]	; (800ce9c <MX_FREERTOS_Init+0x1bc>)
 800cde8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800cdec:	461d      	mov	r5, r3
 800cdee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cdf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_WT931Buffer, &Thread_WT931ControlBlock);
	Thread_WT931Handle = osThreadCreate(osThread(Thread_WT931), NULL);
 800cdfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cdfe:	2100      	movs	r1, #0
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fd fb9e 	bl	800a542 <osThreadCreate>
 800ce06:	4603      	mov	r3, r0
 800ce08:	4a25      	ldr	r2, [pc, #148]	; (800cea0 <MX_FREERTOS_Init+0x1c0>)
 800ce0a:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_Control */
	osThreadStaticDef(Thread_Control, Thread_ControlEntry, osPriorityNormal, 0,
 800ce0c:	4b25      	ldr	r3, [pc, #148]	; (800cea4 <MX_FREERTOS_Init+0x1c4>)
 800ce0e:	f107 0420 	add.w	r4, r7, #32
 800ce12:	461d      	mov	r5, r3
 800ce14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ce1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_ControlBuffer, &Thread_ControlControlBlock);
	Thread_ControlHandle = osThreadCreate(osThread(Thread_Control), NULL);
 800ce20:	f107 0320 	add.w	r3, r7, #32
 800ce24:	2100      	movs	r1, #0
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fd fb8b 	bl	800a542 <osThreadCreate>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	4a1e      	ldr	r2, [pc, #120]	; (800cea8 <MX_FREERTOS_Init+0x1c8>)
 800ce30:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_Sensor */
	osThreadStaticDef(Thread_Sensor, Thread_SensorEntry, osPriorityNormal, 0,
 800ce32:	4b1e      	ldr	r3, [pc, #120]	; (800ceac <MX_FREERTOS_Init+0x1cc>)
 800ce34:	1d3c      	adds	r4, r7, #4
 800ce36:	461d      	mov	r5, r3
 800ce38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ce40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_SensorBuffer, &Thread_SensorControlBlock);
	Thread_SensorHandle = osThreadCreate(osThread(Thread_Sensor), NULL);
 800ce44:	1d3b      	adds	r3, r7, #4
 800ce46:	2100      	movs	r1, #0
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7fd fb7a 	bl	800a542 <osThreadCreate>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	4a17      	ldr	r2, [pc, #92]	; (800ceb0 <MX_FREERTOS_Init+0x1d0>)
 800ce52:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 800ce54:	bf00      	nop
 800ce56:	37d8      	adds	r7, #216	; 0xd8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bdb0      	pop	{r4, r5, r7, pc}
 800ce5c:	2400518c 	.word	0x2400518c
 800ce60:	240040f8 	.word	0x240040f8
 800ce64:	240051d4 	.word	0x240051d4
 800ce68:	2400533c 	.word	0x2400533c
 800ce6c:	24005b94 	.word	0x24005b94
 800ce70:	240052a8 	.word	0x240052a8
 800ce74:	0800f7e8 	.word	0x0800f7e8
 800ce78:	24005100 	.word	0x24005100
 800ce7c:	0800f7f8 	.word	0x0800f7f8
 800ce80:	24005104 	.word	0x24005104
 800ce84:	0800f808 	.word	0x0800f808
 800ce88:	240052a4 	.word	0x240052a4
 800ce8c:	0800f818 	.word	0x0800f818
 800ce90:	24005c24 	.word	0x24005c24
 800ce94:	0800f834 	.word	0x0800f834
 800ce98:	24006428 	.word	0x24006428
 800ce9c:	0800f850 	.word	0x0800f850
 800cea0:	2400524c 	.word	0x2400524c
 800cea4:	0800f86c 	.word	0x0800f86c
 800cea8:	24006c2c 	.word	0x24006c2c
 800ceac:	0800f888 	.word	0x0800f888
 800ceb0:	240040fc 	.word	0x240040fc

0800ceb4 <Thread_IdleEntry>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_IdleEntry */
void Thread_IdleEntry(void const *argument)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Thread_IdleEntry */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800cebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cec0:	4803      	ldr	r0, [pc, #12]	; (800ced0 <Thread_IdleEntry+0x1c>)
 800cec2:	f7f6 fcf8 	bl	80038b6 <HAL_GPIO_TogglePin>
		osDelay(500);
 800cec6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ceca:	f7fd fb86 	bl	800a5da <osDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800cece:	e7f5      	b.n	800cebc <Thread_IdleEntry+0x8>
 800ced0:	58020800 	.word	0x58020800

0800ced4 <Thread_GY39Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_GY39Entry */
void Thread_GY39Entry(void const *argument)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b08c      	sub	sp, #48	; 0x30
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
	/* USER CODE BEGIN Thread_GY39Entry */
	uint8_t GY39_TxBuffer[TEMPER_UART_TXLen] =
 800cedc:	4b2c      	ldr	r3, [pc, #176]	; (800cf90 <Thread_GY39Entry+0xbc>)
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cee2:	2300      	movs	r3, #0
 800cee4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	{ 0 };
	uint8_t GY39_RxBuffer[TEMPER_UART_RXLen] =
 800cee8:	2300      	movs	r3, #0
 800ceea:	61fb      	str	r3, [r7, #28]
 800ceec:	f107 0320 	add.w	r3, r7, #32
 800cef0:	2200      	movs	r2, #0
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	605a      	str	r2, [r3, #4]
 800cef6:	f8c3 2007 	str.w	r2, [r3, #7]
	{ 0 };
	CarbinData_t gy39_data;

	InitGY39(GY39_TxBuffer);
 800cefa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fd f95f 	bl	800a1c2 <InitGY39>
	HAL_UART_Transmit_DMA(&TEMPER_UART, GY39_TxBuffer, sizeof(GY39_TxBuffer));
 800cf04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cf08:	2203      	movs	r2, #3
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4821      	ldr	r0, [pc, #132]	; (800cf94 <Thread_GY39Entry+0xc0>)
 800cf0e:	f7fa fbc5 	bl	800769c <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&TEMPER_UART, GY39_RxBuffer, sizeof(GY39_RxBuffer));
 800cf12:	f107 031c 	add.w	r3, r7, #28
 800cf16:	220f      	movs	r2, #15
 800cf18:	4619      	mov	r1, r3
 800cf1a:	481e      	ldr	r0, [pc, #120]	; (800cf94 <Thread_GY39Entry+0xc0>)
 800cf1c:	f7fa fc50 	bl	80077c0 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(GY39_Done_semHandle, 0) == pdTRUE)
 800cf20:	4b1d      	ldr	r3, [pc, #116]	; (800cf98 <Thread_GY39Entry+0xc4>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2100      	movs	r1, #0
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe f820 	bl	800af6c <xQueueSemaphoreTake>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d12a      	bne.n	800cf88 <Thread_GY39Entry+0xb4>
		{
			gy39_data = ReceiveGY39(GY39_RxBuffer);
 800cf32:	463b      	mov	r3, r7
 800cf34:	f107 021c 	add.w	r2, r7, #28
 800cf38:	4611      	mov	r1, r2
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fd f956 	bl	800a1ec <ReceiveGY39>
 800cf40:	f107 0314 	add.w	r3, r7, #20
 800cf44:	463a      	mov	r2, r7
 800cf46:	6810      	ldr	r0, [r2, #0]
 800cf48:	6851      	ldr	r1, [r2, #4]
 800cf4a:	c303      	stmia	r3!, {r0, r1}

//			printf("t:%d, %d, %d\r\n", gy39_data.CarbinBarometric,
//					gy39_data.CarbinHumidity, gy39_data.CarbinTemperature);
			xQueueSendToFront(GY39_QueueHandle, (void* )&gy39_data, 0);
 800cf4c:	4b13      	ldr	r3, [pc, #76]	; (800cf9c <Thread_GY39Entry+0xc8>)
 800cf4e:	6818      	ldr	r0, [r3, #0]
 800cf50:	f107 0114 	add.w	r1, r7, #20
 800cf54:	2301      	movs	r3, #1
 800cf56:	2200      	movs	r2, #0
 800cf58:	f7fd fd9c 	bl	800aa94 <xQueueGenericSend>

			memset(&GY39_RxBuffer, 0, sizeof(GY39_RxBuffer));
 800cf5c:	f107 031c 	add.w	r3, r7, #28
 800cf60:	220f      	movs	r2, #15
 800cf62:	2100      	movs	r1, #0
 800cf64:	4618      	mov	r0, r3
 800cf66:	f002 fc03 	bl	800f770 <memset>
			__HAL_UART_ENABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 800cf6a:	4b0a      	ldr	r3, [pc, #40]	; (800cf94 <Thread_GY39Entry+0xc0>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	4b08      	ldr	r3, [pc, #32]	; (800cf94 <Thread_GY39Entry+0xc0>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f042 0210 	orr.w	r2, r2, #16
 800cf78:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&TEMPER_UART, GY39_RxBuffer,
 800cf7a:	f107 031c 	add.w	r3, r7, #28
 800cf7e:	220f      	movs	r2, #15
 800cf80:	4619      	mov	r1, r3
 800cf82:	4804      	ldr	r0, [pc, #16]	; (800cf94 <Thread_GY39Entry+0xc0>)
 800cf84:	f7fa fc1c 	bl	80077c0 <HAL_UART_Receive_DMA>
					sizeof(GY39_RxBuffer));
		}

		osDelay(100);
 800cf88:	2064      	movs	r0, #100	; 0x64
 800cf8a:	f7fd fb26 	bl	800a5da <osDelay>
		if (xSemaphoreTake(GY39_Done_semHandle, 0) == pdTRUE)
 800cf8e:	e7c7      	b.n	800cf20 <Thread_GY39Entry+0x4c>
 800cf90:	0800f8a4 	.word	0x0800f8a4
 800cf94:	240070d4 	.word	0x240070d4
 800cf98:	2400533c 	.word	0x2400533c
 800cf9c:	24005104 	.word	0x24005104

0800cfa0 <Thread_WT931Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_WT931Entry */
void Thread_WT931Entry(void const *argument)
{
 800cfa0:	b5b0      	push	{r4, r5, r7, lr}
 800cfa2:	b09a      	sub	sp, #104	; 0x68
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	61f8      	str	r0, [r7, #28]
	/* USER CODE BEGIN Thread_WT931Entry */
	uint8_t WT931_RxBuffer[AXIS_UART_RXLen] =
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cfb0:	2228      	movs	r2, #40	; 0x28
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f002 fbdb 	bl	800f770 <memset>
	{ 0 };
	IMUData_t wt931_data;

	HAL_UART_Receive_DMA(&AXIS_UART, WT931_RxBuffer, sizeof(WT931_RxBuffer));
 800cfba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cfbe:	222c      	movs	r2, #44	; 0x2c
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	4824      	ldr	r0, [pc, #144]	; (800d054 <Thread_WT931Entry+0xb4>)
 800cfc4:	f7fa fbfc 	bl	80077c0 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(WT931_DONE_semHandle, 0) == pdTRUE)
 800cfc8:	4b23      	ldr	r3, [pc, #140]	; (800d058 <Thread_WT931Entry+0xb8>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2100      	movs	r1, #0
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fd ffcc 	bl	800af6c <xQueueSemaphoreTake>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d137      	bne.n	800d04a <Thread_WT931Entry+0xaa>
		{
			wt931_data = ReceiveWT931(WT931_RxBuffer);
 800cfda:	463b      	mov	r3, r7
 800cfdc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cfe0:	4611      	mov	r1, r2
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fd f95a 	bl	800a29c <ReceiveWT931>
 800cfe8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800cfec:	463d      	mov	r5, r7
 800cfee:	6828      	ldr	r0, [r5, #0]
 800cff0:	6869      	ldr	r1, [r5, #4]
 800cff2:	68aa      	ldr	r2, [r5, #8]
 800cff4:	68eb      	ldr	r3, [r5, #12]
 800cff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cff8:	6928      	ldr	r0, [r5, #16]
 800cffa:	6969      	ldr	r1, [r5, #20]
 800cffc:	c403      	stmia	r4!, {r0, r1}

//			printf("a:%d, %d, %d\r\n", wt931_data.EulerAngle[0],
//					wt931_data.EulerAngle[1], wt931_data.EulerAngle[2]);
			xQueueSendToFront(WT931_QueueHandle, (void* )&wt931_data, 0);
 800cffe:	4b17      	ldr	r3, [pc, #92]	; (800d05c <Thread_WT931Entry+0xbc>)
 800d000:	6818      	ldr	r0, [r3, #0]
 800d002:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d006:	2301      	movs	r3, #1
 800d008:	2200      	movs	r2, #0
 800d00a:	f7fd fd43 	bl	800aa94 <xQueueGenericSend>
			xQueueSendToFront(Attitude_QueueHandle, (void* )&wt931_data, 0);
 800d00e:	4b14      	ldr	r3, [pc, #80]	; (800d060 <Thread_WT931Entry+0xc0>)
 800d010:	6818      	ldr	r0, [r3, #0]
 800d012:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d016:	2301      	movs	r3, #1
 800d018:	2200      	movs	r2, #0
 800d01a:	f7fd fd3b 	bl	800aa94 <xQueueGenericSend>

			memset(&WT931_RxBuffer, 0, sizeof(WT931_RxBuffer));
 800d01e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d022:	222c      	movs	r2, #44	; 0x2c
 800d024:	2100      	movs	r1, #0
 800d026:	4618      	mov	r0, r3
 800d028:	f002 fba2 	bl	800f770 <memset>
			__HAL_UART_ENABLE_IT(&AXIS_UART, UART_IT_IDLE);
 800d02c:	4b09      	ldr	r3, [pc, #36]	; (800d054 <Thread_WT931Entry+0xb4>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	4b08      	ldr	r3, [pc, #32]	; (800d054 <Thread_WT931Entry+0xb4>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f042 0210 	orr.w	r2, r2, #16
 800d03a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&AXIS_UART, WT931_RxBuffer,
 800d03c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d040:	222c      	movs	r2, #44	; 0x2c
 800d042:	4619      	mov	r1, r3
 800d044:	4803      	ldr	r0, [pc, #12]	; (800d054 <Thread_WT931Entry+0xb4>)
 800d046:	f7fa fbbb 	bl	80077c0 <HAL_UART_Receive_DMA>
					sizeof(WT931_RxBuffer));
		}
		osDelay(10);
 800d04a:	200a      	movs	r0, #10
 800d04c:	f7fd fac5 	bl	800a5da <osDelay>
		if (xSemaphoreTake(WT931_DONE_semHandle, 0) == pdTRUE)
 800d050:	e7ba      	b.n	800cfc8 <Thread_WT931Entry+0x28>
 800d052:	bf00      	nop
 800d054:	2400726c 	.word	0x2400726c
 800d058:	240040f8 	.word	0x240040f8
 800d05c:	24005100 	.word	0x24005100
 800d060:	240052a4 	.word	0x240052a4

0800d064 <Thread_ControlEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_ControlEntry */
void Thread_ControlEntry(void const *argument)
{
 800d064:	b5b0      	push	{r4, r5, r7, lr}
 800d066:	b0ce      	sub	sp, #312	; 0x138
 800d068:	af06      	add	r7, sp, #24
 800d06a:	6278      	str	r0, [r7, #36]	; 0x24
	/* USER CODE BEGIN Thread_ControlEntry */
	uint8_t Command_RxBuffer[Master_UART_RXLen * 2] =
 800d06c:	4bad      	ldr	r3, [pc, #692]	; (800d324 <Thread_ControlEntry+0x2c0>)
 800d06e:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800d072:	461d      	mov	r5, r3
 800d074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d07a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d07c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d07e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	static uint8_t IS_FIRST_ORBIT = ROV_FALSE;

	struct Algorithm_PID self_stable_pid;
	struct Algorithm_PID orbit_pid;

	int32_t pid_cal = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	int32_t ss_cal = 0;
 800d08e:	2300      	movs	r3, #0
 800d090:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	int32_t origin_target;

	static vu8 relay_controller;
	static PwmVal_t pwm_controller;

	control_data.FrameHead = 0x25;
 800d094:	4ba4      	ldr	r3, [pc, #656]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d096:	2225      	movs	r2, #37	; 0x25
 800d098:	701a      	strb	r2, [r3, #0]
	control_data.StraightNum = 0x05DC;
 800d09a:	4ba3      	ldr	r3, [pc, #652]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d09c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0a0:	805a      	strh	r2, [r3, #2]
	control_data.RotateNum = 0x05DC;
 800d0a2:	4ba1      	ldr	r3, [pc, #644]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0a8:	809a      	strh	r2, [r3, #4]
	control_data.VerticalNum = 0x05DC;
 800d0aa:	4b9f      	ldr	r3, [pc, #636]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0b0:	80da      	strh	r2, [r3, #6]
	control_data.ConveyNum = 0x05DC;
 800d0b2:	4b9d      	ldr	r3, [pc, #628]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0b8:	819a      	strh	r2, [r3, #12]
	control_data.ArmNum[0] = 0x05DC;
 800d0ba:	4b9b      	ldr	r3, [pc, #620]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0c0:	81da      	strh	r2, [r3, #14]
	control_data.ArmNum[1] = 0x05DC;
 800d0c2:	4b99      	ldr	r3, [pc, #612]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0c8:	821a      	strh	r2, [r3, #16]
	control_data.ArmNum[2] = 0x05DC;
 800d0ca:	4b97      	ldr	r3, [pc, #604]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0d0:	825a      	strh	r2, [r3, #18]
	control_data.ArmNum[3] = 0x05DC;
 800d0d2:	4b95      	ldr	r3, [pc, #596]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0d8:	829a      	strh	r2, [r3, #20]
	control_data.ArmNum[4] = 0x05DC;
 800d0da:	4b93      	ldr	r3, [pc, #588]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0e0:	82da      	strh	r2, [r3, #22]
	control_data.ArmNum[5] = 0x05DC;
 800d0e2:	4b91      	ldr	r3, [pc, #580]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0e8:	831a      	strh	r2, [r3, #24]
	control_data.LightNum = 0x05DC;
 800d0ea:	4b8f      	ldr	r3, [pc, #572]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0f0:	811a      	strh	r2, [r3, #8]
	control_data.PanNum = 0x05DC;
 800d0f2:	4b8d      	ldr	r3, [pc, #564]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0f8:	815a      	strh	r2, [r3, #10]
	control_data.RestNum = 0x05DC;
 800d0fa:	4b8b      	ldr	r3, [pc, #556]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d0fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d100:	835a      	strh	r2, [r3, #26]
	control_data.FrameEnd = 0x21;
 800d102:	4b89      	ldr	r3, [pc, #548]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d104:	2221      	movs	r2, #33	; 0x21
 800d106:	779a      	strb	r2, [r3, #30]

	pwm_controller.ArmServo[0] = (vu32) 1500;
 800d108:	4b88      	ldr	r3, [pc, #544]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d10a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d10e:	625a      	str	r2, [r3, #36]	; 0x24
	pwm_controller.ArmServo[1] = (vu32) 1500;
 800d110:	4b86      	ldr	r3, [pc, #536]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d112:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d116:	629a      	str	r2, [r3, #40]	; 0x28
	pwm_controller.ArmServo[2] = (vu32) 1500;
 800d118:	4b84      	ldr	r3, [pc, #528]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d11a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d11e:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm_controller.ArmServo[3] = (vu32) 1500;
 800d120:	4b82      	ldr	r3, [pc, #520]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d122:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d126:	631a      	str	r2, [r3, #48]	; 0x30
	pwm_controller.ArmServo[4] = (vu32) 1500;
 800d128:	4b80      	ldr	r3, [pc, #512]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d12a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d12e:	635a      	str	r2, [r3, #52]	; 0x34
	pwm_controller.ArmServo[5] = (vu32) 1500;
 800d130:	4b7e      	ldr	r3, [pc, #504]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d132:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d136:	639a      	str	r2, [r3, #56]	; 0x38
	pwm_controller.ConveyServo = (vu32) 1500;
 800d138:	4b7c      	ldr	r3, [pc, #496]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d13a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d13e:	621a      	str	r2, [r3, #32]
	pwm_controller.HorizontalThruster[0] = (vu32) 1500;
 800d140:	4b7a      	ldr	r3, [pc, #488]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d142:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d146:	601a      	str	r2, [r3, #0]
	pwm_controller.HorizontalThruster[1] = (vu32) 1500;
 800d148:	4b78      	ldr	r3, [pc, #480]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d14a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d14e:	605a      	str	r2, [r3, #4]
	pwm_controller.HorizontalThruster[2] = (vu32) 1500;
 800d150:	4b76      	ldr	r3, [pc, #472]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d152:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d156:	609a      	str	r2, [r3, #8]
	pwm_controller.HorizontalThruster[3] = (vu32) 1500;
 800d158:	4b74      	ldr	r3, [pc, #464]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d15a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d15e:	60da      	str	r2, [r3, #12]
	pwm_controller.VerticalThruster[0] = (vu32) 1500;
 800d160:	4b72      	ldr	r3, [pc, #456]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d162:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d166:	611a      	str	r2, [r3, #16]
	pwm_controller.VerticalThruster[1] = (vu32) 1500;
 800d168:	4b70      	ldr	r3, [pc, #448]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d16a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d16e:	615a      	str	r2, [r3, #20]
	pwm_controller.LightServo = (vu32) 50;
 800d170:	4b6e      	ldr	r3, [pc, #440]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d172:	2232      	movs	r2, #50	; 0x32
 800d174:	619a      	str	r2, [r3, #24]
	pwm_controller.PanServo = (vu32) 1500;
 800d176:	4b6d      	ldr	r3, [pc, #436]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d178:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d17c:	61da      	str	r2, [r3, #28]
	pwm_controller.RestServo = (vu32) 1500;
 800d17e:	4b6b      	ldr	r3, [pc, #428]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d180:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d184:	63da      	str	r2, [r3, #60]	; 0x3c

//	__HAL_UART_ENABLE_IT(&Master_UART, UART_IT_IDLE);
//	HAL_UART_Receive_DMA(&Master_UART, Command_RxBuffer,
//			sizeof(Command_RxBuffer));

	initPID(&orbit_pid, PID_POSITION_MODE, 0.2);
 800d186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d18a:	ed9f 0a69 	vldr	s0, [pc, #420]	; 800d330 <Thread_ControlEntry+0x2cc>
 800d18e:	2100      	movs	r1, #0
 800d190:	4618      	mov	r0, r3
 800d192:	f7fc fae9 	bl	8009768 <initPID>
	initPID(&self_stable_pid, PID_ERROR_MODE, 21.84);
 800d196:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d19a:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800d334 <Thread_ControlEntry+0x2d0>
 800d19e:	2101      	movs	r1, #1
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fc fae1 	bl	8009768 <initPID>
	orbit_pid.Kp = -0.005;
 800d1a6:	4b64      	ldr	r3, [pc, #400]	; (800d338 <Thread_ControlEntry+0x2d4>)
 800d1a8:	663b      	str	r3, [r7, #96]	; 0x60
	orbit_pid.Ki = 0.05;
 800d1aa:	4b64      	ldr	r3, [pc, #400]	; (800d33c <Thread_ControlEntry+0x2d8>)
 800d1ac:	667b      	str	r3, [r7, #100]	; 0x64
	orbit_pid.Kd = 0.01;
 800d1ae:	4b64      	ldr	r3, [pc, #400]	; (800d340 <Thread_ControlEntry+0x2dc>)
 800d1b0:	66bb      	str	r3, [r7, #104]	; 0x68
	self_stable_pid.Kp = 0.03;
 800d1b2:	4b64      	ldr	r3, [pc, #400]	; (800d344 <Thread_ControlEntry+0x2e0>)
 800d1b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	self_stable_pid.Ki = 0.2;
 800d1b8:	4b63      	ldr	r3, [pc, #396]	; (800d348 <Thread_ControlEntry+0x2e4>)
 800d1ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	self_stable_pid.Kd = 0.1;
 800d1be:	4b63      	ldr	r3, [pc, #396]	; (800d34c <Thread_ControlEntry+0x2e8>)
 800d1c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(CMD_DONE_semHandle, 0) == pdTRUE)
 800d1c4:	4b62      	ldr	r3, [pc, #392]	; (800d350 <Thread_ControlEntry+0x2ec>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fd fece 	bl	800af6c <xQueueSemaphoreTake>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d161      	bne.n	800d29a <Thread_ControlEntry+0x236>
		{
			control_data = CaptureControlData(Command_RxBuffer);
 800d1d6:	4c54      	ldr	r4, [pc, #336]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d1d8:	463b      	mov	r3, r7
 800d1da:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800d1de:	4611      	mov	r1, r2
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fc fe92 	bl	8009f0a <CaptureControlData>
 800d1e6:	463b      	mov	r3, r7
 800d1e8:	461d      	mov	r5, r3
 800d1ea:	6828      	ldr	r0, [r5, #0]
 800d1ec:	6869      	ldr	r1, [r5, #4]
 800d1ee:	68aa      	ldr	r2, [r5, #8]
 800d1f0:	68eb      	ldr	r3, [r5, #12]
 800d1f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1f4:	6928      	ldr	r0, [r5, #16]
 800d1f6:	6969      	ldr	r1, [r5, #20]
 800d1f8:	69aa      	ldr	r2, [r5, #24]
 800d1fa:	69eb      	ldr	r3, [r5, #28]
 800d1fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			//Mode Selection
			//check side-push
			if (control_data.Mode & SIDE_PUSH_CODE)
 800d1fe:	4b4a      	ldr	r3, [pc, #296]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d200:	7f1b      	ldrb	r3, [r3, #28]
 800d202:	f003 0301 	and.w	r3, r3, #1
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <Thread_ControlEntry+0x1ae>
			{
				IS_SIDEPUSH = SIDEPUSH_MODE; //ROV_TRUE
 800d20a:	4b52      	ldr	r3, [pc, #328]	; (800d354 <Thread_ControlEntry+0x2f0>)
 800d20c:	2201      	movs	r2, #1
 800d20e:	701a      	strb	r2, [r3, #0]
 800d210:	e002      	b.n	800d218 <Thread_ControlEntry+0x1b4>
			}
			else
			{
				IS_SIDEPUSH = NORMAL_MODE; //ROV_FALSE
 800d212:	4b50      	ldr	r3, [pc, #320]	; (800d354 <Thread_ControlEntry+0x2f0>)
 800d214:	2200      	movs	r2, #0
 800d216:	701a      	strb	r2, [r3, #0]
			}
			//check relay control
			if (control_data.Mode & POWER_CODE)
 800d218:	4b43      	ldr	r3, [pc, #268]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d21a:	7f1b      	ldrb	r3, [r3, #28]
 800d21c:	f003 0308 	and.w	r3, r3, #8
 800d220:	2b00      	cmp	r3, #0
 800d222:	d003      	beq.n	800d22c <Thread_ControlEntry+0x1c8>
			{
				relay_controller = (vu8) GPIO_PIN_SET; //Relay ON
 800d224:	4b4c      	ldr	r3, [pc, #304]	; (800d358 <Thread_ControlEntry+0x2f4>)
 800d226:	2201      	movs	r2, #1
 800d228:	701a      	strb	r2, [r3, #0]
 800d22a:	e002      	b.n	800d232 <Thread_ControlEntry+0x1ce>
			}
			else
			{
				relay_controller = (vu8) GPIO_PIN_RESET; //Relay OFF
 800d22c:	4b4a      	ldr	r3, [pc, #296]	; (800d358 <Thread_ControlEntry+0x2f4>)
 800d22e:	2200      	movs	r2, #0
 800d230:	701a      	strb	r2, [r3, #0]
			}
			//check orbit
			if (control_data.Mode & DIR_CODE)
 800d232:	4b3d      	ldr	r3, [pc, #244]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d234:	7f1b      	ldrb	r3, [r3, #28]
 800d236:	f003 0302 	and.w	r3, r3, #2
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d011      	beq.n	800d262 <Thread_ControlEntry+0x1fe>
			{
				if (IS_ORBIT == ROV_FALSE)
 800d23e:	4b47      	ldr	r3, [pc, #284]	; (800d35c <Thread_ControlEntry+0x2f8>)
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d106      	bne.n	800d254 <Thread_ControlEntry+0x1f0>
				{
					IS_FIRST_ORBIT = ROV_TRUE;
 800d246:	4b46      	ldr	r3, [pc, #280]	; (800d360 <Thread_ControlEntry+0x2fc>)
 800d248:	2201      	movs	r2, #1
 800d24a:	701a      	strb	r2, [r3, #0]
					IS_ORBIT = ROV_TRUE;
 800d24c:	4b43      	ldr	r3, [pc, #268]	; (800d35c <Thread_ControlEntry+0x2f8>)
 800d24e:	2201      	movs	r2, #1
 800d250:	701a      	strb	r2, [r3, #0]
 800d252:	e00c      	b.n	800d26e <Thread_ControlEntry+0x20a>
				}
				else
				{
					IS_FIRST_ORBIT = ROV_FALSE;
 800d254:	4b42      	ldr	r3, [pc, #264]	; (800d360 <Thread_ControlEntry+0x2fc>)
 800d256:	2200      	movs	r2, #0
 800d258:	701a      	strb	r2, [r3, #0]
					IS_ORBIT = ROV_TRUE;
 800d25a:	4b40      	ldr	r3, [pc, #256]	; (800d35c <Thread_ControlEntry+0x2f8>)
 800d25c:	2201      	movs	r2, #1
 800d25e:	701a      	strb	r2, [r3, #0]
 800d260:	e005      	b.n	800d26e <Thread_ControlEntry+0x20a>
				}
			}
			else
			{
				IS_FIRST_ORBIT = ROV_FALSE;
 800d262:	4b3f      	ldr	r3, [pc, #252]	; (800d360 <Thread_ControlEntry+0x2fc>)
 800d264:	2200      	movs	r2, #0
 800d266:	701a      	strb	r2, [r3, #0]
				IS_ORBIT = ROV_FALSE;
 800d268:	4b3c      	ldr	r3, [pc, #240]	; (800d35c <Thread_ControlEntry+0x2f8>)
 800d26a:	2200      	movs	r2, #0
 800d26c:	701a      	strb	r2, [r3, #0]
			}

			memset(&Command_RxBuffer, 0, sizeof(Command_RxBuffer));
 800d26e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800d272:	223c      	movs	r2, #60	; 0x3c
 800d274:	2100      	movs	r1, #0
 800d276:	4618      	mov	r0, r3
 800d278:	f002 fa7a 	bl	800f770 <memset>
			__HAL_UART_ENABLE_IT(&Master_UART, UART_IT_IDLE);
 800d27c:	4b39      	ldr	r3, [pc, #228]	; (800d364 <Thread_ControlEntry+0x300>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	4b38      	ldr	r3, [pc, #224]	; (800d364 <Thread_ControlEntry+0x300>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f042 0210 	orr.w	r2, r2, #16
 800d28a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&Master_UART, Command_RxBuffer,
 800d28c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800d290:	223c      	movs	r2, #60	; 0x3c
 800d292:	4619      	mov	r1, r3
 800d294:	4833      	ldr	r0, [pc, #204]	; (800d364 <Thread_ControlEntry+0x300>)
 800d296:	f7fa fa93 	bl	80077c0 <HAL_UART_Receive_DMA>
					sizeof(Command_RxBuffer));
		}

		ControlDataAnalysis(control_data, &pwm_controller, IS_SIDEPUSH);
 800d29a:	4b2e      	ldr	r3, [pc, #184]	; (800d354 <Thread_ControlEntry+0x2f0>)
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	4c22      	ldr	r4, [pc, #136]	; (800d328 <Thread_ControlEntry+0x2c4>)
 800d2a0:	9305      	str	r3, [sp, #20]
 800d2a2:	4b22      	ldr	r3, [pc, #136]	; (800d32c <Thread_ControlEntry+0x2c8>)
 800d2a4:	9304      	str	r3, [sp, #16]
 800d2a6:	466d      	mov	r5, sp
 800d2a8:	f104 0310 	add.w	r3, r4, #16
 800d2ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800d2b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d2b6:	f7fc fcd7 	bl	8009c68 <ControlDataAnalysis>

		xQueueReceive(Attitude_QueueHandle, &attitude_detect, 0); //recv 9-axis data to calculate attitude
 800d2ba:	4b2b      	ldr	r3, [pc, #172]	; (800d368 <Thread_ControlEntry+0x304>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7fd fd71 	bl	800adac <xQueueReceive>

		//self stable
		ss_cal = (int32_t) calculatePID_position(&self_stable_pid,
 800d2ca:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
				self_stable_pid.FeedBack, attitude_detect.EulerAngle[2]);
 800d2ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
		ss_cal = (int32_t) calculatePID_position(&self_stable_pid,
 800d2d0:	ee07 3a10 	vmov	s14, r3
 800d2d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d2d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d2dc:	eef0 0a47 	vmov.f32	s1, s14
 800d2e0:	eeb0 0a67 	vmov.f32	s0, s15
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fc fa8f 	bl	8009808 <calculatePID_position>
 800d2ea:	eef0 7a40 	vmov.f32	s15, s0
 800d2ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2f2:	ee17 3a90 	vmov	r3, s15
 800d2f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

		//orbit
		if (IS_ORBIT == ROV_TRUE)
 800d2fa:	4b18      	ldr	r3, [pc, #96]	; (800d35c <Thread_ControlEntry+0x2f8>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d160      	bne.n	800d3c4 <Thread_ControlEntry+0x360>
		{
			if (IS_FIRST_ORBIT == ROV_TRUE) //first orbit, get original attitude data
 800d302:	4b17      	ldr	r3, [pc, #92]	; (800d360 <Thread_ControlEntry+0x2fc>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d130      	bne.n	800d36c <Thread_ControlEntry+0x308>
			{
				xQueueReceive(Attitude_QueueHandle, &attitude_detect, 0); //recv 9-axis data to calculate attitude
 800d30a:	4b17      	ldr	r3, [pc, #92]	; (800d368 <Thread_ControlEntry+0x304>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d312:	2200      	movs	r2, #0
 800d314:	4618      	mov	r0, r3
 800d316:	f7fd fd49 	bl	800adac <xQueueReceive>
				origin_target = attitude_detect.EulerAngle[0];
 800d31a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d31c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d320:	e050      	b.n	800d3c4 <Thread_ControlEntry+0x360>
 800d322:	bf00      	nop
 800d324:	0800f8a8 	.word	0x0800f8a8
 800d328:	24003fd8 	.word	0x24003fd8
 800d32c:	24003ff8 	.word	0x24003ff8
 800d330:	3e4ccccd 	.word	0x3e4ccccd
 800d334:	41aeb852 	.word	0x41aeb852
 800d338:	bba3d70a 	.word	0xbba3d70a
 800d33c:	3d4ccccd 	.word	0x3d4ccccd
 800d340:	3c23d70a 	.word	0x3c23d70a
 800d344:	3cf5c28f 	.word	0x3cf5c28f
 800d348:	3e4ccccd 	.word	0x3e4ccccd
 800d34c:	3dcccccd 	.word	0x3dcccccd
 800d350:	240052a8 	.word	0x240052a8
 800d354:	24004038 	.word	0x24004038
 800d358:	24004039 	.word	0x24004039
 800d35c:	2400403a 	.word	0x2400403a
 800d360:	2400403b 	.word	0x2400403b
 800d364:	24006fcc 	.word	0x24006fcc
 800d368:	240052a4 	.word	0x240052a4
			}
			else //normal orbit mode, catch data for many times
			{
				pid_cal = (int32_t) calculatePID_position(&orbit_pid,
 800d36c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d370:	ee07 3a90 	vmov	s15, r3
 800d374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						origin_target, attitude_detect.EulerAngle[0]); //orbit: X-axis
 800d378:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
				pid_cal = (int32_t) calculatePID_position(&orbit_pid,
 800d37a:	ee07 3a10 	vmov	s14, r3
 800d37e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d382:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d386:	eef0 0a47 	vmov.f32	s1, s14
 800d38a:	eeb0 0a67 	vmov.f32	s0, s15
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fc fa3a 	bl	8009808 <calculatePID_position>
 800d394:	eef0 7a40 	vmov.f32	s15, s0
 800d398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d39c:	ee17 3a90 	vmov	r3, s15
 800d3a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
//				printf("%d, %d, %d\r\n", origin_target,
//						attitude_detect.EulerAngle[0], pid_cal);
				MoveControl(&pwm_controller, control_data.StraightNum,
 800d3a4:	4b79      	ldr	r3, [pc, #484]	; (800d58c <Thread_ControlEntry+0x528>)
 800d3a6:	8859      	ldrh	r1, [r3, #2]
						control_data.RotateNum + pid_cal,
 800d3a8:	4b78      	ldr	r3, [pc, #480]	; (800d58c <Thread_ControlEntry+0x528>)
 800d3aa:	889a      	ldrh	r2, [r3, #4]
				MoveControl(&pwm_controller, control_data.StraightNum,
 800d3ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	4413      	add	r3, r2
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	4b75      	ldr	r3, [pc, #468]	; (800d58c <Thread_ControlEntry+0x528>)
 800d3b8:	88db      	ldrh	r3, [r3, #6]
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	9000      	str	r0, [sp, #0]
 800d3be:	4874      	ldr	r0, [pc, #464]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d3c0:	f7fc fb3c 	bl	8009a3c <MoveControl>
//		{
////			printf("stable: %d, %d, %l\r\n", attitude_detect.EulerAngle[2],
////					(int32_t)self_stable_pid.FeedBack, ss_cal);
//		}

		RestrictPwmValue((pwm_controller.HorizontalThruster[0]), 700, 2300);
 800d3c4:	4b72      	ldr	r3, [pc, #456]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800d3cc:	d30b      	bcc.n	800d3e6 <Thread_ControlEntry+0x382>
 800d3ce:	4b70      	ldr	r3, [pc, #448]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d802      	bhi.n	800d3e0 <Thread_ControlEntry+0x37c>
 800d3da:	4b6d      	ldr	r3, [pc, #436]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	e004      	b.n	800d3ea <Thread_ControlEntry+0x386>
 800d3e0:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800d3e4:	e001      	b.n	800d3ea <Thread_ControlEntry+0x386>
 800d3e6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800d3ea:	4a69      	ldr	r2, [pc, #420]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d3ec:	6013      	str	r3, [r2, #0]
		RestrictPwmValue((pwm_controller.HorizontalThruster[1]), 700, 2300);
 800d3ee:	4b68      	ldr	r3, [pc, #416]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800d3f6:	d30b      	bcc.n	800d410 <Thread_ControlEntry+0x3ac>
 800d3f8:	4b65      	ldr	r3, [pc, #404]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800d400:	4293      	cmp	r3, r2
 800d402:	d802      	bhi.n	800d40a <Thread_ControlEntry+0x3a6>
 800d404:	4b62      	ldr	r3, [pc, #392]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	e004      	b.n	800d414 <Thread_ControlEntry+0x3b0>
 800d40a:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800d40e:	e001      	b.n	800d414 <Thread_ControlEntry+0x3b0>
 800d410:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800d414:	4a5e      	ldr	r2, [pc, #376]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d416:	6053      	str	r3, [r2, #4]
		RestrictPwmValue((pwm_controller.HorizontalThruster[2]), 700, 2300);
 800d418:	4b5d      	ldr	r3, [pc, #372]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d41a:	689b      	ldr	r3, [r3, #8]
 800d41c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800d420:	d30b      	bcc.n	800d43a <Thread_ControlEntry+0x3d6>
 800d422:	4b5b      	ldr	r3, [pc, #364]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d424:	689b      	ldr	r3, [r3, #8]
 800d426:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d802      	bhi.n	800d434 <Thread_ControlEntry+0x3d0>
 800d42e:	4b58      	ldr	r3, [pc, #352]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	e004      	b.n	800d43e <Thread_ControlEntry+0x3da>
 800d434:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800d438:	e001      	b.n	800d43e <Thread_ControlEntry+0x3da>
 800d43a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800d43e:	4a54      	ldr	r2, [pc, #336]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d440:	6093      	str	r3, [r2, #8]
		RestrictPwmValue((pwm_controller.HorizontalThruster[3]), 700, 2300);
 800d442:	4b53      	ldr	r3, [pc, #332]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800d44a:	d30b      	bcc.n	800d464 <Thread_ControlEntry+0x400>
 800d44c:	4b50      	ldr	r3, [pc, #320]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800d454:	4293      	cmp	r3, r2
 800d456:	d802      	bhi.n	800d45e <Thread_ControlEntry+0x3fa>
 800d458:	4b4d      	ldr	r3, [pc, #308]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	e004      	b.n	800d468 <Thread_ControlEntry+0x404>
 800d45e:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800d462:	e001      	b.n	800d468 <Thread_ControlEntry+0x404>
 800d464:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800d468:	4a49      	ldr	r2, [pc, #292]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d46a:	60d3      	str	r3, [r2, #12]
		RestrictPwmValue((pwm_controller.VerticalThruster[0]), 700, 2300);
 800d46c:	4b48      	ldr	r3, [pc, #288]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800d474:	d30b      	bcc.n	800d48e <Thread_ControlEntry+0x42a>
 800d476:	4b46      	ldr	r3, [pc, #280]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d478:	691b      	ldr	r3, [r3, #16]
 800d47a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800d47e:	4293      	cmp	r3, r2
 800d480:	d802      	bhi.n	800d488 <Thread_ControlEntry+0x424>
 800d482:	4b43      	ldr	r3, [pc, #268]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	e004      	b.n	800d492 <Thread_ControlEntry+0x42e>
 800d488:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800d48c:	e001      	b.n	800d492 <Thread_ControlEntry+0x42e>
 800d48e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800d492:	4a3f      	ldr	r2, [pc, #252]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d494:	6113      	str	r3, [r2, #16]
		RestrictPwmValue((pwm_controller.VerticalThruster[1]), 700, 2300);
 800d496:	4b3e      	ldr	r3, [pc, #248]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d498:	695b      	ldr	r3, [r3, #20]
 800d49a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800d49e:	d30b      	bcc.n	800d4b8 <Thread_ControlEntry+0x454>
 800d4a0:	4b3b      	ldr	r3, [pc, #236]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d4a2:	695b      	ldr	r3, [r3, #20]
 800d4a4:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d802      	bhi.n	800d4b2 <Thread_ControlEntry+0x44e>
 800d4ac:	4b38      	ldr	r3, [pc, #224]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d4ae:	695b      	ldr	r3, [r3, #20]
 800d4b0:	e004      	b.n	800d4bc <Thread_ControlEntry+0x458>
 800d4b2:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800d4b6:	e001      	b.n	800d4bc <Thread_ControlEntry+0x458>
 800d4b8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800d4bc:	4a34      	ldr	r2, [pc, #208]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d4be:	6153      	str	r3, [r2, #20]
		RestrictPwmValue((pwm_controller.LightServo), 50, 2000);
 800d4c0:	4b33      	ldr	r3, [pc, #204]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d4c2:	699b      	ldr	r3, [r3, #24]
 800d4c4:	2b31      	cmp	r3, #49	; 0x31
 800d4c6:	d90a      	bls.n	800d4de <Thread_ControlEntry+0x47a>
 800d4c8:	4b31      	ldr	r3, [pc, #196]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d4d0:	d802      	bhi.n	800d4d8 <Thread_ControlEntry+0x474>
 800d4d2:	4b2f      	ldr	r3, [pc, #188]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d4d4:	699b      	ldr	r3, [r3, #24]
 800d4d6:	e003      	b.n	800d4e0 <Thread_ControlEntry+0x47c>
 800d4d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d4dc:	e000      	b.n	800d4e0 <Thread_ControlEntry+0x47c>
 800d4de:	2332      	movs	r3, #50	; 0x32
 800d4e0:	4a2b      	ldr	r2, [pc, #172]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d4e2:	6193      	str	r3, [r2, #24]

		HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, relay_controller);
 800d4e4:	4b2b      	ldr	r3, [pc, #172]	; (800d594 <Thread_ControlEntry+0x530>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	2101      	movs	r1, #1
 800d4ee:	482a      	ldr	r0, [pc, #168]	; (800d598 <Thread_ControlEntry+0x534>)
 800d4f0:	f7f6 f9c8 	bl	8003884 <HAL_GPIO_WritePin>

		TIM1->CCR1 = pwm_controller.HorizontalThruster[2]; //B1 '9'
 800d4f4:	4a29      	ldr	r2, [pc, #164]	; (800d59c <Thread_ControlEntry+0x538>)
 800d4f6:	4b26      	ldr	r3, [pc, #152]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = pwm_controller.HorizontalThruster[1]; //A2 '8'
 800d4fc:	4a27      	ldr	r2, [pc, #156]	; (800d59c <Thread_ControlEntry+0x538>)
 800d4fe:	4b24      	ldr	r3, [pc, #144]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = pwm_controller.HorizontalThruster[0]; //A1 '6'
 800d504:	4a25      	ldr	r2, [pc, #148]	; (800d59c <Thread_ControlEntry+0x538>)
 800d506:	4b22      	ldr	r3, [pc, #136]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	63d3      	str	r3, [r2, #60]	; 0x3c

		TIM2->CCR1 = pwm_controller.RestServo; //Pan(not used)
 800d50c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d510:	4b1f      	ldr	r3, [pc, #124]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d514:	6353      	str	r3, [r2, #52]	; 0x34
//		TIM2->CCR2 = pwm_controller.VerticalThruster[0] - ss_cal; //C1 '3'
		TIM2->CCR2 = pwm_controller.VerticalThruster[0]; //C1 '3'
 800d516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d51a:	4b1d      	ldr	r3, [pc, #116]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	6393      	str	r3, [r2, #56]	; 0x38
		TIM2->CCR3 = pwm_controller.HorizontalThruster[3]; //B2 '2'
 800d520:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d524:	4b1a      	ldr	r3, [pc, #104]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	63d3      	str	r3, [r2, #60]	; 0x3c

		TIM3->CCR1 = pwm_controller.ArmServo[2]; //Middle Arm
 800d52a:	4a1d      	ldr	r2, [pc, #116]	; (800d5a0 <Thread_ControlEntry+0x53c>)
 800d52c:	4b18      	ldr	r3, [pc, #96]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d530:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2 = pwm_controller.ArmServo[1]; //Main Arm
 800d532:	4a1b      	ldr	r2, [pc, #108]	; (800d5a0 <Thread_ControlEntry+0x53c>)
 800d534:	4b16      	ldr	r3, [pc, #88]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d538:	6393      	str	r3, [r2, #56]	; 0x38
		TIM3->CCR3 = pwm_controller.ArmServo[0]; //Horizental Arm
 800d53a:	4a19      	ldr	r2, [pc, #100]	; (800d5a0 <Thread_ControlEntry+0x53c>)
 800d53c:	4b14      	ldr	r3, [pc, #80]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d540:	63d3      	str	r3, [r2, #60]	; 0x3c

		TIM4->CCR2 = pwm_controller.ArmServo[5]; //Rest Machine Arm
 800d542:	4a18      	ldr	r2, [pc, #96]	; (800d5a4 <Thread_ControlEntry+0x540>)
 800d544:	4b12      	ldr	r3, [pc, #72]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d548:	6393      	str	r3, [r2, #56]	; 0x38
		TIM4->CCR3 = pwm_controller.LightServo; //Light
 800d54a:	4a16      	ldr	r2, [pc, #88]	; (800d5a4 <Thread_ControlEntry+0x540>)
 800d54c:	4b10      	ldr	r3, [pc, #64]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d54e:	699b      	ldr	r3, [r3, #24]
 800d550:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM4->CCR4 = (vu32) 1500; //hardware float(not used)
 800d552:	4b14      	ldr	r3, [pc, #80]	; (800d5a4 <Thread_ControlEntry+0x540>)
 800d554:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d558:	641a      	str	r2, [r3, #64]	; 0x40

		TIM5->CCR1 = pwm_controller.ConveyServo; //Convey
 800d55a:	4a13      	ldr	r2, [pc, #76]	; (800d5a8 <Thread_ControlEntry+0x544>)
 800d55c:	4b0c      	ldr	r3, [pc, #48]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	6353      	str	r3, [r2, #52]	; 0x34
		TIM5->CCR2 = pwm_controller.ArmServo[3]; //Front Arm
 800d562:	4a11      	ldr	r2, [pc, #68]	; (800d5a8 <Thread_ControlEntry+0x544>)
 800d564:	4b0a      	ldr	r3, [pc, #40]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d568:	6393      	str	r3, [r2, #56]	; 0x38

//		TIM8->CCR3 = pwm_controller.VerticalThruster[1] + ss_cal; //C2 '5'
		TIM8->CCR3 = pwm_controller.VerticalThruster[1]; //C2 '5'
 800d56a:	4a10      	ldr	r2, [pc, #64]	; (800d5ac <Thread_ControlEntry+0x548>)
 800d56c:	4b08      	ldr	r3, [pc, #32]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d56e:	695b      	ldr	r3, [r3, #20]
 800d570:	63d3      	str	r3, [r2, #60]	; 0x3c

//		TIM12->CCR1 = (vu32)1500; //hardware float(not used)

		TIM15->CCR1 = pwm_controller.ArmServo[4]; //Grab Arm
 800d572:	4a0f      	ldr	r2, [pc, #60]	; (800d5b0 <Thread_ControlEntry+0x54c>)
 800d574:	4b06      	ldr	r3, [pc, #24]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d578:	6353      	str	r3, [r2, #52]	; 0x34
		TIM15->CCR2 = pwm_controller.PanServo; //Pan
 800d57a:	4a0d      	ldr	r2, [pc, #52]	; (800d5b0 <Thread_ControlEntry+0x54c>)
 800d57c:	4b04      	ldr	r3, [pc, #16]	; (800d590 <Thread_ControlEntry+0x52c>)
 800d57e:	69db      	ldr	r3, [r3, #28]
 800d580:	6393      	str	r3, [r2, #56]	; 0x38

		osDelay(1);
 800d582:	2001      	movs	r0, #1
 800d584:	f7fd f829 	bl	800a5da <osDelay>
		if (xSemaphoreTake(CMD_DONE_semHandle, 0) == pdTRUE)
 800d588:	e61c      	b.n	800d1c4 <Thread_ControlEntry+0x160>
 800d58a:	bf00      	nop
 800d58c:	24003fd8 	.word	0x24003fd8
 800d590:	24003ff8 	.word	0x24003ff8
 800d594:	24004039 	.word	0x24004039
 800d598:	58020800 	.word	0x58020800
 800d59c:	40010000 	.word	0x40010000
 800d5a0:	40000400 	.word	0x40000400
 800d5a4:	40000800 	.word	0x40000800
 800d5a8:	40000c00 	.word	0x40000c00
 800d5ac:	40010400 	.word	0x40010400
 800d5b0:	40014000 	.word	0x40014000

0800d5b4 <Thread_SensorEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_SensorEntry */
void Thread_SensorEntry(void const *argument)
{
 800d5b4:	b5b0      	push	{r4, r5, r7, lr}
 800d5b6:	b0aa      	sub	sp, #168	; 0xa8
 800d5b8:	af08      	add	r7, sp, #32
 800d5ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Thread_SensorEntry */
	IMUData_t wt931_data;
	CarbinData_t gy39_data;
	ReportData_t report_data;
	report_data.FrameHead = 0x25;
 800d5bc:	2325      	movs	r3, #37	; 0x25
 800d5be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	report_data.CabinFunction = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	report_data.FrameEnd = 0xFFFF;
 800d5c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	report_data.IdTest = 0x00;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	uint8_t Report_TxBuffer[Master_UART_TXLen];
	/* Infinite loop */
	for (;;)
	{
		xQueueReceive(GY39_QueueHandle, &gy39_data, 0);
 800d5d6:	4b37      	ldr	r3, [pc, #220]	; (800d6b4 <Thread_SensorEntry+0x100>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800d5de:	2200      	movs	r2, #0
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fd fbe3 	bl	800adac <xQueueReceive>
		xQueueReceive(WT931_QueueHandle, &wt931_data, 0);
 800d5e6:	4b34      	ldr	r3, [pc, #208]	; (800d6b8 <Thread_SensorEntry+0x104>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7fd fbdb 	bl	800adac <xQueueReceive>

//		printf("%d,%d,%d,%d,%d\r\n",wt931_data.EulerAngle[0],wt931_data.EulerAngle[1],wt931_data.EulerAngle[2],gy39_data.CarbinTemperature,gy39_data.CarbinHumidity);

		report_data.AccNum[0] = wt931_data.Acceleration[0];
 800d5f6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800d5fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		report_data.AccNum[1] = wt931_data.Acceleration[1];
 800d5fe:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800d602:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		report_data.AccNum[2] = wt931_data.Acceleration[2];
 800d606:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800d60a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		report_data.RotNum[0] = wt931_data.AngularSpeed[0];
 800d60e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d612:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		report_data.RotNum[1] = wt931_data.AngularSpeed[1];
 800d616:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d61a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		report_data.RotNum[2] = wt931_data.AngularSpeed[2];
 800d61e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d622:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		report_data.EulNum[0] = wt931_data.EulerAngle[0];
 800d626:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800d62a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		report_data.EulNum[1] = wt931_data.EulerAngle[1];
 800d62e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800d632:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		report_data.EulNum[2] = wt931_data.EulerAngle[2];
 800d636:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800d63a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		report_data.MagNum[0] = wt931_data.MagneticValue[0];
 800d63e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d642:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		report_data.MagNum[1] = wt931_data.MagneticValue[1];
 800d646:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d64a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		report_data.MagNum[2] = wt931_data.MagneticValue[2];
 800d64e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d652:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		report_data.CabinTemperature = gy39_data.CarbinTemperature;
 800d656:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800d65a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		report_data.CabinBarometric = gy39_data.CarbinBarometric;
 800d65e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d662:	647b      	str	r3, [r7, #68]	; 0x44
		report_data.CabinHumidity = gy39_data.CarbinHumidity;
 800d664:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800d668:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

		report_data.WaterDetect = HAL_GPIO_ReadPin(WaterDet_GPIO_Port,
 800d66c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d670:	4812      	ldr	r0, [pc, #72]	; (800d6bc <Thread_SensorEntry+0x108>)
 800d672:	f7f6 f8ef 	bl	8003854 <HAL_GPIO_ReadPin>
 800d676:	4603      	mov	r3, r0
 800d678:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		WaterDet_Pin);

		CaptureReportData(report_data, Report_TxBuffer);
 800d67c:	f107 030c 	add.w	r3, r7, #12
 800d680:	9307      	str	r3, [sp, #28]
 800d682:	466d      	mov	r5, sp
 800d684:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800d688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d68a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d68c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d690:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d694:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d69a:	f7fc fb25 	bl	8009ce8 <CaptureReportData>

//		HAL_UART_Transmit(&Master_UART, Report_TxBuffer, sizeof(Report_TxBuffer), 0xff);
		HAL_UART_Transmit_DMA(&Master_UART, Report_TxBuffer,
 800d69e:	f107 030c 	add.w	r3, r7, #12
 800d6a2:	222f      	movs	r2, #47	; 0x2f
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	4806      	ldr	r0, [pc, #24]	; (800d6c0 <Thread_SensorEntry+0x10c>)
 800d6a8:	f7f9 fff8 	bl	800769c <HAL_UART_Transmit_DMA>
				sizeof(Report_TxBuffer));

		osDelay(200);
 800d6ac:	20c8      	movs	r0, #200	; 0xc8
 800d6ae:	f7fc ff94 	bl	800a5da <osDelay>
		xQueueReceive(GY39_QueueHandle, &gy39_data, 0);
 800d6b2:	e790      	b.n	800d5d6 <Thread_SensorEntry+0x22>
 800d6b4:	24005104 	.word	0x24005104
 800d6b8:	24005100 	.word	0x24005100
 800d6bc:	58020400 	.word	0x58020400
 800d6c0:	24006fcc 	.word	0x24006fcc

0800d6c4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b08c      	sub	sp, #48	; 0x30
 800d6c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6ca:	f107 031c 	add.w	r3, r7, #28
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	601a      	str	r2, [r3, #0]
 800d6d2:	605a      	str	r2, [r3, #4]
 800d6d4:	609a      	str	r2, [r3, #8]
 800d6d6:	60da      	str	r2, [r3, #12]
 800d6d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d6da:	4b40      	ldr	r3, [pc, #256]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d6dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d6e0:	4a3e      	ldr	r2, [pc, #248]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d6e2:	f043 0310 	orr.w	r3, r3, #16
 800d6e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d6ea:	4b3c      	ldr	r3, [pc, #240]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d6ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d6f0:	f003 0310 	and.w	r3, r3, #16
 800d6f4:	61bb      	str	r3, [r7, #24]
 800d6f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d6f8:	4b38      	ldr	r3, [pc, #224]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d6fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d6fe:	4a37      	ldr	r2, [pc, #220]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d700:	f043 0304 	orr.w	r3, r3, #4
 800d704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d708:	4b34      	ldr	r3, [pc, #208]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d70a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d70e:	f003 0304 	and.w	r3, r3, #4
 800d712:	617b      	str	r3, [r7, #20]
 800d714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d716:	4b31      	ldr	r3, [pc, #196]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d71c:	4a2f      	ldr	r2, [pc, #188]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d726:	4b2d      	ldr	r3, [pc, #180]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d72c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d730:	613b      	str	r3, [r7, #16]
 800d732:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d734:	4b29      	ldr	r3, [pc, #164]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d73a:	4a28      	ldr	r2, [pc, #160]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d73c:	f043 0301 	orr.w	r3, r3, #1
 800d740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d744:	4b25      	ldr	r3, [pc, #148]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	60fb      	str	r3, [r7, #12]
 800d750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d752:	4b22      	ldr	r3, [pc, #136]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d758:	4a20      	ldr	r2, [pc, #128]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d75a:	f043 0302 	orr.w	r3, r3, #2
 800d75e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d762:	4b1e      	ldr	r3, [pc, #120]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d768:	f003 0302 	and.w	r3, r3, #2
 800d76c:	60bb      	str	r3, [r7, #8]
 800d76e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d770:	4b1a      	ldr	r3, [pc, #104]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d776:	4a19      	ldr	r2, [pc, #100]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d778:	f043 0308 	orr.w	r3, r3, #8
 800d77c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d780:	4b16      	ldr	r3, [pc, #88]	; (800d7dc <MX_GPIO_Init+0x118>)
 800d782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d786:	f003 0308 	and.w	r3, r3, #8
 800d78a:	607b      	str	r3, [r7, #4]
 800d78c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|Relay_Pin, GPIO_PIN_RESET);
 800d78e:	2200      	movs	r2, #0
 800d790:	f242 0101 	movw	r1, #8193	; 0x2001
 800d794:	4812      	ldr	r0, [pc, #72]	; (800d7e0 <MX_GPIO_Init+0x11c>)
 800d796:	f7f6 f875 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|Relay_Pin;
 800d79a:	f242 0301 	movw	r3, #8193	; 0x2001
 800d79e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7ac:	f107 031c 	add.w	r3, r7, #28
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	480b      	ldr	r0, [pc, #44]	; (800d7e0 <MX_GPIO_Init+0x11c>)
 800d7b4:	f7f5 fe9e 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WaterDet_Pin;
 800d7b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WaterDet_GPIO_Port, &GPIO_InitStruct);
 800d7c6:	f107 031c 	add.w	r3, r7, #28
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4805      	ldr	r0, [pc, #20]	; (800d7e4 <MX_GPIO_Init+0x120>)
 800d7ce:	f7f5 fe91 	bl	80034f4 <HAL_GPIO_Init>

}
 800d7d2:	bf00      	nop
 800d7d4:	3730      	adds	r7, #48	; 0x30
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	58024400 	.word	0x58024400
 800d7e0:	58020800 	.word	0x58020800
 800d7e4:	58020400 	.word	0x58020400

0800d7e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d7ec:	f7f2 fef4 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d7f0:	f000 f886 	bl	800d900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d7f4:	f7ff ff66 	bl	800d6c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800d7f8:	f7ff fa10 	bl	800cc1c <MX_DMA_Init>
  MX_TIM1_Init();
 800d7fc:	f000 fc8e 	bl	800e11c <MX_TIM1_Init>
  MX_TIM2_Init();
 800d800:	f000 fd52 	bl	800e2a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800d804:	f000 fdde 	bl	800e3c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800d808:	f000 fe6a 	bl	800e4e0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800d80c:	f000 fef6 	bl	800e5fc <MX_TIM5_Init>
  MX_TIM8_Init();
 800d810:	f000 ff78 	bl	800e704 <MX_TIM8_Init>
  MX_TIM12_Init();
 800d814:	f001 f824 	bl	800e860 <MX_TIM12_Init>
  MX_TIM15_Init();
 800d818:	f001 f886 	bl	800e928 <MX_TIM15_Init>
  MX_UART5_Init();
 800d81c:	f001 fb8e 	bl	800ef3c <MX_UART5_Init>
  MX_USART1_UART_Init();
 800d820:	f001 fbd8 	bl	800efd4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800d824:	f001 fc22 	bl	800f06c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800d828:	f001 fc6c 	bl	800f104 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800d82c:	2201      	movs	r2, #1
 800d82e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d832:	482a      	ldr	r0, [pc, #168]	; (800d8dc <main+0xf4>)
 800d834:	f7f6 f826 	bl	8003884 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800d838:	2200      	movs	r2, #0
 800d83a:	2101      	movs	r1, #1
 800d83c:	4827      	ldr	r0, [pc, #156]	; (800d8dc <main+0xf4>)
 800d83e:	f7f6 f821 	bl	8003884 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800d842:	2100      	movs	r1, #0
 800d844:	4826      	ldr	r0, [pc, #152]	; (800d8e0 <main+0xf8>)
 800d846:	f7f8 fd19 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800d84a:	2104      	movs	r1, #4
 800d84c:	4824      	ldr	r0, [pc, #144]	; (800d8e0 <main+0xf8>)
 800d84e:	f7f8 fd15 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800d852:	2108      	movs	r1, #8
 800d854:	4822      	ldr	r0, [pc, #136]	; (800d8e0 <main+0xf8>)
 800d856:	f7f8 fd11 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800d85a:	2100      	movs	r1, #0
 800d85c:	4821      	ldr	r0, [pc, #132]	; (800d8e4 <main+0xfc>)
 800d85e:	f7f8 fd0d 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800d862:	2104      	movs	r1, #4
 800d864:	481f      	ldr	r0, [pc, #124]	; (800d8e4 <main+0xfc>)
 800d866:	f7f8 fd09 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800d86a:	2108      	movs	r1, #8
 800d86c:	481d      	ldr	r0, [pc, #116]	; (800d8e4 <main+0xfc>)
 800d86e:	f7f8 fd05 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800d872:	2100      	movs	r1, #0
 800d874:	481c      	ldr	r0, [pc, #112]	; (800d8e8 <main+0x100>)
 800d876:	f7f8 fd01 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800d87a:	2104      	movs	r1, #4
 800d87c:	481a      	ldr	r0, [pc, #104]	; (800d8e8 <main+0x100>)
 800d87e:	f7f8 fcfd 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800d882:	2108      	movs	r1, #8
 800d884:	4818      	ldr	r0, [pc, #96]	; (800d8e8 <main+0x100>)
 800d886:	f7f8 fcf9 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800d88a:	2104      	movs	r1, #4
 800d88c:	4817      	ldr	r0, [pc, #92]	; (800d8ec <main+0x104>)
 800d88e:	f7f8 fcf5 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800d892:	2108      	movs	r1, #8
 800d894:	4815      	ldr	r0, [pc, #84]	; (800d8ec <main+0x104>)
 800d896:	f7f8 fcf1 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800d89a:	210c      	movs	r1, #12
 800d89c:	4813      	ldr	r0, [pc, #76]	; (800d8ec <main+0x104>)
 800d89e:	f7f8 fced 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	4812      	ldr	r0, [pc, #72]	; (800d8f0 <main+0x108>)
 800d8a6:	f7f8 fce9 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800d8aa:	2104      	movs	r1, #4
 800d8ac:	4810      	ldr	r0, [pc, #64]	; (800d8f0 <main+0x108>)
 800d8ae:	f7f8 fce5 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800d8b2:	2108      	movs	r1, #8
 800d8b4:	480f      	ldr	r0, [pc, #60]	; (800d8f4 <main+0x10c>)
 800d8b6:	f7f8 fce1 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	480e      	ldr	r0, [pc, #56]	; (800d8f8 <main+0x110>)
 800d8be:	f7f8 fcdd 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	480d      	ldr	r0, [pc, #52]	; (800d8fc <main+0x114>)
 800d8c6:	f7f8 fcd9 	bl	800627c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800d8ca:	2104      	movs	r1, #4
 800d8cc:	480b      	ldr	r0, [pc, #44]	; (800d8fc <main+0x114>)
 800d8ce:	f7f8 fcd5 	bl	800627c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800d8d2:	f7ff fa05 	bl	800cce0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800d8d6:	f7fc fe2d 	bl	800a534 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800d8da:	e7fe      	b.n	800d8da <main+0xf2>
 800d8dc:	58020800 	.word	0x58020800
 800d8e0:	24006df8 	.word	0x24006df8
 800d8e4:	24006e44 	.word	0x24006e44
 800d8e8:	24006dac 	.word	0x24006dac
 800d8ec:	24006cc8 	.word	0x24006cc8
 800d8f0:	24006d60 	.word	0x24006d60
 800d8f4:	24006c7c 	.word	0x24006c7c
 800d8f8:	24006e90 	.word	0x24006e90
 800d8fc:	24006d14 	.word	0x24006d14

0800d900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b09c      	sub	sp, #112	; 0x70
 800d904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d90a:	224c      	movs	r2, #76	; 0x4c
 800d90c:	2100      	movs	r1, #0
 800d90e:	4618      	mov	r0, r3
 800d910:	f001 ff2e 	bl	800f770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d914:	1d3b      	adds	r3, r7, #4
 800d916:	2220      	movs	r2, #32
 800d918:	2100      	movs	r1, #0
 800d91a:	4618      	mov	r0, r3
 800d91c:	f001 ff28 	bl	800f770 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800d920:	2002      	movs	r0, #2
 800d922:	f7f5 ffe3 	bl	80038ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d926:	2300      	movs	r3, #0
 800d928:	603b      	str	r3, [r7, #0]
 800d92a:	4b30      	ldr	r3, [pc, #192]	; (800d9ec <SystemClock_Config+0xec>)
 800d92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92e:	4a2f      	ldr	r2, [pc, #188]	; (800d9ec <SystemClock_Config+0xec>)
 800d930:	f023 0301 	bic.w	r3, r3, #1
 800d934:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d936:	4b2d      	ldr	r3, [pc, #180]	; (800d9ec <SystemClock_Config+0xec>)
 800d938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93a:	f003 0301 	and.w	r3, r3, #1
 800d93e:	603b      	str	r3, [r7, #0]
 800d940:	4b2b      	ldr	r3, [pc, #172]	; (800d9f0 <SystemClock_Config+0xf0>)
 800d942:	699b      	ldr	r3, [r3, #24]
 800d944:	4a2a      	ldr	r2, [pc, #168]	; (800d9f0 <SystemClock_Config+0xf0>)
 800d946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d94a:	6193      	str	r3, [r2, #24]
 800d94c:	4b28      	ldr	r3, [pc, #160]	; (800d9f0 <SystemClock_Config+0xf0>)
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d954:	603b      	str	r3, [r7, #0]
 800d956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800d958:	bf00      	nop
 800d95a:	4b25      	ldr	r3, [pc, #148]	; (800d9f0 <SystemClock_Config+0xf0>)
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d966:	d1f8      	bne.n	800d95a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d968:	2301      	movs	r3, #1
 800d96a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d96c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d970:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d972:	2302      	movs	r3, #2
 800d974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d976:	2302      	movs	r3, #2
 800d978:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800d97a:	2305      	movs	r3, #5
 800d97c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800d97e:	23a0      	movs	r3, #160	; 0xa0
 800d980:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800d982:	2302      	movs	r3, #2
 800d984:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800d986:	2302      	movs	r3, #2
 800d988:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800d98a:	2302      	movs	r3, #2
 800d98c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800d98e:	2308      	movs	r3, #8
 800d990:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800d992:	2300      	movs	r3, #0
 800d994:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7f5 ffde 	bl	8003960 <HAL_RCC_OscConfig>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 800d9aa:	f000 f835 	bl	800da18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d9ae:	233f      	movs	r3, #63	; 0x3f
 800d9b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800d9ba:	2308      	movs	r3, #8
 800d9bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800d9be:	2340      	movs	r3, #64	; 0x40
 800d9c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800d9c2:	2340      	movs	r3, #64	; 0x40
 800d9c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800d9c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800d9cc:	2340      	movs	r3, #64	; 0x40
 800d9ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d9d0:	1d3b      	adds	r3, r7, #4
 800d9d2:	2102      	movs	r1, #2
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7f6 fbef 	bl	80041b8 <HAL_RCC_ClockConfig>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d001      	beq.n	800d9e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800d9e0:	f000 f81a 	bl	800da18 <Error_Handler>
  }
}
 800d9e4:	bf00      	nop
 800d9e6:	3770      	adds	r7, #112	; 0x70
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	58000400 	.word	0x58000400
 800d9f0:	58024800 	.word	0x58024800

0800d9f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a04      	ldr	r2, [pc, #16]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d101      	bne.n	800da0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800da06:	f7f2 fe23 	bl	8000650 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800da0a:	bf00      	nop
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	40001000 	.word	0x40001000

0800da18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800da18:	b480      	push	{r7}
 800da1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800da1c:	b672      	cpsid	i
}
 800da1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800da20:	e7fe      	b.n	800da20 <Error_Handler+0x8>
	...

0800da24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da2a:	4b0c      	ldr	r3, [pc, #48]	; (800da5c <HAL_MspInit+0x38>)
 800da2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da30:	4a0a      	ldr	r2, [pc, #40]	; (800da5c <HAL_MspInit+0x38>)
 800da32:	f043 0302 	orr.w	r3, r3, #2
 800da36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800da3a:	4b08      	ldr	r3, [pc, #32]	; (800da5c <HAL_MspInit+0x38>)
 800da3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da40:	f003 0302 	and.w	r3, r3, #2
 800da44:	607b      	str	r3, [r7, #4]
 800da46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800da48:	2200      	movs	r2, #0
 800da4a:	210f      	movs	r1, #15
 800da4c:	f06f 0001 	mvn.w	r0, #1
 800da50:	f7f2 fee2 	bl	8000818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800da54:	bf00      	nop
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	58024400 	.word	0x58024400

0800da60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b090      	sub	sp, #64	; 0x40
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b0f      	cmp	r3, #15
 800da6c:	d827      	bhi.n	800dabe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800da6e:	2200      	movs	r2, #0
 800da70:	6879      	ldr	r1, [r7, #4]
 800da72:	2036      	movs	r0, #54	; 0x36
 800da74:	f7f2 fed0 	bl	8000818 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800da78:	2036      	movs	r0, #54	; 0x36
 800da7a:	f7f2 fee7 	bl	800084c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800da7e:	4a29      	ldr	r2, [pc, #164]	; (800db24 <HAL_InitTick+0xc4>)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800da84:	4b28      	ldr	r3, [pc, #160]	; (800db28 <HAL_InitTick+0xc8>)
 800da86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800da8a:	4a27      	ldr	r2, [pc, #156]	; (800db28 <HAL_InitTick+0xc8>)
 800da8c:	f043 0310 	orr.w	r3, r3, #16
 800da90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800da94:	4b24      	ldr	r3, [pc, #144]	; (800db28 <HAL_InitTick+0xc8>)
 800da96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800da9a:	f003 0310 	and.w	r3, r3, #16
 800da9e:	60fb      	str	r3, [r7, #12]
 800daa0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800daa2:	f107 0210 	add.w	r2, r7, #16
 800daa6:	f107 0314 	add.w	r3, r7, #20
 800daaa:	4611      	mov	r1, r2
 800daac:	4618      	mov	r0, r3
 800daae:	f7f6 ff0f 	bl	80048d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800dab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d106      	bne.n	800daca <HAL_InitTick+0x6a>
 800dabc:	e001      	b.n	800dac2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	e02b      	b.n	800db1a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800dac2:	f7f6 fed9 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 800dac6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800dac8:	e004      	b.n	800dad4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800daca:	f7f6 fed5 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 800dace:	4603      	mov	r3, r0
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800dad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad6:	4a15      	ldr	r2, [pc, #84]	; (800db2c <HAL_InitTick+0xcc>)
 800dad8:	fba2 2303 	umull	r2, r3, r2, r3
 800dadc:	0c9b      	lsrs	r3, r3, #18
 800dade:	3b01      	subs	r3, #1
 800dae0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800dae2:	4b13      	ldr	r3, [pc, #76]	; (800db30 <HAL_InitTick+0xd0>)
 800dae4:	4a13      	ldr	r2, [pc, #76]	; (800db34 <HAL_InitTick+0xd4>)
 800dae6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800dae8:	4b11      	ldr	r3, [pc, #68]	; (800db30 <HAL_InitTick+0xd0>)
 800daea:	f240 32e7 	movw	r2, #999	; 0x3e7
 800daee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800daf0:	4a0f      	ldr	r2, [pc, #60]	; (800db30 <HAL_InitTick+0xd0>)
 800daf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800daf6:	4b0e      	ldr	r3, [pc, #56]	; (800db30 <HAL_InitTick+0xd0>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dafc:	4b0c      	ldr	r3, [pc, #48]	; (800db30 <HAL_InitTick+0xd0>)
 800dafe:	2200      	movs	r2, #0
 800db00:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800db02:	480b      	ldr	r0, [pc, #44]	; (800db30 <HAL_InitTick+0xd0>)
 800db04:	f7f8 fa88 	bl	8006018 <HAL_TIM_Base_Init>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d104      	bne.n	800db18 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800db0e:	4808      	ldr	r0, [pc, #32]	; (800db30 <HAL_InitTick+0xd0>)
 800db10:	f7f8 fada 	bl	80060c8 <HAL_TIM_Base_Start_IT>
 800db14:	4603      	mov	r3, r0
 800db16:	e000      	b.n	800db1a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800db18:	2301      	movs	r3, #1
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3740      	adds	r7, #64	; 0x40
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	24000000 	.word	0x24000000
 800db28:	58024400 	.word	0x58024400
 800db2c:	431bde83 	.word	0x431bde83
 800db30:	24006c30 	.word	0x24006c30
 800db34:	40001000 	.word	0x40001000

0800db38 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800db38:	b480      	push	{r7}
 800db3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800db3c:	e7fe      	b.n	800db3c <NMI_Handler+0x4>
	...

0800db40 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	af00      	add	r7, sp, #0

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
	{
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800db44:	2201      	movs	r2, #1
 800db46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800db4a:	4802      	ldr	r0, [pc, #8]	; (800db54 <HardFault_Handler+0x14>)
 800db4c:	f7f5 fe9a 	bl	8003884 <HAL_GPIO_WritePin>
 800db50:	e7f8      	b.n	800db44 <HardFault_Handler+0x4>
 800db52:	bf00      	nop
 800db54:	58020800 	.word	0x58020800

0800db58 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800db58:	b480      	push	{r7}
 800db5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 800db5c:	e7fe      	b.n	800db5c <MemManage_Handler+0x4>

0800db5e <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800db5e:	b480      	push	{r7}
 800db60:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800db62:	e7fe      	b.n	800db62 <BusFault_Handler+0x4>

0800db64 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800db64:	b480      	push	{r7}
 800db66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 800db68:	e7fe      	b.n	800db68 <UsageFault_Handler+0x4>

0800db6a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800db6a:	b480      	push	{r7}
 800db6c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800db6e:	bf00      	nop
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800db7c:	4802      	ldr	r0, [pc, #8]	; (800db88 <DMA1_Stream0_IRQHandler+0x10>)
 800db7e:	f7f4 f99b 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800db82:	bf00      	nop
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	240072fc 	.word	0x240072fc

0800db8c <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800db90:	4802      	ldr	r0, [pc, #8]	; (800db9c <DMA1_Stream1_IRQHandler+0x10>)
 800db92:	f7f4 f991 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800db96:	bf00      	nop
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	24007374 	.word	0x24007374

0800dba0 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800dba4:	4802      	ldr	r0, [pc, #8]	; (800dbb0 <DMA1_Stream2_IRQHandler+0x10>)
 800dba6:	f7f4 f987 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800dbaa:	bf00      	nop
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	24006edc 	.word	0x24006edc

0800dbb4 <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800dbb8:	4802      	ldr	r0, [pc, #8]	; (800dbc4 <DMA1_Stream3_IRQHandler+0x10>)
 800dbba:	f7f4 f97d 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800dbbe:	bf00      	nop
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	24007164 	.word	0x24007164

0800dbc8 <DMA1_Stream4_IRQHandler>:

/**
 * @brief This function handles DMA1 stream4 global interrupt.
 */
void DMA1_Stream4_IRQHandler(void)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

	/* USER CODE END DMA1_Stream4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800dbcc:	4802      	ldr	r0, [pc, #8]	; (800dbd8 <DMA1_Stream4_IRQHandler+0x10>)
 800dbce:	f7f4 f973 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

	/* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800dbd2:	bf00      	nop
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	24006f54 	.word	0x24006f54

0800dbdc <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800dbe0:	4802      	ldr	r0, [pc, #8]	; (800dbec <DMA1_Stream5_IRQHandler+0x10>)
 800dbe2:	f7f4 f969 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800dbe6:	bf00      	nop
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	2400705c 	.word	0x2400705c

0800dbf0 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&AXIS_UART, UART_FLAG_IDLE);
 800dbfa:	4b40      	ldr	r3, [pc, #256]	; (800dcfc <USART2_IRQHandler+0x10c>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	69db      	ldr	r3, [r3, #28]
 800dc00:	f003 0310 	and.w	r3, r3, #16
 800dc04:	2b10      	cmp	r3, #16
 800dc06:	bf0c      	ite	eq
 800dc08:	2301      	moveq	r3, #1
 800dc0a:	2300      	movne	r3, #0
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d06b      	beq.n	800dcee <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&AXIS_UART);
 800dc16:	4b39      	ldr	r3, [pc, #228]	; (800dcfc <USART2_IRQHandler+0x10c>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2210      	movs	r2, #16
 800dc1c:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800dc1e:	4b38      	ldr	r3, [pc, #224]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4a38      	ldr	r2, [pc, #224]	; (800dd04 <USART2_IRQHandler+0x114>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d04a      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc28:	4b35      	ldr	r3, [pc, #212]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a36      	ldr	r2, [pc, #216]	; (800dd08 <USART2_IRQHandler+0x118>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d045      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc32:	4b33      	ldr	r3, [pc, #204]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a35      	ldr	r2, [pc, #212]	; (800dd0c <USART2_IRQHandler+0x11c>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d040      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc3c:	4b30      	ldr	r3, [pc, #192]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a33      	ldr	r2, [pc, #204]	; (800dd10 <USART2_IRQHandler+0x120>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d03b      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc46:	4b2e      	ldr	r3, [pc, #184]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a32      	ldr	r2, [pc, #200]	; (800dd14 <USART2_IRQHandler+0x124>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d036      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc50:	4b2b      	ldr	r3, [pc, #172]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a30      	ldr	r2, [pc, #192]	; (800dd18 <USART2_IRQHandler+0x128>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d031      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc5a:	4b29      	ldr	r3, [pc, #164]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4a2f      	ldr	r2, [pc, #188]	; (800dd1c <USART2_IRQHandler+0x12c>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d02c      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc64:	4b26      	ldr	r3, [pc, #152]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a2d      	ldr	r2, [pc, #180]	; (800dd20 <USART2_IRQHandler+0x130>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d027      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc6e:	4b24      	ldr	r3, [pc, #144]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a2c      	ldr	r2, [pc, #176]	; (800dd24 <USART2_IRQHandler+0x134>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d022      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc78:	4b21      	ldr	r3, [pc, #132]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a2a      	ldr	r2, [pc, #168]	; (800dd28 <USART2_IRQHandler+0x138>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d01d      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc82:	4b1f      	ldr	r3, [pc, #124]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a29      	ldr	r2, [pc, #164]	; (800dd2c <USART2_IRQHandler+0x13c>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d018      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc8c:	4b1c      	ldr	r3, [pc, #112]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a27      	ldr	r2, [pc, #156]	; (800dd30 <USART2_IRQHandler+0x140>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d013      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dc96:	4b1a      	ldr	r3, [pc, #104]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a26      	ldr	r2, [pc, #152]	; (800dd34 <USART2_IRQHandler+0x144>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d00e      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dca0:	4b17      	ldr	r3, [pc, #92]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a24      	ldr	r2, [pc, #144]	; (800dd38 <USART2_IRQHandler+0x148>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d009      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dcaa:	4b15      	ldr	r3, [pc, #84]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4a23      	ldr	r2, [pc, #140]	; (800dd3c <USART2_IRQHandler+0x14c>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d004      	beq.n	800dcbe <USART2_IRQHandler+0xce>
 800dcb4:	4b12      	ldr	r3, [pc, #72]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a21      	ldr	r2, [pc, #132]	; (800dd40 <USART2_IRQHandler+0x150>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d103      	bne.n	800dcc6 <USART2_IRQHandler+0xd6>
 800dcbe:	4b10      	ldr	r3, [pc, #64]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	e002      	b.n	800dccc <USART2_IRQHandler+0xdc>
 800dcc6:	4b0e      	ldr	r3, [pc, #56]	; (800dd00 <USART2_IRQHandler+0x110>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&AXIS_UART);
 800dccc:	480b      	ldr	r0, [pc, #44]	; (800dcfc <USART2_IRQHandler+0x10c>)
 800dcce:	f7f9 fdcd 	bl	800786c <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&AXIS_UART, UART_IT_IDLE);
 800dcd2:	4b0a      	ldr	r3, [pc, #40]	; (800dcfc <USART2_IRQHandler+0x10c>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	4b08      	ldr	r3, [pc, #32]	; (800dcfc <USART2_IRQHandler+0x10c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f022 0210 	bic.w	r2, r2, #16
 800dce0:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931_DONE_semHandle, pdFALSE);
 800dce2:	4b18      	ldr	r3, [pc, #96]	; (800dd44 <USART2_IRQHandler+0x154>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2100      	movs	r1, #0
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7fc ffd1 	bl	800ac90 <xQueueGiveFromISR>
	}
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800dcee:	4803      	ldr	r0, [pc, #12]	; (800dcfc <USART2_IRQHandler+0x10c>)
 800dcf0:	f7f9 fe50 	bl	8007994 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800dcf4:	bf00      	nop
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	2400726c 	.word	0x2400726c
 800dd00:	24006edc 	.word	0x24006edc
 800dd04:	40020010 	.word	0x40020010
 800dd08:	40020028 	.word	0x40020028
 800dd0c:	40020040 	.word	0x40020040
 800dd10:	40020058 	.word	0x40020058
 800dd14:	40020070 	.word	0x40020070
 800dd18:	40020088 	.word	0x40020088
 800dd1c:	400200a0 	.word	0x400200a0
 800dd20:	400200b8 	.word	0x400200b8
 800dd24:	40020410 	.word	0x40020410
 800dd28:	40020428 	.word	0x40020428
 800dd2c:	40020440 	.word	0x40020440
 800dd30:	40020458 	.word	0x40020458
 800dd34:	40020470 	.word	0x40020470
 800dd38:	40020488 	.word	0x40020488
 800dd3c:	400204a0 	.word	0x400204a0
 800dd40:	400204b8 	.word	0x400204b8
 800dd44:	240040f8 	.word	0x240040f8

0800dd48 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&Master_UART, UART_FLAG_IDLE);
 800dd52:	4b40      	ldr	r3, [pc, #256]	; (800de54 <USART3_IRQHandler+0x10c>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	69db      	ldr	r3, [r3, #28]
 800dd58:	f003 0310 	and.w	r3, r3, #16
 800dd5c:	2b10      	cmp	r3, #16
 800dd5e:	bf0c      	ite	eq
 800dd60:	2301      	moveq	r3, #1
 800dd62:	2300      	movne	r3, #0
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d06b      	beq.n	800de46 <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&Master_UART);
 800dd6e:	4b39      	ldr	r3, [pc, #228]	; (800de54 <USART3_IRQHandler+0x10c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2210      	movs	r2, #16
 800dd74:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&Master_UART);
 800dd76:	4837      	ldr	r0, [pc, #220]	; (800de54 <USART3_IRQHandler+0x10c>)
 800dd78:	f7f9 fd78 	bl	800786c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 800dd7c:	4b36      	ldr	r3, [pc, #216]	; (800de58 <USART3_IRQHandler+0x110>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a36      	ldr	r2, [pc, #216]	; (800de5c <USART3_IRQHandler+0x114>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d04a      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800dd86:	4b34      	ldr	r3, [pc, #208]	; (800de58 <USART3_IRQHandler+0x110>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a35      	ldr	r2, [pc, #212]	; (800de60 <USART3_IRQHandler+0x118>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d045      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800dd90:	4b31      	ldr	r3, [pc, #196]	; (800de58 <USART3_IRQHandler+0x110>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4a33      	ldr	r2, [pc, #204]	; (800de64 <USART3_IRQHandler+0x11c>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d040      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800dd9a:	4b2f      	ldr	r3, [pc, #188]	; (800de58 <USART3_IRQHandler+0x110>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a32      	ldr	r2, [pc, #200]	; (800de68 <USART3_IRQHandler+0x120>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d03b      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800dda4:	4b2c      	ldr	r3, [pc, #176]	; (800de58 <USART3_IRQHandler+0x110>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a30      	ldr	r2, [pc, #192]	; (800de6c <USART3_IRQHandler+0x124>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d036      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800ddae:	4b2a      	ldr	r3, [pc, #168]	; (800de58 <USART3_IRQHandler+0x110>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4a2f      	ldr	r2, [pc, #188]	; (800de70 <USART3_IRQHandler+0x128>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d031      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800ddb8:	4b27      	ldr	r3, [pc, #156]	; (800de58 <USART3_IRQHandler+0x110>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a2d      	ldr	r2, [pc, #180]	; (800de74 <USART3_IRQHandler+0x12c>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d02c      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800ddc2:	4b25      	ldr	r3, [pc, #148]	; (800de58 <USART3_IRQHandler+0x110>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a2c      	ldr	r2, [pc, #176]	; (800de78 <USART3_IRQHandler+0x130>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d027      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800ddcc:	4b22      	ldr	r3, [pc, #136]	; (800de58 <USART3_IRQHandler+0x110>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a2a      	ldr	r2, [pc, #168]	; (800de7c <USART3_IRQHandler+0x134>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d022      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800ddd6:	4b20      	ldr	r3, [pc, #128]	; (800de58 <USART3_IRQHandler+0x110>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a29      	ldr	r2, [pc, #164]	; (800de80 <USART3_IRQHandler+0x138>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d01d      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800dde0:	4b1d      	ldr	r3, [pc, #116]	; (800de58 <USART3_IRQHandler+0x110>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a27      	ldr	r2, [pc, #156]	; (800de84 <USART3_IRQHandler+0x13c>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d018      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800ddea:	4b1b      	ldr	r3, [pc, #108]	; (800de58 <USART3_IRQHandler+0x110>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4a26      	ldr	r2, [pc, #152]	; (800de88 <USART3_IRQHandler+0x140>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d013      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800ddf4:	4b18      	ldr	r3, [pc, #96]	; (800de58 <USART3_IRQHandler+0x110>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a24      	ldr	r2, [pc, #144]	; (800de8c <USART3_IRQHandler+0x144>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d00e      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800ddfe:	4b16      	ldr	r3, [pc, #88]	; (800de58 <USART3_IRQHandler+0x110>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a23      	ldr	r2, [pc, #140]	; (800de90 <USART3_IRQHandler+0x148>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d009      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800de08:	4b13      	ldr	r3, [pc, #76]	; (800de58 <USART3_IRQHandler+0x110>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4a21      	ldr	r2, [pc, #132]	; (800de94 <USART3_IRQHandler+0x14c>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d004      	beq.n	800de1c <USART3_IRQHandler+0xd4>
 800de12:	4b11      	ldr	r3, [pc, #68]	; (800de58 <USART3_IRQHandler+0x110>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a20      	ldr	r2, [pc, #128]	; (800de98 <USART3_IRQHandler+0x150>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d103      	bne.n	800de24 <USART3_IRQHandler+0xdc>
 800de1c:	4b0e      	ldr	r3, [pc, #56]	; (800de58 <USART3_IRQHandler+0x110>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	e002      	b.n	800de2a <USART3_IRQHandler+0xe2>
 800de24:	4b0c      	ldr	r3, [pc, #48]	; (800de58 <USART3_IRQHandler+0x110>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&Master_UART, UART_IT_IDLE);
 800de2a:	4b0a      	ldr	r3, [pc, #40]	; (800de54 <USART3_IRQHandler+0x10c>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	681a      	ldr	r2, [r3, #0]
 800de30:	4b08      	ldr	r3, [pc, #32]	; (800de54 <USART3_IRQHandler+0x10c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f022 0210 	bic.w	r2, r2, #16
 800de38:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(CMD_DONE_semHandle, pdFALSE);
 800de3a:	4b18      	ldr	r3, [pc, #96]	; (800de9c <USART3_IRQHandler+0x154>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2100      	movs	r1, #0
 800de40:	4618      	mov	r0, r3
 800de42:	f7fc ff25 	bl	800ac90 <xQueueGiveFromISR>
	}
	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 800de46:	4803      	ldr	r0, [pc, #12]	; (800de54 <USART3_IRQHandler+0x10c>)
 800de48:	f7f9 fda4 	bl	8007994 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 800de4c:	bf00      	nop
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	24006fcc 	.word	0x24006fcc
 800de58:	24006f54 	.word	0x24006f54
 800de5c:	40020010 	.word	0x40020010
 800de60:	40020028 	.word	0x40020028
 800de64:	40020040 	.word	0x40020040
 800de68:	40020058 	.word	0x40020058
 800de6c:	40020070 	.word	0x40020070
 800de70:	40020088 	.word	0x40020088
 800de74:	400200a0 	.word	0x400200a0
 800de78:	400200b8 	.word	0x400200b8
 800de7c:	40020410 	.word	0x40020410
 800de80:	40020428 	.word	0x40020428
 800de84:	40020440 	.word	0x40020440
 800de88:	40020458 	.word	0x40020458
 800de8c:	40020470 	.word	0x40020470
 800de90:	40020488 	.word	0x40020488
 800de94:	400204a0 	.word	0x400204a0
 800de98:	400204b8 	.word	0x400204b8
 800de9c:	240052a8 	.word	0x240052a8

0800dea0 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&TEMPER_UART, UART_FLAG_IDLE);
 800deaa:	4b40      	ldr	r3, [pc, #256]	; (800dfac <UART5_IRQHandler+0x10c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	69db      	ldr	r3, [r3, #28]
 800deb0:	f003 0310 	and.w	r3, r3, #16
 800deb4:	2b10      	cmp	r3, #16
 800deb6:	bf0c      	ite	eq
 800deb8:	2301      	moveq	r3, #1
 800deba:	2300      	movne	r3, #0
 800debc:	b2db      	uxtb	r3, r3
 800debe:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d06b      	beq.n	800df9e <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&TEMPER_UART);
 800dec6:	4b39      	ldr	r3, [pc, #228]	; (800dfac <UART5_IRQHandler+0x10c>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2210      	movs	r2, #16
 800decc:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&TEMPER_UART);
 800dece:	4837      	ldr	r0, [pc, #220]	; (800dfac <UART5_IRQHandler+0x10c>)
 800ded0:	f7f9 fccc 	bl	800786c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 800ded4:	4b36      	ldr	r3, [pc, #216]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a36      	ldr	r2, [pc, #216]	; (800dfb4 <UART5_IRQHandler+0x114>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d04a      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800dede:	4b34      	ldr	r3, [pc, #208]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a35      	ldr	r2, [pc, #212]	; (800dfb8 <UART5_IRQHandler+0x118>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d045      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800dee8:	4b31      	ldr	r3, [pc, #196]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a33      	ldr	r2, [pc, #204]	; (800dfbc <UART5_IRQHandler+0x11c>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d040      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800def2:	4b2f      	ldr	r3, [pc, #188]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a32      	ldr	r2, [pc, #200]	; (800dfc0 <UART5_IRQHandler+0x120>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d03b      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800defc:	4b2c      	ldr	r3, [pc, #176]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a30      	ldr	r2, [pc, #192]	; (800dfc4 <UART5_IRQHandler+0x124>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d036      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df06:	4b2a      	ldr	r3, [pc, #168]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a2f      	ldr	r2, [pc, #188]	; (800dfc8 <UART5_IRQHandler+0x128>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d031      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df10:	4b27      	ldr	r3, [pc, #156]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a2d      	ldr	r2, [pc, #180]	; (800dfcc <UART5_IRQHandler+0x12c>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d02c      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df1a:	4b25      	ldr	r3, [pc, #148]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	4a2c      	ldr	r2, [pc, #176]	; (800dfd0 <UART5_IRQHandler+0x130>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d027      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df24:	4b22      	ldr	r3, [pc, #136]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a2a      	ldr	r2, [pc, #168]	; (800dfd4 <UART5_IRQHandler+0x134>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d022      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df2e:	4b20      	ldr	r3, [pc, #128]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a29      	ldr	r2, [pc, #164]	; (800dfd8 <UART5_IRQHandler+0x138>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d01d      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df38:	4b1d      	ldr	r3, [pc, #116]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a27      	ldr	r2, [pc, #156]	; (800dfdc <UART5_IRQHandler+0x13c>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d018      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df42:	4b1b      	ldr	r3, [pc, #108]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4a26      	ldr	r2, [pc, #152]	; (800dfe0 <UART5_IRQHandler+0x140>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d013      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df4c:	4b18      	ldr	r3, [pc, #96]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a24      	ldr	r2, [pc, #144]	; (800dfe4 <UART5_IRQHandler+0x144>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d00e      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df56:	4b16      	ldr	r3, [pc, #88]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a23      	ldr	r2, [pc, #140]	; (800dfe8 <UART5_IRQHandler+0x148>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d009      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df60:	4b13      	ldr	r3, [pc, #76]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a21      	ldr	r2, [pc, #132]	; (800dfec <UART5_IRQHandler+0x14c>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d004      	beq.n	800df74 <UART5_IRQHandler+0xd4>
 800df6a:	4b11      	ldr	r3, [pc, #68]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a20      	ldr	r2, [pc, #128]	; (800dff0 <UART5_IRQHandler+0x150>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d103      	bne.n	800df7c <UART5_IRQHandler+0xdc>
 800df74:	4b0e      	ldr	r3, [pc, #56]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	e002      	b.n	800df82 <UART5_IRQHandler+0xe2>
 800df7c:	4b0c      	ldr	r3, [pc, #48]	; (800dfb0 <UART5_IRQHandler+0x110>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 800df82:	4b0a      	ldr	r3, [pc, #40]	; (800dfac <UART5_IRQHandler+0x10c>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	681a      	ldr	r2, [r3, #0]
 800df88:	4b08      	ldr	r3, [pc, #32]	; (800dfac <UART5_IRQHandler+0x10c>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f022 0210 	bic.w	r2, r2, #16
 800df90:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39_Done_semHandle, pdFALSE);
 800df92:	4b18      	ldr	r3, [pc, #96]	; (800dff4 <UART5_IRQHandler+0x154>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2100      	movs	r1, #0
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fc fe79 	bl	800ac90 <xQueueGiveFromISR>
	}
	/* USER CODE END UART5_IRQn 0 */
	HAL_UART_IRQHandler(&huart5);
 800df9e:	4803      	ldr	r0, [pc, #12]	; (800dfac <UART5_IRQHandler+0x10c>)
 800dfa0:	f7f9 fcf8 	bl	8007994 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART5_IRQn 1 */

	/* USER CODE END UART5_IRQn 1 */
}
 800dfa4:	bf00      	nop
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	240070d4 	.word	0x240070d4
 800dfb0:	240072fc 	.word	0x240072fc
 800dfb4:	40020010 	.word	0x40020010
 800dfb8:	40020028 	.word	0x40020028
 800dfbc:	40020040 	.word	0x40020040
 800dfc0:	40020058 	.word	0x40020058
 800dfc4:	40020070 	.word	0x40020070
 800dfc8:	40020088 	.word	0x40020088
 800dfcc:	400200a0 	.word	0x400200a0
 800dfd0:	400200b8 	.word	0x400200b8
 800dfd4:	40020410 	.word	0x40020410
 800dfd8:	40020428 	.word	0x40020428
 800dfdc:	40020440 	.word	0x40020440
 800dfe0:	40020458 	.word	0x40020458
 800dfe4:	40020470 	.word	0x40020470
 800dfe8:	40020488 	.word	0x40020488
 800dfec:	400204a0 	.word	0x400204a0
 800dff0:	400204b8 	.word	0x400204b8
 800dff4:	2400533c 	.word	0x2400533c

0800dff8 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 800dffc:	4802      	ldr	r0, [pc, #8]	; (800e008 <TIM6_DAC_IRQHandler+0x10>)
 800dffe:	f7f8 fa4b 	bl	8006498 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800e002:	bf00      	nop
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	24006c30 	.word	0x24006c30

0800e00c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e00c:	b480      	push	{r7}
 800e00e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e010:	4b37      	ldr	r3, [pc, #220]	; (800e0f0 <SystemInit+0xe4>)
 800e012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e016:	4a36      	ldr	r2, [pc, #216]	; (800e0f0 <SystemInit+0xe4>)
 800e018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e01c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e020:	4b34      	ldr	r3, [pc, #208]	; (800e0f4 <SystemInit+0xe8>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f003 030f 	and.w	r3, r3, #15
 800e028:	2b06      	cmp	r3, #6
 800e02a:	d807      	bhi.n	800e03c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e02c:	4b31      	ldr	r3, [pc, #196]	; (800e0f4 <SystemInit+0xe8>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f023 030f 	bic.w	r3, r3, #15
 800e034:	4a2f      	ldr	r2, [pc, #188]	; (800e0f4 <SystemInit+0xe8>)
 800e036:	f043 0307 	orr.w	r3, r3, #7
 800e03a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800e03c:	4b2e      	ldr	r3, [pc, #184]	; (800e0f8 <SystemInit+0xec>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a2d      	ldr	r2, [pc, #180]	; (800e0f8 <SystemInit+0xec>)
 800e042:	f043 0301 	orr.w	r3, r3, #1
 800e046:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e048:	4b2b      	ldr	r3, [pc, #172]	; (800e0f8 <SystemInit+0xec>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800e04e:	4b2a      	ldr	r3, [pc, #168]	; (800e0f8 <SystemInit+0xec>)
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	4929      	ldr	r1, [pc, #164]	; (800e0f8 <SystemInit+0xec>)
 800e054:	4b29      	ldr	r3, [pc, #164]	; (800e0fc <SystemInit+0xf0>)
 800e056:	4013      	ands	r3, r2
 800e058:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e05a:	4b26      	ldr	r3, [pc, #152]	; (800e0f4 <SystemInit+0xe8>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f003 0308 	and.w	r3, r3, #8
 800e062:	2b00      	cmp	r3, #0
 800e064:	d007      	beq.n	800e076 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e066:	4b23      	ldr	r3, [pc, #140]	; (800e0f4 <SystemInit+0xe8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f023 030f 	bic.w	r3, r3, #15
 800e06e:	4a21      	ldr	r2, [pc, #132]	; (800e0f4 <SystemInit+0xe8>)
 800e070:	f043 0307 	orr.w	r3, r3, #7
 800e074:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800e076:	4b20      	ldr	r3, [pc, #128]	; (800e0f8 <SystemInit+0xec>)
 800e078:	2200      	movs	r2, #0
 800e07a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800e07c:	4b1e      	ldr	r3, [pc, #120]	; (800e0f8 <SystemInit+0xec>)
 800e07e:	2200      	movs	r2, #0
 800e080:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800e082:	4b1d      	ldr	r3, [pc, #116]	; (800e0f8 <SystemInit+0xec>)
 800e084:	2200      	movs	r2, #0
 800e086:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800e088:	4b1b      	ldr	r3, [pc, #108]	; (800e0f8 <SystemInit+0xec>)
 800e08a:	4a1d      	ldr	r2, [pc, #116]	; (800e100 <SystemInit+0xf4>)
 800e08c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800e08e:	4b1a      	ldr	r3, [pc, #104]	; (800e0f8 <SystemInit+0xec>)
 800e090:	4a1c      	ldr	r2, [pc, #112]	; (800e104 <SystemInit+0xf8>)
 800e092:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800e094:	4b18      	ldr	r3, [pc, #96]	; (800e0f8 <SystemInit+0xec>)
 800e096:	4a1c      	ldr	r2, [pc, #112]	; (800e108 <SystemInit+0xfc>)
 800e098:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800e09a:	4b17      	ldr	r3, [pc, #92]	; (800e0f8 <SystemInit+0xec>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800e0a0:	4b15      	ldr	r3, [pc, #84]	; (800e0f8 <SystemInit+0xec>)
 800e0a2:	4a19      	ldr	r2, [pc, #100]	; (800e108 <SystemInit+0xfc>)
 800e0a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800e0a6:	4b14      	ldr	r3, [pc, #80]	; (800e0f8 <SystemInit+0xec>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800e0ac:	4b12      	ldr	r3, [pc, #72]	; (800e0f8 <SystemInit+0xec>)
 800e0ae:	4a16      	ldr	r2, [pc, #88]	; (800e108 <SystemInit+0xfc>)
 800e0b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800e0b2:	4b11      	ldr	r3, [pc, #68]	; (800e0f8 <SystemInit+0xec>)
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e0b8:	4b0f      	ldr	r3, [pc, #60]	; (800e0f8 <SystemInit+0xec>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a0e      	ldr	r2, [pc, #56]	; (800e0f8 <SystemInit+0xec>)
 800e0be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e0c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800e0c4:	4b0c      	ldr	r3, [pc, #48]	; (800e0f8 <SystemInit+0xec>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e0ca:	4b10      	ldr	r3, [pc, #64]	; (800e10c <SystemInit+0x100>)
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	4b10      	ldr	r3, [pc, #64]	; (800e110 <SystemInit+0x104>)
 800e0d0:	4013      	ands	r3, r2
 800e0d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0d6:	d202      	bcs.n	800e0de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800e0d8:	4b0e      	ldr	r3, [pc, #56]	; (800e114 <SystemInit+0x108>)
 800e0da:	2201      	movs	r2, #1
 800e0dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800e0de:	4b0e      	ldr	r3, [pc, #56]	; (800e118 <SystemInit+0x10c>)
 800e0e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800e0e4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800e0e6:	bf00      	nop
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr
 800e0f0:	e000ed00 	.word	0xe000ed00
 800e0f4:	52002000 	.word	0x52002000
 800e0f8:	58024400 	.word	0x58024400
 800e0fc:	eaf6ed7f 	.word	0xeaf6ed7f
 800e100:	02020200 	.word	0x02020200
 800e104:	01ff0000 	.word	0x01ff0000
 800e108:	01010280 	.word	0x01010280
 800e10c:	5c001000 	.word	0x5c001000
 800e110:	ffff0000 	.word	0xffff0000
 800e114:	51008108 	.word	0x51008108
 800e118:	52004000 	.word	0x52004000

0800e11c <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b09a      	sub	sp, #104	; 0x68
 800e120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e122:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e126:	2200      	movs	r2, #0
 800e128:	601a      	str	r2, [r3, #0]
 800e12a:	605a      	str	r2, [r3, #4]
 800e12c:	609a      	str	r2, [r3, #8]
 800e12e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e130:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e134:	2200      	movs	r2, #0
 800e136:	601a      	str	r2, [r3, #0]
 800e138:	605a      	str	r2, [r3, #4]
 800e13a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e13c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e140:	2200      	movs	r2, #0
 800e142:	601a      	str	r2, [r3, #0]
 800e144:	605a      	str	r2, [r3, #4]
 800e146:	609a      	str	r2, [r3, #8]
 800e148:	60da      	str	r2, [r3, #12]
 800e14a:	611a      	str	r2, [r3, #16]
 800e14c:	615a      	str	r2, [r3, #20]
 800e14e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800e150:	1d3b      	adds	r3, r7, #4
 800e152:	222c      	movs	r2, #44	; 0x2c
 800e154:	2100      	movs	r1, #0
 800e156:	4618      	mov	r0, r3
 800e158:	f001 fb0a 	bl	800f770 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800e15c:	4b50      	ldr	r3, [pc, #320]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e15e:	4a51      	ldr	r2, [pc, #324]	; (800e2a4 <MX_TIM1_Init+0x188>)
 800e160:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800e162:	4b4f      	ldr	r3, [pc, #316]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e164:	22c7      	movs	r2, #199	; 0xc7
 800e166:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e168:	4b4d      	ldr	r3, [pc, #308]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800e16e:	4b4c      	ldr	r3, [pc, #304]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e170:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e174:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e176:	4b4a      	ldr	r3, [pc, #296]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e178:	2200      	movs	r2, #0
 800e17a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800e17c:	4b48      	ldr	r3, [pc, #288]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e17e:	2200      	movs	r2, #0
 800e180:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e182:	4b47      	ldr	r3, [pc, #284]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e184:	2200      	movs	r2, #0
 800e186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800e188:	4845      	ldr	r0, [pc, #276]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e18a:	f7f7 ff45 	bl	8006018 <HAL_TIM_Base_Init>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d001      	beq.n	800e198 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800e194:	f7ff fc40 	bl	800da18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e19c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800e19e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	483e      	ldr	r0, [pc, #248]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e1a6:	f7f8 fbab 	bl	8006900 <HAL_TIM_ConfigClockSource>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d001      	beq.n	800e1b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800e1b0:	f7ff fc32 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800e1b4:	483a      	ldr	r0, [pc, #232]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e1b6:	f7f7 ffff 	bl	80061b8 <HAL_TIM_PWM_Init>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800e1c0:	f7ff fc2a 	bl	800da18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800e1d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	4832      	ldr	r0, [pc, #200]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e1d8:	f7f9 f8e6 	bl	80073a8 <HAL_TIMEx_MasterConfigSynchronization>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800e1e2:	f7ff fc19 	bl	800da18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e1e6:	2360      	movs	r3, #96	; 0x60
 800e1e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800e1ea:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e1ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e200:	2300      	movs	r3, #0
 800e202:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e208:	2200      	movs	r2, #0
 800e20a:	4619      	mov	r1, r3
 800e20c:	4824      	ldr	r0, [pc, #144]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e20e:	f7f8 fa63 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800e218:	f7ff fbfe 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e21c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e220:	2204      	movs	r2, #4
 800e222:	4619      	mov	r1, r3
 800e224:	481e      	ldr	r0, [pc, #120]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e226:	f7f8 fa57 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800e230:	f7ff fbf2 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e234:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e238:	2208      	movs	r2, #8
 800e23a:	4619      	mov	r1, r3
 800e23c:	4818      	ldr	r0, [pc, #96]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e23e:	f7f8 fa4b 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d001      	beq.n	800e24c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800e248:	f7ff fbe6 	bl	800da18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e24c:	2300      	movs	r3, #0
 800e24e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e250:	2300      	movs	r3, #0
 800e252:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e254:	2300      	movs	r3, #0
 800e256:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e258:	2300      	movs	r3, #0
 800e25a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e25c:	2300      	movs	r3, #0
 800e25e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e264:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800e26a:	2300      	movs	r3, #0
 800e26c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800e26e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e272:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800e274:	2300      	movs	r3, #0
 800e276:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e278:	2300      	movs	r3, #0
 800e27a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800e27c:	1d3b      	adds	r3, r7, #4
 800e27e:	4619      	mov	r1, r3
 800e280:	4807      	ldr	r0, [pc, #28]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e282:	f7f9 f91f 	bl	80074c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d001      	beq.n	800e290 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 800e28c:	f7ff fbc4 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800e290:	4803      	ldr	r0, [pc, #12]	; (800e2a0 <MX_TIM1_Init+0x184>)
 800e292:	f000 fcbb 	bl	800ec0c <HAL_TIM_MspPostInit>

}
 800e296:	bf00      	nop
 800e298:	3768      	adds	r7, #104	; 0x68
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	24006df8 	.word	0x24006df8
 800e2a4:	40010000 	.word	0x40010000

0800e2a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b08e      	sub	sp, #56	; 0x38
 800e2ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e2ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	601a      	str	r2, [r3, #0]
 800e2b6:	605a      	str	r2, [r3, #4]
 800e2b8:	609a      	str	r2, [r3, #8]
 800e2ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e2bc:	f107 031c 	add.w	r3, r7, #28
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	605a      	str	r2, [r3, #4]
 800e2c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e2c8:	463b      	mov	r3, r7
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	605a      	str	r2, [r3, #4]
 800e2d0:	609a      	str	r2, [r3, #8]
 800e2d2:	60da      	str	r2, [r3, #12]
 800e2d4:	611a      	str	r2, [r3, #16]
 800e2d6:	615a      	str	r2, [r3, #20]
 800e2d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e2da:	4b39      	ldr	r3, [pc, #228]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e2dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e2e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800e2e2:	4b37      	ldr	r3, [pc, #220]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e2e4:	22c7      	movs	r2, #199	; 0xc7
 800e2e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e2e8:	4b35      	ldr	r3, [pc, #212]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800e2ee:	4b34      	ldr	r3, [pc, #208]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e2f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e2f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e2f6:	4b32      	ldr	r3, [pc, #200]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e2fc:	4b30      	ldr	r3, [pc, #192]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e2fe:	2200      	movs	r2, #0
 800e300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e302:	482f      	ldr	r0, [pc, #188]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e304:	f7f7 fe88 	bl	8006018 <HAL_TIM_Base_Init>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d001      	beq.n	800e312 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800e30e:	f7ff fb83 	bl	800da18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e316:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e31c:	4619      	mov	r1, r3
 800e31e:	4828      	ldr	r0, [pc, #160]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e320:	f7f8 faee 	bl	8006900 <HAL_TIM_ConfigClockSource>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800e32a:	f7ff fb75 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e32e:	4824      	ldr	r0, [pc, #144]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e330:	f7f7 ff42 	bl	80061b8 <HAL_TIM_PWM_Init>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800e33a:	f7ff fb6d 	bl	800da18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e33e:	2300      	movs	r3, #0
 800e340:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e342:	2300      	movs	r3, #0
 800e344:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e346:	f107 031c 	add.w	r3, r7, #28
 800e34a:	4619      	mov	r1, r3
 800e34c:	481c      	ldr	r0, [pc, #112]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e34e:	f7f9 f82b 	bl	80073a8 <HAL_TIMEx_MasterConfigSynchronization>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800e358:	f7ff fb5e 	bl	800da18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e35c:	2360      	movs	r3, #96	; 0x60
 800e35e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800e360:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e364:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e366:	2300      	movs	r3, #0
 800e368:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e36a:	2300      	movs	r3, #0
 800e36c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e36e:	463b      	mov	r3, r7
 800e370:	2200      	movs	r2, #0
 800e372:	4619      	mov	r1, r3
 800e374:	4812      	ldr	r0, [pc, #72]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e376:	f7f8 f9af 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d001      	beq.n	800e384 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800e380:	f7ff fb4a 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e384:	463b      	mov	r3, r7
 800e386:	2204      	movs	r2, #4
 800e388:	4619      	mov	r1, r3
 800e38a:	480d      	ldr	r0, [pc, #52]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e38c:	f7f8 f9a4 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d001      	beq.n	800e39a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800e396:	f7ff fb3f 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e39a:	463b      	mov	r3, r7
 800e39c:	2208      	movs	r2, #8
 800e39e:	4619      	mov	r1, r3
 800e3a0:	4807      	ldr	r0, [pc, #28]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e3a2:	f7f8 f999 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d001      	beq.n	800e3b0 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 800e3ac:	f7ff fb34 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e3b0:	4803      	ldr	r0, [pc, #12]	; (800e3c0 <MX_TIM2_Init+0x118>)
 800e3b2:	f000 fc2b 	bl	800ec0c <HAL_TIM_MspPostInit>

}
 800e3b6:	bf00      	nop
 800e3b8:	3738      	adds	r7, #56	; 0x38
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	24006e44 	.word	0x24006e44

0800e3c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b08e      	sub	sp, #56	; 0x38
 800e3c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e3ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	601a      	str	r2, [r3, #0]
 800e3d2:	605a      	str	r2, [r3, #4]
 800e3d4:	609a      	str	r2, [r3, #8]
 800e3d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e3d8:	f107 031c 	add.w	r3, r7, #28
 800e3dc:	2200      	movs	r2, #0
 800e3de:	601a      	str	r2, [r3, #0]
 800e3e0:	605a      	str	r2, [r3, #4]
 800e3e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e3e4:	463b      	mov	r3, r7
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	601a      	str	r2, [r3, #0]
 800e3ea:	605a      	str	r2, [r3, #4]
 800e3ec:	609a      	str	r2, [r3, #8]
 800e3ee:	60da      	str	r2, [r3, #12]
 800e3f0:	611a      	str	r2, [r3, #16]
 800e3f2:	615a      	str	r2, [r3, #20]
 800e3f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e3f6:	4b38      	ldr	r3, [pc, #224]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e3f8:	4a38      	ldr	r2, [pc, #224]	; (800e4dc <MX_TIM3_Init+0x118>)
 800e3fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 800e3fc:	4b36      	ldr	r3, [pc, #216]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e3fe:	22c7      	movs	r2, #199	; 0xc7
 800e400:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e402:	4b35      	ldr	r3, [pc, #212]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e404:	2200      	movs	r2, #0
 800e406:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800e408:	4b33      	ldr	r3, [pc, #204]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e40a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e40e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e410:	4b31      	ldr	r3, [pc, #196]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e412:	2200      	movs	r2, #0
 800e414:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e416:	4b30      	ldr	r3, [pc, #192]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e418:	2200      	movs	r2, #0
 800e41a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e41c:	482e      	ldr	r0, [pc, #184]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e41e:	f7f7 fdfb 	bl	8006018 <HAL_TIM_Base_Init>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d001      	beq.n	800e42c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800e428:	f7ff faf6 	bl	800da18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e42c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e430:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800e432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e436:	4619      	mov	r1, r3
 800e438:	4827      	ldr	r0, [pc, #156]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e43a:	f7f8 fa61 	bl	8006900 <HAL_TIM_ConfigClockSource>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800e444:	f7ff fae8 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e448:	4823      	ldr	r0, [pc, #140]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e44a:	f7f7 feb5 	bl	80061b8 <HAL_TIM_PWM_Init>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d001      	beq.n	800e458 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800e454:	f7ff fae0 	bl	800da18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e458:	2300      	movs	r3, #0
 800e45a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e45c:	2300      	movs	r3, #0
 800e45e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e460:	f107 031c 	add.w	r3, r7, #28
 800e464:	4619      	mov	r1, r3
 800e466:	481c      	ldr	r0, [pc, #112]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e468:	f7f8 ff9e 	bl	80073a8 <HAL_TIMEx_MasterConfigSynchronization>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d001      	beq.n	800e476 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800e472:	f7ff fad1 	bl	800da18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e476:	2360      	movs	r3, #96	; 0x60
 800e478:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800e47a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e47e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e480:	2300      	movs	r3, #0
 800e482:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e484:	2300      	movs	r3, #0
 800e486:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e488:	463b      	mov	r3, r7
 800e48a:	2200      	movs	r2, #0
 800e48c:	4619      	mov	r1, r3
 800e48e:	4812      	ldr	r0, [pc, #72]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e490:	f7f8 f922 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800e49a:	f7ff fabd 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e49e:	463b      	mov	r3, r7
 800e4a0:	2204      	movs	r2, #4
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	480c      	ldr	r0, [pc, #48]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e4a6:	f7f8 f917 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d001      	beq.n	800e4b4 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800e4b0:	f7ff fab2 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e4b4:	463b      	mov	r3, r7
 800e4b6:	2208      	movs	r2, #8
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	4807      	ldr	r0, [pc, #28]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e4bc:	f7f8 f90c 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800e4c6:	f7ff faa7 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e4ca:	4803      	ldr	r0, [pc, #12]	; (800e4d8 <MX_TIM3_Init+0x114>)
 800e4cc:	f000 fb9e 	bl	800ec0c <HAL_TIM_MspPostInit>

}
 800e4d0:	bf00      	nop
 800e4d2:	3738      	adds	r7, #56	; 0x38
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	24006dac 	.word	0x24006dac
 800e4dc:	40000400 	.word	0x40000400

0800e4e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b08e      	sub	sp, #56	; 0x38
 800e4e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e4e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	601a      	str	r2, [r3, #0]
 800e4ee:	605a      	str	r2, [r3, #4]
 800e4f0:	609a      	str	r2, [r3, #8]
 800e4f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e4f4:	f107 031c 	add.w	r3, r7, #28
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	601a      	str	r2, [r3, #0]
 800e4fc:	605a      	str	r2, [r3, #4]
 800e4fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e500:	463b      	mov	r3, r7
 800e502:	2200      	movs	r2, #0
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	605a      	str	r2, [r3, #4]
 800e508:	609a      	str	r2, [r3, #8]
 800e50a:	60da      	str	r2, [r3, #12]
 800e50c:	611a      	str	r2, [r3, #16]
 800e50e:	615a      	str	r2, [r3, #20]
 800e510:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800e512:	4b38      	ldr	r3, [pc, #224]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e514:	4a38      	ldr	r2, [pc, #224]	; (800e5f8 <MX_TIM4_Init+0x118>)
 800e516:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 800e518:	4b36      	ldr	r3, [pc, #216]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e51a:	22c7      	movs	r2, #199	; 0xc7
 800e51c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e51e:	4b35      	ldr	r3, [pc, #212]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e520:	2200      	movs	r2, #0
 800e522:	609a      	str	r2, [r3, #8]
//  htim4.Init.Period = 20000-1;
  htim4.Init.Period = 2000-1;
 800e524:	4b33      	ldr	r3, [pc, #204]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e526:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800e52a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e52c:	4b31      	ldr	r3, [pc, #196]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e52e:	2200      	movs	r2, #0
 800e530:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e532:	4b30      	ldr	r3, [pc, #192]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e534:	2200      	movs	r2, #0
 800e536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800e538:	482e      	ldr	r0, [pc, #184]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e53a:	f7f7 fd6d 	bl	8006018 <HAL_TIM_Base_Init>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d001      	beq.n	800e548 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800e544:	f7ff fa68 	bl	800da18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e54c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800e54e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e552:	4619      	mov	r1, r3
 800e554:	4827      	ldr	r0, [pc, #156]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e556:	f7f8 f9d3 	bl	8006900 <HAL_TIM_ConfigClockSource>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d001      	beq.n	800e564 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800e560:	f7ff fa5a 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800e564:	4823      	ldr	r0, [pc, #140]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e566:	f7f7 fe27 	bl	80061b8 <HAL_TIM_PWM_Init>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800e570:	f7ff fa52 	bl	800da18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e574:	2300      	movs	r3, #0
 800e576:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e578:	2300      	movs	r3, #0
 800e57a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e57c:	f107 031c 	add.w	r3, r7, #28
 800e580:	4619      	mov	r1, r3
 800e582:	481c      	ldr	r0, [pc, #112]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e584:	f7f8 ff10 	bl	80073a8 <HAL_TIMEx_MasterConfigSynchronization>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800e58e:	f7ff fa43 	bl	800da18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e592:	2360      	movs	r3, #96	; 0x60
 800e594:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800e596:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e59a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e59c:	2300      	movs	r3, #0
 800e59e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e5a4:	463b      	mov	r3, r7
 800e5a6:	2204      	movs	r2, #4
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	4812      	ldr	r0, [pc, #72]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e5ac:	f7f8 f894 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800e5b6:	f7ff fa2f 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e5ba:	463b      	mov	r3, r7
 800e5bc:	2208      	movs	r2, #8
 800e5be:	4619      	mov	r1, r3
 800e5c0:	480c      	ldr	r0, [pc, #48]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e5c2:	f7f8 f889 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 800e5cc:	f7ff fa24 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e5d0:	463b      	mov	r3, r7
 800e5d2:	220c      	movs	r2, #12
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4807      	ldr	r0, [pc, #28]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e5d8:	f7f8 f87e 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 800e5e2:	f7ff fa19 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800e5e6:	4803      	ldr	r0, [pc, #12]	; (800e5f4 <MX_TIM4_Init+0x114>)
 800e5e8:	f000 fb10 	bl	800ec0c <HAL_TIM_MspPostInit>

}
 800e5ec:	bf00      	nop
 800e5ee:	3738      	adds	r7, #56	; 0x38
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	24006cc8 	.word	0x24006cc8
 800e5f8:	40000800 	.word	0x40000800

0800e5fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08e      	sub	sp, #56	; 0x38
 800e600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e606:	2200      	movs	r2, #0
 800e608:	601a      	str	r2, [r3, #0]
 800e60a:	605a      	str	r2, [r3, #4]
 800e60c:	609a      	str	r2, [r3, #8]
 800e60e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e610:	f107 031c 	add.w	r3, r7, #28
 800e614:	2200      	movs	r2, #0
 800e616:	601a      	str	r2, [r3, #0]
 800e618:	605a      	str	r2, [r3, #4]
 800e61a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e61c:	463b      	mov	r3, r7
 800e61e:	2200      	movs	r2, #0
 800e620:	601a      	str	r2, [r3, #0]
 800e622:	605a      	str	r2, [r3, #4]
 800e624:	609a      	str	r2, [r3, #8]
 800e626:	60da      	str	r2, [r3, #12]
 800e628:	611a      	str	r2, [r3, #16]
 800e62a:	615a      	str	r2, [r3, #20]
 800e62c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800e62e:	4b33      	ldr	r3, [pc, #204]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e630:	4a33      	ldr	r2, [pc, #204]	; (800e700 <MX_TIM5_Init+0x104>)
 800e632:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800e634:	4b31      	ldr	r3, [pc, #196]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e636:	22c7      	movs	r2, #199	; 0xc7
 800e638:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e63a:	4b30      	ldr	r3, [pc, #192]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e63c:	2200      	movs	r2, #0
 800e63e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 800e640:	4b2e      	ldr	r3, [pc, #184]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e642:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e646:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e648:	4b2c      	ldr	r3, [pc, #176]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e64a:	2200      	movs	r2, #0
 800e64c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e64e:	4b2b      	ldr	r3, [pc, #172]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e650:	2200      	movs	r2, #0
 800e652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800e654:	4829      	ldr	r0, [pc, #164]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e656:	f7f7 fcdf 	bl	8006018 <HAL_TIM_Base_Init>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800e660:	f7ff f9da 	bl	800da18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e668:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800e66a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e66e:	4619      	mov	r1, r3
 800e670:	4822      	ldr	r0, [pc, #136]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e672:	f7f8 f945 	bl	8006900 <HAL_TIM_ConfigClockSource>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d001      	beq.n	800e680 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800e67c:	f7ff f9cc 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800e680:	481e      	ldr	r0, [pc, #120]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e682:	f7f7 fd99 	bl	80061b8 <HAL_TIM_PWM_Init>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d001      	beq.n	800e690 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800e68c:	f7ff f9c4 	bl	800da18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e690:	2300      	movs	r3, #0
 800e692:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e694:	2300      	movs	r3, #0
 800e696:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800e698:	f107 031c 	add.w	r3, r7, #28
 800e69c:	4619      	mov	r1, r3
 800e69e:	4817      	ldr	r0, [pc, #92]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e6a0:	f7f8 fe82 	bl	80073a8 <HAL_TIMEx_MasterConfigSynchronization>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800e6aa:	f7ff f9b5 	bl	800da18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e6ae:	2360      	movs	r3, #96	; 0x60
 800e6b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800e6b2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e6b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e6c0:	463b      	mov	r3, r7
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	480d      	ldr	r0, [pc, #52]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e6c8:	f7f8 f806 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d001      	beq.n	800e6d6 <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 800e6d2:	f7ff f9a1 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e6d6:	463b      	mov	r3, r7
 800e6d8:	2204      	movs	r2, #4
 800e6da:	4619      	mov	r1, r3
 800e6dc:	4807      	ldr	r0, [pc, #28]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e6de:	f7f7 fffb 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d001      	beq.n	800e6ec <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 800e6e8:	f7ff f996 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800e6ec:	4803      	ldr	r0, [pc, #12]	; (800e6fc <MX_TIM5_Init+0x100>)
 800e6ee:	f000 fa8d 	bl	800ec0c <HAL_TIM_MspPostInit>

}
 800e6f2:	bf00      	nop
 800e6f4:	3738      	adds	r7, #56	; 0x38
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	24006d60 	.word	0x24006d60
 800e700:	40000c00 	.word	0x40000c00

0800e704 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b09a      	sub	sp, #104	; 0x68
 800e708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e70a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e70e:	2200      	movs	r2, #0
 800e710:	601a      	str	r2, [r3, #0]
 800e712:	605a      	str	r2, [r3, #4]
 800e714:	609a      	str	r2, [r3, #8]
 800e716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e718:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e71c:	2200      	movs	r2, #0
 800e71e:	601a      	str	r2, [r3, #0]
 800e720:	605a      	str	r2, [r3, #4]
 800e722:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e728:	2200      	movs	r2, #0
 800e72a:	601a      	str	r2, [r3, #0]
 800e72c:	605a      	str	r2, [r3, #4]
 800e72e:	609a      	str	r2, [r3, #8]
 800e730:	60da      	str	r2, [r3, #12]
 800e732:	611a      	str	r2, [r3, #16]
 800e734:	615a      	str	r2, [r3, #20]
 800e736:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800e738:	1d3b      	adds	r3, r7, #4
 800e73a:	222c      	movs	r2, #44	; 0x2c
 800e73c:	2100      	movs	r1, #0
 800e73e:	4618      	mov	r0, r3
 800e740:	f001 f816 	bl	800f770 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800e744:	4b44      	ldr	r3, [pc, #272]	; (800e858 <MX_TIM8_Init+0x154>)
 800e746:	4a45      	ldr	r2, [pc, #276]	; (800e85c <MX_TIM8_Init+0x158>)
 800e748:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 200-1;
 800e74a:	4b43      	ldr	r3, [pc, #268]	; (800e858 <MX_TIM8_Init+0x154>)
 800e74c:	22c7      	movs	r2, #199	; 0xc7
 800e74e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e750:	4b41      	ldr	r3, [pc, #260]	; (800e858 <MX_TIM8_Init+0x154>)
 800e752:	2200      	movs	r2, #0
 800e754:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 800e756:	4b40      	ldr	r3, [pc, #256]	; (800e858 <MX_TIM8_Init+0x154>)
 800e758:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e75c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e75e:	4b3e      	ldr	r3, [pc, #248]	; (800e858 <MX_TIM8_Init+0x154>)
 800e760:	2200      	movs	r2, #0
 800e762:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800e764:	4b3c      	ldr	r3, [pc, #240]	; (800e858 <MX_TIM8_Init+0x154>)
 800e766:	2200      	movs	r2, #0
 800e768:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e76a:	4b3b      	ldr	r3, [pc, #236]	; (800e858 <MX_TIM8_Init+0x154>)
 800e76c:	2200      	movs	r2, #0
 800e76e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800e770:	4839      	ldr	r0, [pc, #228]	; (800e858 <MX_TIM8_Init+0x154>)
 800e772:	f7f7 fc51 	bl	8006018 <HAL_TIM_Base_Init>
 800e776:	4603      	mov	r3, r0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d001      	beq.n	800e780 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800e77c:	f7ff f94c 	bl	800da18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e784:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800e786:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e78a:	4619      	mov	r1, r3
 800e78c:	4832      	ldr	r0, [pc, #200]	; (800e858 <MX_TIM8_Init+0x154>)
 800e78e:	f7f8 f8b7 	bl	8006900 <HAL_TIM_ConfigClockSource>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d001      	beq.n	800e79c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800e798:	f7ff f93e 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800e79c:	482e      	ldr	r0, [pc, #184]	; (800e858 <MX_TIM8_Init+0x154>)
 800e79e:	f7f7 fd0b 	bl	80061b8 <HAL_TIM_PWM_Init>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800e7a8:	f7ff f936 	bl	800da18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800e7b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e7bc:	4619      	mov	r1, r3
 800e7be:	4826      	ldr	r0, [pc, #152]	; (800e858 <MX_TIM8_Init+0x154>)
 800e7c0:	f7f8 fdf2 	bl	80073a8 <HAL_TIMEx_MasterConfigSynchronization>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800e7ca:	f7ff f925 	bl	800da18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e7ce:	2360      	movs	r3, #96	; 0x60
 800e7d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800e7d2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e7d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e7ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e7f0:	2208      	movs	r2, #8
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	4818      	ldr	r0, [pc, #96]	; (800e858 <MX_TIM8_Init+0x154>)
 800e7f6:	f7f7 ff6f 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800e800:	f7ff f90a 	bl	800da18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e804:	2300      	movs	r3, #0
 800e806:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e808:	2300      	movs	r3, #0
 800e80a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e80c:	2300      	movs	r3, #0
 800e80e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e810:	2300      	movs	r3, #0
 800e812:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e814:	2300      	movs	r3, #0
 800e816:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e81c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800e81e:	2300      	movs	r3, #0
 800e820:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800e822:	2300      	movs	r3, #0
 800e824:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800e826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e82a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800e82c:	2300      	movs	r3, #0
 800e82e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e830:	2300      	movs	r3, #0
 800e832:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800e834:	1d3b      	adds	r3, r7, #4
 800e836:	4619      	mov	r1, r3
 800e838:	4807      	ldr	r0, [pc, #28]	; (800e858 <MX_TIM8_Init+0x154>)
 800e83a:	f7f8 fe43 	bl	80074c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d001      	beq.n	800e848 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 800e844:	f7ff f8e8 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800e848:	4803      	ldr	r0, [pc, #12]	; (800e858 <MX_TIM8_Init+0x154>)
 800e84a:	f000 f9df 	bl	800ec0c <HAL_TIM_MspPostInit>

}
 800e84e:	bf00      	nop
 800e850:	3768      	adds	r7, #104	; 0x68
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	24006c7c 	.word	0x24006c7c
 800e85c:	40010400 	.word	0x40010400

0800e860 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b08c      	sub	sp, #48	; 0x30
 800e864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e866:	f107 0320 	add.w	r3, r7, #32
 800e86a:	2200      	movs	r2, #0
 800e86c:	601a      	str	r2, [r3, #0]
 800e86e:	605a      	str	r2, [r3, #4]
 800e870:	609a      	str	r2, [r3, #8]
 800e872:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e874:	1d3b      	adds	r3, r7, #4
 800e876:	2200      	movs	r2, #0
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	605a      	str	r2, [r3, #4]
 800e87c:	609a      	str	r2, [r3, #8]
 800e87e:	60da      	str	r2, [r3, #12]
 800e880:	611a      	str	r2, [r3, #16]
 800e882:	615a      	str	r2, [r3, #20]
 800e884:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800e886:	4b26      	ldr	r3, [pc, #152]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e888:	4a26      	ldr	r2, [pc, #152]	; (800e924 <MX_TIM12_Init+0xc4>)
 800e88a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 800e88c:	4b24      	ldr	r3, [pc, #144]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e88e:	22c7      	movs	r2, #199	; 0xc7
 800e890:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e892:	4b23      	ldr	r3, [pc, #140]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e894:	2200      	movs	r2, #0
 800e896:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 800e898:	4b21      	ldr	r3, [pc, #132]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e89a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e89e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e8a0:	4b1f      	ldr	r3, [pc, #124]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e8a6:	4b1e      	ldr	r3, [pc, #120]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800e8ac:	481c      	ldr	r0, [pc, #112]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e8ae:	f7f7 fbb3 	bl	8006018 <HAL_TIM_Base_Init>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d001      	beq.n	800e8bc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800e8b8:	f7ff f8ae 	bl	800da18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e8bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e8c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800e8c2:	f107 0320 	add.w	r3, r7, #32
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	4815      	ldr	r0, [pc, #84]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e8ca:	f7f8 f819 	bl	8006900 <HAL_TIM_ConfigClockSource>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d001      	beq.n	800e8d8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800e8d4:	f7ff f8a0 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800e8d8:	4811      	ldr	r0, [pc, #68]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e8da:	f7f7 fc6d 	bl	80061b8 <HAL_TIM_PWM_Init>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d001      	beq.n	800e8e8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800e8e4:	f7ff f898 	bl	800da18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e8e8:	2360      	movs	r3, #96	; 0x60
 800e8ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800e8ec:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e8f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e8fa:	1d3b      	adds	r3, r7, #4
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	4619      	mov	r1, r3
 800e900:	4807      	ldr	r0, [pc, #28]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e902:	f7f7 fee9 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800e906:	4603      	mov	r3, r0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d001      	beq.n	800e910 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 800e90c:	f7ff f884 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800e910:	4803      	ldr	r0, [pc, #12]	; (800e920 <MX_TIM12_Init+0xc0>)
 800e912:	f000 f97b 	bl	800ec0c <HAL_TIM_MspPostInit>

}
 800e916:	bf00      	nop
 800e918:	3730      	adds	r7, #48	; 0x30
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	24006e90 	.word	0x24006e90
 800e924:	40001800 	.word	0x40001800

0800e928 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b09a      	sub	sp, #104	; 0x68
 800e92c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e92e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e932:	2200      	movs	r2, #0
 800e934:	601a      	str	r2, [r3, #0]
 800e936:	605a      	str	r2, [r3, #4]
 800e938:	609a      	str	r2, [r3, #8]
 800e93a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e93c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e940:	2200      	movs	r2, #0
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	605a      	str	r2, [r3, #4]
 800e946:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e94c:	2200      	movs	r2, #0
 800e94e:	601a      	str	r2, [r3, #0]
 800e950:	605a      	str	r2, [r3, #4]
 800e952:	609a      	str	r2, [r3, #8]
 800e954:	60da      	str	r2, [r3, #12]
 800e956:	611a      	str	r2, [r3, #16]
 800e958:	615a      	str	r2, [r3, #20]
 800e95a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800e95c:	1d3b      	adds	r3, r7, #4
 800e95e:	222c      	movs	r2, #44	; 0x2c
 800e960:	2100      	movs	r1, #0
 800e962:	4618      	mov	r0, r3
 800e964:	f000 ff04 	bl	800f770 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800e968:	4b45      	ldr	r3, [pc, #276]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e96a:	4a46      	ldr	r2, [pc, #280]	; (800ea84 <MX_TIM15_Init+0x15c>)
 800e96c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 200-1;
 800e96e:	4b44      	ldr	r3, [pc, #272]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e970:	22c7      	movs	r2, #199	; 0xc7
 800e972:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e974:	4b42      	ldr	r3, [pc, #264]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e976:	2200      	movs	r2, #0
 800e978:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 800e97a:	4b41      	ldr	r3, [pc, #260]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e97c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e980:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e982:	4b3f      	ldr	r3, [pc, #252]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e984:	2200      	movs	r2, #0
 800e986:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800e988:	4b3d      	ldr	r3, [pc, #244]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e98e:	4b3c      	ldr	r3, [pc, #240]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e990:	2200      	movs	r2, #0
 800e992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800e994:	483a      	ldr	r0, [pc, #232]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e996:	f7f7 fb3f 	bl	8006018 <HAL_TIM_Base_Init>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800e9a0:	f7ff f83a 	bl	800da18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e9a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800e9aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	4833      	ldr	r0, [pc, #204]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e9b2:	f7f7 ffa5 	bl	8006900 <HAL_TIM_ConfigClockSource>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d001      	beq.n	800e9c0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800e9bc:	f7ff f82c 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800e9c0:	482f      	ldr	r0, [pc, #188]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e9c2:	f7f7 fbf9 	bl	80061b8 <HAL_TIM_PWM_Init>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d001      	beq.n	800e9d0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800e9cc:	f7ff f824 	bl	800da18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800e9d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e9dc:	4619      	mov	r1, r3
 800e9de:	4828      	ldr	r0, [pc, #160]	; (800ea80 <MX_TIM15_Init+0x158>)
 800e9e0:	f7f8 fce2 	bl	80073a8 <HAL_TIMEx_MasterConfigSynchronization>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d001      	beq.n	800e9ee <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800e9ea:	f7ff f815 	bl	800da18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e9ee:	2360      	movs	r3, #96	; 0x60
 800e9f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800e9f2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e9f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ea00:	2300      	movs	r3, #0
 800ea02:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ea04:	2300      	movs	r3, #0
 800ea06:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ea0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ea10:	2200      	movs	r2, #0
 800ea12:	4619      	mov	r1, r3
 800ea14:	481a      	ldr	r0, [pc, #104]	; (800ea80 <MX_TIM15_Init+0x158>)
 800ea16:	f7f7 fe5f 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d001      	beq.n	800ea24 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800ea20:	f7fe fffa 	bl	800da18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ea24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ea28:	2204      	movs	r2, #4
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	4814      	ldr	r0, [pc, #80]	; (800ea80 <MX_TIM15_Init+0x158>)
 800ea2e:	f7f7 fe53 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d001      	beq.n	800ea3c <MX_TIM15_Init+0x114>
  {
    Error_Handler();
 800ea38:	f7fe ffee 	bl	800da18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ea40:	2300      	movs	r3, #0
 800ea42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ea44:	2300      	movs	r3, #0
 800ea46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ea50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800ea56:	2300      	movs	r3, #0
 800ea58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800ea5e:	1d3b      	adds	r3, r7, #4
 800ea60:	4619      	mov	r1, r3
 800ea62:	4807      	ldr	r0, [pc, #28]	; (800ea80 <MX_TIM15_Init+0x158>)
 800ea64:	f7f8 fd2e 	bl	80074c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d001      	beq.n	800ea72 <MX_TIM15_Init+0x14a>
  {
    Error_Handler();
 800ea6e:	f7fe ffd3 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800ea72:	4803      	ldr	r0, [pc, #12]	; (800ea80 <MX_TIM15_Init+0x158>)
 800ea74:	f000 f8ca 	bl	800ec0c <HAL_TIM_MspPostInit>

}
 800ea78:	bf00      	nop
 800ea7a:	3768      	adds	r7, #104	; 0x68
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	24006d14 	.word	0x24006d14
 800ea84:	40014000 	.word	0x40014000

0800ea88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b08b      	sub	sp, #44	; 0x2c
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a55      	ldr	r2, [pc, #340]	; (800ebec <HAL_TIM_Base_MspInit+0x164>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d10f      	bne.n	800eaba <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ea9a:	4b55      	ldr	r3, [pc, #340]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800ea9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eaa0:	4a53      	ldr	r2, [pc, #332]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eaa2:	f043 0301 	orr.w	r3, r3, #1
 800eaa6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800eaaa:	4b51      	ldr	r3, [pc, #324]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eaac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eab0:	f003 0301 	and.w	r3, r3, #1
 800eab4:	627b      	str	r3, [r7, #36]	; 0x24
 800eab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800eab8:	e091      	b.n	800ebde <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM2)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eac2:	d10f      	bne.n	800eae4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800eac4:	4b4a      	ldr	r3, [pc, #296]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eaca:	4a49      	ldr	r2, [pc, #292]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eacc:	f043 0301 	orr.w	r3, r3, #1
 800ead0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ead4:	4b46      	ldr	r3, [pc, #280]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800ead6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eada:	f003 0301 	and.w	r3, r3, #1
 800eade:	623b      	str	r3, [r7, #32]
 800eae0:	6a3b      	ldr	r3, [r7, #32]
}
 800eae2:	e07c      	b.n	800ebde <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM3)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4a42      	ldr	r2, [pc, #264]	; (800ebf4 <HAL_TIM_Base_MspInit+0x16c>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d10f      	bne.n	800eb0e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800eaee:	4b40      	ldr	r3, [pc, #256]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eaf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eaf4:	4a3e      	ldr	r2, [pc, #248]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eaf6:	f043 0302 	orr.w	r3, r3, #2
 800eafa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800eafe:	4b3c      	ldr	r3, [pc, #240]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eb04:	f003 0302 	and.w	r3, r3, #2
 800eb08:	61fb      	str	r3, [r7, #28]
 800eb0a:	69fb      	ldr	r3, [r7, #28]
}
 800eb0c:	e067      	b.n	800ebde <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4a39      	ldr	r2, [pc, #228]	; (800ebf8 <HAL_TIM_Base_MspInit+0x170>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d10f      	bne.n	800eb38 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800eb18:	4b35      	ldr	r3, [pc, #212]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eb1e:	4a34      	ldr	r2, [pc, #208]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb20:	f043 0304 	orr.w	r3, r3, #4
 800eb24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800eb28:	4b31      	ldr	r3, [pc, #196]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eb2e:	f003 0304 	and.w	r3, r3, #4
 800eb32:	61bb      	str	r3, [r7, #24]
 800eb34:	69bb      	ldr	r3, [r7, #24]
}
 800eb36:	e052      	b.n	800ebde <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4a2f      	ldr	r2, [pc, #188]	; (800ebfc <HAL_TIM_Base_MspInit+0x174>)
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d10f      	bne.n	800eb62 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800eb42:	4b2b      	ldr	r3, [pc, #172]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eb48:	4a29      	ldr	r2, [pc, #164]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb4a:	f043 0308 	orr.w	r3, r3, #8
 800eb4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800eb52:	4b27      	ldr	r3, [pc, #156]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eb58:	f003 0308 	and.w	r3, r3, #8
 800eb5c:	617b      	str	r3, [r7, #20]
 800eb5e:	697b      	ldr	r3, [r7, #20]
}
 800eb60:	e03d      	b.n	800ebde <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM8)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	4a26      	ldr	r2, [pc, #152]	; (800ec00 <HAL_TIM_Base_MspInit+0x178>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d10f      	bne.n	800eb8c <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800eb6c:	4b20      	ldr	r3, [pc, #128]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eb72:	4a1f      	ldr	r2, [pc, #124]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb74:	f043 0302 	orr.w	r3, r3, #2
 800eb78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800eb7c:	4b1c      	ldr	r3, [pc, #112]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eb82:	f003 0302 	and.w	r3, r3, #2
 800eb86:	613b      	str	r3, [r7, #16]
 800eb88:	693b      	ldr	r3, [r7, #16]
}
 800eb8a:	e028      	b.n	800ebde <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM12)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a1c      	ldr	r2, [pc, #112]	; (800ec04 <HAL_TIM_Base_MspInit+0x17c>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d10f      	bne.n	800ebb6 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800eb96:	4b16      	ldr	r3, [pc, #88]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eb9c:	4a14      	ldr	r2, [pc, #80]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eb9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eba2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800eba6:	4b12      	ldr	r3, [pc, #72]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800eba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ebac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebb0:	60fb      	str	r3, [r7, #12]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
}
 800ebb4:	e013      	b.n	800ebde <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM15)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a13      	ldr	r2, [pc, #76]	; (800ec08 <HAL_TIM_Base_MspInit+0x180>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d10e      	bne.n	800ebde <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800ebc0:	4b0b      	ldr	r3, [pc, #44]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800ebc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ebc6:	4a0a      	ldr	r2, [pc, #40]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800ebc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ebcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ebd0:	4b07      	ldr	r3, [pc, #28]	; (800ebf0 <HAL_TIM_Base_MspInit+0x168>)
 800ebd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ebd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ebda:	60bb      	str	r3, [r7, #8]
 800ebdc:	68bb      	ldr	r3, [r7, #8]
}
 800ebde:	bf00      	nop
 800ebe0:	372c      	adds	r7, #44	; 0x2c
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	40010000 	.word	0x40010000
 800ebf0:	58024400 	.word	0x58024400
 800ebf4:	40000400 	.word	0x40000400
 800ebf8:	40000800 	.word	0x40000800
 800ebfc:	40000c00 	.word	0x40000c00
 800ec00:	40010400 	.word	0x40010400
 800ec04:	40001800 	.word	0x40001800
 800ec08:	40014000 	.word	0x40014000

0800ec0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b092      	sub	sp, #72	; 0x48
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	605a      	str	r2, [r3, #4]
 800ec1e:	609a      	str	r2, [r3, #8]
 800ec20:	60da      	str	r2, [r3, #12]
 800ec22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4aa1      	ldr	r2, [pc, #644]	; (800eeb0 <HAL_TIM_MspPostInit+0x2a4>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d120      	bne.n	800ec70 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ec2e:	4ba1      	ldr	r3, [pc, #644]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ec30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec34:	4a9f      	ldr	r2, [pc, #636]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ec36:	f043 0310 	orr.w	r3, r3, #16
 800ec3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ec3e:	4b9d      	ldr	r3, [pc, #628]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ec40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec44:	f003 0310 	and.w	r3, r3, #16
 800ec48:	633b      	str	r3, [r7, #48]	; 0x30
 800ec4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800ec4c:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800ec50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec52:	2302      	movs	r3, #2
 800ec54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec56:	2300      	movs	r3, #0
 800ec58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ec62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ec66:	4619      	mov	r1, r3
 800ec68:	4893      	ldr	r0, [pc, #588]	; (800eeb8 <HAL_TIM_MspPostInit+0x2ac>)
 800ec6a:	f7f4 fc43 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800ec6e:	e15b      	b.n	800ef28 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM2)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec78:	d13f      	bne.n	800ecfa <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec7a:	4b8e      	ldr	r3, [pc, #568]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ec7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec80:	4a8c      	ldr	r2, [pc, #560]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ec82:	f043 0301 	orr.w	r3, r3, #1
 800ec86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ec8a:	4b8a      	ldr	r3, [pc, #552]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ec8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ec98:	4b86      	ldr	r3, [pc, #536]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ec9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec9e:	4a85      	ldr	r2, [pc, #532]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800eca0:	f043 0302 	orr.w	r3, r3, #2
 800eca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800eca8:	4b82      	ldr	r3, [pc, #520]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ecaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecae:	f003 0302 	and.w	r3, r3, #2
 800ecb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ecb6:	2320      	movs	r3, #32
 800ecb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecba:	2302      	movs	r3, #2
 800ecbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ecca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ecce:	4619      	mov	r1, r3
 800ecd0:	487a      	ldr	r0, [pc, #488]	; (800eebc <HAL_TIM_MspPostInit+0x2b0>)
 800ecd2:	f7f4 fc0f 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800ecd6:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800ecda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecdc:	2302      	movs	r3, #2
 800ecde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ece0:	2300      	movs	r3, #0
 800ece2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ece4:	2300      	movs	r3, #0
 800ece6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ece8:	2301      	movs	r3, #1
 800ecea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ecec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	4873      	ldr	r0, [pc, #460]	; (800eec0 <HAL_TIM_MspPostInit+0x2b4>)
 800ecf4:	f7f4 fbfe 	bl	80034f4 <HAL_GPIO_Init>
}
 800ecf8:	e116      	b.n	800ef28 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM3)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4a71      	ldr	r2, [pc, #452]	; (800eec4 <HAL_TIM_MspPostInit+0x2b8>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d13e      	bne.n	800ed82 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed04:	4b6b      	ldr	r3, [pc, #428]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ed06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed0a:	4a6a      	ldr	r2, [pc, #424]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ed0c:	f043 0301 	orr.w	r3, r3, #1
 800ed10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed14:	4b67      	ldr	r3, [pc, #412]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ed16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed1a:	f003 0301 	and.w	r3, r3, #1
 800ed1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ed22:	4b64      	ldr	r3, [pc, #400]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ed24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed28:	4a62      	ldr	r2, [pc, #392]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ed2a:	f043 0302 	orr.w	r3, r3, #2
 800ed2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed32:	4b60      	ldr	r3, [pc, #384]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ed34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed38:	f003 0302 	and.w	r3, r3, #2
 800ed3c:	623b      	str	r3, [r7, #32]
 800ed3e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ed40:	23c0      	movs	r3, #192	; 0xc0
 800ed42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed44:	2302      	movs	r3, #2
 800ed46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ed50:	2302      	movs	r3, #2
 800ed52:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ed58:	4619      	mov	r1, r3
 800ed5a:	4858      	ldr	r0, [pc, #352]	; (800eebc <HAL_TIM_MspPostInit+0x2b0>)
 800ed5c:	f7f4 fbca 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ed60:	2301      	movs	r3, #1
 800ed62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed64:	2302      	movs	r3, #2
 800ed66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ed70:	2302      	movs	r3, #2
 800ed72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ed74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ed78:	4619      	mov	r1, r3
 800ed7a:	4851      	ldr	r0, [pc, #324]	; (800eec0 <HAL_TIM_MspPostInit+0x2b4>)
 800ed7c:	f7f4 fbba 	bl	80034f4 <HAL_GPIO_Init>
}
 800ed80:	e0d2      	b.n	800ef28 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM4)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a50      	ldr	r2, [pc, #320]	; (800eec8 <HAL_TIM_MspPostInit+0x2bc>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d120      	bne.n	800edce <HAL_TIM_MspPostInit+0x1c2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ed8c:	4b49      	ldr	r3, [pc, #292]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ed8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed92:	4a48      	ldr	r2, [pc, #288]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ed94:	f043 0308 	orr.w	r3, r3, #8
 800ed98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed9c:	4b45      	ldr	r3, [pc, #276]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ed9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eda2:	f003 0308 	and.w	r3, r3, #8
 800eda6:	61fb      	str	r3, [r7, #28]
 800eda8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800edaa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800edae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edb0:	2302      	movs	r3, #2
 800edb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edb4:	2300      	movs	r3, #0
 800edb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800edb8:	2300      	movs	r3, #0
 800edba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800edbc:	2302      	movs	r3, #2
 800edbe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800edc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800edc4:	4619      	mov	r1, r3
 800edc6:	4841      	ldr	r0, [pc, #260]	; (800eecc <HAL_TIM_MspPostInit+0x2c0>)
 800edc8:	f7f4 fb94 	bl	80034f4 <HAL_GPIO_Init>
}
 800edcc:	e0ac      	b.n	800ef28 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM5)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a3f      	ldr	r2, [pc, #252]	; (800eed0 <HAL_TIM_MspPostInit+0x2c4>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d11f      	bne.n	800ee18 <HAL_TIM_MspPostInit+0x20c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800edd8:	4b36      	ldr	r3, [pc, #216]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800edda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800edde:	4a35      	ldr	r2, [pc, #212]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ede0:	f043 0301 	orr.w	r3, r3, #1
 800ede4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ede8:	4b32      	ldr	r3, [pc, #200]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800edea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800edee:	f003 0301 	and.w	r3, r3, #1
 800edf2:	61bb      	str	r3, [r7, #24]
 800edf4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800edf6:	2303      	movs	r3, #3
 800edf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edfa:	2302      	movs	r3, #2
 800edfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edfe:	2300      	movs	r3, #0
 800ee00:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee02:	2300      	movs	r3, #0
 800ee04:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ee06:	2302      	movs	r3, #2
 800ee08:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ee0e:	4619      	mov	r1, r3
 800ee10:	482a      	ldr	r0, [pc, #168]	; (800eebc <HAL_TIM_MspPostInit+0x2b0>)
 800ee12:	f7f4 fb6f 	bl	80034f4 <HAL_GPIO_Init>
}
 800ee16:	e087      	b.n	800ef28 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM8)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a2d      	ldr	r2, [pc, #180]	; (800eed4 <HAL_TIM_MspPostInit+0x2c8>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d120      	bne.n	800ee64 <HAL_TIM_MspPostInit+0x258>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ee22:	4b24      	ldr	r3, [pc, #144]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ee24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee28:	4a22      	ldr	r2, [pc, #136]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ee2a:	f043 0304 	orr.w	r3, r3, #4
 800ee2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee32:	4b20      	ldr	r3, [pc, #128]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ee34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee38:	f003 0304 	and.w	r3, r3, #4
 800ee3c:	617b      	str	r3, [r7, #20]
 800ee3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800ee40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee46:	2302      	movs	r3, #2
 800ee48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800ee52:	2303      	movs	r3, #3
 800ee54:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ee56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	481e      	ldr	r0, [pc, #120]	; (800eed8 <HAL_TIM_MspPostInit+0x2cc>)
 800ee5e:	f7f4 fb49 	bl	80034f4 <HAL_GPIO_Init>
}
 800ee62:	e061      	b.n	800ef28 <HAL_TIM_MspPostInit+0x31c>
  else if(timHandle->Instance==TIM12)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a1c      	ldr	r2, [pc, #112]	; (800eedc <HAL_TIM_MspPostInit+0x2d0>)
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d138      	bne.n	800eee0 <HAL_TIM_MspPostInit+0x2d4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee6e:	4b11      	ldr	r3, [pc, #68]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ee70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee74:	4a0f      	ldr	r2, [pc, #60]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ee76:	f043 0302 	orr.w	r3, r3, #2
 800ee7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee7e:	4b0d      	ldr	r3, [pc, #52]	; (800eeb4 <HAL_TIM_MspPostInit+0x2a8>)
 800ee80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee84:	f003 0302 	and.w	r3, r3, #2
 800ee88:	613b      	str	r3, [r7, #16]
 800ee8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800ee8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ee90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee92:	2302      	movs	r3, #2
 800ee94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee96:	2300      	movs	r3, #0
 800ee98:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800ee9e:	2302      	movs	r3, #2
 800eea0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eea2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eea6:	4619      	mov	r1, r3
 800eea8:	4805      	ldr	r0, [pc, #20]	; (800eec0 <HAL_TIM_MspPostInit+0x2b4>)
 800eeaa:	f7f4 fb23 	bl	80034f4 <HAL_GPIO_Init>
}
 800eeae:	e03b      	b.n	800ef28 <HAL_TIM_MspPostInit+0x31c>
 800eeb0:	40010000 	.word	0x40010000
 800eeb4:	58024400 	.word	0x58024400
 800eeb8:	58021000 	.word	0x58021000
 800eebc:	58020000 	.word	0x58020000
 800eec0:	58020400 	.word	0x58020400
 800eec4:	40000400 	.word	0x40000400
 800eec8:	40000800 	.word	0x40000800
 800eecc:	58020c00 	.word	0x58020c00
 800eed0:	40000c00 	.word	0x40000c00
 800eed4:	40010400 	.word	0x40010400
 800eed8:	58020800 	.word	0x58020800
 800eedc:	40001800 	.word	0x40001800
  else if(timHandle->Instance==TIM15)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4a12      	ldr	r2, [pc, #72]	; (800ef30 <HAL_TIM_MspPostInit+0x324>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d11e      	bne.n	800ef28 <HAL_TIM_MspPostInit+0x31c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800eeea:	4b12      	ldr	r3, [pc, #72]	; (800ef34 <HAL_TIM_MspPostInit+0x328>)
 800eeec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eef0:	4a10      	ldr	r2, [pc, #64]	; (800ef34 <HAL_TIM_MspPostInit+0x328>)
 800eef2:	f043 0310 	orr.w	r3, r3, #16
 800eef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800eefa:	4b0e      	ldr	r3, [pc, #56]	; (800ef34 <HAL_TIM_MspPostInit+0x328>)
 800eefc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ef00:	f003 0310 	and.w	r3, r3, #16
 800ef04:	60fb      	str	r3, [r7, #12]
 800ef06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800ef08:	2360      	movs	r3, #96	; 0x60
 800ef0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef0c:	2302      	movs	r3, #2
 800ef0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef10:	2300      	movs	r3, #0
 800ef12:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef14:	2300      	movs	r3, #0
 800ef16:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800ef18:	2304      	movs	r3, #4
 800ef1a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ef1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ef20:	4619      	mov	r1, r3
 800ef22:	4805      	ldr	r0, [pc, #20]	; (800ef38 <HAL_TIM_MspPostInit+0x32c>)
 800ef24:	f7f4 fae6 	bl	80034f4 <HAL_GPIO_Init>
}
 800ef28:	bf00      	nop
 800ef2a:	3748      	adds	r7, #72	; 0x48
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	40014000 	.word	0x40014000
 800ef34:	58024400 	.word	0x58024400
 800ef38:	58021000 	.word	0x58021000

0800ef3c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800ef40:	4b22      	ldr	r3, [pc, #136]	; (800efcc <MX_UART5_Init+0x90>)
 800ef42:	4a23      	ldr	r2, [pc, #140]	; (800efd0 <MX_UART5_Init+0x94>)
 800ef44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800ef46:	4b21      	ldr	r3, [pc, #132]	; (800efcc <MX_UART5_Init+0x90>)
 800ef48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800ef4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800ef4e:	4b1f      	ldr	r3, [pc, #124]	; (800efcc <MX_UART5_Init+0x90>)
 800ef50:	2200      	movs	r2, #0
 800ef52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800ef54:	4b1d      	ldr	r3, [pc, #116]	; (800efcc <MX_UART5_Init+0x90>)
 800ef56:	2200      	movs	r2, #0
 800ef58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800ef5a:	4b1c      	ldr	r3, [pc, #112]	; (800efcc <MX_UART5_Init+0x90>)
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800ef60:	4b1a      	ldr	r3, [pc, #104]	; (800efcc <MX_UART5_Init+0x90>)
 800ef62:	220c      	movs	r2, #12
 800ef64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ef66:	4b19      	ldr	r3, [pc, #100]	; (800efcc <MX_UART5_Init+0x90>)
 800ef68:	2200      	movs	r2, #0
 800ef6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800ef6c:	4b17      	ldr	r3, [pc, #92]	; (800efcc <MX_UART5_Init+0x90>)
 800ef6e:	2200      	movs	r2, #0
 800ef70:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ef72:	4b16      	ldr	r3, [pc, #88]	; (800efcc <MX_UART5_Init+0x90>)
 800ef74:	2200      	movs	r2, #0
 800ef76:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ef78:	4b14      	ldr	r3, [pc, #80]	; (800efcc <MX_UART5_Init+0x90>)
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ef7e:	4b13      	ldr	r3, [pc, #76]	; (800efcc <MX_UART5_Init+0x90>)
 800ef80:	2200      	movs	r2, #0
 800ef82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800ef84:	4811      	ldr	r0, [pc, #68]	; (800efcc <MX_UART5_Init+0x90>)
 800ef86:	f7f8 fb39 	bl	80075fc <HAL_UART_Init>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d001      	beq.n	800ef94 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800ef90:	f7fe fd42 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ef94:	2100      	movs	r1, #0
 800ef96:	480d      	ldr	r0, [pc, #52]	; (800efcc <MX_UART5_Init+0x90>)
 800ef98:	f7fa fb1c 	bl	80095d4 <HAL_UARTEx_SetTxFifoThreshold>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d001      	beq.n	800efa6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800efa2:	f7fe fd39 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800efa6:	2100      	movs	r1, #0
 800efa8:	4808      	ldr	r0, [pc, #32]	; (800efcc <MX_UART5_Init+0x90>)
 800efaa:	f7fa fb51 	bl	8009650 <HAL_UARTEx_SetRxFifoThreshold>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d001      	beq.n	800efb8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800efb4:	f7fe fd30 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800efb8:	4804      	ldr	r0, [pc, #16]	; (800efcc <MX_UART5_Init+0x90>)
 800efba:	f7fa fad2 	bl	8009562 <HAL_UARTEx_DisableFifoMode>
 800efbe:	4603      	mov	r3, r0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d001      	beq.n	800efc8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800efc4:	f7fe fd28 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800efc8:	bf00      	nop
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	240070d4 	.word	0x240070d4
 800efd0:	40005000 	.word	0x40005000

0800efd4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800efd8:	4b22      	ldr	r3, [pc, #136]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800efda:	4a23      	ldr	r2, [pc, #140]	; (800f068 <MX_USART1_UART_Init+0x94>)
 800efdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800efde:	4b21      	ldr	r3, [pc, #132]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800efe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800efe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800efe6:	4b1f      	ldr	r3, [pc, #124]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800efe8:	2200      	movs	r2, #0
 800efea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800efec:	4b1d      	ldr	r3, [pc, #116]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800efee:	2200      	movs	r2, #0
 800eff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800eff2:	4b1c      	ldr	r3, [pc, #112]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800eff4:	2200      	movs	r2, #0
 800eff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800eff8:	4b1a      	ldr	r3, [pc, #104]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800effa:	220c      	movs	r2, #12
 800effc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800effe:	4b19      	ldr	r3, [pc, #100]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800f000:	2200      	movs	r2, #0
 800f002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800f004:	4b17      	ldr	r3, [pc, #92]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800f006:	2200      	movs	r2, #0
 800f008:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f00a:	4b16      	ldr	r3, [pc, #88]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800f00c:	2200      	movs	r2, #0
 800f00e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800f010:	4b14      	ldr	r3, [pc, #80]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800f012:	2200      	movs	r2, #0
 800f014:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f016:	4b13      	ldr	r3, [pc, #76]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800f018:	2200      	movs	r2, #0
 800f01a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800f01c:	4811      	ldr	r0, [pc, #68]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800f01e:	f7f8 faed 	bl	80075fc <HAL_UART_Init>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d001      	beq.n	800f02c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800f028:	f7fe fcf6 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f02c:	2100      	movs	r1, #0
 800f02e:	480d      	ldr	r0, [pc, #52]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800f030:	f7fa fad0 	bl	80095d4 <HAL_UARTEx_SetTxFifoThreshold>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d001      	beq.n	800f03e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800f03a:	f7fe fced 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f03e:	2100      	movs	r1, #0
 800f040:	4808      	ldr	r0, [pc, #32]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800f042:	f7fa fb05 	bl	8009650 <HAL_UARTEx_SetRxFifoThreshold>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d001      	beq.n	800f050 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800f04c:	f7fe fce4 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800f050:	4804      	ldr	r0, [pc, #16]	; (800f064 <MX_USART1_UART_Init+0x90>)
 800f052:	f7fa fa86 	bl	8009562 <HAL_UARTEx_DisableFifoMode>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800f05c:	f7fe fcdc 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800f060:	bf00      	nop
 800f062:	bd80      	pop	{r7, pc}
 800f064:	240071dc 	.word	0x240071dc
 800f068:	40011000 	.word	0x40011000

0800f06c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800f070:	4b22      	ldr	r3, [pc, #136]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f072:	4a23      	ldr	r2, [pc, #140]	; (800f100 <MX_USART2_UART_Init+0x94>)
 800f074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800f076:	4b21      	ldr	r3, [pc, #132]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f078:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800f07c:	605a      	str	r2, [r3, #4]
//  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f07e:	4b1f      	ldr	r3, [pc, #124]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f080:	2200      	movs	r2, #0
 800f082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f084:	4b1d      	ldr	r3, [pc, #116]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f086:	2200      	movs	r2, #0
 800f088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f08a:	4b1c      	ldr	r3, [pc, #112]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f08c:	2200      	movs	r2, #0
 800f08e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f090:	4b1a      	ldr	r3, [pc, #104]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f092:	220c      	movs	r2, #12
 800f094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f096:	4b19      	ldr	r3, [pc, #100]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f098:	2200      	movs	r2, #0
 800f09a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f09c:	4b17      	ldr	r3, [pc, #92]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f09e:	2200      	movs	r2, #0
 800f0a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f0a2:	4b16      	ldr	r3, [pc, #88]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800f0a8:	4b14      	ldr	r3, [pc, #80]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f0ae:	4b13      	ldr	r3, [pc, #76]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800f0b4:	4811      	ldr	r0, [pc, #68]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f0b6:	f7f8 faa1 	bl	80075fc <HAL_UART_Init>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800f0c0:	f7fe fcaa 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	480d      	ldr	r0, [pc, #52]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f0c8:	f7fa fa84 	bl	80095d4 <HAL_UARTEx_SetTxFifoThreshold>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800f0d2:	f7fe fca1 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	4808      	ldr	r0, [pc, #32]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f0da:	f7fa fab9 	bl	8009650 <HAL_UARTEx_SetRxFifoThreshold>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d001      	beq.n	800f0e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800f0e4:	f7fe fc98 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800f0e8:	4804      	ldr	r0, [pc, #16]	; (800f0fc <MX_USART2_UART_Init+0x90>)
 800f0ea:	f7fa fa3a 	bl	8009562 <HAL_UARTEx_DisableFifoMode>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d001      	beq.n	800f0f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800f0f4:	f7fe fc90 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800f0f8:	bf00      	nop
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	2400726c 	.word	0x2400726c
 800f100:	40004400 	.word	0x40004400

0800f104 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800f108:	4b22      	ldr	r3, [pc, #136]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f10a:	4a23      	ldr	r2, [pc, #140]	; (800f198 <MX_USART3_UART_Init+0x94>)
 800f10c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800f10e:	4b21      	ldr	r3, [pc, #132]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f110:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800f114:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800f116:	4b1f      	ldr	r3, [pc, #124]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f118:	2200      	movs	r2, #0
 800f11a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800f11c:	4b1d      	ldr	r3, [pc, #116]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f11e:	2200      	movs	r2, #0
 800f120:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800f122:	4b1c      	ldr	r3, [pc, #112]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f124:	2200      	movs	r2, #0
 800f126:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800f128:	4b1a      	ldr	r3, [pc, #104]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f12a:	220c      	movs	r2, #12
 800f12c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f12e:	4b19      	ldr	r3, [pc, #100]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f130:	2200      	movs	r2, #0
 800f132:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800f134:	4b17      	ldr	r3, [pc, #92]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f136:	2200      	movs	r2, #0
 800f138:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f13a:	4b16      	ldr	r3, [pc, #88]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f13c:	2200      	movs	r2, #0
 800f13e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800f140:	4b14      	ldr	r3, [pc, #80]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f142:	2200      	movs	r2, #0
 800f144:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f146:	4b13      	ldr	r3, [pc, #76]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f148:	2200      	movs	r2, #0
 800f14a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800f14c:	4811      	ldr	r0, [pc, #68]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f14e:	f7f8 fa55 	bl	80075fc <HAL_UART_Init>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d001      	beq.n	800f15c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800f158:	f7fe fc5e 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f15c:	2100      	movs	r1, #0
 800f15e:	480d      	ldr	r0, [pc, #52]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f160:	f7fa fa38 	bl	80095d4 <HAL_UARTEx_SetTxFifoThreshold>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d001      	beq.n	800f16e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800f16a:	f7fe fc55 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f16e:	2100      	movs	r1, #0
 800f170:	4808      	ldr	r0, [pc, #32]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f172:	f7fa fa6d 	bl	8009650 <HAL_UARTEx_SetRxFifoThreshold>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d001      	beq.n	800f180 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800f17c:	f7fe fc4c 	bl	800da18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800f180:	4804      	ldr	r0, [pc, #16]	; (800f194 <MX_USART3_UART_Init+0x90>)
 800f182:	f7fa f9ee 	bl	8009562 <HAL_UARTEx_DisableFifoMode>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d001      	beq.n	800f190 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800f18c:	f7fe fc44 	bl	800da18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800f190:	bf00      	nop
 800f192:	bd80      	pop	{r7, pc}
 800f194:	24006fcc 	.word	0x24006fcc
 800f198:	40004800 	.word	0x40004800

0800f19c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b0be      	sub	sp, #248	; 0xf8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	601a      	str	r2, [r3, #0]
 800f1ac:	605a      	str	r2, [r3, #4]
 800f1ae:	609a      	str	r2, [r3, #8]
 800f1b0:	60da      	str	r2, [r3, #12]
 800f1b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f1b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f1b8:	22bc      	movs	r2, #188	; 0xbc
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f000 fad7 	bl	800f770 <memset>
  if(uartHandle->Instance==UART5)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4a79      	ldr	r2, [pc, #484]	; (800f3ac <HAL_UART_MspInit+0x210>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	f040 80a6 	bne.w	800f31a <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800f1ce:	2302      	movs	r3, #2
 800f1d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f1d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7f5 fbb9 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d001      	beq.n	800f1ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800f1e8:	f7fe fc16 	bl	800da18 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800f1ec:	4b70      	ldr	r3, [pc, #448]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f1ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f1f2:	4a6f      	ldr	r2, [pc, #444]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f1f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800f1fc:	4b6c      	ldr	r3, [pc, #432]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f1fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f206:	627b      	str	r3, [r7, #36]	; 0x24
 800f208:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f20a:	4b69      	ldr	r3, [pc, #420]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f20c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f210:	4a67      	ldr	r2, [pc, #412]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f212:	f043 0302 	orr.w	r3, r3, #2
 800f216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f21a:	4b65      	ldr	r3, [pc, #404]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f21c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f220:	f003 0302 	and.w	r3, r3, #2
 800f224:	623b      	str	r3, [r7, #32]
 800f226:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800f228:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f22c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f230:	2302      	movs	r3, #2
 800f232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f236:	2300      	movs	r3, #0
 800f238:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f23c:	2300      	movs	r3, #0
 800f23e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800f242:	230e      	movs	r3, #14
 800f244:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f248:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f24c:	4619      	mov	r1, r3
 800f24e:	4859      	ldr	r0, [pc, #356]	; (800f3b4 <HAL_UART_MspInit+0x218>)
 800f250:	f7f4 f950 	bl	80034f4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800f254:	4b58      	ldr	r3, [pc, #352]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f256:	4a59      	ldr	r2, [pc, #356]	; (800f3bc <HAL_UART_MspInit+0x220>)
 800f258:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800f25a:	4b57      	ldr	r3, [pc, #348]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f25c:	2241      	movs	r2, #65	; 0x41
 800f25e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f260:	4b55      	ldr	r3, [pc, #340]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f262:	2200      	movs	r2, #0
 800f264:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f266:	4b54      	ldr	r3, [pc, #336]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f268:	2200      	movs	r2, #0
 800f26a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f26c:	4b52      	ldr	r3, [pc, #328]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f26e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f272:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f274:	4b50      	ldr	r3, [pc, #320]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f276:	2200      	movs	r2, #0
 800f278:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f27a:	4b4f      	ldr	r3, [pc, #316]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f27c:	2200      	movs	r2, #0
 800f27e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800f280:	4b4d      	ldr	r3, [pc, #308]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f282:	2200      	movs	r2, #0
 800f284:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f286:	4b4c      	ldr	r3, [pc, #304]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f288:	2200      	movs	r2, #0
 800f28a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f28c:	4b4a      	ldr	r3, [pc, #296]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f28e:	2200      	movs	r2, #0
 800f290:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800f292:	4849      	ldr	r0, [pc, #292]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f294:	f7f1 fae8 	bl	8000868 <HAL_DMA_Init>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d001      	beq.n	800f2a2 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800f29e:	f7fe fbbb 	bl	800da18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	4a44      	ldr	r2, [pc, #272]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f2a6:	67da      	str	r2, [r3, #124]	; 0x7c
 800f2a8:	4a43      	ldr	r2, [pc, #268]	; (800f3b8 <HAL_UART_MspInit+0x21c>)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 800f2ae:	4b44      	ldr	r3, [pc, #272]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2b0:	4a44      	ldr	r2, [pc, #272]	; (800f3c4 <HAL_UART_MspInit+0x228>)
 800f2b2:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 800f2b4:	4b42      	ldr	r3, [pc, #264]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2b6:	2242      	movs	r2, #66	; 0x42
 800f2b8:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f2ba:	4b41      	ldr	r3, [pc, #260]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2bc:	2240      	movs	r2, #64	; 0x40
 800f2be:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f2c0:	4b3f      	ldr	r3, [pc, #252]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f2c6:	4b3e      	ldr	r3, [pc, #248]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f2cc:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f2ce:	4b3c      	ldr	r3, [pc, #240]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f2d4:	4b3a      	ldr	r3, [pc, #232]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800f2da:	4b39      	ldr	r3, [pc, #228]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2dc:	2200      	movs	r2, #0
 800f2de:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f2e0:	4b37      	ldr	r3, [pc, #220]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f2e6:	4b36      	ldr	r3, [pc, #216]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800f2ec:	4834      	ldr	r0, [pc, #208]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f2ee:	f7f1 fabb 	bl	8000868 <HAL_DMA_Init>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d001      	beq.n	800f2fc <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 800f2f8:	f7fe fb8e 	bl	800da18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4a30      	ldr	r2, [pc, #192]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f300:	679a      	str	r2, [r3, #120]	; 0x78
 800f302:	4a2f      	ldr	r2, [pc, #188]	; (800f3c0 <HAL_UART_MspInit+0x224>)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800f308:	2200      	movs	r2, #0
 800f30a:	2105      	movs	r1, #5
 800f30c:	2035      	movs	r0, #53	; 0x35
 800f30e:	f7f1 fa83 	bl	8000818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800f312:	2035      	movs	r0, #53	; 0x35
 800f314:	f7f1 fa9a 	bl	800084c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800f318:	e1b0      	b.n	800f67c <HAL_UART_MspInit+0x4e0>
  else if(uartHandle->Instance==USART1)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4a2a      	ldr	r2, [pc, #168]	; (800f3c8 <HAL_UART_MspInit+0x22c>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d155      	bne.n	800f3d0 <HAL_UART_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800f324:	2301      	movs	r3, #1
 800f326:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800f328:	2300      	movs	r3, #0
 800f32a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f32e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f332:	4618      	mov	r0, r3
 800f334:	f7f5 fb0e 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d001      	beq.n	800f342 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800f33e:	f7fe fb6b 	bl	800da18 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800f342:	4b1b      	ldr	r3, [pc, #108]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f348:	4a19      	ldr	r2, [pc, #100]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f34a:	f043 0310 	orr.w	r3, r3, #16
 800f34e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800f352:	4b17      	ldr	r3, [pc, #92]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f358:	f003 0310 	and.w	r3, r3, #16
 800f35c:	61fb      	str	r3, [r7, #28]
 800f35e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f360:	4b13      	ldr	r3, [pc, #76]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f366:	4a12      	ldr	r2, [pc, #72]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f368:	f043 0301 	orr.w	r3, r3, #1
 800f36c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f370:	4b0f      	ldr	r3, [pc, #60]	; (800f3b0 <HAL_UART_MspInit+0x214>)
 800f372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f376:	f003 0301 	and.w	r3, r3, #1
 800f37a:	61bb      	str	r3, [r7, #24]
 800f37c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800f37e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f386:	2302      	movs	r3, #2
 800f388:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f38c:	2300      	movs	r3, #0
 800f38e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f392:	2300      	movs	r3, #0
 800f394:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f398:	2307      	movs	r3, #7
 800f39a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f39e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	4809      	ldr	r0, [pc, #36]	; (800f3cc <HAL_UART_MspInit+0x230>)
 800f3a6:	f7f4 f8a5 	bl	80034f4 <HAL_GPIO_Init>
}
 800f3aa:	e167      	b.n	800f67c <HAL_UART_MspInit+0x4e0>
 800f3ac:	40005000 	.word	0x40005000
 800f3b0:	58024400 	.word	0x58024400
 800f3b4:	58020400 	.word	0x58020400
 800f3b8:	240072fc 	.word	0x240072fc
 800f3bc:	40020010 	.word	0x40020010
 800f3c0:	24007374 	.word	0x24007374
 800f3c4:	40020028 	.word	0x40020028
 800f3c8:	40011000 	.word	0x40011000
 800f3cc:	58020000 	.word	0x58020000
  else if(uartHandle->Instance==USART2)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4aab      	ldr	r2, [pc, #684]	; (800f684 <HAL_UART_MspInit+0x4e8>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	f040 80a5 	bne.w	800f526 <HAL_UART_MspInit+0x38a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800f3dc:	2302      	movs	r3, #2
 800f3de:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f3e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7f5 fab2 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d001      	beq.n	800f3fa <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800f3f6:	f7fe fb0f 	bl	800da18 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800f3fa:	4ba3      	ldr	r3, [pc, #652]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f3fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f400:	4aa1      	ldr	r2, [pc, #644]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f406:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800f40a:	4b9f      	ldr	r3, [pc, #636]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f40c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f414:	617b      	str	r3, [r7, #20]
 800f416:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f418:	4b9b      	ldr	r3, [pc, #620]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f41a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f41e:	4a9a      	ldr	r2, [pc, #616]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f420:	f043 0301 	orr.w	r3, r3, #1
 800f424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f428:	4b97      	ldr	r3, [pc, #604]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f42a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f42e:	f003 0301 	and.w	r3, r3, #1
 800f432:	613b      	str	r3, [r7, #16]
 800f434:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800f436:	230c      	movs	r3, #12
 800f438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f43c:	2302      	movs	r3, #2
 800f43e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f442:	2300      	movs	r3, #0
 800f444:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f448:	2300      	movs	r3, #0
 800f44a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f44e:	2307      	movs	r3, #7
 800f450:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f454:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f458:	4619      	mov	r1, r3
 800f45a:	488c      	ldr	r0, [pc, #560]	; (800f68c <HAL_UART_MspInit+0x4f0>)
 800f45c:	f7f4 f84a 	bl	80034f4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 800f460:	4b8b      	ldr	r3, [pc, #556]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f462:	4a8c      	ldr	r2, [pc, #560]	; (800f694 <HAL_UART_MspInit+0x4f8>)
 800f464:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800f466:	4b8a      	ldr	r3, [pc, #552]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f468:	222b      	movs	r2, #43	; 0x2b
 800f46a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f46c:	4b88      	ldr	r3, [pc, #544]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f46e:	2200      	movs	r2, #0
 800f470:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f472:	4b87      	ldr	r3, [pc, #540]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f474:	2200      	movs	r2, #0
 800f476:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f478:	4b85      	ldr	r3, [pc, #532]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f47a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f47e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f480:	4b83      	ldr	r3, [pc, #524]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f482:	2200      	movs	r2, #0
 800f484:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f486:	4b82      	ldr	r3, [pc, #520]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f488:	2200      	movs	r2, #0
 800f48a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800f48c:	4b80      	ldr	r3, [pc, #512]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f48e:	2200      	movs	r2, #0
 800f490:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f492:	4b7f      	ldr	r3, [pc, #508]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f494:	2200      	movs	r2, #0
 800f496:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f498:	4b7d      	ldr	r3, [pc, #500]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f49a:	2200      	movs	r2, #0
 800f49c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800f49e:	487c      	ldr	r0, [pc, #496]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f4a0:	f7f1 f9e2 	bl	8000868 <HAL_DMA_Init>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <HAL_UART_MspInit+0x312>
      Error_Handler();
 800f4aa:	f7fe fab5 	bl	800da18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4a77      	ldr	r2, [pc, #476]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f4b2:	67da      	str	r2, [r3, #124]	; 0x7c
 800f4b4:	4a76      	ldr	r2, [pc, #472]	; (800f690 <HAL_UART_MspInit+0x4f4>)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream3;
 800f4ba:	4b77      	ldr	r3, [pc, #476]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4bc:	4a77      	ldr	r2, [pc, #476]	; (800f69c <HAL_UART_MspInit+0x500>)
 800f4be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800f4c0:	4b75      	ldr	r3, [pc, #468]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4c2:	222c      	movs	r2, #44	; 0x2c
 800f4c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f4c6:	4b74      	ldr	r3, [pc, #464]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4c8:	2240      	movs	r2, #64	; 0x40
 800f4ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f4cc:	4b72      	ldr	r3, [pc, #456]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f4d2:	4b71      	ldr	r3, [pc, #452]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f4d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f4da:	4b6f      	ldr	r3, [pc, #444]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4dc:	2200      	movs	r2, #0
 800f4de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f4e0:	4b6d      	ldr	r3, [pc, #436]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800f4e6:	4b6c      	ldr	r3, [pc, #432]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f4ec:	4b6a      	ldr	r3, [pc, #424]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f4f2:	4b69      	ldr	r3, [pc, #420]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800f4f8:	4867      	ldr	r0, [pc, #412]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f4fa:	f7f1 f9b5 	bl	8000868 <HAL_DMA_Init>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <HAL_UART_MspInit+0x36c>
      Error_Handler();
 800f504:	f7fe fa88 	bl	800da18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4a63      	ldr	r2, [pc, #396]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f50c:	679a      	str	r2, [r3, #120]	; 0x78
 800f50e:	4a62      	ldr	r2, [pc, #392]	; (800f698 <HAL_UART_MspInit+0x4fc>)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800f514:	2200      	movs	r2, #0
 800f516:	2105      	movs	r1, #5
 800f518:	2026      	movs	r0, #38	; 0x26
 800f51a:	f7f1 f97d 	bl	8000818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f51e:	2026      	movs	r0, #38	; 0x26
 800f520:	f7f1 f994 	bl	800084c <HAL_NVIC_EnableIRQ>
}
 800f524:	e0aa      	b.n	800f67c <HAL_UART_MspInit+0x4e0>
  else if(uartHandle->Instance==USART3)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a5d      	ldr	r2, [pc, #372]	; (800f6a0 <HAL_UART_MspInit+0x504>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	f040 80a5 	bne.w	800f67c <HAL_UART_MspInit+0x4e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800f532:	2302      	movs	r3, #2
 800f534:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800f536:	2300      	movs	r3, #0
 800f538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f53c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f540:	4618      	mov	r0, r3
 800f542:	f7f5 fa07 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d001      	beq.n	800f550 <HAL_UART_MspInit+0x3b4>
      Error_Handler();
 800f54c:	f7fe fa64 	bl	800da18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800f550:	4b4d      	ldr	r3, [pc, #308]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f556:	4a4c      	ldr	r2, [pc, #304]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f55c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800f560:	4b49      	ldr	r3, [pc, #292]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f56a:	60fb      	str	r3, [r7, #12]
 800f56c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f56e:	4b46      	ldr	r3, [pc, #280]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f574:	4a44      	ldr	r2, [pc, #272]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f576:	f043 0308 	orr.w	r3, r3, #8
 800f57a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f57e:	4b42      	ldr	r3, [pc, #264]	; (800f688 <HAL_UART_MspInit+0x4ec>)
 800f580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f584:	f003 0308 	and.w	r3, r3, #8
 800f588:	60bb      	str	r3, [r7, #8]
 800f58a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800f58c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f590:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f594:	2302      	movs	r3, #2
 800f596:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f59a:	2300      	movs	r3, #0
 800f59c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f5a6:	2307      	movs	r3, #7
 800f5a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f5ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	483c      	ldr	r0, [pc, #240]	; (800f6a4 <HAL_UART_MspInit+0x508>)
 800f5b4:	f7f3 ff9e 	bl	80034f4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream4;
 800f5b8:	4b3b      	ldr	r3, [pc, #236]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5ba:	4a3c      	ldr	r2, [pc, #240]	; (800f6ac <HAL_UART_MspInit+0x510>)
 800f5bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800f5be:	4b3a      	ldr	r3, [pc, #232]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5c0:	222d      	movs	r2, #45	; 0x2d
 800f5c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f5c4:	4b38      	ldr	r3, [pc, #224]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f5ca:	4b37      	ldr	r3, [pc, #220]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f5d0:	4b35      	ldr	r3, [pc, #212]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f5d8:	4b33      	ldr	r3, [pc, #204]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f5de:	4b32      	ldr	r3, [pc, #200]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800f5e4:	4b30      	ldr	r3, [pc, #192]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f5ea:	4b2f      	ldr	r3, [pc, #188]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f5f0:	4b2d      	ldr	r3, [pc, #180]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800f5f6:	482c      	ldr	r0, [pc, #176]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f5f8:	f7f1 f936 	bl	8000868 <HAL_DMA_Init>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d001      	beq.n	800f606 <HAL_UART_MspInit+0x46a>
      Error_Handler();
 800f602:	f7fe fa09 	bl	800da18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4a27      	ldr	r2, [pc, #156]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f60a:	67da      	str	r2, [r3, #124]	; 0x7c
 800f60c:	4a26      	ldr	r2, [pc, #152]	; (800f6a8 <HAL_UART_MspInit+0x50c>)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream5;
 800f612:	4b27      	ldr	r3, [pc, #156]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f614:	4a27      	ldr	r2, [pc, #156]	; (800f6b4 <HAL_UART_MspInit+0x518>)
 800f616:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800f618:	4b25      	ldr	r3, [pc, #148]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f61a:	222e      	movs	r2, #46	; 0x2e
 800f61c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f61e:	4b24      	ldr	r3, [pc, #144]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f620:	2240      	movs	r2, #64	; 0x40
 800f622:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f624:	4b22      	ldr	r3, [pc, #136]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f626:	2200      	movs	r2, #0
 800f628:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f62a:	4b21      	ldr	r3, [pc, #132]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f62c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f630:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f632:	4b1f      	ldr	r3, [pc, #124]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f634:	2200      	movs	r2, #0
 800f636:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f638:	4b1d      	ldr	r3, [pc, #116]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f63a:	2200      	movs	r2, #0
 800f63c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800f63e:	4b1c      	ldr	r3, [pc, #112]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f640:	2200      	movs	r2, #0
 800f642:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f644:	4b1a      	ldr	r3, [pc, #104]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f646:	2200      	movs	r2, #0
 800f648:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f64a:	4b19      	ldr	r3, [pc, #100]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f64c:	2200      	movs	r2, #0
 800f64e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800f650:	4817      	ldr	r0, [pc, #92]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f652:	f7f1 f909 	bl	8000868 <HAL_DMA_Init>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d001      	beq.n	800f660 <HAL_UART_MspInit+0x4c4>
      Error_Handler();
 800f65c:	f7fe f9dc 	bl	800da18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4a13      	ldr	r2, [pc, #76]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f664:	679a      	str	r2, [r3, #120]	; 0x78
 800f666:	4a12      	ldr	r2, [pc, #72]	; (800f6b0 <HAL_UART_MspInit+0x514>)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800f66c:	2200      	movs	r2, #0
 800f66e:	2105      	movs	r1, #5
 800f670:	2027      	movs	r0, #39	; 0x27
 800f672:	f7f1 f8d1 	bl	8000818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800f676:	2027      	movs	r0, #39	; 0x27
 800f678:	f7f1 f8e8 	bl	800084c <HAL_NVIC_EnableIRQ>
}
 800f67c:	bf00      	nop
 800f67e:	37f8      	adds	r7, #248	; 0xf8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	40004400 	.word	0x40004400
 800f688:	58024400 	.word	0x58024400
 800f68c:	58020000 	.word	0x58020000
 800f690:	24006edc 	.word	0x24006edc
 800f694:	40020040 	.word	0x40020040
 800f698:	24007164 	.word	0x24007164
 800f69c:	40020058 	.word	0x40020058
 800f6a0:	40004800 	.word	0x40004800
 800f6a4:	58020c00 	.word	0x58020c00
 800f6a8:	24006f54 	.word	0x24006f54
 800f6ac:	40020070 	.word	0x40020070
 800f6b0:	2400705c 	.word	0x2400705c
 800f6b4:	40020088 	.word	0x40020088

0800f6b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800f6b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f6f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800f6bc:	f7fe fca6 	bl	800e00c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f6c0:	480c      	ldr	r0, [pc, #48]	; (800f6f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800f6c2:	490d      	ldr	r1, [pc, #52]	; (800f6f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800f6c4:	4a0d      	ldr	r2, [pc, #52]	; (800f6fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 800f6c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f6c8:	e002      	b.n	800f6d0 <LoopCopyDataInit>

0800f6ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f6ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f6cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f6ce:	3304      	adds	r3, #4

0800f6d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f6d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f6d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f6d4:	d3f9      	bcc.n	800f6ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f6d6:	4a0a      	ldr	r2, [pc, #40]	; (800f700 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800f6d8:	4c0a      	ldr	r4, [pc, #40]	; (800f704 <LoopFillZerobss+0x22>)
  movs r3, #0
 800f6da:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f6dc:	e001      	b.n	800f6e2 <LoopFillZerobss>

0800f6de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f6de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f6e0:	3204      	adds	r2, #4

0800f6e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f6e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f6e4:	d3fb      	bcc.n	800f6de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f6e6:	f000 f811 	bl	800f70c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f6ea:	f7fe f87d 	bl	800d7e8 <main>
  bx  lr
 800f6ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f6f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800f6f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800f6f8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800f6fc:	0800f934 	.word	0x0800f934
  ldr r2, =_sbss
 800f700:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800f704:	240073ec 	.word	0x240073ec

0800f708 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f708:	e7fe      	b.n	800f708 <ADC3_IRQHandler>
	...

0800f70c <__libc_init_array>:
 800f70c:	b570      	push	{r4, r5, r6, lr}
 800f70e:	4d0d      	ldr	r5, [pc, #52]	; (800f744 <__libc_init_array+0x38>)
 800f710:	4c0d      	ldr	r4, [pc, #52]	; (800f748 <__libc_init_array+0x3c>)
 800f712:	1b64      	subs	r4, r4, r5
 800f714:	10a4      	asrs	r4, r4, #2
 800f716:	2600      	movs	r6, #0
 800f718:	42a6      	cmp	r6, r4
 800f71a:	d109      	bne.n	800f730 <__libc_init_array+0x24>
 800f71c:	4d0b      	ldr	r5, [pc, #44]	; (800f74c <__libc_init_array+0x40>)
 800f71e:	4c0c      	ldr	r4, [pc, #48]	; (800f750 <__libc_init_array+0x44>)
 800f720:	f000 f82e 	bl	800f780 <_init>
 800f724:	1b64      	subs	r4, r4, r5
 800f726:	10a4      	asrs	r4, r4, #2
 800f728:	2600      	movs	r6, #0
 800f72a:	42a6      	cmp	r6, r4
 800f72c:	d105      	bne.n	800f73a <__libc_init_array+0x2e>
 800f72e:	bd70      	pop	{r4, r5, r6, pc}
 800f730:	f855 3b04 	ldr.w	r3, [r5], #4
 800f734:	4798      	blx	r3
 800f736:	3601      	adds	r6, #1
 800f738:	e7ee      	b.n	800f718 <__libc_init_array+0xc>
 800f73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f73e:	4798      	blx	r3
 800f740:	3601      	adds	r6, #1
 800f742:	e7f2      	b.n	800f72a <__libc_init_array+0x1e>
 800f744:	0800f92c 	.word	0x0800f92c
 800f748:	0800f92c 	.word	0x0800f92c
 800f74c:	0800f92c 	.word	0x0800f92c
 800f750:	0800f930 	.word	0x0800f930

0800f754 <memcpy>:
 800f754:	440a      	add	r2, r1
 800f756:	4291      	cmp	r1, r2
 800f758:	f100 33ff 	add.w	r3, r0, #4294967295
 800f75c:	d100      	bne.n	800f760 <memcpy+0xc>
 800f75e:	4770      	bx	lr
 800f760:	b510      	push	{r4, lr}
 800f762:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f76a:	4291      	cmp	r1, r2
 800f76c:	d1f9      	bne.n	800f762 <memcpy+0xe>
 800f76e:	bd10      	pop	{r4, pc}

0800f770 <memset>:
 800f770:	4402      	add	r2, r0
 800f772:	4603      	mov	r3, r0
 800f774:	4293      	cmp	r3, r2
 800f776:	d100      	bne.n	800f77a <memset+0xa>
 800f778:	4770      	bx	lr
 800f77a:	f803 1b01 	strb.w	r1, [r3], #1
 800f77e:	e7f9      	b.n	800f774 <memset+0x4>

0800f780 <_init>:
 800f780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f782:	bf00      	nop
 800f784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f786:	bc08      	pop	{r3}
 800f788:	469e      	mov	lr, r3
 800f78a:	4770      	bx	lr

0800f78c <_fini>:
 800f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78e:	bf00      	nop
 800f790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f792:	bc08      	pop	{r3}
 800f794:	469e      	mov	lr, r3
 800f796:	4770      	bx	lr
