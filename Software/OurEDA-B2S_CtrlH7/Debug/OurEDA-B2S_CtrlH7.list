
OurEDA-B2S_CtrlH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e378  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800e618  0800e618  0001e618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e880  0800e880  0001e880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e888  0800e888  0001e888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e88c  0800e88c  0001e88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800e890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000098b8  24000014  0800e8a4  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240098cc  0800e8a4  000298cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030969  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004e66  00000000  00000000  000509ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  00055818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001648  00000000  00000000  00056ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6a9  00000000  00000000  00058640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020e71  00000000  00000000  00092ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f7a0  00000000  00000000  000b3b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002232fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006324  00000000  00000000  00223350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e600 	.word	0x0800e600

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800e600 	.word	0x0800e600

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005de:	4b39      	ldr	r3, [pc, #228]	; (80006c4 <MX_DMA_Init+0xec>)
 80005e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005e4:	4a37      	ldr	r2, [pc, #220]	; (80006c4 <MX_DMA_Init+0xec>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80005ee:	4b35      	ldr	r3, [pc, #212]	; (80006c4 <MX_DMA_Init+0xec>)
 80005f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005fc:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <MX_DMA_Init+0xec>)
 80005fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000602:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <MX_DMA_Init+0xec>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MX_DMA_Init+0xec>)
 800060e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	200b      	movs	r0, #11
 8000620:	f002 fbbc 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000624:	200b      	movs	r0, #11
 8000626:	f002 fbd3 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2105      	movs	r1, #5
 800062e:	200c      	movs	r0, #12
 8000630:	f002 fbb4 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000634:	200c      	movs	r0, #12
 8000636:	f002 fbcb 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2105      	movs	r1, #5
 800063e:	200d      	movs	r0, #13
 8000640:	f002 fbac 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000644:	200d      	movs	r0, #13
 8000646:	f002 fbc3 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2105      	movs	r1, #5
 800064e:	200e      	movs	r0, #14
 8000650:	f002 fba4 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000654:	200e      	movs	r0, #14
 8000656:	f002 fbbb 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2105      	movs	r1, #5
 800065e:	200f      	movs	r0, #15
 8000660:	f002 fb9c 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000664:	200f      	movs	r0, #15
 8000666:	f002 fbb3 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2105      	movs	r1, #5
 800066e:	2010      	movs	r0, #16
 8000670:	f002 fb94 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000674:	2010      	movs	r0, #16
 8000676:	f002 fbab 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2105      	movs	r1, #5
 800067e:	202f      	movs	r0, #47	; 0x2f
 8000680:	f002 fb8c 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000684:	202f      	movs	r0, #47	; 0x2f
 8000686:	f002 fba3 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2105      	movs	r1, #5
 800068e:	2038      	movs	r0, #56	; 0x38
 8000690:	f002 fb84 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000694:	2038      	movs	r0, #56	; 0x38
 8000696:	f002 fb9b 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2105      	movs	r1, #5
 800069e:	2039      	movs	r0, #57	; 0x39
 80006a0:	f002 fb7c 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80006a4:	2039      	movs	r0, #57	; 0x39
 80006a6:	f002 fb93 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	203a      	movs	r0, #58	; 0x3a
 80006b0:	f002 fb74 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006b4:	203a      	movs	r0, #58	; 0x3a
 80006b6:	f002 fb8b 	bl	8002dd0 <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	58024400 	.word	0x58024400

080006c8 <OpenWrt_Delay>:

void Thread_CatchRptEntry(void const *argument);
void Thread_CatchCmdEntry(void const *argument);

static void OpenWrt_Delay(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 60; i++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	e014      	b.n	80006fe <OpenWrt_Delay+0x36>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	480f      	ldr	r0, [pc, #60]	; (8000718 <OpenWrt_Delay+0x50>)
 80006da:	f005 fbae 	bl	8005e3a <HAL_GPIO_TogglePin>
		for (int j = 0; j < 1000; j++)
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	e005      	b.n	80006f0 <OpenWrt_Delay+0x28>
		{
			osDelay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f00b fc32 	bl	800bf4e <osDelay>
		for (int j = 0; j < 1000; j++)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006f6:	dbf5      	blt.n	80006e4 <OpenWrt_Delay+0x1c>
	for (int i = 0; i < 60; i++)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3301      	adds	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b3b      	cmp	r3, #59	; 0x3b
 8000702:	dde7      	ble.n	80006d4 <OpenWrt_Delay+0xc>
		}
	}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <OpenWrt_Delay+0x50>)
 800070c:	f005 fb7c 	bl	8005e08 <HAL_GPIO_WritePin>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	58020800 	.word	0x58020800

0800071c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <vApplicationGetIdleTaskMemory+0x2c>)
 800072c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <vApplicationGetIdleTaskMemory+0x30>)
 8000732:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	24000030 	.word	0x24000030
 800074c:	24000084 	.word	0x24000084

08000750 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b0e4      	sub	sp, #400	; 0x190
 8000754:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of WT931_DONE_sem */
	osSemaphoreStaticDef(WT931_DONE_sem, &WT931_DONE_semControlBlock);
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800075c:	4bb2      	ldr	r3, [pc, #712]	; (8000a28 <MX_FREERTOS_Init+0x2d8>)
 800075e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	WT931_DONE_semHandle = osSemaphoreCreate(osSemaphore(WT931_DONE_sem), 1);
 8000762:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000766:	2101      	movs	r1, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f00b fc04 	bl	800bf76 <osSemaphoreCreate>
 800076e:	4603      	mov	r3, r0
 8000770:	4aae      	ldr	r2, [pc, #696]	; (8000a2c <MX_FREERTOS_Init+0x2dc>)
 8000772:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39_DONE_sem */
	osSemaphoreStaticDef(GY39_DONE_sem, &GY39_DONE_semControlBlock);
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800077a:	4bad      	ldr	r3, [pc, #692]	; (8000a30 <MX_FREERTOS_Init+0x2e0>)
 800077c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	GY39_DONE_semHandle = osSemaphoreCreate(osSemaphore(GY39_DONE_sem), 1);
 8000780:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000784:	2101      	movs	r1, #1
 8000786:	4618      	mov	r0, r3
 8000788:	f00b fbf5 	bl	800bf76 <osSemaphoreCreate>
 800078c:	4603      	mov	r3, r0
 800078e:	4aa9      	ldr	r2, [pc, #676]	; (8000a34 <MX_FREERTOS_Init+0x2e4>)
 8000790:	6013      	str	r3, [r2, #0]

	/* definition and creation of WD_DONE_sem */
	osSemaphoreStaticDef(WD_DONE_sem, &WD_DONE_semControlBlock);
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000798:	4ba7      	ldr	r3, [pc, #668]	; (8000a38 <MX_FREERTOS_Init+0x2e8>)
 800079a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	WD_DONE_semHandle = osSemaphoreCreate(osSemaphore(WD_DONE_sem), 1);
 800079e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80007a2:	2101      	movs	r1, #1
 80007a4:	4618      	mov	r0, r3
 80007a6:	f00b fbe6 	bl	800bf76 <osSemaphoreCreate>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4aa3      	ldr	r2, [pc, #652]	; (8000a3c <MX_FREERTOS_Init+0x2ec>)
 80007ae:	6013      	str	r3, [r2, #0]

	/* definition and creation of P30_DONE_sem */
	osSemaphoreStaticDef(P30_DONE_sem, &P30_DONE_semControlBlock);
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80007b6:	4ba2      	ldr	r3, [pc, #648]	; (8000a40 <MX_FREERTOS_Init+0x2f0>)
 80007b8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	P30_DONE_semHandle = osSemaphoreCreate(osSemaphore(P30_DONE_sem), 1);
 80007bc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fbd7 	bl	800bf76 <osSemaphoreCreate>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a9e      	ldr	r2, [pc, #632]	; (8000a44 <MX_FREERTOS_Init+0x2f4>)
 80007cc:	6013      	str	r3, [r2, #0]

	/* definition and creation of CMD_DONE_sem */
	osSemaphoreStaticDef(CMD_DONE_sem, &CMD_DONE_semControlBlock);
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80007d4:	4b9c      	ldr	r3, [pc, #624]	; (8000a48 <MX_FREERTOS_Init+0x2f8>)
 80007d6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	CMD_DONE_semHandle = osSemaphoreCreate(osSemaphore(CMD_DONE_sem), 1);
 80007da:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f00b fbc8 	bl	800bf76 <osSemaphoreCreate>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a98      	ldr	r2, [pc, #608]	; (8000a4c <MX_FREERTOS_Init+0x2fc>)
 80007ea:	6013      	str	r3, [r2, #0]

	/* definition and creation of RPT_DONE_sem */
	osSemaphoreStaticDef(RPT_DONE_sem, &RPT_DONE_semControlBlock);
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80007f2:	4b97      	ldr	r3, [pc, #604]	; (8000a50 <MX_FREERTOS_Init+0x300>)
 80007f4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	RPT_DONE_semHandle = osSemaphoreCreate(osSemaphore(RPT_DONE_sem), 1);
 80007f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80007fc:	2101      	movs	r1, #1
 80007fe:	4618      	mov	r0, r3
 8000800:	f00b fbb9 	bl	800bf76 <osSemaphoreCreate>
 8000804:	4603      	mov	r3, r0
 8000806:	4a93      	ldr	r2, [pc, #588]	; (8000a54 <MX_FREERTOS_Init+0x304>)
 8000808:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of GY39_Queue */
	osMessageQStaticDef(GY39_Queue, 2, CarbinData_t, GY39_QueueBuffer,
 800080a:	4b93      	ldr	r3, [pc, #588]	; (8000a58 <MX_FREERTOS_Init+0x308>)
 800080c:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 8000810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&GY39_QueueControlBlock);
	GY39_QueueHandle = osMessageCreate(osMessageQ(GY39_Queue), NULL);
 8000816:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f00b fbdc 	bl	800bfda <osMessageCreate>
 8000822:	4603      	mov	r3, r0
 8000824:	4a8d      	ldr	r2, [pc, #564]	; (8000a5c <MX_FREERTOS_Init+0x30c>)
 8000826:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931_Queue */
	osMessageQStaticDef(WT931_Queue, 2, IMUData_t, WT931_QueueBuffer,
 8000828:	4b8d      	ldr	r3, [pc, #564]	; (8000a60 <MX_FREERTOS_Init+0x310>)
 800082a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800082e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&WT931_QueueControlBlock);
	WT931_QueueHandle = osMessageCreate(osMessageQ(WT931_Queue), NULL);
 8000834:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f00b fbcd 	bl	800bfda <osMessageCreate>
 8000840:	4603      	mov	r3, r0
 8000842:	4a88      	ldr	r2, [pc, #544]	; (8000a64 <MX_FREERTOS_Init+0x314>)
 8000844:	6013      	str	r3, [r2, #0]

	/* definition and creation of WD_Queue */
	osMessageQStaticDef(WD_Queue, 2, DepthData_t, WD_QueueBuffer,
 8000846:	4b88      	ldr	r3, [pc, #544]	; (8000a68 <MX_FREERTOS_Init+0x318>)
 8000848:	f507 7498 	add.w	r4, r7, #304	; 0x130
 800084c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800084e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&WD_QueueControlBlock);
	WD_QueueHandle = osMessageCreate(osMessageQ(WD_Queue), NULL);
 8000852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f00b fbbe 	bl	800bfda <osMessageCreate>
 800085e:	4603      	mov	r3, r0
 8000860:	4a82      	ldr	r2, [pc, #520]	; (8000a6c <MX_FREERTOS_Init+0x31c>)
 8000862:	6013      	str	r3, [r2, #0]

	/* definition and creation of P30_Queue */
	osMessageQStaticDef(P30_Queue, 2, SonarData_t, P30_QueueBuffer,
 8000864:	4b82      	ldr	r3, [pc, #520]	; (8000a70 <MX_FREERTOS_Init+0x320>)
 8000866:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800086a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800086c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&P30_QueueControlBlock);
	P30_QueueHandle = osMessageCreate(osMessageQ(P30_Queue), NULL);
 8000870:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f00b fbaf 	bl	800bfda <osMessageCreate>
 800087c:	4603      	mov	r3, r0
 800087e:	4a7d      	ldr	r2, [pc, #500]	; (8000a74 <MX_FREERTOS_Init+0x324>)
 8000880:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osMessageQStaticDef(Rpt_Queue, 2, ReportData_t, Rpt_QueueBuffer,
 8000882:	4b7d      	ldr	r3, [pc, #500]	; (8000a78 <MX_FREERTOS_Init+0x328>)
 8000884:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800088a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&Rpt_QueueControlBlock);
	Rpt_QueueHandle = osMessageCreate(osMessageQ(Rpt_Queue), NULL);
 800088e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f00b fba0 	bl	800bfda <osMessageCreate>
 800089a:	4603      	mov	r3, r0
 800089c:	4a77      	ldr	r2, [pc, #476]	; (8000a7c <MX_FREERTOS_Init+0x32c>)
 800089e:	6013      	str	r3, [r2, #0]

	osMessageQStaticDef(Cmd_Queue, 2, ControlData_t, Cmd_QueueBuffer,
 80008a0:	4b77      	ldr	r3, [pc, #476]	; (8000a80 <MX_FREERTOS_Init+0x330>)
 80008a2:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80008a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&Cmd_QueueControlBlock);
	Cmd_QueueHandle = osMessageCreate(osMessageQ(Cmd_Queue), NULL);
 80008ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00b fb91 	bl	800bfda <osMessageCreate>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a72      	ldr	r2, [pc, #456]	; (8000a84 <MX_FREERTOS_Init+0x334>)
 80008bc:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Thread_Idle */
	osThreadStaticDef(Thread_Idle, Thread_IdleEntry, osPriorityLow, 0, 512,
 80008be:	4b72      	ldr	r3, [pc, #456]	; (8000a88 <MX_FREERTOS_Init+0x338>)
 80008c0:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80008c4:	461d      	mov	r5, r3
 80008c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			Thread_IdleBuffer, &Thread_IdleControlBlock);
	Thread_IdleHandle = osThreadCreate(osThread(Thread_Idle), NULL);
 80008d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f00b faec 	bl	800beb6 <osThreadCreate>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a6a      	ldr	r2, [pc, #424]	; (8000a8c <MX_FREERTOS_Init+0x33c>)
 80008e2:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_GY39 */
	osThreadStaticDef(Thread_GY39, Thread_GY39Entry, osPriorityBelowNormal, 0,
 80008e4:	4b6a      	ldr	r3, [pc, #424]	; (8000a90 <MX_FREERTOS_Init+0x340>)
 80008e6:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80008ea:	461d      	mov	r5, r3
 80008ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_GY39Buffer, &Thread_GY39ControlBlock);
	Thread_GY39Handle = osThreadCreate(osThread(Thread_GY39), NULL);
 80008f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f00b fad9 	bl	800beb6 <osThreadCreate>
 8000904:	4603      	mov	r3, r0
 8000906:	4a63      	ldr	r2, [pc, #396]	; (8000a94 <MX_FREERTOS_Init+0x344>)
 8000908:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_WT931 */
	osThreadStaticDef(Thread_WT931, Thread_WT931Entry, osPriorityBelowNormal, 0,
 800090a:	4b63      	ldr	r3, [pc, #396]	; (8000a98 <MX_FREERTOS_Init+0x348>)
 800090c:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000910:	461d      	mov	r5, r3
 8000912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000916:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800091a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_WT931Buffer, &Thread_WT931ControlBlock);
	Thread_WT931Handle = osThreadCreate(osThread(Thread_WT931), NULL);
 800091e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f00b fac6 	bl	800beb6 <osThreadCreate>
 800092a:	4603      	mov	r3, r0
 800092c:	4a5b      	ldr	r2, [pc, #364]	; (8000a9c <MX_FREERTOS_Init+0x34c>)
 800092e:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_WD */
	osThreadStaticDef(Thread_WD, Thread_WDEntry, osPriorityBelowNormal, 0, 512,
 8000930:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000934:	4a5a      	ldr	r2, [pc, #360]	; (8000aa0 <MX_FREERTOS_Init+0x350>)
 8000936:	461c      	mov	r4, r3
 8000938:	4615      	mov	r5, r2
 800093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			Thread_WDBuffer, &Thread_WDControlBlock);
	Thread_WDHandle = osThreadCreate(osThread(Thread_WD), NULL);
 8000946:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f00b fab2 	bl	800beb6 <osThreadCreate>
 8000952:	4603      	mov	r3, r0
 8000954:	4a53      	ldr	r2, [pc, #332]	; (8000aa4 <MX_FREERTOS_Init+0x354>)
 8000956:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_P30 */
	osThreadStaticDef(Thread_P30, Thread_P30Entry, osPriorityBelowNormal, 0,
 8000958:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800095c:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <MX_FREERTOS_Init+0x358>)
 800095e:	461c      	mov	r4, r3
 8000960:	4615      	mov	r5, r2
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800096a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_P30Buffer, &Thread_P30ControlBlock);
	Thread_P30Handle = osThreadCreate(osThread(Thread_P30), NULL);
 800096e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f00b fa9e 	bl	800beb6 <osThreadCreate>
 800097a:	4603      	mov	r3, r0
 800097c:	4a4b      	ldr	r2, [pc, #300]	; (8000aac <MX_FREERTOS_Init+0x35c>)
 800097e:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_Control */
	osThreadStaticDef(Thread_Control, Thread_ControlEntry, osPriorityNormal, 0,
 8000980:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000984:	4a4a      	ldr	r2, [pc, #296]	; (8000ab0 <MX_FREERTOS_Init+0x360>)
 8000986:	461c      	mov	r4, r3
 8000988:	4615      	mov	r5, r2
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_ControlBuffer, &Thread_ControlControlBlock);
	Thread_ControlHandle = osThreadCreate(osThread(Thread_Control), NULL);
 8000996:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f00b fa8a 	bl	800beb6 <osThreadCreate>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a43      	ldr	r2, [pc, #268]	; (8000ab4 <MX_FREERTOS_Init+0x364>)
 80009a6:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_Report */
	osThreadStaticDef(Thread_Report, Thread_ReportEntry, osPriorityNormal, 0,
 80009a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009ac:	4a42      	ldr	r2, [pc, #264]	; (8000ab8 <MX_FREERTOS_Init+0x368>)
 80009ae:	461c      	mov	r4, r3
 80009b0:	4615      	mov	r5, r2
 80009b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_ReportBuffer, &Thread_ReportControlBlock);
	Thread_ReportHandle = osThreadCreate(osThread(Thread_Report), NULL);
 80009be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00b fa76 	bl	800beb6 <osThreadCreate>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a3b      	ldr	r2, [pc, #236]	; (8000abc <MX_FREERTOS_Init+0x36c>)
 80009ce:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	osThreadStaticDef(Thread_CatchRpt, Thread_CatchRptEntry,
 80009d0:	f107 0320 	add.w	r3, r7, #32
 80009d4:	4a3a      	ldr	r2, [pc, #232]	; (8000ac0 <MX_FREERTOS_Init+0x370>)
 80009d6:	461c      	mov	r4, r3
 80009d8:	4615      	mov	r5, r2
 80009da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osPriorityBelowNormal, 0, 512, Thread_CatchRptBuffer,
			&Thread_CatchRptControlBlock);
	Thread_CatchRptHandle = osThreadCreate(osThread(Thread_CatchRpt), NULL);
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f00b fa62 	bl	800beb6 <osThreadCreate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a33      	ldr	r2, [pc, #204]	; (8000ac4 <MX_FREERTOS_Init+0x374>)
 80009f6:	6013      	str	r3, [r2, #0]

	osThreadStaticDef(Thread_CatchCmd, Thread_CatchCmdEntry,
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4a33      	ldr	r2, [pc, #204]	; (8000ac8 <MX_FREERTOS_Init+0x378>)
 80009fc:	461c      	mov	r4, r3
 80009fe:	4615      	mov	r5, r2
 8000a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osPriorityBelowNormal, 0, 512, Thread_CatchCmdBuffer,
			&Thread_CatchCmdControlBlock);
	Thread_CatchCmdHandle = osThreadCreate(osThread(Thread_CatchCmd), NULL);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00b fa50 	bl	800beb6 <osThreadCreate>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <MX_FREERTOS_Init+0x37c>)
 8000a1a:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_THREADS */

}
 8000a1c:	bf00      	nop
 8000a1e:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bdb0      	pop	{r4, r5, r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24005b44 	.word	0x24005b44
 8000a2c:	240041a4 	.word	0x240041a4
 8000a30:	24005234 	.word	0x24005234
 8000a34:	24005a88 	.word	0x24005a88
 8000a38:	24005a8c 	.word	0x24005a8c
 8000a3c:	24006da8 	.word	0x24006da8
 8000a40:	240040b4 	.word	0x240040b4
 8000a44:	24009064 	.word	0x24009064
 8000a48:	24008724 	.word	0x24008724
 8000a4c:	24006474 	.word	0x24006474
 8000a50:	240041ec 	.word	0x240041ec
 8000a54:	24005b8c 	.word	0x24005b8c
 8000a58:	0800e698 	.word	0x0800e698
 8000a5c:	24005a84 	.word	0x24005a84
 8000a60:	0800e6a8 	.word	0x0800e6a8
 8000a64:	24005a80 	.word	0x24005a80
 8000a68:	0800e6b8 	.word	0x0800e6b8
 8000a6c:	240041e8 	.word	0x240041e8
 8000a70:	0800e6c8 	.word	0x0800e6c8
 8000a74:	24006df8 	.word	0x24006df8
 8000a78:	0800e6d8 	.word	0x0800e6d8
 8000a7c:	24006d08 	.word	0x24006d08
 8000a80:	0800e6e8 	.word	0x0800e6e8
 8000a84:	24006dac 	.word	0x24006dac
 8000a88:	0800e6f8 	.word	0x0800e6f8
 8000a8c:	240087c0 	.word	0x240087c0
 8000a90:	0800e714 	.word	0x0800e714
 8000a94:	2400900c 	.word	0x2400900c
 8000a98:	0800e730 	.word	0x0800e730
 8000a9c:	24005bc0 	.word	0x24005bc0
 8000aa0:	0800e74c 	.word	0x0800e74c
 8000aa4:	24005a7c 	.word	0x24005a7c
 8000aa8:	0800e768 	.word	0x0800e768
 8000aac:	24006418 	.word	0x24006418
 8000ab0:	0800e784 	.word	0x0800e784
 8000ab4:	24009068 	.word	0x24009068
 8000ab8:	0800e7a0 	.word	0x0800e7a0
 8000abc:	24007ecc 	.word	0x24007ecc
 8000ac0:	0800e7bc 	.word	0x0800e7bc
 8000ac4:	24006470 	.word	0x24006470
 8000ac8:	0800e7d8 	.word	0x0800e7d8
 8000acc:	24006e44 	.word	0x24006e44

08000ad0 <Thread_IdleEntry>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_IdleEntry */
void Thread_IdleEntry(void const *argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;)
	{
//		printf("test\r\n");
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		osDelay(500);
 8000ad8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000adc:	f00b fa37 	bl	800bf4e <osDelay>
 8000ae0:	e7fa      	b.n	8000ad8 <Thread_IdleEntry+0x8>
	...

08000ae4 <Thread_GY39Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_GY39Entry */
void Thread_GY39Entry(void const *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
	/* USER CODE BEGIN Thread_GY39Entry */
	uint8_t GY39_TxBuffer[TEMPER_UART_TXLen] =
 8000aec:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <Thread_GY39Entry+0xcc>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	{ 0 };
	uint8_t GY39_RxBuffer[TEMPER_UART_RXLen] =
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	f107 0320 	add.w	r3, r7, #32
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	f8c3 2007 	str.w	r2, [r3, #7]
	{ 0 };
	CarbinData_t gy39_data;

	InitGY39(GY39_TxBuffer);
 8000b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00b f812 	bl	800bb38 <InitGY39>
	HAL_UART_Transmit_DMA(&TEMPER_UART, GY39_TxBuffer, sizeof(GY39_TxBuffer));
 8000b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b18:	2203      	movs	r2, #3
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4825      	ldr	r0, [pc, #148]	; (8000bb4 <Thread_GY39Entry+0xd0>)
 8000b1e:	f008 f867 	bl	8008bf0 <HAL_UART_Transmit_DMA>

	__HAL_UART_ENABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <Thread_GY39Entry+0xd0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <Thread_GY39Entry+0xd0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f042 0210 	orr.w	r2, r2, #16
 8000b30:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&TEMPER_UART, GY39_RxBuffer, sizeof(GY39_RxBuffer));
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	220f      	movs	r2, #15
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481e      	ldr	r0, [pc, #120]	; (8000bb4 <Thread_GY39Entry+0xd0>)
 8000b3c:	f008 f8ea 	bl	8008d14 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(GY39_DONE_semHandle, 0) == pdTRUE)
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <Thread_GY39Entry+0xd4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00b feca 	bl	800c8e0 <xQueueSemaphoreTake>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d12a      	bne.n	8000ba8 <Thread_GY39Entry+0xc4>
		{
			gy39_data = ReceiveGY39(GY39_RxBuffer);
 8000b52:	463b      	mov	r3, r7
 8000b54:	f107 021c 	add.w	r2, r7, #28
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f00b f801 	bl	800bb62 <ReceiveGY39>
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	463a      	mov	r2, r7
 8000b66:	6810      	ldr	r0, [r2, #0]
 8000b68:	6851      	ldr	r1, [r2, #4]
 8000b6a:	c303      	stmia	r3!, {r0, r1}

//			printf("t:%d, %d, %d\r\n", gy39_data.CarbinBarometric,
//					gy39_data.CarbinHumidity, gy39_data.CarbinTemperature);
			xQueueSendToFront(GY39_QueueHandle, (void* )&gy39_data, 0);
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <Thread_GY39Entry+0xd8>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	f107 0114 	add.w	r1, r7, #20
 8000b74:	2301      	movs	r3, #1
 8000b76:	2200      	movs	r2, #0
 8000b78:	f00b fc46 	bl	800c408 <xQueueGenericSend>

			memset(&GY39_RxBuffer, 0, sizeof(GY39_RxBuffer));
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	220f      	movs	r2, #15
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00d fd33 	bl	800e5f0 <memset>
			__HAL_UART_ENABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <Thread_GY39Entry+0xd0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <Thread_GY39Entry+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f042 0210 	orr.w	r2, r2, #16
 8000b98:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&TEMPER_UART, GY39_RxBuffer,
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <Thread_GY39Entry+0xd0>)
 8000ba4:	f008 f8b6 	bl	8008d14 <HAL_UART_Receive_DMA>
					sizeof(GY39_RxBuffer));
		}

		osDelay(100);
 8000ba8:	2064      	movs	r0, #100	; 0x64
 8000baa:	f00b f9d0 	bl	800bf4e <osDelay>
		if (xSemaphoreTake(GY39_DONE_semHandle, 0) == pdTRUE)
 8000bae:	e7c7      	b.n	8000b40 <Thread_GY39Entry+0x5c>
 8000bb0:	0800e7f4 	.word	0x0800e7f4
 8000bb4:	24009748 	.word	0x24009748
 8000bb8:	24005a88 	.word	0x24005a88
 8000bbc:	24005a84 	.word	0x24005a84

08000bc0 <Thread_WT931Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_WT931Entry */
void Thread_WT931Entry(void const *argument)
{
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b09a      	sub	sp, #104	; 0x68
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	61f8      	str	r0, [r7, #28]
	/* USER CODE BEGIN Thread_WT931Entry */
	uint8_t WT931_RxBuffer[AXIS_UART_RXLen] =
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd0:	2228      	movs	r2, #40	; 0x28
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00d fd0b 	bl	800e5f0 <memset>
	{ 0 };
	IMUData_t wt931_data;

	__HAL_UART_ENABLE_IT(&AXIS_UART, UART_IT_IDLE);
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <Thread_WT931Entry+0xb4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <Thread_WT931Entry+0xb4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f042 0210 	orr.w	r2, r2, #16
 8000be8:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&AXIS_UART, WT931_RxBuffer, sizeof(WT931_RxBuffer));
 8000bea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bee:	222c      	movs	r2, #44	; 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4820      	ldr	r0, [pc, #128]	; (8000c74 <Thread_WT931Entry+0xb4>)
 8000bf4:	f008 f88e 	bl	8008d14 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(WT931_DONE_semHandle, 0) == pdTRUE)
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <Thread_WT931Entry+0xb8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f00b fe6e 	bl	800c8e0 <xQueueSemaphoreTake>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d12f      	bne.n	8000c6a <Thread_WT931Entry+0xaa>
		{
			wt931_data = ReceiveWT931(WT931_RxBuffer);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00a fffc 	bl	800bc10 <ReceiveWT931>
 8000c18:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000c1c:	463d      	mov	r5, r7
 8000c1e:	6828      	ldr	r0, [r5, #0]
 8000c20:	6869      	ldr	r1, [r5, #4]
 8000c22:	68aa      	ldr	r2, [r5, #8]
 8000c24:	68eb      	ldr	r3, [r5, #12]
 8000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c28:	6928      	ldr	r0, [r5, #16]
 8000c2a:	6969      	ldr	r1, [r5, #20]
 8000c2c:	c403      	stmia	r4!, {r0, r1}

//			printf("wt931:%d,%d,%d\r\n", wt931_data.EulerAngle[0], wt931_data.EulerAngle[1], wt931_data.EulerAngle[2]);
			xQueueSendToFront(WT931_QueueHandle, (void* )&wt931_data, 0);
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <Thread_WT931Entry+0xbc>)
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c36:	2301      	movs	r3, #1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f00b fbe5 	bl	800c408 <xQueueGenericSend>

			memset(&WT931_RxBuffer, 0, sizeof(WT931_RxBuffer));
 8000c3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c42:	222c      	movs	r2, #44	; 0x2c
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00d fcd2 	bl	800e5f0 <memset>
			__HAL_UART_ENABLE_IT(&AXIS_UART, UART_IT_IDLE);
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <Thread_WT931Entry+0xb4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <Thread_WT931Entry+0xb4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0210 	orr.w	r2, r2, #16
 8000c5a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&AXIS_UART, WT931_RxBuffer,
 8000c5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c60:	222c      	movs	r2, #44	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <Thread_WT931Entry+0xb4>)
 8000c66:	f008 f855 	bl	8008d14 <HAL_UART_Receive_DMA>
					sizeof(WT931_RxBuffer));
		}
		osDelay(10);
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f00b f96f 	bl	800bf4e <osDelay>
		if (xSemaphoreTake(WT931_DONE_semHandle, 0) == pdTRUE)
 8000c70:	e7c2      	b.n	8000bf8 <Thread_WT931Entry+0x38>
 8000c72:	bf00      	nop
 8000c74:	24009220 	.word	0x24009220
 8000c78:	240041a4 	.word	0x240041a4
 8000c7c:	24005a80 	.word	0x24005a80

08000c80 <Thread_WDEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_WDEntry */
void Thread_WDEntry(void const *argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN Thread_WDEntry */
	uint8_t WD_RxBuffer[Deep_UART_RXLen] =
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
	{ 0 };
	DepthData_t wd_data;

	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 8000c96:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <Thread_WDEntry+0xa4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <Thread_WDEntry+0xa4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f042 0210 	orr.w	r2, r2, #16
 8000ca4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Deep_UART, WD_RxBuffer, sizeof(WD_RxBuffer));
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	220c      	movs	r2, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	481d      	ldr	r0, [pc, #116]	; (8000d24 <Thread_WDEntry+0xa4>)
 8000cb0:	f008 f830 	bl	8008d14 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(WD_DONE_semHandle, 0) == pdTRUE)
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <Thread_WDEntry+0xa8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f00b fe10 	bl	800c8e0 <xQueueSemaphoreTake>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d12a      	bne.n	8000d1c <Thread_WDEntry+0x9c>
		{
			wd_data = ReceiveDeep(WD_RxBuffer);
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00a fe14 	bl	800b8fc <ReceiveDeep>
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	463a      	mov	r2, r7
 8000cda:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

			xQueueSendToFront(WD_QueueHandle, (void* )&wd_data, 0);
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <Thread_WDEntry+0xac>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	f107 0118 	add.w	r1, r7, #24
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2200      	movs	r2, #0
 8000cec:	f00b fb8c 	bl	800c408 <xQueueGenericSend>

			memset(&WD_RxBuffer, 0, sizeof(WD_RxBuffer));
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	220c      	movs	r2, #12
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f00d fc79 	bl	800e5f0 <memset>
			__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <Thread_WDEntry+0xa4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <Thread_WDEntry+0xa4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f042 0210 	orr.w	r2, r2, #16
 8000d0c:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&Deep_UART, WD_RxBuffer, sizeof(WD_RxBuffer));
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	220c      	movs	r2, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	4803      	ldr	r0, [pc, #12]	; (8000d24 <Thread_WDEntry+0xa4>)
 8000d18:	f007 fffc 	bl	8008d14 <HAL_UART_Receive_DMA>
		}
		osDelay(10);
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f00b f916 	bl	800bf4e <osDelay>
		if (xSemaphoreTake(WD_DONE_semHandle, 0) == pdTRUE)
 8000d22:	e7c7      	b.n	8000cb4 <Thread_WDEntry+0x34>
 8000d24:	240096b8 	.word	0x240096b8
 8000d28:	24006da8 	.word	0x24006da8
 8000d2c:	240041e8 	.word	0x240041e8

08000d30 <Thread_P30Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_P30Entry */
void Thread_P30Entry(void const *argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b096      	sub	sp, #88	; 0x58
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN Thread_P30Entry */
	uint8_t P30_TxBuffer[SONAR_HEIGHT_UART_TXLen] =
 8000d38:	2300      	movs	r3, #0
 8000d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
	{ 0 };
	uint8_t P30_RxBuffer[SONAR_HEIGHT_UART_RXLen] =
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	221d      	movs	r2, #29
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00d fc4c 	bl	800e5f0 <memset>
	{ 0 };
	SonarData_t p30_data;

	InitP30(P30_TxBuffer);
 8000d58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f00a fce0 	bl	800b722 <InitP30>
	HAL_UART_Transmit_DMA(&SONAR_HEIGHT_UART, P30_TxBuffer,
 8000d62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d66:	220c      	movs	r2, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4825      	ldr	r0, [pc, #148]	; (8000e00 <Thread_P30Entry+0xd0>)
 8000d6c:	f007 ff40 	bl	8008bf0 <HAL_UART_Transmit_DMA>
			sizeof(P30_TxBuffer));

	__HAL_UART_ENABLE_IT(&SONAR_HEIGHT_UART, UART_IT_IDLE);
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <Thread_P30Entry+0xd0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <Thread_P30Entry+0xd0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0210 	orr.w	r2, r2, #16
 8000d7e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&SONAR_HEIGHT_UART, P30_RxBuffer,
 8000d80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d84:	2221      	movs	r2, #33	; 0x21
 8000d86:	4619      	mov	r1, r3
 8000d88:	481d      	ldr	r0, [pc, #116]	; (8000e00 <Thread_P30Entry+0xd0>)
 8000d8a:	f007 ffc3 	bl	8008d14 <HAL_UART_Receive_DMA>
			sizeof(P30_RxBuffer));

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(P30_DONE_semHandle, 0) == pdTRUE)
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <Thread_P30Entry+0xd4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00b fda3 	bl	800c8e0 <xQueueSemaphoreTake>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d12a      	bne.n	8000df6 <Thread_P30Entry+0xc6>
		{
			p30_data = ReceiveP30(P30_RxBuffer);
 8000da0:	463b      	mov	r3, r7
 8000da2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f00a fcf3 	bl	800b794 <ReceiveP30>
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	463a      	mov	r2, r7
 8000db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000db6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

			xQueueSendToFront(P30_QueueHandle, (void* )&p30_data, 0);
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <Thread_P30Entry+0xd8>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	f107 011c 	add.w	r1, r7, #28
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f00b fb1f 	bl	800c408 <xQueueGenericSend>

			memset(&P30_RxBuffer, 0, sizeof(P30_RxBuffer));
 8000dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dce:	2221      	movs	r2, #33	; 0x21
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f00d fc0c 	bl	800e5f0 <memset>
			__HAL_UART_ENABLE_IT(&SONAR_HEIGHT_UART, UART_IT_IDLE);
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <Thread_P30Entry+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <Thread_P30Entry+0xd0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0210 	orr.w	r2, r2, #16
 8000de6:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&SONAR_HEIGHT_UART, P30_RxBuffer,
 8000de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dec:	2221      	movs	r2, #33	; 0x21
 8000dee:	4619      	mov	r1, r3
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <Thread_P30Entry+0xd0>)
 8000df2:	f007 ff8f 	bl	8008d14 <HAL_UART_Receive_DMA>
					sizeof(P30_RxBuffer));
		}

		osDelay(10);
 8000df6:	200a      	movs	r0, #10
 8000df8:	f00b f8a9 	bl	800bf4e <osDelay>
		if (xSemaphoreTake(P30_DONE_semHandle, 0) == pdTRUE)
 8000dfc:	e7c7      	b.n	8000d8e <Thread_P30Entry+0x5e>
 8000dfe:	bf00      	nop
 8000e00:	24009328 	.word	0x24009328
 8000e04:	24009064 	.word	0x24009064
 8000e08:	24006df8 	.word	0x24006df8

08000e0c <Thread_ControlEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_ControlEntry */
void Thread_ControlEntry(void const *argument)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b091      	sub	sp, #68	; 0x44
 8000e10:	af06      	add	r7, sp, #24
 8000e12:	6078      	str	r0, [r7, #4]
	ControlData_t control_data_origin;

	static uint8_t Cmd_TxBuffer[Slave_UART_TXLEN] =
	{ 0 };

	OpenWrt_Delay();
 8000e14:	f7ff fc58 	bl	80006c8 <OpenWrt_Delay>

	/* Infinite loop */
	for (;;)
	{
		if (xQueueReceive(Cmd_QueueHandle, &control_data_origin, 0) == pdTRUE)
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <Thread_ControlEntry+0x50>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f107 0108 	add.w	r1, r7, #8
 8000e20:	2200      	movs	r2, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00b fc7c 	bl	800c720 <xQueueReceive>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d111      	bne.n	8000e52 <Thread_ControlEntry+0x46>
		{
			ControlDataGenerate(control_data_origin, Cmd_TxBuffer);
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <Thread_ControlEntry+0x54>)
 8000e30:	9304      	str	r3, [sp, #16]
 8000e32:	466c      	mov	r4, sp
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e44:	f00a fbb3 	bl	800b5ae <ControlDataGenerate>

			HAL_UART_Transmit_DMA(&Slave_UART, Cmd_TxBuffer,
 8000e48:	221e      	movs	r2, #30
 8000e4a:	4905      	ldr	r1, [pc, #20]	; (8000e60 <Thread_ControlEntry+0x54>)
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <Thread_ControlEntry+0x58>)
 8000e4e:	f007 fecf 	bl	8008bf0 <HAL_UART_Transmit_DMA>
					sizeof(Cmd_TxBuffer));
//			memset(&Cmd_TxBuffer, 0, sizeof(Cmd_TxBuffer));
		}

		osDelay(100);
 8000e52:	2064      	movs	r0, #100	; 0x64
 8000e54:	f00b f87b 	bl	800bf4e <osDelay>
		if (xQueueReceive(Cmd_QueueHandle, &control_data_origin, 0) == pdTRUE)
 8000e58:	e7de      	b.n	8000e18 <Thread_ControlEntry+0xc>
 8000e5a:	bf00      	nop
 8000e5c:	24006dac 	.word	0x24006dac
 8000e60:	24000284 	.word	0x24000284
 8000e64:	24009628 	.word	0x24009628

08000e68 <Thread_ReportEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_ReportEntry */
void Thread_ReportEntry(void const *argument)
{
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	b09b      	sub	sp, #108	; 0x6c
 8000e6c:	af0c      	add	r7, sp, #48	; 0x30
 8000e6e:	6078      	str	r0, [r7, #4]
	static ReportData_t rpt_data_powcarbin;

//	static uint8_t Report_RxBuffer[Slave_UART_RXLen] =
//	{ 0 };

	uint8_t Report_TxBuffer[Master_UART_TXLen] =
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	222b      	movs	r2, #43	; 0x2b
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f00d fbb7 	bl	800e5f0 <memset>
	{ 0 };

	static ReportData_t report_data;
	report_data.FrameHead = 0x25;
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000e84:	2225      	movs	r2, #37	; 0x25
 8000e86:	701a      	strb	r2, [r3, #0]
	report_data.CabinFunction = 0x01;
 8000e88:	4b65      	ldr	r3, [pc, #404]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	705a      	strb	r2, [r3, #1]
	report_data.FrameEnd = 0xFFFF;
 8000e8e:	4b64      	ldr	r3, [pc, #400]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e94:	869a      	strh	r2, [r3, #52]	; 0x34
	report_data.IdTest = 0x00;
 8000e96:	4b62      	ldr	r3, [pc, #392]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	OpenWrt_Delay();
 8000e9e:	f7ff fc13 	bl	80006c8 <OpenWrt_Delay>

	/* Infinite loop */
	for (;;)
	{
		xQueueReceive(GY39_QueueHandle, &gy39_data, 0);
 8000ea2:	4b60      	ldr	r3, [pc, #384]	; (8001024 <Thread_ReportEntry+0x1bc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	495f      	ldr	r1, [pc, #380]	; (8001028 <Thread_ReportEntry+0x1c0>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f00b fc38 	bl	800c720 <xQueueReceive>
		xQueueReceive(WT931_QueueHandle, &wt931_data, 0);
 8000eb0:	4b5e      	ldr	r3, [pc, #376]	; (800102c <Thread_ReportEntry+0x1c4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	495e      	ldr	r1, [pc, #376]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f00b fc31 	bl	800c720 <xQueueReceive>
		xQueueReceive(WD_QueueHandle, &wd_data, 0);
 8000ebe:	4b5d      	ldr	r3, [pc, #372]	; (8001034 <Thread_ReportEntry+0x1cc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	495c      	ldr	r1, [pc, #368]	; (8001038 <Thread_ReportEntry+0x1d0>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f00b fc2a 	bl	800c720 <xQueueReceive>
		xQueueReceive(P30_QueueHandle, &p30_data, 0);
 8000ecc:	4b5b      	ldr	r3, [pc, #364]	; (800103c <Thread_ReportEntry+0x1d4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	495b      	ldr	r1, [pc, #364]	; (8001040 <Thread_ReportEntry+0x1d8>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f00b fc23 	bl	800c720 <xQueueReceive>
		xQueueReceive(Rpt_QueueHandle, &rpt_data_powcarbin, 0);
 8000eda:	4b5a      	ldr	r3, [pc, #360]	; (8001044 <Thread_ReportEntry+0x1dc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4959      	ldr	r1, [pc, #356]	; (8001048 <Thread_ReportEntry+0x1e0>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00b fc1c 	bl	800c720 <xQueueReceive>

		report_data.WaterDetect = HAL_GPIO_ReadPin(WATER_DET_GPIO_Port,
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	4858      	ldr	r0, [pc, #352]	; (800104c <Thread_ReportEntry+0x1e4>)
 8000eec:	f004 ff74 	bl	8005dd8 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000ef6:	709a      	strb	r2, [r3, #2]
		WATER_DET_Pin);

		report_data.CabinTemperature = gy39_data.CarbinTemperature;
 8000ef8:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <Thread_ReportEntry+0x1c0>)
 8000efa:	881a      	ldrh	r2, [r3, #0]
 8000efc:	4b48      	ldr	r3, [pc, #288]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000efe:	809a      	strh	r2, [r3, #4]
		report_data.CabinBarometric = gy39_data.CarbinBarometric;
 8000f00:	4b49      	ldr	r3, [pc, #292]	; (8001028 <Thread_ReportEntry+0x1c0>)
 8000f02:	889b      	ldrh	r3, [r3, #4]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b46      	ldr	r3, [pc, #280]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f08:	609a      	str	r2, [r3, #8]
		report_data.CabinHumidity = gy39_data.CarbinHumidity;
 8000f0a:	4b47      	ldr	r3, [pc, #284]	; (8001028 <Thread_ReportEntry+0x1c0>)
 8000f0c:	885a      	ldrh	r2, [r3, #2]
 8000f0e:	4b44      	ldr	r3, [pc, #272]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f10:	819a      	strh	r2, [r3, #12]

		report_data.AccNum[0] = wt931_data.Acceleration[0];
 8000f12:	4b47      	ldr	r3, [pc, #284]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f14:	881a      	ldrh	r2, [r3, #0]
 8000f16:	4b42      	ldr	r3, [pc, #264]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f18:	81da      	strh	r2, [r3, #14]
		report_data.AccNum[1] = wt931_data.Acceleration[1];
 8000f1a:	4b45      	ldr	r3, [pc, #276]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f1c:	885a      	ldrh	r2, [r3, #2]
 8000f1e:	4b40      	ldr	r3, [pc, #256]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f20:	821a      	strh	r2, [r3, #16]
		report_data.AccNum[2] = wt931_data.Acceleration[2];
 8000f22:	4b43      	ldr	r3, [pc, #268]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f24:	889a      	ldrh	r2, [r3, #4]
 8000f26:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f28:	825a      	strh	r2, [r3, #18]
		report_data.RotNum[0] = wt931_data.AngularSpeed[0];
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f2c:	88da      	ldrh	r2, [r3, #6]
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f30:	829a      	strh	r2, [r3, #20]
		report_data.RotNum[1] = wt931_data.AngularSpeed[1];
 8000f32:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f34:	891a      	ldrh	r2, [r3, #8]
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f38:	82da      	strh	r2, [r3, #22]
		report_data.RotNum[2] = wt931_data.AngularSpeed[2];
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f3c:	895a      	ldrh	r2, [r3, #10]
 8000f3e:	4b38      	ldr	r3, [pc, #224]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f40:	831a      	strh	r2, [r3, #24]
		report_data.EulNum[0] = wt931_data.EulerAngle[0];
 8000f42:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f44:	899a      	ldrh	r2, [r3, #12]
 8000f46:	4b36      	ldr	r3, [pc, #216]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f48:	835a      	strh	r2, [r3, #26]
		report_data.EulNum[1] = wt931_data.EulerAngle[1];
 8000f4a:	4b39      	ldr	r3, [pc, #228]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f4c:	89da      	ldrh	r2, [r3, #14]
 8000f4e:	4b34      	ldr	r3, [pc, #208]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f50:	839a      	strh	r2, [r3, #28]
		report_data.EulNum[2] = wt931_data.EulerAngle[2];
 8000f52:	4b37      	ldr	r3, [pc, #220]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f54:	8a1a      	ldrh	r2, [r3, #16]
 8000f56:	4b32      	ldr	r3, [pc, #200]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f58:	83da      	strh	r2, [r3, #30]
		report_data.MagNum[0] = wt931_data.MagneticValue[0];
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f5c:	8a5a      	ldrh	r2, [r3, #18]
 8000f5e:	4b30      	ldr	r3, [pc, #192]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f60:	841a      	strh	r2, [r3, #32]
		report_data.MagNum[1] = wt931_data.MagneticValue[1];
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f64:	8a9a      	ldrh	r2, [r3, #20]
 8000f66:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f68:	845a      	strh	r2, [r3, #34]	; 0x22
		report_data.MagNum[2] = wt931_data.MagneticValue[2];
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <Thread_ReportEntry+0x1c8>)
 8000f6c:	8ada      	ldrh	r2, [r3, #22]
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f70:	849a      	strh	r2, [r3, #36]	; 0x24

		report_data.SonarHeight = p30_data.SonarHeight;
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <Thread_ReportEntry+0x1d8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a2a      	ldr	r2, [pc, #168]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f78:	6293      	str	r3, [r2, #40]	; 0x28
		report_data.SonarConfidence = p30_data.Confidence;
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <Thread_ReportEntry+0x1d8>)
 8000f7c:	891a      	ldrh	r2, [r3, #8]
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f80:	859a      	strh	r2, [r3, #44]	; 0x2c

		report_data.WaterTemperature = wd_data.WaterTemperature;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <Thread_ReportEntry+0x1d0>)
 8000f84:	881a      	ldrh	r2, [r3, #0]
 8000f86:	4b26      	ldr	r3, [pc, #152]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f88:	85da      	strh	r2, [r3, #46]	; 0x2e
		report_data.WaterDepth = wd_data.WaterDepth;
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <Thread_ReportEntry+0x1d0>)
 8000f8c:	891a      	ldrh	r2, [r3, #8]
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f90:	861a      	strh	r2, [r3, #48]	; 0x30

		//send data to tx_buffer
		if (CARBIN_REPORT_SEL == 0) //send control carbin
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <Thread_ReportEntry+0x1e8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d120      	bne.n	8000fdc <Thread_ReportEntry+0x174>
		{
			report_data.CabinFunction = 0x01;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	705a      	strb	r2, [r3, #1]

			CaptureReportData(report_data, Report_TxBuffer);
 8000fa0:	4e1f      	ldr	r6, [pc, #124]	; (8001020 <Thread_ReportEntry+0x1b8>)
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8000fa8:	466d      	mov	r5, sp
 8000faa:	f106 0410 	add.w	r4, r6, #16
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fba:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fbe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fc2:	f009 fe7b 	bl	800acbc <CaptureReportData>

			HAL_UART_Transmit_DMA(&Master_UART, Report_TxBuffer,
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	222f      	movs	r2, #47	; 0x2f
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4821      	ldr	r0, [pc, #132]	; (8001054 <Thread_ReportEntry+0x1ec>)
 8000fd0:	f007 fe0e 	bl	8008bf0 <HAL_UART_Transmit_DMA>
					sizeof(Report_TxBuffer));
			CARBIN_REPORT_SEL = 1;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <Thread_ReportEntry+0x1e8>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e01c      	b.n	8001016 <Thread_ReportEntry+0x1ae>
		}
		else //send power carbin
		{
			CaptureReportData(rpt_data_powcarbin, Report_TxBuffer);
 8000fdc:	4e1a      	ldr	r6, [pc, #104]	; (8001048 <Thread_ReportEntry+0x1e0>)
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8000fe4:	466d      	mov	r5, sp
 8000fe6:	f106 0410 	add.w	r4, r6, #16
 8000fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ff6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ffa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ffe:	f009 fe5d 	bl	800acbc <CaptureReportData>

			HAL_UART_Transmit_DMA(&Master_UART, Report_TxBuffer,
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	222f      	movs	r2, #47	; 0x2f
 8001008:	4619      	mov	r1, r3
 800100a:	4812      	ldr	r0, [pc, #72]	; (8001054 <Thread_ReportEntry+0x1ec>)
 800100c:	f007 fdf0 	bl	8008bf0 <HAL_UART_Transmit_DMA>
					sizeof(Report_TxBuffer));
			CARBIN_REPORT_SEL = 0;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <Thread_ReportEntry+0x1e8>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]

//		printf("conc:%d,%d\r\n",report_data.EulNum[0],report_data.CabinTemperature);
//		CaptureReportData(report_data, Report_TxBuffer);
//		HAL_UART_Transmit_DMA(&Master_UART, Report_TxBuffer, sizeof(Report_TxBuffer));

		osDelay(100);
 8001016:	2064      	movs	r0, #100	; 0x64
 8001018:	f00a ff99 	bl	800bf4e <osDelay>
		xQueueReceive(GY39_QueueHandle, &gy39_data, 0);
 800101c:	e741      	b.n	8000ea2 <Thread_ReportEntry+0x3a>
 800101e:	bf00      	nop
 8001020:	240002a4 	.word	0x240002a4
 8001024:	24005a84 	.word	0x24005a84
 8001028:	240002dc 	.word	0x240002dc
 800102c:	24005a80 	.word	0x24005a80
 8001030:	240002e4 	.word	0x240002e4
 8001034:	240041e8 	.word	0x240041e8
 8001038:	240002fc 	.word	0x240002fc
 800103c:	24006df8 	.word	0x24006df8
 8001040:	24000308 	.word	0x24000308
 8001044:	24006d08 	.word	0x24006d08
 8001048:	24000314 	.word	0x24000314
 800104c:	58021000 	.word	0x58021000
 8001050:	2400034c 	.word	0x2400034c
 8001054:	24009520 	.word	0x24009520

08001058 <Thread_CatchRptEntry>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Thread_CatchRptEntry(void const *argument)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b0b6      	sub	sp, #216	; 0xd8
 800105c:	af00      	add	r7, sp, #0
 800105e:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Report_RxBuffer[2 * Slave_UART_RXLen] =
 8001060:	2300      	movs	r3, #0
 8001062:	67bb      	str	r3, [r7, #120]	; 0x78
 8001064:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001068:	225a      	movs	r2, #90	; 0x5a
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00d fabf 	bl	800e5f0 <memset>
	{ 0 };
	ReportData_t rpt_data;

	__HAL_UART_ENABLE_IT(&Slave_UART, UART_IT_IDLE);
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <Thread_CatchRptEntry+0xb8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <Thread_CatchRptEntry+0xb8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 0210 	orr.w	r2, r2, #16
 8001080:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Slave_UART, Report_RxBuffer, sizeof(Report_RxBuffer));
 8001082:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001086:	225e      	movs	r2, #94	; 0x5e
 8001088:	4619      	mov	r1, r3
 800108a:	4821      	ldr	r0, [pc, #132]	; (8001110 <Thread_CatchRptEntry+0xb8>)
 800108c:	f007 fe42 	bl	8008d14 <HAL_UART_Receive_DMA>
	for (;;)
	{
		if (xSemaphoreTake(RPT_DONE_semHandle, 0) == pdTRUE)
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <Thread_CatchRptEntry+0xbc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00b fc22 	bl	800c8e0 <xQueueSemaphoreTake>
 800109c:	4603      	mov	r3, r0
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d131      	bne.n	8001106 <Thread_CatchRptEntry+0xae>
		{
			rpt_data = ReportDataAnalysis(Report_RxBuffer);
 80010a2:	463b      	mov	r3, r7
 80010a4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f009 ff2a 	bl	800af04 <ReportDataAnalysis>
 80010b0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80010b4:	463d      	mov	r5, r7
 80010b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010c6:	e884 0003 	stmia.w	r4, {r0, r1}

			xQueueSendToFront(Rpt_QueueHandle, (void* )&rpt_data, 0);
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <Thread_CatchRptEntry+0xc0>)
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80010d2:	2301      	movs	r3, #1
 80010d4:	2200      	movs	r2, #0
 80010d6:	f00b f997 	bl	800c408 <xQueueGenericSend>

			memset(&Report_RxBuffer, 0, sizeof(Report_RxBuffer));
 80010da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010de:	225e      	movs	r2, #94	; 0x5e
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00d fa84 	bl	800e5f0 <memset>
			__HAL_UART_ENABLE_IT(&Slave_UART, UART_IT_IDLE);
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <Thread_CatchRptEntry+0xb8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <Thread_CatchRptEntry+0xb8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0210 	orr.w	r2, r2, #16
 80010f6:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&Slave_UART, Report_RxBuffer,
 80010f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010fc:	225e      	movs	r2, #94	; 0x5e
 80010fe:	4619      	mov	r1, r3
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <Thread_CatchRptEntry+0xb8>)
 8001102:	f007 fe07 	bl	8008d14 <HAL_UART_Receive_DMA>
					sizeof(Report_RxBuffer));
		}
		osDelay(1);
 8001106:	2001      	movs	r0, #1
 8001108:	f00a ff21 	bl	800bf4e <osDelay>
		if (xSemaphoreTake(RPT_DONE_semHandle, 0) == pdTRUE)
 800110c:	e7c0      	b.n	8001090 <Thread_CatchRptEntry+0x38>
 800110e:	bf00      	nop
 8001110:	24009628 	.word	0x24009628
 8001114:	24005b8c 	.word	0x24005b8c
 8001118:	24006d08 	.word	0x24006d08

0800111c <Thread_CatchCmdEntry>:
	}
}

void Thread_CatchCmdEntry(void const *argument)
{
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b0a2      	sub	sp, #136	; 0x88
 8001120:	af00      	add	r7, sp, #0
 8001122:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t Command_RxBuffer[2 * Master_UART_RXLen] =
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <Thread_CatchCmdEntry+0xc0>)
 8001126:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800112a:	461d      	mov	r5, r3
 800112c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001138:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800113c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			0x05, 0xDC, 0x05, 0xDC, 0x05, 0xDC, 0x05, 0xDC, 0x05, 0xDC, 0x05,
			0xDC, 0x00, 0x00, 0x21 };

	ControlData_t control_data;

	__HAL_UART_ENABLE_IT(&Master_UART, UART_IT_IDLE);
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <Thread_CatchCmdEntry+0xc4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <Thread_CatchCmdEntry+0xc4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0210 	orr.w	r2, r2, #16
 800114e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Master_UART, Command_RxBuffer,
 8001150:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001154:	223c      	movs	r2, #60	; 0x3c
 8001156:	4619      	mov	r1, r3
 8001158:	4821      	ldr	r0, [pc, #132]	; (80011e0 <Thread_CatchCmdEntry+0xc4>)
 800115a:	f007 fddb 	bl	8008d14 <HAL_UART_Receive_DMA>
			sizeof(Command_RxBuffer));
	for (;;)
	{
		if (xSemaphoreTake(CMD_DONE_semHandle, 0) == pdTRUE)
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <Thread_CatchCmdEntry+0xc8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00b fbbb 	bl	800c8e0 <xQueueSemaphoreTake>
 800116a:	4603      	mov	r3, r0
 800116c:	2b01      	cmp	r3, #1
 800116e:	d131      	bne.n	80011d4 <Thread_CatchCmdEntry+0xb8>
		{
			control_data = CaptureControlData(Command_RxBuffer);
 8001170:	463b      	mov	r3, r7
 8001172:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f00a f8c3 	bl	800b304 <CaptureControlData>
 800117e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001182:	463d      	mov	r5, r7
 8001184:	6828      	ldr	r0, [r5, #0]
 8001186:	6869      	ldr	r1, [r5, #4]
 8001188:	68aa      	ldr	r2, [r5, #8]
 800118a:	68eb      	ldr	r3, [r5, #12]
 800118c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118e:	6928      	ldr	r0, [r5, #16]
 8001190:	6969      	ldr	r1, [r5, #20]
 8001192:	69aa      	ldr	r2, [r5, #24]
 8001194:	69eb      	ldr	r3, [r5, #28]
 8001196:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			xQueueSendToFront(Cmd_QueueHandle, (void* )&control_data, 0);
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <Thread_CatchCmdEntry+0xcc>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80011a0:	2301      	movs	r3, #1
 80011a2:	2200      	movs	r2, #0
 80011a4:	f00b f930 	bl	800c408 <xQueueGenericSend>

			memset(&Command_RxBuffer, 0, sizeof(Command_RxBuffer));
 80011a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ac:	223c      	movs	r2, #60	; 0x3c
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00d fa1d 	bl	800e5f0 <memset>
			__HAL_UART_ENABLE_IT(&Master_UART, UART_IT_IDLE);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <Thread_CatchCmdEntry+0xc4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <Thread_CatchCmdEntry+0xc4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0210 	orr.w	r2, r2, #16
 80011c4:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&Master_UART, Command_RxBuffer,
 80011c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ca:	223c      	movs	r2, #60	; 0x3c
 80011cc:	4619      	mov	r1, r3
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <Thread_CatchCmdEntry+0xc4>)
 80011d0:	f007 fda0 	bl	8008d14 <HAL_UART_Receive_DMA>
					sizeof(Command_RxBuffer));
		}
		osDelay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f00a feba 	bl	800bf4e <osDelay>
		if (xSemaphoreTake(CMD_DONE_semHandle, 0) == pdTRUE)
 80011da:	e7c0      	b.n	800115e <Thread_CatchCmdEntry+0x42>
 80011dc:	0800e7f8 	.word	0x0800e7f8
 80011e0:	24009520 	.word	0x24009520
 80011e4:	24006474 	.word	0x24006474
 80011e8:	24006dac 	.word	0x24006dac

080011ec <MX_GPIO_Init>:
     PA8   ------> S_TIM1_CH1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	4b4a      	ldr	r3, [pc, #296]	; (800132c <MX_GPIO_Init+0x140>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	4a48      	ldr	r2, [pc, #288]	; (800132c <MX_GPIO_Init+0x140>)
 800120a:	f043 0310 	orr.w	r3, r3, #16
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001212:	4b46      	ldr	r3, [pc, #280]	; (800132c <MX_GPIO_Init+0x140>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001220:	4b42      	ldr	r3, [pc, #264]	; (800132c <MX_GPIO_Init+0x140>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	4a41      	ldr	r2, [pc, #260]	; (800132c <MX_GPIO_Init+0x140>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001230:	4b3e      	ldr	r3, [pc, #248]	; (800132c <MX_GPIO_Init+0x140>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123e:	4b3b      	ldr	r3, [pc, #236]	; (800132c <MX_GPIO_Init+0x140>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	4a39      	ldr	r2, [pc, #228]	; (800132c <MX_GPIO_Init+0x140>)
 8001246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124e:	4b37      	ldr	r3, [pc, #220]	; (800132c <MX_GPIO_Init+0x140>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b33      	ldr	r3, [pc, #204]	; (800132c <MX_GPIO_Init+0x140>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <MX_GPIO_Init+0x140>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126c:	4b2f      	ldr	r3, [pc, #188]	; (800132c <MX_GPIO_Init+0x140>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <MX_GPIO_Init+0x140>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	4a2a      	ldr	r2, [pc, #168]	; (800132c <MX_GPIO_Init+0x140>)
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <MX_GPIO_Init+0x140>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2110      	movs	r1, #16
 800129c:	4824      	ldr	r0, [pc, #144]	; (8001330 <MX_GPIO_Init+0x144>)
 800129e:	f004 fdb3 	bl	8005e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a8:	4822      	ldr	r0, [pc, #136]	; (8001334 <MX_GPIO_Init+0x148>)
 80012aa:	f004 fdad 	bl	8005e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ae:	2310      	movs	r3, #16
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <MX_GPIO_Init+0x144>)
 80012c6:	f004 fbd7 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ca:	2340      	movs	r3, #64	; 0x40
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4814      	ldr	r0, [pc, #80]	; (8001330 <MX_GPIO_Init+0x144>)
 80012de:	f004 fbcb 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <MX_GPIO_Init+0x148>)
 80012fc:	f004 fbbc 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130e:	2302      	movs	r3, #2
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001312:	2301      	movs	r3, #1
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4806      	ldr	r0, [pc, #24]	; (8001338 <MX_GPIO_Init+0x14c>)
 800131e:	f004 fbab 	bl	8005a78 <HAL_GPIO_Init>

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	58024400 	.word	0x58024400
 8001330:	58021000 	.word	0x58021000
 8001334:	58020800 	.word	0x58020800
 8001338:	58020000 	.word	0x58020000

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f001 fc0c 	bl	8002b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f820 	bl	8001388 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001348:	f000 f8a2 	bl	8001490 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134c:	f7ff ff4e 	bl	80011ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001350:	f7ff f942 	bl	80005d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001354:	f000 ff6c 	bl	8002230 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001358:	f000 ffb6 	bl	80022c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800135c:	f001 f800 	bl	8002360 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8001360:	f000 fe82 	bl	8002068 <MX_UART4_Init>
  MX_UART8_Init();
 8001364:	f000 ff18 	bl	8002198 <MX_UART8_Init>
  MX_UART5_Init();
 8001368:	f000 feca 	bl	8002100 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <main+0x48>)
 8001374:	f004 fd48 	bl	8005e08 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001378:	f7ff f9ea 	bl	8000750 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800137c:	f00a fd94 	bl	800bea8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001380:	e7fe      	b.n	8001380 <main+0x44>
 8001382:	bf00      	nop
 8001384:	58020800 	.word	0x58020800

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b09c      	sub	sp, #112	; 0x70
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	224c      	movs	r2, #76	; 0x4c
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f00d f92a 	bl	800e5f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2220      	movs	r2, #32
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00d f924 	bl	800e5f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013a8:	2002      	movs	r0, #2
 80013aa:	f004 fd61 	bl	8005e70 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <SystemClock_Config+0xfc>)
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	4a33      	ldr	r2, [pc, #204]	; (8001484 <SystemClock_Config+0xfc>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <SystemClock_Config+0xfc>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <SystemClock_Config+0x100>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <SystemClock_Config+0x100>)
 80013ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <SystemClock_Config+0x100>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013e0:	bf00      	nop
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <SystemClock_Config+0x100>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ee:	d1f8      	bne.n	80013e2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <SystemClock_Config+0x104>)
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f023 0303 	bic.w	r3, r3, #3
 80013f8:	4a24      	ldr	r2, [pc, #144]	; (800148c <SystemClock_Config+0x104>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001400:	2301      	movs	r3, #1
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140e:	2302      	movs	r3, #2
 8001410:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001412:	2305      	movs	r3, #5
 8001414:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001416:	23a0      	movs	r3, #160	; 0xa0
 8001418:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800141e:	2302      	movs	r3, #2
 8001420:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001422:	2302      	movs	r3, #2
 8001424:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001426:	2308      	movs	r3, #8
 8001428:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800142a:	2300      	movs	r3, #0
 800142c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	4618      	mov	r0, r3
 8001438:	f004 fd54 	bl	8005ee4 <HAL_RCC_OscConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001442:	f000 f863 	bl	800150c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001446:	233f      	movs	r3, #63	; 0x3f
 8001448:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144a:	2303      	movs	r3, #3
 800144c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001452:	2308      	movs	r3, #8
 8001454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001456:	2340      	movs	r3, #64	; 0x40
 8001458:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800145a:	2340      	movs	r3, #64	; 0x40
 800145c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800145e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001462:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001464:	2340      	movs	r3, #64	; 0x40
 8001466:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2102      	movs	r1, #2
 800146c:	4618      	mov	r0, r3
 800146e:	f005 f965 	bl	800673c <HAL_RCC_ClockConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001478:	f000 f848 	bl	800150c <Error_Handler>
  }
}
 800147c:	bf00      	nop
 800147e:	3770      	adds	r7, #112	; 0x70
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	58000400 	.word	0x58000400
 8001488:	58024800 	.word	0x58024800
 800148c:	58024400 	.word	0x58024400

08001490 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0b0      	sub	sp, #192	; 0xc0
 8001494:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	22bc      	movs	r2, #188	; 0xbc
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f00d f8a7 	bl	800e5f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART8
 80014a2:	2303      	movs	r3, #3
 80014a4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 80014a6:	2319      	movs	r3, #25
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 192;
 80014aa:	23c0      	movs	r3, #192	; 0xc0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80014be:	2300      	movs	r3, #0
 80014c0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 80014c6:	2302      	movs	r3, #2
 80014c8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 80014ca:	2310      	movs	r3, #16
 80014cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 fd01 	bl	8006ed8 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80014dc:	f000 f816 	bl	800150c <Error_Handler>
  }
}
 80014e0:	bf00      	nop
 80014e2:	37c0      	adds	r7, #192	; 0xc0
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014fa:	f001 fb6b 	bl	8002bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40001000 	.word	0x40001000

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_MspInit+0x38>)
 8001520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_MspInit+0x38>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_MspInit+0x38>)
 8001530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	210f      	movs	r1, #15
 8001540:	f06f 0001 	mvn.w	r0, #1
 8001544:	f001 fc2a 	bl	8002d9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	58024400 	.word	0x58024400

08001554 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b090      	sub	sp, #64	; 0x40
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	d827      	bhi.n	80015b2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001562:	2200      	movs	r2, #0
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	2036      	movs	r0, #54	; 0x36
 8001568:	f001 fc18 	bl	8002d9c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800156c:	2036      	movs	r0, #54	; 0x36
 800156e:	f001 fc2f 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001572:	4a29      	ldr	r2, [pc, #164]	; (8001618 <HAL_InitTick+0xc4>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <HAL_InitTick+0xc8>)
 800157a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800157e:	4a27      	ldr	r2, [pc, #156]	; (800161c <HAL_InitTick+0xc8>)
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_InitTick+0xc8>)
 800158a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001596:	f107 0210 	add.w	r2, r7, #16
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f005 fc57 	bl	8006e54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d106      	bne.n	80015be <HAL_InitTick+0x6a>
 80015b0:	e001      	b.n	80015b6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e02b      	b.n	800160e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b6:	f005 fc21 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 80015ba:	63f8      	str	r0, [r7, #60]	; 0x3c
 80015bc:	e004      	b.n	80015c8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015be:	f005 fc1d 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 80015c2:	4603      	mov	r3, r0
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ca:	4a15      	ldr	r2, [pc, #84]	; (8001620 <HAL_InitTick+0xcc>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	0c9b      	lsrs	r3, r3, #18
 80015d2:	3b01      	subs	r3, #1
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_InitTick+0xd0>)
 80015d8:	4a13      	ldr	r2, [pc, #76]	; (8001628 <HAL_InitTick+0xd4>)
 80015da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_InitTick+0xd0>)
 80015de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015e4:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <HAL_InitTick+0xd0>)
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_InitTick+0xd0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_InitTick+0xd0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015f6:	480b      	ldr	r0, [pc, #44]	; (8001624 <HAL_InitTick+0xd0>)
 80015f8:	f006 ffd0 	bl	800859c <HAL_TIM_Base_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d104      	bne.n	800160c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001602:	4808      	ldr	r0, [pc, #32]	; (8001624 <HAL_InitTick+0xd0>)
 8001604:	f007 f82c 	bl	8008660 <HAL_TIM_Base_Start_IT>
 8001608:	4603      	mov	r3, r0
 800160a:	e000      	b.n	800160e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	3740      	adds	r7, #64	; 0x40
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	24000008 	.word	0x24000008
 800161c:	58024400 	.word	0x58024400
 8001620:	431bde83 	.word	0x431bde83
 8001624:	2400906c 	.word	0x2400906c
 8001628:	40001000 	.word	0x40001000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>
	...

08001634 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
	{
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163e:	4802      	ldr	r0, [pc, #8]	; (8001648 <HardFault_Handler+0x14>)
 8001640:	f004 fbe2 	bl	8005e08 <HAL_GPIO_WritePin>
 8001644:	e7f8      	b.n	8001638 <HardFault_Handler+0x4>
 8001646:	bf00      	nop
 8001648:	58020800 	.word	0x58020800

0800164c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA1_Stream0_IRQHandler+0x10>)
 8001672:	f002 fee3 	bl	800443c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	240093b8 	.word	0x240093b8

08001680 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <DMA1_Stream1_IRQHandler+0x10>)
 8001686:	f002 fed9 	bl	800443c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	240092b0 	.word	0x240092b0

08001694 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <DMA1_Stream2_IRQHandler+0x10>)
 800169a:	f002 fecf 	bl	800443c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	24009130 	.word	0x24009130

080016a8 <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <DMA1_Stream3_IRQHandler+0x10>)
 80016ae:	f002 fec5 	bl	800443c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	240091a8 	.word	0x240091a8

080016bc <DMA1_Stream4_IRQHandler>:

/**
 * @brief This function handles DMA1 stream4 global interrupt.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

	/* USER CODE END DMA1_Stream4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <DMA1_Stream4_IRQHandler+0x10>)
 80016c2:	f002 febb 	bl	800443c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

	/* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	240097d8 	.word	0x240097d8

080016d0 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DMA1_Stream5_IRQHandler+0x10>)
 80016d6:	f002 feb1 	bl	800443c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	240090b8 	.word	0x240090b8

080016e4 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&Master_UART, UART_FLAG_IDLE);
 80016ee:	4b40      	ldr	r3, [pc, #256]	; (80017f0 <USART1_IRQHandler+0x10c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d06b      	beq.n	80017e2 <USART1_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&Master_UART);
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <USART1_IRQHandler+0x10c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2210      	movs	r2, #16
 8001710:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001712:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <USART1_IRQHandler+0x110>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a38      	ldr	r2, [pc, #224]	; (80017f8 <USART1_IRQHandler+0x114>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d04a      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 800171c:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <USART1_IRQHandler+0x110>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a36      	ldr	r2, [pc, #216]	; (80017fc <USART1_IRQHandler+0x118>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d045      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <USART1_IRQHandler+0x110>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a35      	ldr	r2, [pc, #212]	; (8001800 <USART1_IRQHandler+0x11c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d040      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 8001730:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <USART1_IRQHandler+0x110>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a33      	ldr	r2, [pc, #204]	; (8001804 <USART1_IRQHandler+0x120>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d03b      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <USART1_IRQHandler+0x110>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a32      	ldr	r2, [pc, #200]	; (8001808 <USART1_IRQHandler+0x124>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d036      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 8001744:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <USART1_IRQHandler+0x110>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a30      	ldr	r2, [pc, #192]	; (800180c <USART1_IRQHandler+0x128>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d031      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <USART1_IRQHandler+0x110>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a2f      	ldr	r2, [pc, #188]	; (8001810 <USART1_IRQHandler+0x12c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d02c      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <USART1_IRQHandler+0x110>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2d      	ldr	r2, [pc, #180]	; (8001814 <USART1_IRQHandler+0x130>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d027      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <USART1_IRQHandler+0x110>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a2c      	ldr	r2, [pc, #176]	; (8001818 <USART1_IRQHandler+0x134>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d022      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <USART1_IRQHandler+0x110>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2a      	ldr	r2, [pc, #168]	; (800181c <USART1_IRQHandler+0x138>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01d      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <USART1_IRQHandler+0x110>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a29      	ldr	r2, [pc, #164]	; (8001820 <USART1_IRQHandler+0x13c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d018      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <USART1_IRQHandler+0x110>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a27      	ldr	r2, [pc, #156]	; (8001824 <USART1_IRQHandler+0x140>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <USART1_IRQHandler+0x110>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a26      	ldr	r2, [pc, #152]	; (8001828 <USART1_IRQHandler+0x144>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00e      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <USART1_IRQHandler+0x110>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a24      	ldr	r2, [pc, #144]	; (800182c <USART1_IRQHandler+0x148>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d009      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <USART1_IRQHandler+0x110>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a23      	ldr	r2, [pc, #140]	; (8001830 <USART1_IRQHandler+0x14c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d004      	beq.n	80017b2 <USART1_IRQHandler+0xce>
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <USART1_IRQHandler+0x110>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <USART1_IRQHandler+0x150>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d103      	bne.n	80017ba <USART1_IRQHandler+0xd6>
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <USART1_IRQHandler+0x110>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	e002      	b.n	80017c0 <USART1_IRQHandler+0xdc>
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <USART1_IRQHandler+0x110>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&Master_UART);
 80017c0:	480b      	ldr	r0, [pc, #44]	; (80017f0 <USART1_IRQHandler+0x10c>)
 80017c2:	f007 fafd 	bl	8008dc0 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&Master_UART, UART_IT_IDLE);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <USART1_IRQHandler+0x10c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <USART1_IRQHandler+0x10c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0210 	bic.w	r2, r2, #16
 80017d4:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(CMD_DONE_semHandle, pdFALSE);
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <USART1_IRQHandler+0x154>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f00a ff11 	bl	800c604 <xQueueGiveFromISR>
	}

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80017e2:	4803      	ldr	r0, [pc, #12]	; (80017f0 <USART1_IRQHandler+0x10c>)
 80017e4:	f007 fb80 	bl	8008ee8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	24009520 	.word	0x24009520
 80017f4:	240093b8 	.word	0x240093b8
 80017f8:	40020010 	.word	0x40020010
 80017fc:	40020028 	.word	0x40020028
 8001800:	40020040 	.word	0x40020040
 8001804:	40020058 	.word	0x40020058
 8001808:	40020070 	.word	0x40020070
 800180c:	40020088 	.word	0x40020088
 8001810:	400200a0 	.word	0x400200a0
 8001814:	400200b8 	.word	0x400200b8
 8001818:	40020410 	.word	0x40020410
 800181c:	40020428 	.word	0x40020428
 8001820:	40020440 	.word	0x40020440
 8001824:	40020458 	.word	0x40020458
 8001828:	40020470 	.word	0x40020470
 800182c:	40020488 	.word	0x40020488
 8001830:	400204a0 	.word	0x400204a0
 8001834:	400204b8 	.word	0x400204b8
 8001838:	24006474 	.word	0x24006474

0800183c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&TEMPER_UART, UART_FLAG_IDLE);
 8001846:	4b40      	ldr	r3, [pc, #256]	; (8001948 <USART2_IRQHandler+0x10c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b10      	cmp	r3, #16
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d06b      	beq.n	800193a <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&TEMPER_UART);
 8001862:	4b39      	ldr	r3, [pc, #228]	; (8001948 <USART2_IRQHandler+0x10c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2210      	movs	r2, #16
 8001868:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <USART2_IRQHandler+0x110>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a38      	ldr	r2, [pc, #224]	; (8001950 <USART2_IRQHandler+0x114>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d04a      	beq.n	800190a <USART2_IRQHandler+0xce>
 8001874:	4b35      	ldr	r3, [pc, #212]	; (800194c <USART2_IRQHandler+0x110>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a36      	ldr	r2, [pc, #216]	; (8001954 <USART2_IRQHandler+0x118>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d045      	beq.n	800190a <USART2_IRQHandler+0xce>
 800187e:	4b33      	ldr	r3, [pc, #204]	; (800194c <USART2_IRQHandler+0x110>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a35      	ldr	r2, [pc, #212]	; (8001958 <USART2_IRQHandler+0x11c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d040      	beq.n	800190a <USART2_IRQHandler+0xce>
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <USART2_IRQHandler+0x110>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a33      	ldr	r2, [pc, #204]	; (800195c <USART2_IRQHandler+0x120>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d03b      	beq.n	800190a <USART2_IRQHandler+0xce>
 8001892:	4b2e      	ldr	r3, [pc, #184]	; (800194c <USART2_IRQHandler+0x110>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a32      	ldr	r2, [pc, #200]	; (8001960 <USART2_IRQHandler+0x124>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d036      	beq.n	800190a <USART2_IRQHandler+0xce>
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <USART2_IRQHandler+0x110>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <USART2_IRQHandler+0x128>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d031      	beq.n	800190a <USART2_IRQHandler+0xce>
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <USART2_IRQHandler+0x110>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2f      	ldr	r2, [pc, #188]	; (8001968 <USART2_IRQHandler+0x12c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d02c      	beq.n	800190a <USART2_IRQHandler+0xce>
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <USART2_IRQHandler+0x110>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2d      	ldr	r2, [pc, #180]	; (800196c <USART2_IRQHandler+0x130>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d027      	beq.n	800190a <USART2_IRQHandler+0xce>
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <USART2_IRQHandler+0x110>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2c      	ldr	r2, [pc, #176]	; (8001970 <USART2_IRQHandler+0x134>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d022      	beq.n	800190a <USART2_IRQHandler+0xce>
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <USART2_IRQHandler+0x110>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <USART2_IRQHandler+0x138>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d01d      	beq.n	800190a <USART2_IRQHandler+0xce>
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <USART2_IRQHandler+0x110>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a29      	ldr	r2, [pc, #164]	; (8001978 <USART2_IRQHandler+0x13c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d018      	beq.n	800190a <USART2_IRQHandler+0xce>
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <USART2_IRQHandler+0x110>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a27      	ldr	r2, [pc, #156]	; (800197c <USART2_IRQHandler+0x140>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <USART2_IRQHandler+0xce>
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <USART2_IRQHandler+0x110>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a26      	ldr	r2, [pc, #152]	; (8001980 <USART2_IRQHandler+0x144>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00e      	beq.n	800190a <USART2_IRQHandler+0xce>
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <USART2_IRQHandler+0x110>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <USART2_IRQHandler+0x148>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d009      	beq.n	800190a <USART2_IRQHandler+0xce>
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <USART2_IRQHandler+0x110>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a23      	ldr	r2, [pc, #140]	; (8001988 <USART2_IRQHandler+0x14c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d004      	beq.n	800190a <USART2_IRQHandler+0xce>
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <USART2_IRQHandler+0x110>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a21      	ldr	r2, [pc, #132]	; (800198c <USART2_IRQHandler+0x150>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d103      	bne.n	8001912 <USART2_IRQHandler+0xd6>
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <USART2_IRQHandler+0x110>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	e002      	b.n	8001918 <USART2_IRQHandler+0xdc>
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <USART2_IRQHandler+0x110>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&TEMPER_UART);
 8001918:	480b      	ldr	r0, [pc, #44]	; (8001948 <USART2_IRQHandler+0x10c>)
 800191a:	f007 fa51 	bl	8008dc0 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <USART2_IRQHandler+0x10c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <USART2_IRQHandler+0x10c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0210 	bic.w	r2, r2, #16
 800192c:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39_DONE_semHandle, pdFALSE);
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <USART2_IRQHandler+0x154>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f00a fe65 	bl	800c604 <xQueueGiveFromISR>
	}

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <USART2_IRQHandler+0x10c>)
 800193c:	f007 fad4 	bl	8008ee8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	24009748 	.word	0x24009748
 800194c:	24009130 	.word	0x24009130
 8001950:	40020010 	.word	0x40020010
 8001954:	40020028 	.word	0x40020028
 8001958:	40020040 	.word	0x40020040
 800195c:	40020058 	.word	0x40020058
 8001960:	40020070 	.word	0x40020070
 8001964:	40020088 	.word	0x40020088
 8001968:	400200a0 	.word	0x400200a0
 800196c:	400200b8 	.word	0x400200b8
 8001970:	40020410 	.word	0x40020410
 8001974:	40020428 	.word	0x40020428
 8001978:	40020440 	.word	0x40020440
 800197c:	40020458 	.word	0x40020458
 8001980:	40020470 	.word	0x40020470
 8001984:	40020488 	.word	0x40020488
 8001988:	400204a0 	.word	0x400204a0
 800198c:	400204b8 	.word	0x400204b8
 8001990:	24005a88 	.word	0x24005a88

08001994 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&AXIS_UART, UART_FLAG_IDLE);
 800199e:	4b40      	ldr	r3, [pc, #256]	; (8001aa0 <USART3_IRQHandler+0x10c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d06b      	beq.n	8001a92 <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&AXIS_UART);
 80019ba:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <USART3_IRQHandler+0x10c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2210      	movs	r2, #16
 80019c0:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <USART3_IRQHandler+0x110>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a38      	ldr	r2, [pc, #224]	; (8001aa8 <USART3_IRQHandler+0x114>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d04a      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <USART3_IRQHandler+0x110>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a36      	ldr	r2, [pc, #216]	; (8001aac <USART3_IRQHandler+0x118>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d045      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 80019d6:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <USART3_IRQHandler+0x110>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <USART3_IRQHandler+0x11c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d040      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 80019e0:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <USART3_IRQHandler+0x110>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <USART3_IRQHandler+0x120>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d03b      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <USART3_IRQHandler+0x110>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a32      	ldr	r2, [pc, #200]	; (8001ab8 <USART3_IRQHandler+0x124>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d036      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 80019f4:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <USART3_IRQHandler+0x110>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a30      	ldr	r2, [pc, #192]	; (8001abc <USART3_IRQHandler+0x128>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d031      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a2f      	ldr	r2, [pc, #188]	; (8001ac0 <USART3_IRQHandler+0x12c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d02c      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2d      	ldr	r2, [pc, #180]	; (8001ac4 <USART3_IRQHandler+0x130>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d027      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a2c      	ldr	r2, [pc, #176]	; (8001ac8 <USART3_IRQHandler+0x134>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d022      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a2a      	ldr	r2, [pc, #168]	; (8001acc <USART3_IRQHandler+0x138>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01d      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <USART3_IRQHandler+0x13c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d018      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <USART3_IRQHandler+0x140>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <USART3_IRQHandler+0x144>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00e      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a24      	ldr	r2, [pc, #144]	; (8001adc <USART3_IRQHandler+0x148>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d009      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <USART3_IRQHandler+0x14c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d004      	beq.n	8001a62 <USART3_IRQHandler+0xce>
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <USART3_IRQHandler+0x150>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d103      	bne.n	8001a6a <USART3_IRQHandler+0xd6>
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	e002      	b.n	8001a70 <USART3_IRQHandler+0xdc>
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <USART3_IRQHandler+0x110>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&AXIS_UART);
 8001a70:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <USART3_IRQHandler+0x10c>)
 8001a72:	f007 f9a5 	bl	8008dc0 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&AXIS_UART, UART_IT_IDLE);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <USART3_IRQHandler+0x10c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <USART3_IRQHandler+0x10c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0210 	bic.w	r2, r2, #16
 8001a84:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931_DONE_semHandle, pdFALSE);
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <USART3_IRQHandler+0x154>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00a fdb9 	bl	800c604 <xQueueGiveFromISR>
	}

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8001a92:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <USART3_IRQHandler+0x10c>)
 8001a94:	f007 fa28 	bl	8008ee8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	24009220 	.word	0x24009220
 8001aa4:	240091a8 	.word	0x240091a8
 8001aa8:	40020010 	.word	0x40020010
 8001aac:	40020028 	.word	0x40020028
 8001ab0:	40020040 	.word	0x40020040
 8001ab4:	40020058 	.word	0x40020058
 8001ab8:	40020070 	.word	0x40020070
 8001abc:	40020088 	.word	0x40020088
 8001ac0:	400200a0 	.word	0x400200a0
 8001ac4:	400200b8 	.word	0x400200b8
 8001ac8:	40020410 	.word	0x40020410
 8001acc:	40020428 	.word	0x40020428
 8001ad0:	40020440 	.word	0x40020440
 8001ad4:	40020458 	.word	0x40020458
 8001ad8:	40020470 	.word	0x40020470
 8001adc:	40020488 	.word	0x40020488
 8001ae0:	400204a0 	.word	0x400204a0
 8001ae4:	400204b8 	.word	0x400204b8
 8001ae8:	240041a4 	.word	0x240041a4

08001aec <DMA1_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA1 stream7 global interrupt.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <DMA1_Stream7_IRQHandler+0x10>)
 8001af2:	f002 fca3 	bl	800443c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

	/* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	240094a8 	.word	0x240094a8

08001b00 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&Deep_UART, UART_FLAG_IDLE);
 8001b0a:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <UART4_IRQHandler+0x10c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d06b      	beq.n	8001bfe <UART4_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&Deep_UART);
 8001b26:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <UART4_IRQHandler+0x10c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8001b2e:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <UART4_IRQHandler+0x114>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d04a      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a36      	ldr	r2, [pc, #216]	; (8001c18 <UART4_IRQHandler+0x118>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d045      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b42:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a35      	ldr	r2, [pc, #212]	; (8001c1c <UART4_IRQHandler+0x11c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d040      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a33      	ldr	r2, [pc, #204]	; (8001c20 <UART4_IRQHandler+0x120>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d03b      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a32      	ldr	r2, [pc, #200]	; (8001c24 <UART4_IRQHandler+0x124>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d036      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a30      	ldr	r2, [pc, #192]	; (8001c28 <UART4_IRQHandler+0x128>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d031      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2f      	ldr	r2, [pc, #188]	; (8001c2c <UART4_IRQHandler+0x12c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d02c      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b74:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2d      	ldr	r2, [pc, #180]	; (8001c30 <UART4_IRQHandler+0x130>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d027      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2c      	ldr	r2, [pc, #176]	; (8001c34 <UART4_IRQHandler+0x134>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d022      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2a      	ldr	r2, [pc, #168]	; (8001c38 <UART4_IRQHandler+0x138>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01d      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b92:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <UART4_IRQHandler+0x13c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d018      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <UART4_IRQHandler+0x140>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a26      	ldr	r2, [pc, #152]	; (8001c44 <UART4_IRQHandler+0x144>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00e      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a24      	ldr	r2, [pc, #144]	; (8001c48 <UART4_IRQHandler+0x148>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d009      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <UART4_IRQHandler+0x14c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d004      	beq.n	8001bce <UART4_IRQHandler+0xce>
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <UART4_IRQHandler+0x150>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d103      	bne.n	8001bd6 <UART4_IRQHandler+0xd6>
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	e002      	b.n	8001bdc <UART4_IRQHandler+0xdc>
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <UART4_IRQHandler+0x110>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&Deep_UART);
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <UART4_IRQHandler+0x10c>)
 8001bde:	f007 f8ef 	bl	8008dc0 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&Deep_UART, UART_IT_IDLE);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <UART4_IRQHandler+0x10c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <UART4_IRQHandler+0x10c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0210 	bic.w	r2, r2, #16
 8001bf0:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WD_DONE_semHandle, pdFALSE);
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <UART4_IRQHandler+0x154>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00a fd03 	bl	800c604 <xQueueGiveFromISR>
	}

	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8001bfe:	4803      	ldr	r0, [pc, #12]	; (8001c0c <UART4_IRQHandler+0x10c>)
 8001c00:	f007 f972 	bl	8008ee8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	240096b8 	.word	0x240096b8
 8001c10:	240090b8 	.word	0x240090b8
 8001c14:	40020010 	.word	0x40020010
 8001c18:	40020028 	.word	0x40020028
 8001c1c:	40020040 	.word	0x40020040
 8001c20:	40020058 	.word	0x40020058
 8001c24:	40020070 	.word	0x40020070
 8001c28:	40020088 	.word	0x40020088
 8001c2c:	400200a0 	.word	0x400200a0
 8001c30:	400200b8 	.word	0x400200b8
 8001c34:	40020410 	.word	0x40020410
 8001c38:	40020428 	.word	0x40020428
 8001c3c:	40020440 	.word	0x40020440
 8001c40:	40020458 	.word	0x40020458
 8001c44:	40020470 	.word	0x40020470
 8001c48:	40020488 	.word	0x40020488
 8001c4c:	400204a0 	.word	0x400204a0
 8001c50:	400204b8 	.word	0x400204b8
 8001c54:	24006da8 	.word	0x24006da8

08001c58 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&SONAR_HEIGHT_UART, UART_FLAG_IDLE);
 8001c62:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <UART5_IRQHandler+0x10c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b10      	cmp	r3, #16
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d06b      	beq.n	8001d56 <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&SONAR_HEIGHT_UART);
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <UART5_IRQHandler+0x10c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2210      	movs	r2, #16
 8001c84:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 8001c86:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a38      	ldr	r2, [pc, #224]	; (8001d6c <UART5_IRQHandler+0x114>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d04a      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a36      	ldr	r2, [pc, #216]	; (8001d70 <UART5_IRQHandler+0x118>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d045      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001c9a:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a35      	ldr	r2, [pc, #212]	; (8001d74 <UART5_IRQHandler+0x11c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d040      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001ca4:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a33      	ldr	r2, [pc, #204]	; (8001d78 <UART5_IRQHandler+0x120>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d03b      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001cae:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a32      	ldr	r2, [pc, #200]	; (8001d7c <UART5_IRQHandler+0x124>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d036      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a30      	ldr	r2, [pc, #192]	; (8001d80 <UART5_IRQHandler+0x128>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d031      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <UART5_IRQHandler+0x12c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d02c      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2d      	ldr	r2, [pc, #180]	; (8001d88 <UART5_IRQHandler+0x130>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d027      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a2c      	ldr	r2, [pc, #176]	; (8001d8c <UART5_IRQHandler+0x134>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d022      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2a      	ldr	r2, [pc, #168]	; (8001d90 <UART5_IRQHandler+0x138>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01d      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001cea:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <UART5_IRQHandler+0x13c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d018      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <UART5_IRQHandler+0x140>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <UART5_IRQHandler+0x144>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00e      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <UART5_IRQHandler+0x148>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d009      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <UART5_IRQHandler+0x14c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d004      	beq.n	8001d26 <UART5_IRQHandler+0xce>
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <UART5_IRQHandler+0x150>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d103      	bne.n	8001d2e <UART5_IRQHandler+0xd6>
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	e002      	b.n	8001d34 <UART5_IRQHandler+0xdc>
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <UART5_IRQHandler+0x110>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&SONAR_HEIGHT_UART);
 8001d34:	480b      	ldr	r0, [pc, #44]	; (8001d64 <UART5_IRQHandler+0x10c>)
 8001d36:	f007 f843 	bl	8008dc0 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&SONAR_HEIGHT_UART, UART_IT_IDLE);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <UART5_IRQHandler+0x10c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <UART5_IRQHandler+0x10c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0210 	bic.w	r2, r2, #16
 8001d48:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(P30_DONE_semHandle, pdFALSE);
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <UART5_IRQHandler+0x154>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00a fc57 	bl	800c604 <xQueueGiveFromISR>
	}

	/* USER CODE END UART5_IRQn 0 */
	HAL_UART_IRQHandler(&huart5);
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <UART5_IRQHandler+0x10c>)
 8001d58:	f007 f8c6 	bl	8008ee8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART5_IRQn 1 */

	/* USER CODE END UART5_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	24009328 	.word	0x24009328
 8001d68:	240097d8 	.word	0x240097d8
 8001d6c:	40020010 	.word	0x40020010
 8001d70:	40020028 	.word	0x40020028
 8001d74:	40020040 	.word	0x40020040
 8001d78:	40020058 	.word	0x40020058
 8001d7c:	40020070 	.word	0x40020070
 8001d80:	40020088 	.word	0x40020088
 8001d84:	400200a0 	.word	0x400200a0
 8001d88:	400200b8 	.word	0x400200b8
 8001d8c:	40020410 	.word	0x40020410
 8001d90:	40020428 	.word	0x40020428
 8001d94:	40020440 	.word	0x40020440
 8001d98:	40020458 	.word	0x40020458
 8001d9c:	40020470 	.word	0x40020470
 8001da0:	40020488 	.word	0x40020488
 8001da4:	400204a0 	.word	0x400204a0
 8001da8:	400204b8 	.word	0x400204b8
 8001dac:	24009064 	.word	0x24009064

08001db0 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <TIM6_DAC_IRQHandler+0x10>)
 8001db6:	f006 fccb 	bl	8008750 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2400906c 	.word	0x2400906c

08001dc4 <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <DMA2_Stream0_IRQHandler+0x10>)
 8001dca:	f002 fb37 	bl	800443c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	240095b0 	.word	0x240095b0

08001dd8 <DMA2_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA2 stream1 global interrupt.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	/* USER CODE END DMA2_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <DMA2_Stream1_IRQHandler+0x10>)
 8001dde:	f002 fb2d 	bl	800443c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

	/* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	24009430 	.word	0x24009430

08001dec <DMA2_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA2 stream2 global interrupt.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

	/* USER CODE END DMA2_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <DMA2_Stream2_IRQHandler+0x10>)
 8001df2:	f002 fb23 	bl	800443c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

	/* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	24009850 	.word	0x24009850

08001e00 <UART8_IRQHandler>:

/**
 * @brief This function handles UART8 global interrupt.
 */
void UART8_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&Slave_UART, UART_FLAG_IDLE);
 8001e0a:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <UART8_IRQHandler+0x10c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	bf0c      	ite	eq
 8001e18:	2301      	moveq	r3, #1
 8001e1a:	2300      	movne	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d06b      	beq.n	8001efe <UART8_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&Slave_UART);
 8001e26:	4b39      	ldr	r3, [pc, #228]	; (8001f0c <UART8_IRQHandler+0x10c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a38      	ldr	r2, [pc, #224]	; (8001f14 <UART8_IRQHandler+0x114>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d04a      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e38:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a36      	ldr	r2, [pc, #216]	; (8001f18 <UART8_IRQHandler+0x118>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d045      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e42:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a35      	ldr	r2, [pc, #212]	; (8001f1c <UART8_IRQHandler+0x11c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d040      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a33      	ldr	r2, [pc, #204]	; (8001f20 <UART8_IRQHandler+0x120>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d03b      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e56:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a32      	ldr	r2, [pc, #200]	; (8001f24 <UART8_IRQHandler+0x124>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d036      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <UART8_IRQHandler+0x128>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d031      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2f      	ldr	r2, [pc, #188]	; (8001f2c <UART8_IRQHandler+0x12c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d02c      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2d      	ldr	r2, [pc, #180]	; (8001f30 <UART8_IRQHandler+0x130>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d027      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a2c      	ldr	r2, [pc, #176]	; (8001f34 <UART8_IRQHandler+0x134>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d022      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <UART8_IRQHandler+0x138>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01d      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e92:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <UART8_IRQHandler+0x13c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d018      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <UART8_IRQHandler+0x140>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <UART8_IRQHandler+0x144>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00e      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <UART8_IRQHandler+0x148>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d009      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a23      	ldr	r2, [pc, #140]	; (8001f4c <UART8_IRQHandler+0x14c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d004      	beq.n	8001ece <UART8_IRQHandler+0xce>
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <UART8_IRQHandler+0x150>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d103      	bne.n	8001ed6 <UART8_IRQHandler+0xd6>
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	e002      	b.n	8001edc <UART8_IRQHandler+0xdc>
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <UART8_IRQHandler+0x110>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&Slave_UART);
 8001edc:	480b      	ldr	r0, [pc, #44]	; (8001f0c <UART8_IRQHandler+0x10c>)
 8001ede:	f006 ff6f 	bl	8008dc0 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&Slave_UART, UART_IT_IDLE);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <UART8_IRQHandler+0x10c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <UART8_IRQHandler+0x10c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0210 	bic.w	r2, r2, #16
 8001ef0:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(RPT_DONE_semHandle, pdFALSE);
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <UART8_IRQHandler+0x154>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f00a fb83 	bl	800c604 <xQueueGiveFromISR>
	}

	/* USER CODE END UART8_IRQn 0 */
	HAL_UART_IRQHandler(&huart8);
 8001efe:	4803      	ldr	r0, [pc, #12]	; (8001f0c <UART8_IRQHandler+0x10c>)
 8001f00:	f006 fff2 	bl	8008ee8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART8_IRQn 1 */

	/* USER CODE END UART8_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	24009628 	.word	0x24009628
 8001f10:	240094a8 	.word	0x240094a8
 8001f14:	40020010 	.word	0x40020010
 8001f18:	40020028 	.word	0x40020028
 8001f1c:	40020040 	.word	0x40020040
 8001f20:	40020058 	.word	0x40020058
 8001f24:	40020070 	.word	0x40020070
 8001f28:	40020088 	.word	0x40020088
 8001f2c:	400200a0 	.word	0x400200a0
 8001f30:	400200b8 	.word	0x400200b8
 8001f34:	40020410 	.word	0x40020410
 8001f38:	40020428 	.word	0x40020428
 8001f3c:	40020440 	.word	0x40020440
 8001f40:	40020458 	.word	0x40020458
 8001f44:	40020470 	.word	0x40020470
 8001f48:	40020488 	.word	0x40020488
 8001f4c:	400204a0 	.word	0x400204a0
 8001f50:	400204b8 	.word	0x400204b8
 8001f54:	24005b8c 	.word	0x24005b8c

08001f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f5c:	4b37      	ldr	r3, [pc, #220]	; (800203c <SystemInit+0xe4>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f62:	4a36      	ldr	r2, [pc, #216]	; (800203c <SystemInit+0xe4>)
 8001f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f6c:	4b34      	ldr	r3, [pc, #208]	; (8002040 <SystemInit+0xe8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d807      	bhi.n	8001f88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f78:	4b31      	ldr	r3, [pc, #196]	; (8002040 <SystemInit+0xe8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 030f 	bic.w	r3, r3, #15
 8001f80:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <SystemInit+0xe8>)
 8001f82:	f043 0307 	orr.w	r3, r3, #7
 8001f86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f88:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <SystemInit+0xec>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <SystemInit+0xec>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <SystemInit+0xec>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <SystemInit+0xec>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4929      	ldr	r1, [pc, #164]	; (8002044 <SystemInit+0xec>)
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <SystemInit+0xf0>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <SystemInit+0xe8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fb2:	4b23      	ldr	r3, [pc, #140]	; (8002040 <SystemInit+0xe8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 030f 	bic.w	r3, r3, #15
 8001fba:	4a21      	ldr	r2, [pc, #132]	; (8002040 <SystemInit+0xe8>)
 8001fbc:	f043 0307 	orr.w	r3, r3, #7
 8001fc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <SystemInit+0xec>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <SystemInit+0xec>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <SystemInit+0xec>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <SystemInit+0xec>)
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <SystemInit+0xf4>)
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <SystemInit+0xec>)
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <SystemInit+0xf8>)
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <SystemInit+0xec>)
 8001fe2:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <SystemInit+0xfc>)
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <SystemInit+0xec>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <SystemInit+0xec>)
 8001fee:	4a19      	ldr	r2, [pc, #100]	; (8002054 <SystemInit+0xfc>)
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <SystemInit+0xec>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <SystemInit+0xec>)
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <SystemInit+0xfc>)
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <SystemInit+0xec>)
 8002000:	2200      	movs	r2, #0
 8002002:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <SystemInit+0xec>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <SystemInit+0xec>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <SystemInit+0xec>)
 8002012:	2200      	movs	r2, #0
 8002014:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <SystemInit+0x100>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <SystemInit+0x104>)
 800201c:	4013      	ands	r3, r2
 800201e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002022:	d202      	bcs.n	800202a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <SystemInit+0x108>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <SystemInit+0x10c>)
 800202c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002030:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00
 8002040:	52002000 	.word	0x52002000
 8002044:	58024400 	.word	0x58024400
 8002048:	eaf6ed7f 	.word	0xeaf6ed7f
 800204c:	02020200 	.word	0x02020200
 8002050:	01ff0000 	.word	0x01ff0000
 8002054:	01010280 	.word	0x01010280
 8002058:	5c001000 	.word	0x5c001000
 800205c:	ffff0000 	.word	0xffff0000
 8002060:	51008108 	.word	0x51008108
 8002064:	52004000 	.word	0x52004000

08002068 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_tx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <MX_UART4_Init+0x90>)
 800206e:	4a23      	ldr	r2, [pc, #140]	; (80020fc <MX_UART4_Init+0x94>)
 8002070:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <MX_UART4_Init+0x90>)
 8002074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002078:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <MX_UART4_Init+0x90>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <MX_UART4_Init+0x90>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <MX_UART4_Init+0x90>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_UART4_Init+0x90>)
 800208e:	220c      	movs	r2, #12
 8002090:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <MX_UART4_Init+0x90>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002098:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <MX_UART4_Init+0x90>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <MX_UART4_Init+0x90>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <MX_UART4_Init+0x90>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <MX_UART4_Init+0x90>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020b0:	4811      	ldr	r0, [pc, #68]	; (80020f8 <MX_UART4_Init+0x90>)
 80020b2:	f006 fd4d 	bl	8008b50 <HAL_UART_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80020bc:	f7ff fa26 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c0:	2100      	movs	r1, #0
 80020c2:	480d      	ldr	r0, [pc, #52]	; (80020f8 <MX_UART4_Init+0x90>)
 80020c4:	f008 fd30 	bl	800ab28 <HAL_UARTEx_SetTxFifoThreshold>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80020ce:	f7ff fa1d 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d2:	2100      	movs	r1, #0
 80020d4:	4808      	ldr	r0, [pc, #32]	; (80020f8 <MX_UART4_Init+0x90>)
 80020d6:	f008 fd65 	bl	800aba4 <HAL_UARTEx_SetRxFifoThreshold>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80020e0:	f7ff fa14 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <MX_UART4_Init+0x90>)
 80020e6:	f008 fce6 	bl	800aab6 <HAL_UARTEx_DisableFifoMode>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80020f0:	f7ff fa0c 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	240096b8 	.word	0x240096b8
 80020fc:	40004c00 	.word	0x40004c00

08002100 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <MX_UART5_Init+0x90>)
 8002106:	4a23      	ldr	r2, [pc, #140]	; (8002194 <MX_UART5_Init+0x94>)
 8002108:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <MX_UART5_Init+0x90>)
 800210c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002110:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002112:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <MX_UART5_Init+0x90>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <MX_UART5_Init+0x90>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <MX_UART5_Init+0x90>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <MX_UART5_Init+0x90>)
 8002126:	220c      	movs	r2, #12
 8002128:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <MX_UART5_Init+0x90>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <MX_UART5_Init+0x90>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <MX_UART5_Init+0x90>)
 8002138:	2200      	movs	r2, #0
 800213a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <MX_UART5_Init+0x90>)
 800213e:	2200      	movs	r2, #0
 8002140:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <MX_UART5_Init+0x90>)
 8002144:	2200      	movs	r2, #0
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002148:	4811      	ldr	r0, [pc, #68]	; (8002190 <MX_UART5_Init+0x90>)
 800214a:	f006 fd01 	bl	8008b50 <HAL_UART_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002154:	f7ff f9da 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002158:	2100      	movs	r1, #0
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <MX_UART5_Init+0x90>)
 800215c:	f008 fce4 	bl	800ab28 <HAL_UARTEx_SetTxFifoThreshold>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002166:	f7ff f9d1 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800216a:	2100      	movs	r1, #0
 800216c:	4808      	ldr	r0, [pc, #32]	; (8002190 <MX_UART5_Init+0x90>)
 800216e:	f008 fd19 	bl	800aba4 <HAL_UARTEx_SetRxFifoThreshold>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002178:	f7ff f9c8 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800217c:	4804      	ldr	r0, [pc, #16]	; (8002190 <MX_UART5_Init+0x90>)
 800217e:	f008 fc9a 	bl	800aab6 <HAL_UARTEx_DisableFifoMode>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002188:	f7ff f9c0 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	24009328 	.word	0x24009328
 8002194:	40005000 	.word	0x40005000

08002198 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800219c:	4b22      	ldr	r3, [pc, #136]	; (8002228 <MX_UART8_Init+0x90>)
 800219e:	4a23      	ldr	r2, [pc, #140]	; (800222c <MX_UART8_Init+0x94>)
 80021a0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80021a2:	4b21      	ldr	r3, [pc, #132]	; (8002228 <MX_UART8_Init+0x90>)
 80021a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021a8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <MX_UART8_Init+0x90>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <MX_UART8_Init+0x90>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <MX_UART8_Init+0x90>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80021bc:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MX_UART8_Init+0x90>)
 80021be:	220c      	movs	r2, #12
 80021c0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <MX_UART8_Init+0x90>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_UART8_Init+0x90>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MX_UART8_Init+0x90>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <MX_UART8_Init+0x90>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <MX_UART8_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80021e0:	4811      	ldr	r0, [pc, #68]	; (8002228 <MX_UART8_Init+0x90>)
 80021e2:	f006 fcb5 	bl	8008b50 <HAL_UART_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80021ec:	f7ff f98e 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f0:	2100      	movs	r1, #0
 80021f2:	480d      	ldr	r0, [pc, #52]	; (8002228 <MX_UART8_Init+0x90>)
 80021f4:	f008 fc98 	bl	800ab28 <HAL_UARTEx_SetTxFifoThreshold>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80021fe:	f7ff f985 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002202:	2100      	movs	r1, #0
 8002204:	4808      	ldr	r0, [pc, #32]	; (8002228 <MX_UART8_Init+0x90>)
 8002206:	f008 fccd 	bl	800aba4 <HAL_UARTEx_SetRxFifoThreshold>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002210:	f7ff f97c 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <MX_UART8_Init+0x90>)
 8002216:	f008 fc4e 	bl	800aab6 <HAL_UARTEx_DisableFifoMode>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002220:	f7ff f974 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	24009628 	.word	0x24009628
 800222c:	40007c00 	.word	0x40007c00

08002230 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 8002236:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <MX_USART1_UART_Init+0x94>)
 8002238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 800223c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 8002256:	220c      	movs	r2, #12
 8002258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 800226e:	2200      	movs	r2, #0
 8002270:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 8002274:	2200      	movs	r2, #0
 8002276:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002278:	4811      	ldr	r0, [pc, #68]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 800227a:	f006 fc69 	bl	8008b50 <HAL_UART_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002284:	f7ff f942 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002288:	2100      	movs	r1, #0
 800228a:	480d      	ldr	r0, [pc, #52]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 800228c:	f008 fc4c 	bl	800ab28 <HAL_UARTEx_SetTxFifoThreshold>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002296:	f7ff f939 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800229a:	2100      	movs	r1, #0
 800229c:	4808      	ldr	r0, [pc, #32]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 800229e:	f008 fc81 	bl	800aba4 <HAL_UARTEx_SetRxFifoThreshold>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022a8:	f7ff f930 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022ac:	4804      	ldr	r0, [pc, #16]	; (80022c0 <MX_USART1_UART_Init+0x90>)
 80022ae:	f008 fc02 	bl	800aab6 <HAL_UARTEx_DisableFifoMode>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022b8:	f7ff f928 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	24009520 	.word	0x24009520
 80022c4:	40011000 	.word	0x40011000

080022c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <MX_USART2_UART_Init+0x90>)
 80022ce:	4a23      	ldr	r2, [pc, #140]	; (800235c <MX_USART2_UART_Init+0x94>)
 80022d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <MX_USART2_UART_Init+0x90>)
 80022d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <MX_USART2_UART_Init+0x90>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <MX_USART2_UART_Init+0x90>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <MX_USART2_UART_Init+0x90>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <MX_USART2_UART_Init+0x90>)
 80022ee:	220c      	movs	r2, #12
 80022f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <MX_USART2_UART_Init+0x90>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_USART2_UART_Init+0x90>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <MX_USART2_UART_Init+0x90>)
 8002300:	2200      	movs	r2, #0
 8002302:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <MX_USART2_UART_Init+0x90>)
 8002306:	2200      	movs	r2, #0
 8002308:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <MX_USART2_UART_Init+0x90>)
 800230c:	2200      	movs	r2, #0
 800230e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002310:	4811      	ldr	r0, [pc, #68]	; (8002358 <MX_USART2_UART_Init+0x90>)
 8002312:	f006 fc1d 	bl	8008b50 <HAL_UART_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800231c:	f7ff f8f6 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002320:	2100      	movs	r1, #0
 8002322:	480d      	ldr	r0, [pc, #52]	; (8002358 <MX_USART2_UART_Init+0x90>)
 8002324:	f008 fc00 	bl	800ab28 <HAL_UARTEx_SetTxFifoThreshold>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800232e:	f7ff f8ed 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002332:	2100      	movs	r1, #0
 8002334:	4808      	ldr	r0, [pc, #32]	; (8002358 <MX_USART2_UART_Init+0x90>)
 8002336:	f008 fc35 	bl	800aba4 <HAL_UARTEx_SetRxFifoThreshold>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002340:	f7ff f8e4 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002344:	4804      	ldr	r0, [pc, #16]	; (8002358 <MX_USART2_UART_Init+0x90>)
 8002346:	f008 fbb6 	bl	800aab6 <HAL_UARTEx_DisableFifoMode>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002350:	f7ff f8dc 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	24009748 	.word	0x24009748
 800235c:	40004400 	.word	0x40004400

08002360 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 8002366:	4a23      	ldr	r2, [pc, #140]	; (80023f4 <MX_USART3_UART_Init+0x94>)
 8002368:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 800236c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002370:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023a8:	4811      	ldr	r0, [pc, #68]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 80023aa:	f006 fbd1 	bl	8008b50 <HAL_UART_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80023b4:	f7ff f8aa 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b8:	2100      	movs	r1, #0
 80023ba:	480d      	ldr	r0, [pc, #52]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 80023bc:	f008 fbb4 	bl	800ab28 <HAL_UARTEx_SetTxFifoThreshold>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80023c6:	f7ff f8a1 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ca:	2100      	movs	r1, #0
 80023cc:	4808      	ldr	r0, [pc, #32]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 80023ce:	f008 fbe9 	bl	800aba4 <HAL_UARTEx_SetRxFifoThreshold>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80023d8:	f7ff f898 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023dc:	4804      	ldr	r0, [pc, #16]	; (80023f0 <MX_USART3_UART_Init+0x90>)
 80023de:	f008 fb6a 	bl	800aab6 <HAL_UARTEx_DisableFifoMode>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80023e8:	f7ff f890 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	24009220 	.word	0x24009220
 80023f4:	40004800 	.word	0x40004800

080023f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b094      	sub	sp, #80	; 0x50
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a7f      	ldr	r2, [pc, #508]	; (8002614 <HAL_UART_MspInit+0x21c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d163      	bne.n	80024e2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800241a:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <HAL_UART_MspInit+0x220>)
 800241c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002420:	4a7d      	ldr	r2, [pc, #500]	; (8002618 <HAL_UART_MspInit+0x220>)
 8002422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002426:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800242a:	4b7b      	ldr	r3, [pc, #492]	; (8002618 <HAL_UART_MspInit+0x220>)
 800242c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002434:	63bb      	str	r3, [r7, #56]	; 0x38
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002438:	4b77      	ldr	r3, [pc, #476]	; (8002618 <HAL_UART_MspInit+0x220>)
 800243a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243e:	4a76      	ldr	r2, [pc, #472]	; (8002618 <HAL_UART_MspInit+0x220>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002448:	4b73      	ldr	r3, [pc, #460]	; (8002618 <HAL_UART_MspInit+0x220>)
 800244a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002456:	2303      	movs	r3, #3
 8002458:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002466:	2308      	movs	r3, #8
 8002468:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800246e:	4619      	mov	r1, r3
 8002470:	486a      	ldr	r0, [pc, #424]	; (800261c <HAL_UART_MspInit+0x224>)
 8002472:	f003 fb01 	bl	8005a78 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 8002476:	4b6a      	ldr	r3, [pc, #424]	; (8002620 <HAL_UART_MspInit+0x228>)
 8002478:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <HAL_UART_MspInit+0x22c>)
 800247a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800247c:	4b68      	ldr	r3, [pc, #416]	; (8002620 <HAL_UART_MspInit+0x228>)
 800247e:	223f      	movs	r2, #63	; 0x3f
 8002480:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002482:	4b67      	ldr	r3, [pc, #412]	; (8002620 <HAL_UART_MspInit+0x228>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002488:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_UART_MspInit+0x228>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800248e:	4b64      	ldr	r3, [pc, #400]	; (8002620 <HAL_UART_MspInit+0x228>)
 8002490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002494:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002496:	4b62      	ldr	r3, [pc, #392]	; (8002620 <HAL_UART_MspInit+0x228>)
 8002498:	2200      	movs	r2, #0
 800249a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800249c:	4b60      	ldr	r3, [pc, #384]	; (8002620 <HAL_UART_MspInit+0x228>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80024a2:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <HAL_UART_MspInit+0x228>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024a8:	4b5d      	ldr	r3, [pc, #372]	; (8002620 <HAL_UART_MspInit+0x228>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ae:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <HAL_UART_MspInit+0x228>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024b4:	485a      	ldr	r0, [pc, #360]	; (8002620 <HAL_UART_MspInit+0x228>)
 80024b6:	f000 fc99 	bl	8002dec <HAL_DMA_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80024c0:	f7ff f824 	bl	800150c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a56      	ldr	r2, [pc, #344]	; (8002620 <HAL_UART_MspInit+0x228>)
 80024c8:	67da      	str	r2, [r3, #124]	; 0x7c
 80024ca:	4a55      	ldr	r2, [pc, #340]	; (8002620 <HAL_UART_MspInit+0x228>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2105      	movs	r1, #5
 80024d4:	2034      	movs	r0, #52	; 0x34
 80024d6:	f000 fc61 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80024da:	2034      	movs	r0, #52	; 0x34
 80024dc:	f000 fc78 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024e0:	e2f8      	b.n	8002ad4 <HAL_UART_MspInit+0x6dc>
  else if(uartHandle->Instance==UART5)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a50      	ldr	r2, [pc, #320]	; (8002628 <HAL_UART_MspInit+0x230>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	f040 80a9 	bne.w	8002640 <HAL_UART_MspInit+0x248>
    __HAL_RCC_UART5_CLK_ENABLE();
 80024ee:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_UART_MspInit+0x220>)
 80024f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024f4:	4a48      	ldr	r2, [pc, #288]	; (8002618 <HAL_UART_MspInit+0x220>)
 80024f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024fe:	4b46      	ldr	r3, [pc, #280]	; (8002618 <HAL_UART_MspInit+0x220>)
 8002500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250c:	4b42      	ldr	r3, [pc, #264]	; (8002618 <HAL_UART_MspInit+0x220>)
 800250e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002512:	4a41      	ldr	r2, [pc, #260]	; (8002618 <HAL_UART_MspInit+0x220>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251c:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_UART_MspInit+0x220>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800252a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800253c:	230e      	movs	r3, #14
 800253e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002540:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002544:	4619      	mov	r1, r3
 8002546:	4839      	ldr	r0, [pc, #228]	; (800262c <HAL_UART_MspInit+0x234>)
 8002548:	f003 fa96 	bl	8005a78 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream4;
 800254c:	4b38      	ldr	r3, [pc, #224]	; (8002630 <HAL_UART_MspInit+0x238>)
 800254e:	4a39      	ldr	r2, [pc, #228]	; (8002634 <HAL_UART_MspInit+0x23c>)
 8002550:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_UART_MspInit+0x238>)
 8002554:	2241      	movs	r2, #65	; 0x41
 8002556:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <HAL_UART_MspInit+0x238>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800255e:	4b34      	ldr	r3, [pc, #208]	; (8002630 <HAL_UART_MspInit+0x238>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002564:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_UART_MspInit+0x238>)
 8002566:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800256a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800256c:	4b30      	ldr	r3, [pc, #192]	; (8002630 <HAL_UART_MspInit+0x238>)
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_UART_MspInit+0x238>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_UART_MspInit+0x238>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <HAL_UART_MspInit+0x238>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_UART_MspInit+0x238>)
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800258a:	4829      	ldr	r0, [pc, #164]	; (8002630 <HAL_UART_MspInit+0x238>)
 800258c:	f000 fc2e 	bl	8002dec <HAL_DMA_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8002596:	f7fe ffb9 	bl	800150c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a24      	ldr	r2, [pc, #144]	; (8002630 <HAL_UART_MspInit+0x238>)
 800259e:	67da      	str	r2, [r3, #124]	; 0x7c
 80025a0:	4a23      	ldr	r2, [pc, #140]	; (8002630 <HAL_UART_MspInit+0x238>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA2_Stream2;
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025a8:	4a24      	ldr	r2, [pc, #144]	; (800263c <HAL_UART_MspInit+0x244>)
 80025aa:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025ae:	2242      	movs	r2, #66	; 0x42
 80025b0:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025b4:	2240      	movs	r2, #64	; 0x40
 80025b6:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c4:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025da:	2200      	movs	r2, #0
 80025dc:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80025e4:	4814      	ldr	r0, [pc, #80]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025e6:	f000 fc01 	bl	8002dec <HAL_DMA_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80025f0:	f7fe ff8c 	bl	800150c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025f8:	679a      	str	r2, [r3, #120]	; 0x78
 80025fa:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_UART_MspInit+0x240>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	2105      	movs	r1, #5
 8002604:	2035      	movs	r0, #53	; 0x35
 8002606:	f000 fbc9 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800260a:	2035      	movs	r0, #53	; 0x35
 800260c:	f000 fbe0 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
}
 8002610:	e260      	b.n	8002ad4 <HAL_UART_MspInit+0x6dc>
 8002612:	bf00      	nop
 8002614:	40004c00 	.word	0x40004c00
 8002618:	58024400 	.word	0x58024400
 800261c:	58020000 	.word	0x58020000
 8002620:	240090b8 	.word	0x240090b8
 8002624:	40020088 	.word	0x40020088
 8002628:	40005000 	.word	0x40005000
 800262c:	58020400 	.word	0x58020400
 8002630:	240097d8 	.word	0x240097d8
 8002634:	40020070 	.word	0x40020070
 8002638:	24009850 	.word	0x24009850
 800263c:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==UART8)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a96      	ldr	r2, [pc, #600]	; (80028a0 <HAL_UART_MspInit+0x4a8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	f040 8091 	bne.w	800276e <HAL_UART_MspInit+0x376>
    __HAL_RCC_UART8_CLK_ENABLE();
 800264c:	4b95      	ldr	r3, [pc, #596]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 800264e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002652:	4a94      	ldr	r2, [pc, #592]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 8002654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002658:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800265c:	4b91      	ldr	r3, [pc, #580]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 800265e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800266a:	4b8e      	ldr	r3, [pc, #568]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 800266c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002670:	4a8c      	ldr	r2, [pc, #560]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 8002672:	f043 0310 	orr.w	r3, r3, #16
 8002676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267a:	4b8a      	ldr	r3, [pc, #552]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 800267c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002688:	2303      	movs	r3, #3
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002698:	2308      	movs	r3, #8
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800269c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026a0:	4619      	mov	r1, r3
 80026a2:	4881      	ldr	r0, [pc, #516]	; (80028a8 <HAL_UART_MspInit+0x4b0>)
 80026a4:	f003 f9e8 	bl	8005a78 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream7;
 80026a8:	4b80      	ldr	r3, [pc, #512]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026aa:	4a81      	ldr	r2, [pc, #516]	; (80028b0 <HAL_UART_MspInit+0x4b8>)
 80026ac:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80026ae:	4b7f      	ldr	r3, [pc, #508]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026b0:	2251      	movs	r2, #81	; 0x51
 80026b2:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b4:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ba:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c0:	4b7a      	ldr	r3, [pc, #488]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c6:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c8:	4b78      	ldr	r3, [pc, #480]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ce:	4b77      	ldr	r3, [pc, #476]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80026d4:	4b75      	ldr	r3, [pc, #468]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026da:	4b74      	ldr	r3, [pc, #464]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e0:	4b72      	ldr	r3, [pc, #456]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80026e6:	4871      	ldr	r0, [pc, #452]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026e8:	f000 fb80 	bl	8002dec <HAL_DMA_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 80026f2:	f7fe ff0b 	bl	800150c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a6c      	ldr	r2, [pc, #432]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026fa:	67da      	str	r2, [r3, #124]	; 0x7c
 80026fc:	4a6b      	ldr	r2, [pc, #428]	; (80028ac <HAL_UART_MspInit+0x4b4>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA2_Stream0;
 8002702:	4b6c      	ldr	r3, [pc, #432]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 8002704:	4a6c      	ldr	r2, [pc, #432]	; (80028b8 <HAL_UART_MspInit+0x4c0>)
 8002706:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002708:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 800270a:	2252      	movs	r2, #82	; 0x52
 800270c:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800270e:	4b69      	ldr	r3, [pc, #420]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002714:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800271a:	4b66      	ldr	r3, [pc, #408]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 800271c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002720:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002722:	4b64      	ldr	r3, [pc, #400]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002728:	4b62      	ldr	r3, [pc, #392]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 800272e:	4b61      	ldr	r3, [pc, #388]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002734:	4b5f      	ldr	r3, [pc, #380]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273a:	4b5e      	ldr	r3, [pc, #376]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 800273c:	2200      	movs	r2, #0
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002740:	485c      	ldr	r0, [pc, #368]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 8002742:	f000 fb53 	bl	8002dec <HAL_DMA_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_MspInit+0x358>
      Error_Handler();
 800274c:	f7fe fede 	bl	800150c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart8_tx);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 8002754:	679a      	str	r2, [r3, #120]	; 0x78
 8002756:	4a57      	ldr	r2, [pc, #348]	; (80028b4 <HAL_UART_MspInit+0x4bc>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2105      	movs	r1, #5
 8002760:	2053      	movs	r0, #83	; 0x53
 8002762:	f000 fb1b 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002766:	2053      	movs	r0, #83	; 0x53
 8002768:	f000 fb32 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
}
 800276c:	e1b2      	b.n	8002ad4 <HAL_UART_MspInit+0x6dc>
  else if(uartHandle->Instance==USART1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_UART_MspInit+0x4c4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	f040 80ad 	bne.w	80028d4 <HAL_UART_MspInit+0x4dc>
    __HAL_RCC_USART1_CLK_ENABLE();
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 800277c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002780:	4a48      	ldr	r2, [pc, #288]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 8002782:	f043 0310 	orr.w	r3, r3, #16
 8002786:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800278a:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 800278c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	623b      	str	r3, [r7, #32]
 8002796:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002798:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279e:	4a41      	ldr	r2, [pc, #260]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a8:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_UART_MspInit+0x4ac>)
 80027aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80027b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80027ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80027c8:	2304      	movs	r3, #4
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027d0:	4619      	mov	r1, r3
 80027d2:	483b      	ldr	r0, [pc, #236]	; (80028c0 <HAL_UART_MspInit+0x4c8>)
 80027d4:	f003 f950 	bl	8005a78 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80027d8:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 80027da:	4a3b      	ldr	r2, [pc, #236]	; (80028c8 <HAL_UART_MspInit+0x4d0>)
 80027dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80027de:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 80027e0:	2229      	movs	r2, #41	; 0x29
 80027e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e4:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 80027f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027fe:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002804:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800280a:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 800280c:	2200      	movs	r2, #0
 800280e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002810:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 8002812:	2200      	movs	r2, #0
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002816:	482b      	ldr	r0, [pc, #172]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 8002818:	f000 fae8 	bl	8002dec <HAL_DMA_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8002822:	f7fe fe73 	bl	800150c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a26      	ldr	r2, [pc, #152]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 800282a:	67da      	str	r2, [r3, #124]	; 0x7c
 800282c:	4a25      	ldr	r2, [pc, #148]	; (80028c4 <HAL_UART_MspInit+0x4cc>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 8002834:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <HAL_UART_MspInit+0x4d8>)
 8002836:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 800283a:	222a      	movs	r2, #42	; 0x2a
 800283c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 8002840:	2240      	movs	r2, #64	; 0x40
 8002842:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 800284c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002850:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 8002854:	2200      	movs	r2, #0
 8002856:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 8002860:	2200      	movs	r2, #0
 8002862:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 8002866:	2200      	movs	r2, #0
 8002868:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 800286c:	2200      	movs	r2, #0
 800286e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002870:	4816      	ldr	r0, [pc, #88]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 8002872:	f000 fabb 	bl	8002dec <HAL_DMA_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_MspInit+0x488>
      Error_Handler();
 800287c:	f7fe fe46 	bl	800150c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 8002884:	679a      	str	r2, [r3, #120]	; 0x78
 8002886:	4a11      	ldr	r2, [pc, #68]	; (80028cc <HAL_UART_MspInit+0x4d4>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2105      	movs	r1, #5
 8002890:	2025      	movs	r0, #37	; 0x25
 8002892:	f000 fa83 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002896:	2025      	movs	r0, #37	; 0x25
 8002898:	f000 fa9a 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
}
 800289c:	e11a      	b.n	8002ad4 <HAL_UART_MspInit+0x6dc>
 800289e:	bf00      	nop
 80028a0:	40007c00 	.word	0x40007c00
 80028a4:	58024400 	.word	0x58024400
 80028a8:	58021000 	.word	0x58021000
 80028ac:	240094a8 	.word	0x240094a8
 80028b0:	400200b8 	.word	0x400200b8
 80028b4:	240095b0 	.word	0x240095b0
 80028b8:	40020410 	.word	0x40020410
 80028bc:	40011000 	.word	0x40011000
 80028c0:	58020400 	.word	0x58020400
 80028c4:	240093b8 	.word	0x240093b8
 80028c8:	40020010 	.word	0x40020010
 80028cc:	240092b0 	.word	0x240092b0
 80028d0:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a80      	ldr	r2, [pc, #512]	; (8002adc <HAL_UART_MspInit+0x6e4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	f040 8091 	bne.w	8002a02 <HAL_UART_MspInit+0x60a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028e0:	4b7f      	ldr	r3, [pc, #508]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 80028e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028e6:	4a7e      	ldr	r2, [pc, #504]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028f0:	4b7b      	ldr	r3, [pc, #492]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 80028f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	4b78      	ldr	r3, [pc, #480]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 8002900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002904:	4a76      	ldr	r2, [pc, #472]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800290e:	4b74      	ldr	r3, [pc, #464]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 8002910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800291c:	230c      	movs	r3, #12
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800292c:	2307      	movs	r3, #7
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002934:	4619      	mov	r1, r3
 8002936:	486b      	ldr	r0, [pc, #428]	; (8002ae4 <HAL_UART_MspInit+0x6ec>)
 8002938:	f003 f89e 	bl	8005a78 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 800293e:	4a6b      	ldr	r2, [pc, #428]	; (8002aec <HAL_UART_MspInit+0x6f4>)
 8002940:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002942:	4b69      	ldr	r3, [pc, #420]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 8002944:	222b      	movs	r2, #43	; 0x2b
 8002946:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002948:	4b67      	ldr	r3, [pc, #412]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 8002950:	2200      	movs	r2, #0
 8002952:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002954:	4b64      	ldr	r3, [pc, #400]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 8002956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800295c:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 800295e:	2200      	movs	r2, #0
 8002960:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002962:	4b61      	ldr	r3, [pc, #388]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002968:	4b5f      	ldr	r3, [pc, #380]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800296e:	4b5e      	ldr	r3, [pc, #376]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 8002970:	2200      	movs	r2, #0
 8002972:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002974:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 8002976:	2200      	movs	r2, #0
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800297a:	485b      	ldr	r0, [pc, #364]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 800297c:	f000 fa36 	bl	8002dec <HAL_DMA_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_UART_MspInit+0x592>
      Error_Handler();
 8002986:	f7fe fdc1 	bl	800150c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a56      	ldr	r2, [pc, #344]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 800298e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002990:	4a55      	ldr	r2, [pc, #340]	; (8002ae8 <HAL_UART_MspInit+0x6f0>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream1;
 8002996:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 8002998:	4a56      	ldr	r2, [pc, #344]	; (8002af4 <HAL_UART_MspInit+0x6fc>)
 800299a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800299c:	4b54      	ldr	r3, [pc, #336]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 800299e:	222c      	movs	r2, #44	; 0x2c
 80029a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a2:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029a4:	2240      	movs	r2, #64	; 0x40
 80029a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a8:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b6:	4b4e      	ldr	r3, [pc, #312]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029bc:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029be:	2200      	movs	r2, #0
 80029c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029c2:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029c8:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ce:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029d4:	4846      	ldr	r0, [pc, #280]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029d6:	f000 fa09 	bl	8002dec <HAL_DMA_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_UART_MspInit+0x5ec>
      Error_Handler();
 80029e0:	f7fe fd94 	bl	800150c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a42      	ldr	r2, [pc, #264]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029e8:	679a      	str	r2, [r3, #120]	; 0x78
 80029ea:	4a41      	ldr	r2, [pc, #260]	; (8002af0 <HAL_UART_MspInit+0x6f8>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2105      	movs	r1, #5
 80029f4:	2026      	movs	r0, #38	; 0x26
 80029f6:	f000 f9d1 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029fa:	2026      	movs	r0, #38	; 0x26
 80029fc:	f000 f9e8 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
}
 8002a00:	e068      	b.n	8002ad4 <HAL_UART_MspInit+0x6dc>
  else if(uartHandle->Instance==USART3)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a3c      	ldr	r2, [pc, #240]	; (8002af8 <HAL_UART_MspInit+0x700>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d163      	bne.n	8002ad4 <HAL_UART_MspInit+0x6dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a0c:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 8002a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a12:	4a33      	ldr	r2, [pc, #204]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a1c:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 8002a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 8002a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a30:	4a2b      	ldr	r2, [pc, #172]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_UART_MspInit+0x6e8>)
 8002a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a5a:	2307      	movs	r3, #7
 8002a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a62:	4619      	mov	r1, r3
 8002a64:	4825      	ldr	r0, [pc, #148]	; (8002afc <HAL_UART_MspInit+0x704>)
 8002a66:	f003 f807 	bl	8005a78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002a6a:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002a6c:	4a25      	ldr	r2, [pc, #148]	; (8002b04 <HAL_UART_MspInit+0x70c>)
 8002a6e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002a72:	222d      	movs	r2, #45	; 0x2d
 8002a74:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a76:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a82:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a88:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002a96:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a9c:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa2:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002aa8:	4815      	ldr	r0, [pc, #84]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002aaa:	f000 f99f 	bl	8002dec <HAL_DMA_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_UART_MspInit+0x6c0>
      Error_Handler();
 8002ab4:	f7fe fd2a 	bl	800150c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002abc:	67da      	str	r2, [r3, #124]	; 0x7c
 8002abe:	4a10      	ldr	r2, [pc, #64]	; (8002b00 <HAL_UART_MspInit+0x708>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2105      	movs	r1, #5
 8002ac8:	2027      	movs	r0, #39	; 0x27
 8002aca:	f000 f967 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ace:	2027      	movs	r0, #39	; 0x27
 8002ad0:	f000 f97e 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
}
 8002ad4:	bf00      	nop
 8002ad6:	3750      	adds	r7, #80	; 0x50
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40004400 	.word	0x40004400
 8002ae0:	58024400 	.word	0x58024400
 8002ae4:	58020000 	.word	0x58020000
 8002ae8:	24009130 	.word	0x24009130
 8002aec:	40020040 	.word	0x40020040
 8002af0:	24009430 	.word	0x24009430
 8002af4:	40020428 	.word	0x40020428
 8002af8:	40004800 	.word	0x40004800
 8002afc:	58020400 	.word	0x58020400
 8002b00:	240091a8 	.word	0x240091a8
 8002b04:	40020058 	.word	0x40020058

08002b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b0c:	f7ff fa24 	bl	8001f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b12:	490d      	ldr	r1, [pc, #52]	; (8002b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b18:	e002      	b.n	8002b20 <LoopCopyDataInit>

08002b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1e:	3304      	adds	r3, #4

08002b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b24:	d3f9      	bcc.n	8002b1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b28:	4c0a      	ldr	r4, [pc, #40]	; (8002b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b2c:	e001      	b.n	8002b32 <LoopFillZerobss>

08002b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b30:	3204      	adds	r2, #4

08002b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b34:	d3fb      	bcc.n	8002b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b36:	f00b fd29 	bl	800e58c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b3a:	f7fe fbff 	bl	800133c <main>
  bx  lr
 8002b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b48:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002b4c:	0800e890 	.word	0x0800e890
  ldr r2, =_sbss
 8002b50:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8002b54:	240098cc 	.word	0x240098cc

08002b58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b58:	e7fe      	b.n	8002b58 <ADC3_IRQHandler>
	...

08002b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b62:	2003      	movs	r0, #3
 8002b64:	f000 f90f 	bl	8002d86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b68:	f003 ff9e 	bl	8006aa8 <HAL_RCC_GetSysClockFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_Init+0x68>)
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	4913      	ldr	r1, [pc, #76]	; (8002bc8 <HAL_Init+0x6c>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
 8002b84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <HAL_Init+0x68>)
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <HAL_Init+0x6c>)
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <HAL_Init+0x70>)
 8002b9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <HAL_Init+0x74>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7fe fcd4 	bl	8001554 <HAL_InitTick>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e002      	b.n	8002bbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb6:	f7fe fcaf 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	0800e840 	.word	0x0800e840
 8002bcc:	24000004 	.word	0x24000004
 8002bd0:	24000000 	.word	0x24000000

08002bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_IncTick+0x20>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_IncTick+0x24>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <HAL_IncTick+0x24>)
 8002be6:	6013      	str	r3, [r2, #0]
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	2400000c 	.word	0x2400000c
 8002bf8:	240098c8 	.word	0x240098c8

08002bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_GetTick+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	240098c8 	.word	0x240098c8

08002c14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <HAL_GetREVID+0x14>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	5c001000 	.word	0x5c001000

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <__NVIC_SetPriorityGrouping+0x40>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <__NVIC_SetPriorityGrouping+0x40>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00
 8002c70:	05fa0000 	.word	0x05fa0000

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	; (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	; (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ff4c 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002daa:	f7ff ff63 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002dae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	6978      	ldr	r0, [r7, #20]
 8002db6:	f7ff ffb3 	bl	8002d20 <NVIC_EncodePriority>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff82 	bl	8002ccc <__NVIC_SetPriority>
}
 8002dc8:	bf00      	nop
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff56 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff ff02 	bl	8002bfc <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e316      	b.n	8003432 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a66      	ldr	r2, [pc, #408]	; (8002fa4 <HAL_DMA_Init+0x1b8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d04a      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a65      	ldr	r2, [pc, #404]	; (8002fa8 <HAL_DMA_Init+0x1bc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d045      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a63      	ldr	r2, [pc, #396]	; (8002fac <HAL_DMA_Init+0x1c0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d040      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a62      	ldr	r2, [pc, #392]	; (8002fb0 <HAL_DMA_Init+0x1c4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d03b      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a60      	ldr	r2, [pc, #384]	; (8002fb4 <HAL_DMA_Init+0x1c8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d036      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a5f      	ldr	r2, [pc, #380]	; (8002fb8 <HAL_DMA_Init+0x1cc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d031      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a5d      	ldr	r2, [pc, #372]	; (8002fbc <HAL_DMA_Init+0x1d0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d02c      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a5c      	ldr	r2, [pc, #368]	; (8002fc0 <HAL_DMA_Init+0x1d4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d027      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5a      	ldr	r2, [pc, #360]	; (8002fc4 <HAL_DMA_Init+0x1d8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d022      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a59      	ldr	r2, [pc, #356]	; (8002fc8 <HAL_DMA_Init+0x1dc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d01d      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a57      	ldr	r2, [pc, #348]	; (8002fcc <HAL_DMA_Init+0x1e0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d018      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a56      	ldr	r2, [pc, #344]	; (8002fd0 <HAL_DMA_Init+0x1e4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d013      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a54      	ldr	r2, [pc, #336]	; (8002fd4 <HAL_DMA_Init+0x1e8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00e      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a53      	ldr	r2, [pc, #332]	; (8002fd8 <HAL_DMA_Init+0x1ec>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d009      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a51      	ldr	r2, [pc, #324]	; (8002fdc <HAL_DMA_Init+0x1f0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d004      	beq.n	8002ea4 <HAL_DMA_Init+0xb8>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a50      	ldr	r2, [pc, #320]	; (8002fe0 <HAL_DMA_Init+0x1f4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_DMA_Init+0xbc>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_DMA_Init+0xbe>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 813b 	beq.w	8003126 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a37      	ldr	r2, [pc, #220]	; (8002fa4 <HAL_DMA_Init+0x1b8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d04a      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a36      	ldr	r2, [pc, #216]	; (8002fa8 <HAL_DMA_Init+0x1bc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d045      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a34      	ldr	r2, [pc, #208]	; (8002fac <HAL_DMA_Init+0x1c0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d040      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a33      	ldr	r2, [pc, #204]	; (8002fb0 <HAL_DMA_Init+0x1c4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d03b      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a31      	ldr	r2, [pc, #196]	; (8002fb4 <HAL_DMA_Init+0x1c8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d036      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a30      	ldr	r2, [pc, #192]	; (8002fb8 <HAL_DMA_Init+0x1cc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d031      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2e      	ldr	r2, [pc, #184]	; (8002fbc <HAL_DMA_Init+0x1d0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02c      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <HAL_DMA_Init+0x1d4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d027      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2b      	ldr	r2, [pc, #172]	; (8002fc4 <HAL_DMA_Init+0x1d8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d022      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <HAL_DMA_Init+0x1dc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d01d      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_DMA_Init+0x1e0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <HAL_DMA_Init+0x1e4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <HAL_DMA_Init+0x1e8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_DMA_Init+0x1ec>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <HAL_DMA_Init+0x1f0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_DMA_Init+0x174>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_DMA_Init+0x1f4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d108      	bne.n	8002f72 <HAL_DMA_Init+0x186>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	e007      	b.n	8002f82 <HAL_DMA_Init+0x196>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f82:	e02f      	b.n	8002fe4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f84:	f7ff fe3a 	bl	8002bfc <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d928      	bls.n	8002fe4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e246      	b.n	8003432 <HAL_DMA_Init+0x646>
 8002fa4:	40020010 	.word	0x40020010
 8002fa8:	40020028 	.word	0x40020028
 8002fac:	40020040 	.word	0x40020040
 8002fb0:	40020058 	.word	0x40020058
 8002fb4:	40020070 	.word	0x40020070
 8002fb8:	40020088 	.word	0x40020088
 8002fbc:	400200a0 	.word	0x400200a0
 8002fc0:	400200b8 	.word	0x400200b8
 8002fc4:	40020410 	.word	0x40020410
 8002fc8:	40020428 	.word	0x40020428
 8002fcc:	40020440 	.word	0x40020440
 8002fd0:	40020458 	.word	0x40020458
 8002fd4:	40020470 	.word	0x40020470
 8002fd8:	40020488 	.word	0x40020488
 8002fdc:	400204a0 	.word	0x400204a0
 8002fe0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1c8      	bne.n	8002f84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4b83      	ldr	r3, [pc, #524]	; (800320c <HAL_DMA_Init+0x420>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800300a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003016:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003022:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	2b04      	cmp	r3, #4
 8003036:	d107      	bne.n	8003048 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4313      	orrs	r3, r2
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003048:	4b71      	ldr	r3, [pc, #452]	; (8003210 <HAL_DMA_Init+0x424>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b71      	ldr	r3, [pc, #452]	; (8003214 <HAL_DMA_Init+0x428>)
 800304e:	4013      	ands	r3, r2
 8003050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003054:	d328      	bcc.n	80030a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b28      	cmp	r3, #40	; 0x28
 800305c:	d903      	bls.n	8003066 <HAL_DMA_Init+0x27a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b2e      	cmp	r3, #46	; 0x2e
 8003064:	d917      	bls.n	8003096 <HAL_DMA_Init+0x2aa>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b3e      	cmp	r3, #62	; 0x3e
 800306c:	d903      	bls.n	8003076 <HAL_DMA_Init+0x28a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b42      	cmp	r3, #66	; 0x42
 8003074:	d90f      	bls.n	8003096 <HAL_DMA_Init+0x2aa>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b46      	cmp	r3, #70	; 0x46
 800307c:	d903      	bls.n	8003086 <HAL_DMA_Init+0x29a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b48      	cmp	r3, #72	; 0x48
 8003084:	d907      	bls.n	8003096 <HAL_DMA_Init+0x2aa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b4e      	cmp	r3, #78	; 0x4e
 800308c:	d905      	bls.n	800309a <HAL_DMA_Init+0x2ae>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b52      	cmp	r3, #82	; 0x52
 8003094:	d801      	bhi.n	800309a <HAL_DMA_Init+0x2ae>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_DMA_Init+0x2b0>
 800309a:	2300      	movs	r3, #0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0307 	bic.w	r3, r3, #7
 80030be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d117      	bne.n	8003102 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00e      	beq.n	8003102 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f002 fb3d 	bl	8005764 <DMA_CheckFifoParam>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2240      	movs	r2, #64	; 0x40
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e197      	b.n	8003432 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f002 fa78 	bl	8005600 <DMA_CalcBaseAndBitshift>
 8003110:	4603      	mov	r3, r0
 8003112:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	223f      	movs	r2, #63	; 0x3f
 800311e:	409a      	lsls	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e0cd      	b.n	80032c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a3b      	ldr	r2, [pc, #236]	; (8003218 <HAL_DMA_Init+0x42c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d022      	beq.n	8003176 <HAL_DMA_Init+0x38a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a39      	ldr	r2, [pc, #228]	; (800321c <HAL_DMA_Init+0x430>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01d      	beq.n	8003176 <HAL_DMA_Init+0x38a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a38      	ldr	r2, [pc, #224]	; (8003220 <HAL_DMA_Init+0x434>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d018      	beq.n	8003176 <HAL_DMA_Init+0x38a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a36      	ldr	r2, [pc, #216]	; (8003224 <HAL_DMA_Init+0x438>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_DMA_Init+0x38a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a35      	ldr	r2, [pc, #212]	; (8003228 <HAL_DMA_Init+0x43c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00e      	beq.n	8003176 <HAL_DMA_Init+0x38a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a33      	ldr	r2, [pc, #204]	; (800322c <HAL_DMA_Init+0x440>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_DMA_Init+0x38a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a32      	ldr	r2, [pc, #200]	; (8003230 <HAL_DMA_Init+0x444>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_DMA_Init+0x38a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a30      	ldr	r2, [pc, #192]	; (8003234 <HAL_DMA_Init+0x448>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_DMA_Init+0x38e>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_DMA_Init+0x390>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8097 	beq.w	80032b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_DMA_Init+0x42c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d021      	beq.n	80031d0 <HAL_DMA_Init+0x3e4>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_DMA_Init+0x430>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01c      	beq.n	80031d0 <HAL_DMA_Init+0x3e4>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a21      	ldr	r2, [pc, #132]	; (8003220 <HAL_DMA_Init+0x434>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d017      	beq.n	80031d0 <HAL_DMA_Init+0x3e4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <HAL_DMA_Init+0x438>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d012      	beq.n	80031d0 <HAL_DMA_Init+0x3e4>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_DMA_Init+0x43c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00d      	beq.n	80031d0 <HAL_DMA_Init+0x3e4>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_DMA_Init+0x440>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d008      	beq.n	80031d0 <HAL_DMA_Init+0x3e4>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_DMA_Init+0x444>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d003      	beq.n	80031d0 <HAL_DMA_Init+0x3e4>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_DMA_Init+0x448>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_DMA_Init+0x44c>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d020      	beq.n	800323c <HAL_DMA_Init+0x450>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b80      	cmp	r3, #128	; 0x80
 8003200:	d102      	bne.n	8003208 <HAL_DMA_Init+0x41c>
 8003202:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003206:	e01a      	b.n	800323e <HAL_DMA_Init+0x452>
 8003208:	2300      	movs	r3, #0
 800320a:	e018      	b.n	800323e <HAL_DMA_Init+0x452>
 800320c:	fe10803f 	.word	0xfe10803f
 8003210:	5c001000 	.word	0x5c001000
 8003214:	ffff0000 	.word	0xffff0000
 8003218:	58025408 	.word	0x58025408
 800321c:	5802541c 	.word	0x5802541c
 8003220:	58025430 	.word	0x58025430
 8003224:	58025444 	.word	0x58025444
 8003228:	58025458 	.word	0x58025458
 800322c:	5802546c 	.word	0x5802546c
 8003230:	58025480 	.word	0x58025480
 8003234:	58025494 	.word	0x58025494
 8003238:	fffe000f 	.word	0xfffe000f
 800323c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68d2      	ldr	r2, [r2, #12]
 8003242:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003244:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800324c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003254:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800325c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003264:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800326c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	4b6e      	ldr	r3, [pc, #440]	; (800343c <HAL_DMA_Init+0x650>)
 8003284:	4413      	add	r3, r2
 8003286:	4a6e      	ldr	r2, [pc, #440]	; (8003440 <HAL_DMA_Init+0x654>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f002 f9b3 	bl	8005600 <DMA_CalcBaseAndBitshift>
 800329a:	4603      	mov	r3, r0
 800329c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2201      	movs	r2, #1
 80032a8:	409a      	lsls	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	e008      	b.n	80032c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2240      	movs	r2, #64	; 0x40
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2203      	movs	r2, #3
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0b7      	b.n	8003432 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a5f      	ldr	r2, [pc, #380]	; (8003444 <HAL_DMA_Init+0x658>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d072      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a5d      	ldr	r2, [pc, #372]	; (8003448 <HAL_DMA_Init+0x65c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d06d      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a5c      	ldr	r2, [pc, #368]	; (800344c <HAL_DMA_Init+0x660>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d068      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a5a      	ldr	r2, [pc, #360]	; (8003450 <HAL_DMA_Init+0x664>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d063      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a59      	ldr	r2, [pc, #356]	; (8003454 <HAL_DMA_Init+0x668>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d05e      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a57      	ldr	r2, [pc, #348]	; (8003458 <HAL_DMA_Init+0x66c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d059      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a56      	ldr	r2, [pc, #344]	; (800345c <HAL_DMA_Init+0x670>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d054      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a54      	ldr	r2, [pc, #336]	; (8003460 <HAL_DMA_Init+0x674>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d04f      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a53      	ldr	r2, [pc, #332]	; (8003464 <HAL_DMA_Init+0x678>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d04a      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a51      	ldr	r2, [pc, #324]	; (8003468 <HAL_DMA_Init+0x67c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d045      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a50      	ldr	r2, [pc, #320]	; (800346c <HAL_DMA_Init+0x680>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d040      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a4e      	ldr	r2, [pc, #312]	; (8003470 <HAL_DMA_Init+0x684>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d03b      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <HAL_DMA_Init+0x688>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d036      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a4b      	ldr	r2, [pc, #300]	; (8003478 <HAL_DMA_Init+0x68c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d031      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a4a      	ldr	r2, [pc, #296]	; (800347c <HAL_DMA_Init+0x690>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d02c      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a48      	ldr	r2, [pc, #288]	; (8003480 <HAL_DMA_Init+0x694>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d027      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a47      	ldr	r2, [pc, #284]	; (8003484 <HAL_DMA_Init+0x698>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d022      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a45      	ldr	r2, [pc, #276]	; (8003488 <HAL_DMA_Init+0x69c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01d      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a44      	ldr	r2, [pc, #272]	; (800348c <HAL_DMA_Init+0x6a0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d018      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a42      	ldr	r2, [pc, #264]	; (8003490 <HAL_DMA_Init+0x6a4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a41      	ldr	r2, [pc, #260]	; (8003494 <HAL_DMA_Init+0x6a8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00e      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a3f      	ldr	r2, [pc, #252]	; (8003498 <HAL_DMA_Init+0x6ac>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d009      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a3e      	ldr	r2, [pc, #248]	; (800349c <HAL_DMA_Init+0x6b0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d004      	beq.n	80033b2 <HAL_DMA_Init+0x5c6>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a3c      	ldr	r2, [pc, #240]	; (80034a0 <HAL_DMA_Init+0x6b4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <HAL_DMA_Init+0x5ca>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_DMA_Init+0x5cc>
 80033b6:	2300      	movs	r3, #0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d032      	beq.n	8003422 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f002 fa4d 	bl	800585c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b80      	cmp	r3, #128	; 0x80
 80033c8:	d102      	bne.n	80033d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <HAL_DMA_Init+0x624>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d80c      	bhi.n	8003410 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f002 faca 	bl	8005990 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	e008      	b.n	8003422 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	a7fdabf8 	.word	0xa7fdabf8
 8003440:	cccccccd 	.word	0xcccccccd
 8003444:	40020010 	.word	0x40020010
 8003448:	40020028 	.word	0x40020028
 800344c:	40020040 	.word	0x40020040
 8003450:	40020058 	.word	0x40020058
 8003454:	40020070 	.word	0x40020070
 8003458:	40020088 	.word	0x40020088
 800345c:	400200a0 	.word	0x400200a0
 8003460:	400200b8 	.word	0x400200b8
 8003464:	40020410 	.word	0x40020410
 8003468:	40020428 	.word	0x40020428
 800346c:	40020440 	.word	0x40020440
 8003470:	40020458 	.word	0x40020458
 8003474:	40020470 	.word	0x40020470
 8003478:	40020488 	.word	0x40020488
 800347c:	400204a0 	.word	0x400204a0
 8003480:	400204b8 	.word	0x400204b8
 8003484:	58025408 	.word	0x58025408
 8003488:	5802541c 	.word	0x5802541c
 800348c:	58025430 	.word	0x58025430
 8003490:	58025444 	.word	0x58025444
 8003494:	58025458 	.word	0x58025458
 8003498:	5802546c 	.word	0x5802546c
 800349c:	58025480 	.word	0x58025480
 80034a0:	58025494 	.word	0x58025494

080034a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e226      	b.n	800390e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_DMA_Start_IT+0x2a>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e21f      	b.n	800390e <HAL_DMA_Start_IT+0x46a>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	f040 820a 	bne.w	80038f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a68      	ldr	r2, [pc, #416]	; (8003698 <HAL_DMA_Start_IT+0x1f4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d04a      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a66      	ldr	r2, [pc, #408]	; (800369c <HAL_DMA_Start_IT+0x1f8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d045      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a65      	ldr	r2, [pc, #404]	; (80036a0 <HAL_DMA_Start_IT+0x1fc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d040      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a63      	ldr	r2, [pc, #396]	; (80036a4 <HAL_DMA_Start_IT+0x200>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d03b      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a62      	ldr	r2, [pc, #392]	; (80036a8 <HAL_DMA_Start_IT+0x204>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d036      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a60      	ldr	r2, [pc, #384]	; (80036ac <HAL_DMA_Start_IT+0x208>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d031      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5f      	ldr	r2, [pc, #380]	; (80036b0 <HAL_DMA_Start_IT+0x20c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d02c      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a5d      	ldr	r2, [pc, #372]	; (80036b4 <HAL_DMA_Start_IT+0x210>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d027      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a5c      	ldr	r2, [pc, #368]	; (80036b8 <HAL_DMA_Start_IT+0x214>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d022      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a5a      	ldr	r2, [pc, #360]	; (80036bc <HAL_DMA_Start_IT+0x218>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01d      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a59      	ldr	r2, [pc, #356]	; (80036c0 <HAL_DMA_Start_IT+0x21c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d018      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a57      	ldr	r2, [pc, #348]	; (80036c4 <HAL_DMA_Start_IT+0x220>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a56      	ldr	r2, [pc, #344]	; (80036c8 <HAL_DMA_Start_IT+0x224>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a54      	ldr	r2, [pc, #336]	; (80036cc <HAL_DMA_Start_IT+0x228>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a53      	ldr	r2, [pc, #332]	; (80036d0 <HAL_DMA_Start_IT+0x22c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_DMA_Start_IT+0xee>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a51      	ldr	r2, [pc, #324]	; (80036d4 <HAL_DMA_Start_IT+0x230>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d108      	bne.n	80035a4 <HAL_DMA_Start_IT+0x100>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e007      	b.n	80035b4 <HAL_DMA_Start_IT+0x110>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f001 fe74 	bl	80052a8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a34      	ldr	r2, [pc, #208]	; (8003698 <HAL_DMA_Start_IT+0x1f4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d04a      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a33      	ldr	r2, [pc, #204]	; (800369c <HAL_DMA_Start_IT+0x1f8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d045      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <HAL_DMA_Start_IT+0x1fc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d040      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a30      	ldr	r2, [pc, #192]	; (80036a4 <HAL_DMA_Start_IT+0x200>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d03b      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2e      	ldr	r2, [pc, #184]	; (80036a8 <HAL_DMA_Start_IT+0x204>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d036      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2d      	ldr	r2, [pc, #180]	; (80036ac <HAL_DMA_Start_IT+0x208>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d031      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2b      	ldr	r2, [pc, #172]	; (80036b0 <HAL_DMA_Start_IT+0x20c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d02c      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2a      	ldr	r2, [pc, #168]	; (80036b4 <HAL_DMA_Start_IT+0x210>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d027      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a28      	ldr	r2, [pc, #160]	; (80036b8 <HAL_DMA_Start_IT+0x214>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d022      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a27      	ldr	r2, [pc, #156]	; (80036bc <HAL_DMA_Start_IT+0x218>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d01d      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <HAL_DMA_Start_IT+0x21c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d018      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <HAL_DMA_Start_IT+0x220>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d013      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a22      	ldr	r2, [pc, #136]	; (80036c8 <HAL_DMA_Start_IT+0x224>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00e      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a21      	ldr	r2, [pc, #132]	; (80036cc <HAL_DMA_Start_IT+0x228>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d009      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <HAL_DMA_Start_IT+0x22c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_DMA_Start_IT+0x1bc>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1e      	ldr	r2, [pc, #120]	; (80036d4 <HAL_DMA_Start_IT+0x230>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d101      	bne.n	8003664 <HAL_DMA_Start_IT+0x1c0>
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <HAL_DMA_Start_IT+0x1c2>
 8003664:	2300      	movs	r3, #0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d036      	beq.n	80036d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 021e 	bic.w	r2, r3, #30
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0216 	orr.w	r2, r2, #22
 800367c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d03e      	beq.n	8003704 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0208 	orr.w	r2, r2, #8
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e035      	b.n	8003704 <HAL_DMA_Start_IT+0x260>
 8003698:	40020010 	.word	0x40020010
 800369c:	40020028 	.word	0x40020028
 80036a0:	40020040 	.word	0x40020040
 80036a4:	40020058 	.word	0x40020058
 80036a8:	40020070 	.word	0x40020070
 80036ac:	40020088 	.word	0x40020088
 80036b0:	400200a0 	.word	0x400200a0
 80036b4:	400200b8 	.word	0x400200b8
 80036b8:	40020410 	.word	0x40020410
 80036bc:	40020428 	.word	0x40020428
 80036c0:	40020440 	.word	0x40020440
 80036c4:	40020458 	.word	0x40020458
 80036c8:	40020470 	.word	0x40020470
 80036cc:	40020488 	.word	0x40020488
 80036d0:	400204a0 	.word	0x400204a0
 80036d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 020e 	bic.w	r2, r3, #14
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 020a 	orr.w	r2, r2, #10
 80036ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0204 	orr.w	r2, r2, #4
 8003702:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a83      	ldr	r2, [pc, #524]	; (8003918 <HAL_DMA_Start_IT+0x474>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d072      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a82      	ldr	r2, [pc, #520]	; (800391c <HAL_DMA_Start_IT+0x478>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d06d      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a80      	ldr	r2, [pc, #512]	; (8003920 <HAL_DMA_Start_IT+0x47c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d068      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7f      	ldr	r2, [pc, #508]	; (8003924 <HAL_DMA_Start_IT+0x480>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d063      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a7d      	ldr	r2, [pc, #500]	; (8003928 <HAL_DMA_Start_IT+0x484>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d05e      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7c      	ldr	r2, [pc, #496]	; (800392c <HAL_DMA_Start_IT+0x488>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d059      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a7a      	ldr	r2, [pc, #488]	; (8003930 <HAL_DMA_Start_IT+0x48c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d054      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a79      	ldr	r2, [pc, #484]	; (8003934 <HAL_DMA_Start_IT+0x490>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d04f      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a77      	ldr	r2, [pc, #476]	; (8003938 <HAL_DMA_Start_IT+0x494>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d04a      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a76      	ldr	r2, [pc, #472]	; (800393c <HAL_DMA_Start_IT+0x498>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d045      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a74      	ldr	r2, [pc, #464]	; (8003940 <HAL_DMA_Start_IT+0x49c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d040      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a73      	ldr	r2, [pc, #460]	; (8003944 <HAL_DMA_Start_IT+0x4a0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d03b      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a71      	ldr	r2, [pc, #452]	; (8003948 <HAL_DMA_Start_IT+0x4a4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d036      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a70      	ldr	r2, [pc, #448]	; (800394c <HAL_DMA_Start_IT+0x4a8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d031      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6e      	ldr	r2, [pc, #440]	; (8003950 <HAL_DMA_Start_IT+0x4ac>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d02c      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6d      	ldr	r2, [pc, #436]	; (8003954 <HAL_DMA_Start_IT+0x4b0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d027      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a6b      	ldr	r2, [pc, #428]	; (8003958 <HAL_DMA_Start_IT+0x4b4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d022      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a6a      	ldr	r2, [pc, #424]	; (800395c <HAL_DMA_Start_IT+0x4b8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d01d      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a68      	ldr	r2, [pc, #416]	; (8003960 <HAL_DMA_Start_IT+0x4bc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d018      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a67      	ldr	r2, [pc, #412]	; (8003964 <HAL_DMA_Start_IT+0x4c0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a65      	ldr	r2, [pc, #404]	; (8003968 <HAL_DMA_Start_IT+0x4c4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a64      	ldr	r2, [pc, #400]	; (800396c <HAL_DMA_Start_IT+0x4c8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d009      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a62      	ldr	r2, [pc, #392]	; (8003970 <HAL_DMA_Start_IT+0x4cc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_DMA_Start_IT+0x350>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a61      	ldr	r2, [pc, #388]	; (8003974 <HAL_DMA_Start_IT+0x4d0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <HAL_DMA_Start_IT+0x354>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_DMA_Start_IT+0x356>
 80037f8:	2300      	movs	r3, #0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01a      	beq.n	8003834 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800382e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003832:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a37      	ldr	r2, [pc, #220]	; (8003918 <HAL_DMA_Start_IT+0x474>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04a      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a36      	ldr	r2, [pc, #216]	; (800391c <HAL_DMA_Start_IT+0x478>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d045      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a34      	ldr	r2, [pc, #208]	; (8003920 <HAL_DMA_Start_IT+0x47c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d040      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a33      	ldr	r2, [pc, #204]	; (8003924 <HAL_DMA_Start_IT+0x480>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d03b      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a31      	ldr	r2, [pc, #196]	; (8003928 <HAL_DMA_Start_IT+0x484>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d036      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a30      	ldr	r2, [pc, #192]	; (800392c <HAL_DMA_Start_IT+0x488>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d031      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2e      	ldr	r2, [pc, #184]	; (8003930 <HAL_DMA_Start_IT+0x48c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02c      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <HAL_DMA_Start_IT+0x490>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d027      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2b      	ldr	r2, [pc, #172]	; (8003938 <HAL_DMA_Start_IT+0x494>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d022      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2a      	ldr	r2, [pc, #168]	; (800393c <HAL_DMA_Start_IT+0x498>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d01d      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a28      	ldr	r2, [pc, #160]	; (8003940 <HAL_DMA_Start_IT+0x49c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a27      	ldr	r2, [pc, #156]	; (8003944 <HAL_DMA_Start_IT+0x4a0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a25      	ldr	r2, [pc, #148]	; (8003948 <HAL_DMA_Start_IT+0x4a4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a24      	ldr	r2, [pc, #144]	; (800394c <HAL_DMA_Start_IT+0x4a8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <HAL_DMA_Start_IT+0x4ac>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_Start_IT+0x430>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a21      	ldr	r2, [pc, #132]	; (8003954 <HAL_DMA_Start_IT+0x4b0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d108      	bne.n	80038e6 <HAL_DMA_Start_IT+0x442>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e012      	b.n	800390c <HAL_DMA_Start_IT+0x468>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e009      	b.n	800390c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40020010 	.word	0x40020010
 800391c:	40020028 	.word	0x40020028
 8003920:	40020040 	.word	0x40020040
 8003924:	40020058 	.word	0x40020058
 8003928:	40020070 	.word	0x40020070
 800392c:	40020088 	.word	0x40020088
 8003930:	400200a0 	.word	0x400200a0
 8003934:	400200b8 	.word	0x400200b8
 8003938:	40020410 	.word	0x40020410
 800393c:	40020428 	.word	0x40020428
 8003940:	40020440 	.word	0x40020440
 8003944:	40020458 	.word	0x40020458
 8003948:	40020470 	.word	0x40020470
 800394c:	40020488 	.word	0x40020488
 8003950:	400204a0 	.word	0x400204a0
 8003954:	400204b8 	.word	0x400204b8
 8003958:	58025408 	.word	0x58025408
 800395c:	5802541c 	.word	0x5802541c
 8003960:	58025430 	.word	0x58025430
 8003964:	58025444 	.word	0x58025444
 8003968:	58025458 	.word	0x58025458
 800396c:	5802546c 	.word	0x5802546c
 8003970:	58025480 	.word	0x58025480
 8003974:	58025494 	.word	0x58025494

08003978 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003980:	f7ff f93c 	bl	8002bfc <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e2dc      	b.n	8003f4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d008      	beq.n	80039ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e2cd      	b.n	8003f4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a76      	ldr	r2, [pc, #472]	; (8003b8c <HAL_DMA_Abort+0x214>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d04a      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a74      	ldr	r2, [pc, #464]	; (8003b90 <HAL_DMA_Abort+0x218>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d045      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a73      	ldr	r2, [pc, #460]	; (8003b94 <HAL_DMA_Abort+0x21c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d040      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a71      	ldr	r2, [pc, #452]	; (8003b98 <HAL_DMA_Abort+0x220>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d03b      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a70      	ldr	r2, [pc, #448]	; (8003b9c <HAL_DMA_Abort+0x224>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d036      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6e      	ldr	r2, [pc, #440]	; (8003ba0 <HAL_DMA_Abort+0x228>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d031      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6d      	ldr	r2, [pc, #436]	; (8003ba4 <HAL_DMA_Abort+0x22c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d02c      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a6b      	ldr	r2, [pc, #428]	; (8003ba8 <HAL_DMA_Abort+0x230>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d027      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6a      	ldr	r2, [pc, #424]	; (8003bac <HAL_DMA_Abort+0x234>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d022      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a68      	ldr	r2, [pc, #416]	; (8003bb0 <HAL_DMA_Abort+0x238>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01d      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a67      	ldr	r2, [pc, #412]	; (8003bb4 <HAL_DMA_Abort+0x23c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a65      	ldr	r2, [pc, #404]	; (8003bb8 <HAL_DMA_Abort+0x240>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a64      	ldr	r2, [pc, #400]	; (8003bbc <HAL_DMA_Abort+0x244>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a62      	ldr	r2, [pc, #392]	; (8003bc0 <HAL_DMA_Abort+0x248>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a61      	ldr	r2, [pc, #388]	; (8003bc4 <HAL_DMA_Abort+0x24c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_DMA_Abort+0xd6>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5f      	ldr	r2, [pc, #380]	; (8003bc8 <HAL_DMA_Abort+0x250>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_DMA_Abort+0xda>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_DMA_Abort+0xdc>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 021e 	bic.w	r2, r2, #30
 8003a66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e00a      	b.n	8003a96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 020e 	bic.w	r2, r2, #14
 8003a8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3c      	ldr	r2, [pc, #240]	; (8003b8c <HAL_DMA_Abort+0x214>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d072      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a3a      	ldr	r2, [pc, #232]	; (8003b90 <HAL_DMA_Abort+0x218>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d06d      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a39      	ldr	r2, [pc, #228]	; (8003b94 <HAL_DMA_Abort+0x21c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d068      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a37      	ldr	r2, [pc, #220]	; (8003b98 <HAL_DMA_Abort+0x220>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d063      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a36      	ldr	r2, [pc, #216]	; (8003b9c <HAL_DMA_Abort+0x224>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d05e      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a34      	ldr	r2, [pc, #208]	; (8003ba0 <HAL_DMA_Abort+0x228>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d059      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a33      	ldr	r2, [pc, #204]	; (8003ba4 <HAL_DMA_Abort+0x22c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d054      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a31      	ldr	r2, [pc, #196]	; (8003ba8 <HAL_DMA_Abort+0x230>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d04f      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a30      	ldr	r2, [pc, #192]	; (8003bac <HAL_DMA_Abort+0x234>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d04a      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2e      	ldr	r2, [pc, #184]	; (8003bb0 <HAL_DMA_Abort+0x238>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d045      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2d      	ldr	r2, [pc, #180]	; (8003bb4 <HAL_DMA_Abort+0x23c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d040      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2b      	ldr	r2, [pc, #172]	; (8003bb8 <HAL_DMA_Abort+0x240>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d03b      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <HAL_DMA_Abort+0x244>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d036      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a28      	ldr	r2, [pc, #160]	; (8003bc0 <HAL_DMA_Abort+0x248>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d031      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a27      	ldr	r2, [pc, #156]	; (8003bc4 <HAL_DMA_Abort+0x24c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d02c      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <HAL_DMA_Abort+0x250>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d027      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <HAL_DMA_Abort+0x254>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_DMA_Abort+0x258>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01d      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a21      	ldr	r2, [pc, #132]	; (8003bd4 <HAL_DMA_Abort+0x25c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_DMA_Abort+0x260>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1e      	ldr	r2, [pc, #120]	; (8003bdc <HAL_DMA_Abort+0x264>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1c      	ldr	r2, [pc, #112]	; (8003be0 <HAL_DMA_Abort+0x268>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1b      	ldr	r2, [pc, #108]	; (8003be4 <HAL_DMA_Abort+0x26c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_DMA_Abort+0x20e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <HAL_DMA_Abort+0x270>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d132      	bne.n	8003bec <HAL_DMA_Abort+0x274>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e031      	b.n	8003bee <HAL_DMA_Abort+0x276>
 8003b8a:	bf00      	nop
 8003b8c:	40020010 	.word	0x40020010
 8003b90:	40020028 	.word	0x40020028
 8003b94:	40020040 	.word	0x40020040
 8003b98:	40020058 	.word	0x40020058
 8003b9c:	40020070 	.word	0x40020070
 8003ba0:	40020088 	.word	0x40020088
 8003ba4:	400200a0 	.word	0x400200a0
 8003ba8:	400200b8 	.word	0x400200b8
 8003bac:	40020410 	.word	0x40020410
 8003bb0:	40020428 	.word	0x40020428
 8003bb4:	40020440 	.word	0x40020440
 8003bb8:	40020458 	.word	0x40020458
 8003bbc:	40020470 	.word	0x40020470
 8003bc0:	40020488 	.word	0x40020488
 8003bc4:	400204a0 	.word	0x400204a0
 8003bc8:	400204b8 	.word	0x400204b8
 8003bcc:	58025408 	.word	0x58025408
 8003bd0:	5802541c 	.word	0x5802541c
 8003bd4:	58025430 	.word	0x58025430
 8003bd8:	58025444 	.word	0x58025444
 8003bdc:	58025458 	.word	0x58025458
 8003be0:	5802546c 	.word	0x5802546c
 8003be4:	58025480 	.word	0x58025480
 8003be8:	58025494 	.word	0x58025494
 8003bec:	2300      	movs	r3, #0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6d      	ldr	r2, [pc, #436]	; (8003dbc <HAL_DMA_Abort+0x444>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d04a      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a6b      	ldr	r2, [pc, #428]	; (8003dc0 <HAL_DMA_Abort+0x448>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d045      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6a      	ldr	r2, [pc, #424]	; (8003dc4 <HAL_DMA_Abort+0x44c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d040      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a68      	ldr	r2, [pc, #416]	; (8003dc8 <HAL_DMA_Abort+0x450>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d03b      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a67      	ldr	r2, [pc, #412]	; (8003dcc <HAL_DMA_Abort+0x454>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d036      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a65      	ldr	r2, [pc, #404]	; (8003dd0 <HAL_DMA_Abort+0x458>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d031      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a64      	ldr	r2, [pc, #400]	; (8003dd4 <HAL_DMA_Abort+0x45c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d02c      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a62      	ldr	r2, [pc, #392]	; (8003dd8 <HAL_DMA_Abort+0x460>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d027      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a61      	ldr	r2, [pc, #388]	; (8003ddc <HAL_DMA_Abort+0x464>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d022      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a5f      	ldr	r2, [pc, #380]	; (8003de0 <HAL_DMA_Abort+0x468>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01d      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5e      	ldr	r2, [pc, #376]	; (8003de4 <HAL_DMA_Abort+0x46c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d018      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a5c      	ldr	r2, [pc, #368]	; (8003de8 <HAL_DMA_Abort+0x470>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5b      	ldr	r2, [pc, #364]	; (8003dec <HAL_DMA_Abort+0x474>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a59      	ldr	r2, [pc, #356]	; (8003df0 <HAL_DMA_Abort+0x478>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d009      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a58      	ldr	r2, [pc, #352]	; (8003df4 <HAL_DMA_Abort+0x47c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_DMA_Abort+0x32a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a56      	ldr	r2, [pc, #344]	; (8003df8 <HAL_DMA_Abort+0x480>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d108      	bne.n	8003cb4 <HAL_DMA_Abort+0x33c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e007      	b.n	8003cc4 <HAL_DMA_Abort+0x34c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003cc4:	e013      	b.n	8003cee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cc6:	f7fe ff99 	bl	8002bfc <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b05      	cmp	r3, #5
 8003cd2:	d90c      	bls.n	8003cee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e12d      	b.n	8003f4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e5      	bne.n	8003cc6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2f      	ldr	r2, [pc, #188]	; (8003dbc <HAL_DMA_Abort+0x444>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04a      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2d      	ldr	r2, [pc, #180]	; (8003dc0 <HAL_DMA_Abort+0x448>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d045      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2c      	ldr	r2, [pc, #176]	; (8003dc4 <HAL_DMA_Abort+0x44c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d040      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <HAL_DMA_Abort+0x450>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d03b      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a29      	ldr	r2, [pc, #164]	; (8003dcc <HAL_DMA_Abort+0x454>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d036      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <HAL_DMA_Abort+0x458>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d031      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <HAL_DMA_Abort+0x45c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d02c      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a24      	ldr	r2, [pc, #144]	; (8003dd8 <HAL_DMA_Abort+0x460>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d027      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <HAL_DMA_Abort+0x464>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a21      	ldr	r2, [pc, #132]	; (8003de0 <HAL_DMA_Abort+0x468>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01d      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <HAL_DMA_Abort+0x46c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d018      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <HAL_DMA_Abort+0x470>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1d      	ldr	r2, [pc, #116]	; (8003dec <HAL_DMA_Abort+0x474>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <HAL_DMA_Abort+0x478>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <HAL_DMA_Abort+0x47c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_DMA_Abort+0x422>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_DMA_Abort+0x480>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <HAL_DMA_Abort+0x426>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_DMA_Abort+0x428>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d02b      	beq.n	8003dfc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	223f      	movs	r2, #63	; 0x3f
 8003db4:	409a      	lsls	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	e02a      	b.n	8003e12 <HAL_DMA_Abort+0x49a>
 8003dbc:	40020010 	.word	0x40020010
 8003dc0:	40020028 	.word	0x40020028
 8003dc4:	40020040 	.word	0x40020040
 8003dc8:	40020058 	.word	0x40020058
 8003dcc:	40020070 	.word	0x40020070
 8003dd0:	40020088 	.word	0x40020088
 8003dd4:	400200a0 	.word	0x400200a0
 8003dd8:	400200b8 	.word	0x400200b8
 8003ddc:	40020410 	.word	0x40020410
 8003de0:	40020428 	.word	0x40020428
 8003de4:	40020440 	.word	0x40020440
 8003de8:	40020458 	.word	0x40020458
 8003dec:	40020470 	.word	0x40020470
 8003df0:	40020488 	.word	0x40020488
 8003df4:	400204a0 	.word	0x400204a0
 8003df8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a4f      	ldr	r2, [pc, #316]	; (8003f54 <HAL_DMA_Abort+0x5dc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d072      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a4d      	ldr	r2, [pc, #308]	; (8003f58 <HAL_DMA_Abort+0x5e0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d06d      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a4c      	ldr	r2, [pc, #304]	; (8003f5c <HAL_DMA_Abort+0x5e4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d068      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a4a      	ldr	r2, [pc, #296]	; (8003f60 <HAL_DMA_Abort+0x5e8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d063      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a49      	ldr	r2, [pc, #292]	; (8003f64 <HAL_DMA_Abort+0x5ec>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d05e      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a47      	ldr	r2, [pc, #284]	; (8003f68 <HAL_DMA_Abort+0x5f0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d059      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a46      	ldr	r2, [pc, #280]	; (8003f6c <HAL_DMA_Abort+0x5f4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d054      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a44      	ldr	r2, [pc, #272]	; (8003f70 <HAL_DMA_Abort+0x5f8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d04f      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a43      	ldr	r2, [pc, #268]	; (8003f74 <HAL_DMA_Abort+0x5fc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d04a      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a41      	ldr	r2, [pc, #260]	; (8003f78 <HAL_DMA_Abort+0x600>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d045      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a40      	ldr	r2, [pc, #256]	; (8003f7c <HAL_DMA_Abort+0x604>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d040      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a3e      	ldr	r2, [pc, #248]	; (8003f80 <HAL_DMA_Abort+0x608>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d03b      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <HAL_DMA_Abort+0x60c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d036      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <HAL_DMA_Abort+0x610>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d031      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <HAL_DMA_Abort+0x614>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d02c      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_DMA_Abort+0x618>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d027      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a37      	ldr	r2, [pc, #220]	; (8003f94 <HAL_DMA_Abort+0x61c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d022      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a35      	ldr	r2, [pc, #212]	; (8003f98 <HAL_DMA_Abort+0x620>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01d      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a34      	ldr	r2, [pc, #208]	; (8003f9c <HAL_DMA_Abort+0x624>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d018      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a32      	ldr	r2, [pc, #200]	; (8003fa0 <HAL_DMA_Abort+0x628>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a31      	ldr	r2, [pc, #196]	; (8003fa4 <HAL_DMA_Abort+0x62c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2f      	ldr	r2, [pc, #188]	; (8003fa8 <HAL_DMA_Abort+0x630>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <HAL_DMA_Abort+0x634>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_DMA_Abort+0x58a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <HAL_DMA_Abort+0x638>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d101      	bne.n	8003f06 <HAL_DMA_Abort+0x58e>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <HAL_DMA_Abort+0x590>
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d015      	beq.n	8003f38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00c      	beq.n	8003f38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40020010 	.word	0x40020010
 8003f58:	40020028 	.word	0x40020028
 8003f5c:	40020040 	.word	0x40020040
 8003f60:	40020058 	.word	0x40020058
 8003f64:	40020070 	.word	0x40020070
 8003f68:	40020088 	.word	0x40020088
 8003f6c:	400200a0 	.word	0x400200a0
 8003f70:	400200b8 	.word	0x400200b8
 8003f74:	40020410 	.word	0x40020410
 8003f78:	40020428 	.word	0x40020428
 8003f7c:	40020440 	.word	0x40020440
 8003f80:	40020458 	.word	0x40020458
 8003f84:	40020470 	.word	0x40020470
 8003f88:	40020488 	.word	0x40020488
 8003f8c:	400204a0 	.word	0x400204a0
 8003f90:	400204b8 	.word	0x400204b8
 8003f94:	58025408 	.word	0x58025408
 8003f98:	5802541c 	.word	0x5802541c
 8003f9c:	58025430 	.word	0x58025430
 8003fa0:	58025444 	.word	0x58025444
 8003fa4:	58025458 	.word	0x58025458
 8003fa8:	5802546c 	.word	0x5802546c
 8003fac:	58025480 	.word	0x58025480
 8003fb0:	58025494 	.word	0x58025494

08003fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e205      	b.n	80043d2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d004      	beq.n	8003fdc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e1fa      	b.n	80043d2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a8c      	ldr	r2, [pc, #560]	; (8004214 <HAL_DMA_Abort_IT+0x260>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d04a      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a8b      	ldr	r2, [pc, #556]	; (8004218 <HAL_DMA_Abort_IT+0x264>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d045      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a89      	ldr	r2, [pc, #548]	; (800421c <HAL_DMA_Abort_IT+0x268>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d040      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a88      	ldr	r2, [pc, #544]	; (8004220 <HAL_DMA_Abort_IT+0x26c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d03b      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a86      	ldr	r2, [pc, #536]	; (8004224 <HAL_DMA_Abort_IT+0x270>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d036      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a85      	ldr	r2, [pc, #532]	; (8004228 <HAL_DMA_Abort_IT+0x274>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d031      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a83      	ldr	r2, [pc, #524]	; (800422c <HAL_DMA_Abort_IT+0x278>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d02c      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a82      	ldr	r2, [pc, #520]	; (8004230 <HAL_DMA_Abort_IT+0x27c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d027      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a80      	ldr	r2, [pc, #512]	; (8004234 <HAL_DMA_Abort_IT+0x280>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d022      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a7f      	ldr	r2, [pc, #508]	; (8004238 <HAL_DMA_Abort_IT+0x284>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d01d      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a7d      	ldr	r2, [pc, #500]	; (800423c <HAL_DMA_Abort_IT+0x288>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a7c      	ldr	r2, [pc, #496]	; (8004240 <HAL_DMA_Abort_IT+0x28c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a7a      	ldr	r2, [pc, #488]	; (8004244 <HAL_DMA_Abort_IT+0x290>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a79      	ldr	r2, [pc, #484]	; (8004248 <HAL_DMA_Abort_IT+0x294>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a77      	ldr	r2, [pc, #476]	; (800424c <HAL_DMA_Abort_IT+0x298>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_DMA_Abort_IT+0xc8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a76      	ldr	r2, [pc, #472]	; (8004250 <HAL_DMA_Abort_IT+0x29c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <HAL_DMA_Abort_IT+0xcc>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_DMA_Abort_IT+0xce>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d065      	beq.n	8004152 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2204      	movs	r2, #4
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a60      	ldr	r2, [pc, #384]	; (8004214 <HAL_DMA_Abort_IT+0x260>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d04a      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a5e      	ldr	r2, [pc, #376]	; (8004218 <HAL_DMA_Abort_IT+0x264>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d045      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a5d      	ldr	r2, [pc, #372]	; (800421c <HAL_DMA_Abort_IT+0x268>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d040      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a5b      	ldr	r2, [pc, #364]	; (8004220 <HAL_DMA_Abort_IT+0x26c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d03b      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a5a      	ldr	r2, [pc, #360]	; (8004224 <HAL_DMA_Abort_IT+0x270>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d036      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_DMA_Abort_IT+0x274>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d031      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a57      	ldr	r2, [pc, #348]	; (800422c <HAL_DMA_Abort_IT+0x278>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d02c      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a55      	ldr	r2, [pc, #340]	; (8004230 <HAL_DMA_Abort_IT+0x27c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d027      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a54      	ldr	r2, [pc, #336]	; (8004234 <HAL_DMA_Abort_IT+0x280>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a52      	ldr	r2, [pc, #328]	; (8004238 <HAL_DMA_Abort_IT+0x284>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01d      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a51      	ldr	r2, [pc, #324]	; (800423c <HAL_DMA_Abort_IT+0x288>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a4f      	ldr	r2, [pc, #316]	; (8004240 <HAL_DMA_Abort_IT+0x28c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a4e      	ldr	r2, [pc, #312]	; (8004244 <HAL_DMA_Abort_IT+0x290>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a4c      	ldr	r2, [pc, #304]	; (8004248 <HAL_DMA_Abort_IT+0x294>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a4b      	ldr	r2, [pc, #300]	; (800424c <HAL_DMA_Abort_IT+0x298>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_DMA_Abort_IT+0x17a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a49      	ldr	r2, [pc, #292]	; (8004250 <HAL_DMA_Abort_IT+0x29c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d108      	bne.n	8004140 <HAL_DMA_Abort_IT+0x18c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e147      	b.n	80043d0 <HAL_DMA_Abort_IT+0x41c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e13e      	b.n	80043d0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 020e 	bic.w	r2, r2, #14
 8004160:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2b      	ldr	r2, [pc, #172]	; (8004214 <HAL_DMA_Abort_IT+0x260>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d04a      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a29      	ldr	r2, [pc, #164]	; (8004218 <HAL_DMA_Abort_IT+0x264>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d045      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a28      	ldr	r2, [pc, #160]	; (800421c <HAL_DMA_Abort_IT+0x268>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d040      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a26      	ldr	r2, [pc, #152]	; (8004220 <HAL_DMA_Abort_IT+0x26c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d03b      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a25      	ldr	r2, [pc, #148]	; (8004224 <HAL_DMA_Abort_IT+0x270>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d036      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a23      	ldr	r2, [pc, #140]	; (8004228 <HAL_DMA_Abort_IT+0x274>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d031      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a22      	ldr	r2, [pc, #136]	; (800422c <HAL_DMA_Abort_IT+0x278>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d02c      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a20      	ldr	r2, [pc, #128]	; (8004230 <HAL_DMA_Abort_IT+0x27c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d027      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1f      	ldr	r2, [pc, #124]	; (8004234 <HAL_DMA_Abort_IT+0x280>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d022      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <HAL_DMA_Abort_IT+0x284>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01d      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1c      	ldr	r2, [pc, #112]	; (800423c <HAL_DMA_Abort_IT+0x288>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d018      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1a      	ldr	r2, [pc, #104]	; (8004240 <HAL_DMA_Abort_IT+0x28c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_DMA_Abort_IT+0x290>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00e      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a17      	ldr	r2, [pc, #92]	; (8004248 <HAL_DMA_Abort_IT+0x294>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a16      	ldr	r2, [pc, #88]	; (800424c <HAL_DMA_Abort_IT+0x298>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d004      	beq.n	8004202 <HAL_DMA_Abort_IT+0x24e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a14      	ldr	r2, [pc, #80]	; (8004250 <HAL_DMA_Abort_IT+0x29c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d128      	bne.n	8004254 <HAL_DMA_Abort_IT+0x2a0>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e027      	b.n	8004264 <HAL_DMA_Abort_IT+0x2b0>
 8004214:	40020010 	.word	0x40020010
 8004218:	40020028 	.word	0x40020028
 800421c:	40020040 	.word	0x40020040
 8004220:	40020058 	.word	0x40020058
 8004224:	40020070 	.word	0x40020070
 8004228:	40020088 	.word	0x40020088
 800422c:	400200a0 	.word	0x400200a0
 8004230:	400200b8 	.word	0x400200b8
 8004234:	40020410 	.word	0x40020410
 8004238:	40020428 	.word	0x40020428
 800423c:	40020440 	.word	0x40020440
 8004240:	40020458 	.word	0x40020458
 8004244:	40020470 	.word	0x40020470
 8004248:	40020488 	.word	0x40020488
 800424c:	400204a0 	.word	0x400204a0
 8004250:	400204b8 	.word	0x400204b8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a5c      	ldr	r2, [pc, #368]	; (80043dc <HAL_DMA_Abort_IT+0x428>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d072      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a5b      	ldr	r2, [pc, #364]	; (80043e0 <HAL_DMA_Abort_IT+0x42c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d06d      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a59      	ldr	r2, [pc, #356]	; (80043e4 <HAL_DMA_Abort_IT+0x430>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d068      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a58      	ldr	r2, [pc, #352]	; (80043e8 <HAL_DMA_Abort_IT+0x434>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d063      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a56      	ldr	r2, [pc, #344]	; (80043ec <HAL_DMA_Abort_IT+0x438>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d05e      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a55      	ldr	r2, [pc, #340]	; (80043f0 <HAL_DMA_Abort_IT+0x43c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d059      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a53      	ldr	r2, [pc, #332]	; (80043f4 <HAL_DMA_Abort_IT+0x440>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d054      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a52      	ldr	r2, [pc, #328]	; (80043f8 <HAL_DMA_Abort_IT+0x444>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d04f      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a50      	ldr	r2, [pc, #320]	; (80043fc <HAL_DMA_Abort_IT+0x448>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d04a      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a4f      	ldr	r2, [pc, #316]	; (8004400 <HAL_DMA_Abort_IT+0x44c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d045      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a4d      	ldr	r2, [pc, #308]	; (8004404 <HAL_DMA_Abort_IT+0x450>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d040      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a4c      	ldr	r2, [pc, #304]	; (8004408 <HAL_DMA_Abort_IT+0x454>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d03b      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a4a      	ldr	r2, [pc, #296]	; (800440c <HAL_DMA_Abort_IT+0x458>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d036      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a49      	ldr	r2, [pc, #292]	; (8004410 <HAL_DMA_Abort_IT+0x45c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d031      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a47      	ldr	r2, [pc, #284]	; (8004414 <HAL_DMA_Abort_IT+0x460>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d02c      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a46      	ldr	r2, [pc, #280]	; (8004418 <HAL_DMA_Abort_IT+0x464>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d027      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a44      	ldr	r2, [pc, #272]	; (800441c <HAL_DMA_Abort_IT+0x468>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d022      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a43      	ldr	r2, [pc, #268]	; (8004420 <HAL_DMA_Abort_IT+0x46c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d01d      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a41      	ldr	r2, [pc, #260]	; (8004424 <HAL_DMA_Abort_IT+0x470>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d018      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a40      	ldr	r2, [pc, #256]	; (8004428 <HAL_DMA_Abort_IT+0x474>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d013      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3e      	ldr	r2, [pc, #248]	; (800442c <HAL_DMA_Abort_IT+0x478>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00e      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a3d      	ldr	r2, [pc, #244]	; (8004430 <HAL_DMA_Abort_IT+0x47c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d009      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3b      	ldr	r2, [pc, #236]	; (8004434 <HAL_DMA_Abort_IT+0x480>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <HAL_DMA_Abort_IT+0x3a0>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3a      	ldr	r2, [pc, #232]	; (8004438 <HAL_DMA_Abort_IT+0x484>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d101      	bne.n	8004358 <HAL_DMA_Abort_IT+0x3a4>
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <HAL_DMA_Abort_IT+0x3a6>
 8004358:	2300      	movs	r3, #0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d028      	beq.n	80043b0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800436c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	2201      	movs	r2, #1
 800437e:	409a      	lsls	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800438c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80043ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40020010 	.word	0x40020010
 80043e0:	40020028 	.word	0x40020028
 80043e4:	40020040 	.word	0x40020040
 80043e8:	40020058 	.word	0x40020058
 80043ec:	40020070 	.word	0x40020070
 80043f0:	40020088 	.word	0x40020088
 80043f4:	400200a0 	.word	0x400200a0
 80043f8:	400200b8 	.word	0x400200b8
 80043fc:	40020410 	.word	0x40020410
 8004400:	40020428 	.word	0x40020428
 8004404:	40020440 	.word	0x40020440
 8004408:	40020458 	.word	0x40020458
 800440c:	40020470 	.word	0x40020470
 8004410:	40020488 	.word	0x40020488
 8004414:	400204a0 	.word	0x400204a0
 8004418:	400204b8 	.word	0x400204b8
 800441c:	58025408 	.word	0x58025408
 8004420:	5802541c 	.word	0x5802541c
 8004424:	58025430 	.word	0x58025430
 8004428:	58025444 	.word	0x58025444
 800442c:	58025458 	.word	0x58025458
 8004430:	5802546c 	.word	0x5802546c
 8004434:	58025480 	.word	0x58025480
 8004438:	58025494 	.word	0x58025494

0800443c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004448:	4b67      	ldr	r3, [pc, #412]	; (80045e8 <HAL_DMA_IRQHandler+0x1ac>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a67      	ldr	r2, [pc, #412]	; (80045ec <HAL_DMA_IRQHandler+0x1b0>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	0a9b      	lsrs	r3, r3, #10
 8004454:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a5f      	ldr	r2, [pc, #380]	; (80045f0 <HAL_DMA_IRQHandler+0x1b4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d04a      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a5d      	ldr	r2, [pc, #372]	; (80045f4 <HAL_DMA_IRQHandler+0x1b8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d045      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a5c      	ldr	r2, [pc, #368]	; (80045f8 <HAL_DMA_IRQHandler+0x1bc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d040      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a5a      	ldr	r2, [pc, #360]	; (80045fc <HAL_DMA_IRQHandler+0x1c0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d03b      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a59      	ldr	r2, [pc, #356]	; (8004600 <HAL_DMA_IRQHandler+0x1c4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d036      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a57      	ldr	r2, [pc, #348]	; (8004604 <HAL_DMA_IRQHandler+0x1c8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d031      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a56      	ldr	r2, [pc, #344]	; (8004608 <HAL_DMA_IRQHandler+0x1cc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d02c      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a54      	ldr	r2, [pc, #336]	; (800460c <HAL_DMA_IRQHandler+0x1d0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d027      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a53      	ldr	r2, [pc, #332]	; (8004610 <HAL_DMA_IRQHandler+0x1d4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d022      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a51      	ldr	r2, [pc, #324]	; (8004614 <HAL_DMA_IRQHandler+0x1d8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01d      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a50      	ldr	r2, [pc, #320]	; (8004618 <HAL_DMA_IRQHandler+0x1dc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a4e      	ldr	r2, [pc, #312]	; (800461c <HAL_DMA_IRQHandler+0x1e0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4d      	ldr	r2, [pc, #308]	; (8004620 <HAL_DMA_IRQHandler+0x1e4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a4b      	ldr	r2, [pc, #300]	; (8004624 <HAL_DMA_IRQHandler+0x1e8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a4a      	ldr	r2, [pc, #296]	; (8004628 <HAL_DMA_IRQHandler+0x1ec>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_DMA_IRQHandler+0xd2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a48      	ldr	r2, [pc, #288]	; (800462c <HAL_DMA_IRQHandler+0x1f0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_DMA_IRQHandler+0xd6>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <HAL_DMA_IRQHandler+0xd8>
 8004512:	2300      	movs	r3, #0
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 842b 	beq.w	8004d70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	2208      	movs	r2, #8
 8004524:	409a      	lsls	r2, r3
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80a2 	beq.w	8004674 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a2e      	ldr	r2, [pc, #184]	; (80045f0 <HAL_DMA_IRQHandler+0x1b4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d04a      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a2d      	ldr	r2, [pc, #180]	; (80045f4 <HAL_DMA_IRQHandler+0x1b8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d045      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2b      	ldr	r2, [pc, #172]	; (80045f8 <HAL_DMA_IRQHandler+0x1bc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d040      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a2a      	ldr	r2, [pc, #168]	; (80045fc <HAL_DMA_IRQHandler+0x1c0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d03b      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a28      	ldr	r2, [pc, #160]	; (8004600 <HAL_DMA_IRQHandler+0x1c4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d036      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a27      	ldr	r2, [pc, #156]	; (8004604 <HAL_DMA_IRQHandler+0x1c8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d031      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a25      	ldr	r2, [pc, #148]	; (8004608 <HAL_DMA_IRQHandler+0x1cc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d02c      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a24      	ldr	r2, [pc, #144]	; (800460c <HAL_DMA_IRQHandler+0x1d0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d027      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a22      	ldr	r2, [pc, #136]	; (8004610 <HAL_DMA_IRQHandler+0x1d4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d022      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a21      	ldr	r2, [pc, #132]	; (8004614 <HAL_DMA_IRQHandler+0x1d8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d01d      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <HAL_DMA_IRQHandler+0x1dc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d018      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <HAL_DMA_IRQHandler+0x1e0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d013      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <HAL_DMA_IRQHandler+0x1e4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00e      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <HAL_DMA_IRQHandler+0x1e8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d009      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_DMA_IRQHandler+0x1ec>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x194>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_DMA_IRQHandler+0x1f0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d12f      	bne.n	8004630 <HAL_DMA_IRQHandler+0x1f4>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bf14      	ite	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	2300      	moveq	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	e02e      	b.n	8004644 <HAL_DMA_IRQHandler+0x208>
 80045e6:	bf00      	nop
 80045e8:	24000000 	.word	0x24000000
 80045ec:	1b4e81b5 	.word	0x1b4e81b5
 80045f0:	40020010 	.word	0x40020010
 80045f4:	40020028 	.word	0x40020028
 80045f8:	40020040 	.word	0x40020040
 80045fc:	40020058 	.word	0x40020058
 8004600:	40020070 	.word	0x40020070
 8004604:	40020088 	.word	0x40020088
 8004608:	400200a0 	.word	0x400200a0
 800460c:	400200b8 	.word	0x400200b8
 8004610:	40020410 	.word	0x40020410
 8004614:	40020428 	.word	0x40020428
 8004618:	40020440 	.word	0x40020440
 800461c:	40020458 	.word	0x40020458
 8004620:	40020470 	.word	0x40020470
 8004624:	40020488 	.word	0x40020488
 8004628:	400204a0 	.word	0x400204a0
 800462c:	400204b8 	.word	0x400204b8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	bf14      	ite	ne
 800463e:	2301      	movne	r3, #1
 8004640:	2300      	moveq	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d015      	beq.n	8004674 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0204 	bic.w	r2, r2, #4
 8004656:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	2208      	movs	r2, #8
 8004662:	409a      	lsls	r2, r3
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	f043 0201 	orr.w	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	fa22 f303 	lsr.w	r3, r2, r3
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d06e      	beq.n	8004768 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a69      	ldr	r2, [pc, #420]	; (8004834 <HAL_DMA_IRQHandler+0x3f8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d04a      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a67      	ldr	r2, [pc, #412]	; (8004838 <HAL_DMA_IRQHandler+0x3fc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d045      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a66      	ldr	r2, [pc, #408]	; (800483c <HAL_DMA_IRQHandler+0x400>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d040      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a64      	ldr	r2, [pc, #400]	; (8004840 <HAL_DMA_IRQHandler+0x404>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d03b      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a63      	ldr	r2, [pc, #396]	; (8004844 <HAL_DMA_IRQHandler+0x408>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d036      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a61      	ldr	r2, [pc, #388]	; (8004848 <HAL_DMA_IRQHandler+0x40c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d031      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a60      	ldr	r2, [pc, #384]	; (800484c <HAL_DMA_IRQHandler+0x410>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d02c      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a5e      	ldr	r2, [pc, #376]	; (8004850 <HAL_DMA_IRQHandler+0x414>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d027      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5d      	ldr	r2, [pc, #372]	; (8004854 <HAL_DMA_IRQHandler+0x418>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d022      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a5b      	ldr	r2, [pc, #364]	; (8004858 <HAL_DMA_IRQHandler+0x41c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01d      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5a      	ldr	r2, [pc, #360]	; (800485c <HAL_DMA_IRQHandler+0x420>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a58      	ldr	r2, [pc, #352]	; (8004860 <HAL_DMA_IRQHandler+0x424>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a57      	ldr	r2, [pc, #348]	; (8004864 <HAL_DMA_IRQHandler+0x428>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a55      	ldr	r2, [pc, #340]	; (8004868 <HAL_DMA_IRQHandler+0x42c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a54      	ldr	r2, [pc, #336]	; (800486c <HAL_DMA_IRQHandler+0x430>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_DMA_IRQHandler+0x2ee>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a52      	ldr	r2, [pc, #328]	; (8004870 <HAL_DMA_IRQHandler+0x434>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10a      	bne.n	8004740 <HAL_DMA_IRQHandler+0x304>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	e003      	b.n	8004748 <HAL_DMA_IRQHandler+0x30c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2201      	movs	r2, #1
 8004756:	409a      	lsls	r2, r3
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004760:	f043 0202 	orr.w	r2, r3, #2
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	2204      	movs	r2, #4
 8004772:	409a      	lsls	r2, r3
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 808f 	beq.w	800489c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a2c      	ldr	r2, [pc, #176]	; (8004834 <HAL_DMA_IRQHandler+0x3f8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d04a      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a2a      	ldr	r2, [pc, #168]	; (8004838 <HAL_DMA_IRQHandler+0x3fc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d045      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a29      	ldr	r2, [pc, #164]	; (800483c <HAL_DMA_IRQHandler+0x400>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d040      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a27      	ldr	r2, [pc, #156]	; (8004840 <HAL_DMA_IRQHandler+0x404>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d03b      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a26      	ldr	r2, [pc, #152]	; (8004844 <HAL_DMA_IRQHandler+0x408>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d036      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a24      	ldr	r2, [pc, #144]	; (8004848 <HAL_DMA_IRQHandler+0x40c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d031      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a23      	ldr	r2, [pc, #140]	; (800484c <HAL_DMA_IRQHandler+0x410>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d02c      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a21      	ldr	r2, [pc, #132]	; (8004850 <HAL_DMA_IRQHandler+0x414>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d027      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a20      	ldr	r2, [pc, #128]	; (8004854 <HAL_DMA_IRQHandler+0x418>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d022      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <HAL_DMA_IRQHandler+0x41c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01d      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1d      	ldr	r2, [pc, #116]	; (800485c <HAL_DMA_IRQHandler+0x420>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d018      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <HAL_DMA_IRQHandler+0x424>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1a      	ldr	r2, [pc, #104]	; (8004864 <HAL_DMA_IRQHandler+0x428>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00e      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a18      	ldr	r2, [pc, #96]	; (8004868 <HAL_DMA_IRQHandler+0x42c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d009      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a17      	ldr	r2, [pc, #92]	; (800486c <HAL_DMA_IRQHandler+0x430>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d004      	beq.n	800481e <HAL_DMA_IRQHandler+0x3e2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a15      	ldr	r2, [pc, #84]	; (8004870 <HAL_DMA_IRQHandler+0x434>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d12a      	bne.n	8004874 <HAL_DMA_IRQHandler+0x438>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e023      	b.n	800487c <HAL_DMA_IRQHandler+0x440>
 8004834:	40020010 	.word	0x40020010
 8004838:	40020028 	.word	0x40020028
 800483c:	40020040 	.word	0x40020040
 8004840:	40020058 	.word	0x40020058
 8004844:	40020070 	.word	0x40020070
 8004848:	40020088 	.word	0x40020088
 800484c:	400200a0 	.word	0x400200a0
 8004850:	400200b8 	.word	0x400200b8
 8004854:	40020410 	.word	0x40020410
 8004858:	40020428 	.word	0x40020428
 800485c:	40020440 	.word	0x40020440
 8004860:	40020458 	.word	0x40020458
 8004864:	40020470 	.word	0x40020470
 8004868:	40020488 	.word	0x40020488
 800486c:	400204a0 	.word	0x400204a0
 8004870:	400204b8 	.word	0x400204b8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	2204      	movs	r2, #4
 800488a:	409a      	lsls	r2, r3
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f043 0204 	orr.w	r2, r3, #4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	2210      	movs	r2, #16
 80048a6:	409a      	lsls	r2, r3
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a6 	beq.w	80049fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a85      	ldr	r2, [pc, #532]	; (8004acc <HAL_DMA_IRQHandler+0x690>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d04a      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a83      	ldr	r2, [pc, #524]	; (8004ad0 <HAL_DMA_IRQHandler+0x694>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d045      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a82      	ldr	r2, [pc, #520]	; (8004ad4 <HAL_DMA_IRQHandler+0x698>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d040      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a80      	ldr	r2, [pc, #512]	; (8004ad8 <HAL_DMA_IRQHandler+0x69c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d03b      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7f      	ldr	r2, [pc, #508]	; (8004adc <HAL_DMA_IRQHandler+0x6a0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d036      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a7d      	ldr	r2, [pc, #500]	; (8004ae0 <HAL_DMA_IRQHandler+0x6a4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d031      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a7c      	ldr	r2, [pc, #496]	; (8004ae4 <HAL_DMA_IRQHandler+0x6a8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d02c      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a7a      	ldr	r2, [pc, #488]	; (8004ae8 <HAL_DMA_IRQHandler+0x6ac>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d027      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a79      	ldr	r2, [pc, #484]	; (8004aec <HAL_DMA_IRQHandler+0x6b0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d022      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a77      	ldr	r2, [pc, #476]	; (8004af0 <HAL_DMA_IRQHandler+0x6b4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01d      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a76      	ldr	r2, [pc, #472]	; (8004af4 <HAL_DMA_IRQHandler+0x6b8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d018      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a74      	ldr	r2, [pc, #464]	; (8004af8 <HAL_DMA_IRQHandler+0x6bc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a73      	ldr	r2, [pc, #460]	; (8004afc <HAL_DMA_IRQHandler+0x6c0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a71      	ldr	r2, [pc, #452]	; (8004b00 <HAL_DMA_IRQHandler+0x6c4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a70      	ldr	r2, [pc, #448]	; (8004b04 <HAL_DMA_IRQHandler+0x6c8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_DMA_IRQHandler+0x516>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a6e      	ldr	r2, [pc, #440]	; (8004b08 <HAL_DMA_IRQHandler+0x6cc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d10a      	bne.n	8004968 <HAL_DMA_IRQHandler+0x52c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e009      	b.n	800497c <HAL_DMA_IRQHandler+0x540>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d03e      	beq.n	80049fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	2210      	movs	r2, #16
 800498a:	409a      	lsls	r2, r3
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d018      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d108      	bne.n	80049be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d024      	beq.n	80049fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	4798      	blx	r3
 80049bc:	e01f      	b.n	80049fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01b      	beq.n	80049fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
 80049ce:	e016      	b.n	80049fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d107      	bne.n	80049ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0208 	bic.w	r2, r2, #8
 80049ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	2220      	movs	r2, #32
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 8110 	beq.w	8004c34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <HAL_DMA_IRQHandler+0x690>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d04a      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2b      	ldr	r2, [pc, #172]	; (8004ad0 <HAL_DMA_IRQHandler+0x694>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d045      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <HAL_DMA_IRQHandler+0x698>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d040      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a28      	ldr	r2, [pc, #160]	; (8004ad8 <HAL_DMA_IRQHandler+0x69c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d03b      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a26      	ldr	r2, [pc, #152]	; (8004adc <HAL_DMA_IRQHandler+0x6a0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d036      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <HAL_DMA_IRQHandler+0x6a4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d031      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a23      	ldr	r2, [pc, #140]	; (8004ae4 <HAL_DMA_IRQHandler+0x6a8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d02c      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <HAL_DMA_IRQHandler+0x6ac>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d027      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a20      	ldr	r2, [pc, #128]	; (8004aec <HAL_DMA_IRQHandler+0x6b0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d022      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <HAL_DMA_IRQHandler+0x6b4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d01d      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <HAL_DMA_IRQHandler+0x6b8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d018      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <HAL_DMA_IRQHandler+0x6bc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <HAL_DMA_IRQHandler+0x6c0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00e      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <HAL_DMA_IRQHandler+0x6c4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <HAL_DMA_IRQHandler+0x6c8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x678>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <HAL_DMA_IRQHandler+0x6cc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d12b      	bne.n	8004b0c <HAL_DMA_IRQHandler+0x6d0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf14      	ite	ne
 8004ac2:	2301      	movne	r3, #1
 8004ac4:	2300      	moveq	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	e02a      	b.n	8004b20 <HAL_DMA_IRQHandler+0x6e4>
 8004aca:	bf00      	nop
 8004acc:	40020010 	.word	0x40020010
 8004ad0:	40020028 	.word	0x40020028
 8004ad4:	40020040 	.word	0x40020040
 8004ad8:	40020058 	.word	0x40020058
 8004adc:	40020070 	.word	0x40020070
 8004ae0:	40020088 	.word	0x40020088
 8004ae4:	400200a0 	.word	0x400200a0
 8004ae8:	400200b8 	.word	0x400200b8
 8004aec:	40020410 	.word	0x40020410
 8004af0:	40020428 	.word	0x40020428
 8004af4:	40020440 	.word	0x40020440
 8004af8:	40020458 	.word	0x40020458
 8004afc:	40020470 	.word	0x40020470
 8004b00:	40020488 	.word	0x40020488
 8004b04:	400204a0 	.word	0x400204a0
 8004b08:	400204b8 	.word	0x400204b8
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bf14      	ite	ne
 8004b1a:	2301      	movne	r3, #1
 8004b1c:	2300      	moveq	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8087 	beq.w	8004c34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2220      	movs	r2, #32
 8004b30:	409a      	lsls	r2, r3
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d139      	bne.n	8004bb6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0216 	bic.w	r2, r2, #22
 8004b50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <HAL_DMA_IRQHandler+0x736>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0208 	bic.w	r2, r2, #8
 8004b80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	223f      	movs	r2, #63	; 0x3f
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 834a 	beq.w	8005240 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
          }
          return;
 8004bb4:	e344      	b.n	8005240 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d018      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d108      	bne.n	8004be4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d02c      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
 8004be2:	e027      	b.n	8004c34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d023      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	4798      	blx	r3
 8004bf4:	e01e      	b.n	8004c34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10f      	bne.n	8004c24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0210 	bic.w	r2, r2, #16
 8004c12:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8306 	beq.w	800524a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 8088 	beq.w	8004d5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a7a      	ldr	r2, [pc, #488]	; (8004e44 <HAL_DMA_IRQHandler+0xa08>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d04a      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a79      	ldr	r2, [pc, #484]	; (8004e48 <HAL_DMA_IRQHandler+0xa0c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d045      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a77      	ldr	r2, [pc, #476]	; (8004e4c <HAL_DMA_IRQHandler+0xa10>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d040      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a76      	ldr	r2, [pc, #472]	; (8004e50 <HAL_DMA_IRQHandler+0xa14>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d03b      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a74      	ldr	r2, [pc, #464]	; (8004e54 <HAL_DMA_IRQHandler+0xa18>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d036      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a73      	ldr	r2, [pc, #460]	; (8004e58 <HAL_DMA_IRQHandler+0xa1c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d031      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a71      	ldr	r2, [pc, #452]	; (8004e5c <HAL_DMA_IRQHandler+0xa20>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d02c      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a70      	ldr	r2, [pc, #448]	; (8004e60 <HAL_DMA_IRQHandler+0xa24>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d027      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a6e      	ldr	r2, [pc, #440]	; (8004e64 <HAL_DMA_IRQHandler+0xa28>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d022      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a6d      	ldr	r2, [pc, #436]	; (8004e68 <HAL_DMA_IRQHandler+0xa2c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a6b      	ldr	r2, [pc, #428]	; (8004e6c <HAL_DMA_IRQHandler+0xa30>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d018      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a6a      	ldr	r2, [pc, #424]	; (8004e70 <HAL_DMA_IRQHandler+0xa34>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a68      	ldr	r2, [pc, #416]	; (8004e74 <HAL_DMA_IRQHandler+0xa38>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a67      	ldr	r2, [pc, #412]	; (8004e78 <HAL_DMA_IRQHandler+0xa3c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a65      	ldr	r2, [pc, #404]	; (8004e7c <HAL_DMA_IRQHandler+0xa40>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x8b8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a64      	ldr	r2, [pc, #400]	; (8004e80 <HAL_DMA_IRQHandler+0xa44>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d108      	bne.n	8004d06 <HAL_DMA_IRQHandler+0x8ca>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0201 	bic.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e007      	b.n	8004d16 <HAL_DMA_IRQHandler+0x8da>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0201 	bic.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d307      	bcc.n	8004d32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f2      	bne.n	8004d16 <HAL_DMA_IRQHandler+0x8da>
 8004d30:	e000      	b.n	8004d34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004d32:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2203      	movs	r2, #3
 8004d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004d4a:	e003      	b.n	8004d54 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8272 	beq.w	800524a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4798      	blx	r3
 8004d6e:	e26c      	b.n	800524a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a43      	ldr	r2, [pc, #268]	; (8004e84 <HAL_DMA_IRQHandler+0xa48>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d022      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x984>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a42      	ldr	r2, [pc, #264]	; (8004e88 <HAL_DMA_IRQHandler+0xa4c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d01d      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x984>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a40      	ldr	r2, [pc, #256]	; (8004e8c <HAL_DMA_IRQHandler+0xa50>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d018      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x984>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a3f      	ldr	r2, [pc, #252]	; (8004e90 <HAL_DMA_IRQHandler+0xa54>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x984>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a3d      	ldr	r2, [pc, #244]	; (8004e94 <HAL_DMA_IRQHandler+0xa58>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00e      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x984>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a3c      	ldr	r2, [pc, #240]	; (8004e98 <HAL_DMA_IRQHandler+0xa5c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d009      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x984>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a3a      	ldr	r2, [pc, #232]	; (8004e9c <HAL_DMA_IRQHandler+0xa60>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x984>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a39      	ldr	r2, [pc, #228]	; (8004ea0 <HAL_DMA_IRQHandler+0xa64>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d101      	bne.n	8004dc4 <HAL_DMA_IRQHandler+0x988>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <HAL_DMA_IRQHandler+0x98a>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 823f 	beq.w	800524a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	2204      	movs	r2, #4
 8004dde:	409a      	lsls	r2, r3
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80cd 	beq.w	8004f84 <HAL_DMA_IRQHandler+0xb48>
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 80c7 	beq.w	8004f84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	2204      	movs	r2, #4
 8004e00:	409a      	lsls	r2, r3
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d049      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8210 	beq.w	8005244 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e2c:	e20a      	b.n	8005244 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8206 	beq.w	8005244 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e40:	e200      	b.n	8005244 <HAL_DMA_IRQHandler+0xe08>
 8004e42:	bf00      	nop
 8004e44:	40020010 	.word	0x40020010
 8004e48:	40020028 	.word	0x40020028
 8004e4c:	40020040 	.word	0x40020040
 8004e50:	40020058 	.word	0x40020058
 8004e54:	40020070 	.word	0x40020070
 8004e58:	40020088 	.word	0x40020088
 8004e5c:	400200a0 	.word	0x400200a0
 8004e60:	400200b8 	.word	0x400200b8
 8004e64:	40020410 	.word	0x40020410
 8004e68:	40020428 	.word	0x40020428
 8004e6c:	40020440 	.word	0x40020440
 8004e70:	40020458 	.word	0x40020458
 8004e74:	40020470 	.word	0x40020470
 8004e78:	40020488 	.word	0x40020488
 8004e7c:	400204a0 	.word	0x400204a0
 8004e80:	400204b8 	.word	0x400204b8
 8004e84:	58025408 	.word	0x58025408
 8004e88:	5802541c 	.word	0x5802541c
 8004e8c:	58025430 	.word	0x58025430
 8004e90:	58025444 	.word	0x58025444
 8004e94:	58025458 	.word	0x58025458
 8004e98:	5802546c 	.word	0x5802546c
 8004e9c:	58025480 	.word	0x58025480
 8004ea0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d160      	bne.n	8004f70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a8c      	ldr	r2, [pc, #560]	; (80050e4 <HAL_DMA_IRQHandler+0xca8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d04a      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a8a      	ldr	r2, [pc, #552]	; (80050e8 <HAL_DMA_IRQHandler+0xcac>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d045      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a89      	ldr	r2, [pc, #548]	; (80050ec <HAL_DMA_IRQHandler+0xcb0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d040      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a87      	ldr	r2, [pc, #540]	; (80050f0 <HAL_DMA_IRQHandler+0xcb4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d03b      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a86      	ldr	r2, [pc, #536]	; (80050f4 <HAL_DMA_IRQHandler+0xcb8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d036      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a84      	ldr	r2, [pc, #528]	; (80050f8 <HAL_DMA_IRQHandler+0xcbc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d031      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a83      	ldr	r2, [pc, #524]	; (80050fc <HAL_DMA_IRQHandler+0xcc0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d02c      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a81      	ldr	r2, [pc, #516]	; (8005100 <HAL_DMA_IRQHandler+0xcc4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d027      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a80      	ldr	r2, [pc, #512]	; (8005104 <HAL_DMA_IRQHandler+0xcc8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d022      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a7e      	ldr	r2, [pc, #504]	; (8005108 <HAL_DMA_IRQHandler+0xccc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01d      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a7d      	ldr	r2, [pc, #500]	; (800510c <HAL_DMA_IRQHandler+0xcd0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a7b      	ldr	r2, [pc, #492]	; (8005110 <HAL_DMA_IRQHandler+0xcd4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a7a      	ldr	r2, [pc, #488]	; (8005114 <HAL_DMA_IRQHandler+0xcd8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a78      	ldr	r2, [pc, #480]	; (8005118 <HAL_DMA_IRQHandler+0xcdc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a77      	ldr	r2, [pc, #476]	; (800511c <HAL_DMA_IRQHandler+0xce0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xb12>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a75      	ldr	r2, [pc, #468]	; (8005120 <HAL_DMA_IRQHandler+0xce4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d108      	bne.n	8004f60 <HAL_DMA_IRQHandler+0xb24>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0208 	bic.w	r2, r2, #8
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e007      	b.n	8004f70 <HAL_DMA_IRQHandler+0xb34>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8165 	beq.w	8005244 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f82:	e15f      	b.n	8005244 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80c5 	beq.w	8005124 <HAL_DMA_IRQHandler+0xce8>
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80bf 	beq.w	8005124 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	2202      	movs	r2, #2
 8004fb0:	409a      	lsls	r2, r3
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d018      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 813a 	beq.w	8005248 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fdc:	e134      	b.n	8005248 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8130 	beq.w	8005248 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ff0:	e12a      	b.n	8005248 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d168      	bne.n	80050ce <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a38      	ldr	r2, [pc, #224]	; (80050e4 <HAL_DMA_IRQHandler+0xca8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d04a      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a37      	ldr	r2, [pc, #220]	; (80050e8 <HAL_DMA_IRQHandler+0xcac>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d045      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a35      	ldr	r2, [pc, #212]	; (80050ec <HAL_DMA_IRQHandler+0xcb0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d040      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a34      	ldr	r2, [pc, #208]	; (80050f0 <HAL_DMA_IRQHandler+0xcb4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d03b      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a32      	ldr	r2, [pc, #200]	; (80050f4 <HAL_DMA_IRQHandler+0xcb8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d036      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a31      	ldr	r2, [pc, #196]	; (80050f8 <HAL_DMA_IRQHandler+0xcbc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d031      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2f      	ldr	r2, [pc, #188]	; (80050fc <HAL_DMA_IRQHandler+0xcc0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d02c      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a2e      	ldr	r2, [pc, #184]	; (8005100 <HAL_DMA_IRQHandler+0xcc4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d027      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <HAL_DMA_IRQHandler+0xcc8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2b      	ldr	r2, [pc, #172]	; (8005108 <HAL_DMA_IRQHandler+0xccc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d01d      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a29      	ldr	r2, [pc, #164]	; (800510c <HAL_DMA_IRQHandler+0xcd0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a28      	ldr	r2, [pc, #160]	; (8005110 <HAL_DMA_IRQHandler+0xcd4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a26      	ldr	r2, [pc, #152]	; (8005114 <HAL_DMA_IRQHandler+0xcd8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a25      	ldr	r2, [pc, #148]	; (8005118 <HAL_DMA_IRQHandler+0xcdc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a23      	ldr	r2, [pc, #140]	; (800511c <HAL_DMA_IRQHandler+0xce0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_DMA_IRQHandler+0xc60>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a22      	ldr	r2, [pc, #136]	; (8005120 <HAL_DMA_IRQHandler+0xce4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d108      	bne.n	80050ae <HAL_DMA_IRQHandler+0xc72>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0214 	bic.w	r2, r2, #20
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e007      	b.n	80050be <HAL_DMA_IRQHandler+0xc82>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 020a 	bic.w	r2, r2, #10
 80050bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 80b8 	beq.w	8005248 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050e0:	e0b2      	b.n	8005248 <HAL_DMA_IRQHandler+0xe0c>
 80050e2:	bf00      	nop
 80050e4:	40020010 	.word	0x40020010
 80050e8:	40020028 	.word	0x40020028
 80050ec:	40020040 	.word	0x40020040
 80050f0:	40020058 	.word	0x40020058
 80050f4:	40020070 	.word	0x40020070
 80050f8:	40020088 	.word	0x40020088
 80050fc:	400200a0 	.word	0x400200a0
 8005100:	400200b8 	.word	0x400200b8
 8005104:	40020410 	.word	0x40020410
 8005108:	40020428 	.word	0x40020428
 800510c:	40020440 	.word	0x40020440
 8005110:	40020458 	.word	0x40020458
 8005114:	40020470 	.word	0x40020470
 8005118:	40020488 	.word	0x40020488
 800511c:	400204a0 	.word	0x400204a0
 8005120:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2208      	movs	r2, #8
 800512e:	409a      	lsls	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8088 	beq.w	800524a <HAL_DMA_IRQHandler+0xe0e>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 8082 	beq.w	800524a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a41      	ldr	r2, [pc, #260]	; (8005250 <HAL_DMA_IRQHandler+0xe14>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d04a      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a3f      	ldr	r2, [pc, #252]	; (8005254 <HAL_DMA_IRQHandler+0xe18>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d045      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a3e      	ldr	r2, [pc, #248]	; (8005258 <HAL_DMA_IRQHandler+0xe1c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d040      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3c      	ldr	r2, [pc, #240]	; (800525c <HAL_DMA_IRQHandler+0xe20>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d03b      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3b      	ldr	r2, [pc, #236]	; (8005260 <HAL_DMA_IRQHandler+0xe24>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d036      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a39      	ldr	r2, [pc, #228]	; (8005264 <HAL_DMA_IRQHandler+0xe28>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d031      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a38      	ldr	r2, [pc, #224]	; (8005268 <HAL_DMA_IRQHandler+0xe2c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d02c      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a36      	ldr	r2, [pc, #216]	; (800526c <HAL_DMA_IRQHandler+0xe30>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d027      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a35      	ldr	r2, [pc, #212]	; (8005270 <HAL_DMA_IRQHandler+0xe34>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d022      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a33      	ldr	r2, [pc, #204]	; (8005274 <HAL_DMA_IRQHandler+0xe38>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01d      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a32      	ldr	r2, [pc, #200]	; (8005278 <HAL_DMA_IRQHandler+0xe3c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d018      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a30      	ldr	r2, [pc, #192]	; (800527c <HAL_DMA_IRQHandler+0xe40>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a2f      	ldr	r2, [pc, #188]	; (8005280 <HAL_DMA_IRQHandler+0xe44>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00e      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2d      	ldr	r2, [pc, #180]	; (8005284 <HAL_DMA_IRQHandler+0xe48>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2c      	ldr	r2, [pc, #176]	; (8005288 <HAL_DMA_IRQHandler+0xe4c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xdaa>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a2a      	ldr	r2, [pc, #168]	; (800528c <HAL_DMA_IRQHandler+0xe50>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d108      	bne.n	80051f8 <HAL_DMA_IRQHandler+0xdbc>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 021c 	bic.w	r2, r2, #28
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e007      	b.n	8005208 <HAL_DMA_IRQHandler+0xdcc>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 020e 	bic.w	r2, r2, #14
 8005206:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2201      	movs	r2, #1
 8005212:	409a      	lsls	r2, r3
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	4798      	blx	r3
 800523e:	e004      	b.n	800524a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005240:	bf00      	nop
 8005242:	e002      	b.n	800524a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005244:	bf00      	nop
 8005246:	e000      	b.n	800524a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005248:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800524a:	3728      	adds	r7, #40	; 0x28
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40020010 	.word	0x40020010
 8005254:	40020028 	.word	0x40020028
 8005258:	40020040 	.word	0x40020040
 800525c:	40020058 	.word	0x40020058
 8005260:	40020070 	.word	0x40020070
 8005264:	40020088 	.word	0x40020088
 8005268:	400200a0 	.word	0x400200a0
 800526c:	400200b8 	.word	0x400200b8
 8005270:	40020410 	.word	0x40020410
 8005274:	40020428 	.word	0x40020428
 8005278:	40020440 	.word	0x40020440
 800527c:	40020458 	.word	0x40020458
 8005280:	40020470 	.word	0x40020470
 8005284:	40020488 	.word	0x40020488
 8005288:	400204a0 	.word	0x400204a0
 800528c:	400204b8 	.word	0x400204b8

08005290 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a84      	ldr	r2, [pc, #528]	; (80054d8 <DMA_SetConfig+0x230>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d072      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a82      	ldr	r2, [pc, #520]	; (80054dc <DMA_SetConfig+0x234>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d06d      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a81      	ldr	r2, [pc, #516]	; (80054e0 <DMA_SetConfig+0x238>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d068      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a7f      	ldr	r2, [pc, #508]	; (80054e4 <DMA_SetConfig+0x23c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d063      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a7e      	ldr	r2, [pc, #504]	; (80054e8 <DMA_SetConfig+0x240>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d05e      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a7c      	ldr	r2, [pc, #496]	; (80054ec <DMA_SetConfig+0x244>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d059      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a7b      	ldr	r2, [pc, #492]	; (80054f0 <DMA_SetConfig+0x248>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d054      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a79      	ldr	r2, [pc, #484]	; (80054f4 <DMA_SetConfig+0x24c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d04f      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a78      	ldr	r2, [pc, #480]	; (80054f8 <DMA_SetConfig+0x250>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d04a      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a76      	ldr	r2, [pc, #472]	; (80054fc <DMA_SetConfig+0x254>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d045      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a75      	ldr	r2, [pc, #468]	; (8005500 <DMA_SetConfig+0x258>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d040      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a73      	ldr	r2, [pc, #460]	; (8005504 <DMA_SetConfig+0x25c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d03b      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a72      	ldr	r2, [pc, #456]	; (8005508 <DMA_SetConfig+0x260>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d036      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a70      	ldr	r2, [pc, #448]	; (800550c <DMA_SetConfig+0x264>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d031      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a6f      	ldr	r2, [pc, #444]	; (8005510 <DMA_SetConfig+0x268>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d02c      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a6d      	ldr	r2, [pc, #436]	; (8005514 <DMA_SetConfig+0x26c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d027      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6c      	ldr	r2, [pc, #432]	; (8005518 <DMA_SetConfig+0x270>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d022      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a6a      	ldr	r2, [pc, #424]	; (800551c <DMA_SetConfig+0x274>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d01d      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a69      	ldr	r2, [pc, #420]	; (8005520 <DMA_SetConfig+0x278>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d018      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a67      	ldr	r2, [pc, #412]	; (8005524 <DMA_SetConfig+0x27c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a66      	ldr	r2, [pc, #408]	; (8005528 <DMA_SetConfig+0x280>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00e      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a64      	ldr	r2, [pc, #400]	; (800552c <DMA_SetConfig+0x284>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d009      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a63      	ldr	r2, [pc, #396]	; (8005530 <DMA_SetConfig+0x288>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d004      	beq.n	80053b2 <DMA_SetConfig+0x10a>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a61      	ldr	r2, [pc, #388]	; (8005534 <DMA_SetConfig+0x28c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d101      	bne.n	80053b6 <DMA_SetConfig+0x10e>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <DMA_SetConfig+0x110>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00d      	beq.n	80053d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a3e      	ldr	r2, [pc, #248]	; (80054d8 <DMA_SetConfig+0x230>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d04a      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a3d      	ldr	r2, [pc, #244]	; (80054dc <DMA_SetConfig+0x234>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d045      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3b      	ldr	r2, [pc, #236]	; (80054e0 <DMA_SetConfig+0x238>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d040      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3a      	ldr	r2, [pc, #232]	; (80054e4 <DMA_SetConfig+0x23c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d03b      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a38      	ldr	r2, [pc, #224]	; (80054e8 <DMA_SetConfig+0x240>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d036      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a37      	ldr	r2, [pc, #220]	; (80054ec <DMA_SetConfig+0x244>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d031      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a35      	ldr	r2, [pc, #212]	; (80054f0 <DMA_SetConfig+0x248>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d02c      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a34      	ldr	r2, [pc, #208]	; (80054f4 <DMA_SetConfig+0x24c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d027      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a32      	ldr	r2, [pc, #200]	; (80054f8 <DMA_SetConfig+0x250>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d022      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a31      	ldr	r2, [pc, #196]	; (80054fc <DMA_SetConfig+0x254>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d01d      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2f      	ldr	r2, [pc, #188]	; (8005500 <DMA_SetConfig+0x258>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d018      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2e      	ldr	r2, [pc, #184]	; (8005504 <DMA_SetConfig+0x25c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <DMA_SetConfig+0x260>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2b      	ldr	r2, [pc, #172]	; (800550c <DMA_SetConfig+0x264>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a29      	ldr	r2, [pc, #164]	; (8005510 <DMA_SetConfig+0x268>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <DMA_SetConfig+0x1d0>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a28      	ldr	r2, [pc, #160]	; (8005514 <DMA_SetConfig+0x26c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d101      	bne.n	800547c <DMA_SetConfig+0x1d4>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <DMA_SetConfig+0x1d6>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d05a      	beq.n	8005538 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	223f      	movs	r2, #63	; 0x3f
 800548c:	409a      	lsls	r2, r3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b40      	cmp	r3, #64	; 0x40
 80054b0:	d108      	bne.n	80054c4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054c2:	e087      	b.n	80055d4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]
}
 80054d4:	e07e      	b.n	80055d4 <DMA_SetConfig+0x32c>
 80054d6:	bf00      	nop
 80054d8:	40020010 	.word	0x40020010
 80054dc:	40020028 	.word	0x40020028
 80054e0:	40020040 	.word	0x40020040
 80054e4:	40020058 	.word	0x40020058
 80054e8:	40020070 	.word	0x40020070
 80054ec:	40020088 	.word	0x40020088
 80054f0:	400200a0 	.word	0x400200a0
 80054f4:	400200b8 	.word	0x400200b8
 80054f8:	40020410 	.word	0x40020410
 80054fc:	40020428 	.word	0x40020428
 8005500:	40020440 	.word	0x40020440
 8005504:	40020458 	.word	0x40020458
 8005508:	40020470 	.word	0x40020470
 800550c:	40020488 	.word	0x40020488
 8005510:	400204a0 	.word	0x400204a0
 8005514:	400204b8 	.word	0x400204b8
 8005518:	58025408 	.word	0x58025408
 800551c:	5802541c 	.word	0x5802541c
 8005520:	58025430 	.word	0x58025430
 8005524:	58025444 	.word	0x58025444
 8005528:	58025458 	.word	0x58025458
 800552c:	5802546c 	.word	0x5802546c
 8005530:	58025480 	.word	0x58025480
 8005534:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <DMA_SetConfig+0x338>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d022      	beq.n	8005588 <DMA_SetConfig+0x2e0>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a27      	ldr	r2, [pc, #156]	; (80055e4 <DMA_SetConfig+0x33c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d01d      	beq.n	8005588 <DMA_SetConfig+0x2e0>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <DMA_SetConfig+0x340>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d018      	beq.n	8005588 <DMA_SetConfig+0x2e0>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a24      	ldr	r2, [pc, #144]	; (80055ec <DMA_SetConfig+0x344>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d013      	beq.n	8005588 <DMA_SetConfig+0x2e0>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a22      	ldr	r2, [pc, #136]	; (80055f0 <DMA_SetConfig+0x348>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00e      	beq.n	8005588 <DMA_SetConfig+0x2e0>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a21      	ldr	r2, [pc, #132]	; (80055f4 <DMA_SetConfig+0x34c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d009      	beq.n	8005588 <DMA_SetConfig+0x2e0>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <DMA_SetConfig+0x350>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <DMA_SetConfig+0x2e0>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <DMA_SetConfig+0x354>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <DMA_SetConfig+0x2e4>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <DMA_SetConfig+0x2e6>
 800558c:	2300      	movs	r3, #0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d020      	beq.n	80055d4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	2201      	movs	r2, #1
 800559c:	409a      	lsls	r2, r3
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d108      	bne.n	80055c4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	60da      	str	r2, [r3, #12]
}
 80055c2:	e007      	b.n	80055d4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	60da      	str	r2, [r3, #12]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	58025408 	.word	0x58025408
 80055e4:	5802541c 	.word	0x5802541c
 80055e8:	58025430 	.word	0x58025430
 80055ec:	58025444 	.word	0x58025444
 80055f0:	58025458 	.word	0x58025458
 80055f4:	5802546c 	.word	0x5802546c
 80055f8:	58025480 	.word	0x58025480
 80055fc:	58025494 	.word	0x58025494

08005600 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a42      	ldr	r2, [pc, #264]	; (8005718 <DMA_CalcBaseAndBitshift+0x118>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d04a      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a41      	ldr	r2, [pc, #260]	; (800571c <DMA_CalcBaseAndBitshift+0x11c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d045      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a3f      	ldr	r2, [pc, #252]	; (8005720 <DMA_CalcBaseAndBitshift+0x120>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d040      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a3e      	ldr	r2, [pc, #248]	; (8005724 <DMA_CalcBaseAndBitshift+0x124>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d03b      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a3c      	ldr	r2, [pc, #240]	; (8005728 <DMA_CalcBaseAndBitshift+0x128>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d036      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a3b      	ldr	r2, [pc, #236]	; (800572c <DMA_CalcBaseAndBitshift+0x12c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d031      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a39      	ldr	r2, [pc, #228]	; (8005730 <DMA_CalcBaseAndBitshift+0x130>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d02c      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a38      	ldr	r2, [pc, #224]	; (8005734 <DMA_CalcBaseAndBitshift+0x134>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d027      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a36      	ldr	r2, [pc, #216]	; (8005738 <DMA_CalcBaseAndBitshift+0x138>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d022      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a35      	ldr	r2, [pc, #212]	; (800573c <DMA_CalcBaseAndBitshift+0x13c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d01d      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a33      	ldr	r2, [pc, #204]	; (8005740 <DMA_CalcBaseAndBitshift+0x140>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d018      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a32      	ldr	r2, [pc, #200]	; (8005744 <DMA_CalcBaseAndBitshift+0x144>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d013      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a30      	ldr	r2, [pc, #192]	; (8005748 <DMA_CalcBaseAndBitshift+0x148>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00e      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2f      	ldr	r2, [pc, #188]	; (800574c <DMA_CalcBaseAndBitshift+0x14c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d009      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2d      	ldr	r2, [pc, #180]	; (8005750 <DMA_CalcBaseAndBitshift+0x150>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d004      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xa8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	; (8005754 <DMA_CalcBaseAndBitshift+0x154>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d101      	bne.n	80056ac <DMA_CalcBaseAndBitshift+0xac>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <DMA_CalcBaseAndBitshift+0xae>
 80056ac:	2300      	movs	r3, #0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d024      	beq.n	80056fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	3b10      	subs	r3, #16
 80056ba:	4a27      	ldr	r2, [pc, #156]	; (8005758 <DMA_CalcBaseAndBitshift+0x158>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	4a24      	ldr	r2, [pc, #144]	; (800575c <DMA_CalcBaseAndBitshift+0x15c>)
 80056cc:	5cd3      	ldrb	r3, [r2, r3]
 80056ce:	461a      	mov	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d908      	bls.n	80056ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <DMA_CalcBaseAndBitshift+0x160>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	1d1a      	adds	r2, r3, #4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	659a      	str	r2, [r3, #88]	; 0x58
 80056ea:	e00d      	b.n	8005708 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <DMA_CalcBaseAndBitshift+0x160>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6593      	str	r3, [r2, #88]	; 0x58
 80056fa:	e005      	b.n	8005708 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	40020010 	.word	0x40020010
 800571c:	40020028 	.word	0x40020028
 8005720:	40020040 	.word	0x40020040
 8005724:	40020058 	.word	0x40020058
 8005728:	40020070 	.word	0x40020070
 800572c:	40020088 	.word	0x40020088
 8005730:	400200a0 	.word	0x400200a0
 8005734:	400200b8 	.word	0x400200b8
 8005738:	40020410 	.word	0x40020410
 800573c:	40020428 	.word	0x40020428
 8005740:	40020440 	.word	0x40020440
 8005744:	40020458 	.word	0x40020458
 8005748:	40020470 	.word	0x40020470
 800574c:	40020488 	.word	0x40020488
 8005750:	400204a0 	.word	0x400204a0
 8005754:	400204b8 	.word	0x400204b8
 8005758:	aaaaaaab 	.word	0xaaaaaaab
 800575c:	0800e850 	.word	0x0800e850
 8005760:	fffffc00 	.word	0xfffffc00

08005764 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d120      	bne.n	80057ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	2b03      	cmp	r3, #3
 800577e:	d858      	bhi.n	8005832 <DMA_CheckFifoParam+0xce>
 8005780:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <DMA_CheckFifoParam+0x24>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	08005799 	.word	0x08005799
 800578c:	080057ab 	.word	0x080057ab
 8005790:	08005799 	.word	0x08005799
 8005794:	08005833 	.word	0x08005833
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d048      	beq.n	8005836 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057a8:	e045      	b.n	8005836 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057b2:	d142      	bne.n	800583a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057b8:	e03f      	b.n	800583a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c2:	d123      	bne.n	800580c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d838      	bhi.n	800583e <DMA_CheckFifoParam+0xda>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <DMA_CheckFifoParam+0x70>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	080057e5 	.word	0x080057e5
 80057d8:	080057eb 	.word	0x080057eb
 80057dc:	080057e5 	.word	0x080057e5
 80057e0:	080057fd 	.word	0x080057fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
        break;
 80057e8:	e030      	b.n	800584c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d025      	beq.n	8005842 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057fa:	e022      	b.n	8005842 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005804:	d11f      	bne.n	8005846 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800580a:	e01c      	b.n	8005846 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	2b02      	cmp	r3, #2
 8005812:	d902      	bls.n	800581a <DMA_CheckFifoParam+0xb6>
 8005814:	2b03      	cmp	r3, #3
 8005816:	d003      	beq.n	8005820 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005818:	e018      	b.n	800584c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	73fb      	strb	r3, [r7, #15]
        break;
 800581e:	e015      	b.n	800584c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00e      	beq.n	800584a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
    break;
 8005830:	e00b      	b.n	800584a <DMA_CheckFifoParam+0xe6>
        break;
 8005832:	bf00      	nop
 8005834:	e00a      	b.n	800584c <DMA_CheckFifoParam+0xe8>
        break;
 8005836:	bf00      	nop
 8005838:	e008      	b.n	800584c <DMA_CheckFifoParam+0xe8>
        break;
 800583a:	bf00      	nop
 800583c:	e006      	b.n	800584c <DMA_CheckFifoParam+0xe8>
        break;
 800583e:	bf00      	nop
 8005840:	e004      	b.n	800584c <DMA_CheckFifoParam+0xe8>
        break;
 8005842:	bf00      	nop
 8005844:	e002      	b.n	800584c <DMA_CheckFifoParam+0xe8>
        break;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <DMA_CheckFifoParam+0xe8>
    break;
 800584a:	bf00      	nop
    }
  }

  return status;
 800584c:	7bfb      	ldrb	r3, [r7, #15]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop

0800585c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a38      	ldr	r2, [pc, #224]	; (8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d022      	beq.n	80058ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a36      	ldr	r2, [pc, #216]	; (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d01d      	beq.n	80058ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a35      	ldr	r2, [pc, #212]	; (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d018      	beq.n	80058ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a33      	ldr	r2, [pc, #204]	; (800595c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a32      	ldr	r2, [pc, #200]	; (8005960 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00e      	beq.n	80058ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a30      	ldr	r2, [pc, #192]	; (8005964 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d009      	beq.n	80058ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a2f      	ldr	r2, [pc, #188]	; (8005968 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a2d      	ldr	r2, [pc, #180]	; (800596c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d101      	bne.n	80058be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01a      	beq.n	80058fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	3b08      	subs	r3, #8
 80058cc:	4a28      	ldr	r2, [pc, #160]	; (8005970 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	091b      	lsrs	r3, r3, #4
 80058d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4b26      	ldr	r3, [pc, #152]	; (8005974 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a24      	ldr	r2, [pc, #144]	; (8005978 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80058e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	2201      	movs	r2, #1
 80058f2:	409a      	lsls	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80058f8:	e024      	b.n	8005944 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	3b10      	subs	r3, #16
 8005902:	4a1e      	ldr	r2, [pc, #120]	; (800597c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	091b      	lsrs	r3, r3, #4
 800590a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d806      	bhi.n	8005922 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a1b      	ldr	r2, [pc, #108]	; (8005984 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d902      	bls.n	8005922 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3308      	adds	r3, #8
 8005920:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4b18      	ldr	r3, [pc, #96]	; (8005988 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a16      	ldr	r2, [pc, #88]	; (800598c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005934:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	2201      	movs	r2, #1
 800593e:	409a      	lsls	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	58025408 	.word	0x58025408
 8005954:	5802541c 	.word	0x5802541c
 8005958:	58025430 	.word	0x58025430
 800595c:	58025444 	.word	0x58025444
 8005960:	58025458 	.word	0x58025458
 8005964:	5802546c 	.word	0x5802546c
 8005968:	58025480 	.word	0x58025480
 800596c:	58025494 	.word	0x58025494
 8005970:	cccccccd 	.word	0xcccccccd
 8005974:	16009600 	.word	0x16009600
 8005978:	58025880 	.word	0x58025880
 800597c:	aaaaaaab 	.word	0xaaaaaaab
 8005980:	400204b8 	.word	0x400204b8
 8005984:	4002040f 	.word	0x4002040f
 8005988:	10008200 	.word	0x10008200
 800598c:	40020880 	.word	0x40020880

08005990 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d04a      	beq.n	8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d847      	bhi.n	8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a25      	ldr	r2, [pc, #148]	; (8005a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a24      	ldr	r2, [pc, #144]	; (8005a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01d      	beq.n	80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a21      	ldr	r2, [pc, #132]	; (8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1e      	ldr	r2, [pc, #120]	; (8005a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1c      	ldr	r2, [pc, #112]	; (8005a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a00:	2300      	movs	r3, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	461a      	mov	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a18:	671a      	str	r2, [r3, #112]	; 0x70
 8005a1a:	e009      	b.n	8005a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	461a      	mov	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a11      	ldr	r2, [pc, #68]	; (8005a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a2e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	2201      	movs	r2, #1
 8005a36:	409a      	lsls	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	58025408 	.word	0x58025408
 8005a4c:	5802541c 	.word	0x5802541c
 8005a50:	58025430 	.word	0x58025430
 8005a54:	58025444 	.word	0x58025444
 8005a58:	58025458 	.word	0x58025458
 8005a5c:	5802546c 	.word	0x5802546c
 8005a60:	58025480 	.word	0x58025480
 8005a64:	58025494 	.word	0x58025494
 8005a68:	1600963f 	.word	0x1600963f
 8005a6c:	58025940 	.word	0x58025940
 8005a70:	1000823f 	.word	0x1000823f
 8005a74:	40020940 	.word	0x40020940

08005a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	; 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a86:	4b89      	ldr	r3, [pc, #548]	; (8005cac <HAL_GPIO_Init+0x234>)
 8005a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a8a:	e194      	b.n	8005db6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	2101      	movs	r1, #1
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	fa01 f303 	lsl.w	r3, r1, r3
 8005a98:	4013      	ands	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8186 	beq.w	8005db0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d005      	beq.n	8005abc <HAL_GPIO_Init+0x44>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d130      	bne.n	8005b1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005af2:	2201      	movs	r2, #1
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43db      	mvns	r3, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4013      	ands	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	091b      	lsrs	r3, r3, #4
 8005b08:	f003 0201 	and.w	r2, r3, #1
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d017      	beq.n	8005b5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	2203      	movs	r2, #3
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d123      	bne.n	8005bae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	08da      	lsrs	r2, r3, #3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3208      	adds	r2, #8
 8005b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	220f      	movs	r2, #15
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43db      	mvns	r3, r3
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	4013      	ands	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	08da      	lsrs	r2, r3, #3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3208      	adds	r2, #8
 8005ba8:	69b9      	ldr	r1, [r7, #24]
 8005baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	2203      	movs	r2, #3
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f003 0203 	and.w	r2, r3, #3
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80e0 	beq.w	8005db0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bf0:	4b2f      	ldr	r3, [pc, #188]	; (8005cb0 <HAL_GPIO_Init+0x238>)
 8005bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bf6:	4a2e      	ldr	r2, [pc, #184]	; (8005cb0 <HAL_GPIO_Init+0x238>)
 8005bf8:	f043 0302 	orr.w	r3, r3, #2
 8005bfc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005c00:	4b2b      	ldr	r3, [pc, #172]	; (8005cb0 <HAL_GPIO_Init+0x238>)
 8005c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c0e:	4a29      	ldr	r2, [pc, #164]	; (8005cb4 <HAL_GPIO_Init+0x23c>)
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	089b      	lsrs	r3, r3, #2
 8005c14:	3302      	adds	r3, #2
 8005c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	220f      	movs	r2, #15
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a20      	ldr	r2, [pc, #128]	; (8005cb8 <HAL_GPIO_Init+0x240>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d052      	beq.n	8005ce0 <HAL_GPIO_Init+0x268>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1f      	ldr	r2, [pc, #124]	; (8005cbc <HAL_GPIO_Init+0x244>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d031      	beq.n	8005ca6 <HAL_GPIO_Init+0x22e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1e      	ldr	r2, [pc, #120]	; (8005cc0 <HAL_GPIO_Init+0x248>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d02b      	beq.n	8005ca2 <HAL_GPIO_Init+0x22a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <HAL_GPIO_Init+0x24c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d025      	beq.n	8005c9e <HAL_GPIO_Init+0x226>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1c      	ldr	r2, [pc, #112]	; (8005cc8 <HAL_GPIO_Init+0x250>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01f      	beq.n	8005c9a <HAL_GPIO_Init+0x222>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <HAL_GPIO_Init+0x254>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d019      	beq.n	8005c96 <HAL_GPIO_Init+0x21e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1a      	ldr	r2, [pc, #104]	; (8005cd0 <HAL_GPIO_Init+0x258>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <HAL_GPIO_Init+0x21a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a19      	ldr	r2, [pc, #100]	; (8005cd4 <HAL_GPIO_Init+0x25c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00d      	beq.n	8005c8e <HAL_GPIO_Init+0x216>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a18      	ldr	r2, [pc, #96]	; (8005cd8 <HAL_GPIO_Init+0x260>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d007      	beq.n	8005c8a <HAL_GPIO_Init+0x212>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <HAL_GPIO_Init+0x264>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d101      	bne.n	8005c86 <HAL_GPIO_Init+0x20e>
 8005c82:	2309      	movs	r3, #9
 8005c84:	e02d      	b.n	8005ce2 <HAL_GPIO_Init+0x26a>
 8005c86:	230a      	movs	r3, #10
 8005c88:	e02b      	b.n	8005ce2 <HAL_GPIO_Init+0x26a>
 8005c8a:	2308      	movs	r3, #8
 8005c8c:	e029      	b.n	8005ce2 <HAL_GPIO_Init+0x26a>
 8005c8e:	2307      	movs	r3, #7
 8005c90:	e027      	b.n	8005ce2 <HAL_GPIO_Init+0x26a>
 8005c92:	2306      	movs	r3, #6
 8005c94:	e025      	b.n	8005ce2 <HAL_GPIO_Init+0x26a>
 8005c96:	2305      	movs	r3, #5
 8005c98:	e023      	b.n	8005ce2 <HAL_GPIO_Init+0x26a>
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	e021      	b.n	8005ce2 <HAL_GPIO_Init+0x26a>
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e01f      	b.n	8005ce2 <HAL_GPIO_Init+0x26a>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e01d      	b.n	8005ce2 <HAL_GPIO_Init+0x26a>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e01b      	b.n	8005ce2 <HAL_GPIO_Init+0x26a>
 8005caa:	bf00      	nop
 8005cac:	58000080 	.word	0x58000080
 8005cb0:	58024400 	.word	0x58024400
 8005cb4:	58000400 	.word	0x58000400
 8005cb8:	58020000 	.word	0x58020000
 8005cbc:	58020400 	.word	0x58020400
 8005cc0:	58020800 	.word	0x58020800
 8005cc4:	58020c00 	.word	0x58020c00
 8005cc8:	58021000 	.word	0x58021000
 8005ccc:	58021400 	.word	0x58021400
 8005cd0:	58021800 	.word	0x58021800
 8005cd4:	58021c00 	.word	0x58021c00
 8005cd8:	58022000 	.word	0x58022000
 8005cdc:	58022400 	.word	0x58022400
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	f002 0203 	and.w	r2, r2, #3
 8005ce8:	0092      	lsls	r2, r2, #2
 8005cea:	4093      	lsls	r3, r2
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cf2:	4938      	ldr	r1, [pc, #224]	; (8005dd4 <HAL_GPIO_Init+0x35c>)
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	089b      	lsrs	r3, r3, #2
 8005cf8:	3302      	adds	r3, #2
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4013      	ands	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	3301      	adds	r3, #1
 8005db4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f47f ae63 	bne.w	8005a8c <HAL_GPIO_Init+0x14>
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	3724      	adds	r7, #36	; 0x24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	58000400 	.word	0x58000400

08005dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	4013      	ands	r3, r2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
 8005df4:	e001      	b.n	8005dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	807b      	strh	r3, [r7, #2]
 8005e14:	4613      	mov	r3, r2
 8005e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e18:	787b      	ldrb	r3, [r7, #1]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e1e:	887a      	ldrh	r2, [r7, #2]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e24:	e003      	b.n	8005e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e26:	887b      	ldrh	r3, [r7, #2]
 8005e28:	041a      	lsls	r2, r3, #16
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	619a      	str	r2, [r3, #24]
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e4c:	887a      	ldrh	r2, [r7, #2]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4013      	ands	r3, r2
 8005e52:	041a      	lsls	r2, r3, #16
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	43d9      	mvns	r1, r3
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	400b      	ands	r3, r1
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	619a      	str	r2, [r3, #24]
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e78:	4b19      	ldr	r3, [pc, #100]	; (8005ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d00a      	beq.n	8005e9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e84:	4b16      	ldr	r3, [pc, #88]	; (8005ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d001      	beq.n	8005e96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e01f      	b.n	8005ed6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e01d      	b.n	8005ed6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e9a:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f023 0207 	bic.w	r2, r3, #7
 8005ea2:	490f      	ldr	r1, [pc, #60]	; (8005ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005eaa:	f7fc fea7 	bl	8002bfc <HAL_GetTick>
 8005eae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005eb0:	e009      	b.n	8005ec6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005eb2:	f7fc fea3 	bl	8002bfc <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ec0:	d901      	bls.n	8005ec6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e007      	b.n	8005ed6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ec6:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed2:	d1ee      	bne.n	8005eb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	58024800 	.word	0x58024800

08005ee4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08c      	sub	sp, #48	; 0x30
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f000 bc1c 	b.w	8006730 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8087 	beq.w	8006014 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f06:	4b9e      	ldr	r3, [pc, #632]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f10:	4b9b      	ldr	r3, [pc, #620]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d007      	beq.n	8005f2c <HAL_RCC_OscConfig+0x48>
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	2b18      	cmp	r3, #24
 8005f20:	d110      	bne.n	8005f44 <HAL_RCC_OscConfig+0x60>
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d10b      	bne.n	8005f44 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f2c:	4b94      	ldr	r3, [pc, #592]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d06c      	beq.n	8006012 <HAL_RCC_OscConfig+0x12e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d168      	bne.n	8006012 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e3f5      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4c:	d106      	bne.n	8005f5c <HAL_RCC_OscConfig+0x78>
 8005f4e:	4b8c      	ldr	r3, [pc, #560]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a8b      	ldr	r2, [pc, #556]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e02e      	b.n	8005fba <HAL_RCC_OscConfig+0xd6>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10c      	bne.n	8005f7e <HAL_RCC_OscConfig+0x9a>
 8005f64:	4b86      	ldr	r3, [pc, #536]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a85      	ldr	r2, [pc, #532]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	4b83      	ldr	r3, [pc, #524]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a82      	ldr	r2, [pc, #520]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	e01d      	b.n	8005fba <HAL_RCC_OscConfig+0xd6>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f86:	d10c      	bne.n	8005fa2 <HAL_RCC_OscConfig+0xbe>
 8005f88:	4b7d      	ldr	r3, [pc, #500]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a7c      	ldr	r2, [pc, #496]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	4b7a      	ldr	r3, [pc, #488]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a79      	ldr	r2, [pc, #484]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	e00b      	b.n	8005fba <HAL_RCC_OscConfig+0xd6>
 8005fa2:	4b77      	ldr	r3, [pc, #476]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a76      	ldr	r2, [pc, #472]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4b74      	ldr	r3, [pc, #464]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a73      	ldr	r2, [pc, #460]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d013      	beq.n	8005fea <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc2:	f7fc fe1b 	bl	8002bfc <HAL_GetTick>
 8005fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fca:	f7fc fe17 	bl	8002bfc <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b64      	cmp	r3, #100	; 0x64
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e3a9      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fdc:	4b68      	ldr	r3, [pc, #416]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0f0      	beq.n	8005fca <HAL_RCC_OscConfig+0xe6>
 8005fe8:	e014      	b.n	8006014 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fea:	f7fc fe07 	bl	8002bfc <HAL_GetTick>
 8005fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ff2:	f7fc fe03 	bl	8002bfc <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b64      	cmp	r3, #100	; 0x64
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e395      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006004:	4b5e      	ldr	r3, [pc, #376]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f0      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x10e>
 8006010:	e000      	b.n	8006014 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006012:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80ca 	beq.w	80061b6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006022:	4b57      	ldr	r3, [pc, #348]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800602a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800602c:	4b54      	ldr	r3, [pc, #336]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_RCC_OscConfig+0x164>
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	2b18      	cmp	r3, #24
 800603c:	d156      	bne.n	80060ec <HAL_RCC_OscConfig+0x208>
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d151      	bne.n	80060ec <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006048:	4b4d      	ldr	r3, [pc, #308]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <HAL_RCC_OscConfig+0x17c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e367      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006060:	4b47      	ldr	r3, [pc, #284]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f023 0219 	bic.w	r2, r3, #25
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4944      	ldr	r1, [pc, #272]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 800606e:	4313      	orrs	r3, r2
 8006070:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006072:	f7fc fdc3 	bl	8002bfc <HAL_GetTick>
 8006076:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800607a:	f7fc fdbf 	bl	8002bfc <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e351      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800608c:	4b3c      	ldr	r3, [pc, #240]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f0      	beq.n	800607a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006098:	f7fc fdbc 	bl	8002c14 <HAL_GetREVID>
 800609c:	4603      	mov	r3, r0
 800609e:	f241 0203 	movw	r2, #4099	; 0x1003
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d817      	bhi.n	80060d6 <HAL_RCC_OscConfig+0x1f2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b40      	cmp	r3, #64	; 0x40
 80060ac:	d108      	bne.n	80060c0 <HAL_RCC_OscConfig+0x1dc>
 80060ae:	4b34      	ldr	r3, [pc, #208]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80060b6:	4a32      	ldr	r2, [pc, #200]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 80060b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060be:	e07a      	b.n	80061b6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c0:	4b2f      	ldr	r3, [pc, #188]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	031b      	lsls	r3, r3, #12
 80060ce:	492c      	ldr	r1, [pc, #176]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060d4:	e06f      	b.n	80061b6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d6:	4b2a      	ldr	r3, [pc, #168]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	061b      	lsls	r3, r3, #24
 80060e4:	4926      	ldr	r1, [pc, #152]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060ea:	e064      	b.n	80061b6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d047      	beq.n	8006184 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060f4:	4b22      	ldr	r3, [pc, #136]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f023 0219 	bic.w	r2, r3, #25
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	491f      	ldr	r1, [pc, #124]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8006102:	4313      	orrs	r3, r2
 8006104:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fc fd79 	bl	8002bfc <HAL_GetTick>
 800610a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800610e:	f7fc fd75 	bl	8002bfc <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e307      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006120:	4b17      	ldr	r3, [pc, #92]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f0      	beq.n	800610e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612c:	f7fc fd72 	bl	8002c14 <HAL_GetREVID>
 8006130:	4603      	mov	r3, r0
 8006132:	f241 0203 	movw	r2, #4099	; 0x1003
 8006136:	4293      	cmp	r3, r2
 8006138:	d817      	bhi.n	800616a <HAL_RCC_OscConfig+0x286>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d108      	bne.n	8006154 <HAL_RCC_OscConfig+0x270>
 8006142:	4b0f      	ldr	r3, [pc, #60]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800614a:	4a0d      	ldr	r2, [pc, #52]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 800614c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006150:	6053      	str	r3, [r2, #4]
 8006152:	e030      	b.n	80061b6 <HAL_RCC_OscConfig+0x2d2>
 8006154:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	031b      	lsls	r3, r3, #12
 8006162:	4907      	ldr	r1, [pc, #28]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 8006164:	4313      	orrs	r3, r2
 8006166:	604b      	str	r3, [r1, #4]
 8006168:	e025      	b.n	80061b6 <HAL_RCC_OscConfig+0x2d2>
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	061b      	lsls	r3, r3, #24
 8006178:	4901      	ldr	r1, [pc, #4]	; (8006180 <HAL_RCC_OscConfig+0x29c>)
 800617a:	4313      	orrs	r3, r2
 800617c:	604b      	str	r3, [r1, #4]
 800617e:	e01a      	b.n	80061b6 <HAL_RCC_OscConfig+0x2d2>
 8006180:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006184:	4b9e      	ldr	r3, [pc, #632]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a9d      	ldr	r2, [pc, #628]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006190:	f7fc fd34 	bl	8002bfc <HAL_GetTick>
 8006194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006198:	f7fc fd30 	bl	8002bfc <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e2c2      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061aa:	4b95      	ldr	r3, [pc, #596]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80a9 	beq.w	8006316 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061c4:	4b8e      	ldr	r3, [pc, #568]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061ce:	4b8c      	ldr	r3, [pc, #560]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d007      	beq.n	80061ea <HAL_RCC_OscConfig+0x306>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b18      	cmp	r3, #24
 80061de:	d13a      	bne.n	8006256 <HAL_RCC_OscConfig+0x372>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d135      	bne.n	8006256 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061ea:	4b85      	ldr	r3, [pc, #532]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <HAL_RCC_OscConfig+0x31e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	2b80      	cmp	r3, #128	; 0x80
 80061fc:	d001      	beq.n	8006202 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e296      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006202:	f7fc fd07 	bl	8002c14 <HAL_GetREVID>
 8006206:	4603      	mov	r3, r0
 8006208:	f241 0203 	movw	r2, #4099	; 0x1003
 800620c:	4293      	cmp	r3, r2
 800620e:	d817      	bhi.n	8006240 <HAL_RCC_OscConfig+0x35c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	2b20      	cmp	r3, #32
 8006216:	d108      	bne.n	800622a <HAL_RCC_OscConfig+0x346>
 8006218:	4b79      	ldr	r3, [pc, #484]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006220:	4a77      	ldr	r2, [pc, #476]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006226:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006228:	e075      	b.n	8006316 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800622a:	4b75      	ldr	r3, [pc, #468]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	069b      	lsls	r3, r3, #26
 8006238:	4971      	ldr	r1, [pc, #452]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 800623a:	4313      	orrs	r3, r2
 800623c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800623e:	e06a      	b.n	8006316 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006240:	4b6f      	ldr	r3, [pc, #444]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	061b      	lsls	r3, r3, #24
 800624e:	496c      	ldr	r1, [pc, #432]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006250:	4313      	orrs	r3, r2
 8006252:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006254:	e05f      	b.n	8006316 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d042      	beq.n	80062e4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800625e:	4b68      	ldr	r3, [pc, #416]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a67      	ldr	r2, [pc, #412]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626a:	f7fc fcc7 	bl	8002bfc <HAL_GetTick>
 800626e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006272:	f7fc fcc3 	bl	8002bfc <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e255      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006284:	4b5e      	ldr	r3, [pc, #376]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f0      	beq.n	8006272 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006290:	f7fc fcc0 	bl	8002c14 <HAL_GetREVID>
 8006294:	4603      	mov	r3, r0
 8006296:	f241 0203 	movw	r2, #4099	; 0x1003
 800629a:	4293      	cmp	r3, r2
 800629c:	d817      	bhi.n	80062ce <HAL_RCC_OscConfig+0x3ea>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d108      	bne.n	80062b8 <HAL_RCC_OscConfig+0x3d4>
 80062a6:	4b56      	ldr	r3, [pc, #344]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80062ae:	4a54      	ldr	r2, [pc, #336]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80062b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062b4:	6053      	str	r3, [r2, #4]
 80062b6:	e02e      	b.n	8006316 <HAL_RCC_OscConfig+0x432>
 80062b8:	4b51      	ldr	r3, [pc, #324]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	069b      	lsls	r3, r3, #26
 80062c6:	494e      	ldr	r1, [pc, #312]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	604b      	str	r3, [r1, #4]
 80062cc:	e023      	b.n	8006316 <HAL_RCC_OscConfig+0x432>
 80062ce:	4b4c      	ldr	r3, [pc, #304]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	061b      	lsls	r3, r3, #24
 80062dc:	4948      	ldr	r1, [pc, #288]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	60cb      	str	r3, [r1, #12]
 80062e2:	e018      	b.n	8006316 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062e4:	4b46      	ldr	r3, [pc, #280]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a45      	ldr	r2, [pc, #276]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80062ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7fc fc84 	bl	8002bfc <HAL_GetTick>
 80062f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80062f8:	f7fc fc80 	bl	8002bfc <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e212      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800630a:	4b3d      	ldr	r3, [pc, #244]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f0      	bne.n	80062f8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d036      	beq.n	8006390 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d019      	beq.n	800635e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800632a:	4b35      	ldr	r3, [pc, #212]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 800632c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800632e:	4a34      	ldr	r2, [pc, #208]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006330:	f043 0301 	orr.w	r3, r3, #1
 8006334:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006336:	f7fc fc61 	bl	8002bfc <HAL_GetTick>
 800633a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800633e:	f7fc fc5d 	bl	8002bfc <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e1ef      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006350:	4b2b      	ldr	r3, [pc, #172]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0f0      	beq.n	800633e <HAL_RCC_OscConfig+0x45a>
 800635c:	e018      	b.n	8006390 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800635e:	4b28      	ldr	r3, [pc, #160]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006362:	4a27      	ldr	r2, [pc, #156]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006364:	f023 0301 	bic.w	r3, r3, #1
 8006368:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636a:	f7fc fc47 	bl	8002bfc <HAL_GetTick>
 800636e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006372:	f7fc fc43 	bl	8002bfc <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e1d5      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006384:	4b1e      	ldr	r3, [pc, #120]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 8006386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1f0      	bne.n	8006372 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d039      	beq.n	8006410 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d019      	beq.n	80063d8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063a4:	4b16      	ldr	r3, [pc, #88]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a15      	ldr	r2, [pc, #84]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80063aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063b0:	f7fc fc24 	bl	8002bfc <HAL_GetTick>
 80063b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063b8:	f7fc fc20 	bl	8002bfc <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e1b2      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063ca:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f0      	beq.n	80063b8 <HAL_RCC_OscConfig+0x4d4>
 80063d6:	e01b      	b.n	8006410 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063d8:	4b09      	ldr	r3, [pc, #36]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a08      	ldr	r2, [pc, #32]	; (8006400 <HAL_RCC_OscConfig+0x51c>)
 80063de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063e4:	f7fc fc0a 	bl	8002bfc <HAL_GetTick>
 80063e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063ea:	e00b      	b.n	8006404 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063ec:	f7fc fc06 	bl	8002bfc <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d904      	bls.n	8006404 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e198      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
 80063fe:	bf00      	nop
 8006400:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006404:	4ba3      	ldr	r3, [pc, #652]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ed      	bne.n	80063ec <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 8081 	beq.w	8006520 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800641e:	4b9e      	ldr	r3, [pc, #632]	; (8006698 <HAL_RCC_OscConfig+0x7b4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a9d      	ldr	r2, [pc, #628]	; (8006698 <HAL_RCC_OscConfig+0x7b4>)
 8006424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800642a:	f7fc fbe7 	bl	8002bfc <HAL_GetTick>
 800642e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006432:	f7fc fbe3 	bl	8002bfc <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b64      	cmp	r3, #100	; 0x64
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e175      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006444:	4b94      	ldr	r3, [pc, #592]	; (8006698 <HAL_RCC_OscConfig+0x7b4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d106      	bne.n	8006466 <HAL_RCC_OscConfig+0x582>
 8006458:	4b8e      	ldr	r3, [pc, #568]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800645a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645c:	4a8d      	ldr	r2, [pc, #564]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	6713      	str	r3, [r2, #112]	; 0x70
 8006464:	e02d      	b.n	80064c2 <HAL_RCC_OscConfig+0x5de>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10c      	bne.n	8006488 <HAL_RCC_OscConfig+0x5a4>
 800646e:	4b89      	ldr	r3, [pc, #548]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	4a88      	ldr	r2, [pc, #544]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006474:	f023 0301 	bic.w	r3, r3, #1
 8006478:	6713      	str	r3, [r2, #112]	; 0x70
 800647a:	4b86      	ldr	r3, [pc, #536]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647e:	4a85      	ldr	r2, [pc, #532]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006480:	f023 0304 	bic.w	r3, r3, #4
 8006484:	6713      	str	r3, [r2, #112]	; 0x70
 8006486:	e01c      	b.n	80064c2 <HAL_RCC_OscConfig+0x5de>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b05      	cmp	r3, #5
 800648e:	d10c      	bne.n	80064aa <HAL_RCC_OscConfig+0x5c6>
 8006490:	4b80      	ldr	r3, [pc, #512]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006494:	4a7f      	ldr	r2, [pc, #508]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006496:	f043 0304 	orr.w	r3, r3, #4
 800649a:	6713      	str	r3, [r2, #112]	; 0x70
 800649c:	4b7d      	ldr	r3, [pc, #500]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a0:	4a7c      	ldr	r2, [pc, #496]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	6713      	str	r3, [r2, #112]	; 0x70
 80064a8:	e00b      	b.n	80064c2 <HAL_RCC_OscConfig+0x5de>
 80064aa:	4b7a      	ldr	r3, [pc, #488]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	4a79      	ldr	r2, [pc, #484]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	6713      	str	r3, [r2, #112]	; 0x70
 80064b6:	4b77      	ldr	r3, [pc, #476]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ba:	4a76      	ldr	r2, [pc, #472]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80064bc:	f023 0304 	bic.w	r3, r3, #4
 80064c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d015      	beq.n	80064f6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ca:	f7fc fb97 	bl	8002bfc <HAL_GetTick>
 80064ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064d0:	e00a      	b.n	80064e8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d2:	f7fc fb93 	bl	8002bfc <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e123      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064e8:	4b6a      	ldr	r3, [pc, #424]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0ee      	beq.n	80064d2 <HAL_RCC_OscConfig+0x5ee>
 80064f4:	e014      	b.n	8006520 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f6:	f7fc fb81 	bl	8002bfc <HAL_GetTick>
 80064fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064fc:	e00a      	b.n	8006514 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064fe:	f7fc fb7d 	bl	8002bfc <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f241 3288 	movw	r2, #5000	; 0x1388
 800650c:	4293      	cmp	r3, r2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e10d      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006514:	4b5f      	ldr	r3, [pc, #380]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1ee      	bne.n	80064fe <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8102 	beq.w	800672e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800652a:	4b5a      	ldr	r3, [pc, #360]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006532:	2b18      	cmp	r3, #24
 8006534:	f000 80bd 	beq.w	80066b2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	2b02      	cmp	r3, #2
 800653e:	f040 8095 	bne.w	800666c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006542:	4b54      	ldr	r3, [pc, #336]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a53      	ldr	r2, [pc, #332]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800654c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654e:	f7fc fb55 	bl	8002bfc <HAL_GetTick>
 8006552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006556:	f7fc fb51 	bl	8002bfc <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e0e3      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006568:	4b4a      	ldr	r3, [pc, #296]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f0      	bne.n	8006556 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006574:	4b47      	ldr	r3, [pc, #284]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006578:	4b48      	ldr	r3, [pc, #288]	; (800669c <HAL_RCC_OscConfig+0x7b8>)
 800657a:	4013      	ands	r3, r2
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006584:	0112      	lsls	r2, r2, #4
 8006586:	430a      	orrs	r2, r1
 8006588:	4942      	ldr	r1, [pc, #264]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800658a:	4313      	orrs	r3, r2
 800658c:	628b      	str	r3, [r1, #40]	; 0x28
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	3b01      	subs	r3, #1
 8006594:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659c:	3b01      	subs	r3, #1
 800659e:	025b      	lsls	r3, r3, #9
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	3b01      	subs	r3, #1
 80065aa:	041b      	lsls	r3, r3, #16
 80065ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	3b01      	subs	r3, #1
 80065b8:	061b      	lsls	r3, r3, #24
 80065ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065be:	4935      	ldr	r1, [pc, #212]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80065c4:	4b33      	ldr	r3, [pc, #204]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	4a32      	ldr	r2, [pc, #200]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065d0:	4b30      	ldr	r3, [pc, #192]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80065d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d4:	4b32      	ldr	r3, [pc, #200]	; (80066a0 <HAL_RCC_OscConfig+0x7bc>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065dc:	00d2      	lsls	r2, r2, #3
 80065de:	492d      	ldr	r1, [pc, #180]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065e4:	4b2b      	ldr	r3, [pc, #172]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	f023 020c 	bic.w	r2, r3, #12
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	4928      	ldr	r1, [pc, #160]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80065f6:	4b27      	ldr	r3, [pc, #156]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	f023 0202 	bic.w	r2, r3, #2
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	4924      	ldr	r1, [pc, #144]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006604:	4313      	orrs	r3, r2
 8006606:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006608:	4b22      	ldr	r3, [pc, #136]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	4a21      	ldr	r2, [pc, #132]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800660e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006612:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006614:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	4a1e      	ldr	r2, [pc, #120]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800661a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800661e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006620:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	4a1b      	ldr	r2, [pc, #108]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800662a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	4a18      	ldr	r2, [pc, #96]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006638:	4b16      	ldr	r3, [pc, #88]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a15      	ldr	r2, [pc, #84]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800663e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006644:	f7fc fada 	bl	8002bfc <HAL_GetTick>
 8006648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800664c:	f7fc fad6 	bl	8002bfc <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e068      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800665e:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0x768>
 800666a:	e060      	b.n	800672e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a08      	ldr	r2, [pc, #32]	; (8006694 <HAL_RCC_OscConfig+0x7b0>)
 8006672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006678:	f7fc fac0 	bl	8002bfc <HAL_GetTick>
 800667c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800667e:	e011      	b.n	80066a4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006680:	f7fc fabc 	bl	8002bfc <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d90a      	bls.n	80066a4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e04e      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
 8006698:	58024800 	.word	0x58024800
 800669c:	fffffc0c 	.word	0xfffffc0c
 80066a0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066a4:	4b24      	ldr	r3, [pc, #144]	; (8006738 <HAL_RCC_OscConfig+0x854>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e7      	bne.n	8006680 <HAL_RCC_OscConfig+0x79c>
 80066b0:	e03d      	b.n	800672e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066b2:	4b21      	ldr	r3, [pc, #132]	; (8006738 <HAL_RCC_OscConfig+0x854>)
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066b8:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <HAL_RCC_OscConfig+0x854>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d031      	beq.n	800672a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f003 0203 	and.w	r2, r3, #3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d12a      	bne.n	800672a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d122      	bne.n	800672a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d11a      	bne.n	800672a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	0a5b      	lsrs	r3, r3, #9
 80066f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006700:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006702:	429a      	cmp	r2, r3
 8006704:	d111      	bne.n	800672a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006714:	429a      	cmp	r2, r3
 8006716:	d108      	bne.n	800672a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	0e1b      	lsrs	r3, r3, #24
 800671c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006726:	429a      	cmp	r2, r3
 8006728:	d001      	beq.n	800672e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3730      	adds	r7, #48	; 0x30
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	58024400 	.word	0x58024400

0800673c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e19c      	b.n	8006a8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006750:	4b8a      	ldr	r3, [pc, #552]	; (800697c <HAL_RCC_ClockConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d910      	bls.n	8006780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675e:	4b87      	ldr	r3, [pc, #540]	; (800697c <HAL_RCC_ClockConfig+0x240>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f023 020f 	bic.w	r2, r3, #15
 8006766:	4985      	ldr	r1, [pc, #532]	; (800697c <HAL_RCC_ClockConfig+0x240>)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	4313      	orrs	r3, r2
 800676c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800676e:	4b83      	ldr	r3, [pc, #524]	; (800697c <HAL_RCC_ClockConfig+0x240>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d001      	beq.n	8006780 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e184      	b.n	8006a8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d010      	beq.n	80067ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	4b7b      	ldr	r3, [pc, #492]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006798:	429a      	cmp	r2, r3
 800679a:	d908      	bls.n	80067ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800679c:	4b78      	ldr	r3, [pc, #480]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	4975      	ldr	r1, [pc, #468]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d010      	beq.n	80067dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695a      	ldr	r2, [r3, #20]
 80067be:	4b70      	ldr	r3, [pc, #448]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d908      	bls.n	80067dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067ca:	4b6d      	ldr	r3, [pc, #436]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	496a      	ldr	r1, [pc, #424]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d010      	beq.n	800680a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699a      	ldr	r2, [r3, #24]
 80067ec:	4b64      	ldr	r3, [pc, #400]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d908      	bls.n	800680a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067f8:	4b61      	ldr	r3, [pc, #388]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	495e      	ldr	r1, [pc, #376]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 8006806:	4313      	orrs	r3, r2
 8006808:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d010      	beq.n	8006838 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69da      	ldr	r2, [r3, #28]
 800681a:	4b59      	ldr	r3, [pc, #356]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006822:	429a      	cmp	r2, r3
 8006824:	d908      	bls.n	8006838 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006826:	4b56      	ldr	r3, [pc, #344]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	4953      	ldr	r1, [pc, #332]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 8006834:	4313      	orrs	r3, r2
 8006836:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d010      	beq.n	8006866 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	4b4d      	ldr	r3, [pc, #308]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	429a      	cmp	r2, r3
 8006852:	d908      	bls.n	8006866 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006854:	4b4a      	ldr	r3, [pc, #296]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f023 020f 	bic.w	r2, r3, #15
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	4947      	ldr	r1, [pc, #284]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 8006862:	4313      	orrs	r3, r2
 8006864:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d055      	beq.n	800691e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006872:	4b43      	ldr	r3, [pc, #268]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	4940      	ldr	r1, [pc, #256]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 8006880:	4313      	orrs	r3, r2
 8006882:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d107      	bne.n	800689c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800688c:	4b3c      	ldr	r3, [pc, #240]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d121      	bne.n	80068dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e0f6      	b.n	8006a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d107      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068a4:	4b36      	ldr	r3, [pc, #216]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d115      	bne.n	80068dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0ea      	b.n	8006a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d107      	bne.n	80068cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068bc:	4b30      	ldr	r3, [pc, #192]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d109      	bne.n	80068dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0de      	b.n	8006a8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068cc:	4b2c      	ldr	r3, [pc, #176]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0d6      	b.n	8006a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068dc:	4b28      	ldr	r3, [pc, #160]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f023 0207 	bic.w	r2, r3, #7
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	4925      	ldr	r1, [pc, #148]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ee:	f7fc f985 	bl	8002bfc <HAL_GetTick>
 80068f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f4:	e00a      	b.n	800690c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f6:	f7fc f981 	bl	8002bfc <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f241 3288 	movw	r2, #5000	; 0x1388
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e0be      	b.n	8006a8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690c:	4b1c      	ldr	r3, [pc, #112]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	429a      	cmp	r2, r3
 800691c:	d1eb      	bne.n	80068f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d010      	beq.n	800694c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	4b14      	ldr	r3, [pc, #80]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	429a      	cmp	r2, r3
 8006938:	d208      	bcs.n	800694c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800693a:	4b11      	ldr	r3, [pc, #68]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f023 020f 	bic.w	r2, r3, #15
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	490e      	ldr	r1, [pc, #56]	; (8006980 <HAL_RCC_ClockConfig+0x244>)
 8006948:	4313      	orrs	r3, r2
 800694a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800694c:	4b0b      	ldr	r3, [pc, #44]	; (800697c <HAL_RCC_ClockConfig+0x240>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d214      	bcs.n	8006984 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695a:	4b08      	ldr	r3, [pc, #32]	; (800697c <HAL_RCC_ClockConfig+0x240>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 020f 	bic.w	r2, r3, #15
 8006962:	4906      	ldr	r1, [pc, #24]	; (800697c <HAL_RCC_ClockConfig+0x240>)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	4313      	orrs	r3, r2
 8006968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800696a:	4b04      	ldr	r3, [pc, #16]	; (800697c <HAL_RCC_ClockConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	429a      	cmp	r2, r3
 8006976:	d005      	beq.n	8006984 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e086      	b.n	8006a8a <HAL_RCC_ClockConfig+0x34e>
 800697c:	52002000 	.word	0x52002000
 8006980:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	d010      	beq.n	80069b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	4b3f      	ldr	r3, [pc, #252]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800699c:	429a      	cmp	r2, r3
 800699e:	d208      	bcs.n	80069b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069a0:	4b3c      	ldr	r3, [pc, #240]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	4939      	ldr	r1, [pc, #228]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d010      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695a      	ldr	r2, [r3, #20]
 80069c2:	4b34      	ldr	r3, [pc, #208]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d208      	bcs.n	80069e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069ce:	4b31      	ldr	r3, [pc, #196]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	492e      	ldr	r1, [pc, #184]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d010      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	4b28      	ldr	r3, [pc, #160]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d208      	bcs.n	8006a0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069fc:	4b25      	ldr	r3, [pc, #148]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	4922      	ldr	r1, [pc, #136]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d010      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69da      	ldr	r2, [r3, #28]
 8006a1e:	4b1d      	ldr	r3, [pc, #116]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d208      	bcs.n	8006a3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a2a:	4b1a      	ldr	r3, [pc, #104]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	4917      	ldr	r1, [pc, #92]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a3c:	f000 f834 	bl	8006aa8 <HAL_RCC_GetSysClockFreq>
 8006a40:	4602      	mov	r2, r0
 8006a42:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	0a1b      	lsrs	r3, r3, #8
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	4912      	ldr	r1, [pc, #72]	; (8006a98 <HAL_RCC_ClockConfig+0x35c>)
 8006a4e:	5ccb      	ldrb	r3, [r1, r3]
 8006a50:	f003 031f 	and.w	r3, r3, #31
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
 8006a58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a5a:	4b0e      	ldr	r3, [pc, #56]	; (8006a94 <HAL_RCC_ClockConfig+0x358>)
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <HAL_RCC_ClockConfig+0x35c>)
 8006a64:	5cd3      	ldrb	r3, [r2, r3]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a70:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <HAL_RCC_ClockConfig+0x360>)
 8006a72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a74:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <HAL_RCC_ClockConfig+0x364>)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <HAL_RCC_ClockConfig+0x368>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fa fd68 	bl	8001554 <HAL_InitTick>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	58024400 	.word	0x58024400
 8006a98:	0800e840 	.word	0x0800e840
 8006a9c:	24000004 	.word	0x24000004
 8006aa0:	24000000 	.word	0x24000000
 8006aa4:	24000008 	.word	0x24000008

08006aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b089      	sub	sp, #36	; 0x24
 8006aac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aae:	4bb3      	ldr	r3, [pc, #716]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ab6:	2b18      	cmp	r3, #24
 8006ab8:	f200 8155 	bhi.w	8006d66 <HAL_RCC_GetSysClockFreq+0x2be>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006b29 	.word	0x08006b29
 8006ac8:	08006d67 	.word	0x08006d67
 8006acc:	08006d67 	.word	0x08006d67
 8006ad0:	08006d67 	.word	0x08006d67
 8006ad4:	08006d67 	.word	0x08006d67
 8006ad8:	08006d67 	.word	0x08006d67
 8006adc:	08006d67 	.word	0x08006d67
 8006ae0:	08006d67 	.word	0x08006d67
 8006ae4:	08006b4f 	.word	0x08006b4f
 8006ae8:	08006d67 	.word	0x08006d67
 8006aec:	08006d67 	.word	0x08006d67
 8006af0:	08006d67 	.word	0x08006d67
 8006af4:	08006d67 	.word	0x08006d67
 8006af8:	08006d67 	.word	0x08006d67
 8006afc:	08006d67 	.word	0x08006d67
 8006b00:	08006d67 	.word	0x08006d67
 8006b04:	08006b55 	.word	0x08006b55
 8006b08:	08006d67 	.word	0x08006d67
 8006b0c:	08006d67 	.word	0x08006d67
 8006b10:	08006d67 	.word	0x08006d67
 8006b14:	08006d67 	.word	0x08006d67
 8006b18:	08006d67 	.word	0x08006d67
 8006b1c:	08006d67 	.word	0x08006d67
 8006b20:	08006d67 	.word	0x08006d67
 8006b24:	08006b5b 	.word	0x08006b5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b28:	4b94      	ldr	r3, [pc, #592]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d009      	beq.n	8006b48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b34:	4b91      	ldr	r3, [pc, #580]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	08db      	lsrs	r3, r3, #3
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	4a90      	ldr	r2, [pc, #576]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b40:	fa22 f303 	lsr.w	r3, r2, r3
 8006b44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006b46:	e111      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b48:	4b8d      	ldr	r3, [pc, #564]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b4a:	61bb      	str	r3, [r7, #24]
    break;
 8006b4c:	e10e      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006b4e:	4b8d      	ldr	r3, [pc, #564]	; (8006d84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b50:	61bb      	str	r3, [r7, #24]
    break;
 8006b52:	e10b      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006b54:	4b8c      	ldr	r3, [pc, #560]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b56:	61bb      	str	r3, [r7, #24]
    break;
 8006b58:	e108      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b5a:	4b88      	ldr	r3, [pc, #544]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b64:	4b85      	ldr	r3, [pc, #532]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	091b      	lsrs	r3, r3, #4
 8006b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b70:	4b82      	ldr	r3, [pc, #520]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b7a:	4b80      	ldr	r3, [pc, #512]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	08db      	lsrs	r3, r3, #3
 8006b80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	fb02 f303 	mul.w	r3, r2, r3
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 80e1 	beq.w	8006d60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	f000 8083 	beq.w	8006cac <HAL_RCC_GetSysClockFreq+0x204>
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	f200 80a1 	bhi.w	8006cf0 <HAL_RCC_GetSysClockFreq+0x248>
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_RCC_GetSysClockFreq+0x114>
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d056      	beq.n	8006c68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006bba:	e099      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bbc:	4b6f      	ldr	r3, [pc, #444]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d02d      	beq.n	8006c24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bc8:	4b6c      	ldr	r3, [pc, #432]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	08db      	lsrs	r3, r3, #3
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	4a6b      	ldr	r2, [pc, #428]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf2:	4b62      	ldr	r3, [pc, #392]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006c22:	e087      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c36:	4b51      	ldr	r3, [pc, #324]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c66:	e065      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c7a:	4b40      	ldr	r3, [pc, #256]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006caa:	e043      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cee:	e021      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006d94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d02:	4b1e      	ldr	r3, [pc, #120]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d32:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006d34:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	0a5b      	lsrs	r3, r3, #9
 8006d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3e:	3301      	adds	r3, #1
 8006d40:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	ee07 3a90 	vmov	s15, r3
 8006d48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d58:	ee17 3a90 	vmov	r3, s15
 8006d5c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006d5e:	e005      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	61bb      	str	r3, [r7, #24]
    break;
 8006d64:	e002      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006d66:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d68:	61bb      	str	r3, [r7, #24]
    break;
 8006d6a:	bf00      	nop
  }

  return sysclockfreq;
 8006d6c:	69bb      	ldr	r3, [r7, #24]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3724      	adds	r7, #36	; 0x24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	58024400 	.word	0x58024400
 8006d80:	03d09000 	.word	0x03d09000
 8006d84:	003d0900 	.word	0x003d0900
 8006d88:	017d7840 	.word	0x017d7840
 8006d8c:	46000000 	.word	0x46000000
 8006d90:	4c742400 	.word	0x4c742400
 8006d94:	4a742400 	.word	0x4a742400
 8006d98:	4bbebc20 	.word	0x4bbebc20

08006d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006da2:	f7ff fe81 	bl	8006aa8 <HAL_RCC_GetSysClockFreq>
 8006da6:	4602      	mov	r2, r0
 8006da8:	4b10      	ldr	r3, [pc, #64]	; (8006dec <HAL_RCC_GetHCLKFreq+0x50>)
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	0a1b      	lsrs	r3, r3, #8
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	490f      	ldr	r1, [pc, #60]	; (8006df0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006db4:	5ccb      	ldrb	r3, [r1, r3]
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <HAL_RCC_GetHCLKFreq+0x50>)
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	4a09      	ldr	r2, [pc, #36]	; (8006df0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dca:	5cd3      	ldrb	r3, [r2, r3]
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd6:	4a07      	ldr	r2, [pc, #28]	; (8006df4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dda:	4a07      	ldr	r2, [pc, #28]	; (8006df8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006de0:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006de2:	681b      	ldr	r3, [r3, #0]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	58024400 	.word	0x58024400
 8006df0:	0800e840 	.word	0x0800e840
 8006df4:	24000004 	.word	0x24000004
 8006df8:	24000000 	.word	0x24000000

08006dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e00:	f7ff ffcc 	bl	8006d9c <HAL_RCC_GetHCLKFreq>
 8006e04:	4602      	mov	r2, r0
 8006e06:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	091b      	lsrs	r3, r3, #4
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	4904      	ldr	r1, [pc, #16]	; (8006e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e12:	5ccb      	ldrb	r3, [r1, r3]
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	58024400 	.word	0x58024400
 8006e24:	0800e840 	.word	0x0800e840

08006e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e2c:	f7ff ffb6 	bl	8006d9c <HAL_RCC_GetHCLKFreq>
 8006e30:	4602      	mov	r2, r0
 8006e32:	4b06      	ldr	r3, [pc, #24]	; (8006e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	4904      	ldr	r1, [pc, #16]	; (8006e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e3e:	5ccb      	ldrb	r3, [r1, r3]
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	58024400 	.word	0x58024400
 8006e50:	0800e840 	.word	0x0800e840

08006e54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	223f      	movs	r2, #63	; 0x3f
 8006e62:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e64:	4b1a      	ldr	r3, [pc, #104]	; (8006ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	f003 0207 	and.w	r2, r3, #7
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006e70:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006e7c:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	f003 020f 	and.w	r2, r3, #15
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006e88:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006e94:	4b0e      	ldr	r3, [pc, #56]	; (8006ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006eac:	4b08      	ldr	r3, [pc, #32]	; (8006ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <HAL_RCC_GetClockConfig+0x80>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 020f 	and.w	r2, r3, #15
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	601a      	str	r2, [r3, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	58024400 	.word	0x58024400
 8006ed4:	52002000 	.word	0x52002000

08006ed8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d03f      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006efc:	d02a      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006efe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f02:	d824      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f08:	d018      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f0e:	d81e      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f18:	d007      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f1a:	e018      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1c:	4bab      	ldr	r3, [pc, #684]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4aaa      	ldr	r2, [pc, #680]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f28:	e015      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	2102      	movs	r1, #2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 f9cf 	bl	80082d4 <RCCEx_PLL2_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f3a:	e00c      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3324      	adds	r3, #36	; 0x24
 8006f40:	2102      	movs	r1, #2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 fa78 	bl	8008438 <RCCEx_PLL3_Config>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f4c:	e003      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	75fb      	strb	r3, [r7, #23]
      break;
 8006f52:	e000      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f5c:	4b9b      	ldr	r3, [pc, #620]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f68:	4998      	ldr	r1, [pc, #608]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	650b      	str	r3, [r1, #80]	; 0x50
 8006f6e:	e001      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d03d      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d826      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fa5 	.word	0x08006fa5
 8006f94:	08006fb3 	.word	0x08006fb3
 8006f98:	08006fc5 	.word	0x08006fc5
 8006f9c:	08006fdd 	.word	0x08006fdd
 8006fa0:	08006fdd 	.word	0x08006fdd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fa4:	4b89      	ldr	r3, [pc, #548]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	4a88      	ldr	r2, [pc, #544]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fb0:	e015      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 f98b 	bl	80082d4 <RCCEx_PLL2_Config>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc2:	e00c      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3324      	adds	r3, #36	; 0x24
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 fa34 	bl	8008438 <RCCEx_PLL3_Config>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fd4:	e003      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fda:	e000      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d109      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fe4:	4b79      	ldr	r3, [pc, #484]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe8:	f023 0207 	bic.w	r2, r3, #7
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff0:	4976      	ldr	r1, [pc, #472]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	650b      	str	r3, [r1, #80]	; 0x50
 8006ff6:	e001      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007004:	2b00      	cmp	r3, #0
 8007006:	d042      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007010:	d02b      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007016:	d825      	bhi.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007018:	2bc0      	cmp	r3, #192	; 0xc0
 800701a:	d028      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800701c:	2bc0      	cmp	r3, #192	; 0xc0
 800701e:	d821      	bhi.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007020:	2b80      	cmp	r3, #128	; 0x80
 8007022:	d016      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d81d      	bhi.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800702c:	2b40      	cmp	r3, #64	; 0x40
 800702e:	d007      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007030:	e018      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007032:	4b66      	ldr	r3, [pc, #408]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	4a65      	ldr	r2, [pc, #404]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800703c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800703e:	e017      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3304      	adds	r3, #4
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f001 f944 	bl	80082d4 <RCCEx_PLL2_Config>
 800704c:	4603      	mov	r3, r0
 800704e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007050:	e00e      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3324      	adds	r3, #36	; 0x24
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f001 f9ed 	bl	8008438 <RCCEx_PLL3_Config>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007062:	e005      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	75fb      	strb	r3, [r7, #23]
      break;
 8007068:	e002      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800706a:	bf00      	nop
 800706c:	e000      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800706e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007076:	4b55      	ldr	r3, [pc, #340]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007082:	4952      	ldr	r1, [pc, #328]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007084:	4313      	orrs	r3, r2
 8007086:	650b      	str	r3, [r1, #80]	; 0x50
 8007088:	e001      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007096:	2b00      	cmp	r3, #0
 8007098:	d049      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070a4:	d030      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80070a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070aa:	d82a      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070b0:	d02c      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80070b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070b6:	d824      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070bc:	d018      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80070be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070c2:	d81e      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80070c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070cc:	d007      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x206>
 80070ce:	e018      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d0:	4b3e      	ldr	r3, [pc, #248]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	4a3d      	ldr	r2, [pc, #244]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070dc:	e017      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3304      	adds	r3, #4
 80070e2:	2100      	movs	r1, #0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 f8f5 	bl	80082d4 <RCCEx_PLL2_Config>
 80070ea:	4603      	mov	r3, r0
 80070ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070ee:	e00e      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3324      	adds	r3, #36	; 0x24
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 f99e 	bl	8008438 <RCCEx_PLL3_Config>
 80070fc:	4603      	mov	r3, r0
 80070fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007100:	e005      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	75fb      	strb	r3, [r7, #23]
      break;
 8007106:	e002      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007108:	bf00      	nop
 800710a:	e000      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800710c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007114:	4b2d      	ldr	r3, [pc, #180]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007118:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007122:	492a      	ldr	r1, [pc, #168]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007124:	4313      	orrs	r3, r2
 8007126:	658b      	str	r3, [r1, #88]	; 0x58
 8007128:	e001      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007136:	2b00      	cmp	r3, #0
 8007138:	d04c      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007144:	d030      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800714a:	d82a      	bhi.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800714c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007150:	d02c      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007152:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007156:	d824      	bhi.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800715c:	d018      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800715e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007162:	d81e      	bhi.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800716c:	d007      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800716e:	e018      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007170:	4b16      	ldr	r3, [pc, #88]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	4a15      	ldr	r2, [pc, #84]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800717a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800717c:	e017      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3304      	adds	r3, #4
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f001 f8a5 	bl	80082d4 <RCCEx_PLL2_Config>
 800718a:	4603      	mov	r3, r0
 800718c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800718e:	e00e      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3324      	adds	r3, #36	; 0x24
 8007194:	2100      	movs	r1, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f001 f94e 	bl	8008438 <RCCEx_PLL3_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071a0:	e005      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	75fb      	strb	r3, [r7, #23]
      break;
 80071a6:	e002      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80071a8:	bf00      	nop
 80071aa:	e000      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80071ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10d      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071c2:	4902      	ldr	r1, [pc, #8]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	658b      	str	r3, [r1, #88]	; 0x58
 80071c8:	e004      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80071ca:	bf00      	nop
 80071cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d032      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e4:	2b30      	cmp	r3, #48	; 0x30
 80071e6:	d01c      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80071e8:	2b30      	cmp	r3, #48	; 0x30
 80071ea:	d817      	bhi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80071ec:	2b20      	cmp	r3, #32
 80071ee:	d00c      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80071f0:	2b20      	cmp	r3, #32
 80071f2:	d813      	bhi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d016      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80071f8:	2b10      	cmp	r3, #16
 80071fa:	d10f      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071fc:	4baf      	ldr	r3, [pc, #700]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4aae      	ldr	r2, [pc, #696]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007208:	e00e      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3304      	adds	r3, #4
 800720e:	2102      	movs	r1, #2
 8007210:	4618      	mov	r0, r3
 8007212:	f001 f85f 	bl	80082d4 <RCCEx_PLL2_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800721a:	e005      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	75fb      	strb	r3, [r7, #23]
      break;
 8007220:	e002      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007222:	bf00      	nop
 8007224:	e000      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d109      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800722e:	4ba3      	ldr	r3, [pc, #652]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007232:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723a:	49a0      	ldr	r1, [pc, #640]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800723c:	4313      	orrs	r3, r2
 800723e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007240:	e001      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d047      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800725a:	d030      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800725c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007260:	d82a      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007262:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007266:	d02c      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007268:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800726c:	d824      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800726e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007272:	d018      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007278:	d81e      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800727e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007282:	d007      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007284:	e018      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007286:	4b8d      	ldr	r3, [pc, #564]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	4a8c      	ldr	r2, [pc, #560]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800728c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007290:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007292:	e017      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3304      	adds	r3, #4
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f001 f81a 	bl	80082d4 <RCCEx_PLL2_Config>
 80072a0:	4603      	mov	r3, r0
 80072a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072a4:	e00e      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3324      	adds	r3, #36	; 0x24
 80072aa:	2100      	movs	r1, #0
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 f8c3 	bl	8008438 <RCCEx_PLL3_Config>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072b6:	e005      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	75fb      	strb	r3, [r7, #23]
      break;
 80072bc:	e002      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80072be:	bf00      	nop
 80072c0:	e000      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80072c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072ca:	4b7c      	ldr	r3, [pc, #496]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d6:	4979      	ldr	r1, [pc, #484]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	650b      	str	r3, [r1, #80]	; 0x50
 80072dc:	e001      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d049      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072f6:	d02e      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80072f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072fc:	d828      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80072fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007302:	d02a      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007304:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007308:	d822      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800730a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800730e:	d026      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007310:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007314:	d81c      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731a:	d010      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800731c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007320:	d816      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01d      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732a:	d111      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3304      	adds	r3, #4
 8007330:	2101      	movs	r1, #1
 8007332:	4618      	mov	r0, r3
 8007334:	f000 ffce 	bl	80082d4 <RCCEx_PLL2_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800733c:	e012      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3324      	adds	r3, #36	; 0x24
 8007342:	2101      	movs	r1, #1
 8007344:	4618      	mov	r0, r3
 8007346:	f001 f877 	bl	8008438 <RCCEx_PLL3_Config>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800734e:	e009      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	75fb      	strb	r3, [r7, #23]
      break;
 8007354:	e006      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007356:	bf00      	nop
 8007358:	e004      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800735a:	bf00      	nop
 800735c:	e002      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d109      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800736a:	4b54      	ldr	r3, [pc, #336]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800736c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007376:	4951      	ldr	r1, [pc, #324]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007378:	4313      	orrs	r3, r2
 800737a:	650b      	str	r3, [r1, #80]	; 0x50
 800737c:	e001      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d04b      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007398:	d02e      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800739a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800739e:	d828      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a4:	d02a      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073aa:	d822      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073b0:	d026      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80073b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073b6:	d81c      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073bc:	d010      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80073be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c2:	d816      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01d      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80073c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073cc:	d111      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3304      	adds	r3, #4
 80073d2:	2101      	movs	r1, #1
 80073d4:	4618      	mov	r0, r3
 80073d6:	f000 ff7d 	bl	80082d4 <RCCEx_PLL2_Config>
 80073da:	4603      	mov	r3, r0
 80073dc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073de:	e012      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3324      	adds	r3, #36	; 0x24
 80073e4:	2101      	movs	r1, #1
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 f826 	bl	8008438 <RCCEx_PLL3_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073f0:	e009      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	75fb      	strb	r3, [r7, #23]
      break;
 80073f6:	e006      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80073f8:	bf00      	nop
 80073fa:	e004      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80073fc:	bf00      	nop
 80073fe:	e002      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007400:	bf00      	nop
 8007402:	e000      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800740c:	4b2b      	ldr	r3, [pc, #172]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800740e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007410:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800741a:	4928      	ldr	r1, [pc, #160]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800741c:	4313      	orrs	r3, r2
 800741e:	658b      	str	r3, [r1, #88]	; 0x58
 8007420:	e001      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d02f      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800743a:	d00e      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800743c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007440:	d814      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d015      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800744a:	d10f      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800744c:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	4a1a      	ldr	r2, [pc, #104]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007458:	e00c      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3304      	adds	r3, #4
 800745e:	2101      	movs	r1, #1
 8007460:	4618      	mov	r0, r3
 8007462:	f000 ff37 	bl	80082d4 <RCCEx_PLL2_Config>
 8007466:	4603      	mov	r3, r0
 8007468:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800746a:	e003      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
      break;
 8007470:	e000      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800747a:	4b10      	ldr	r3, [pc, #64]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800747c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007486:	490d      	ldr	r1, [pc, #52]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007488:	4313      	orrs	r3, r2
 800748a:	650b      	str	r3, [r1, #80]	; 0x50
 800748c:	e001      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d033      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d81c      	bhi.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	080074e7 	.word	0x080074e7
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	080074cf 	.word	0x080074cf
 80074b8:	080074e7 	.word	0x080074e7
 80074bc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c0:	4bb8      	ldr	r3, [pc, #736]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	4ab7      	ldr	r2, [pc, #732]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074cc:	e00c      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3304      	adds	r3, #4
 80074d2:	2102      	movs	r1, #2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fefd 	bl	80082d4 <RCCEx_PLL2_Config>
 80074da:	4603      	mov	r3, r0
 80074dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074de:	e003      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	75fb      	strb	r3, [r7, #23]
      break;
 80074e4:	e000      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80074e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074ee:	4bad      	ldr	r3, [pc, #692]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f2:	f023 0203 	bic.w	r2, r3, #3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fa:	49aa      	ldr	r1, [pc, #680]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007500:	e001      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 8086 	beq.w	8007620 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007514:	4ba4      	ldr	r3, [pc, #656]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4aa3      	ldr	r2, [pc, #652]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800751a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800751e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007520:	f7fb fb6c 	bl	8002bfc <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007526:	e009      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007528:	f7fb fb68 	bl	8002bfc <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b64      	cmp	r3, #100	; 0x64
 8007534:	d902      	bls.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	75fb      	strb	r3, [r7, #23]
        break;
 800753a:	e005      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800753c:	4b9a      	ldr	r3, [pc, #616]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0ef      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007548:	7dfb      	ldrb	r3, [r7, #23]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d166      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800754e:	4b95      	ldr	r3, [pc, #596]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007558:	4053      	eors	r3, r2
 800755a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755e:	2b00      	cmp	r3, #0
 8007560:	d013      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007562:	4b90      	ldr	r3, [pc, #576]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800756c:	4b8d      	ldr	r3, [pc, #564]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800756e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007570:	4a8c      	ldr	r2, [pc, #560]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007576:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007578:	4b8a      	ldr	r3, [pc, #552]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800757a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757c:	4a89      	ldr	r2, [pc, #548]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800757e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007582:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007584:	4a87      	ldr	r2, [pc, #540]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007594:	d115      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007596:	f7fb fb31 	bl	8002bfc <HAL_GetTick>
 800759a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800759c:	e00b      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800759e:	f7fb fb2d 	bl	8002bfc <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d902      	bls.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	75fb      	strb	r3, [r7, #23]
            break;
 80075b4:	e005      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075b6:	4b7b      	ldr	r3, [pc, #492]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0ed      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d126      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075d6:	d10d      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80075d8:	4b72      	ldr	r3, [pc, #456]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075e6:	0919      	lsrs	r1, r3, #4
 80075e8:	4b70      	ldr	r3, [pc, #448]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80075ea:	400b      	ands	r3, r1
 80075ec:	496d      	ldr	r1, [pc, #436]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	610b      	str	r3, [r1, #16]
 80075f2:	e005      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80075f4:	4b6b      	ldr	r3, [pc, #428]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	4a6a      	ldr	r2, [pc, #424]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80075fe:	6113      	str	r3, [r2, #16]
 8007600:	4b68      	ldr	r3, [pc, #416]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800760a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800760e:	4965      	ldr	r1, [pc, #404]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007610:	4313      	orrs	r3, r2
 8007612:	670b      	str	r3, [r1, #112]	; 0x70
 8007614:	e004      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	75bb      	strb	r3, [r7, #22]
 800761a:	e001      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d07e      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007630:	2b28      	cmp	r3, #40	; 0x28
 8007632:	d867      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007634:	a201      	add	r2, pc, #4	; (adr r2, 800763c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	0800770b 	.word	0x0800770b
 8007640:	08007705 	.word	0x08007705
 8007644:	08007705 	.word	0x08007705
 8007648:	08007705 	.word	0x08007705
 800764c:	08007705 	.word	0x08007705
 8007650:	08007705 	.word	0x08007705
 8007654:	08007705 	.word	0x08007705
 8007658:	08007705 	.word	0x08007705
 800765c:	080076e1 	.word	0x080076e1
 8007660:	08007705 	.word	0x08007705
 8007664:	08007705 	.word	0x08007705
 8007668:	08007705 	.word	0x08007705
 800766c:	08007705 	.word	0x08007705
 8007670:	08007705 	.word	0x08007705
 8007674:	08007705 	.word	0x08007705
 8007678:	08007705 	.word	0x08007705
 800767c:	080076f3 	.word	0x080076f3
 8007680:	08007705 	.word	0x08007705
 8007684:	08007705 	.word	0x08007705
 8007688:	08007705 	.word	0x08007705
 800768c:	08007705 	.word	0x08007705
 8007690:	08007705 	.word	0x08007705
 8007694:	08007705 	.word	0x08007705
 8007698:	08007705 	.word	0x08007705
 800769c:	0800770b 	.word	0x0800770b
 80076a0:	08007705 	.word	0x08007705
 80076a4:	08007705 	.word	0x08007705
 80076a8:	08007705 	.word	0x08007705
 80076ac:	08007705 	.word	0x08007705
 80076b0:	08007705 	.word	0x08007705
 80076b4:	08007705 	.word	0x08007705
 80076b8:	08007705 	.word	0x08007705
 80076bc:	0800770b 	.word	0x0800770b
 80076c0:	08007705 	.word	0x08007705
 80076c4:	08007705 	.word	0x08007705
 80076c8:	08007705 	.word	0x08007705
 80076cc:	08007705 	.word	0x08007705
 80076d0:	08007705 	.word	0x08007705
 80076d4:	08007705 	.word	0x08007705
 80076d8:	08007705 	.word	0x08007705
 80076dc:	0800770b 	.word	0x0800770b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3304      	adds	r3, #4
 80076e4:	2101      	movs	r1, #1
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fdf4 	bl	80082d4 <RCCEx_PLL2_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076f0:	e00c      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3324      	adds	r3, #36	; 0x24
 80076f6:	2101      	movs	r1, #1
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fe9d 	bl	8008438 <RCCEx_PLL3_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007702:	e003      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
      break;
 8007708:	e000      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800770a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007712:	4b24      	ldr	r3, [pc, #144]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007716:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800771e:	4921      	ldr	r1, [pc, #132]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007720:	4313      	orrs	r3, r2
 8007722:	654b      	str	r3, [r1, #84]	; 0x54
 8007724:	e001      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007726:	7dfb      	ldrb	r3, [r7, #23]
 8007728:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d03e      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773a:	2b05      	cmp	r3, #5
 800773c:	d820      	bhi.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	08007787 	.word	0x08007787
 8007748:	0800775d 	.word	0x0800775d
 800774c:	0800776f 	.word	0x0800776f
 8007750:	08007787 	.word	0x08007787
 8007754:	08007787 	.word	0x08007787
 8007758:	08007787 	.word	0x08007787
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3304      	adds	r3, #4
 8007760:	2101      	movs	r1, #1
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fdb6 	bl	80082d4 <RCCEx_PLL2_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800776c:	e00c      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3324      	adds	r3, #36	; 0x24
 8007772:	2101      	movs	r1, #1
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fe5f 	bl	8008438 <RCCEx_PLL3_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800777e:	e003      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	75fb      	strb	r3, [r7, #23]
      break;
 8007784:	e000      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d110      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800778e:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007792:	f023 0207 	bic.w	r2, r3, #7
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779a:	4902      	ldr	r1, [pc, #8]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800779c:	4313      	orrs	r3, r2
 800779e:	654b      	str	r3, [r1, #84]	; 0x54
 80077a0:	e008      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80077a2:	bf00      	nop
 80077a4:	58024400 	.word	0x58024400
 80077a8:	58024800 	.word	0x58024800
 80077ac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d039      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d820      	bhi.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	08007813 	.word	0x08007813
 80077d4:	080077e9 	.word	0x080077e9
 80077d8:	080077fb 	.word	0x080077fb
 80077dc:	08007813 	.word	0x08007813
 80077e0:	08007813 	.word	0x08007813
 80077e4:	08007813 	.word	0x08007813
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	2101      	movs	r1, #1
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 fd70 	bl	80082d4 <RCCEx_PLL2_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077f8:	e00c      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3324      	adds	r3, #36	; 0x24
 80077fe:	2101      	movs	r1, #1
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fe19 	bl	8008438 <RCCEx_PLL3_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800780a:	e003      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	75fb      	strb	r3, [r7, #23]
      break;
 8007810:	e000      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800781a:	4bb7      	ldr	r3, [pc, #732]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800781c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781e:	f023 0207 	bic.w	r2, r3, #7
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007828:	49b3      	ldr	r1, [pc, #716]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800782a:	4313      	orrs	r3, r2
 800782c:	658b      	str	r3, [r1, #88]	; 0x58
 800782e:	e001      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d04b      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800784a:	d02e      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800784c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007850:	d828      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007856:	d02a      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785c:	d822      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800785e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007862:	d026      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007864:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007868:	d81c      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800786a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800786e:	d010      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007874:	d816      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d01d      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800787a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800787e:	d111      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3304      	adds	r3, #4
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fd24 	bl	80082d4 <RCCEx_PLL2_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007890:	e012      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3324      	adds	r3, #36	; 0x24
 8007896:	2102      	movs	r1, #2
 8007898:	4618      	mov	r0, r3
 800789a:	f000 fdcd 	bl	8008438 <RCCEx_PLL3_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078a2:	e009      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	75fb      	strb	r3, [r7, #23]
      break;
 80078a8:	e006      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078aa:	bf00      	nop
 80078ac:	e004      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078ae:	bf00      	nop
 80078b0:	e002      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078b2:	bf00      	nop
 80078b4:	e000      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078be:	4b8e      	ldr	r3, [pc, #568]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078cc:	498a      	ldr	r1, [pc, #552]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	654b      	str	r3, [r1, #84]	; 0x54
 80078d2:	e001      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d04b      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078ee:	d02e      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80078f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078f4:	d828      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80078f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fa:	d02a      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80078fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007900:	d822      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007906:	d026      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007908:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800790c:	d81c      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800790e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007912:	d010      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007918:	d816      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01d      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800791e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007922:	d111      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fcd2 	bl	80082d4 <RCCEx_PLL2_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007934:	e012      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3324      	adds	r3, #36	; 0x24
 800793a:	2102      	movs	r1, #2
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fd7b 	bl	8008438 <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007946:	e009      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	75fb      	strb	r3, [r7, #23]
      break;
 800794c:	e006      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800794e:	bf00      	nop
 8007950:	e004      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007952:	bf00      	nop
 8007954:	e002      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007956:	bf00      	nop
 8007958:	e000      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800795a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007962:	4b65      	ldr	r3, [pc, #404]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007966:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007970:	4961      	ldr	r1, [pc, #388]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007972:	4313      	orrs	r3, r2
 8007974:	658b      	str	r3, [r1, #88]	; 0x58
 8007976:	e001      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007984:	2b00      	cmp	r3, #0
 8007986:	d04b      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800798e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007992:	d02e      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007994:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007998:	d828      	bhi.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800799a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800799e:	d02a      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80079a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a4:	d822      	bhi.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079aa:	d026      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80079ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079b0:	d81c      	bhi.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079b6:	d010      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80079b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079bc:	d816      	bhi.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01d      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80079c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c6:	d111      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3304      	adds	r3, #4
 80079cc:	2100      	movs	r1, #0
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fc80 	bl	80082d4 <RCCEx_PLL2_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079d8:	e012      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3324      	adds	r3, #36	; 0x24
 80079de:	2102      	movs	r1, #2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fd29 	bl	8008438 <RCCEx_PLL3_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079ea:	e009      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	75fb      	strb	r3, [r7, #23]
      break;
 80079f0:	e006      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079f2:	bf00      	nop
 80079f4:	e004      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079f6:	bf00      	nop
 80079f8:	e002      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079fa:	bf00      	nop
 80079fc:	e000      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a06:	4b3c      	ldr	r3, [pc, #240]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a14:	4938      	ldr	r1, [pc, #224]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	658b      	str	r3, [r1, #88]	; 0x58
 8007a1a:	e001      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01a      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a36:	d10a      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3324      	adds	r3, #36	; 0x24
 8007a3c:	2102      	movs	r1, #2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fcfa 	bl	8008438 <RCCEx_PLL3_Config>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a4e:	4b2a      	ldr	r3, [pc, #168]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a5c:	4926      	ldr	r1, [pc, #152]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a78:	d10a      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3324      	adds	r3, #36	; 0x24
 8007a7e:	2102      	movs	r1, #2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fcd9 	bl	8008438 <RCCEx_PLL3_Config>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a90:	4b19      	ldr	r3, [pc, #100]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a9e:	4916      	ldr	r1, [pc, #88]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d036      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aba:	d01f      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ac0:	d817      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aca:	d009      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007acc:	e011      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fbfd 	bl	80082d4 <RCCEx_PLL2_Config>
 8007ada:	4603      	mov	r3, r0
 8007adc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ade:	e00e      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3324      	adds	r3, #36	; 0x24
 8007ae4:	2102      	movs	r1, #2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fca6 	bl	8008438 <RCCEx_PLL3_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007af0:	e005      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
      break;
 8007af6:	e002      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007af8:	58024400 	.word	0x58024400
      break;
 8007afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b04:	4b93      	ldr	r3, [pc, #588]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b12:	4990      	ldr	r1, [pc, #576]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	658b      	str	r3, [r1, #88]	; 0x58
 8007b18:	e001      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d033      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b34:	d01c      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b3a:	d816      	bhi.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b40:	d003      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b46:	d007      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007b48:	e00f      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4a:	4b82      	ldr	r3, [pc, #520]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	4a81      	ldr	r2, [pc, #516]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b56:	e00c      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3324      	adds	r3, #36	; 0x24
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fc6a 	bl	8008438 <RCCEx_PLL3_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b68:	e003      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6e:	e000      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b78:	4b76      	ldr	r3, [pc, #472]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b86:	4973      	ldr	r1, [pc, #460]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	654b      	str	r3, [r1, #84]	; 0x54
 8007b8c:	e001      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d029      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007baa:	d007      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007bac:	e00f      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bae:	4b69      	ldr	r3, [pc, #420]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	4a68      	ldr	r2, [pc, #416]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bba:	e00b      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	2102      	movs	r1, #2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fb86 	bl	80082d4 <RCCEx_PLL2_Config>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bcc:	e002      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bda:	4b5e      	ldr	r3, [pc, #376]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be6:	495b      	ldr	r1, [pc, #364]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007bec:	e001      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3324      	adds	r3, #36	; 0x24
 8007c02:	2102      	movs	r1, #2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 fc17 	bl	8008438 <RCCEx_PLL3_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d030      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c28:	d017      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c2e:	d811      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c34:	d013      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3a:	d80b      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d010      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c44:	d106      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c46:	4b43      	ldr	r3, [pc, #268]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	4a42      	ldr	r2, [pc, #264]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c52:	e007      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	75fb      	strb	r3, [r7, #23]
      break;
 8007c58:	e004      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c5a:	bf00      	nop
 8007c5c:	e002      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c5e:	bf00      	nop
 8007c60:	e000      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c6a:	4b3a      	ldr	r3, [pc, #232]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c76:	4937      	ldr	r1, [pc, #220]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	654b      	str	r3, [r1, #84]	; 0x54
 8007c7c:	e001      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c8e:	4b31      	ldr	r3, [pc, #196]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	492e      	ldr	r1, [pc, #184]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d009      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007cac:	4b29      	ldr	r3, [pc, #164]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007cba:	4926      	ldr	r1, [pc, #152]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ccc:	4b21      	ldr	r3, [pc, #132]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cd8:	491e      	ldr	r1, [pc, #120]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00d      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cea:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	4a19      	ldr	r2, [pc, #100]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cf4:	6113      	str	r3, [r2, #16]
 8007cf6:	4b17      	ldr	r3, [pc, #92]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf8:	691a      	ldr	r2, [r3, #16]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007d00:	4914      	ldr	r1, [pc, #80]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	da08      	bge.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d0e:	4b11      	ldr	r3, [pc, #68]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d1a:	490e      	ldr	r1, [pc, #56]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d009      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d2c:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3a:	4906      	ldr	r1, [pc, #24]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007d40:	7dbb      	ldrb	r3, [r7, #22]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	e000      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	58024400 	.word	0x58024400

08007d58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d5c:	f7ff f81e 	bl	8006d9c <HAL_RCC_GetHCLKFreq>
 8007d60:	4602      	mov	r2, r0
 8007d62:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	091b      	lsrs	r3, r3, #4
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	4904      	ldr	r1, [pc, #16]	; (8007d80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d6e:	5ccb      	ldrb	r3, [r1, r3]
 8007d70:	f003 031f 	and.w	r3, r3, #31
 8007d74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	58024400 	.word	0x58024400
 8007d80:	0800e840 	.word	0x0800e840

08007d84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b089      	sub	sp, #36	; 0x24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d8c:	4ba1      	ldr	r3, [pc, #644]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d90:	f003 0303 	and.w	r3, r3, #3
 8007d94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d96:	4b9f      	ldr	r3, [pc, #636]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	0b1b      	lsrs	r3, r3, #12
 8007d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007da0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007da2:	4b9c      	ldr	r3, [pc, #624]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da6:	091b      	lsrs	r3, r3, #4
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007dae:	4b99      	ldr	r3, [pc, #612]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db2:	08db      	lsrs	r3, r3, #3
 8007db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	fb02 f303 	mul.w	r3, r2, r3
 8007dbe:	ee07 3a90 	vmov	s15, r3
 8007dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8111 	beq.w	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	f000 8083 	beq.w	8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	f200 80a1 	bhi.w	8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d056      	beq.n	8007e9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007dee:	e099      	b.n	8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007df0:	4b88      	ldr	r3, [pc, #544]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d02d      	beq.n	8007e58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dfc:	4b85      	ldr	r3, [pc, #532]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	08db      	lsrs	r3, r3, #3
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	4a84      	ldr	r2, [pc, #528]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e08:	fa22 f303 	lsr.w	r3, r2, r3
 8007e0c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	ee07 3a90 	vmov	s15, r3
 8007e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	ee07 3a90 	vmov	s15, r3
 8007e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e26:	4b7b      	ldr	r3, [pc, #492]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800801c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e56:	e087      	b.n	8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	ee07 3a90 	vmov	s15, r3
 8007e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6a:	4b6a      	ldr	r3, [pc, #424]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800801c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e9a:	e065      	b.n	8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eae:	4b59      	ldr	r3, [pc, #356]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ec2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800801c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ede:	e043      	b.n	8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ef2:	4b48      	ldr	r3, [pc, #288]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f06:	eddf 5a45 	vldr	s11, [pc, #276]	; 800801c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f22:	e021      	b.n	8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f36:	4b37      	ldr	r3, [pc, #220]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800801c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f68:	4b2a      	ldr	r3, [pc, #168]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	0a5b      	lsrs	r3, r3, #9
 8007f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f8e:	ee17 2a90 	vmov	r2, s15
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f96:	4b1f      	ldr	r3, [pc, #124]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9a:	0c1b      	lsrs	r3, r3, #16
 8007f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa0:	ee07 3a90 	vmov	s15, r3
 8007fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fbc:	ee17 2a90 	vmov	r2, s15
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007fc4:	4b13      	ldr	r3, [pc, #76]	; (8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	0e1b      	lsrs	r3, r3, #24
 8007fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fea:	ee17 2a90 	vmov	r2, s15
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ff2:	e008      	b.n	8008006 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	609a      	str	r2, [r3, #8]
}
 8008006:	bf00      	nop
 8008008:	3724      	adds	r7, #36	; 0x24
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	58024400 	.word	0x58024400
 8008018:	03d09000 	.word	0x03d09000
 800801c:	46000000 	.word	0x46000000
 8008020:	4c742400 	.word	0x4c742400
 8008024:	4a742400 	.word	0x4a742400
 8008028:	4bbebc20 	.word	0x4bbebc20

0800802c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800802c:	b480      	push	{r7}
 800802e:	b089      	sub	sp, #36	; 0x24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008034:	4ba1      	ldr	r3, [pc, #644]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	f003 0303 	and.w	r3, r3, #3
 800803c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800803e:	4b9f      	ldr	r3, [pc, #636]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	0d1b      	lsrs	r3, r3, #20
 8008044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008048:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800804a:	4b9c      	ldr	r3, [pc, #624]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800804c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804e:	0a1b      	lsrs	r3, r3, #8
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008056:	4b99      	ldr	r3, [pc, #612]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805a:	08db      	lsrs	r3, r3, #3
 800805c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	fb02 f303 	mul.w	r3, r2, r3
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8111 	beq.w	800829c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	2b02      	cmp	r3, #2
 800807e:	f000 8083 	beq.w	8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b02      	cmp	r3, #2
 8008086:	f200 80a1 	bhi.w	80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d056      	beq.n	8008144 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008096:	e099      	b.n	80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008098:	4b88      	ldr	r3, [pc, #544]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d02d      	beq.n	8008100 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080a4:	4b85      	ldr	r3, [pc, #532]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	08db      	lsrs	r3, r3, #3
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	4a84      	ldr	r2, [pc, #528]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
 80080b4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	ee07 3a90 	vmov	s15, r3
 80080bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ce:	4b7b      	ldr	r3, [pc, #492]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080de:	ed97 6a03 	vldr	s12, [r7, #12]
 80080e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080fe:	e087      	b.n	8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800810e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008112:	4b6a      	ldr	r3, [pc, #424]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008122:	ed97 6a03 	vldr	s12, [r7, #12]
 8008126:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800812a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008142:	e065      	b.n	8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008156:	4b59      	ldr	r3, [pc, #356]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008166:	ed97 6a03 	vldr	s12, [r7, #12]
 800816a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800816e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008186:	e043      	b.n	8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008192:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819a:	4b48      	ldr	r3, [pc, #288]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800819c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081ca:	e021      	b.n	8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081de:	4b37      	ldr	r3, [pc, #220]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80081f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800820e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008210:	4b2a      	ldr	r3, [pc, #168]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	0a5b      	lsrs	r3, r3, #9
 8008216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800822a:	edd7 6a07 	vldr	s13, [r7, #28]
 800822e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008236:	ee17 2a90 	vmov	r2, s15
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800823e:	4b1f      	ldr	r3, [pc, #124]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	0c1b      	lsrs	r3, r3, #16
 8008244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008248:	ee07 3a90 	vmov	s15, r3
 800824c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008254:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008258:	edd7 6a07 	vldr	s13, [r7, #28]
 800825c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008264:	ee17 2a90 	vmov	r2, s15
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800826c:	4b13      	ldr	r3, [pc, #76]	; (80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	0e1b      	lsrs	r3, r3, #24
 8008272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008286:	edd7 6a07 	vldr	s13, [r7, #28]
 800828a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800828e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008292:	ee17 2a90 	vmov	r2, s15
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800829a:	e008      	b.n	80082ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	609a      	str	r2, [r3, #8]
}
 80082ae:	bf00      	nop
 80082b0:	3724      	adds	r7, #36	; 0x24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400
 80082c0:	03d09000 	.word	0x03d09000
 80082c4:	46000000 	.word	0x46000000
 80082c8:	4c742400 	.word	0x4c742400
 80082cc:	4a742400 	.word	0x4a742400
 80082d0:	4bbebc20 	.word	0x4bbebc20

080082d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082e2:	4b53      	ldr	r3, [pc, #332]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80082e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d101      	bne.n	80082f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e099      	b.n	8008426 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082f2:	4b4f      	ldr	r3, [pc, #316]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a4e      	ldr	r2, [pc, #312]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80082f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082fe:	f7fa fc7d 	bl	8002bfc <HAL_GetTick>
 8008302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008304:	e008      	b.n	8008318 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008306:	f7fa fc79 	bl	8002bfc <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e086      	b.n	8008426 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008318:	4b45      	ldr	r3, [pc, #276]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1f0      	bne.n	8008306 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008324:	4b42      	ldr	r3, [pc, #264]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 8008326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008328:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	031b      	lsls	r3, r3, #12
 8008332:	493f      	ldr	r1, [pc, #252]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 8008334:	4313      	orrs	r3, r2
 8008336:	628b      	str	r3, [r1, #40]	; 0x28
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	3b01      	subs	r3, #1
 800833e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	3b01      	subs	r3, #1
 8008348:	025b      	lsls	r3, r3, #9
 800834a:	b29b      	uxth	r3, r3
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	3b01      	subs	r3, #1
 8008354:	041b      	lsls	r3, r3, #16
 8008356:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	3b01      	subs	r3, #1
 8008362:	061b      	lsls	r3, r3, #24
 8008364:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008368:	4931      	ldr	r1, [pc, #196]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 800836a:	4313      	orrs	r3, r2
 800836c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800836e:	4b30      	ldr	r3, [pc, #192]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	492d      	ldr	r1, [pc, #180]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 800837c:	4313      	orrs	r3, r2
 800837e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008380:	4b2b      	ldr	r3, [pc, #172]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	f023 0220 	bic.w	r2, r3, #32
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	4928      	ldr	r1, [pc, #160]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 800838e:	4313      	orrs	r3, r2
 8008390:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008392:	4b27      	ldr	r3, [pc, #156]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 8008394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008396:	4a26      	ldr	r2, [pc, #152]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 8008398:	f023 0310 	bic.w	r3, r3, #16
 800839c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083a2:	4b24      	ldr	r3, [pc, #144]	; (8008434 <RCCEx_PLL2_Config+0x160>)
 80083a4:	4013      	ands	r3, r2
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	69d2      	ldr	r2, [r2, #28]
 80083aa:	00d2      	lsls	r2, r2, #3
 80083ac:	4920      	ldr	r1, [pc, #128]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083b2:	4b1f      	ldr	r3, [pc, #124]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	4a1e      	ldr	r2, [pc, #120]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083b8:	f043 0310 	orr.w	r3, r3, #16
 80083bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d106      	bne.n	80083d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083c4:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	4a19      	ldr	r2, [pc, #100]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083d0:	e00f      	b.n	80083f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d106      	bne.n	80083e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083d8:	4b15      	ldr	r3, [pc, #84]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	4a14      	ldr	r2, [pc, #80]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083e4:	e005      	b.n	80083f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083e6:	4b12      	ldr	r3, [pc, #72]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ea:	4a11      	ldr	r2, [pc, #68]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083f2:	4b0f      	ldr	r3, [pc, #60]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a0e      	ldr	r2, [pc, #56]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 80083f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083fe:	f7fa fbfd 	bl	8002bfc <HAL_GetTick>
 8008402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008404:	e008      	b.n	8008418 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008406:	f7fa fbf9 	bl	8002bfc <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d901      	bls.n	8008418 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e006      	b.n	8008426 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008418:	4b05      	ldr	r3, [pc, #20]	; (8008430 <RCCEx_PLL2_Config+0x15c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0f0      	beq.n	8008406 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	58024400 	.word	0x58024400
 8008434:	ffff0007 	.word	0xffff0007

08008438 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008446:	4b53      	ldr	r3, [pc, #332]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	f003 0303 	and.w	r3, r3, #3
 800844e:	2b03      	cmp	r3, #3
 8008450:	d101      	bne.n	8008456 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e099      	b.n	800858a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008456:	4b4f      	ldr	r3, [pc, #316]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a4e      	ldr	r2, [pc, #312]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 800845c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008462:	f7fa fbcb 	bl	8002bfc <HAL_GetTick>
 8008466:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008468:	e008      	b.n	800847c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800846a:	f7fa fbc7 	bl	8002bfc <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	2b02      	cmp	r3, #2
 8008476:	d901      	bls.n	800847c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e086      	b.n	800858a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800847c:	4b45      	ldr	r3, [pc, #276]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1f0      	bne.n	800846a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008488:	4b42      	ldr	r3, [pc, #264]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 800848a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	051b      	lsls	r3, r3, #20
 8008496:	493f      	ldr	r1, [pc, #252]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 8008498:	4313      	orrs	r3, r2
 800849a:	628b      	str	r3, [r1, #40]	; 0x28
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	025b      	lsls	r3, r3, #9
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	431a      	orrs	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	041b      	lsls	r3, r3, #16
 80084ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	061b      	lsls	r3, r3, #24
 80084c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084cc:	4931      	ldr	r1, [pc, #196]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084d2:	4b30      	ldr	r3, [pc, #192]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	492d      	ldr	r1, [pc, #180]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084e4:	4b2b      	ldr	r3, [pc, #172]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	4928      	ldr	r1, [pc, #160]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084f6:	4b27      	ldr	r3, [pc, #156]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	4a26      	ldr	r2, [pc, #152]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 80084fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008500:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008502:	4b24      	ldr	r3, [pc, #144]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 8008504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008506:	4b24      	ldr	r3, [pc, #144]	; (8008598 <RCCEx_PLL3_Config+0x160>)
 8008508:	4013      	ands	r3, r2
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	69d2      	ldr	r2, [r2, #28]
 800850e:	00d2      	lsls	r2, r2, #3
 8008510:	4920      	ldr	r1, [pc, #128]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 8008512:	4313      	orrs	r3, r2
 8008514:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008516:	4b1f      	ldr	r3, [pc, #124]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	4a1e      	ldr	r2, [pc, #120]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 800851c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008520:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d106      	bne.n	8008536 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008528:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	4a19      	ldr	r2, [pc, #100]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 800852e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008532:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008534:	e00f      	b.n	8008556 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d106      	bne.n	800854a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800853c:	4b15      	ldr	r3, [pc, #84]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	4a14      	ldr	r2, [pc, #80]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 8008542:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008546:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008548:	e005      	b.n	8008556 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800854a:	4b12      	ldr	r3, [pc, #72]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	4a11      	ldr	r2, [pc, #68]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 8008550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008554:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008556:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a0e      	ldr	r2, [pc, #56]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 800855c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008562:	f7fa fb4b 	bl	8002bfc <HAL_GetTick>
 8008566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008568:	e008      	b.n	800857c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800856a:	f7fa fb47 	bl	8002bfc <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	2b02      	cmp	r3, #2
 8008576:	d901      	bls.n	800857c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e006      	b.n	800858a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800857c:	4b05      	ldr	r3, [pc, #20]	; (8008594 <RCCEx_PLL3_Config+0x15c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0f0      	beq.n	800856a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008588:	7bfb      	ldrb	r3, [r7, #15]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	58024400 	.word	0x58024400
 8008598:	ffff0007 	.word	0xffff0007

0800859c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e049      	b.n	8008642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d106      	bne.n	80085c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f841 	bl	800864a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3304      	adds	r3, #4
 80085d8:	4619      	mov	r1, r3
 80085da:	4610      	mov	r0, r2
 80085dc:	f000 fa00 	bl	80089e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800864a:	b480      	push	{r7}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
	...

08008660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	d001      	beq.n	8008678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e054      	b.n	8008722 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0201 	orr.w	r2, r2, #1
 800868e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a26      	ldr	r2, [pc, #152]	; (8008730 <HAL_TIM_Base_Start_IT+0xd0>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d022      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a2:	d01d      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a22      	ldr	r2, [pc, #136]	; (8008734 <HAL_TIM_Base_Start_IT+0xd4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d018      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a21      	ldr	r2, [pc, #132]	; (8008738 <HAL_TIM_Base_Start_IT+0xd8>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d013      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1f      	ldr	r2, [pc, #124]	; (800873c <HAL_TIM_Base_Start_IT+0xdc>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d00e      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a1e      	ldr	r2, [pc, #120]	; (8008740 <HAL_TIM_Base_Start_IT+0xe0>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d009      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a1c      	ldr	r2, [pc, #112]	; (8008744 <HAL_TIM_Base_Start_IT+0xe4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d004      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a1b      	ldr	r2, [pc, #108]	; (8008748 <HAL_TIM_Base_Start_IT+0xe8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d115      	bne.n	800870c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689a      	ldr	r2, [r3, #8]
 80086e6:	4b19      	ldr	r3, [pc, #100]	; (800874c <HAL_TIM_Base_Start_IT+0xec>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b06      	cmp	r3, #6
 80086f0:	d015      	beq.n	800871e <HAL_TIM_Base_Start_IT+0xbe>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f8:	d011      	beq.n	800871e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f042 0201 	orr.w	r2, r2, #1
 8008708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800870a:	e008      	b.n	800871e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f042 0201 	orr.w	r2, r2, #1
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	e000      	b.n	8008720 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	40010000 	.word	0x40010000
 8008734:	40000400 	.word	0x40000400
 8008738:	40000800 	.word	0x40000800
 800873c:	40000c00 	.word	0x40000c00
 8008740:	40010400 	.word	0x40010400
 8008744:	40001800 	.word	0x40001800
 8008748:	40014000 	.word	0x40014000
 800874c:	00010007 	.word	0x00010007

08008750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b02      	cmp	r3, #2
 8008764:	d122      	bne.n	80087ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b02      	cmp	r3, #2
 8008772:	d11b      	bne.n	80087ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0202 	mvn.w	r2, #2
 800877c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f003 0303 	and.w	r3, r3, #3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f905 	bl	80089a2 <HAL_TIM_IC_CaptureCallback>
 8008798:	e005      	b.n	80087a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f8f7 	bl	800898e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f908 	bl	80089b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0304 	and.w	r3, r3, #4
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d122      	bne.n	8008800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d11b      	bne.n	8008800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0204 	mvn.w	r2, #4
 80087d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2202      	movs	r2, #2
 80087d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f8db 	bl	80089a2 <HAL_TIM_IC_CaptureCallback>
 80087ec:	e005      	b.n	80087fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8cd 	bl	800898e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f8de 	bl	80089b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b08      	cmp	r3, #8
 800880c:	d122      	bne.n	8008854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0308 	and.w	r3, r3, #8
 8008818:	2b08      	cmp	r3, #8
 800881a:	d11b      	bne.n	8008854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0208 	mvn.w	r2, #8
 8008824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2204      	movs	r2, #4
 800882a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f8b1 	bl	80089a2 <HAL_TIM_IC_CaptureCallback>
 8008840:	e005      	b.n	800884e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f8a3 	bl	800898e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f8b4 	bl	80089b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0310 	and.w	r3, r3, #16
 800885e:	2b10      	cmp	r3, #16
 8008860:	d122      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b10      	cmp	r3, #16
 800886e:	d11b      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f06f 0210 	mvn.w	r2, #16
 8008878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2208      	movs	r2, #8
 800887e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f887 	bl	80089a2 <HAL_TIM_IC_CaptureCallback>
 8008894:	e005      	b.n	80088a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f879 	bl	800898e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f88a 	bl	80089b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d10e      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d107      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0201 	mvn.w	r2, #1
 80088cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7f8 fe0a 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088de:	2b80      	cmp	r3, #128	; 0x80
 80088e0:	d10e      	bne.n	8008900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ec:	2b80      	cmp	r3, #128	; 0x80
 80088ee:	d107      	bne.n	8008900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f914 	bl	8008b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890e:	d10e      	bne.n	800892e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891a:	2b80      	cmp	r3, #128	; 0x80
 800891c:	d107      	bne.n	800892e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f907 	bl	8008b3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008938:	2b40      	cmp	r3, #64	; 0x40
 800893a:	d10e      	bne.n	800895a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008946:	2b40      	cmp	r3, #64	; 0x40
 8008948:	d107      	bne.n	800895a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f838 	bl	80089ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	f003 0320 	and.w	r3, r3, #32
 8008964:	2b20      	cmp	r3, #32
 8008966:	d10e      	bne.n	8008986 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b20      	cmp	r3, #32
 8008974:	d107      	bne.n	8008986 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f06f 0220 	mvn.w	r2, #32
 800897e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f8c7 	bl	8008b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089aa:	bf00      	nop
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a40      	ldr	r2, [pc, #256]	; (8008af4 <TIM_Base_SetConfig+0x114>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d013      	beq.n	8008a20 <TIM_Base_SetConfig+0x40>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089fe:	d00f      	beq.n	8008a20 <TIM_Base_SetConfig+0x40>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a3d      	ldr	r2, [pc, #244]	; (8008af8 <TIM_Base_SetConfig+0x118>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00b      	beq.n	8008a20 <TIM_Base_SetConfig+0x40>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a3c      	ldr	r2, [pc, #240]	; (8008afc <TIM_Base_SetConfig+0x11c>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d007      	beq.n	8008a20 <TIM_Base_SetConfig+0x40>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a3b      	ldr	r2, [pc, #236]	; (8008b00 <TIM_Base_SetConfig+0x120>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d003      	beq.n	8008a20 <TIM_Base_SetConfig+0x40>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a3a      	ldr	r2, [pc, #232]	; (8008b04 <TIM_Base_SetConfig+0x124>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d108      	bne.n	8008a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a2f      	ldr	r2, [pc, #188]	; (8008af4 <TIM_Base_SetConfig+0x114>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d01f      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a40:	d01b      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a2c      	ldr	r2, [pc, #176]	; (8008af8 <TIM_Base_SetConfig+0x118>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d017      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a2b      	ldr	r2, [pc, #172]	; (8008afc <TIM_Base_SetConfig+0x11c>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d013      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a2a      	ldr	r2, [pc, #168]	; (8008b00 <TIM_Base_SetConfig+0x120>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00f      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a29      	ldr	r2, [pc, #164]	; (8008b04 <TIM_Base_SetConfig+0x124>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00b      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a28      	ldr	r2, [pc, #160]	; (8008b08 <TIM_Base_SetConfig+0x128>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d007      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a27      	ldr	r2, [pc, #156]	; (8008b0c <TIM_Base_SetConfig+0x12c>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d003      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a26      	ldr	r2, [pc, #152]	; (8008b10 <TIM_Base_SetConfig+0x130>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d108      	bne.n	8008a8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a10      	ldr	r2, [pc, #64]	; (8008af4 <TIM_Base_SetConfig+0x114>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d00f      	beq.n	8008ad8 <TIM_Base_SetConfig+0xf8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a12      	ldr	r2, [pc, #72]	; (8008b04 <TIM_Base_SetConfig+0x124>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00b      	beq.n	8008ad8 <TIM_Base_SetConfig+0xf8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a11      	ldr	r2, [pc, #68]	; (8008b08 <TIM_Base_SetConfig+0x128>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d007      	beq.n	8008ad8 <TIM_Base_SetConfig+0xf8>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a10      	ldr	r2, [pc, #64]	; (8008b0c <TIM_Base_SetConfig+0x12c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d003      	beq.n	8008ad8 <TIM_Base_SetConfig+0xf8>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a0f      	ldr	r2, [pc, #60]	; (8008b10 <TIM_Base_SetConfig+0x130>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d103      	bne.n	8008ae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	691a      	ldr	r2, [r3, #16]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	615a      	str	r2, [r3, #20]
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	40010000 	.word	0x40010000
 8008af8:	40000400 	.word	0x40000400
 8008afc:	40000800 	.word	0x40000800
 8008b00:	40000c00 	.word	0x40000c00
 8008b04:	40010400 	.word	0x40010400
 8008b08:	40014000 	.word	0x40014000
 8008b0c:	40014400 	.word	0x40014400
 8008b10:	40014800 	.word	0x40014800

08008b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e042      	b.n	8008be8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d106      	bne.n	8008b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7f9 fc3f 	bl	80023f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2224      	movs	r2, #36	; 0x24
 8008b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0201 	bic.w	r2, r2, #1
 8008b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fd84 	bl	80096a0 <UART_SetConfig>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e022      	b.n	8008be8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 fad8 	bl	800a160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 fb5f 	bl	800a2a4 <UART_CheckIdleState>
 8008be6:	4603      	mov	r3, r0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08a      	sub	sp, #40	; 0x28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c04:	2b20      	cmp	r3, #32
 8008c06:	d17a      	bne.n	8008cfe <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <HAL_UART_Transmit_DMA+0x24>
 8008c0e:	88fb      	ldrh	r3, [r7, #6]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e073      	b.n	8008d00 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d101      	bne.n	8008c26 <HAL_UART_Transmit_DMA+0x36>
 8008c22:	2302      	movs	r3, #2
 8008c24:	e06c      	b.n	8008d00 <HAL_UART_Transmit_DMA+0x110>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	88fa      	ldrh	r2, [r7, #6]
 8008c38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	88fa      	ldrh	r2, [r7, #6]
 8008c40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2221      	movs	r2, #33	; 0x21
 8008c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d02c      	beq.n	8008cb6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c60:	4a29      	ldr	r2, [pc, #164]	; (8008d08 <HAL_UART_Transmit_DMA+0x118>)
 8008c62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c68:	4a28      	ldr	r2, [pc, #160]	; (8008d0c <HAL_UART_Transmit_DMA+0x11c>)
 8008c6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c70:	4a27      	ldr	r2, [pc, #156]	; (8008d10 <HAL_UART_Transmit_DMA+0x120>)
 8008c72:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c78:	2200      	movs	r2, #0
 8008c7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c84:	4619      	mov	r1, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3328      	adds	r3, #40	; 0x28
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	88fb      	ldrh	r3, [r7, #6]
 8008c90:	f7fa fc08 	bl	80034a4 <HAL_DMA_Start_IT>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00d      	beq.n	8008cb6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2210      	movs	r2, #16
 8008c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e024      	b.n	8008d00 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2240      	movs	r2, #64	; 0x40
 8008cbc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce6:	623a      	str	r2, [r7, #32]
 8008ce8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	69f9      	ldr	r1, [r7, #28]
 8008cec:	6a3a      	ldr	r2, [r7, #32]
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e5      	bne.n	8008cc6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e000      	b.n	8008d00 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008cfe:	2302      	movs	r3, #2
  }
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3728      	adds	r7, #40	; 0x28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	0800a76d 	.word	0x0800a76d
 8008d0c:	0800a803 	.word	0x0800a803
 8008d10:	0800a979 	.word	0x0800a979

08008d14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	; 0x28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d142      	bne.n	8008db2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_UART_Receive_DMA+0x24>
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e03b      	b.n	8008db4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d101      	bne.n	8008d4a <HAL_UART_Receive_DMA+0x36>
 8008d46:	2302      	movs	r3, #2
 8008d48:	e034      	b.n	8008db4 <HAL_UART_Receive_DMA+0xa0>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a17      	ldr	r2, [pc, #92]	; (8008dbc <HAL_UART_Receive_DMA+0xa8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d01f      	beq.n	8008da2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d018      	beq.n	8008da2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	623b      	str	r3, [r7, #32]
 8008d90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	69f9      	ldr	r1, [r7, #28]
 8008d94:	6a3a      	ldr	r2, [r7, #32]
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e6      	bne.n	8008d70 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008da2:	88fb      	ldrh	r3, [r7, #6]
 8008da4:	461a      	mov	r2, r3
 8008da6:	68b9      	ldr	r1, [r7, #8]
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f001 fb8f 	bl	800a4cc <UART_Start_Receive_DMA>
 8008dae:	4603      	mov	r3, r0
 8008db0:	e000      	b.n	8008db4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008db2:	2302      	movs	r3, #2
  }
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3728      	adds	r7, #40	; 0x28
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	58000c00 	.word	0x58000c00

08008dc0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b090      	sub	sp, #64	; 0x40
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	d139      	bne.n	8008e5a <HAL_UART_DMAStop+0x9a>
 8008de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de8:	2b21      	cmp	r3, #33	; 0x21
 8008dea:	d136      	bne.n	8008e5a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3308      	adds	r3, #8
 8008df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	e853 3f00 	ldrex	r3, [r3]
 8008dfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e02:	637b      	str	r3, [r7, #52]	; 0x34
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	3308      	adds	r3, #8
 8008e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e14:	e841 2300 	strex	r3, r2, [r1]
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e5      	bne.n	8008dec <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d015      	beq.n	8008e54 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fa fda3 	bl	8003978 <HAL_DMA_Abort>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00d      	beq.n	8008e54 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fc fa27 	bl	8005290 <HAL_DMA_GetError>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b20      	cmp	r3, #32
 8008e46:	d105      	bne.n	8008e54 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2210      	movs	r2, #16
 8008e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e044      	b.n	8008ede <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 fbe1 	bl	800a61c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e64:	2b40      	cmp	r3, #64	; 0x40
 8008e66:	d139      	bne.n	8008edc <HAL_UART_DMAStop+0x11c>
 8008e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6a:	2b22      	cmp	r3, #34	; 0x22
 8008e6c:	d136      	bne.n	8008edc <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e84:	633b      	str	r3, [r7, #48]	; 0x30
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e8e:	61ba      	str	r2, [r7, #24]
 8008e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6979      	ldr	r1, [r7, #20]
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e5      	bne.n	8008e6e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d015      	beq.n	8008ed6 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fa fd62 	bl	8003978 <HAL_DMA_Abort>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00d      	beq.n	8008ed6 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fc f9e6 	bl	8005290 <HAL_DMA_GetError>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	d105      	bne.n	8008ed6 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2210      	movs	r2, #16
 8008ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e003      	b.n	8008ede <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 fbe2 	bl	800a6a0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3740      	adds	r7, #64	; 0x40
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b0ba      	sub	sp, #232	; 0xe8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008f12:	f640 030f 	movw	r3, #2063	; 0x80f
 8008f16:	4013      	ands	r3, r2
 8008f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008f1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d11b      	bne.n	8008f5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f28:	f003 0320 	and.w	r3, r3, #32
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d015      	beq.n	8008f5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d105      	bne.n	8008f48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d009      	beq.n	8008f5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 835a 	beq.w	8009606 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
      }
      return;
 8008f5a:	e354      	b.n	8009606 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f000 811f 	beq.w	80091a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008f6a:	4b8b      	ldr	r3, [pc, #556]	; (8009198 <HAL_UART_IRQHandler+0x2b0>)
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d106      	bne.n	8008f80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008f76:	4b89      	ldr	r3, [pc, #548]	; (800919c <HAL_UART_IRQHandler+0x2b4>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8112 	beq.w	80091a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d011      	beq.n	8008fb0 <HAL_UART_IRQHandler+0xc8>
 8008f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa6:	f043 0201 	orr.w	r2, r3, #1
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d011      	beq.n	8008fe0 <HAL_UART_IRQHandler+0xf8>
 8008fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fd6:	f043 0204 	orr.w	r2, r3, #4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d011      	beq.n	8009010 <HAL_UART_IRQHandler+0x128>
 8008fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00b      	beq.n	8009010 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2204      	movs	r2, #4
 8008ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009006:	f043 0202 	orr.w	r2, r3, #2
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b00      	cmp	r3, #0
 800901a:	d017      	beq.n	800904c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800901c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d105      	bne.n	8009034 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009028:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800902c:	4b5a      	ldr	r3, [pc, #360]	; (8009198 <HAL_UART_IRQHandler+0x2b0>)
 800902e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00b      	beq.n	800904c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2208      	movs	r2, #8
 800903a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009042:	f043 0208 	orr.w	r2, r3, #8
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800904c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009054:	2b00      	cmp	r3, #0
 8009056:	d012      	beq.n	800907e <HAL_UART_IRQHandler+0x196>
 8009058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800905c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00c      	beq.n	800907e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800906c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009074:	f043 0220 	orr.w	r2, r3, #32
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 82c0 	beq.w	800960a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800908a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d013      	beq.n	80090be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d105      	bne.n	80090ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d007      	beq.n	80090be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d2:	2b40      	cmp	r3, #64	; 0x40
 80090d4:	d005      	beq.n	80090e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d04f      	beq.n	8009182 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 fadc 	bl	800a6a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f2:	2b40      	cmp	r3, #64	; 0x40
 80090f4:	d141      	bne.n	800917a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3308      	adds	r3, #8
 80090fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800910c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3308      	adds	r3, #8
 800911e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009122:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009126:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800912e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800913a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1d9      	bne.n	80090f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009146:	2b00      	cmp	r3, #0
 8009148:	d013      	beq.n	8009172 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800914e:	4a14      	ldr	r2, [pc, #80]	; (80091a0 <HAL_UART_IRQHandler+0x2b8>)
 8009150:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009156:	4618      	mov	r0, r3
 8009158:	f7fa ff2c 	bl	8003fb4 <HAL_DMA_Abort_IT>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d017      	beq.n	8009192 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800916c:	4610      	mov	r0, r2
 800916e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009170:	e00f      	b.n	8009192 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fa7e 	bl	8009674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009178:	e00b      	b.n	8009192 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa7a 	bl	8009674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009180:	e007      	b.n	8009192 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa76 	bl	8009674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009190:	e23b      	b.n	800960a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009192:	bf00      	nop
    return;
 8009194:	e239      	b.n	800960a <HAL_UART_IRQHandler+0x722>
 8009196:	bf00      	nop
 8009198:	10000001 	.word	0x10000001
 800919c:	04000120 	.word	0x04000120
 80091a0:	0800a9f9 	.word	0x0800a9f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	f040 81ce 	bne.w	800954a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b2:	f003 0310 	and.w	r3, r3, #16
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 81c7 	beq.w	800954a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 81c0 	beq.w	800954a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2210      	movs	r2, #16
 80091d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091dc:	2b40      	cmp	r3, #64	; 0x40
 80091de:	f040 813b 	bne.w	8009458 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a8b      	ldr	r2, [pc, #556]	; (8009418 <HAL_UART_IRQHandler+0x530>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d059      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a89      	ldr	r2, [pc, #548]	; (800941c <HAL_UART_IRQHandler+0x534>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d053      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a87      	ldr	r2, [pc, #540]	; (8009420 <HAL_UART_IRQHandler+0x538>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d04d      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a85      	ldr	r2, [pc, #532]	; (8009424 <HAL_UART_IRQHandler+0x53c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d047      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a83      	ldr	r2, [pc, #524]	; (8009428 <HAL_UART_IRQHandler+0x540>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d041      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a81      	ldr	r2, [pc, #516]	; (800942c <HAL_UART_IRQHandler+0x544>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d03b      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a7f      	ldr	r2, [pc, #508]	; (8009430 <HAL_UART_IRQHandler+0x548>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d035      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a7d      	ldr	r2, [pc, #500]	; (8009434 <HAL_UART_IRQHandler+0x54c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d02f      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a7b      	ldr	r2, [pc, #492]	; (8009438 <HAL_UART_IRQHandler+0x550>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d029      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a79      	ldr	r2, [pc, #484]	; (800943c <HAL_UART_IRQHandler+0x554>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d023      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a77      	ldr	r2, [pc, #476]	; (8009440 <HAL_UART_IRQHandler+0x558>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d01d      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a75      	ldr	r2, [pc, #468]	; (8009444 <HAL_UART_IRQHandler+0x55c>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d017      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a73      	ldr	r2, [pc, #460]	; (8009448 <HAL_UART_IRQHandler+0x560>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d011      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a71      	ldr	r2, [pc, #452]	; (800944c <HAL_UART_IRQHandler+0x564>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d00b      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a6f      	ldr	r2, [pc, #444]	; (8009450 <HAL_UART_IRQHandler+0x568>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d005      	beq.n	80092a2 <HAL_UART_IRQHandler+0x3ba>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a6d      	ldr	r2, [pc, #436]	; (8009454 <HAL_UART_IRQHandler+0x56c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d105      	bne.n	80092ae <HAL_UART_IRQHandler+0x3c6>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	e004      	b.n	80092b8 <HAL_UART_IRQHandler+0x3d0>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 81a4 	beq.w	800960e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092d0:	429a      	cmp	r2, r3
 80092d2:	f080 819c 	bcs.w	800960e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ea:	f000 8086 	beq.w	80093fa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800930a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009318:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800931c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009324:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1da      	bne.n	80092ee <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3308      	adds	r3, #8
 800933e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009342:	e853 3f00 	ldrex	r3, [r3]
 8009346:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800934a:	f023 0301 	bic.w	r3, r3, #1
 800934e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3308      	adds	r3, #8
 8009358:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800935c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009360:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009362:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009364:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800936e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e1      	bne.n	8009338 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3308      	adds	r3, #8
 800937a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800938a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3308      	adds	r3, #8
 8009394:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009398:	66fa      	str	r2, [r7, #108]	; 0x6c
 800939a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800939e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e3      	bne.n	8009374 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2220      	movs	r2, #32
 80093b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ca:	f023 0310 	bic.w	r3, r3, #16
 80093ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80093de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e4      	bne.n	80093ba <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fa fabf 	bl	8003978 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009406:	b29b      	uxth	r3, r3
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	b29b      	uxth	r3, r3
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f93a 	bl	8009688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009414:	e0fb      	b.n	800960e <HAL_UART_IRQHandler+0x726>
 8009416:	bf00      	nop
 8009418:	40020010 	.word	0x40020010
 800941c:	40020028 	.word	0x40020028
 8009420:	40020040 	.word	0x40020040
 8009424:	40020058 	.word	0x40020058
 8009428:	40020070 	.word	0x40020070
 800942c:	40020088 	.word	0x40020088
 8009430:	400200a0 	.word	0x400200a0
 8009434:	400200b8 	.word	0x400200b8
 8009438:	40020410 	.word	0x40020410
 800943c:	40020428 	.word	0x40020428
 8009440:	40020440 	.word	0x40020440
 8009444:	40020458 	.word	0x40020458
 8009448:	40020470 	.word	0x40020470
 800944c:	40020488 	.word	0x40020488
 8009450:	400204a0 	.word	0x400204a0
 8009454:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009464:	b29b      	uxth	r3, r3
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009472:	b29b      	uxth	r3, r3
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 80cc 	beq.w	8009612 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800947a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 80c7 	beq.w	8009612 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009498:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	461a      	mov	r2, r3
 80094a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094a6:	647b      	str	r3, [r7, #68]	; 0x44
 80094a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e4      	bne.n	8009484 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3308      	adds	r3, #8
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	623b      	str	r3, [r7, #32]
   return(result);
 80094ca:	6a3a      	ldr	r2, [r7, #32]
 80094cc:	4b54      	ldr	r3, [pc, #336]	; (8009620 <HAL_UART_IRQHandler+0x738>)
 80094ce:	4013      	ands	r3, r2
 80094d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3308      	adds	r3, #8
 80094da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094de:	633a      	str	r2, [r7, #48]	; 0x30
 80094e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e3      	bne.n	80094ba <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2220      	movs	r2, #32
 80094f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	e853 3f00 	ldrex	r3, [r3]
 8009512:	60fb      	str	r3, [r7, #12]
   return(result);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0310 	bic.w	r3, r3, #16
 800951a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009528:	61fb      	str	r3, [r7, #28]
 800952a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952c:	69b9      	ldr	r1, [r7, #24]
 800952e:	69fa      	ldr	r2, [r7, #28]
 8009530:	e841 2300 	strex	r3, r2, [r1]
 8009534:	617b      	str	r3, [r7, #20]
   return(result);
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1e4      	bne.n	8009506 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800953c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f8a0 	bl	8009688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009548:	e063      	b.n	8009612 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800954a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800954e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00e      	beq.n	8009574 <HAL_UART_IRQHandler+0x68c>
 8009556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800955a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d008      	beq.n	8009574 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800956a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 fa84 	bl	800aa7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009572:	e051      	b.n	8009618 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957c:	2b00      	cmp	r3, #0
 800957e:	d014      	beq.n	80095aa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009588:	2b00      	cmp	r3, #0
 800958a:	d105      	bne.n	8009598 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800958c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d008      	beq.n	80095aa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800959c:	2b00      	cmp	r3, #0
 800959e:	d03a      	beq.n	8009616 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	4798      	blx	r3
    }
    return;
 80095a8:	e035      	b.n	8009616 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d009      	beq.n	80095ca <HAL_UART_IRQHandler+0x6e2>
 80095b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 fa2e 	bl	800aa24 <UART_EndTransmit_IT>
    return;
 80095c8:	e026      	b.n	8009618 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d009      	beq.n	80095ea <HAL_UART_IRQHandler+0x702>
 80095d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f001 fa5d 	bl	800aaa2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095e8:	e016      	b.n	8009618 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d010      	beq.n	8009618 <HAL_UART_IRQHandler+0x730>
 80095f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da0c      	bge.n	8009618 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 fa45 	bl	800aa8e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009604:	e008      	b.n	8009618 <HAL_UART_IRQHandler+0x730>
      return;
 8009606:	bf00      	nop
 8009608:	e006      	b.n	8009618 <HAL_UART_IRQHandler+0x730>
    return;
 800960a:	bf00      	nop
 800960c:	e004      	b.n	8009618 <HAL_UART_IRQHandler+0x730>
      return;
 800960e:	bf00      	nop
 8009610:	e002      	b.n	8009618 <HAL_UART_IRQHandler+0x730>
      return;
 8009612:	bf00      	nop
 8009614:	e000      	b.n	8009618 <HAL_UART_IRQHandler+0x730>
    return;
 8009616:	bf00      	nop
  }
}
 8009618:	37e8      	adds	r7, #232	; 0xe8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	effffffe 	.word	0xeffffffe

08009624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096a0:	b5b0      	push	{r4, r5, r7, lr}
 80096a2:	b08e      	sub	sp, #56	; 0x38
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689a      	ldr	r2, [r3, #8]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	4bbf      	ldr	r3, [pc, #764]	; (80099cc <UART_SetConfig+0x32c>)
 80096ce:	4013      	ands	r3, r2
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	6812      	ldr	r2, [r2, #0]
 80096d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096d6:	430b      	orrs	r3, r1
 80096d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68da      	ldr	r2, [r3, #12]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4ab5      	ldr	r2, [pc, #724]	; (80099d0 <UART_SetConfig+0x330>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d004      	beq.n	800970a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009706:	4313      	orrs	r3, r2
 8009708:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689a      	ldr	r2, [r3, #8]
 8009710:	4bb0      	ldr	r3, [pc, #704]	; (80099d4 <UART_SetConfig+0x334>)
 8009712:	4013      	ands	r3, r2
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	6812      	ldr	r2, [r2, #0]
 8009718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800971a:	430b      	orrs	r3, r1
 800971c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	f023 010f 	bic.w	r1, r3, #15
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4aa7      	ldr	r2, [pc, #668]	; (80099d8 <UART_SetConfig+0x338>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d176      	bne.n	800982c <UART_SetConfig+0x18c>
 800973e:	4ba7      	ldr	r3, [pc, #668]	; (80099dc <UART_SetConfig+0x33c>)
 8009740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009746:	2b28      	cmp	r3, #40	; 0x28
 8009748:	d86c      	bhi.n	8009824 <UART_SetConfig+0x184>
 800974a:	a201      	add	r2, pc, #4	; (adr r2, 8009750 <UART_SetConfig+0xb0>)
 800974c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009750:	080097f5 	.word	0x080097f5
 8009754:	08009825 	.word	0x08009825
 8009758:	08009825 	.word	0x08009825
 800975c:	08009825 	.word	0x08009825
 8009760:	08009825 	.word	0x08009825
 8009764:	08009825 	.word	0x08009825
 8009768:	08009825 	.word	0x08009825
 800976c:	08009825 	.word	0x08009825
 8009770:	080097fd 	.word	0x080097fd
 8009774:	08009825 	.word	0x08009825
 8009778:	08009825 	.word	0x08009825
 800977c:	08009825 	.word	0x08009825
 8009780:	08009825 	.word	0x08009825
 8009784:	08009825 	.word	0x08009825
 8009788:	08009825 	.word	0x08009825
 800978c:	08009825 	.word	0x08009825
 8009790:	08009805 	.word	0x08009805
 8009794:	08009825 	.word	0x08009825
 8009798:	08009825 	.word	0x08009825
 800979c:	08009825 	.word	0x08009825
 80097a0:	08009825 	.word	0x08009825
 80097a4:	08009825 	.word	0x08009825
 80097a8:	08009825 	.word	0x08009825
 80097ac:	08009825 	.word	0x08009825
 80097b0:	0800980d 	.word	0x0800980d
 80097b4:	08009825 	.word	0x08009825
 80097b8:	08009825 	.word	0x08009825
 80097bc:	08009825 	.word	0x08009825
 80097c0:	08009825 	.word	0x08009825
 80097c4:	08009825 	.word	0x08009825
 80097c8:	08009825 	.word	0x08009825
 80097cc:	08009825 	.word	0x08009825
 80097d0:	08009815 	.word	0x08009815
 80097d4:	08009825 	.word	0x08009825
 80097d8:	08009825 	.word	0x08009825
 80097dc:	08009825 	.word	0x08009825
 80097e0:	08009825 	.word	0x08009825
 80097e4:	08009825 	.word	0x08009825
 80097e8:	08009825 	.word	0x08009825
 80097ec:	08009825 	.word	0x08009825
 80097f0:	0800981d 	.word	0x0800981d
 80097f4:	2301      	movs	r3, #1
 80097f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fa:	e222      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80097fc:	2304      	movs	r3, #4
 80097fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009802:	e21e      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009804:	2308      	movs	r3, #8
 8009806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980a:	e21a      	b.n	8009c42 <UART_SetConfig+0x5a2>
 800980c:	2310      	movs	r3, #16
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009812:	e216      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009814:	2320      	movs	r3, #32
 8009816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981a:	e212      	b.n	8009c42 <UART_SetConfig+0x5a2>
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009822:	e20e      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009824:	2380      	movs	r3, #128	; 0x80
 8009826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982a:	e20a      	b.n	8009c42 <UART_SetConfig+0x5a2>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a6b      	ldr	r2, [pc, #428]	; (80099e0 <UART_SetConfig+0x340>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d130      	bne.n	8009898 <UART_SetConfig+0x1f8>
 8009836:	4b69      	ldr	r3, [pc, #420]	; (80099dc <UART_SetConfig+0x33c>)
 8009838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983a:	f003 0307 	and.w	r3, r3, #7
 800983e:	2b05      	cmp	r3, #5
 8009840:	d826      	bhi.n	8009890 <UART_SetConfig+0x1f0>
 8009842:	a201      	add	r2, pc, #4	; (adr r2, 8009848 <UART_SetConfig+0x1a8>)
 8009844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009848:	08009861 	.word	0x08009861
 800984c:	08009869 	.word	0x08009869
 8009850:	08009871 	.word	0x08009871
 8009854:	08009879 	.word	0x08009879
 8009858:	08009881 	.word	0x08009881
 800985c:	08009889 	.word	0x08009889
 8009860:	2300      	movs	r3, #0
 8009862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009866:	e1ec      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009868:	2304      	movs	r3, #4
 800986a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800986e:	e1e8      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009870:	2308      	movs	r3, #8
 8009872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009876:	e1e4      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009878:	2310      	movs	r3, #16
 800987a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987e:	e1e0      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009880:	2320      	movs	r3, #32
 8009882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009886:	e1dc      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009888:	2340      	movs	r3, #64	; 0x40
 800988a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988e:	e1d8      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009890:	2380      	movs	r3, #128	; 0x80
 8009892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009896:	e1d4      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a51      	ldr	r2, [pc, #324]	; (80099e4 <UART_SetConfig+0x344>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d130      	bne.n	8009904 <UART_SetConfig+0x264>
 80098a2:	4b4e      	ldr	r3, [pc, #312]	; (80099dc <UART_SetConfig+0x33c>)
 80098a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a6:	f003 0307 	and.w	r3, r3, #7
 80098aa:	2b05      	cmp	r3, #5
 80098ac:	d826      	bhi.n	80098fc <UART_SetConfig+0x25c>
 80098ae:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <UART_SetConfig+0x214>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	080098cd 	.word	0x080098cd
 80098b8:	080098d5 	.word	0x080098d5
 80098bc:	080098dd 	.word	0x080098dd
 80098c0:	080098e5 	.word	0x080098e5
 80098c4:	080098ed 	.word	0x080098ed
 80098c8:	080098f5 	.word	0x080098f5
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d2:	e1b6      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80098d4:	2304      	movs	r3, #4
 80098d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098da:	e1b2      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80098dc:	2308      	movs	r3, #8
 80098de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e2:	e1ae      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80098e4:	2310      	movs	r3, #16
 80098e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ea:	e1aa      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80098ec:	2320      	movs	r3, #32
 80098ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f2:	e1a6      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80098f4:	2340      	movs	r3, #64	; 0x40
 80098f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fa:	e1a2      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80098fc:	2380      	movs	r3, #128	; 0x80
 80098fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009902:	e19e      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a37      	ldr	r2, [pc, #220]	; (80099e8 <UART_SetConfig+0x348>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d130      	bne.n	8009970 <UART_SetConfig+0x2d0>
 800990e:	4b33      	ldr	r3, [pc, #204]	; (80099dc <UART_SetConfig+0x33c>)
 8009910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009912:	f003 0307 	and.w	r3, r3, #7
 8009916:	2b05      	cmp	r3, #5
 8009918:	d826      	bhi.n	8009968 <UART_SetConfig+0x2c8>
 800991a:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <UART_SetConfig+0x280>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009939 	.word	0x08009939
 8009924:	08009941 	.word	0x08009941
 8009928:	08009949 	.word	0x08009949
 800992c:	08009951 	.word	0x08009951
 8009930:	08009959 	.word	0x08009959
 8009934:	08009961 	.word	0x08009961
 8009938:	2300      	movs	r3, #0
 800993a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993e:	e180      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009940:	2304      	movs	r3, #4
 8009942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009946:	e17c      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009948:	2308      	movs	r3, #8
 800994a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994e:	e178      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009950:	2310      	movs	r3, #16
 8009952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009956:	e174      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009958:	2320      	movs	r3, #32
 800995a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995e:	e170      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009960:	2340      	movs	r3, #64	; 0x40
 8009962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009966:	e16c      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009968:	2380      	movs	r3, #128	; 0x80
 800996a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996e:	e168      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a1d      	ldr	r2, [pc, #116]	; (80099ec <UART_SetConfig+0x34c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d142      	bne.n	8009a00 <UART_SetConfig+0x360>
 800997a:	4b18      	ldr	r3, [pc, #96]	; (80099dc <UART_SetConfig+0x33c>)
 800997c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997e:	f003 0307 	and.w	r3, r3, #7
 8009982:	2b05      	cmp	r3, #5
 8009984:	d838      	bhi.n	80099f8 <UART_SetConfig+0x358>
 8009986:	a201      	add	r2, pc, #4	; (adr r2, 800998c <UART_SetConfig+0x2ec>)
 8009988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998c:	080099a5 	.word	0x080099a5
 8009990:	080099ad 	.word	0x080099ad
 8009994:	080099b5 	.word	0x080099b5
 8009998:	080099bd 	.word	0x080099bd
 800999c:	080099c5 	.word	0x080099c5
 80099a0:	080099f1 	.word	0x080099f1
 80099a4:	2300      	movs	r3, #0
 80099a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099aa:	e14a      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80099ac:	2304      	movs	r3, #4
 80099ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b2:	e146      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80099b4:	2308      	movs	r3, #8
 80099b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ba:	e142      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80099bc:	2310      	movs	r3, #16
 80099be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c2:	e13e      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80099c4:	2320      	movs	r3, #32
 80099c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ca:	e13a      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80099cc:	cfff69f3 	.word	0xcfff69f3
 80099d0:	58000c00 	.word	0x58000c00
 80099d4:	11fff4ff 	.word	0x11fff4ff
 80099d8:	40011000 	.word	0x40011000
 80099dc:	58024400 	.word	0x58024400
 80099e0:	40004400 	.word	0x40004400
 80099e4:	40004800 	.word	0x40004800
 80099e8:	40004c00 	.word	0x40004c00
 80099ec:	40005000 	.word	0x40005000
 80099f0:	2340      	movs	r3, #64	; 0x40
 80099f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f6:	e124      	b.n	8009c42 <UART_SetConfig+0x5a2>
 80099f8:	2380      	movs	r3, #128	; 0x80
 80099fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fe:	e120      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4acc      	ldr	r2, [pc, #816]	; (8009d38 <UART_SetConfig+0x698>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d176      	bne.n	8009af8 <UART_SetConfig+0x458>
 8009a0a:	4bcc      	ldr	r3, [pc, #816]	; (8009d3c <UART_SetConfig+0x69c>)
 8009a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a12:	2b28      	cmp	r3, #40	; 0x28
 8009a14:	d86c      	bhi.n	8009af0 <UART_SetConfig+0x450>
 8009a16:	a201      	add	r2, pc, #4	; (adr r2, 8009a1c <UART_SetConfig+0x37c>)
 8009a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1c:	08009ac1 	.word	0x08009ac1
 8009a20:	08009af1 	.word	0x08009af1
 8009a24:	08009af1 	.word	0x08009af1
 8009a28:	08009af1 	.word	0x08009af1
 8009a2c:	08009af1 	.word	0x08009af1
 8009a30:	08009af1 	.word	0x08009af1
 8009a34:	08009af1 	.word	0x08009af1
 8009a38:	08009af1 	.word	0x08009af1
 8009a3c:	08009ac9 	.word	0x08009ac9
 8009a40:	08009af1 	.word	0x08009af1
 8009a44:	08009af1 	.word	0x08009af1
 8009a48:	08009af1 	.word	0x08009af1
 8009a4c:	08009af1 	.word	0x08009af1
 8009a50:	08009af1 	.word	0x08009af1
 8009a54:	08009af1 	.word	0x08009af1
 8009a58:	08009af1 	.word	0x08009af1
 8009a5c:	08009ad1 	.word	0x08009ad1
 8009a60:	08009af1 	.word	0x08009af1
 8009a64:	08009af1 	.word	0x08009af1
 8009a68:	08009af1 	.word	0x08009af1
 8009a6c:	08009af1 	.word	0x08009af1
 8009a70:	08009af1 	.word	0x08009af1
 8009a74:	08009af1 	.word	0x08009af1
 8009a78:	08009af1 	.word	0x08009af1
 8009a7c:	08009ad9 	.word	0x08009ad9
 8009a80:	08009af1 	.word	0x08009af1
 8009a84:	08009af1 	.word	0x08009af1
 8009a88:	08009af1 	.word	0x08009af1
 8009a8c:	08009af1 	.word	0x08009af1
 8009a90:	08009af1 	.word	0x08009af1
 8009a94:	08009af1 	.word	0x08009af1
 8009a98:	08009af1 	.word	0x08009af1
 8009a9c:	08009ae1 	.word	0x08009ae1
 8009aa0:	08009af1 	.word	0x08009af1
 8009aa4:	08009af1 	.word	0x08009af1
 8009aa8:	08009af1 	.word	0x08009af1
 8009aac:	08009af1 	.word	0x08009af1
 8009ab0:	08009af1 	.word	0x08009af1
 8009ab4:	08009af1 	.word	0x08009af1
 8009ab8:	08009af1 	.word	0x08009af1
 8009abc:	08009ae9 	.word	0x08009ae9
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac6:	e0bc      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009ac8:	2304      	movs	r3, #4
 8009aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ace:	e0b8      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad6:	e0b4      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009ad8:	2310      	movs	r3, #16
 8009ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ade:	e0b0      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009ae0:	2320      	movs	r3, #32
 8009ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e0ac      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009ae8:	2340      	movs	r3, #64	; 0x40
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	e0a8      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009af0:	2380      	movs	r3, #128	; 0x80
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af6:	e0a4      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a90      	ldr	r2, [pc, #576]	; (8009d40 <UART_SetConfig+0x6a0>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d130      	bne.n	8009b64 <UART_SetConfig+0x4c4>
 8009b02:	4b8e      	ldr	r3, [pc, #568]	; (8009d3c <UART_SetConfig+0x69c>)
 8009b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b06:	f003 0307 	and.w	r3, r3, #7
 8009b0a:	2b05      	cmp	r3, #5
 8009b0c:	d826      	bhi.n	8009b5c <UART_SetConfig+0x4bc>
 8009b0e:	a201      	add	r2, pc, #4	; (adr r2, 8009b14 <UART_SetConfig+0x474>)
 8009b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b14:	08009b2d 	.word	0x08009b2d
 8009b18:	08009b35 	.word	0x08009b35
 8009b1c:	08009b3d 	.word	0x08009b3d
 8009b20:	08009b45 	.word	0x08009b45
 8009b24:	08009b4d 	.word	0x08009b4d
 8009b28:	08009b55 	.word	0x08009b55
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b32:	e086      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009b34:	2304      	movs	r3, #4
 8009b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3a:	e082      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009b3c:	2308      	movs	r3, #8
 8009b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b42:	e07e      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009b44:	2310      	movs	r3, #16
 8009b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4a:	e07a      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009b4c:	2320      	movs	r3, #32
 8009b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b52:	e076      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009b54:	2340      	movs	r3, #64	; 0x40
 8009b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5a:	e072      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009b5c:	2380      	movs	r3, #128	; 0x80
 8009b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b62:	e06e      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a76      	ldr	r2, [pc, #472]	; (8009d44 <UART_SetConfig+0x6a4>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d130      	bne.n	8009bd0 <UART_SetConfig+0x530>
 8009b6e:	4b73      	ldr	r3, [pc, #460]	; (8009d3c <UART_SetConfig+0x69c>)
 8009b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	2b05      	cmp	r3, #5
 8009b78:	d826      	bhi.n	8009bc8 <UART_SetConfig+0x528>
 8009b7a:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <UART_SetConfig+0x4e0>)
 8009b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b80:	08009b99 	.word	0x08009b99
 8009b84:	08009ba1 	.word	0x08009ba1
 8009b88:	08009ba9 	.word	0x08009ba9
 8009b8c:	08009bb1 	.word	0x08009bb1
 8009b90:	08009bb9 	.word	0x08009bb9
 8009b94:	08009bc1 	.word	0x08009bc1
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9e:	e050      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009ba0:	2304      	movs	r3, #4
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e04c      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009ba8:	2308      	movs	r3, #8
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	e048      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009bb0:	2310      	movs	r3, #16
 8009bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb6:	e044      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009bb8:	2320      	movs	r3, #32
 8009bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bbe:	e040      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009bc0:	2340      	movs	r3, #64	; 0x40
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc6:	e03c      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009bc8:	2380      	movs	r3, #128	; 0x80
 8009bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bce:	e038      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a5c      	ldr	r2, [pc, #368]	; (8009d48 <UART_SetConfig+0x6a8>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d130      	bne.n	8009c3c <UART_SetConfig+0x59c>
 8009bda:	4b58      	ldr	r3, [pc, #352]	; (8009d3c <UART_SetConfig+0x69c>)
 8009bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	2b05      	cmp	r3, #5
 8009be4:	d826      	bhi.n	8009c34 <UART_SetConfig+0x594>
 8009be6:	a201      	add	r2, pc, #4	; (adr r2, 8009bec <UART_SetConfig+0x54c>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c05 	.word	0x08009c05
 8009bf0:	08009c0d 	.word	0x08009c0d
 8009bf4:	08009c15 	.word	0x08009c15
 8009bf8:	08009c1d 	.word	0x08009c1d
 8009bfc:	08009c25 	.word	0x08009c25
 8009c00:	08009c2d 	.word	0x08009c2d
 8009c04:	2302      	movs	r3, #2
 8009c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0a:	e01a      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009c0c:	2304      	movs	r3, #4
 8009c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c12:	e016      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009c14:	2308      	movs	r3, #8
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1a:	e012      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009c1c:	2310      	movs	r3, #16
 8009c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c22:	e00e      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009c24:	2320      	movs	r3, #32
 8009c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2a:	e00a      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009c2c:	2340      	movs	r3, #64	; 0x40
 8009c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c32:	e006      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009c34:	2380      	movs	r3, #128	; 0x80
 8009c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3a:	e002      	b.n	8009c42 <UART_SetConfig+0x5a2>
 8009c3c:	2380      	movs	r3, #128	; 0x80
 8009c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a40      	ldr	r2, [pc, #256]	; (8009d48 <UART_SetConfig+0x6a8>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	f040 80ef 	bne.w	8009e2c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c52:	2b20      	cmp	r3, #32
 8009c54:	dc46      	bgt.n	8009ce4 <UART_SetConfig+0x644>
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	f2c0 8081 	blt.w	8009d5e <UART_SetConfig+0x6be>
 8009c5c:	3b02      	subs	r3, #2
 8009c5e:	2b1e      	cmp	r3, #30
 8009c60:	d87d      	bhi.n	8009d5e <UART_SetConfig+0x6be>
 8009c62:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <UART_SetConfig+0x5c8>)
 8009c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c68:	08009ceb 	.word	0x08009ceb
 8009c6c:	08009d5f 	.word	0x08009d5f
 8009c70:	08009cf3 	.word	0x08009cf3
 8009c74:	08009d5f 	.word	0x08009d5f
 8009c78:	08009d5f 	.word	0x08009d5f
 8009c7c:	08009d5f 	.word	0x08009d5f
 8009c80:	08009d03 	.word	0x08009d03
 8009c84:	08009d5f 	.word	0x08009d5f
 8009c88:	08009d5f 	.word	0x08009d5f
 8009c8c:	08009d5f 	.word	0x08009d5f
 8009c90:	08009d5f 	.word	0x08009d5f
 8009c94:	08009d5f 	.word	0x08009d5f
 8009c98:	08009d5f 	.word	0x08009d5f
 8009c9c:	08009d5f 	.word	0x08009d5f
 8009ca0:	08009d13 	.word	0x08009d13
 8009ca4:	08009d5f 	.word	0x08009d5f
 8009ca8:	08009d5f 	.word	0x08009d5f
 8009cac:	08009d5f 	.word	0x08009d5f
 8009cb0:	08009d5f 	.word	0x08009d5f
 8009cb4:	08009d5f 	.word	0x08009d5f
 8009cb8:	08009d5f 	.word	0x08009d5f
 8009cbc:	08009d5f 	.word	0x08009d5f
 8009cc0:	08009d5f 	.word	0x08009d5f
 8009cc4:	08009d5f 	.word	0x08009d5f
 8009cc8:	08009d5f 	.word	0x08009d5f
 8009ccc:	08009d5f 	.word	0x08009d5f
 8009cd0:	08009d5f 	.word	0x08009d5f
 8009cd4:	08009d5f 	.word	0x08009d5f
 8009cd8:	08009d5f 	.word	0x08009d5f
 8009cdc:	08009d5f 	.word	0x08009d5f
 8009ce0:	08009d51 	.word	0x08009d51
 8009ce4:	2b40      	cmp	r3, #64	; 0x40
 8009ce6:	d036      	beq.n	8009d56 <UART_SetConfig+0x6b6>
 8009ce8:	e039      	b.n	8009d5e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cea:	f7fe f835 	bl	8007d58 <HAL_RCCEx_GetD3PCLK1Freq>
 8009cee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009cf0:	e03b      	b.n	8009d6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf2:	f107 0314 	add.w	r3, r7, #20
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe f844 	bl	8007d84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d00:	e033      	b.n	8009d6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d02:	f107 0308 	add.w	r3, r7, #8
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe f990 	bl	800802c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d10:	e02b      	b.n	8009d6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d12:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <UART_SetConfig+0x69c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0320 	and.w	r3, r3, #32
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d1e:	4b07      	ldr	r3, [pc, #28]	; (8009d3c <UART_SetConfig+0x69c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	08db      	lsrs	r3, r3, #3
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	4a08      	ldr	r2, [pc, #32]	; (8009d4c <UART_SetConfig+0x6ac>)
 8009d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d30:	e01b      	b.n	8009d6a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009d32:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <UART_SetConfig+0x6ac>)
 8009d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d36:	e018      	b.n	8009d6a <UART_SetConfig+0x6ca>
 8009d38:	40011400 	.word	0x40011400
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	40007800 	.word	0x40007800
 8009d44:	40007c00 	.word	0x40007c00
 8009d48:	58000c00 	.word	0x58000c00
 8009d4c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d50:	4bc4      	ldr	r3, [pc, #784]	; (800a064 <UART_SetConfig+0x9c4>)
 8009d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d54:	e009      	b.n	8009d6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d5c:	e005      	b.n	8009d6a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 81da 	beq.w	800a126 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d76:	4abc      	ldr	r2, [pc, #752]	; (800a068 <UART_SetConfig+0x9c8>)
 8009d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d84:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685a      	ldr	r2, [r3, #4]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	4413      	add	r3, r2
 8009d90:	6a3a      	ldr	r2, [r7, #32]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d305      	bcc.n	8009da2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d9c:	6a3a      	ldr	r2, [r7, #32]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d903      	bls.n	8009daa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009da8:	e1bd      	b.n	800a126 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dac:	4618      	mov	r0, r3
 8009dae:	f04f 0100 	mov.w	r1, #0
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	4aac      	ldr	r2, [pc, #688]	; (800a068 <UART_SetConfig+0x9c8>)
 8009db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	f04f 0300 	mov.w	r3, #0
 8009dc2:	f7f6 fa8d 	bl	80002e0 <__aeabi_uldivmod>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4610      	mov	r0, r2
 8009dcc:	4619      	mov	r1, r3
 8009dce:	f04f 0200 	mov.w	r2, #0
 8009dd2:	f04f 0300 	mov.w	r3, #0
 8009dd6:	020b      	lsls	r3, r1, #8
 8009dd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ddc:	0202      	lsls	r2, r0, #8
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	6849      	ldr	r1, [r1, #4]
 8009de2:	0849      	lsrs	r1, r1, #1
 8009de4:	4608      	mov	r0, r1
 8009de6:	f04f 0100 	mov.w	r1, #0
 8009dea:	1814      	adds	r4, r2, r0
 8009dec:	eb43 0501 	adc.w	r5, r3, r1
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	461a      	mov	r2, r3
 8009df6:	f04f 0300 	mov.w	r3, #0
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	f7f6 fa6f 	bl	80002e0 <__aeabi_uldivmod>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4613      	mov	r3, r2
 8009e08:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e10:	d308      	bcc.n	8009e24 <UART_SetConfig+0x784>
 8009e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e18:	d204      	bcs.n	8009e24 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e20:	60da      	str	r2, [r3, #12]
 8009e22:	e180      	b.n	800a126 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e2a:	e17c      	b.n	800a126 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e34:	f040 80be 	bne.w	8009fb4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8009e38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	dc49      	bgt.n	8009ed4 <UART_SetConfig+0x834>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	db7c      	blt.n	8009f3e <UART_SetConfig+0x89e>
 8009e44:	2b20      	cmp	r3, #32
 8009e46:	d87a      	bhi.n	8009f3e <UART_SetConfig+0x89e>
 8009e48:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <UART_SetConfig+0x7b0>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	08009edb 	.word	0x08009edb
 8009e54:	08009ee3 	.word	0x08009ee3
 8009e58:	08009f3f 	.word	0x08009f3f
 8009e5c:	08009f3f 	.word	0x08009f3f
 8009e60:	08009eeb 	.word	0x08009eeb
 8009e64:	08009f3f 	.word	0x08009f3f
 8009e68:	08009f3f 	.word	0x08009f3f
 8009e6c:	08009f3f 	.word	0x08009f3f
 8009e70:	08009efb 	.word	0x08009efb
 8009e74:	08009f3f 	.word	0x08009f3f
 8009e78:	08009f3f 	.word	0x08009f3f
 8009e7c:	08009f3f 	.word	0x08009f3f
 8009e80:	08009f3f 	.word	0x08009f3f
 8009e84:	08009f3f 	.word	0x08009f3f
 8009e88:	08009f3f 	.word	0x08009f3f
 8009e8c:	08009f3f 	.word	0x08009f3f
 8009e90:	08009f0b 	.word	0x08009f0b
 8009e94:	08009f3f 	.word	0x08009f3f
 8009e98:	08009f3f 	.word	0x08009f3f
 8009e9c:	08009f3f 	.word	0x08009f3f
 8009ea0:	08009f3f 	.word	0x08009f3f
 8009ea4:	08009f3f 	.word	0x08009f3f
 8009ea8:	08009f3f 	.word	0x08009f3f
 8009eac:	08009f3f 	.word	0x08009f3f
 8009eb0:	08009f3f 	.word	0x08009f3f
 8009eb4:	08009f3f 	.word	0x08009f3f
 8009eb8:	08009f3f 	.word	0x08009f3f
 8009ebc:	08009f3f 	.word	0x08009f3f
 8009ec0:	08009f3f 	.word	0x08009f3f
 8009ec4:	08009f3f 	.word	0x08009f3f
 8009ec8:	08009f3f 	.word	0x08009f3f
 8009ecc:	08009f3f 	.word	0x08009f3f
 8009ed0:	08009f31 	.word	0x08009f31
 8009ed4:	2b40      	cmp	r3, #64	; 0x40
 8009ed6:	d02e      	beq.n	8009f36 <UART_SetConfig+0x896>
 8009ed8:	e031      	b.n	8009f3e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eda:	f7fc ff8f 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 8009ede:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ee0:	e033      	b.n	8009f4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ee2:	f7fc ffa1 	bl	8006e28 <HAL_RCC_GetPCLK2Freq>
 8009ee6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ee8:	e02f      	b.n	8009f4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eea:	f107 0314 	add.w	r3, r7, #20
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fd ff48 	bl	8007d84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ef8:	e027      	b.n	8009f4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009efa:	f107 0308 	add.w	r3, r7, #8
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe f894 	bl	800802c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f08:	e01f      	b.n	8009f4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f0a:	4b58      	ldr	r3, [pc, #352]	; (800a06c <UART_SetConfig+0x9cc>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d009      	beq.n	8009f2a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f16:	4b55      	ldr	r3, [pc, #340]	; (800a06c <UART_SetConfig+0x9cc>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	08db      	lsrs	r3, r3, #3
 8009f1c:	f003 0303 	and.w	r3, r3, #3
 8009f20:	4a53      	ldr	r2, [pc, #332]	; (800a070 <UART_SetConfig+0x9d0>)
 8009f22:	fa22 f303 	lsr.w	r3, r2, r3
 8009f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f28:	e00f      	b.n	8009f4a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009f2a:	4b51      	ldr	r3, [pc, #324]	; (800a070 <UART_SetConfig+0x9d0>)
 8009f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f2e:	e00c      	b.n	8009f4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f30:	4b4c      	ldr	r3, [pc, #304]	; (800a064 <UART_SetConfig+0x9c4>)
 8009f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f34:	e009      	b.n	8009f4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f3c:	e005      	b.n	8009f4a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 80ea 	beq.w	800a126 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	4a44      	ldr	r2, [pc, #272]	; (800a068 <UART_SetConfig+0x9c8>)
 8009f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f64:	005a      	lsls	r2, r3, #1
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	441a      	add	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f76:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	2b0f      	cmp	r3, #15
 8009f7c:	d916      	bls.n	8009fac <UART_SetConfig+0x90c>
 8009f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f84:	d212      	bcs.n	8009fac <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f023 030f 	bic.w	r3, r3, #15
 8009f8e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	085b      	lsrs	r3, r3, #1
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	f003 0307 	and.w	r3, r3, #7
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009fa8:	60da      	str	r2, [r3, #12]
 8009faa:	e0bc      	b.n	800a126 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009fb2:	e0b8      	b.n	800a126 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fb8:	2b20      	cmp	r3, #32
 8009fba:	dc4b      	bgt.n	800a054 <UART_SetConfig+0x9b4>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f2c0 8087 	blt.w	800a0d0 <UART_SetConfig+0xa30>
 8009fc2:	2b20      	cmp	r3, #32
 8009fc4:	f200 8084 	bhi.w	800a0d0 <UART_SetConfig+0xa30>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <UART_SetConfig+0x930>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	0800a05b 	.word	0x0800a05b
 8009fd4:	0800a075 	.word	0x0800a075
 8009fd8:	0800a0d1 	.word	0x0800a0d1
 8009fdc:	0800a0d1 	.word	0x0800a0d1
 8009fe0:	0800a07d 	.word	0x0800a07d
 8009fe4:	0800a0d1 	.word	0x0800a0d1
 8009fe8:	0800a0d1 	.word	0x0800a0d1
 8009fec:	0800a0d1 	.word	0x0800a0d1
 8009ff0:	0800a08d 	.word	0x0800a08d
 8009ff4:	0800a0d1 	.word	0x0800a0d1
 8009ff8:	0800a0d1 	.word	0x0800a0d1
 8009ffc:	0800a0d1 	.word	0x0800a0d1
 800a000:	0800a0d1 	.word	0x0800a0d1
 800a004:	0800a0d1 	.word	0x0800a0d1
 800a008:	0800a0d1 	.word	0x0800a0d1
 800a00c:	0800a0d1 	.word	0x0800a0d1
 800a010:	0800a09d 	.word	0x0800a09d
 800a014:	0800a0d1 	.word	0x0800a0d1
 800a018:	0800a0d1 	.word	0x0800a0d1
 800a01c:	0800a0d1 	.word	0x0800a0d1
 800a020:	0800a0d1 	.word	0x0800a0d1
 800a024:	0800a0d1 	.word	0x0800a0d1
 800a028:	0800a0d1 	.word	0x0800a0d1
 800a02c:	0800a0d1 	.word	0x0800a0d1
 800a030:	0800a0d1 	.word	0x0800a0d1
 800a034:	0800a0d1 	.word	0x0800a0d1
 800a038:	0800a0d1 	.word	0x0800a0d1
 800a03c:	0800a0d1 	.word	0x0800a0d1
 800a040:	0800a0d1 	.word	0x0800a0d1
 800a044:	0800a0d1 	.word	0x0800a0d1
 800a048:	0800a0d1 	.word	0x0800a0d1
 800a04c:	0800a0d1 	.word	0x0800a0d1
 800a050:	0800a0c3 	.word	0x0800a0c3
 800a054:	2b40      	cmp	r3, #64	; 0x40
 800a056:	d037      	beq.n	800a0c8 <UART_SetConfig+0xa28>
 800a058:	e03a      	b.n	800a0d0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a05a:	f7fc fecf 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 800a05e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a060:	e03c      	b.n	800a0dc <UART_SetConfig+0xa3c>
 800a062:	bf00      	nop
 800a064:	003d0900 	.word	0x003d0900
 800a068:	0800e858 	.word	0x0800e858
 800a06c:	58024400 	.word	0x58024400
 800a070:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a074:	f7fc fed8 	bl	8006e28 <HAL_RCC_GetPCLK2Freq>
 800a078:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a07a:	e02f      	b.n	800a0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a07c:	f107 0314 	add.w	r3, r7, #20
 800a080:	4618      	mov	r0, r3
 800a082:	f7fd fe7f 	bl	8007d84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a08a:	e027      	b.n	800a0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a08c:	f107 0308 	add.w	r3, r7, #8
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd ffcb 	bl	800802c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a09a:	e01f      	b.n	800a0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a09c:	4b2c      	ldr	r3, [pc, #176]	; (800a150 <UART_SetConfig+0xab0>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0320 	and.w	r3, r3, #32
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d009      	beq.n	800a0bc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0a8:	4b29      	ldr	r3, [pc, #164]	; (800a150 <UART_SetConfig+0xab0>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	08db      	lsrs	r3, r3, #3
 800a0ae:	f003 0303 	and.w	r3, r3, #3
 800a0b2:	4a28      	ldr	r2, [pc, #160]	; (800a154 <UART_SetConfig+0xab4>)
 800a0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0ba:	e00f      	b.n	800a0dc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a0bc:	4b25      	ldr	r3, [pc, #148]	; (800a154 <UART_SetConfig+0xab4>)
 800a0be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0c0:	e00c      	b.n	800a0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0c2:	4b25      	ldr	r3, [pc, #148]	; (800a158 <UART_SetConfig+0xab8>)
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0c6:	e009      	b.n	800a0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ce:	e005      	b.n	800a0dc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0da:	bf00      	nop
    }

    if (pclk != 0U)
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d021      	beq.n	800a126 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	4a1d      	ldr	r2, [pc, #116]	; (800a15c <UART_SetConfig+0xabc>)
 800a0e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	085b      	lsrs	r3, r3, #1
 800a0fa:	441a      	add	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	fbb2 f3f3 	udiv	r3, r2, r3
 800a104:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	2b0f      	cmp	r3, #15
 800a10a:	d909      	bls.n	800a120 <UART_SetConfig+0xa80>
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a112:	d205      	bcs.n	800a120 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	b29a      	uxth	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	60da      	str	r2, [r3, #12]
 800a11e:	e002      	b.n	800a126 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a142:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a146:	4618      	mov	r0, r3
 800a148:	3738      	adds	r7, #56	; 0x38
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bdb0      	pop	{r4, r5, r7, pc}
 800a14e:	bf00      	nop
 800a150:	58024400 	.word	0x58024400
 800a154:	03d09000 	.word	0x03d09000
 800a158:	003d0900 	.word	0x003d0900
 800a15c:	0800e858 	.word	0x0800e858

0800a160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16c:	f003 0301 	and.w	r3, r3, #1
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00a      	beq.n	800a18a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18e:	f003 0302 	and.w	r3, r3, #2
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	430a      	orrs	r2, r1
 800a1aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00a      	beq.n	800a1ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d2:	f003 0308 	and.w	r3, r3, #8
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f4:	f003 0310 	and.w	r3, r3, #16
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a216:	f003 0320 	and.w	r3, r3, #32
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d01a      	beq.n	800a276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a25a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a25e:	d10a      	bne.n	800a276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00a      	beq.n	800a298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	430a      	orrs	r2, r1
 800a296:	605a      	str	r2, [r3, #4]
  }
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af02      	add	r7, sp, #8
 800a2aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2b4:	f7f8 fca2 	bl	8002bfc <HAL_GetTick>
 800a2b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 0308 	and.w	r3, r3, #8
 800a2c4:	2b08      	cmp	r3, #8
 800a2c6:	d10e      	bne.n	800a2e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f82f 	bl	800a33a <UART_WaitOnFlagUntilTimeout>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e025      	b.n	800a332 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b04      	cmp	r3, #4
 800a2f2:	d10e      	bne.n	800a312 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f819 	bl	800a33a <UART_WaitOnFlagUntilTimeout>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e00f      	b.n	800a332 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2220      	movs	r2, #32
 800a316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b09c      	sub	sp, #112	; 0x70
 800a33e:	af00      	add	r7, sp, #0
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	603b      	str	r3, [r7, #0]
 800a346:	4613      	mov	r3, r2
 800a348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a34a:	e0a9      	b.n	800a4a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a34c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a352:	f000 80a5 	beq.w	800a4a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a356:	f7f8 fc51 	bl	8002bfc <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a362:	429a      	cmp	r2, r3
 800a364:	d302      	bcc.n	800a36c <UART_WaitOnFlagUntilTimeout+0x32>
 800a366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d140      	bne.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a374:	e853 3f00 	ldrex	r3, [r3]
 800a378:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a37c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a380:	667b      	str	r3, [r7, #100]	; 0x64
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a38a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a38c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a390:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a392:	e841 2300 	strex	r3, r2, [r1]
 800a396:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1e6      	bne.n	800a36c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	f023 0301 	bic.w	r3, r3, #1
 800a3b4:	663b      	str	r3, [r7, #96]	; 0x60
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3be:	64ba      	str	r2, [r7, #72]	; 0x48
 800a3c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a3c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3c6:	e841 2300 	strex	r3, r2, [r1]
 800a3ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e5      	bne.n	800a39e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2220      	movs	r2, #32
 800a3d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2220      	movs	r2, #32
 800a3de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e069      	b.n	800a4c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0304 	and.w	r3, r3, #4
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d051      	beq.n	800a4a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a40a:	d149      	bne.n	800a4a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a414:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	e853 3f00 	ldrex	r3, [r3]
 800a422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a42a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	461a      	mov	r2, r3
 800a432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a434:	637b      	str	r3, [r7, #52]	; 0x34
 800a436:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a43a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a43c:	e841 2300 	strex	r3, r2, [r1]
 800a440:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1e6      	bne.n	800a416 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3308      	adds	r3, #8
 800a44e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	e853 3f00 	ldrex	r3, [r3]
 800a456:	613b      	str	r3, [r7, #16]
   return(result);
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	f023 0301 	bic.w	r3, r3, #1
 800a45e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3308      	adds	r3, #8
 800a466:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a468:	623a      	str	r2, [r7, #32]
 800a46a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46c:	69f9      	ldr	r1, [r7, #28]
 800a46e:	6a3a      	ldr	r2, [r7, #32]
 800a470:	e841 2300 	strex	r3, r2, [r1]
 800a474:	61bb      	str	r3, [r7, #24]
   return(result);
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1e5      	bne.n	800a448 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2220      	movs	r2, #32
 800a480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2220      	movs	r2, #32
 800a488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2220      	movs	r2, #32
 800a490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e010      	b.n	800a4c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	69da      	ldr	r2, [r3, #28]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	bf0c      	ite	eq
 800a4b0:	2301      	moveq	r3, #1
 800a4b2:	2300      	movne	r3, #0
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	f43f af46 	beq.w	800a34c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3770      	adds	r7, #112	; 0x70
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b096      	sub	sp, #88	; 0x58
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	88fa      	ldrh	r2, [r7, #6]
 800a4e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2222      	movs	r2, #34	; 0x22
 800a4f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d02c      	beq.n	800a55a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a504:	4a42      	ldr	r2, [pc, #264]	; (800a610 <UART_Start_Receive_DMA+0x144>)
 800a506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a50c:	4a41      	ldr	r2, [pc, #260]	; (800a614 <UART_Start_Receive_DMA+0x148>)
 800a50e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a514:	4a40      	ldr	r2, [pc, #256]	; (800a618 <UART_Start_Receive_DMA+0x14c>)
 800a516:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a51c:	2200      	movs	r2, #0
 800a51e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3324      	adds	r3, #36	; 0x24
 800a52a:	4619      	mov	r1, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a530:	461a      	mov	r2, r3
 800a532:	88fb      	ldrh	r3, [r7, #6]
 800a534:	f7f8 ffb6 	bl	80034a4 <HAL_DMA_Start_IT>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00d      	beq.n	800a55a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2210      	movs	r2, #16
 800a542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2220      	movs	r2, #32
 800a552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e055      	b.n	800a606 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d018      	beq.n	800a59c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a572:	e853 3f00 	ldrex	r3, [r3]
 800a576:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a57e:	657b      	str	r3, [r7, #84]	; 0x54
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	461a      	mov	r2, r3
 800a586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a588:	64bb      	str	r3, [r7, #72]	; 0x48
 800a58a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a58e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a590:	e841 2300 	strex	r3, r2, [r1]
 800a594:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1e6      	bne.n	800a56a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3308      	adds	r3, #8
 800a5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	e853 3f00 	ldrex	r3, [r3]
 800a5aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	f043 0301 	orr.w	r3, r3, #1
 800a5b2:	653b      	str	r3, [r7, #80]	; 0x50
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5bc:	637a      	str	r2, [r7, #52]	; 0x34
 800a5be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5c4:	e841 2300 	strex	r3, r2, [r1]
 800a5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e5      	bne.n	800a59c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	e853 3f00 	ldrex	r3, [r3]
 800a5de:	613b      	str	r3, [r7, #16]
   return(result);
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5f0:	623a      	str	r2, [r7, #32]
 800a5f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f4:	69f9      	ldr	r1, [r7, #28]
 800a5f6:	6a3a      	ldr	r2, [r7, #32]
 800a5f8:	e841 2300 	strex	r3, r2, [r1]
 800a5fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1e5      	bne.n	800a5d0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3758      	adds	r7, #88	; 0x58
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	0800a81f 	.word	0x0800a81f
 800a614:	0800a941 	.word	0x0800a941
 800a618:	0800a979 	.word	0x0800a979

0800a61c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b08f      	sub	sp, #60	; 0x3c
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	e853 3f00 	ldrex	r3, [r3]
 800a630:	61fb      	str	r3, [r7, #28]
   return(result);
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a638:	637b      	str	r3, [r7, #52]	; 0x34
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a642:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a644:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a64a:	e841 2300 	strex	r3, r2, [r1]
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1e6      	bne.n	800a624 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	3308      	adds	r3, #8
 800a65c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	e853 3f00 	ldrex	r3, [r3]
 800a664:	60bb      	str	r3, [r7, #8]
   return(result);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a66c:	633b      	str	r3, [r7, #48]	; 0x30
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	3308      	adds	r3, #8
 800a674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a676:	61ba      	str	r2, [r7, #24]
 800a678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67a:	6979      	ldr	r1, [r7, #20]
 800a67c:	69ba      	ldr	r2, [r7, #24]
 800a67e:	e841 2300 	strex	r3, r2, [r1]
 800a682:	613b      	str	r3, [r7, #16]
   return(result);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1e5      	bne.n	800a656 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a692:	bf00      	nop
 800a694:	373c      	adds	r7, #60	; 0x3c
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
	...

0800a6a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b095      	sub	sp, #84	; 0x54
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c6:	643b      	str	r3, [r7, #64]	; 0x40
 800a6c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e6      	bne.n	800a6a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6ea:	69fa      	ldr	r2, [r7, #28]
 800a6ec:	4b1e      	ldr	r3, [pc, #120]	; (800a768 <UART_EndRxTransfer+0xc8>)
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e5      	bne.n	800a6da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a712:	2b01      	cmp	r3, #1
 800a714:	d118      	bne.n	800a748 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	60bb      	str	r3, [r7, #8]
   return(result);
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f023 0310 	bic.w	r3, r3, #16
 800a72a:	647b      	str	r3, [r7, #68]	; 0x44
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	461a      	mov	r2, r3
 800a732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a734:	61bb      	str	r3, [r7, #24]
 800a736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	6979      	ldr	r1, [r7, #20]
 800a73a:	69ba      	ldr	r2, [r7, #24]
 800a73c:	e841 2300 	strex	r3, r2, [r1]
 800a740:	613b      	str	r3, [r7, #16]
   return(result);
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e6      	bne.n	800a716 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a75c:	bf00      	nop
 800a75e:	3754      	adds	r7, #84	; 0x54
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	effffffe 	.word	0xeffffffe

0800a76c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b090      	sub	sp, #64	; 0x40
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a778:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a782:	d037      	beq.n	800a7f4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a786:	2200      	movs	r2, #0
 800a788:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3308      	adds	r3, #8
 800a792:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	e853 3f00 	ldrex	r3, [r3]
 800a79a:	623b      	str	r3, [r7, #32]
   return(result);
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3308      	adds	r3, #8
 800a7aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7ac:	633a      	str	r2, [r7, #48]	; 0x30
 800a7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7b4:	e841 2300 	strex	r3, r2, [r1]
 800a7b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1e5      	bne.n	800a78c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7de:	61fb      	str	r3, [r7, #28]
 800a7e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	69b9      	ldr	r1, [r7, #24]
 800a7e4:	69fa      	ldr	r2, [r7, #28]
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e6      	bne.n	800a7c0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7f2:	e002      	b.n	800a7fa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a7f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a7f6:	f7fe ff15 	bl	8009624 <HAL_UART_TxCpltCallback>
}
 800a7fa:	bf00      	nop
 800a7fc:	3740      	adds	r7, #64	; 0x40
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b084      	sub	sp, #16
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f7fe ff11 	bl	8009638 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a816:	bf00      	nop
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b09c      	sub	sp, #112	; 0x70
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a834:	d071      	beq.n	800a91a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a838:	2200      	movs	r2, #0
 800a83a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a84c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a84e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a852:	66bb      	str	r3, [r7, #104]	; 0x68
 800a854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a85c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a85e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a862:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e6      	bne.n	800a83e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3308      	adds	r3, #8
 800a876:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	e853 3f00 	ldrex	r3, [r3]
 800a87e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a882:	f023 0301 	bic.w	r3, r3, #1
 800a886:	667b      	str	r3, [r7, #100]	; 0x64
 800a888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	3308      	adds	r3, #8
 800a88e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a890:	647a      	str	r2, [r7, #68]	; 0x44
 800a892:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a894:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a898:	e841 2300 	strex	r3, r2, [r1]
 800a89c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1e5      	bne.n	800a870 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	e853 3f00 	ldrex	r3, [r3]
 800a8b2:	623b      	str	r3, [r7, #32]
   return(result);
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8ba:	663b      	str	r3, [r7, #96]	; 0x60
 800a8bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8c4:	633a      	str	r2, [r7, #48]	; 0x30
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8cc:	e841 2300 	strex	r3, r2, [r1]
 800a8d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e5      	bne.n	800a8a4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8da:	2220      	movs	r2, #32
 800a8dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d118      	bne.n	800a91a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	e853 3f00 	ldrex	r3, [r3]
 800a8f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f023 0310 	bic.w	r3, r3, #16
 800a8fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	461a      	mov	r2, r3
 800a904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a906:	61fb      	str	r3, [r7, #28]
 800a908:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90a:	69b9      	ldr	r1, [r7, #24]
 800a90c:	69fa      	ldr	r2, [r7, #28]
 800a90e:	e841 2300 	strex	r3, r2, [r1]
 800a912:	617b      	str	r3, [r7, #20]
   return(result);
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1e6      	bne.n	800a8e8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d107      	bne.n	800a932 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a928:	4619      	mov	r1, r3
 800a92a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a92c:	f7fe feac 	bl	8009688 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a930:	e002      	b.n	800a938 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800a932:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a934:	f7fe fe8a 	bl	800964c <HAL_UART_RxCpltCallback>
}
 800a938:	bf00      	nop
 800a93a:	3770      	adds	r7, #112	; 0x70
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a952:	2b01      	cmp	r3, #1
 800a954:	d109      	bne.n	800a96a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a95c:	085b      	lsrs	r3, r3, #1
 800a95e:	b29b      	uxth	r3, r3
 800a960:	4619      	mov	r1, r3
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f7fe fe90 	bl	8009688 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a968:	e002      	b.n	800a970 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7fe fe78 	bl	8009660 <HAL_UART_RxHalfCpltCallback>
}
 800a970:	bf00      	nop
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a984:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a98c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a994:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a0:	2b80      	cmp	r3, #128	; 0x80
 800a9a2:	d109      	bne.n	800a9b8 <UART_DMAError+0x40>
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2b21      	cmp	r3, #33	; 0x21
 800a9a8:	d106      	bne.n	800a9b8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a9b2:	6978      	ldr	r0, [r7, #20]
 800a9b4:	f7ff fe32 	bl	800a61c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c2:	2b40      	cmp	r3, #64	; 0x40
 800a9c4:	d109      	bne.n	800a9da <UART_DMAError+0x62>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b22      	cmp	r3, #34	; 0x22
 800a9ca:	d106      	bne.n	800a9da <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a9d4:	6978      	ldr	r0, [r7, #20]
 800a9d6:	f7ff fe63 	bl	800a6a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9e0:	f043 0210 	orr.w	r2, r3, #16
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9ea:	6978      	ldr	r0, [r7, #20]
 800a9ec:	f7fe fe42 	bl	8009674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9f0:	bf00      	nop
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f7fe fe2c 	bl	8009674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa1c:	bf00      	nop
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b088      	sub	sp, #32
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	e853 3f00 	ldrex	r3, [r3]
 800aa38:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa40:	61fb      	str	r3, [r7, #28]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	61bb      	str	r3, [r7, #24]
 800aa4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4e:	6979      	ldr	r1, [r7, #20]
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	e841 2300 	strex	r3, r2, [r1]
 800aa56:	613b      	str	r3, [r7, #16]
   return(result);
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1e6      	bne.n	800aa2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2220      	movs	r2, #32
 800aa62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7fe fdd9 	bl	8009624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa72:	bf00      	nop
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b083      	sub	sp, #12
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa82:	bf00      	nop
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aaaa:	bf00      	nop
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b085      	sub	sp, #20
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d101      	bne.n	800aacc <HAL_UARTEx_DisableFifoMode+0x16>
 800aac8:	2302      	movs	r3, #2
 800aaca:	e027      	b.n	800ab1c <HAL_UARTEx_DisableFifoMode+0x66>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2224      	movs	r2, #36	; 0x24
 800aad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f022 0201 	bic.w	r2, r2, #1
 800aaf2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aafa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2220      	movs	r2, #32
 800ab0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d101      	bne.n	800ab40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	e02d      	b.n	800ab9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2224      	movs	r2, #36	; 0x24
 800ab4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f022 0201 	bic.w	r2, r2, #1
 800ab66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 f84f 	bl	800ac20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d101      	bne.n	800abbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800abb8:	2302      	movs	r3, #2
 800abba:	e02d      	b.n	800ac18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2224      	movs	r2, #36	; 0x24
 800abc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f022 0201 	bic.w	r2, r2, #1
 800abe2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	430a      	orrs	r2, r1
 800abf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 f811 	bl	800ac20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d108      	bne.n	800ac42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac40:	e031      	b.n	800aca6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac42:	2310      	movs	r3, #16
 800ac44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac46:	2310      	movs	r3, #16
 800ac48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	0e5b      	lsrs	r3, r3, #25
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	0f5b      	lsrs	r3, r3, #29
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	f003 0307 	and.w	r3, r3, #7
 800ac68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac6a:	7bbb      	ldrb	r3, [r7, #14]
 800ac6c:	7b3a      	ldrb	r2, [r7, #12]
 800ac6e:	4911      	ldr	r1, [pc, #68]	; (800acb4 <UARTEx_SetNbDataToProcess+0x94>)
 800ac70:	5c8a      	ldrb	r2, [r1, r2]
 800ac72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac76:	7b3a      	ldrb	r2, [r7, #12]
 800ac78:	490f      	ldr	r1, [pc, #60]	; (800acb8 <UARTEx_SetNbDataToProcess+0x98>)
 800ac7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
 800ac8a:	7b7a      	ldrb	r2, [r7, #13]
 800ac8c:	4909      	ldr	r1, [pc, #36]	; (800acb4 <UARTEx_SetNbDataToProcess+0x94>)
 800ac8e:	5c8a      	ldrb	r2, [r1, r2]
 800ac90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac94:	7b7a      	ldrb	r2, [r7, #13]
 800ac96:	4908      	ldr	r1, [pc, #32]	; (800acb8 <UARTEx_SetNbDataToProcess+0x98>)
 800ac98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aca6:	bf00      	nop
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	0800e870 	.word	0x0800e870
 800acb8:	0800e878 	.word	0x0800e878

0800acbc <CaptureReportData>:
#endif
	return ThrusterTemp;
}

void CaptureReportData(ReportData_t SendData, uint8_t *ReportTransmit)
{
 800acbc:	b084      	sub	sp, #16
 800acbe:	b490      	push	{r4, r7}
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	f107 0408 	add.w	r4, r7, #8
 800acc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ReportTransmit[0] = (uint8_t) (SendData.FrameHead);
 800acca:	7a3a      	ldrb	r2, [r7, #8]
 800accc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acce:	701a      	strb	r2, [r3, #0]
	ReportTransmit[1] = (uint8_t) ((SendData.CabinFunction)
 800acd0:	7a7b      	ldrb	r3, [r7, #9]
 800acd2:	b25a      	sxtb	r2, r3
			| (SendData.WaterDetect << 1));
 800acd4:	7abb      	ldrb	r3, [r7, #10]
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	b25b      	sxtb	r3, r3
 800acda:	4313      	orrs	r3, r2
 800acdc:	b25a      	sxtb	r2, r3
	ReportTransmit[1] = (uint8_t) ((SendData.CabinFunction)
 800acde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace0:	3301      	adds	r3, #1
 800ace2:	b2d2      	uxtb	r2, r2
 800ace4:	701a      	strb	r2, [r3, #0]
	ReportTransmit[2] = (uint8_t) ((SendData.CabinTemperature & 0xFF00) >> 8);
 800ace6:	89bb      	ldrh	r3, [r7, #12]
 800ace8:	0a1b      	lsrs	r3, r3, #8
 800acea:	b29a      	uxth	r2, r3
 800acec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acee:	3302      	adds	r3, #2
 800acf0:	b2d2      	uxtb	r2, r2
 800acf2:	701a      	strb	r2, [r3, #0]
	ReportTransmit[3] = (uint8_t) (SendData.CabinTemperature & 0x00FF);
 800acf4:	89ba      	ldrh	r2, [r7, #12]
 800acf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acf8:	3303      	adds	r3, #3
 800acfa:	b2d2      	uxtb	r2, r2
 800acfc:	701a      	strb	r2, [r3, #0]
	ReportTransmit[4] =
			(uint8_t) ((SendData.CabinBarometric & 0xFF000000) >> 24);
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	0e1a      	lsrs	r2, r3, #24
	ReportTransmit[4] =
 800ad02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad04:	3304      	adds	r3, #4
			(uint8_t) ((SendData.CabinBarometric & 0xFF000000) >> 24);
 800ad06:	b2d2      	uxtb	r2, r2
	ReportTransmit[4] =
 800ad08:	701a      	strb	r2, [r3, #0]
	ReportTransmit[5] =
			(uint8_t) ((SendData.CabinBarometric & 0x00FF0000) >> 16);
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	0c1a      	lsrs	r2, r3, #16
	ReportTransmit[5] =
 800ad0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad10:	3305      	adds	r3, #5
			(uint8_t) ((SendData.CabinBarometric & 0x00FF0000) >> 16);
 800ad12:	b2d2      	uxtb	r2, r2
	ReportTransmit[5] =
 800ad14:	701a      	strb	r2, [r3, #0]
	ReportTransmit[6] =
			(uint8_t) ((SendData.CabinBarometric & 0x0000FF00) >> 8);
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	0a1a      	lsrs	r2, r3, #8
	ReportTransmit[6] =
 800ad1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad1c:	3306      	adds	r3, #6
			(uint8_t) ((SendData.CabinBarometric & 0x0000FF00) >> 8);
 800ad1e:	b2d2      	uxtb	r2, r2
	ReportTransmit[6] =
 800ad20:	701a      	strb	r2, [r3, #0]
	ReportTransmit[7] = (uint8_t) (SendData.CabinBarometric & 0x000000FF);
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad26:	3307      	adds	r3, #7
 800ad28:	b2d2      	uxtb	r2, r2
 800ad2a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[8] = (uint8_t) ((SendData.CabinHumidity & 0xFF00) >> 8);
 800ad2c:	8abb      	ldrh	r3, [r7, #20]
 800ad2e:	0a1b      	lsrs	r3, r3, #8
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad34:	3308      	adds	r3, #8
 800ad36:	b2d2      	uxtb	r2, r2
 800ad38:	701a      	strb	r2, [r3, #0]
	ReportTransmit[9] = (uint8_t) (SendData.CabinHumidity & 0x00FF);
 800ad3a:	8aba      	ldrh	r2, [r7, #20]
 800ad3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad3e:	3309      	adds	r3, #9
 800ad40:	b2d2      	uxtb	r2, r2
 800ad42:	701a      	strb	r2, [r3, #0]
	ReportTransmit[10] = (uint8_t) ((SendData.AccNum[0] & 0xFF00) >> 8);
 800ad44:	8afb      	ldrh	r3, [r7, #22]
 800ad46:	0a1b      	lsrs	r3, r3, #8
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad4c:	330a      	adds	r3, #10
 800ad4e:	b2d2      	uxtb	r2, r2
 800ad50:	701a      	strb	r2, [r3, #0]
	ReportTransmit[11] = (uint8_t) (SendData.AccNum[0] & 0x00FF);
 800ad52:	8afa      	ldrh	r2, [r7, #22]
 800ad54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad56:	330b      	adds	r3, #11
 800ad58:	b2d2      	uxtb	r2, r2
 800ad5a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[12] = (uint8_t) ((SendData.AccNum[1] & 0xFF00) >> 8);
 800ad5c:	8b3b      	ldrh	r3, [r7, #24]
 800ad5e:	0a1b      	lsrs	r3, r3, #8
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad64:	330c      	adds	r3, #12
 800ad66:	b2d2      	uxtb	r2, r2
 800ad68:	701a      	strb	r2, [r3, #0]
	ReportTransmit[13] = (uint8_t) (SendData.AccNum[1] & 0x00FF);
 800ad6a:	8b3a      	ldrh	r2, [r7, #24]
 800ad6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad6e:	330d      	adds	r3, #13
 800ad70:	b2d2      	uxtb	r2, r2
 800ad72:	701a      	strb	r2, [r3, #0]
	ReportTransmit[14] = (uint8_t) ((SendData.AccNum[2] & 0xFF00) >> 8);
 800ad74:	8b7b      	ldrh	r3, [r7, #26]
 800ad76:	0a1b      	lsrs	r3, r3, #8
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad7c:	330e      	adds	r3, #14
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	701a      	strb	r2, [r3, #0]
	ReportTransmit[15] = (uint8_t) (SendData.AccNum[2] & 0x00FF);
 800ad82:	8b7a      	ldrh	r2, [r7, #26]
 800ad84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad86:	330f      	adds	r3, #15
 800ad88:	b2d2      	uxtb	r2, r2
 800ad8a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[16] = (uint8_t) ((SendData.RotNum[0] & 0xFF00) >> 8);
 800ad8c:	8bbb      	ldrh	r3, [r7, #28]
 800ad8e:	0a1b      	lsrs	r3, r3, #8
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad94:	3310      	adds	r3, #16
 800ad96:	b2d2      	uxtb	r2, r2
 800ad98:	701a      	strb	r2, [r3, #0]
	ReportTransmit[17] = (uint8_t) (SendData.RotNum[0] & 0x00FF);
 800ad9a:	8bba      	ldrh	r2, [r7, #28]
 800ad9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad9e:	3311      	adds	r3, #17
 800ada0:	b2d2      	uxtb	r2, r2
 800ada2:	701a      	strb	r2, [r3, #0]
	ReportTransmit[18] = (uint8_t) ((SendData.RotNum[1] & 0xFF00) >> 8);
 800ada4:	8bfb      	ldrh	r3, [r7, #30]
 800ada6:	0a1b      	lsrs	r3, r3, #8
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adac:	3312      	adds	r3, #18
 800adae:	b2d2      	uxtb	r2, r2
 800adb0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[19] = (uint8_t) (SendData.RotNum[1] & 0x00FF);
 800adb2:	8bfa      	ldrh	r2, [r7, #30]
 800adb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb6:	3313      	adds	r3, #19
 800adb8:	b2d2      	uxtb	r2, r2
 800adba:	701a      	strb	r2, [r3, #0]
	ReportTransmit[20] = (uint8_t) ((SendData.RotNum[2] & 0xFF00) >> 8);
 800adbc:	8c3b      	ldrh	r3, [r7, #32]
 800adbe:	0a1b      	lsrs	r3, r3, #8
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adc4:	3314      	adds	r3, #20
 800adc6:	b2d2      	uxtb	r2, r2
 800adc8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[21] = (uint8_t) (SendData.RotNum[2] & 0x00FF);
 800adca:	8c3a      	ldrh	r2, [r7, #32]
 800adcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adce:	3315      	adds	r3, #21
 800add0:	b2d2      	uxtb	r2, r2
 800add2:	701a      	strb	r2, [r3, #0]
	ReportTransmit[22] = (uint8_t) ((SendData.EulNum[0] & 0xFF00) >> 8);
 800add4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800add6:	0a1b      	lsrs	r3, r3, #8
 800add8:	b29a      	uxth	r2, r3
 800adda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800addc:	3316      	adds	r3, #22
 800adde:	b2d2      	uxtb	r2, r2
 800ade0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[23] = (uint8_t) (SendData.EulNum[0] & 0x00FF);
 800ade2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ade4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade6:	3317      	adds	r3, #23
 800ade8:	b2d2      	uxtb	r2, r2
 800adea:	701a      	strb	r2, [r3, #0]
	ReportTransmit[24] = (uint8_t) ((SendData.EulNum[1] & 0xFF00) >> 8);
 800adec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adee:	0a1b      	lsrs	r3, r3, #8
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adf4:	3318      	adds	r3, #24
 800adf6:	b2d2      	uxtb	r2, r2
 800adf8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[25] = (uint8_t) (SendData.EulNum[1] & 0x00FF);
 800adfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800adfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adfe:	3319      	adds	r3, #25
 800ae00:	b2d2      	uxtb	r2, r2
 800ae02:	701a      	strb	r2, [r3, #0]
	ReportTransmit[26] = (uint8_t) ((SendData.EulNum[2] & 0xFF00) >> 8);
 800ae04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae06:	0a1b      	lsrs	r3, r3, #8
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae0c:	331a      	adds	r3, #26
 800ae0e:	b2d2      	uxtb	r2, r2
 800ae10:	701a      	strb	r2, [r3, #0]
	ReportTransmit[27] = (uint8_t) (SendData.EulNum[2] & 0x00FF);
 800ae12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae16:	331b      	adds	r3, #27
 800ae18:	b2d2      	uxtb	r2, r2
 800ae1a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[28] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 800ae1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae1e:	0a1b      	lsrs	r3, r3, #8
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae24:	331c      	adds	r3, #28
 800ae26:	b2d2      	uxtb	r2, r2
 800ae28:	701a      	strb	r2, [r3, #0]
	ReportTransmit[29] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 800ae2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ae2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae2e:	331d      	adds	r3, #29
 800ae30:	b2d2      	uxtb	r2, r2
 800ae32:	701a      	strb	r2, [r3, #0]
	ReportTransmit[30] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 800ae34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae36:	0a1b      	lsrs	r3, r3, #8
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae3c:	331e      	adds	r3, #30
 800ae3e:	b2d2      	uxtb	r2, r2
 800ae40:	701a      	strb	r2, [r3, #0]
	ReportTransmit[31] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 800ae42:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ae44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae46:	331f      	adds	r3, #31
 800ae48:	b2d2      	uxtb	r2, r2
 800ae4a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[32] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 800ae4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae4e:	0a1b      	lsrs	r3, r3, #8
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae54:	3320      	adds	r3, #32
 800ae56:	b2d2      	uxtb	r2, r2
 800ae58:	701a      	strb	r2, [r3, #0]
	ReportTransmit[33] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 800ae5a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ae5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae5e:	3321      	adds	r3, #33	; 0x21
 800ae60:	b2d2      	uxtb	r2, r2
 800ae62:	701a      	strb	r2, [r3, #0]
	ReportTransmit[34] = (uint8_t) ((SendData.SonarHeight & 0xFF000000) >> 24);
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	0e1a      	lsrs	r2, r3, #24
 800ae68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae6a:	3322      	adds	r3, #34	; 0x22
 800ae6c:	b2d2      	uxtb	r2, r2
 800ae6e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[35] = (uint8_t) ((SendData.SonarHeight & 0x00FF0000) >> 16);
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	0c1a      	lsrs	r2, r3, #16
 800ae74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae76:	3323      	adds	r3, #35	; 0x23
 800ae78:	b2d2      	uxtb	r2, r2
 800ae7a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[36] = (uint8_t) ((SendData.SonarHeight & 0x0000FF00) >> 8);
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7e:	0a1a      	lsrs	r2, r3, #8
 800ae80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae82:	3324      	adds	r3, #36	; 0x24
 800ae84:	b2d2      	uxtb	r2, r2
 800ae86:	701a      	strb	r2, [r3, #0]
	ReportTransmit[37] = (uint8_t) (SendData.SonarHeight & 0x000000FF);
 800ae88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae8c:	3325      	adds	r3, #37	; 0x25
 800ae8e:	b2d2      	uxtb	r2, r2
 800ae90:	701a      	strb	r2, [r3, #0]
	ReportTransmit[38] = (uint8_t) ((SendData.SonarConfidence & 0xFF00) >> 8);
 800ae92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ae94:	0a1b      	lsrs	r3, r3, #8
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae9a:	3326      	adds	r3, #38	; 0x26
 800ae9c:	b2d2      	uxtb	r2, r2
 800ae9e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[39] = (uint8_t) (SendData.SonarConfidence & 0x00FF);
 800aea0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800aea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea4:	3327      	adds	r3, #39	; 0x27
 800aea6:	b2d2      	uxtb	r2, r2
 800aea8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[40] = (uint8_t) ((SendData.WaterTemperature & 0xFF00) >> 8);
 800aeaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aeac:	0a1b      	lsrs	r3, r3, #8
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeb2:	3328      	adds	r3, #40	; 0x28
 800aeb4:	b2d2      	uxtb	r2, r2
 800aeb6:	701a      	strb	r2, [r3, #0]
	ReportTransmit[41] = (uint8_t) (SendData.WaterTemperature & 0x00FF);
 800aeb8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aeba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aebc:	3329      	adds	r3, #41	; 0x29
 800aebe:	b2d2      	uxtb	r2, r2
 800aec0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[42] = (uint8_t) ((SendData.WaterDepth & 0xFF00) >> 8);
 800aec2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aec4:	0a1b      	lsrs	r3, r3, #8
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeca:	332a      	adds	r3, #42	; 0x2a
 800aecc:	b2d2      	uxtb	r2, r2
 800aece:	701a      	strb	r2, [r3, #0]
	ReportTransmit[43] = (uint8_t) (SendData.WaterDepth & 0x00FF);
 800aed0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800aed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed4:	332b      	adds	r3, #43	; 0x2b
 800aed6:	b2d2      	uxtb	r2, r2
 800aed8:	701a      	strb	r2, [r3, #0]
//	ReportTransmit[39] = 0x00;
//	ReportTransmit[40] = 0x00;
//	ReportTransmit[41] = 0x00;
//	ReportTransmit[42] = 0x00;
//	ReportTransmit[43] = 0x00;
	ReportTransmit[44] = (uint8_t) 0x00;
 800aeda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aedc:	332c      	adds	r3, #44	; 0x2c
 800aede:	2200      	movs	r2, #0
 800aee0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[45] = (uint8_t) ((SendData.FrameEnd & 0xFF00) >> 8);
 800aee2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aee4:	0a1b      	lsrs	r3, r3, #8
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeea:	332d      	adds	r3, #45	; 0x2d
 800aeec:	b2d2      	uxtb	r2, r2
 800aeee:	701a      	strb	r2, [r3, #0]
	ReportTransmit[46] = (uint8_t) (SendData.FrameEnd & 0x00FF);
 800aef0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800aef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef4:	332e      	adds	r3, #46	; 0x2e
 800aef6:	b2d2      	uxtb	r2, r2
 800aef8:	701a      	strb	r2, [r3, #0]
}
 800aefa:	bf00      	nop
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bc90      	pop	{r4, r7}
 800af00:	b004      	add	sp, #16
 800af02:	4770      	bx	lr

0800af04 <ReportDataAnalysis>:

ReportData_t ReportDataAnalysis(uint8_t *ReportReceive)
{
 800af04:	b4b0      	push	{r4, r5, r7}
 800af06:	b093      	sub	sp, #76	; 0x4c
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
	ReportData_t temp_report;

	for (uint8_t i = 0; i < Slave_UART_RXLen * 2; i++)
 800af0e:	2300      	movs	r3, #0
 800af10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800af14:	e1de      	b.n	800b2d4 <ReportDataAnalysis+0x3d0>
	{
		if ((ReportReceive[i] == 0x25) && (ReportReceive[i + 45] == 0xFF)
 800af16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	4413      	add	r3, r2
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b25      	cmp	r3, #37	; 0x25
 800af22:	f040 81d2 	bne.w	800b2ca <ReportDataAnalysis+0x3c6>
 800af26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800af2a:	332d      	adds	r3, #45	; 0x2d
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	4413      	add	r3, r2
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	2bff      	cmp	r3, #255	; 0xff
 800af34:	f040 81c9 	bne.w	800b2ca <ReportDataAnalysis+0x3c6>
				&& (ReportReceive[i + 46] == 0xFF)
 800af38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800af3c:	332e      	adds	r3, #46	; 0x2e
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	4413      	add	r3, r2
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2bff      	cmp	r3, #255	; 0xff
 800af46:	f040 81c0 	bne.w	800b2ca <ReportDataAnalysis+0x3c6>
				&& (ReportReceive[i + 44] == 0x00))
 800af4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800af4e:	332c      	adds	r3, #44	; 0x2c
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	4413      	add	r3, r2
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f040 81b7 	bne.w	800b2ca <ReportDataAnalysis+0x3c6>
		{
			temp_report.FrameHead = (uint8_t) ReportReceive[i];
 800af5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	4413      	add	r3, r2
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	733b      	strb	r3, [r7, #12]
			temp_report.CabinFunction = (uint8_t) (ReportReceive[i + 1] & 0x01);
 800af68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800af6c:	3301      	adds	r3, #1
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	4413      	add	r3, r2
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	737b      	strb	r3, [r7, #13]
			temp_report.WaterDetect = (uint8_t) (ReportReceive[i + 1] & 0x02);
 800af7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800af80:	3301      	adds	r3, #1
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	4413      	add	r3, r2
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	73bb      	strb	r3, [r7, #14]

			temp_report.CabinTemperature =
					((uint16_t) ReportReceive[i + 2] << 8)
 800af90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800af94:	3302      	adds	r3, #2
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	4413      	add	r3, r2
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	021b      	lsls	r3, r3, #8
							| ((uint16_t) ReportReceive[i + 3]);
 800af9e:	b21a      	sxth	r2, r3
 800afa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800afa4:	3303      	adds	r3, #3
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	440b      	add	r3, r1
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	b21b      	sxth	r3, r3
 800afae:	4313      	orrs	r3, r2
 800afb0:	b21b      	sxth	r3, r3
 800afb2:	b29b      	uxth	r3, r3
			temp_report.CabinTemperature =
 800afb4:	823b      	strh	r3, [r7, #16]
			temp_report.CabinBarometric = (((uint32_t) ReportReceive[i + 4])
 800afb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800afba:	3304      	adds	r3, #4
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	4413      	add	r3, r2
 800afc0:	781b      	ldrb	r3, [r3, #0]
					<< 24) | (((uint32_t) ReportReceive[i + 5]) << 16)
 800afc2:	061a      	lsls	r2, r3, #24
 800afc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800afc8:	3305      	adds	r3, #5
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	440b      	add	r3, r1
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	041b      	lsls	r3, r3, #16
 800afd2:	431a      	orrs	r2, r3
					| (((uint32_t) ReportReceive[i + 6]) << 8)
 800afd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800afd8:	3306      	adds	r3, #6
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	440b      	add	r3, r1
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	021b      	lsls	r3, r3, #8
 800afe2:	4313      	orrs	r3, r2
					| ((uint32_t) ReportReceive[i + 7]);
 800afe4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800afe8:	3207      	adds	r2, #7
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	440a      	add	r2, r1
 800afee:	7812      	ldrb	r2, [r2, #0]
 800aff0:	4313      	orrs	r3, r2
			temp_report.CabinBarometric = (((uint32_t) ReportReceive[i + 4])
 800aff2:	617b      	str	r3, [r7, #20]
			temp_report.CabinHumidity = ((uint16_t) ReportReceive[i + 8] << 8)
 800aff4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aff8:	3308      	adds	r3, #8
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	4413      	add	r3, r2
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 9]);
 800b002:	b21a      	sxth	r2, r3
 800b004:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b008:	3309      	adds	r3, #9
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	440b      	add	r3, r1
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	b21b      	sxth	r3, r3
 800b012:	4313      	orrs	r3, r2
 800b014:	b21b      	sxth	r3, r3
 800b016:	b29b      	uxth	r3, r3
			temp_report.CabinHumidity = ((uint16_t) ReportReceive[i + 8] << 8)
 800b018:	833b      	strh	r3, [r7, #24]

			temp_report.AccNum[0] = ((uint16_t) ReportReceive[i + 10] << 8)
 800b01a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b01e:	330a      	adds	r3, #10
 800b020:	683a      	ldr	r2, [r7, #0]
 800b022:	4413      	add	r3, r2
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 11]);
 800b028:	b21a      	sxth	r2, r3
 800b02a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b02e:	330b      	adds	r3, #11
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	440b      	add	r3, r1
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	b21b      	sxth	r3, r3
 800b038:	4313      	orrs	r3, r2
 800b03a:	b21b      	sxth	r3, r3
 800b03c:	b29b      	uxth	r3, r3
			temp_report.AccNum[0] = ((uint16_t) ReportReceive[i + 10] << 8)
 800b03e:	837b      	strh	r3, [r7, #26]
			temp_report.AccNum[1] = ((uint16_t) ReportReceive[i + 12] << 8)
 800b040:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b044:	330c      	adds	r3, #12
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	4413      	add	r3, r2
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 13]);
 800b04e:	b21a      	sxth	r2, r3
 800b050:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b054:	330d      	adds	r3, #13
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	440b      	add	r3, r1
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	b21b      	sxth	r3, r3
 800b05e:	4313      	orrs	r3, r2
 800b060:	b21b      	sxth	r3, r3
 800b062:	b29b      	uxth	r3, r3
			temp_report.AccNum[1] = ((uint16_t) ReportReceive[i + 12] << 8)
 800b064:	83bb      	strh	r3, [r7, #28]
			temp_report.AccNum[2] = ((uint16_t) ReportReceive[i + 14] << 8)
 800b066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b06a:	330e      	adds	r3, #14
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	4413      	add	r3, r2
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 15]);
 800b074:	b21a      	sxth	r2, r3
 800b076:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b07a:	330f      	adds	r3, #15
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	440b      	add	r3, r1
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	b21b      	sxth	r3, r3
 800b084:	4313      	orrs	r3, r2
 800b086:	b21b      	sxth	r3, r3
 800b088:	b29b      	uxth	r3, r3
			temp_report.AccNum[2] = ((uint16_t) ReportReceive[i + 14] << 8)
 800b08a:	83fb      	strh	r3, [r7, #30]
			temp_report.RotNum[0] = ((uint16_t) ReportReceive[i + 16] << 8)
 800b08c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b090:	3310      	adds	r3, #16
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	4413      	add	r3, r2
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 17]);
 800b09a:	b21a      	sxth	r2, r3
 800b09c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0a0:	3311      	adds	r3, #17
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	440b      	add	r3, r1
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	b21b      	sxth	r3, r3
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	b21b      	sxth	r3, r3
 800b0ae:	b29b      	uxth	r3, r3
			temp_report.RotNum[0] = ((uint16_t) ReportReceive[i + 16] << 8)
 800b0b0:	843b      	strh	r3, [r7, #32]
			temp_report.RotNum[1] = ((uint16_t) ReportReceive[i + 18] << 8)
 800b0b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0b6:	3312      	adds	r3, #18
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 19]);
 800b0c0:	b21a      	sxth	r2, r3
 800b0c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0c6:	3313      	adds	r3, #19
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	440b      	add	r3, r1
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	b21b      	sxth	r3, r3
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	b21b      	sxth	r3, r3
 800b0d4:	b29b      	uxth	r3, r3
			temp_report.RotNum[1] = ((uint16_t) ReportReceive[i + 18] << 8)
 800b0d6:	847b      	strh	r3, [r7, #34]	; 0x22
			temp_report.RotNum[2] = ((uint16_t) ReportReceive[i + 20] << 8)
 800b0d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0dc:	3314      	adds	r3, #20
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 21]);
 800b0e6:	b21a      	sxth	r2, r3
 800b0e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0ec:	3315      	adds	r3, #21
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	440b      	add	r3, r1
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	b21b      	sxth	r3, r3
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	b21b      	sxth	r3, r3
 800b0fa:	b29b      	uxth	r3, r3
			temp_report.RotNum[2] = ((uint16_t) ReportReceive[i + 20] << 8)
 800b0fc:	84bb      	strh	r3, [r7, #36]	; 0x24
			temp_report.EulNum[0] = ((uint16_t) ReportReceive[i + 22] << 8)
 800b0fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b102:	3316      	adds	r3, #22
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	4413      	add	r3, r2
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 23]);
 800b10c:	b21a      	sxth	r2, r3
 800b10e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b112:	3317      	adds	r3, #23
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	440b      	add	r3, r1
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	b21b      	sxth	r3, r3
 800b11c:	4313      	orrs	r3, r2
 800b11e:	b21b      	sxth	r3, r3
 800b120:	b29b      	uxth	r3, r3
			temp_report.EulNum[0] = ((uint16_t) ReportReceive[i + 22] << 8)
 800b122:	84fb      	strh	r3, [r7, #38]	; 0x26
			temp_report.EulNum[1] = ((uint16_t) ReportReceive[i + 24] << 8)
 800b124:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b128:	3318      	adds	r3, #24
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	4413      	add	r3, r2
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 25]);
 800b132:	b21a      	sxth	r2, r3
 800b134:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b138:	3319      	adds	r3, #25
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	440b      	add	r3, r1
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	b21b      	sxth	r3, r3
 800b142:	4313      	orrs	r3, r2
 800b144:	b21b      	sxth	r3, r3
 800b146:	b29b      	uxth	r3, r3
			temp_report.EulNum[1] = ((uint16_t) ReportReceive[i + 24] << 8)
 800b148:	853b      	strh	r3, [r7, #40]	; 0x28
			temp_report.EulNum[2] = ((uint16_t) ReportReceive[i + 26] << 8)
 800b14a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b14e:	331a      	adds	r3, #26
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	4413      	add	r3, r2
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 27]);
 800b158:	b21a      	sxth	r2, r3
 800b15a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b15e:	331b      	adds	r3, #27
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	440b      	add	r3, r1
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	b21b      	sxth	r3, r3
 800b168:	4313      	orrs	r3, r2
 800b16a:	b21b      	sxth	r3, r3
 800b16c:	b29b      	uxth	r3, r3
			temp_report.EulNum[2] = ((uint16_t) ReportReceive[i + 26] << 8)
 800b16e:	857b      	strh	r3, [r7, #42]	; 0x2a
			temp_report.MagNum[0] = ((uint16_t) ReportReceive[i + 28] << 8)
 800b170:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b174:	331c      	adds	r3, #28
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	4413      	add	r3, r2
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 29]);
 800b17e:	b21a      	sxth	r2, r3
 800b180:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b184:	331d      	adds	r3, #29
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	440b      	add	r3, r1
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	b21b      	sxth	r3, r3
 800b18e:	4313      	orrs	r3, r2
 800b190:	b21b      	sxth	r3, r3
 800b192:	b29b      	uxth	r3, r3
			temp_report.MagNum[0] = ((uint16_t) ReportReceive[i + 28] << 8)
 800b194:	85bb      	strh	r3, [r7, #44]	; 0x2c
			temp_report.MagNum[1] = ((uint16_t) ReportReceive[i + 30] << 8)
 800b196:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b19a:	331e      	adds	r3, #30
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	4413      	add	r3, r2
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 31]);
 800b1a4:	b21a      	sxth	r2, r3
 800b1a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b1aa:	331f      	adds	r3, #31
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	440b      	add	r3, r1
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	b21b      	sxth	r3, r3
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	b21b      	sxth	r3, r3
 800b1b8:	b29b      	uxth	r3, r3
			temp_report.MagNum[1] = ((uint16_t) ReportReceive[i + 30] << 8)
 800b1ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
			temp_report.MagNum[2] = ((uint16_t) ReportReceive[i + 32] << 8)
 800b1bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b1c0:	3320      	adds	r3, #32
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 33]);
 800b1ca:	b21a      	sxth	r2, r3
 800b1cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b1d0:	3321      	adds	r3, #33	; 0x21
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	440b      	add	r3, r1
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	b21b      	sxth	r3, r3
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	b21b      	sxth	r3, r3
 800b1de:	b29b      	uxth	r3, r3
			temp_report.MagNum[2] = ((uint16_t) ReportReceive[i + 32] << 8)
 800b1e0:	863b      	strh	r3, [r7, #48]	; 0x30

			temp_report.SonarHeight = (((uint32_t) ReportReceive[i + 34]) << 24)
 800b1e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b1e6:	3322      	adds	r3, #34	; 0x22
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	061a      	lsls	r2, r3, #24
					| (((uint32_t) ReportReceive[i + 35]) << 16)
 800b1f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b1f4:	3323      	adds	r3, #35	; 0x23
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	440b      	add	r3, r1
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	041b      	lsls	r3, r3, #16
 800b1fe:	431a      	orrs	r2, r3
					| (((uint32_t) ReportReceive[i + 36]) << 8)
 800b200:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b204:	3324      	adds	r3, #36	; 0x24
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	440b      	add	r3, r1
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	021b      	lsls	r3, r3, #8
 800b20e:	4313      	orrs	r3, r2
					| ((uint32_t) ReportReceive[i + 37]);
 800b210:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800b214:	3225      	adds	r2, #37	; 0x25
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	440a      	add	r2, r1
 800b21a:	7812      	ldrb	r2, [r2, #0]
 800b21c:	4313      	orrs	r3, r2
			temp_report.SonarHeight = (((uint32_t) ReportReceive[i + 34]) << 24)
 800b21e:	637b      	str	r3, [r7, #52]	; 0x34
			temp_report.SonarConfidence =
					((uint16_t) ReportReceive[i + 38] << 8)
 800b220:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b224:	3326      	adds	r3, #38	; 0x26
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	4413      	add	r3, r2
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	021b      	lsls	r3, r3, #8
							| ((uint16_t) ReportReceive[i + 39]);
 800b22e:	b21a      	sxth	r2, r3
 800b230:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b234:	3327      	adds	r3, #39	; 0x27
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	440b      	add	r3, r1
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	b21b      	sxth	r3, r3
 800b23e:	4313      	orrs	r3, r2
 800b240:	b21b      	sxth	r3, r3
 800b242:	b29b      	uxth	r3, r3
			temp_report.SonarConfidence =
 800b244:	873b      	strh	r3, [r7, #56]	; 0x38

			temp_report.WaterTemperature = ((uint16_t) ReportReceive[i + 40]
 800b246:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b24a:	3328      	adds	r3, #40	; 0x28
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	4413      	add	r3, r2
 800b250:	781b      	ldrb	r3, [r3, #0]
					<< 8) | ((uint16_t) ReportReceive[i + 41]);
 800b252:	021b      	lsls	r3, r3, #8
 800b254:	b21a      	sxth	r2, r3
 800b256:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b25a:	3329      	adds	r3, #41	; 0x29
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	440b      	add	r3, r1
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	b21b      	sxth	r3, r3
 800b264:	4313      	orrs	r3, r2
 800b266:	b21b      	sxth	r3, r3
 800b268:	b29b      	uxth	r3, r3
			temp_report.WaterTemperature = ((uint16_t) ReportReceive[i + 40]
 800b26a:	877b      	strh	r3, [r7, #58]	; 0x3a
			temp_report.WaterDepth = ((uint16_t) ReportReceive[i + 42] << 8)
 800b26c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b270:	332a      	adds	r3, #42	; 0x2a
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	4413      	add	r3, r2
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 43]);
 800b27a:	b21a      	sxth	r2, r3
 800b27c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b280:	332b      	adds	r3, #43	; 0x2b
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	440b      	add	r3, r1
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	b21b      	sxth	r3, r3
 800b28a:	4313      	orrs	r3, r2
 800b28c:	b21b      	sxth	r3, r3
 800b28e:	b29b      	uxth	r3, r3
			temp_report.WaterDepth = ((uint16_t) ReportReceive[i + 42] << 8)
 800b290:	87bb      	strh	r3, [r7, #60]	; 0x3c

			temp_report.IdTest = (uint16_t) ReportReceive[i + 44];
 800b292:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b296:	332c      	adds	r3, #44	; 0x2c
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	4413      	add	r3, r2
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			temp_report.FrameEnd = ((uint16_t) ReportReceive[i + 45] << 8)
 800b2a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b2a6:	332d      	adds	r3, #45	; 0x2d
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 46]);
 800b2b0:	b21a      	sxth	r2, r3
 800b2b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b2b6:	332e      	adds	r3, #46	; 0x2e
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	440b      	add	r3, r1
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	b21b      	sxth	r3, r3
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	b21b      	sxth	r3, r3
 800b2c4:	b29b      	uxth	r3, r3
			temp_report.FrameEnd = ((uint16_t) ReportReceive[i + 45] << 8)
 800b2c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	for (uint8_t i = 0; i < Slave_UART_RXLen * 2; i++)
 800b2ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b2d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b2d8:	2b5d      	cmp	r3, #93	; 0x5d
 800b2da:	f67f ae1c 	bls.w	800af16 <ReportDataAnalysis+0x12>
		}
	}
	return temp_report;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	461d      	mov	r5, r3
 800b2e2:	f107 040c 	add.w	r4, r7, #12
 800b2e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b2ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b2ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b2f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b2f6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	374c      	adds	r7, #76	; 0x4c
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bcb0      	pop	{r4, r5, r7}
 800b302:	4770      	bx	lr

0800b304 <CaptureControlData>:

ControlData_t CaptureControlData(uint8_t *CommandReceive)
{
 800b304:	b4b0      	push	{r4, r5, r7}
 800b306:	b08d      	sub	sp, #52	; 0x34
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
	ControlData_t CaptureData;

	for (uint8_t i = 0; i < Master_UART_RXLen * 2; i++)
 800b30e:	2300      	movs	r3, #0
 800b310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b314:	e133      	b.n	800b57e <CaptureControlData+0x27a>
	{
		if ((CommandReceive[i] == 0x25) && (CommandReceive[i + 29] == 0x21)
 800b316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	4413      	add	r3, r2
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	2b25      	cmp	r3, #37	; 0x25
 800b322:	f040 8127 	bne.w	800b574 <CaptureControlData+0x270>
 800b326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b32a:	331d      	adds	r3, #29
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	4413      	add	r3, r2
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2b21      	cmp	r3, #33	; 0x21
 800b334:	f040 811e 	bne.w	800b574 <CaptureControlData+0x270>
				&& (CommandReceive[i + 28] == 0x00))
 800b338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b33c:	331c      	adds	r3, #28
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	4413      	add	r3, r2
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	f040 8115 	bne.w	800b574 <CaptureControlData+0x270>
		{
			CaptureData.FrameHead = (CommandReceive[i]);
 800b34a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	4413      	add	r3, r2
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	733b      	strb	r3, [r7, #12]
			CaptureData.StraightNum = ((CommandReceive[i + 1] << 8)
 800b356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b35a:	3301      	adds	r3, #1
 800b35c:	683a      	ldr	r2, [r7, #0]
 800b35e:	4413      	add	r3, r2
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 2]);
 800b364:	b21a      	sxth	r2, r3
 800b366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b36a:	3302      	adds	r3, #2
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	440b      	add	r3, r1
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	b21b      	sxth	r3, r3
 800b374:	4313      	orrs	r3, r2
 800b376:	b21b      	sxth	r3, r3
 800b378:	b29b      	uxth	r3, r3
			CaptureData.StraightNum = ((CommandReceive[i + 1] << 8)
 800b37a:	81fb      	strh	r3, [r7, #14]
			CaptureData.RotateNum = ((CommandReceive[i + 3] << 8)
 800b37c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b380:	3303      	adds	r3, #3
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	4413      	add	r3, r2
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 4]);
 800b38a:	b21a      	sxth	r2, r3
 800b38c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b390:	3304      	adds	r3, #4
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	440b      	add	r3, r1
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	b21b      	sxth	r3, r3
 800b39a:	4313      	orrs	r3, r2
 800b39c:	b21b      	sxth	r3, r3
 800b39e:	b29b      	uxth	r3, r3
			CaptureData.RotateNum = ((CommandReceive[i + 3] << 8)
 800b3a0:	823b      	strh	r3, [r7, #16]
			CaptureData.VerticalNum = ((CommandReceive[i + 5] << 8)
 800b3a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3a6:	3305      	adds	r3, #5
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 6]);
 800b3b0:	b21a      	sxth	r2, r3
 800b3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3b6:	3306      	adds	r3, #6
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	440b      	add	r3, r1
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	b21b      	sxth	r3, r3
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	b21b      	sxth	r3, r3
 800b3c4:	b29b      	uxth	r3, r3
			CaptureData.VerticalNum = ((CommandReceive[i + 5] << 8)
 800b3c6:	827b      	strh	r3, [r7, #18]
			CaptureData.LightNum = ((CommandReceive[i + 7] << 8)
 800b3c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3cc:	3307      	adds	r3, #7
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 8]);
 800b3d6:	b21a      	sxth	r2, r3
 800b3d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3dc:	3308      	adds	r3, #8
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	440b      	add	r3, r1
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	b21b      	sxth	r3, r3
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	b21b      	sxth	r3, r3
 800b3ea:	b29b      	uxth	r3, r3
			CaptureData.LightNum = ((CommandReceive[i + 7] << 8)
 800b3ec:	82bb      	strh	r3, [r7, #20]
			CaptureData.PanNum = ((CommandReceive[i + 9] << 8)
 800b3ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3f2:	3309      	adds	r3, #9
 800b3f4:	683a      	ldr	r2, [r7, #0]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 10]);
 800b3fc:	b21a      	sxth	r2, r3
 800b3fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b402:	330a      	adds	r3, #10
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	440b      	add	r3, r1
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	b21b      	sxth	r3, r3
 800b40c:	4313      	orrs	r3, r2
 800b40e:	b21b      	sxth	r3, r3
 800b410:	b29b      	uxth	r3, r3
			CaptureData.PanNum = ((CommandReceive[i + 9] << 8)
 800b412:	82fb      	strh	r3, [r7, #22]
			CaptureData.ConveyNum = ((CommandReceive[i + 11] << 8)
 800b414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b418:	330b      	adds	r3, #11
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	4413      	add	r3, r2
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 12]);
 800b422:	b21a      	sxth	r2, r3
 800b424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b428:	330c      	adds	r3, #12
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	440b      	add	r3, r1
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	b21b      	sxth	r3, r3
 800b432:	4313      	orrs	r3, r2
 800b434:	b21b      	sxth	r3, r3
 800b436:	b29b      	uxth	r3, r3
			CaptureData.ConveyNum = ((CommandReceive[i + 11] << 8)
 800b438:	833b      	strh	r3, [r7, #24]

			CaptureData.ArmNum[0] = ((CommandReceive[i + 13] << 8)
 800b43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b43e:	330d      	adds	r3, #13
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	4413      	add	r3, r2
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 14]);
 800b448:	b21a      	sxth	r2, r3
 800b44a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b44e:	330e      	adds	r3, #14
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	440b      	add	r3, r1
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	b21b      	sxth	r3, r3
 800b458:	4313      	orrs	r3, r2
 800b45a:	b21b      	sxth	r3, r3
 800b45c:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[0] = ((CommandReceive[i + 13] << 8)
 800b45e:	837b      	strh	r3, [r7, #26]
			CaptureData.ArmNum[1] = ((CommandReceive[i + 15] << 8)
 800b460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b464:	330f      	adds	r3, #15
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	4413      	add	r3, r2
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 16]);
 800b46e:	b21a      	sxth	r2, r3
 800b470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b474:	3310      	adds	r3, #16
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	440b      	add	r3, r1
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	b21b      	sxth	r3, r3
 800b47e:	4313      	orrs	r3, r2
 800b480:	b21b      	sxth	r3, r3
 800b482:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[1] = ((CommandReceive[i + 15] << 8)
 800b484:	83bb      	strh	r3, [r7, #28]
			CaptureData.ArmNum[2] = ((CommandReceive[i + 17] << 8)
 800b486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b48a:	3311      	adds	r3, #17
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	4413      	add	r3, r2
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 18]);
 800b494:	b21a      	sxth	r2, r3
 800b496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b49a:	3312      	adds	r3, #18
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	440b      	add	r3, r1
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	b21b      	sxth	r3, r3
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	b21b      	sxth	r3, r3
 800b4a8:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[2] = ((CommandReceive[i + 17] << 8)
 800b4aa:	83fb      	strh	r3, [r7, #30]
			CaptureData.ArmNum[3] = ((CommandReceive[i + 19] << 8)
 800b4ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4b0:	3313      	adds	r3, #19
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 20]);
 800b4ba:	b21a      	sxth	r2, r3
 800b4bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4c0:	3314      	adds	r3, #20
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	440b      	add	r3, r1
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	b21b      	sxth	r3, r3
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	b21b      	sxth	r3, r3
 800b4ce:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[3] = ((CommandReceive[i + 19] << 8)
 800b4d0:	843b      	strh	r3, [r7, #32]
			CaptureData.ArmNum[4] = ((CommandReceive[i + 21] << 8)
 800b4d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4d6:	3315      	adds	r3, #21
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	4413      	add	r3, r2
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 22]);
 800b4e0:	b21a      	sxth	r2, r3
 800b4e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4e6:	3316      	adds	r3, #22
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	440b      	add	r3, r1
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	b21b      	sxth	r3, r3
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	b21b      	sxth	r3, r3
 800b4f4:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[4] = ((CommandReceive[i + 21] << 8)
 800b4f6:	847b      	strh	r3, [r7, #34]	; 0x22
			CaptureData.ArmNum[5] = ((CommandReceive[i + 23] << 8)
 800b4f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4fc:	3317      	adds	r3, #23
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	4413      	add	r3, r2
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 24]);
 800b506:	b21a      	sxth	r2, r3
 800b508:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b50c:	3318      	adds	r3, #24
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	440b      	add	r3, r1
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	b21b      	sxth	r3, r3
 800b516:	4313      	orrs	r3, r2
 800b518:	b21b      	sxth	r3, r3
 800b51a:	b29b      	uxth	r3, r3
			CaptureData.ArmNum[5] = ((CommandReceive[i + 23] << 8)
 800b51c:	84bb      	strh	r3, [r7, #36]	; 0x24
			CaptureData.RestNum = ((CommandReceive[i + 25] << 8)
 800b51e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b522:	3319      	adds	r3, #25
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	4413      	add	r3, r2
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 26]);
 800b52c:	b21a      	sxth	r2, r3
 800b52e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b532:	331a      	adds	r3, #26
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	440b      	add	r3, r1
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	b21b      	sxth	r3, r3
 800b53c:	4313      	orrs	r3, r2
 800b53e:	b21b      	sxth	r3, r3
 800b540:	b29b      	uxth	r3, r3
			CaptureData.RestNum = ((CommandReceive[i + 25] << 8)
 800b542:	84fb      	strh	r3, [r7, #38]	; 0x26
			CaptureData.Mode = CommandReceive[i + 27];
 800b544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b548:	331b      	adds	r3, #27
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	4413      	add	r3, r2
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			CaptureData.IdTest = CommandReceive[i + 28];
 800b554:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b558:	331c      	adds	r3, #28
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	4413      	add	r3, r2
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			CaptureData.FrameEnd = (CommandReceive[i + 29]);
 800b564:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b568:	331d      	adds	r3, #29
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	4413      	add	r3, r2
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	for (uint8_t i = 0; i < Master_UART_RXLen * 2; i++)
 800b574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b578:	3301      	adds	r3, #1
 800b57a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b57e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b582:	2b3b      	cmp	r3, #59	; 0x3b
 800b584:	f67f aec7 	bls.w	800b316 <CaptureControlData+0x12>
		}
	}

	return CaptureData;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	461d      	mov	r5, r3
 800b58c:	f107 040c 	add.w	r4, r7, #12
 800b590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b592:	6028      	str	r0, [r5, #0]
 800b594:	6069      	str	r1, [r5, #4]
 800b596:	60aa      	str	r2, [r5, #8]
 800b598:	60eb      	str	r3, [r5, #12]
 800b59a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b59c:	6128      	str	r0, [r5, #16]
 800b59e:	6169      	str	r1, [r5, #20]
 800b5a0:	61aa      	str	r2, [r5, #24]
 800b5a2:	61eb      	str	r3, [r5, #28]
}
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	3734      	adds	r7, #52	; 0x34
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bcb0      	pop	{r4, r5, r7}
 800b5ac:	4770      	bx	lr

0800b5ae <ControlDataGenerate>:
	temp_pwm->ArmServo[5] = controller.ArmNum[5]; //rest machine arm
	temp_pwm->RestServo = controller.RestNum; //rest pwm
}

void ControlDataGenerate(ControlData_t controller, uint8_t *CommandTransmit)
{
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	b490      	push	{r4, r7}
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	f107 0408 	add.w	r4, r7, #8
 800b5b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CommandTransmit[0] = controller.FrameHead;
 800b5bc:	7a3a      	ldrb	r2, [r7, #8]
 800b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c0:	701a      	strb	r2, [r3, #0]

	CommandTransmit[1] = (uint8_t) ((controller.StraightNum & 0xFF00) >> 8);
 800b5c2:	897b      	ldrh	r3, [r7, #10]
 800b5c4:	0a1b      	lsrs	r3, r3, #8
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	b2d2      	uxtb	r2, r2
 800b5ce:	701a      	strb	r2, [r3, #0]
	CommandTransmit[2] = (uint8_t) (controller.StraightNum & 0x00FF);
 800b5d0:	897a      	ldrh	r2, [r7, #10]
 800b5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d4:	3302      	adds	r3, #2
 800b5d6:	b2d2      	uxtb	r2, r2
 800b5d8:	701a      	strb	r2, [r3, #0]
	CommandTransmit[3] = (uint8_t) ((controller.RotateNum & 0xFF00) >> 8);
 800b5da:	89bb      	ldrh	r3, [r7, #12]
 800b5dc:	0a1b      	lsrs	r3, r3, #8
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e2:	3303      	adds	r3, #3
 800b5e4:	b2d2      	uxtb	r2, r2
 800b5e6:	701a      	strb	r2, [r3, #0]
	CommandTransmit[4] = (uint8_t) (controller.RotateNum & 0x00FF);
 800b5e8:	89ba      	ldrh	r2, [r7, #12]
 800b5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	b2d2      	uxtb	r2, r2
 800b5f0:	701a      	strb	r2, [r3, #0]
	CommandTransmit[5] = (uint8_t) ((controller.VerticalNum & 0xFF00) >> 8);
 800b5f2:	89fb      	ldrh	r3, [r7, #14]
 800b5f4:	0a1b      	lsrs	r3, r3, #8
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	3305      	adds	r3, #5
 800b5fc:	b2d2      	uxtb	r2, r2
 800b5fe:	701a      	strb	r2, [r3, #0]
	CommandTransmit[6] = (uint8_t) (controller.VerticalNum & 0x00FF);
 800b600:	89fa      	ldrh	r2, [r7, #14]
 800b602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b604:	3306      	adds	r3, #6
 800b606:	b2d2      	uxtb	r2, r2
 800b608:	701a      	strb	r2, [r3, #0]

	CommandTransmit[7] = (uint8_t) ((controller.LightNum & 0xFF00) >> 8);
 800b60a:	8a3b      	ldrh	r3, [r7, #16]
 800b60c:	0a1b      	lsrs	r3, r3, #8
 800b60e:	b29a      	uxth	r2, r3
 800b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b612:	3307      	adds	r3, #7
 800b614:	b2d2      	uxtb	r2, r2
 800b616:	701a      	strb	r2, [r3, #0]
	CommandTransmit[8] = (uint8_t) (controller.LightNum & 0x00FF);
 800b618:	8a3a      	ldrh	r2, [r7, #16]
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	3308      	adds	r3, #8
 800b61e:	b2d2      	uxtb	r2, r2
 800b620:	701a      	strb	r2, [r3, #0]

	CommandTransmit[9] = (uint8_t) ((controller.PanNum & 0xFF00) >> 8);
 800b622:	8a7b      	ldrh	r3, [r7, #18]
 800b624:	0a1b      	lsrs	r3, r3, #8
 800b626:	b29a      	uxth	r2, r3
 800b628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62a:	3309      	adds	r3, #9
 800b62c:	b2d2      	uxtb	r2, r2
 800b62e:	701a      	strb	r2, [r3, #0]
	CommandTransmit[10] = (uint8_t) (controller.PanNum & 0x00FF);
 800b630:	8a7a      	ldrh	r2, [r7, #18]
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	330a      	adds	r3, #10
 800b636:	b2d2      	uxtb	r2, r2
 800b638:	701a      	strb	r2, [r3, #0]

	CommandTransmit[11] = (uint8_t) ((controller.ConveyNum & 0xFF00) >> 8);
 800b63a:	8abb      	ldrh	r3, [r7, #20]
 800b63c:	0a1b      	lsrs	r3, r3, #8
 800b63e:	b29a      	uxth	r2, r3
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	330b      	adds	r3, #11
 800b644:	b2d2      	uxtb	r2, r2
 800b646:	701a      	strb	r2, [r3, #0]
	CommandTransmit[12] = (uint8_t) (controller.ConveyNum & 0x00FF);
 800b648:	8aba      	ldrh	r2, [r7, #20]
 800b64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64c:	330c      	adds	r3, #12
 800b64e:	b2d2      	uxtb	r2, r2
 800b650:	701a      	strb	r2, [r3, #0]

	CommandTransmit[13] = (uint8_t) ((controller.ArmNum[0] & 0xFF00) >> 8);
 800b652:	8afb      	ldrh	r3, [r7, #22]
 800b654:	0a1b      	lsrs	r3, r3, #8
 800b656:	b29a      	uxth	r2, r3
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	330d      	adds	r3, #13
 800b65c:	b2d2      	uxtb	r2, r2
 800b65e:	701a      	strb	r2, [r3, #0]
	CommandTransmit[14] = (uint8_t) (controller.ArmNum[0] & 0x00FF);
 800b660:	8afa      	ldrh	r2, [r7, #22]
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	330e      	adds	r3, #14
 800b666:	b2d2      	uxtb	r2, r2
 800b668:	701a      	strb	r2, [r3, #0]
	CommandTransmit[15] = (uint8_t) ((controller.ArmNum[1] & 0xFF00) >> 8);
 800b66a:	8b3b      	ldrh	r3, [r7, #24]
 800b66c:	0a1b      	lsrs	r3, r3, #8
 800b66e:	b29a      	uxth	r2, r3
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	330f      	adds	r3, #15
 800b674:	b2d2      	uxtb	r2, r2
 800b676:	701a      	strb	r2, [r3, #0]
	CommandTransmit[16] = (uint8_t) (controller.ArmNum[1] & 0x00FF);
 800b678:	8b3a      	ldrh	r2, [r7, #24]
 800b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67c:	3310      	adds	r3, #16
 800b67e:	b2d2      	uxtb	r2, r2
 800b680:	701a      	strb	r2, [r3, #0]
	CommandTransmit[17] = (uint8_t) ((controller.ArmNum[2] & 0xFF00) >> 8);
 800b682:	8b7b      	ldrh	r3, [r7, #26]
 800b684:	0a1b      	lsrs	r3, r3, #8
 800b686:	b29a      	uxth	r2, r3
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	3311      	adds	r3, #17
 800b68c:	b2d2      	uxtb	r2, r2
 800b68e:	701a      	strb	r2, [r3, #0]
	CommandTransmit[18] = (uint8_t) (controller.ArmNum[2] & 0x00FF);
 800b690:	8b7a      	ldrh	r2, [r7, #26]
 800b692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b694:	3312      	adds	r3, #18
 800b696:	b2d2      	uxtb	r2, r2
 800b698:	701a      	strb	r2, [r3, #0]
	CommandTransmit[19] = (uint8_t) ((controller.ArmNum[3] & 0xFF00) >> 8);
 800b69a:	8bbb      	ldrh	r3, [r7, #28]
 800b69c:	0a1b      	lsrs	r3, r3, #8
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a2:	3313      	adds	r3, #19
 800b6a4:	b2d2      	uxtb	r2, r2
 800b6a6:	701a      	strb	r2, [r3, #0]
	CommandTransmit[20] = (uint8_t) (controller.ArmNum[3] & 0x00FF);
 800b6a8:	8bba      	ldrh	r2, [r7, #28]
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	3314      	adds	r3, #20
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]
	CommandTransmit[21] = (uint8_t) ((controller.ArmNum[4] & 0xFF00) >> 8);
 800b6b2:	8bfb      	ldrh	r3, [r7, #30]
 800b6b4:	0a1b      	lsrs	r3, r3, #8
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	3315      	adds	r3, #21
 800b6bc:	b2d2      	uxtb	r2, r2
 800b6be:	701a      	strb	r2, [r3, #0]
	CommandTransmit[22] = (uint8_t) (controller.ArmNum[4] & 0x00FF);
 800b6c0:	8bfa      	ldrh	r2, [r7, #30]
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	3316      	adds	r3, #22
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
	CommandTransmit[23] = (uint8_t) ((controller.ArmNum[5] & 0xFF00) >> 8);
 800b6ca:	8c3b      	ldrh	r3, [r7, #32]
 800b6cc:	0a1b      	lsrs	r3, r3, #8
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d2:	3317      	adds	r3, #23
 800b6d4:	b2d2      	uxtb	r2, r2
 800b6d6:	701a      	strb	r2, [r3, #0]
	CommandTransmit[24] = (uint8_t) (controller.ArmNum[5] & 0x00FF);
 800b6d8:	8c3a      	ldrh	r2, [r7, #32]
 800b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6dc:	3318      	adds	r3, #24
 800b6de:	b2d2      	uxtb	r2, r2
 800b6e0:	701a      	strb	r2, [r3, #0]

	CommandTransmit[25] = (uint8_t) ((controller.RestNum & 0xFF00) >> 8);
 800b6e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6e4:	0a1b      	lsrs	r3, r3, #8
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ea:	3319      	adds	r3, #25
 800b6ec:	b2d2      	uxtb	r2, r2
 800b6ee:	701a      	strb	r2, [r3, #0]
	CommandTransmit[26] = (uint8_t) (controller.RestNum & 0x00FF);
 800b6f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	331a      	adds	r3, #26
 800b6f6:	b2d2      	uxtb	r2, r2
 800b6f8:	701a      	strb	r2, [r3, #0]

	CommandTransmit[27] = controller.Mode;
 800b6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fc:	331b      	adds	r3, #27
 800b6fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800b702:	701a      	strb	r2, [r3, #0]
	CommandTransmit[28] = controller.IdTest;
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	331c      	adds	r3, #28
 800b708:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b70c:	701a      	strb	r2, [r3, #0]
	CommandTransmit[29] = controller.FrameEnd;
 800b70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b710:	331d      	adds	r3, #29
 800b712:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b716:	701a      	strb	r2, [r3, #0]
}
 800b718:	bf00      	nop
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bc90      	pop	{r4, r7}
 800b71e:	b004      	add	sp, #16
 800b720:	4770      	bx	lr

0800b722 <InitP30>:
#include "Sensor.h"

#if defined USING_GP30_SENSOR
void InitP30(uint8_t *P30Send)
{
 800b722:	b480      	push	{r7}
 800b724:	b083      	sub	sp, #12
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
	//42 52 02 00 78 05 00 00 BB 04 D2 01
	*(P30Send + 0) = 0x42;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2242      	movs	r2, #66	; 0x42
 800b72e:	701a      	strb	r2, [r3, #0]
	*(P30Send + 1) = 0x52;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3301      	adds	r3, #1
 800b734:	2252      	movs	r2, #82	; 0x52
 800b736:	701a      	strb	r2, [r3, #0]
	*(P30Send + 2) = 0x02;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3302      	adds	r3, #2
 800b73c:	2202      	movs	r2, #2
 800b73e:	701a      	strb	r2, [r3, #0]
	*(P30Send + 3) = 0x00;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3303      	adds	r3, #3
 800b744:	2200      	movs	r2, #0
 800b746:	701a      	strb	r2, [r3, #0]
	*(P30Send + 4) = 0x05;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3304      	adds	r3, #4
 800b74c:	2205      	movs	r2, #5
 800b74e:	701a      	strb	r2, [r3, #0]
	*(P30Send + 5) = 0x00;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	3305      	adds	r3, #5
 800b754:	2200      	movs	r2, #0
 800b756:	701a      	strb	r2, [r3, #0]
	*(P30Send + 6) = 0x00;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3306      	adds	r3, #6
 800b75c:	2200      	movs	r2, #0
 800b75e:	701a      	strb	r2, [r3, #0]
	*(P30Send + 7) = 0x00;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	3307      	adds	r3, #7
 800b764:	2200      	movs	r2, #0
 800b766:	701a      	strb	r2, [r3, #0]
	*(P30Send + 8) = 0xBB;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3308      	adds	r3, #8
 800b76c:	22bb      	movs	r2, #187	; 0xbb
 800b76e:	701a      	strb	r2, [r3, #0]
	*(P30Send + 9) = 0x04;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	3309      	adds	r3, #9
 800b774:	2204      	movs	r2, #4
 800b776:	701a      	strb	r2, [r3, #0]
	*(P30Send + 10) = 0xD2;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	330a      	adds	r3, #10
 800b77c:	22d2      	movs	r2, #210	; 0xd2
 800b77e:	701a      	strb	r2, [r3, #0]
	*(P30Send + 11) = 0x01;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	330b      	adds	r3, #11
 800b784:	2201      	movs	r2, #1
 800b786:	701a      	strb	r2, [r3, #0]
}
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <ReceiveP30>:
/**
 * @brief 接收声呐传感器数据
 * @return P30Data 声呐传感器数据结构体
 */
SonarData_t ReceiveP30(uint8_t *P30Receive)
{
 800b794:	b490      	push	{r4, r7}
 800b796:	b08a      	sub	sp, #40	; 0x28
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
	SonarData_t RecvP30;
	RecvP30.SonarDistance = 0;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61fb      	str	r3, [r7, #28]

	uint8_t FrameState = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Bytenum = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t CheckSum = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t datahex[11];

	for (uint8_t i = 0; i < 33; i++)
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800b7ba:	e08b      	b.n	800b8d4 <ReceiveP30+0x140>
	{
		if (FrameState == 0)
 800b7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d131      	bne.n	800b828 <ReceiveP30+0x94>
		{
			if ((P30Receive[i] == 0x42) && (Bytenum == 0))
 800b7c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b7c8:	683a      	ldr	r2, [r7, #0]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2b42      	cmp	r3, #66	; 0x42
 800b7d0:	d10e      	bne.n	800b7f0 <ReceiveP30+0x5c>
 800b7d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <ReceiveP30+0x5c>
			{
				CheckSum = P30Receive[i];
 800b7da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Bytenum = 1;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				continue;
 800b7ee:	e06c      	b.n	800b8ca <ReceiveP30+0x136>
			}
			else if ((P30Receive[i] == 0x52) && (Bytenum == 1))
 800b7f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b52      	cmp	r3, #82	; 0x52
 800b7fc:	d165      	bne.n	800b8ca <ReceiveP30+0x136>
 800b7fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b802:	2b01      	cmp	r3, #1
 800b804:	d161      	bne.n	800b8ca <ReceiveP30+0x136>
			{
				CheckSum += P30Receive[i];
 800b806:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	4413      	add	r3, r2
 800b80e:	781a      	ldrb	r2, [r3, #0]
 800b810:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b814:	4413      	add	r3, r2
 800b816:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Bytenum = 2;
 800b81a:	2302      	movs	r3, #2
 800b81c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				FrameState = 1;
 800b820:	2301      	movs	r3, #1
 800b822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				continue;
 800b826:	e050      	b.n	800b8ca <ReceiveP30+0x136>
			}
		}
		else if (FrameState == 1)
 800b828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d14c      	bne.n	800b8ca <ReceiveP30+0x136>
		{
			if (Bytenum < 13)
 800b830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b834:	2b0c      	cmp	r3, #12
 800b836:	d81c      	bhi.n	800b872 <ReceiveP30+0xde>
			{
				datahex[Bytenum - 2] = P30Receive[i];
 800b838:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b83c:	683a      	ldr	r2, [r7, #0]
 800b83e:	441a      	add	r2, r3
 800b840:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b844:	3b02      	subs	r3, #2
 800b846:	7812      	ldrb	r2, [r2, #0]
 800b848:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b84c:	440b      	add	r3, r1
 800b84e:	f803 2c1c 	strb.w	r2, [r3, #-28]
				CheckSum += P30Receive[i];
 800b852:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	4413      	add	r3, r2
 800b85a:	781a      	ldrb	r2, [r3, #0]
 800b85c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b860:	4413      	add	r3, r2
 800b862:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Bytenum++;
 800b866:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b86a:	3301      	adds	r3, #1
 800b86c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b870:	e02b      	b.n	800b8ca <ReceiveP30+0x136>
			}
			else
			{
				if (P30Receive[i] == (CheckSum & 0xFF))
 800b872:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	4413      	add	r3, r2
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b880:	429a      	cmp	r2, r3
 800b882:	d119      	bne.n	800b8b8 <ReceiveP30+0x124>
				{
					RecvP30.Confidence = (datahex[10] << 8) | (datahex[11]);
 800b884:	7dbb      	ldrb	r3, [r7, #22]
 800b886:	021b      	lsls	r3, r3, #8
 800b888:	b21a      	sxth	r2, r3
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
 800b88c:	b21b      	sxth	r3, r3
 800b88e:	4313      	orrs	r3, r2
 800b890:	b21b      	sxth	r3, r3
 800b892:	b29b      	uxth	r3, r3
 800b894:	843b      	strh	r3, [r7, #32]
					RecvP30.SonarHeight = (((datahex[6] << 24)
 800b896:	7cbb      	ldrb	r3, [r7, #18]
 800b898:	061a      	lsls	r2, r3, #24
							| (datahex[7] << 16) | (datahex[8] << 8)
 800b89a:	7cfb      	ldrb	r3, [r7, #19]
 800b89c:	041b      	lsls	r3, r3, #16
 800b89e:	431a      	orrs	r2, r3
 800b8a0:	7d3b      	ldrb	r3, [r7, #20]
 800b8a2:	021b      	lsls	r3, r3, #8
 800b8a4:	4313      	orrs	r3, r2
							| (datahex[9])) / 1000);
 800b8a6:	7d7a      	ldrb	r2, [r7, #21]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	4a13      	ldr	r2, [pc, #76]	; (800b8f8 <ReceiveP30+0x164>)
 800b8ac:	fb82 1203 	smull	r1, r2, r2, r3
 800b8b0:	1192      	asrs	r2, r2, #6
 800b8b2:	17db      	asrs	r3, r3, #31
 800b8b4:	1ad3      	subs	r3, r2, r3
					RecvP30.SonarHeight = (((datahex[6] << 24)
 800b8b6:	61bb      	str	r3, [r7, #24]
				}
				CheckSum = 0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Bytenum = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				FrameState = 0;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 33; i++)
 800b8ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800b8d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b8d8:	2b20      	cmp	r3, #32
 800b8da:	f67f af6f 	bls.w	800b7bc <ReceiveP30+0x28>
			}
		}
	}

	return RecvP30;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	461c      	mov	r4, r3
 800b8e2:	f107 0318 	add.w	r3, r7, #24
 800b8e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	3728      	adds	r7, #40	; 0x28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bc90      	pop	{r4, r7}
 800b8f6:	4770      	bx	lr
 800b8f8:	10624dd3 	.word	0x10624dd3

0800b8fc <ReceiveDeep>:
#endif

#ifdef USING_DEPTH_SENSOR
DepthData_t ReceiveDeep(uint8_t *DeepReceive)
{
 800b8fc:	b490      	push	{r4, r7}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
	DepthData_t RecvDeep;

	uint8_t temperature_origin_data[4] =
 800b906:	2300      	movs	r3, #0
 800b908:	60fb      	str	r3, [r7, #12]
	{ 0 };
	uint8_t depth_origin_data[3] =
 800b90a:	4b8a      	ldr	r3, [pc, #552]	; (800bb34 <ReceiveDeep+0x238>)
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	813b      	strh	r3, [r7, #8]
 800b910:	2300      	movs	r3, #0
 800b912:	72bb      	strb	r3, [r7, #10]
	{ 0 };

	for (int i = 0; i < Deep_UART_RXLen; i++)
 800b914:	2300      	movs	r3, #0
 800b916:	61fb      	str	r3, [r7, #28]
 800b918:	e0bb      	b.n	800ba92 <ReceiveDeep+0x196>
	{
		if ((DeepReceive[i] == 'T') && (DeepReceive[i + 1] == '=')) //解析温度
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	4413      	add	r3, r2
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	2b54      	cmp	r3, #84	; 0x54
 800b924:	d15d      	bne.n	800b9e2 <ReceiveDeep+0xe6>
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	3301      	adds	r3, #1
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	4413      	add	r3, r2
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b3d      	cmp	r3, #61	; 0x3d
 800b932:	d156      	bne.n	800b9e2 <ReceiveDeep+0xe6>
		{
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9')) //温度为正
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	3302      	adds	r3, #2
 800b938:	683a      	ldr	r2, [r7, #0]
 800b93a:	4413      	add	r3, r2
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b2f      	cmp	r3, #47	; 0x2f
 800b940:	d927      	bls.n	800b992 <ReceiveDeep+0x96>
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	3302      	adds	r3, #2
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	4413      	add	r3, r2
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b39      	cmp	r3, #57	; 0x39
 800b94e:	d820      	bhi.n	800b992 <ReceiveDeep+0x96>
			{
				temperature_origin_data[0] = DeepReceive[i + 2] - '0';
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	3302      	adds	r3, #2
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	4413      	add	r3, r2
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	3b30      	subs	r3, #48	; 0x30
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	733b      	strb	r3, [r7, #12]
				temperature_origin_data[1] = DeepReceive[i + 3] - '0';
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	3303      	adds	r3, #3
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	4413      	add	r3, r2
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	3b30      	subs	r3, #48	; 0x30
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	737b      	strb	r3, [r7, #13]
				temperature_origin_data[2] = DeepReceive[i + 5] - '0';
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	3305      	adds	r3, #5
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	4413      	add	r3, r2
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	3b30      	subs	r3, #48	; 0x30
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	73bb      	strb	r3, [r7, #14]
				temperature_origin_data[3] = DeepReceive[i + 6] - '0';
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	3306      	adds	r3, #6
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	4413      	add	r3, r2
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	3b30      	subs	r3, #48	; 0x30
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	73fb      	strb	r3, [r7, #15]
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9')) //温度为正
 800b990:	e07b      	b.n	800ba8a <ReceiveDeep+0x18e>
			}
			else if (DeepReceive[i + 2] == '-') //温度为负
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	3302      	adds	r3, #2
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	4413      	add	r3, r2
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2b2d      	cmp	r3, #45	; 0x2d
 800b99e:	d174      	bne.n	800ba8a <ReceiveDeep+0x18e>
			{
				temperature_origin_data[0] = DeepReceive[i + 3] - '0';
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	3303      	adds	r3, #3
 800b9a4:	683a      	ldr	r2, [r7, #0]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	3b30      	subs	r3, #48	; 0x30
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	733b      	strb	r3, [r7, #12]
				temperature_origin_data[1] = DeepReceive[i + 4] - '0';
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	3b30      	subs	r3, #48	; 0x30
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	737b      	strb	r3, [r7, #13]
				temperature_origin_data[2] = DeepReceive[i + 6] - '0';
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	3306      	adds	r3, #6
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	3b30      	subs	r3, #48	; 0x30
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	73bb      	strb	r3, [r7, #14]
				temperature_origin_data[3] = DeepReceive[i + 7] - '0';
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	3307      	adds	r3, #7
 800b9d4:	683a      	ldr	r2, [r7, #0]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	3b30      	subs	r3, #48	; 0x30
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	73fb      	strb	r3, [r7, #15]
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9')) //温度为正
 800b9e0:	e053      	b.n	800ba8a <ReceiveDeep+0x18e>
			}
		}
		else if ((DeepReceive[i] == 'D') && (DeepReceive[i + 1] == '=')) //解析深度
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	2b44      	cmp	r3, #68	; 0x44
 800b9ec:	d14e      	bne.n	800ba8c <ReceiveDeep+0x190>
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b3d      	cmp	r3, #61	; 0x3d
 800b9fa:	d147      	bne.n	800ba8c <ReceiveDeep+0x190>
		{
			if (DeepReceive[i + 2] == '-') //深度为负
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	3302      	adds	r3, #2
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	4413      	add	r3, r2
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b2d      	cmp	r3, #45	; 0x2d
 800ba08:	d118      	bne.n	800ba3c <ReceiveDeep+0x140>
			{
//				RecvDeep.is_signed = 1;
				depth_origin_data[0] = DeepReceive[i + 3] - '0';
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	3303      	adds	r3, #3
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	4413      	add	r3, r2
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	3b30      	subs	r3, #48	; 0x30
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	723b      	strb	r3, [r7, #8]
				depth_origin_data[1] = DeepReceive[i + 5] - '0';
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	3305      	adds	r3, #5
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	4413      	add	r3, r2
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	3b30      	subs	r3, #48	; 0x30
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	727b      	strb	r3, [r7, #9]
				depth_origin_data[2] = DeepReceive[i + 6] - '0';
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	3306      	adds	r3, #6
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	4413      	add	r3, r2
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	3b30      	subs	r3, #48	; 0x30
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	72bb      	strb	r3, [r7, #10]
 800ba3a:	e027      	b.n	800ba8c <ReceiveDeep+0x190>
			}
			else if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9')) //深度为正
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	3302      	adds	r3, #2
 800ba40:	683a      	ldr	r2, [r7, #0]
 800ba42:	4413      	add	r3, r2
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	2b2f      	cmp	r3, #47	; 0x2f
 800ba48:	d920      	bls.n	800ba8c <ReceiveDeep+0x190>
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	3302      	adds	r3, #2
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	4413      	add	r3, r2
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	2b39      	cmp	r3, #57	; 0x39
 800ba56:	d819      	bhi.n	800ba8c <ReceiveDeep+0x190>
			{
//				RecvDeep.is_signed = 0;
				depth_origin_data[0] = DeepReceive[i + 2] - '0';
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	3302      	adds	r3, #2
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	4413      	add	r3, r2
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	3b30      	subs	r3, #48	; 0x30
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	723b      	strb	r3, [r7, #8]
				depth_origin_data[1] = DeepReceive[i + 4] - '0';
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	4413      	add	r3, r2
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	3b30      	subs	r3, #48	; 0x30
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	727b      	strb	r3, [r7, #9]
				depth_origin_data[2] = DeepReceive[i + 5] - '0';
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	3305      	adds	r3, #5
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	4413      	add	r3, r2
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	3b30      	subs	r3, #48	; 0x30
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	72bb      	strb	r3, [r7, #10]
 800ba88:	e000      	b.n	800ba8c <ReceiveDeep+0x190>
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9')) //温度为正
 800ba8a:	bf00      	nop
	for (int i = 0; i < Deep_UART_RXLen; i++)
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	61fb      	str	r3, [r7, #28]
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	2b0b      	cmp	r3, #11
 800ba96:	f77f af40 	ble.w	800b91a <ReceiveDeep+0x1e>
			}
		}
	}

	RecvDeep.WaterTemperature = (temperature_origin_data[0] * 1000)
 800ba9a:	7b3b      	ldrb	r3, [r7, #12]
			+ (temperature_origin_data[1] * 100)
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	461a      	mov	r2, r3
 800baa0:	0152      	lsls	r2, r2, #5
 800baa2:	1ad2      	subs	r2, r2, r3
 800baa4:	0092      	lsls	r2, r2, #2
 800baa6:	4413      	add	r3, r2
 800baa8:	00db      	lsls	r3, r3, #3
 800baaa:	b29a      	uxth	r2, r3
 800baac:	7b7b      	ldrb	r3, [r7, #13]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	4619      	mov	r1, r3
 800bab2:	0089      	lsls	r1, r1, #2
 800bab4:	440b      	add	r3, r1
 800bab6:	4619      	mov	r1, r3
 800bab8:	0088      	lsls	r0, r1, #2
 800baba:	4619      	mov	r1, r3
 800babc:	4603      	mov	r3, r0
 800babe:	440b      	add	r3, r1
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	4413      	add	r3, r2
 800bac6:	b29a      	uxth	r2, r3
			+ (temperature_origin_data[2] * 10) + (temperature_origin_data[3]);
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	4619      	mov	r1, r3
 800bace:	0089      	lsls	r1, r1, #2
 800bad0:	440b      	add	r3, r1
 800bad2:	005b      	lsls	r3, r3, #1
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	4413      	add	r3, r2
 800bad8:	b29a      	uxth	r2, r3
 800bada:	7bfb      	ldrb	r3, [r7, #15]
 800badc:	b29b      	uxth	r3, r3
 800bade:	4413      	add	r3, r2
 800bae0:	b29b      	uxth	r3, r3
	RecvDeep.WaterTemperature = (temperature_origin_data[0] * 1000)
 800bae2:	823b      	strh	r3, [r7, #16]

	RecvDeep.WaterDepth = (depth_origin_data[0] * 100)
 800bae4:	7a3b      	ldrb	r3, [r7, #8]
			+ (depth_origin_data[1] * 10) + (depth_origin_data[2]);
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	461a      	mov	r2, r3
 800baea:	0092      	lsls	r2, r2, #2
 800baec:	4413      	add	r3, r2
 800baee:	461a      	mov	r2, r3
 800baf0:	0091      	lsls	r1, r2, #2
 800baf2:	461a      	mov	r2, r3
 800baf4:	460b      	mov	r3, r1
 800baf6:	4413      	add	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	7a7b      	ldrb	r3, [r7, #9]
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	4619      	mov	r1, r3
 800bb02:	0089      	lsls	r1, r1, #2
 800bb04:	440b      	add	r3, r1
 800bb06:	005b      	lsls	r3, r3, #1
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	4413      	add	r3, r2
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	7abb      	ldrb	r3, [r7, #10]
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	4413      	add	r3, r2
 800bb14:	b29b      	uxth	r3, r3
	RecvDeep.WaterDepth = (depth_origin_data[0] * 100)
 800bb16:	833b      	strh	r3, [r7, #24]

	return RecvDeep;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	461c      	mov	r4, r3
 800bb1c:	f107 0310 	add.w	r3, r7, #16
 800bb20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	3720      	adds	r7, #32
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bc90      	pop	{r4, r7}
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	0800e834 	.word	0x0800e834

0800bb38 <InitGY39>:
#endif

#ifdef USING_GY39_SENSOR
void InitGY39(uint8_t *GY39Send)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
	*(GY39Send + 0) = 0xA5;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	22a5      	movs	r2, #165	; 0xa5
 800bb44:	701a      	strb	r2, [r3, #0]
	*(GY39Send + 1) = 0x82;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	2282      	movs	r2, #130	; 0x82
 800bb4c:	701a      	strb	r2, [r3, #0]
	*(GY39Send + 2) = 0x27;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	3302      	adds	r3, #2
 800bb52:	2227      	movs	r2, #39	; 0x27
 800bb54:	701a      	strb	r2, [r3, #0]
}
 800bb56:	bf00      	nop
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <ReceiveGY39>:

CarbinData_t ReceiveGY39(uint8_t *GY39Receive)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b085      	sub	sp, #20
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	6039      	str	r1, [r7, #0]
	CarbinData_t RecvGY39;
	if ((GY39Receive[0] == 0x5A) && (GY39Receive[1] == 0x5A)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b5a      	cmp	r3, #90	; 0x5a
 800bb72:	d140      	bne.n	800bbf6 <ReceiveGY39+0x94>
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	3301      	adds	r3, #1
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2b5a      	cmp	r3, #90	; 0x5a
 800bb7c:	d13b      	bne.n	800bbf6 <ReceiveGY39+0x94>
			&& (GY39Receive[2] == 0x45))
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	3302      	adds	r3, #2
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	2b45      	cmp	r3, #69	; 0x45
 800bb86:	d136      	bne.n	800bbf6 <ReceiveGY39+0x94>
	{
		RecvGY39.CarbinTemperature = ((GY39Receive[4] << 8) | GY39Receive[5]);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	021b      	lsls	r3, r3, #8
 800bb90:	b21a      	sxth	r2, r3
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	3305      	adds	r3, #5
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	b21b      	sxth	r3, r3
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	b21b      	sxth	r3, r3
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	813b      	strh	r3, [r7, #8]
		RecvGY39.CarbinBarometric = ((GY39Receive[6] << 24)
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	3306      	adds	r3, #6
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	061b      	lsls	r3, r3, #24
				| (GY39Receive[7] << 16) | (GY39Receive[8] << 8)
 800bbaa:	b21a      	sxth	r2, r3
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	3307      	adds	r3, #7
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	041b      	lsls	r3, r3, #16
 800bbb4:	b21b      	sxth	r3, r3
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	b21a      	sxth	r2, r3
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	021b      	lsls	r3, r3, #8
 800bbc2:	b21b      	sxth	r3, r3
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	b21a      	sxth	r2, r3
				| GY39Receive[9]);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	3309      	adds	r3, #9
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	b21b      	sxth	r3, r3
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	b21b      	sxth	r3, r3
 800bbd4:	b29b      	uxth	r3, r3
		RecvGY39.CarbinBarometric = ((GY39Receive[6] << 24)
 800bbd6:	81bb      	strh	r3, [r7, #12]
		RecvGY39.CarbinHumidity = ((GY39Receive[10] << 8) | GY39Receive[11]);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	330a      	adds	r3, #10
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	021b      	lsls	r3, r3, #8
 800bbe0:	b21a      	sxth	r2, r3
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	330b      	adds	r3, #11
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	b21b      	sxth	r3, r3
 800bbea:	4313      	orrs	r3, r2
 800bbec:	b21b      	sxth	r3, r3
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	817b      	strh	r3, [r7, #10]
		RecvGY39.CarbinIllumination = 0x0000;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	81fb      	strh	r3, [r7, #14]
	}

	return RecvGY39;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	f107 0308 	add.w	r3, r7, #8
 800bbfe:	cb03      	ldmia	r3!, {r0, r1}
 800bc00:	6010      	str	r0, [r2, #0]
 800bc02:	6051      	str	r1, [r2, #4]
}
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <ReceiveWT931>:
#endif

#ifdef USING_WT931_SENSOR
IMUData_t ReceiveWT931(uint8_t *WT931Receive)
{
 800bc10:	b4b0      	push	{r4, r5, r7}
 800bc12:	b08b      	sub	sp, #44	; 0x2c
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
	IMUData_t RecvWT931;

	for (uint8_t i = 0; i < AXIS_UART_RXLen; i++)
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc20:	e112      	b.n	800be48 <ReceiveWT931+0x238>
	{
		if (i > AXIS_UART_RXLen - 11)
 800bc22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc26:	2b21      	cmp	r3, #33	; 0x21
 800bc28:	f200 8114 	bhi.w	800be54 <ReceiveWT931+0x244>
		{
			break;
		}

		if (WT931Receive[i] == 0x55)
 800bc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	4413      	add	r3, r2
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2b55      	cmp	r3, #85	; 0x55
 800bc38:	f040 80fe 	bne.w	800be38 <ReceiveWT931+0x228>
		{
			switch (WT931Receive[i + 1])
 800bc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc40:	3301      	adds	r3, #1
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	4413      	add	r3, r2
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	3b51      	subs	r3, #81	; 0x51
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	f200 80f6 	bhi.w	800be3c <ReceiveWT931+0x22c>
 800bc50:	a201      	add	r2, pc, #4	; (adr r2, 800bc58 <ReceiveWT931+0x48>)
 800bc52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc56:	bf00      	nop
 800bc58:	0800bc69 	.word	0x0800bc69
 800bc5c:	0800bcdd 	.word	0x0800bcdd
 800bc60:	0800bd51 	.word	0x0800bd51
 800bc64:	0800bdc5 	.word	0x0800bdc5
			{
			case 0x51:
				RecvWT931.Acceleration[0] = (WT931Receive[i + 2]
 800bc68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc6c:	3302      	adds	r3, #2
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	4413      	add	r3, r2
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800bc76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc7a:	3303      	adds	r3, #3
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	440b      	add	r3, r1
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	021b      	lsls	r3, r3, #8
 800bc84:	b21b      	sxth	r3, r3
 800bc86:	4313      	orrs	r3, r2
 800bc88:	b21b      	sxth	r3, r3
 800bc8a:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[0] = (WT931Receive[i + 2]
 800bc8c:	81bb      	strh	r3, [r7, #12]
				RecvWT931.Acceleration[1] = (WT931Receive[i + 4]
 800bc8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc92:	3304      	adds	r3, #4
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	4413      	add	r3, r2
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800bc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca0:	3305      	adds	r3, #5
 800bca2:	6839      	ldr	r1, [r7, #0]
 800bca4:	440b      	add	r3, r1
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	021b      	lsls	r3, r3, #8
 800bcaa:	b21b      	sxth	r3, r3
 800bcac:	4313      	orrs	r3, r2
 800bcae:	b21b      	sxth	r3, r3
 800bcb0:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[1] = (WT931Receive[i + 4]
 800bcb2:	81fb      	strh	r3, [r7, #14]
				RecvWT931.Acceleration[2] = (WT931Receive[i + 6]
 800bcb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcb8:	3306      	adds	r3, #6
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800bcc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcc6:	3307      	adds	r3, #7
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	440b      	add	r3, r1
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	021b      	lsls	r3, r3, #8
 800bcd0:	b21b      	sxth	r3, r3
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	b21b      	sxth	r3, r3
 800bcd6:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[2] = (WT931Receive[i + 6]
 800bcd8:	823b      	strh	r3, [r7, #16]
				break;
 800bcda:	e0b0      	b.n	800be3e <ReceiveWT931+0x22e>
			case 0x52:
				RecvWT931.AngularSpeed[0] = (WT931Receive[i + 2]
 800bcdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce0:	3302      	adds	r3, #2
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	4413      	add	r3, r2
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800bcea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcee:	3303      	adds	r3, #3
 800bcf0:	6839      	ldr	r1, [r7, #0]
 800bcf2:	440b      	add	r3, r1
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	021b      	lsls	r3, r3, #8
 800bcf8:	b21b      	sxth	r3, r3
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	b21b      	sxth	r3, r3
 800bcfe:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[0] = (WT931Receive[i + 2]
 800bd00:	827b      	strh	r3, [r7, #18]
				RecvWT931.AngularSpeed[1] = (WT931Receive[i + 4]
 800bd02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd06:	3304      	adds	r3, #4
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800bd10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd14:	3305      	adds	r3, #5
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	440b      	add	r3, r1
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	021b      	lsls	r3, r3, #8
 800bd1e:	b21b      	sxth	r3, r3
 800bd20:	4313      	orrs	r3, r2
 800bd22:	b21b      	sxth	r3, r3
 800bd24:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[1] = (WT931Receive[i + 4]
 800bd26:	82bb      	strh	r3, [r7, #20]
				RecvWT931.AngularSpeed[2] = (WT931Receive[i + 6]
 800bd28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd2c:	3306      	adds	r3, #6
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	4413      	add	r3, r2
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800bd36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd3a:	3307      	adds	r3, #7
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	440b      	add	r3, r1
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	021b      	lsls	r3, r3, #8
 800bd44:	b21b      	sxth	r3, r3
 800bd46:	4313      	orrs	r3, r2
 800bd48:	b21b      	sxth	r3, r3
 800bd4a:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[2] = (WT931Receive[i + 6]
 800bd4c:	82fb      	strh	r3, [r7, #22]
				break;
 800bd4e:	e076      	b.n	800be3e <ReceiveWT931+0x22e>
			case 0x53:
				RecvWT931.EulerAngle[0] = (WT931Receive[i + 2]
 800bd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd54:	3302      	adds	r3, #2
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	4413      	add	r3, r2
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800bd5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd62:	3303      	adds	r3, #3
 800bd64:	6839      	ldr	r1, [r7, #0]
 800bd66:	440b      	add	r3, r1
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	021b      	lsls	r3, r3, #8
 800bd6c:	b21b      	sxth	r3, r3
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	b21b      	sxth	r3, r3
 800bd72:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[0] = (WT931Receive[i + 2]
 800bd74:	833b      	strh	r3, [r7, #24]
				RecvWT931.EulerAngle[1] = (WT931Receive[i + 4]
 800bd76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	4413      	add	r3, r2
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800bd84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd88:	3305      	adds	r3, #5
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	440b      	add	r3, r1
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	021b      	lsls	r3, r3, #8
 800bd92:	b21b      	sxth	r3, r3
 800bd94:	4313      	orrs	r3, r2
 800bd96:	b21b      	sxth	r3, r3
 800bd98:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[1] = (WT931Receive[i + 4]
 800bd9a:	837b      	strh	r3, [r7, #26]
				RecvWT931.EulerAngle[2] = (WT931Receive[i + 6]
 800bd9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda0:	3306      	adds	r3, #6
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	4413      	add	r3, r2
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800bdaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdae:	3307      	adds	r3, #7
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	440b      	add	r3, r1
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	021b      	lsls	r3, r3, #8
 800bdb8:	b21b      	sxth	r3, r3
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	b21b      	sxth	r3, r3
 800bdbe:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[2] = (WT931Receive[i + 6]
 800bdc0:	83bb      	strh	r3, [r7, #28]
				break;
 800bdc2:	e03c      	b.n	800be3e <ReceiveWT931+0x22e>
			case 0x54:
				RecvWT931.MagneticValue[0] = (WT931Receive[i + 2]
 800bdc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdc8:	3302      	adds	r3, #2
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	4413      	add	r3, r2
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 3] << 8));
 800bdd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdd6:	3303      	adds	r3, #3
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	440b      	add	r3, r1
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	021b      	lsls	r3, r3, #8
 800bde0:	b21b      	sxth	r3, r3
 800bde2:	4313      	orrs	r3, r2
 800bde4:	b21b      	sxth	r3, r3
 800bde6:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[0] = (WT931Receive[i + 2]
 800bde8:	83fb      	strh	r3, [r7, #30]
				RecvWT931.MagneticValue[1] = (WT931Receive[i + 4]
 800bdea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdee:	3304      	adds	r3, #4
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 5] << 8));
 800bdf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdfc:	3305      	adds	r3, #5
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	440b      	add	r3, r1
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	021b      	lsls	r3, r3, #8
 800be06:	b21b      	sxth	r3, r3
 800be08:	4313      	orrs	r3, r2
 800be0a:	b21b      	sxth	r3, r3
 800be0c:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[1] = (WT931Receive[i + 4]
 800be0e:	843b      	strh	r3, [r7, #32]
				RecvWT931.MagneticValue[2] = (WT931Receive[i + 6]
 800be10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be14:	3306      	adds	r3, #6
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	4413      	add	r3, r2
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	b21a      	sxth	r2, r3
						| (WT931Receive[i + 7] << 8));
 800be1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be22:	3307      	adds	r3, #7
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	440b      	add	r3, r1
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	b21b      	sxth	r3, r3
 800be2e:	4313      	orrs	r3, r2
 800be30:	b21b      	sxth	r3, r3
 800be32:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[2] = (WT931Receive[i + 6]
 800be34:	847b      	strh	r3, [r7, #34]	; 0x22
				break;
 800be36:	e002      	b.n	800be3e <ReceiveWT931+0x22e>
				break;
			}
		}
		else
		{
			continue;
 800be38:	bf00      	nop
 800be3a:	e000      	b.n	800be3e <ReceiveWT931+0x22e>
				continue;
 800be3c:	bf00      	nop
	for (uint8_t i = 0; i < AXIS_UART_RXLen; i++)
 800be3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be42:	3301      	adds	r3, #1
 800be44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be4c:	2b2b      	cmp	r3, #43	; 0x2b
 800be4e:	f67f aee8 	bls.w	800bc22 <ReceiveWT931+0x12>
 800be52:	e000      	b.n	800be56 <ReceiveWT931+0x246>
			break;
 800be54:	bf00      	nop
		}
	}

	return RecvWT931;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	461d      	mov	r5, r3
 800be5a:	f107 040c 	add.w	r4, r7, #12
 800be5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be60:	6028      	str	r0, [r5, #0]
 800be62:	6069      	str	r1, [r5, #4]
 800be64:	60aa      	str	r2, [r5, #8]
 800be66:	60eb      	str	r3, [r5, #12]
 800be68:	cc03      	ldmia	r4!, {r0, r1}
 800be6a:	6128      	str	r0, [r5, #16]
 800be6c:	6169      	str	r1, [r5, #20]
}
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	372c      	adds	r7, #44	; 0x2c
 800be72:	46bd      	mov	sp, r7
 800be74:	bcb0      	pop	{r4, r5, r7}
 800be76:	4770      	bx	lr

0800be78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800be82:	2300      	movs	r3, #0
 800be84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800be86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be8a:	2b84      	cmp	r3, #132	; 0x84
 800be8c:	d005      	beq.n	800be9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800be8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	4413      	add	r3, r2
 800be96:	3303      	adds	r3, #3
 800be98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800be9a:	68fb      	ldr	r3, [r7, #12]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3714      	adds	r7, #20
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800beac:	f001 f914 	bl	800d0d8 <vTaskStartScheduler>
  
  return osOK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800beb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb8:	b089      	sub	sp, #36	; 0x24
 800beba:	af04      	add	r7, sp, #16
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d020      	beq.n	800bf0a <osThreadCreate+0x54>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d01c      	beq.n	800bf0a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685c      	ldr	r4, [r3, #4]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681d      	ldr	r5, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	691e      	ldr	r6, [r3, #16]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7ff ffc8 	bl	800be78 <makeFreeRtosPriority>
 800bee8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bef2:	9202      	str	r2, [sp, #8]
 800bef4:	9301      	str	r3, [sp, #4]
 800bef6:	9100      	str	r1, [sp, #0]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	4632      	mov	r2, r6
 800befc:	4629      	mov	r1, r5
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 ff22 	bl	800cd48 <xTaskCreateStatic>
 800bf04:	4603      	mov	r3, r0
 800bf06:	60fb      	str	r3, [r7, #12]
 800bf08:	e01c      	b.n	800bf44 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	685c      	ldr	r4, [r3, #4]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf16:	b29e      	uxth	r6, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7ff ffaa 	bl	800be78 <makeFreeRtosPriority>
 800bf24:	4602      	mov	r2, r0
 800bf26:	f107 030c 	add.w	r3, r7, #12
 800bf2a:	9301      	str	r3, [sp, #4]
 800bf2c:	9200      	str	r2, [sp, #0]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	4632      	mov	r2, r6
 800bf32:	4629      	mov	r1, r5
 800bf34:	4620      	mov	r0, r4
 800bf36:	f000 ff64 	bl	800ce02 <xTaskCreate>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d001      	beq.n	800bf44 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bf40:	2300      	movs	r3, #0
 800bf42:	e000      	b.n	800bf46 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bf44:	68fb      	ldr	r3, [r7, #12]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b084      	sub	sp, #16
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d001      	beq.n	800bf64 <osDelay+0x16>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	e000      	b.n	800bf66 <osDelay+0x18>
 800bf64:	2301      	movs	r3, #1
 800bf66:	4618      	mov	r0, r3
 800bf68:	f001 f882 	bl	800d070 <vTaskDelay>
  
  return osOK;
 800bf6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b086      	sub	sp, #24
 800bf7a:	af02      	add	r7, sp, #8
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00f      	beq.n	800bfa8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d10a      	bne.n	800bfa4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	2203      	movs	r2, #3
 800bf94:	9200      	str	r2, [sp, #0]
 800bf96:	2200      	movs	r2, #0
 800bf98:	2100      	movs	r1, #0
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	f000 f962 	bl	800c264 <xQueueGenericCreateStatic>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	e016      	b.n	800bfd2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e014      	b.n	800bfd2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d110      	bne.n	800bfd0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bfae:	2203      	movs	r2, #3
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	f000 f9ce 	bl	800c354 <xQueueGenericCreate>
 800bfb8:	60f8      	str	r0, [r7, #12]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d005      	beq.n	800bfcc <osSemaphoreCreate+0x56>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f000 fa1e 	bl	800c408 <xQueueGenericSend>
      return sema;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	e000      	b.n	800bfd2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bfd0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bfda:	b590      	push	{r4, r7, lr}
 800bfdc:	b085      	sub	sp, #20
 800bfde:	af02      	add	r7, sp, #8
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d011      	beq.n	800c010 <osMessageCreate+0x36>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00d      	beq.n	800c010 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6818      	ldr	r0, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6859      	ldr	r1, [r3, #4]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	689a      	ldr	r2, [r3, #8]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	2400      	movs	r4, #0
 800c006:	9400      	str	r4, [sp, #0]
 800c008:	f000 f92c 	bl	800c264 <xQueueGenericCreateStatic>
 800c00c:	4603      	mov	r3, r0
 800c00e:	e008      	b.n	800c022 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6818      	ldr	r0, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	4619      	mov	r1, r3
 800c01c:	f000 f99a 	bl	800c354 <xQueueGenericCreate>
 800c020:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c022:	4618      	mov	r0, r3
 800c024:	370c      	adds	r7, #12
 800c026:	46bd      	mov	sp, r7
 800c028:	bd90      	pop	{r4, r7, pc}

0800c02a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c02a:	b480      	push	{r7}
 800c02c:	b083      	sub	sp, #12
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f103 0208 	add.w	r2, r3, #8
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f04f 32ff 	mov.w	r2, #4294967295
 800c042:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f103 0208 	add.w	r2, r3, #8
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f103 0208 	add.w	r2, r3, #8
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c05e:	bf00      	nop
 800c060:	370c      	adds	r7, #12
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c06a:	b480      	push	{r7}
 800c06c:	b083      	sub	sp, #12
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	689a      	ldr	r2, [r3, #8]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	1c5a      	adds	r2, r3, #1
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	601a      	str	r2, [r3, #0]
}
 800c0c0:	bf00      	nop
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e2:	d103      	bne.n	800c0ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	60fb      	str	r3, [r7, #12]
 800c0ea:	e00c      	b.n	800c106 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	60fb      	str	r3, [r7, #12]
 800c0f2:	e002      	b.n	800c0fa <vListInsert+0x2e>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	429a      	cmp	r2, r3
 800c104:	d2f6      	bcs.n	800c0f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	685a      	ldr	r2, [r3, #4]
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	683a      	ldr	r2, [r7, #0]
 800c114:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	1c5a      	adds	r2, r3, #1
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	601a      	str	r2, [r3, #0]
}
 800c132:	bf00      	nop
 800c134:	3714      	adds	r7, #20
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c13e:	b480      	push	{r7}
 800c140:	b085      	sub	sp, #20
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	6892      	ldr	r2, [r2, #8]
 800c154:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	6852      	ldr	r2, [r2, #4]
 800c15e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	429a      	cmp	r2, r3
 800c168:	d103      	bne.n	800c172 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	689a      	ldr	r2, [r3, #8]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	1e5a      	subs	r2, r3, #1
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
	...

0800c194 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d10a      	bne.n	800c1be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ac:	f383 8811 	msr	BASEPRI, r3
 800c1b0:	f3bf 8f6f 	isb	sy
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c1ba:	bf00      	nop
 800c1bc:	e7fe      	b.n	800c1bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c1be:	f001 fed9 	bl	800df74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ca:	68f9      	ldr	r1, [r7, #12]
 800c1cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1ce:	fb01 f303 	mul.w	r3, r1, r3
 800c1d2:	441a      	add	r2, r3
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	68f9      	ldr	r1, [r7, #12]
 800c1f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1f4:	fb01 f303 	mul.w	r3, r1, r3
 800c1f8:	441a      	add	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	22ff      	movs	r2, #255	; 0xff
 800c202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	22ff      	movs	r2, #255	; 0xff
 800c20a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d114      	bne.n	800c23e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d01a      	beq.n	800c252 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3310      	adds	r3, #16
 800c220:	4618      	mov	r0, r3
 800c222:	f001 f99b 	bl	800d55c <xTaskRemoveFromEventList>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d012      	beq.n	800c252 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c22c:	4b0c      	ldr	r3, [pc, #48]	; (800c260 <xQueueGenericReset+0xcc>)
 800c22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	e009      	b.n	800c252 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	3310      	adds	r3, #16
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff fef1 	bl	800c02a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	3324      	adds	r3, #36	; 0x24
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7ff feec 	bl	800c02a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c252:	f001 febf 	bl	800dfd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c256:	2301      	movs	r3, #1
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	e000ed04 	.word	0xe000ed04

0800c264 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c264:	b580      	push	{r7, lr}
 800c266:	b08e      	sub	sp, #56	; 0x38
 800c268:	af02      	add	r7, sp, #8
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
 800c270:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10a      	bne.n	800c28e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10a      	bne.n	800c2aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c298:	f383 8811 	msr	BASEPRI, r3
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2a6:	bf00      	nop
 800c2a8:	e7fe      	b.n	800c2a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <xQueueGenericCreateStatic+0x52>
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d001      	beq.n	800c2ba <xQueueGenericCreateStatic+0x56>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e000      	b.n	800c2bc <xQueueGenericCreateStatic+0x58>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10a      	bne.n	800c2d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	623b      	str	r3, [r7, #32]
}
 800c2d2:	bf00      	nop
 800c2d4:	e7fe      	b.n	800c2d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d102      	bne.n	800c2e2 <xQueueGenericCreateStatic+0x7e>
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d101      	bne.n	800c2e6 <xQueueGenericCreateStatic+0x82>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e000      	b.n	800c2e8 <xQueueGenericCreateStatic+0x84>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10a      	bne.n	800c302 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f0:	f383 8811 	msr	BASEPRI, r3
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	61fb      	str	r3, [r7, #28]
}
 800c2fe:	bf00      	nop
 800c300:	e7fe      	b.n	800c300 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c302:	2348      	movs	r3, #72	; 0x48
 800c304:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2b48      	cmp	r3, #72	; 0x48
 800c30a:	d00a      	beq.n	800c322 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	61bb      	str	r3, [r7, #24]
}
 800c31e:	bf00      	nop
 800c320:	e7fe      	b.n	800c320 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c322:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00d      	beq.n	800c34a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c330:	2201      	movs	r2, #1
 800c332:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c336:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	4613      	mov	r3, r2
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	68b9      	ldr	r1, [r7, #8]
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f000 f83f 	bl	800c3c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3730      	adds	r7, #48	; 0x30
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c354:	b580      	push	{r7, lr}
 800c356:	b08a      	sub	sp, #40	; 0x28
 800c358:	af02      	add	r7, sp, #8
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	4613      	mov	r3, r2
 800c360:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10a      	bne.n	800c37e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	613b      	str	r3, [r7, #16]
}
 800c37a:	bf00      	nop
 800c37c:	e7fe      	b.n	800c37c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	fb02 f303 	mul.w	r3, r2, r3
 800c386:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	3348      	adds	r3, #72	; 0x48
 800c38c:	4618      	mov	r0, r3
 800c38e:	f001 ff13 	bl	800e1b8 <pvPortMalloc>
 800c392:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d011      	beq.n	800c3be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	3348      	adds	r3, #72	; 0x48
 800c3a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3ac:	79fa      	ldrb	r2, [r7, #7]
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	68b9      	ldr	r1, [r7, #8]
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 f805 	bl	800c3c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3be:	69bb      	ldr	r3, [r7, #24]
	}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3720      	adds	r7, #32
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d103      	bne.n	800c3e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	69ba      	ldr	r2, [r7, #24]
 800c3e0:	601a      	str	r2, [r3, #0]
 800c3e2:	e002      	b.n	800c3ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	69b8      	ldr	r0, [r7, #24]
 800c3fa:	f7ff fecb 	bl	800c194 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c3fe:	bf00      	nop
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
	...

0800c408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b08e      	sub	sp, #56	; 0x38
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c416:	2300      	movs	r3, #0
 800c418:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10a      	bne.n	800c43a <xQueueGenericSend+0x32>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d103      	bne.n	800c448 <xQueueGenericSend+0x40>
 800c440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c444:	2b00      	cmp	r3, #0
 800c446:	d101      	bne.n	800c44c <xQueueGenericSend+0x44>
 800c448:	2301      	movs	r3, #1
 800c44a:	e000      	b.n	800c44e <xQueueGenericSend+0x46>
 800c44c:	2300      	movs	r3, #0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10a      	bne.n	800c468 <xQueueGenericSend+0x60>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c464:	bf00      	nop
 800c466:	e7fe      	b.n	800c466 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d103      	bne.n	800c476 <xQueueGenericSend+0x6e>
 800c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c472:	2b01      	cmp	r3, #1
 800c474:	d101      	bne.n	800c47a <xQueueGenericSend+0x72>
 800c476:	2301      	movs	r3, #1
 800c478:	e000      	b.n	800c47c <xQueueGenericSend+0x74>
 800c47a:	2300      	movs	r3, #0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10a      	bne.n	800c496 <xQueueGenericSend+0x8e>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	623b      	str	r3, [r7, #32]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c496:	f001 fa1d 	bl	800d8d4 <xTaskGetSchedulerState>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <xQueueGenericSend+0x9e>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d101      	bne.n	800c4aa <xQueueGenericSend+0xa2>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e000      	b.n	800c4ac <xQueueGenericSend+0xa4>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	61fb      	str	r3, [r7, #28]
}
 800c4c2:	bf00      	nop
 800c4c4:	e7fe      	b.n	800c4c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4c6:	f001 fd55 	bl	800df74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d302      	bcc.n	800c4dc <xQueueGenericSend+0xd4>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d129      	bne.n	800c530 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	68b9      	ldr	r1, [r7, #8]
 800c4e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4e2:	f000 fb21 	bl	800cb28 <prvCopyDataToQueue>
 800c4e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d010      	beq.n	800c512 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	3324      	adds	r3, #36	; 0x24
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f001 f831 	bl	800d55c <xTaskRemoveFromEventList>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d013      	beq.n	800c528 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c500:	4b3f      	ldr	r3, [pc, #252]	; (800c600 <xQueueGenericSend+0x1f8>)
 800c502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	e00a      	b.n	800c528 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c514:	2b00      	cmp	r3, #0
 800c516:	d007      	beq.n	800c528 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c518:	4b39      	ldr	r3, [pc, #228]	; (800c600 <xQueueGenericSend+0x1f8>)
 800c51a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c51e:	601a      	str	r2, [r3, #0]
 800c520:	f3bf 8f4f 	dsb	sy
 800c524:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c528:	f001 fd54 	bl	800dfd4 <vPortExitCritical>
				return pdPASS;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e063      	b.n	800c5f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d103      	bne.n	800c53e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c536:	f001 fd4d 	bl	800dfd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c53a:	2300      	movs	r3, #0
 800c53c:	e05c      	b.n	800c5f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c540:	2b00      	cmp	r3, #0
 800c542:	d106      	bne.n	800c552 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c544:	f107 0314 	add.w	r3, r7, #20
 800c548:	4618      	mov	r0, r3
 800c54a:	f001 f869 	bl	800d620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c54e:	2301      	movs	r3, #1
 800c550:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c552:	f001 fd3f 	bl	800dfd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c556:	f000 fe1f 	bl	800d198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c55a:	f001 fd0b 	bl	800df74 <vPortEnterCritical>
 800c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c564:	b25b      	sxtb	r3, r3
 800c566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c56a:	d103      	bne.n	800c574 <xQueueGenericSend+0x16c>
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56e:	2200      	movs	r2, #0
 800c570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c57a:	b25b      	sxtb	r3, r3
 800c57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c580:	d103      	bne.n	800c58a <xQueueGenericSend+0x182>
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c58a:	f001 fd23 	bl	800dfd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c58e:	1d3a      	adds	r2, r7, #4
 800c590:	f107 0314 	add.w	r3, r7, #20
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f001 f858 	bl	800d64c <xTaskCheckForTimeOut>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d124      	bne.n	800c5ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5a4:	f000 fbb8 	bl	800cd18 <prvIsQueueFull>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d018      	beq.n	800c5e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	3310      	adds	r3, #16
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 ffac 	bl	800d514 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c5bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5be:	f000 fb43 	bl	800cc48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5c2:	f000 fdf7 	bl	800d1b4 <xTaskResumeAll>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f47f af7c 	bne.w	800c4c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c5ce:	4b0c      	ldr	r3, [pc, #48]	; (800c600 <xQueueGenericSend+0x1f8>)
 800c5d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	e772      	b.n	800c4c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c5e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5e2:	f000 fb31 	bl	800cc48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5e6:	f000 fde5 	bl	800d1b4 <xTaskResumeAll>
 800c5ea:	e76c      	b.n	800c4c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c5ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5ee:	f000 fb2b 	bl	800cc48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5f2:	f000 fddf 	bl	800d1b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c5f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3738      	adds	r7, #56	; 0x38
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	e000ed04 	.word	0xe000ed04

0800c604 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b08e      	sub	sp, #56	; 0x38
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10a      	bne.n	800c62e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	623b      	str	r3, [r7, #32]
}
 800c62a:	bf00      	nop
 800c62c:	e7fe      	b.n	800c62c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00a      	beq.n	800c64c <xQueueGiveFromISR+0x48>
	__asm volatile
 800c636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	61fb      	str	r3, [r7, #28]
}
 800c648:	bf00      	nop
 800c64a:	e7fe      	b.n	800c64a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d103      	bne.n	800c65c <xQueueGiveFromISR+0x58>
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d101      	bne.n	800c660 <xQueueGiveFromISR+0x5c>
 800c65c:	2301      	movs	r3, #1
 800c65e:	e000      	b.n	800c662 <xQueueGiveFromISR+0x5e>
 800c660:	2300      	movs	r3, #0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10a      	bne.n	800c67c <xQueueGiveFromISR+0x78>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66a:	f383 8811 	msr	BASEPRI, r3
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	f3bf 8f4f 	dsb	sy
 800c676:	61bb      	str	r3, [r7, #24]
}
 800c678:	bf00      	nop
 800c67a:	e7fe      	b.n	800c67a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c67c:	f001 fd5c 	bl	800e138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c680:	f3ef 8211 	mrs	r2, BASEPRI
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	617a      	str	r2, [r7, #20]
 800c696:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c698:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c69a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d22b      	bcs.n	800c704 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b8:	1c5a      	adds	r2, r3, #1
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c6be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c6:	d112      	bne.n	800c6ee <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d016      	beq.n	800c6fe <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	3324      	adds	r3, #36	; 0x24
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 ff41 	bl	800d55c <xTaskRemoveFromEventList>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00e      	beq.n	800c6fe <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00b      	beq.n	800c6fe <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	601a      	str	r2, [r3, #0]
 800c6ec:	e007      	b.n	800c6fe <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c6ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	b25a      	sxtb	r2, r3
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c6fe:	2301      	movs	r3, #1
 800c700:	637b      	str	r3, [r7, #52]	; 0x34
 800c702:	e001      	b.n	800c708 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c704:	2300      	movs	r3, #0
 800c706:	637b      	str	r3, [r7, #52]	; 0x34
 800c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c712:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c716:	4618      	mov	r0, r3
 800c718:	3738      	adds	r7, #56	; 0x38
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
	...

0800c720 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b08c      	sub	sp, #48	; 0x30
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c72c:	2300      	movs	r3, #0
 800c72e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10a      	bne.n	800c750 <xQueueReceive+0x30>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	623b      	str	r3, [r7, #32]
}
 800c74c:	bf00      	nop
 800c74e:	e7fe      	b.n	800c74e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d103      	bne.n	800c75e <xQueueReceive+0x3e>
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d101      	bne.n	800c762 <xQueueReceive+0x42>
 800c75e:	2301      	movs	r3, #1
 800c760:	e000      	b.n	800c764 <xQueueReceive+0x44>
 800c762:	2300      	movs	r3, #0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10a      	bne.n	800c77e <xQueueReceive+0x5e>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	61fb      	str	r3, [r7, #28]
}
 800c77a:	bf00      	nop
 800c77c:	e7fe      	b.n	800c77c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c77e:	f001 f8a9 	bl	800d8d4 <xTaskGetSchedulerState>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <xQueueReceive+0x6e>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d101      	bne.n	800c792 <xQueueReceive+0x72>
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <xQueueReceive+0x74>
 800c792:	2300      	movs	r3, #0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10a      	bne.n	800c7ae <xQueueReceive+0x8e>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	61bb      	str	r3, [r7, #24]
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7ae:	f001 fbe1 	bl	800df74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d01f      	beq.n	800c7fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7be:	68b9      	ldr	r1, [r7, #8]
 800c7c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7c2:	f000 fa1b 	bl	800cbfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	1e5a      	subs	r2, r3, #1
 800c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00f      	beq.n	800c7f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d8:	3310      	adds	r3, #16
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 febe 	bl	800d55c <xTaskRemoveFromEventList>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d007      	beq.n	800c7f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c7e6:	4b3d      	ldr	r3, [pc, #244]	; (800c8dc <xQueueReceive+0x1bc>)
 800c7e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c7f6:	f001 fbed 	bl	800dfd4 <vPortExitCritical>
				return pdPASS;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e069      	b.n	800c8d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d103      	bne.n	800c80c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c804:	f001 fbe6 	bl	800dfd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c808:	2300      	movs	r3, #0
 800c80a:	e062      	b.n	800c8d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d106      	bne.n	800c820 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c812:	f107 0310 	add.w	r3, r7, #16
 800c816:	4618      	mov	r0, r3
 800c818:	f000 ff02 	bl	800d620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c81c:	2301      	movs	r3, #1
 800c81e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c820:	f001 fbd8 	bl	800dfd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c824:	f000 fcb8 	bl	800d198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c828:	f001 fba4 	bl	800df74 <vPortEnterCritical>
 800c82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c832:	b25b      	sxtb	r3, r3
 800c834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c838:	d103      	bne.n	800c842 <xQueueReceive+0x122>
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	2200      	movs	r2, #0
 800c83e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c848:	b25b      	sxtb	r3, r3
 800c84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84e:	d103      	bne.n	800c858 <xQueueReceive+0x138>
 800c850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c858:	f001 fbbc 	bl	800dfd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c85c:	1d3a      	adds	r2, r7, #4
 800c85e:	f107 0310 	add.w	r3, r7, #16
 800c862:	4611      	mov	r1, r2
 800c864:	4618      	mov	r0, r3
 800c866:	f000 fef1 	bl	800d64c <xTaskCheckForTimeOut>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d123      	bne.n	800c8b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c872:	f000 fa3b 	bl	800ccec <prvIsQueueEmpty>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d017      	beq.n	800c8ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	3324      	adds	r3, #36	; 0x24
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	4611      	mov	r1, r2
 800c884:	4618      	mov	r0, r3
 800c886:	f000 fe45 	bl	800d514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c88c:	f000 f9dc 	bl	800cc48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c890:	f000 fc90 	bl	800d1b4 <xTaskResumeAll>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d189      	bne.n	800c7ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c89a:	4b10      	ldr	r3, [pc, #64]	; (800c8dc <xQueueReceive+0x1bc>)
 800c89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	e780      	b.n	800c7ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c8ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ae:	f000 f9cb 	bl	800cc48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8b2:	f000 fc7f 	bl	800d1b4 <xTaskResumeAll>
 800c8b6:	e77a      	b.n	800c7ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c8b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ba:	f000 f9c5 	bl	800cc48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8be:	f000 fc79 	bl	800d1b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8c4:	f000 fa12 	bl	800ccec <prvIsQueueEmpty>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f43f af6f 	beq.w	800c7ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3730      	adds	r7, #48	; 0x30
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	e000ed04 	.word	0xe000ed04

0800c8e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b08e      	sub	sp, #56	; 0x38
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d10a      	bne.n	800c912 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	623b      	str	r3, [r7, #32]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00a      	beq.n	800c930 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91e:	f383 8811 	msr	BASEPRI, r3
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	61fb      	str	r3, [r7, #28]
}
 800c92c:	bf00      	nop
 800c92e:	e7fe      	b.n	800c92e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c930:	f000 ffd0 	bl	800d8d4 <xTaskGetSchedulerState>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d102      	bne.n	800c940 <xQueueSemaphoreTake+0x60>
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <xQueueSemaphoreTake+0x64>
 800c940:	2301      	movs	r3, #1
 800c942:	e000      	b.n	800c946 <xQueueSemaphoreTake+0x66>
 800c944:	2300      	movs	r3, #0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10a      	bne.n	800c960 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	61bb      	str	r3, [r7, #24]
}
 800c95c:	bf00      	nop
 800c95e:	e7fe      	b.n	800c95e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c960:	f001 fb08 	bl	800df74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c968:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d024      	beq.n	800c9ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c972:	1e5a      	subs	r2, r3, #1
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d104      	bne.n	800c98a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c980:	f001 f950 	bl	800dc24 <pvTaskIncrementMutexHeldCount>
 800c984:	4602      	mov	r2, r0
 800c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c988:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00f      	beq.n	800c9b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	3310      	adds	r3, #16
 800c996:	4618      	mov	r0, r3
 800c998:	f000 fde0 	bl	800d55c <xTaskRemoveFromEventList>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d007      	beq.n	800c9b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c9a2:	4b54      	ldr	r3, [pc, #336]	; (800caf4 <xQueueSemaphoreTake+0x214>)
 800c9a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c9b2:	f001 fb0f 	bl	800dfd4 <vPortExitCritical>
				return pdPASS;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e097      	b.n	800caea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d111      	bne.n	800c9e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00a      	beq.n	800c9dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	617b      	str	r3, [r7, #20]
}
 800c9d8:	bf00      	nop
 800c9da:	e7fe      	b.n	800c9da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c9dc:	f001 fafa 	bl	800dfd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	e082      	b.n	800caea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d106      	bne.n	800c9f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9ea:	f107 030c 	add.w	r3, r7, #12
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 fe16 	bl	800d620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9f8:	f001 faec 	bl	800dfd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9fc:	f000 fbcc 	bl	800d198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca00:	f001 fab8 	bl	800df74 <vPortEnterCritical>
 800ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca0a:	b25b      	sxtb	r3, r3
 800ca0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca10:	d103      	bne.n	800ca1a <xQueueSemaphoreTake+0x13a>
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	2200      	movs	r2, #0
 800ca16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca20:	b25b      	sxtb	r3, r3
 800ca22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca26:	d103      	bne.n	800ca30 <xQueueSemaphoreTake+0x150>
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca30:	f001 fad0 	bl	800dfd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca34:	463a      	mov	r2, r7
 800ca36:	f107 030c 	add.w	r3, r7, #12
 800ca3a:	4611      	mov	r1, r2
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f000 fe05 	bl	800d64c <xTaskCheckForTimeOut>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d132      	bne.n	800caae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca4a:	f000 f94f 	bl	800ccec <prvIsQueueEmpty>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d026      	beq.n	800caa2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d109      	bne.n	800ca70 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ca5c:	f001 fa8a 	bl	800df74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 ff53 	bl	800d910 <xTaskPriorityInherit>
 800ca6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ca6c:	f001 fab2 	bl	800dfd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca72:	3324      	adds	r3, #36	; 0x24
 800ca74:	683a      	ldr	r2, [r7, #0]
 800ca76:	4611      	mov	r1, r2
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 fd4b 	bl	800d514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca80:	f000 f8e2 	bl	800cc48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca84:	f000 fb96 	bl	800d1b4 <xTaskResumeAll>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f47f af68 	bne.w	800c960 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ca90:	4b18      	ldr	r3, [pc, #96]	; (800caf4 <xQueueSemaphoreTake+0x214>)
 800ca92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca96:	601a      	str	r2, [r3, #0]
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	e75e      	b.n	800c960 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800caa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caa4:	f000 f8d0 	bl	800cc48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800caa8:	f000 fb84 	bl	800d1b4 <xTaskResumeAll>
 800caac:	e758      	b.n	800c960 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800caae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cab0:	f000 f8ca 	bl	800cc48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cab4:	f000 fb7e 	bl	800d1b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caba:	f000 f917 	bl	800ccec <prvIsQueueEmpty>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f43f af4d 	beq.w	800c960 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00d      	beq.n	800cae8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cacc:	f001 fa52 	bl	800df74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cad2:	f000 f811 	bl	800caf8 <prvGetDisinheritPriorityAfterTimeout>
 800cad6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cade:	4618      	mov	r0, r3
 800cae0:	f001 f812 	bl	800db08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cae4:	f001 fa76 	bl	800dfd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cae8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800caea:	4618      	mov	r0, r3
 800caec:	3738      	adds	r7, #56	; 0x38
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	e000ed04 	.word	0xe000ed04

0800caf8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d006      	beq.n	800cb16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f1c3 0307 	rsb	r3, r3, #7
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	e001      	b.n	800cb1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb16:	2300      	movs	r3, #0
 800cb18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
	}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3714      	adds	r7, #20
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb34:	2300      	movs	r3, #0
 800cb36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10d      	bne.n	800cb62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d14d      	bne.n	800cbea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 ff52 	bl	800d9fc <xTaskPriorityDisinherit>
 800cb58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	609a      	str	r2, [r3, #8]
 800cb60:	e043      	b.n	800cbea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d119      	bne.n	800cb9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6858      	ldr	r0, [r3, #4]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb70:	461a      	mov	r2, r3
 800cb72:	68b9      	ldr	r1, [r7, #8]
 800cb74:	f001 fd2e 	bl	800e5d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb80:	441a      	add	r2, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	685a      	ldr	r2, [r3, #4]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d32b      	bcc.n	800cbea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	605a      	str	r2, [r3, #4]
 800cb9a:	e026      	b.n	800cbea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	68d8      	ldr	r0, [r3, #12]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba4:	461a      	mov	r2, r3
 800cba6:	68b9      	ldr	r1, [r7, #8]
 800cba8:	f001 fd14 	bl	800e5d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	68da      	ldr	r2, [r3, #12]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb4:	425b      	negs	r3, r3
 800cbb6:	441a      	add	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	68da      	ldr	r2, [r3, #12]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d207      	bcs.n	800cbd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	689a      	ldr	r2, [r3, #8]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd0:	425b      	negs	r3, r3
 800cbd2:	441a      	add	r2, r3
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d105      	bne.n	800cbea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d002      	beq.n	800cbea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	1c5a      	adds	r2, r3, #1
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cbf2:	697b      	ldr	r3, [r7, #20]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3718      	adds	r7, #24
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d018      	beq.n	800cc40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68da      	ldr	r2, [r3, #12]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc16:	441a      	add	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	68da      	ldr	r2, [r3, #12]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d303      	bcc.n	800cc30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	68d9      	ldr	r1, [r3, #12]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc38:	461a      	mov	r2, r3
 800cc3a:	6838      	ldr	r0, [r7, #0]
 800cc3c:	f001 fcca 	bl	800e5d4 <memcpy>
	}
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc50:	f001 f990 	bl	800df74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc5c:	e011      	b.n	800cc82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d012      	beq.n	800cc8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3324      	adds	r3, #36	; 0x24
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f000 fc76 	bl	800d55c <xTaskRemoveFromEventList>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc76:	f000 fd4b 	bl	800d710 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	dce9      	bgt.n	800cc5e <prvUnlockQueue+0x16>
 800cc8a:	e000      	b.n	800cc8e <prvUnlockQueue+0x46>
					break;
 800cc8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	22ff      	movs	r2, #255	; 0xff
 800cc92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cc96:	f001 f99d 	bl	800dfd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc9a:	f001 f96b 	bl	800df74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cca4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cca6:	e011      	b.n	800cccc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d012      	beq.n	800ccd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	3310      	adds	r3, #16
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 fc51 	bl	800d55c <xTaskRemoveFromEventList>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d001      	beq.n	800ccc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ccc0:	f000 fd26 	bl	800d710 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ccc4:	7bbb      	ldrb	r3, [r7, #14]
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	dce9      	bgt.n	800cca8 <prvUnlockQueue+0x60>
 800ccd4:	e000      	b.n	800ccd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ccd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	22ff      	movs	r2, #255	; 0xff
 800ccdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cce0:	f001 f978 	bl	800dfd4 <vPortExitCritical>
}
 800cce4:	bf00      	nop
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ccf4:	f001 f93e 	bl	800df74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd00:	2301      	movs	r3, #1
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	e001      	b.n	800cd0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd06:	2300      	movs	r3, #0
 800cd08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd0a:	f001 f963 	bl	800dfd4 <vPortExitCritical>

	return xReturn;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd20:	f001 f928 	bl	800df74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d102      	bne.n	800cd36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd30:	2301      	movs	r3, #1
 800cd32:	60fb      	str	r3, [r7, #12]
 800cd34:	e001      	b.n	800cd3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd36:	2300      	movs	r3, #0
 800cd38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd3a:	f001 f94b 	bl	800dfd4 <vPortExitCritical>

	return xReturn;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08e      	sub	sp, #56	; 0x38
 800cd4c:	af04      	add	r7, sp, #16
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10a      	bne.n	800cd72 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	623b      	str	r3, [r7, #32]
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10a      	bne.n	800cd8e <xTaskCreateStatic+0x46>
	__asm volatile
 800cd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	61fb      	str	r3, [r7, #28]
}
 800cd8a:	bf00      	nop
 800cd8c:	e7fe      	b.n	800cd8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd8e:	2354      	movs	r3, #84	; 0x54
 800cd90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	2b54      	cmp	r3, #84	; 0x54
 800cd96:	d00a      	beq.n	800cdae <xTaskCreateStatic+0x66>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	61bb      	str	r3, [r7, #24]
}
 800cdaa:	bf00      	nop
 800cdac:	e7fe      	b.n	800cdac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cdae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d01e      	beq.n	800cdf4 <xTaskCreateStatic+0xac>
 800cdb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d01b      	beq.n	800cdf4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc8:	2202      	movs	r2, #2
 800cdca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cdce:	2300      	movs	r3, #0
 800cdd0:	9303      	str	r3, [sp, #12]
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd4:	9302      	str	r3, [sp, #8]
 800cdd6:	f107 0314 	add.w	r3, r7, #20
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	68b9      	ldr	r1, [r7, #8]
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f000 f850 	bl	800ce8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdee:	f000 f8d5 	bl	800cf9c <prvAddNewTaskToReadyList>
 800cdf2:	e001      	b.n	800cdf8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cdf8:	697b      	ldr	r3, [r7, #20]
	}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3728      	adds	r7, #40	; 0x28
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b08c      	sub	sp, #48	; 0x30
 800ce06:	af04      	add	r7, sp, #16
 800ce08:	60f8      	str	r0, [r7, #12]
 800ce0a:	60b9      	str	r1, [r7, #8]
 800ce0c:	603b      	str	r3, [r7, #0]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce12:	88fb      	ldrh	r3, [r7, #6]
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f001 f9ce 	bl	800e1b8 <pvPortMalloc>
 800ce1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00e      	beq.n	800ce42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce24:	2054      	movs	r0, #84	; 0x54
 800ce26:	f001 f9c7 	bl	800e1b8 <pvPortMalloc>
 800ce2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	697a      	ldr	r2, [r7, #20]
 800ce36:	631a      	str	r2, [r3, #48]	; 0x30
 800ce38:	e005      	b.n	800ce46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce3a:	6978      	ldr	r0, [r7, #20]
 800ce3c:	f001 fa88 	bl	800e350 <vPortFree>
 800ce40:	e001      	b.n	800ce46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce42:	2300      	movs	r3, #0
 800ce44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d017      	beq.n	800ce7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce54:	88fa      	ldrh	r2, [r7, #6]
 800ce56:	2300      	movs	r3, #0
 800ce58:	9303      	str	r3, [sp, #12]
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	9302      	str	r3, [sp, #8]
 800ce5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce60:	9301      	str	r3, [sp, #4]
 800ce62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	68b9      	ldr	r1, [r7, #8]
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f000 f80e 	bl	800ce8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce70:	69f8      	ldr	r0, [r7, #28]
 800ce72:	f000 f893 	bl	800cf9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce76:	2301      	movs	r3, #1
 800ce78:	61bb      	str	r3, [r7, #24]
 800ce7a:	e002      	b.n	800ce82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce82:	69bb      	ldr	r3, [r7, #24]
	}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3720      	adds	r7, #32
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b088      	sub	sp, #32
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce9e:	6879      	ldr	r1, [r7, #4]
 800cea0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cea4:	440b      	add	r3, r1
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	4413      	add	r3, r2
 800ceaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	f023 0307 	bic.w	r3, r3, #7
 800ceb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	f003 0307 	and.w	r3, r3, #7
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00a      	beq.n	800ced4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	617b      	str	r3, [r7, #20]
}
 800ced0:	bf00      	nop
 800ced2:	e7fe      	b.n	800ced2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d01f      	beq.n	800cf1a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ceda:	2300      	movs	r3, #0
 800cedc:	61fb      	str	r3, [r7, #28]
 800cede:	e012      	b.n	800cf06 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	4413      	add	r3, r2
 800cee6:	7819      	ldrb	r1, [r3, #0]
 800cee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	4413      	add	r3, r2
 800ceee:	3334      	adds	r3, #52	; 0x34
 800cef0:	460a      	mov	r2, r1
 800cef2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	4413      	add	r3, r2
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d006      	beq.n	800cf0e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	3301      	adds	r3, #1
 800cf04:	61fb      	str	r3, [r7, #28]
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	2b0f      	cmp	r3, #15
 800cf0a:	d9e9      	bls.n	800cee0 <prvInitialiseNewTask+0x54>
 800cf0c:	e000      	b.n	800cf10 <prvInitialiseNewTask+0x84>
			{
				break;
 800cf0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf12:	2200      	movs	r2, #0
 800cf14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf18:	e003      	b.n	800cf22 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf24:	2b06      	cmp	r3, #6
 800cf26:	d901      	bls.n	800cf2c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf28:	2306      	movs	r3, #6
 800cf2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf36:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	3304      	adds	r3, #4
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7ff f891 	bl	800c06a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4a:	3318      	adds	r3, #24
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7ff f88c 	bl	800c06a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5a:	f1c3 0207 	rsb	r2, r3, #7
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf76:	683a      	ldr	r2, [r7, #0]
 800cf78:	68f9      	ldr	r1, [r7, #12]
 800cf7a:	69b8      	ldr	r0, [r7, #24]
 800cf7c:	f000 fecc 	bl	800dd18 <pxPortInitialiseStack>
 800cf80:	4602      	mov	r2, r0
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d002      	beq.n	800cf92 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf92:	bf00      	nop
 800cf94:	3720      	adds	r7, #32
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
	...

0800cf9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cfa4:	f000 ffe6 	bl	800df74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cfa8:	4b2a      	ldr	r3, [pc, #168]	; (800d054 <prvAddNewTaskToReadyList+0xb8>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	3301      	adds	r3, #1
 800cfae:	4a29      	ldr	r2, [pc, #164]	; (800d054 <prvAddNewTaskToReadyList+0xb8>)
 800cfb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cfb2:	4b29      	ldr	r3, [pc, #164]	; (800d058 <prvAddNewTaskToReadyList+0xbc>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d109      	bne.n	800cfce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cfba:	4a27      	ldr	r2, [pc, #156]	; (800d058 <prvAddNewTaskToReadyList+0xbc>)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfc0:	4b24      	ldr	r3, [pc, #144]	; (800d054 <prvAddNewTaskToReadyList+0xb8>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d110      	bne.n	800cfea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfc8:	f000 fbc6 	bl	800d758 <prvInitialiseTaskLists>
 800cfcc:	e00d      	b.n	800cfea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfce:	4b23      	ldr	r3, [pc, #140]	; (800d05c <prvAddNewTaskToReadyList+0xc0>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d109      	bne.n	800cfea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfd6:	4b20      	ldr	r3, [pc, #128]	; (800d058 <prvAddNewTaskToReadyList+0xbc>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d802      	bhi.n	800cfea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfe4:	4a1c      	ldr	r2, [pc, #112]	; (800d058 <prvAddNewTaskToReadyList+0xbc>)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cfea:	4b1d      	ldr	r3, [pc, #116]	; (800d060 <prvAddNewTaskToReadyList+0xc4>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	3301      	adds	r3, #1
 800cff0:	4a1b      	ldr	r2, [pc, #108]	; (800d060 <prvAddNewTaskToReadyList+0xc4>)
 800cff2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff8:	2201      	movs	r2, #1
 800cffa:	409a      	lsls	r2, r3
 800cffc:	4b19      	ldr	r3, [pc, #100]	; (800d064 <prvAddNewTaskToReadyList+0xc8>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4313      	orrs	r3, r2
 800d002:	4a18      	ldr	r2, [pc, #96]	; (800d064 <prvAddNewTaskToReadyList+0xc8>)
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00a:	4613      	mov	r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4a15      	ldr	r2, [pc, #84]	; (800d068 <prvAddNewTaskToReadyList+0xcc>)
 800d014:	441a      	add	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	3304      	adds	r3, #4
 800d01a:	4619      	mov	r1, r3
 800d01c:	4610      	mov	r0, r2
 800d01e:	f7ff f831 	bl	800c084 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d022:	f000 ffd7 	bl	800dfd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d026:	4b0d      	ldr	r3, [pc, #52]	; (800d05c <prvAddNewTaskToReadyList+0xc0>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00e      	beq.n	800d04c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d02e:	4b0a      	ldr	r3, [pc, #40]	; (800d058 <prvAddNewTaskToReadyList+0xbc>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d038:	429a      	cmp	r2, r3
 800d03a:	d207      	bcs.n	800d04c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d03c:	4b0b      	ldr	r3, [pc, #44]	; (800d06c <prvAddNewTaskToReadyList+0xd0>)
 800d03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d04c:	bf00      	nop
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	24000450 	.word	0x24000450
 800d058:	24000350 	.word	0x24000350
 800d05c:	2400045c 	.word	0x2400045c
 800d060:	2400046c 	.word	0x2400046c
 800d064:	24000458 	.word	0x24000458
 800d068:	24000354 	.word	0x24000354
 800d06c:	e000ed04 	.word	0xe000ed04

0800d070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d078:	2300      	movs	r3, #0
 800d07a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d017      	beq.n	800d0b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d082:	4b13      	ldr	r3, [pc, #76]	; (800d0d0 <vTaskDelay+0x60>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00a      	beq.n	800d0a0 <vTaskDelay+0x30>
	__asm volatile
 800d08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	60bb      	str	r3, [r7, #8]
}
 800d09c:	bf00      	nop
 800d09e:	e7fe      	b.n	800d09e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d0a0:	f000 f87a 	bl	800d198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 fdd0 	bl	800dc4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d0ac:	f000 f882 	bl	800d1b4 <xTaskResumeAll>
 800d0b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d107      	bne.n	800d0c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d0b8:	4b06      	ldr	r3, [pc, #24]	; (800d0d4 <vTaskDelay+0x64>)
 800d0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0be:	601a      	str	r2, [r3, #0]
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0c8:	bf00      	nop
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	24000478 	.word	0x24000478
 800d0d4:	e000ed04 	.word	0xe000ed04

0800d0d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08a      	sub	sp, #40	; 0x28
 800d0dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d0e6:	463a      	mov	r2, r7
 800d0e8:	1d39      	adds	r1, r7, #4
 800d0ea:	f107 0308 	add.w	r3, r7, #8
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7f3 fb14 	bl	800071c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	9202      	str	r2, [sp, #8]
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	2300      	movs	r3, #0
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	2300      	movs	r3, #0
 800d104:	460a      	mov	r2, r1
 800d106:	491e      	ldr	r1, [pc, #120]	; (800d180 <vTaskStartScheduler+0xa8>)
 800d108:	481e      	ldr	r0, [pc, #120]	; (800d184 <vTaskStartScheduler+0xac>)
 800d10a:	f7ff fe1d 	bl	800cd48 <xTaskCreateStatic>
 800d10e:	4603      	mov	r3, r0
 800d110:	4a1d      	ldr	r2, [pc, #116]	; (800d188 <vTaskStartScheduler+0xb0>)
 800d112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d114:	4b1c      	ldr	r3, [pc, #112]	; (800d188 <vTaskStartScheduler+0xb0>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d11c:	2301      	movs	r3, #1
 800d11e:	617b      	str	r3, [r7, #20]
 800d120:	e001      	b.n	800d126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d122:	2300      	movs	r3, #0
 800d124:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d116      	bne.n	800d15a <vTaskStartScheduler+0x82>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	613b      	str	r3, [r7, #16]
}
 800d13e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d140:	4b12      	ldr	r3, [pc, #72]	; (800d18c <vTaskStartScheduler+0xb4>)
 800d142:	f04f 32ff 	mov.w	r2, #4294967295
 800d146:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d148:	4b11      	ldr	r3, [pc, #68]	; (800d190 <vTaskStartScheduler+0xb8>)
 800d14a:	2201      	movs	r2, #1
 800d14c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d14e:	4b11      	ldr	r3, [pc, #68]	; (800d194 <vTaskStartScheduler+0xbc>)
 800d150:	2200      	movs	r2, #0
 800d152:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d154:	f000 fe6c 	bl	800de30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d158:	e00e      	b.n	800d178 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d160:	d10a      	bne.n	800d178 <vTaskStartScheduler+0xa0>
	__asm volatile
 800d162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	60fb      	str	r3, [r7, #12]
}
 800d174:	bf00      	nop
 800d176:	e7fe      	b.n	800d176 <vTaskStartScheduler+0x9e>
}
 800d178:	bf00      	nop
 800d17a:	3718      	adds	r7, #24
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	0800e838 	.word	0x0800e838
 800d184:	0800d729 	.word	0x0800d729
 800d188:	24000474 	.word	0x24000474
 800d18c:	24000470 	.word	0x24000470
 800d190:	2400045c 	.word	0x2400045c
 800d194:	24000454 	.word	0x24000454

0800d198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d198:	b480      	push	{r7}
 800d19a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d19c:	4b04      	ldr	r3, [pc, #16]	; (800d1b0 <vTaskSuspendAll+0x18>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	4a03      	ldr	r2, [pc, #12]	; (800d1b0 <vTaskSuspendAll+0x18>)
 800d1a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d1a6:	bf00      	nop
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr
 800d1b0:	24000478 	.word	0x24000478

0800d1b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d1c2:	4b41      	ldr	r3, [pc, #260]	; (800d2c8 <xTaskResumeAll+0x114>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d10a      	bne.n	800d1e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	603b      	str	r3, [r7, #0]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d1e0:	f000 fec8 	bl	800df74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d1e4:	4b38      	ldr	r3, [pc, #224]	; (800d2c8 <xTaskResumeAll+0x114>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	4a37      	ldr	r2, [pc, #220]	; (800d2c8 <xTaskResumeAll+0x114>)
 800d1ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1ee:	4b36      	ldr	r3, [pc, #216]	; (800d2c8 <xTaskResumeAll+0x114>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d161      	bne.n	800d2ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d1f6:	4b35      	ldr	r3, [pc, #212]	; (800d2cc <xTaskResumeAll+0x118>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d05d      	beq.n	800d2ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d1fe:	e02e      	b.n	800d25e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d200:	4b33      	ldr	r3, [pc, #204]	; (800d2d0 <xTaskResumeAll+0x11c>)
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	3318      	adds	r3, #24
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fe ff96 	bl	800c13e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	3304      	adds	r3, #4
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe ff91 	bl	800c13e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d220:	2201      	movs	r2, #1
 800d222:	409a      	lsls	r2, r3
 800d224:	4b2b      	ldr	r3, [pc, #172]	; (800d2d4 <xTaskResumeAll+0x120>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4313      	orrs	r3, r2
 800d22a:	4a2a      	ldr	r2, [pc, #168]	; (800d2d4 <xTaskResumeAll+0x120>)
 800d22c:	6013      	str	r3, [r2, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d232:	4613      	mov	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	4413      	add	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4a27      	ldr	r2, [pc, #156]	; (800d2d8 <xTaskResumeAll+0x124>)
 800d23c:	441a      	add	r2, r3
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3304      	adds	r3, #4
 800d242:	4619      	mov	r1, r3
 800d244:	4610      	mov	r0, r2
 800d246:	f7fe ff1d 	bl	800c084 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24e:	4b23      	ldr	r3, [pc, #140]	; (800d2dc <xTaskResumeAll+0x128>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d254:	429a      	cmp	r2, r3
 800d256:	d302      	bcc.n	800d25e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d258:	4b21      	ldr	r3, [pc, #132]	; (800d2e0 <xTaskResumeAll+0x12c>)
 800d25a:	2201      	movs	r2, #1
 800d25c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d25e:	4b1c      	ldr	r3, [pc, #112]	; (800d2d0 <xTaskResumeAll+0x11c>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1cc      	bne.n	800d200 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d26c:	f000 fb12 	bl	800d894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d270:	4b1c      	ldr	r3, [pc, #112]	; (800d2e4 <xTaskResumeAll+0x130>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d010      	beq.n	800d29e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d27c:	f000 f836 	bl	800d2ec <xTaskIncrementTick>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d002      	beq.n	800d28c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d286:	4b16      	ldr	r3, [pc, #88]	; (800d2e0 <xTaskResumeAll+0x12c>)
 800d288:	2201      	movs	r2, #1
 800d28a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	3b01      	subs	r3, #1
 800d290:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d1f1      	bne.n	800d27c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d298:	4b12      	ldr	r3, [pc, #72]	; (800d2e4 <xTaskResumeAll+0x130>)
 800d29a:	2200      	movs	r2, #0
 800d29c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d29e:	4b10      	ldr	r3, [pc, #64]	; (800d2e0 <xTaskResumeAll+0x12c>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d009      	beq.n	800d2ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d2aa:	4b0f      	ldr	r3, [pc, #60]	; (800d2e8 <xTaskResumeAll+0x134>)
 800d2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2ba:	f000 fe8b 	bl	800dfd4 <vPortExitCritical>

	return xAlreadyYielded;
 800d2be:	68bb      	ldr	r3, [r7, #8]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	24000478 	.word	0x24000478
 800d2cc:	24000450 	.word	0x24000450
 800d2d0:	24000410 	.word	0x24000410
 800d2d4:	24000458 	.word	0x24000458
 800d2d8:	24000354 	.word	0x24000354
 800d2dc:	24000350 	.word	0x24000350
 800d2e0:	24000464 	.word	0x24000464
 800d2e4:	24000460 	.word	0x24000460
 800d2e8:	e000ed04 	.word	0xe000ed04

0800d2ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b086      	sub	sp, #24
 800d2f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2f6:	4b4e      	ldr	r3, [pc, #312]	; (800d430 <xTaskIncrementTick+0x144>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f040 808e 	bne.w	800d41c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d300:	4b4c      	ldr	r3, [pc, #304]	; (800d434 <xTaskIncrementTick+0x148>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	3301      	adds	r3, #1
 800d306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d308:	4a4a      	ldr	r2, [pc, #296]	; (800d434 <xTaskIncrementTick+0x148>)
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d120      	bne.n	800d356 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d314:	4b48      	ldr	r3, [pc, #288]	; (800d438 <xTaskIncrementTick+0x14c>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00a      	beq.n	800d334 <xTaskIncrementTick+0x48>
	__asm volatile
 800d31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	603b      	str	r3, [r7, #0]
}
 800d330:	bf00      	nop
 800d332:	e7fe      	b.n	800d332 <xTaskIncrementTick+0x46>
 800d334:	4b40      	ldr	r3, [pc, #256]	; (800d438 <xTaskIncrementTick+0x14c>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	60fb      	str	r3, [r7, #12]
 800d33a:	4b40      	ldr	r3, [pc, #256]	; (800d43c <xTaskIncrementTick+0x150>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4a3e      	ldr	r2, [pc, #248]	; (800d438 <xTaskIncrementTick+0x14c>)
 800d340:	6013      	str	r3, [r2, #0]
 800d342:	4a3e      	ldr	r2, [pc, #248]	; (800d43c <xTaskIncrementTick+0x150>)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6013      	str	r3, [r2, #0]
 800d348:	4b3d      	ldr	r3, [pc, #244]	; (800d440 <xTaskIncrementTick+0x154>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	3301      	adds	r3, #1
 800d34e:	4a3c      	ldr	r2, [pc, #240]	; (800d440 <xTaskIncrementTick+0x154>)
 800d350:	6013      	str	r3, [r2, #0]
 800d352:	f000 fa9f 	bl	800d894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d356:	4b3b      	ldr	r3, [pc, #236]	; (800d444 <xTaskIncrementTick+0x158>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	693a      	ldr	r2, [r7, #16]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d348      	bcc.n	800d3f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d360:	4b35      	ldr	r3, [pc, #212]	; (800d438 <xTaskIncrementTick+0x14c>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d104      	bne.n	800d374 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d36a:	4b36      	ldr	r3, [pc, #216]	; (800d444 <xTaskIncrementTick+0x158>)
 800d36c:	f04f 32ff 	mov.w	r2, #4294967295
 800d370:	601a      	str	r2, [r3, #0]
					break;
 800d372:	e03e      	b.n	800d3f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d374:	4b30      	ldr	r3, [pc, #192]	; (800d438 <xTaskIncrementTick+0x14c>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d384:	693a      	ldr	r2, [r7, #16]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d203      	bcs.n	800d394 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d38c:	4a2d      	ldr	r2, [pc, #180]	; (800d444 <xTaskIncrementTick+0x158>)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d392:	e02e      	b.n	800d3f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	3304      	adds	r3, #4
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fe fed0 	bl	800c13e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d004      	beq.n	800d3b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	3318      	adds	r3, #24
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe fec7 	bl	800c13e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	409a      	lsls	r2, r3
 800d3b8:	4b23      	ldr	r3, [pc, #140]	; (800d448 <xTaskIncrementTick+0x15c>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	4a22      	ldr	r2, [pc, #136]	; (800d448 <xTaskIncrementTick+0x15c>)
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	4a1f      	ldr	r2, [pc, #124]	; (800d44c <xTaskIncrementTick+0x160>)
 800d3d0:	441a      	add	r2, r3
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	4610      	mov	r0, r2
 800d3da:	f7fe fe53 	bl	800c084 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e2:	4b1b      	ldr	r3, [pc, #108]	; (800d450 <xTaskIncrementTick+0x164>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d3b9      	bcc.n	800d360 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3f0:	e7b6      	b.n	800d360 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d3f2:	4b17      	ldr	r3, [pc, #92]	; (800d450 <xTaskIncrementTick+0x164>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f8:	4914      	ldr	r1, [pc, #80]	; (800d44c <xTaskIncrementTick+0x160>)
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4413      	add	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	440b      	add	r3, r1
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b01      	cmp	r3, #1
 800d408:	d901      	bls.n	800d40e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d40a:	2301      	movs	r3, #1
 800d40c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d40e:	4b11      	ldr	r3, [pc, #68]	; (800d454 <xTaskIncrementTick+0x168>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d007      	beq.n	800d426 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d416:	2301      	movs	r3, #1
 800d418:	617b      	str	r3, [r7, #20]
 800d41a:	e004      	b.n	800d426 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d41c:	4b0e      	ldr	r3, [pc, #56]	; (800d458 <xTaskIncrementTick+0x16c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3301      	adds	r3, #1
 800d422:	4a0d      	ldr	r2, [pc, #52]	; (800d458 <xTaskIncrementTick+0x16c>)
 800d424:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d426:	697b      	ldr	r3, [r7, #20]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	24000478 	.word	0x24000478
 800d434:	24000454 	.word	0x24000454
 800d438:	24000408 	.word	0x24000408
 800d43c:	2400040c 	.word	0x2400040c
 800d440:	24000468 	.word	0x24000468
 800d444:	24000470 	.word	0x24000470
 800d448:	24000458 	.word	0x24000458
 800d44c:	24000354 	.word	0x24000354
 800d450:	24000350 	.word	0x24000350
 800d454:	24000464 	.word	0x24000464
 800d458:	24000460 	.word	0x24000460

0800d45c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d45c:	b480      	push	{r7}
 800d45e:	b087      	sub	sp, #28
 800d460:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d462:	4b27      	ldr	r3, [pc, #156]	; (800d500 <vTaskSwitchContext+0xa4>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d003      	beq.n	800d472 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d46a:	4b26      	ldr	r3, [pc, #152]	; (800d504 <vTaskSwitchContext+0xa8>)
 800d46c:	2201      	movs	r2, #1
 800d46e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d470:	e03f      	b.n	800d4f2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d472:	4b24      	ldr	r3, [pc, #144]	; (800d504 <vTaskSwitchContext+0xa8>)
 800d474:	2200      	movs	r2, #0
 800d476:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d478:	4b23      	ldr	r3, [pc, #140]	; (800d508 <vTaskSwitchContext+0xac>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	fab3 f383 	clz	r3, r3
 800d484:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d486:	7afb      	ldrb	r3, [r7, #11]
 800d488:	f1c3 031f 	rsb	r3, r3, #31
 800d48c:	617b      	str	r3, [r7, #20]
 800d48e:	491f      	ldr	r1, [pc, #124]	; (800d50c <vTaskSwitchContext+0xb0>)
 800d490:	697a      	ldr	r2, [r7, #20]
 800d492:	4613      	mov	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	440b      	add	r3, r1
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d10a      	bne.n	800d4b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	607b      	str	r3, [r7, #4]
}
 800d4b4:	bf00      	nop
 800d4b6:	e7fe      	b.n	800d4b6 <vTaskSwitchContext+0x5a>
 800d4b8:	697a      	ldr	r2, [r7, #20]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	4413      	add	r3, r2
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4a12      	ldr	r2, [pc, #72]	; (800d50c <vTaskSwitchContext+0xb0>)
 800d4c4:	4413      	add	r3, r2
 800d4c6:	613b      	str	r3, [r7, #16]
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	685a      	ldr	r2, [r3, #4]
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	605a      	str	r2, [r3, #4]
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	685a      	ldr	r2, [r3, #4]
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	3308      	adds	r3, #8
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d104      	bne.n	800d4e8 <vTaskSwitchContext+0x8c>
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	685a      	ldr	r2, [r3, #4]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	605a      	str	r2, [r3, #4]
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	4a08      	ldr	r2, [pc, #32]	; (800d510 <vTaskSwitchContext+0xb4>)
 800d4f0:	6013      	str	r3, [r2, #0]
}
 800d4f2:	bf00      	nop
 800d4f4:	371c      	adds	r7, #28
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	24000478 	.word	0x24000478
 800d504:	24000464 	.word	0x24000464
 800d508:	24000458 	.word	0x24000458
 800d50c:	24000354 	.word	0x24000354
 800d510:	24000350 	.word	0x24000350

0800d514 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10a      	bne.n	800d53a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d528:	f383 8811 	msr	BASEPRI, r3
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	60fb      	str	r3, [r7, #12]
}
 800d536:	bf00      	nop
 800d538:	e7fe      	b.n	800d538 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d53a:	4b07      	ldr	r3, [pc, #28]	; (800d558 <vTaskPlaceOnEventList+0x44>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	3318      	adds	r3, #24
 800d540:	4619      	mov	r1, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7fe fdc2 	bl	800c0cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d548:	2101      	movs	r1, #1
 800d54a:	6838      	ldr	r0, [r7, #0]
 800d54c:	f000 fb7e 	bl	800dc4c <prvAddCurrentTaskToDelayedList>
}
 800d550:	bf00      	nop
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	24000350 	.word	0x24000350

0800d55c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d10a      	bne.n	800d588 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	60fb      	str	r3, [r7, #12]
}
 800d584:	bf00      	nop
 800d586:	e7fe      	b.n	800d586 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	3318      	adds	r3, #24
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fe fdd6 	bl	800c13e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d592:	4b1d      	ldr	r3, [pc, #116]	; (800d608 <xTaskRemoveFromEventList+0xac>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d11c      	bne.n	800d5d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	3304      	adds	r3, #4
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fe fdcd 	bl	800c13e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	409a      	lsls	r2, r3
 800d5ac:	4b17      	ldr	r3, [pc, #92]	; (800d60c <xTaskRemoveFromEventList+0xb0>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	4a16      	ldr	r2, [pc, #88]	; (800d60c <xTaskRemoveFromEventList+0xb0>)
 800d5b4:	6013      	str	r3, [r2, #0]
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	4413      	add	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4a13      	ldr	r2, [pc, #76]	; (800d610 <xTaskRemoveFromEventList+0xb4>)
 800d5c4:	441a      	add	r2, r3
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	f7fe fd59 	bl	800c084 <vListInsertEnd>
 800d5d2:	e005      	b.n	800d5e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	3318      	adds	r3, #24
 800d5d8:	4619      	mov	r1, r3
 800d5da:	480e      	ldr	r0, [pc, #56]	; (800d614 <xTaskRemoveFromEventList+0xb8>)
 800d5dc:	f7fe fd52 	bl	800c084 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e4:	4b0c      	ldr	r3, [pc, #48]	; (800d618 <xTaskRemoveFromEventList+0xbc>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d905      	bls.n	800d5fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d5f2:	4b0a      	ldr	r3, [pc, #40]	; (800d61c <xTaskRemoveFromEventList+0xc0>)
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	601a      	str	r2, [r3, #0]
 800d5f8:	e001      	b.n	800d5fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d5fe:	697b      	ldr	r3, [r7, #20]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3718      	adds	r7, #24
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	24000478 	.word	0x24000478
 800d60c:	24000458 	.word	0x24000458
 800d610:	24000354 	.word	0x24000354
 800d614:	24000410 	.word	0x24000410
 800d618:	24000350 	.word	0x24000350
 800d61c:	24000464 	.word	0x24000464

0800d620 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d628:	4b06      	ldr	r3, [pc, #24]	; (800d644 <vTaskInternalSetTimeOutState+0x24>)
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d630:	4b05      	ldr	r3, [pc, #20]	; (800d648 <vTaskInternalSetTimeOutState+0x28>)
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	605a      	str	r2, [r3, #4]
}
 800d638:	bf00      	nop
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr
 800d644:	24000468 	.word	0x24000468
 800d648:	24000454 	.word	0x24000454

0800d64c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b088      	sub	sp, #32
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10a      	bne.n	800d672 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	613b      	str	r3, [r7, #16]
}
 800d66e:	bf00      	nop
 800d670:	e7fe      	b.n	800d670 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10a      	bne.n	800d68e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	60fb      	str	r3, [r7, #12]
}
 800d68a:	bf00      	nop
 800d68c:	e7fe      	b.n	800d68c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d68e:	f000 fc71 	bl	800df74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d692:	4b1d      	ldr	r3, [pc, #116]	; (800d708 <xTaskCheckForTimeOut+0xbc>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	69ba      	ldr	r2, [r7, #24]
 800d69e:	1ad3      	subs	r3, r2, r3
 800d6a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6aa:	d102      	bne.n	800d6b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	61fb      	str	r3, [r7, #28]
 800d6b0:	e023      	b.n	800d6fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	4b15      	ldr	r3, [pc, #84]	; (800d70c <xTaskCheckForTimeOut+0xc0>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d007      	beq.n	800d6ce <xTaskCheckForTimeOut+0x82>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	69ba      	ldr	r2, [r7, #24]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d302      	bcc.n	800d6ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	61fb      	str	r3, [r7, #28]
 800d6cc:	e015      	b.n	800d6fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d20b      	bcs.n	800d6f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	1ad2      	subs	r2, r2, r3
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7ff ff9b 	bl	800d620 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	61fb      	str	r3, [r7, #28]
 800d6ee:	e004      	b.n	800d6fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d6fa:	f000 fc6b 	bl	800dfd4 <vPortExitCritical>

	return xReturn;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3720      	adds	r7, #32
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	24000454 	.word	0x24000454
 800d70c:	24000468 	.word	0x24000468

0800d710 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d710:	b480      	push	{r7}
 800d712:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d714:	4b03      	ldr	r3, [pc, #12]	; (800d724 <vTaskMissedYield+0x14>)
 800d716:	2201      	movs	r2, #1
 800d718:	601a      	str	r2, [r3, #0]
}
 800d71a:	bf00      	nop
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr
 800d724:	24000464 	.word	0x24000464

0800d728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d730:	f000 f852 	bl	800d7d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d734:	4b06      	ldr	r3, [pc, #24]	; (800d750 <prvIdleTask+0x28>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d9f9      	bls.n	800d730 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d73c:	4b05      	ldr	r3, [pc, #20]	; (800d754 <prvIdleTask+0x2c>)
 800d73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d74c:	e7f0      	b.n	800d730 <prvIdleTask+0x8>
 800d74e:	bf00      	nop
 800d750:	24000354 	.word	0x24000354
 800d754:	e000ed04 	.word	0xe000ed04

0800d758 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d75e:	2300      	movs	r3, #0
 800d760:	607b      	str	r3, [r7, #4]
 800d762:	e00c      	b.n	800d77e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	4613      	mov	r3, r2
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	4413      	add	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4a12      	ldr	r2, [pc, #72]	; (800d7b8 <prvInitialiseTaskLists+0x60>)
 800d770:	4413      	add	r3, r2
 800d772:	4618      	mov	r0, r3
 800d774:	f7fe fc59 	bl	800c02a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	3301      	adds	r3, #1
 800d77c:	607b      	str	r3, [r7, #4]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2b06      	cmp	r3, #6
 800d782:	d9ef      	bls.n	800d764 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d784:	480d      	ldr	r0, [pc, #52]	; (800d7bc <prvInitialiseTaskLists+0x64>)
 800d786:	f7fe fc50 	bl	800c02a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d78a:	480d      	ldr	r0, [pc, #52]	; (800d7c0 <prvInitialiseTaskLists+0x68>)
 800d78c:	f7fe fc4d 	bl	800c02a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d790:	480c      	ldr	r0, [pc, #48]	; (800d7c4 <prvInitialiseTaskLists+0x6c>)
 800d792:	f7fe fc4a 	bl	800c02a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d796:	480c      	ldr	r0, [pc, #48]	; (800d7c8 <prvInitialiseTaskLists+0x70>)
 800d798:	f7fe fc47 	bl	800c02a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d79c:	480b      	ldr	r0, [pc, #44]	; (800d7cc <prvInitialiseTaskLists+0x74>)
 800d79e:	f7fe fc44 	bl	800c02a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d7a2:	4b0b      	ldr	r3, [pc, #44]	; (800d7d0 <prvInitialiseTaskLists+0x78>)
 800d7a4:	4a05      	ldr	r2, [pc, #20]	; (800d7bc <prvInitialiseTaskLists+0x64>)
 800d7a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d7a8:	4b0a      	ldr	r3, [pc, #40]	; (800d7d4 <prvInitialiseTaskLists+0x7c>)
 800d7aa:	4a05      	ldr	r2, [pc, #20]	; (800d7c0 <prvInitialiseTaskLists+0x68>)
 800d7ac:	601a      	str	r2, [r3, #0]
}
 800d7ae:	bf00      	nop
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	24000354 	.word	0x24000354
 800d7bc:	240003e0 	.word	0x240003e0
 800d7c0:	240003f4 	.word	0x240003f4
 800d7c4:	24000410 	.word	0x24000410
 800d7c8:	24000424 	.word	0x24000424
 800d7cc:	2400043c 	.word	0x2400043c
 800d7d0:	24000408 	.word	0x24000408
 800d7d4:	2400040c 	.word	0x2400040c

0800d7d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7de:	e019      	b.n	800d814 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d7e0:	f000 fbc8 	bl	800df74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7e4:	4b10      	ldr	r3, [pc, #64]	; (800d828 <prvCheckTasksWaitingTermination+0x50>)
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7fe fca4 	bl	800c13e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d7f6:	4b0d      	ldr	r3, [pc, #52]	; (800d82c <prvCheckTasksWaitingTermination+0x54>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	4a0b      	ldr	r2, [pc, #44]	; (800d82c <prvCheckTasksWaitingTermination+0x54>)
 800d7fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d800:	4b0b      	ldr	r3, [pc, #44]	; (800d830 <prvCheckTasksWaitingTermination+0x58>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	3b01      	subs	r3, #1
 800d806:	4a0a      	ldr	r2, [pc, #40]	; (800d830 <prvCheckTasksWaitingTermination+0x58>)
 800d808:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d80a:	f000 fbe3 	bl	800dfd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f810 	bl	800d834 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d814:	4b06      	ldr	r3, [pc, #24]	; (800d830 <prvCheckTasksWaitingTermination+0x58>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d1e1      	bne.n	800d7e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d81c:	bf00      	nop
 800d81e:	bf00      	nop
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	24000424 	.word	0x24000424
 800d82c:	24000450 	.word	0x24000450
 800d830:	24000438 	.word	0x24000438

0800d834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d842:	2b00      	cmp	r3, #0
 800d844:	d108      	bne.n	800d858 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 fd80 	bl	800e350 <vPortFree>
				vPortFree( pxTCB );
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f000 fd7d 	bl	800e350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d856:	e018      	b.n	800d88a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d103      	bne.n	800d86a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 fd74 	bl	800e350 <vPortFree>
	}
 800d868:	e00f      	b.n	800d88a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d870:	2b02      	cmp	r3, #2
 800d872:	d00a      	beq.n	800d88a <prvDeleteTCB+0x56>
	__asm volatile
 800d874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	60fb      	str	r3, [r7, #12]
}
 800d886:	bf00      	nop
 800d888:	e7fe      	b.n	800d888 <prvDeleteTCB+0x54>
	}
 800d88a:	bf00      	nop
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
	...

0800d894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d89a:	4b0c      	ldr	r3, [pc, #48]	; (800d8cc <prvResetNextTaskUnblockTime+0x38>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d104      	bne.n	800d8ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d8a4:	4b0a      	ldr	r3, [pc, #40]	; (800d8d0 <prvResetNextTaskUnblockTime+0x3c>)
 800d8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d8ac:	e008      	b.n	800d8c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8ae:	4b07      	ldr	r3, [pc, #28]	; (800d8cc <prvResetNextTaskUnblockTime+0x38>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	4a04      	ldr	r2, [pc, #16]	; (800d8d0 <prvResetNextTaskUnblockTime+0x3c>)
 800d8be:	6013      	str	r3, [r2, #0]
}
 800d8c0:	bf00      	nop
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	24000408 	.word	0x24000408
 800d8d0:	24000470 	.word	0x24000470

0800d8d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d8da:	4b0b      	ldr	r3, [pc, #44]	; (800d908 <xTaskGetSchedulerState+0x34>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d102      	bne.n	800d8e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	607b      	str	r3, [r7, #4]
 800d8e6:	e008      	b.n	800d8fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8e8:	4b08      	ldr	r3, [pc, #32]	; (800d90c <xTaskGetSchedulerState+0x38>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d102      	bne.n	800d8f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d8f0:	2302      	movs	r3, #2
 800d8f2:	607b      	str	r3, [r7, #4]
 800d8f4:	e001      	b.n	800d8fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d8fa:	687b      	ldr	r3, [r7, #4]
	}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr
 800d908:	2400045c 	.word	0x2400045c
 800d90c:	24000478 	.word	0x24000478

0800d910 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d91c:	2300      	movs	r3, #0
 800d91e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d05e      	beq.n	800d9e4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d92a:	4b31      	ldr	r3, [pc, #196]	; (800d9f0 <xTaskPriorityInherit+0xe0>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d930:	429a      	cmp	r2, r3
 800d932:	d24e      	bcs.n	800d9d2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	699b      	ldr	r3, [r3, #24]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	db06      	blt.n	800d94a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d93c:	4b2c      	ldr	r3, [pc, #176]	; (800d9f0 <xTaskPriorityInherit+0xe0>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d942:	f1c3 0207 	rsb	r2, r3, #7
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	6959      	ldr	r1, [r3, #20]
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d952:	4613      	mov	r3, r2
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	4413      	add	r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4a26      	ldr	r2, [pc, #152]	; (800d9f4 <xTaskPriorityInherit+0xe4>)
 800d95c:	4413      	add	r3, r2
 800d95e:	4299      	cmp	r1, r3
 800d960:	d12f      	bne.n	800d9c2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	3304      	adds	r3, #4
 800d966:	4618      	mov	r0, r3
 800d968:	f7fe fbe9 	bl	800c13e <uxListRemove>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10a      	bne.n	800d988 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d976:	2201      	movs	r2, #1
 800d978:	fa02 f303 	lsl.w	r3, r2, r3
 800d97c:	43da      	mvns	r2, r3
 800d97e:	4b1e      	ldr	r3, [pc, #120]	; (800d9f8 <xTaskPriorityInherit+0xe8>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4013      	ands	r3, r2
 800d984:	4a1c      	ldr	r2, [pc, #112]	; (800d9f8 <xTaskPriorityInherit+0xe8>)
 800d986:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d988:	4b19      	ldr	r3, [pc, #100]	; (800d9f0 <xTaskPriorityInherit+0xe0>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d996:	2201      	movs	r2, #1
 800d998:	409a      	lsls	r2, r3
 800d99a:	4b17      	ldr	r3, [pc, #92]	; (800d9f8 <xTaskPriorityInherit+0xe8>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	4a15      	ldr	r2, [pc, #84]	; (800d9f8 <xTaskPriorityInherit+0xe8>)
 800d9a2:	6013      	str	r3, [r2, #0]
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	4a10      	ldr	r2, [pc, #64]	; (800d9f4 <xTaskPriorityInherit+0xe4>)
 800d9b2:	441a      	add	r2, r3
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	3304      	adds	r3, #4
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	4610      	mov	r0, r2
 800d9bc:	f7fe fb62 	bl	800c084 <vListInsertEnd>
 800d9c0:	e004      	b.n	800d9cc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d9c2:	4b0b      	ldr	r3, [pc, #44]	; (800d9f0 <xTaskPriorityInherit+0xe0>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	60fb      	str	r3, [r7, #12]
 800d9d0:	e008      	b.n	800d9e4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9d6:	4b06      	ldr	r3, [pc, #24]	; (800d9f0 <xTaskPriorityInherit+0xe0>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d201      	bcs.n	800d9e4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
	}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	24000350 	.word	0x24000350
 800d9f4:	24000354 	.word	0x24000354
 800d9f8:	24000458 	.word	0x24000458

0800d9fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800da08:	2300      	movs	r3, #0
 800da0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d06e      	beq.n	800daf0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800da12:	4b3a      	ldr	r3, [pc, #232]	; (800dafc <xTaskPriorityDisinherit+0x100>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d00a      	beq.n	800da32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800da1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da20:	f383 8811 	msr	BASEPRI, r3
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	60fb      	str	r3, [r7, #12]
}
 800da2e:	bf00      	nop
 800da30:	e7fe      	b.n	800da30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10a      	bne.n	800da50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	60bb      	str	r3, [r7, #8]
}
 800da4c:	bf00      	nop
 800da4e:	e7fe      	b.n	800da4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da54:	1e5a      	subs	r2, r3, #1
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da62:	429a      	cmp	r2, r3
 800da64:	d044      	beq.n	800daf0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d140      	bne.n	800daf0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	3304      	adds	r3, #4
 800da72:	4618      	mov	r0, r3
 800da74:	f7fe fb63 	bl	800c13e <uxListRemove>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d115      	bne.n	800daaa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da82:	491f      	ldr	r1, [pc, #124]	; (800db00 <xTaskPriorityDisinherit+0x104>)
 800da84:	4613      	mov	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	440b      	add	r3, r1
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d10a      	bne.n	800daaa <xTaskPriorityDisinherit+0xae>
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da98:	2201      	movs	r2, #1
 800da9a:	fa02 f303 	lsl.w	r3, r2, r3
 800da9e:	43da      	mvns	r2, r3
 800daa0:	4b18      	ldr	r3, [pc, #96]	; (800db04 <xTaskPriorityDisinherit+0x108>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4013      	ands	r3, r2
 800daa6:	4a17      	ldr	r2, [pc, #92]	; (800db04 <xTaskPriorityDisinherit+0x108>)
 800daa8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab6:	f1c3 0207 	rsb	r2, r3, #7
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac2:	2201      	movs	r2, #1
 800dac4:	409a      	lsls	r2, r3
 800dac6:	4b0f      	ldr	r3, [pc, #60]	; (800db04 <xTaskPriorityDisinherit+0x108>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4313      	orrs	r3, r2
 800dacc:	4a0d      	ldr	r2, [pc, #52]	; (800db04 <xTaskPriorityDisinherit+0x108>)
 800dace:	6013      	str	r3, [r2, #0]
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad4:	4613      	mov	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4413      	add	r3, r2
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	4a08      	ldr	r2, [pc, #32]	; (800db00 <xTaskPriorityDisinherit+0x104>)
 800dade:	441a      	add	r2, r3
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	3304      	adds	r3, #4
 800dae4:	4619      	mov	r1, r3
 800dae6:	4610      	mov	r0, r2
 800dae8:	f7fe facc 	bl	800c084 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800daec:	2301      	movs	r3, #1
 800daee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800daf0:	697b      	ldr	r3, [r7, #20]
	}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3718      	adds	r7, #24
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	24000350 	.word	0x24000350
 800db00:	24000354 	.word	0x24000354
 800db04:	24000458 	.word	0x24000458

0800db08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800db16:	2301      	movs	r3, #1
 800db18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d077      	beq.n	800dc10 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10a      	bne.n	800db3e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800db28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2c:	f383 8811 	msr	BASEPRI, r3
 800db30:	f3bf 8f6f 	isb	sy
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	60fb      	str	r3, [r7, #12]
}
 800db3a:	bf00      	nop
 800db3c:	e7fe      	b.n	800db3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db42:	683a      	ldr	r2, [r7, #0]
 800db44:	429a      	cmp	r2, r3
 800db46:	d902      	bls.n	800db4e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	61fb      	str	r3, [r7, #28]
 800db4c:	e002      	b.n	800db54 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db58:	69fa      	ldr	r2, [r7, #28]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d058      	beq.n	800dc10 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db62:	697a      	ldr	r2, [r7, #20]
 800db64:	429a      	cmp	r2, r3
 800db66:	d153      	bne.n	800dc10 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800db68:	4b2b      	ldr	r3, [pc, #172]	; (800dc18 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	69ba      	ldr	r2, [r7, #24]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d10a      	bne.n	800db88 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	60bb      	str	r3, [r7, #8]
}
 800db84:	bf00      	nop
 800db86:	e7fe      	b.n	800db86 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	69fa      	ldr	r2, [r7, #28]
 800db92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db94:	69bb      	ldr	r3, [r7, #24]
 800db96:	699b      	ldr	r3, [r3, #24]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	db04      	blt.n	800dba6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	f1c3 0207 	rsb	r2, r3, #7
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dba6:	69bb      	ldr	r3, [r7, #24]
 800dba8:	6959      	ldr	r1, [r3, #20]
 800dbaa:	693a      	ldr	r2, [r7, #16]
 800dbac:	4613      	mov	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4a19      	ldr	r2, [pc, #100]	; (800dc1c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dbb6:	4413      	add	r3, r2
 800dbb8:	4299      	cmp	r1, r3
 800dbba:	d129      	bne.n	800dc10 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7fe fabc 	bl	800c13e <uxListRemove>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d10a      	bne.n	800dbe2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	fa02 f303 	lsl.w	r3, r2, r3
 800dbd6:	43da      	mvns	r2, r3
 800dbd8:	4b11      	ldr	r3, [pc, #68]	; (800dc20 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4013      	ands	r3, r2
 800dbde:	4a10      	ldr	r2, [pc, #64]	; (800dc20 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dbe0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	409a      	lsls	r2, r3
 800dbea:	4b0d      	ldr	r3, [pc, #52]	; (800dc20 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	4a0b      	ldr	r2, [pc, #44]	; (800dc20 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dbf2:	6013      	str	r3, [r2, #0]
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4413      	add	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4a06      	ldr	r2, [pc, #24]	; (800dc1c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dc02:	441a      	add	r2, r3
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	3304      	adds	r3, #4
 800dc08:	4619      	mov	r1, r3
 800dc0a:	4610      	mov	r0, r2
 800dc0c:	f7fe fa3a 	bl	800c084 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc10:	bf00      	nop
 800dc12:	3720      	adds	r7, #32
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	24000350 	.word	0x24000350
 800dc1c:	24000354 	.word	0x24000354
 800dc20:	24000458 	.word	0x24000458

0800dc24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dc24:	b480      	push	{r7}
 800dc26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dc28:	4b07      	ldr	r3, [pc, #28]	; (800dc48 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d004      	beq.n	800dc3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dc30:	4b05      	ldr	r3, [pc, #20]	; (800dc48 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc36:	3201      	adds	r2, #1
 800dc38:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800dc3a:	4b03      	ldr	r3, [pc, #12]	; (800dc48 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
	}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr
 800dc48:	24000350 	.word	0x24000350

0800dc4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc56:	4b29      	ldr	r3, [pc, #164]	; (800dcfc <prvAddCurrentTaskToDelayedList+0xb0>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc5c:	4b28      	ldr	r3, [pc, #160]	; (800dd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	3304      	adds	r3, #4
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fe fa6b 	bl	800c13e <uxListRemove>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d10b      	bne.n	800dc86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dc6e:	4b24      	ldr	r3, [pc, #144]	; (800dd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc74:	2201      	movs	r2, #1
 800dc76:	fa02 f303 	lsl.w	r3, r2, r3
 800dc7a:	43da      	mvns	r2, r3
 800dc7c:	4b21      	ldr	r3, [pc, #132]	; (800dd04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4013      	ands	r3, r2
 800dc82:	4a20      	ldr	r2, [pc, #128]	; (800dd04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc8c:	d10a      	bne.n	800dca4 <prvAddCurrentTaskToDelayedList+0x58>
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d007      	beq.n	800dca4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc94:	4b1a      	ldr	r3, [pc, #104]	; (800dd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3304      	adds	r3, #4
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	481a      	ldr	r0, [pc, #104]	; (800dd08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dc9e:	f7fe f9f1 	bl	800c084 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dca2:	e026      	b.n	800dcf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dca4:	68fa      	ldr	r2, [r7, #12]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4413      	add	r3, r2
 800dcaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dcac:	4b14      	ldr	r3, [pc, #80]	; (800dd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	68ba      	ldr	r2, [r7, #8]
 800dcb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dcb4:	68ba      	ldr	r2, [r7, #8]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d209      	bcs.n	800dcd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcbc:	4b13      	ldr	r3, [pc, #76]	; (800dd0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	4b0f      	ldr	r3, [pc, #60]	; (800dd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	3304      	adds	r3, #4
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	4610      	mov	r0, r2
 800dcca:	f7fe f9ff 	bl	800c0cc <vListInsert>
}
 800dcce:	e010      	b.n	800dcf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcd0:	4b0f      	ldr	r3, [pc, #60]	; (800dd10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	4b0a      	ldr	r3, [pc, #40]	; (800dd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3304      	adds	r3, #4
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4610      	mov	r0, r2
 800dcde:	f7fe f9f5 	bl	800c0cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dce2:	4b0c      	ldr	r3, [pc, #48]	; (800dd14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d202      	bcs.n	800dcf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dcec:	4a09      	ldr	r2, [pc, #36]	; (800dd14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	6013      	str	r3, [r2, #0]
}
 800dcf2:	bf00      	nop
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	24000454 	.word	0x24000454
 800dd00:	24000350 	.word	0x24000350
 800dd04:	24000458 	.word	0x24000458
 800dd08:	2400043c 	.word	0x2400043c
 800dd0c:	2400040c 	.word	0x2400040c
 800dd10:	24000408 	.word	0x24000408
 800dd14:	24000470 	.word	0x24000470

0800dd18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	3b04      	subs	r3, #4
 800dd28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dd30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	3b04      	subs	r3, #4
 800dd36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	f023 0201 	bic.w	r2, r3, #1
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	3b04      	subs	r3, #4
 800dd46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd48:	4a0c      	ldr	r2, [pc, #48]	; (800dd7c <pxPortInitialiseStack+0x64>)
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	3b14      	subs	r3, #20
 800dd52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	3b04      	subs	r3, #4
 800dd5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f06f 0202 	mvn.w	r2, #2
 800dd66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3b20      	subs	r3, #32
 800dd6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3714      	adds	r7, #20
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr
 800dd7c:	0800dd81 	.word	0x0800dd81

0800dd80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd86:	2300      	movs	r3, #0
 800dd88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd8a:	4b12      	ldr	r3, [pc, #72]	; (800ddd4 <prvTaskExitError+0x54>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd92:	d00a      	beq.n	800ddaa <prvTaskExitError+0x2a>
	__asm volatile
 800dd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	60fb      	str	r3, [r7, #12]
}
 800dda6:	bf00      	nop
 800dda8:	e7fe      	b.n	800dda8 <prvTaskExitError+0x28>
	__asm volatile
 800ddaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	60bb      	str	r3, [r7, #8]
}
 800ddbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ddbe:	bf00      	nop
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d0fc      	beq.n	800ddc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ddc6:	bf00      	nop
 800ddc8:	bf00      	nop
 800ddca:	3714      	adds	r7, #20
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr
 800ddd4:	24000010 	.word	0x24000010
	...

0800dde0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dde0:	4b07      	ldr	r3, [pc, #28]	; (800de00 <pxCurrentTCBConst2>)
 800dde2:	6819      	ldr	r1, [r3, #0]
 800dde4:	6808      	ldr	r0, [r1, #0]
 800dde6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddea:	f380 8809 	msr	PSP, r0
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f04f 0000 	mov.w	r0, #0
 800ddf6:	f380 8811 	msr	BASEPRI, r0
 800ddfa:	4770      	bx	lr
 800ddfc:	f3af 8000 	nop.w

0800de00 <pxCurrentTCBConst2>:
 800de00:	24000350 	.word	0x24000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de04:	bf00      	nop
 800de06:	bf00      	nop

0800de08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de08:	4808      	ldr	r0, [pc, #32]	; (800de2c <prvPortStartFirstTask+0x24>)
 800de0a:	6800      	ldr	r0, [r0, #0]
 800de0c:	6800      	ldr	r0, [r0, #0]
 800de0e:	f380 8808 	msr	MSP, r0
 800de12:	f04f 0000 	mov.w	r0, #0
 800de16:	f380 8814 	msr	CONTROL, r0
 800de1a:	b662      	cpsie	i
 800de1c:	b661      	cpsie	f
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	df00      	svc	0
 800de28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de2a:	bf00      	nop
 800de2c:	e000ed08 	.word	0xe000ed08

0800de30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800de36:	4b46      	ldr	r3, [pc, #280]	; (800df50 <xPortStartScheduler+0x120>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a46      	ldr	r2, [pc, #280]	; (800df54 <xPortStartScheduler+0x124>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d10a      	bne.n	800de56 <xPortStartScheduler+0x26>
	__asm volatile
 800de40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de44:	f383 8811 	msr	BASEPRI, r3
 800de48:	f3bf 8f6f 	isb	sy
 800de4c:	f3bf 8f4f 	dsb	sy
 800de50:	613b      	str	r3, [r7, #16]
}
 800de52:	bf00      	nop
 800de54:	e7fe      	b.n	800de54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de56:	4b3e      	ldr	r3, [pc, #248]	; (800df50 <xPortStartScheduler+0x120>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4a3f      	ldr	r2, [pc, #252]	; (800df58 <xPortStartScheduler+0x128>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d10a      	bne.n	800de76 <xPortStartScheduler+0x46>
	__asm volatile
 800de60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de64:	f383 8811 	msr	BASEPRI, r3
 800de68:	f3bf 8f6f 	isb	sy
 800de6c:	f3bf 8f4f 	dsb	sy
 800de70:	60fb      	str	r3, [r7, #12]
}
 800de72:	bf00      	nop
 800de74:	e7fe      	b.n	800de74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de76:	4b39      	ldr	r3, [pc, #228]	; (800df5c <xPortStartScheduler+0x12c>)
 800de78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	22ff      	movs	r2, #255	; 0xff
 800de86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de90:	78fb      	ldrb	r3, [r7, #3]
 800de92:	b2db      	uxtb	r3, r3
 800de94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	4b31      	ldr	r3, [pc, #196]	; (800df60 <xPortStartScheduler+0x130>)
 800de9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de9e:	4b31      	ldr	r3, [pc, #196]	; (800df64 <xPortStartScheduler+0x134>)
 800dea0:	2207      	movs	r2, #7
 800dea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dea4:	e009      	b.n	800deba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dea6:	4b2f      	ldr	r3, [pc, #188]	; (800df64 <xPortStartScheduler+0x134>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	3b01      	subs	r3, #1
 800deac:	4a2d      	ldr	r2, [pc, #180]	; (800df64 <xPortStartScheduler+0x134>)
 800deae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800deb0:	78fb      	ldrb	r3, [r7, #3]
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	005b      	lsls	r3, r3, #1
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800deba:	78fb      	ldrb	r3, [r7, #3]
 800debc:	b2db      	uxtb	r3, r3
 800debe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dec2:	2b80      	cmp	r3, #128	; 0x80
 800dec4:	d0ef      	beq.n	800dea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dec6:	4b27      	ldr	r3, [pc, #156]	; (800df64 <xPortStartScheduler+0x134>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f1c3 0307 	rsb	r3, r3, #7
 800dece:	2b04      	cmp	r3, #4
 800ded0:	d00a      	beq.n	800dee8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	60bb      	str	r3, [r7, #8]
}
 800dee4:	bf00      	nop
 800dee6:	e7fe      	b.n	800dee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dee8:	4b1e      	ldr	r3, [pc, #120]	; (800df64 <xPortStartScheduler+0x134>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	021b      	lsls	r3, r3, #8
 800deee:	4a1d      	ldr	r2, [pc, #116]	; (800df64 <xPortStartScheduler+0x134>)
 800def0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800def2:	4b1c      	ldr	r3, [pc, #112]	; (800df64 <xPortStartScheduler+0x134>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800defa:	4a1a      	ldr	r2, [pc, #104]	; (800df64 <xPortStartScheduler+0x134>)
 800defc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	b2da      	uxtb	r2, r3
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df06:	4b18      	ldr	r3, [pc, #96]	; (800df68 <xPortStartScheduler+0x138>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a17      	ldr	r2, [pc, #92]	; (800df68 <xPortStartScheduler+0x138>)
 800df0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800df10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df12:	4b15      	ldr	r3, [pc, #84]	; (800df68 <xPortStartScheduler+0x138>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a14      	ldr	r2, [pc, #80]	; (800df68 <xPortStartScheduler+0x138>)
 800df18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800df1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df1e:	f000 f8dd 	bl	800e0dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df22:	4b12      	ldr	r3, [pc, #72]	; (800df6c <xPortStartScheduler+0x13c>)
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800df28:	f000 f8fc 	bl	800e124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800df2c:	4b10      	ldr	r3, [pc, #64]	; (800df70 <xPortStartScheduler+0x140>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a0f      	ldr	r2, [pc, #60]	; (800df70 <xPortStartScheduler+0x140>)
 800df32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800df36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800df38:	f7ff ff66 	bl	800de08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800df3c:	f7ff fa8e 	bl	800d45c <vTaskSwitchContext>
	prvTaskExitError();
 800df40:	f7ff ff1e 	bl	800dd80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	e000ed00 	.word	0xe000ed00
 800df54:	410fc271 	.word	0x410fc271
 800df58:	410fc270 	.word	0x410fc270
 800df5c:	e000e400 	.word	0xe000e400
 800df60:	2400047c 	.word	0x2400047c
 800df64:	24000480 	.word	0x24000480
 800df68:	e000ed20 	.word	0xe000ed20
 800df6c:	24000010 	.word	0x24000010
 800df70:	e000ef34 	.word	0xe000ef34

0800df74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
	__asm volatile
 800df7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7e:	f383 8811 	msr	BASEPRI, r3
 800df82:	f3bf 8f6f 	isb	sy
 800df86:	f3bf 8f4f 	dsb	sy
 800df8a:	607b      	str	r3, [r7, #4]
}
 800df8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df8e:	4b0f      	ldr	r3, [pc, #60]	; (800dfcc <vPortEnterCritical+0x58>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	3301      	adds	r3, #1
 800df94:	4a0d      	ldr	r2, [pc, #52]	; (800dfcc <vPortEnterCritical+0x58>)
 800df96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df98:	4b0c      	ldr	r3, [pc, #48]	; (800dfcc <vPortEnterCritical+0x58>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d10f      	bne.n	800dfc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dfa0:	4b0b      	ldr	r3, [pc, #44]	; (800dfd0 <vPortEnterCritical+0x5c>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00a      	beq.n	800dfc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfae:	f383 8811 	msr	BASEPRI, r3
 800dfb2:	f3bf 8f6f 	isb	sy
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	603b      	str	r3, [r7, #0]
}
 800dfbc:	bf00      	nop
 800dfbe:	e7fe      	b.n	800dfbe <vPortEnterCritical+0x4a>
	}
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr
 800dfcc:	24000010 	.word	0x24000010
 800dfd0:	e000ed04 	.word	0xe000ed04

0800dfd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b083      	sub	sp, #12
 800dfd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dfda:	4b12      	ldr	r3, [pc, #72]	; (800e024 <vPortExitCritical+0x50>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10a      	bne.n	800dff8 <vPortExitCritical+0x24>
	__asm volatile
 800dfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	607b      	str	r3, [r7, #4]
}
 800dff4:	bf00      	nop
 800dff6:	e7fe      	b.n	800dff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dff8:	4b0a      	ldr	r3, [pc, #40]	; (800e024 <vPortExitCritical+0x50>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	3b01      	subs	r3, #1
 800dffe:	4a09      	ldr	r2, [pc, #36]	; (800e024 <vPortExitCritical+0x50>)
 800e000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e002:	4b08      	ldr	r3, [pc, #32]	; (800e024 <vPortExitCritical+0x50>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d105      	bne.n	800e016 <vPortExitCritical+0x42>
 800e00a:	2300      	movs	r3, #0
 800e00c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	f383 8811 	msr	BASEPRI, r3
}
 800e014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e016:	bf00      	nop
 800e018:	370c      	adds	r7, #12
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	24000010 	.word	0x24000010
	...

0800e030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e030:	f3ef 8009 	mrs	r0, PSP
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	4b15      	ldr	r3, [pc, #84]	; (800e090 <pxCurrentTCBConst>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	f01e 0f10 	tst.w	lr, #16
 800e040:	bf08      	it	eq
 800e042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04a:	6010      	str	r0, [r2, #0]
 800e04c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e050:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e054:	f380 8811 	msr	BASEPRI, r0
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	f3bf 8f6f 	isb	sy
 800e060:	f7ff f9fc 	bl	800d45c <vTaskSwitchContext>
 800e064:	f04f 0000 	mov.w	r0, #0
 800e068:	f380 8811 	msr	BASEPRI, r0
 800e06c:	bc09      	pop	{r0, r3}
 800e06e:	6819      	ldr	r1, [r3, #0]
 800e070:	6808      	ldr	r0, [r1, #0]
 800e072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e076:	f01e 0f10 	tst.w	lr, #16
 800e07a:	bf08      	it	eq
 800e07c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e080:	f380 8809 	msr	PSP, r0
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	f3af 8000 	nop.w

0800e090 <pxCurrentTCBConst>:
 800e090:	24000350 	.word	0x24000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e094:	bf00      	nop
 800e096:	bf00      	nop

0800e098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
	__asm volatile
 800e09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a2:	f383 8811 	msr	BASEPRI, r3
 800e0a6:	f3bf 8f6f 	isb	sy
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	607b      	str	r3, [r7, #4]
}
 800e0b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e0b2:	f7ff f91b 	bl	800d2ec <xTaskIncrementTick>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d003      	beq.n	800e0c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e0bc:	4b06      	ldr	r3, [pc, #24]	; (800e0d8 <SysTick_Handler+0x40>)
 800e0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	f383 8811 	msr	BASEPRI, r3
}
 800e0ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e0d0:	bf00      	nop
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	e000ed04 	.word	0xe000ed04

0800e0dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e0dc:	b480      	push	{r7}
 800e0de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0e0:	4b0b      	ldr	r3, [pc, #44]	; (800e110 <vPortSetupTimerInterrupt+0x34>)
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e0e6:	4b0b      	ldr	r3, [pc, #44]	; (800e114 <vPortSetupTimerInterrupt+0x38>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0ec:	4b0a      	ldr	r3, [pc, #40]	; (800e118 <vPortSetupTimerInterrupt+0x3c>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a0a      	ldr	r2, [pc, #40]	; (800e11c <vPortSetupTimerInterrupt+0x40>)
 800e0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0f6:	099b      	lsrs	r3, r3, #6
 800e0f8:	4a09      	ldr	r2, [pc, #36]	; (800e120 <vPortSetupTimerInterrupt+0x44>)
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0fe:	4b04      	ldr	r3, [pc, #16]	; (800e110 <vPortSetupTimerInterrupt+0x34>)
 800e100:	2207      	movs	r2, #7
 800e102:	601a      	str	r2, [r3, #0]
}
 800e104:	bf00      	nop
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	e000e010 	.word	0xe000e010
 800e114:	e000e018 	.word	0xe000e018
 800e118:	24000000 	.word	0x24000000
 800e11c:	10624dd3 	.word	0x10624dd3
 800e120:	e000e014 	.word	0xe000e014

0800e124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e134 <vPortEnableVFP+0x10>
 800e128:	6801      	ldr	r1, [r0, #0]
 800e12a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e12e:	6001      	str	r1, [r0, #0]
 800e130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e132:	bf00      	nop
 800e134:	e000ed88 	.word	0xe000ed88

0800e138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e13e:	f3ef 8305 	mrs	r3, IPSR
 800e142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2b0f      	cmp	r3, #15
 800e148:	d914      	bls.n	800e174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e14a:	4a17      	ldr	r2, [pc, #92]	; (800e1a8 <vPortValidateInterruptPriority+0x70>)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	4413      	add	r3, r2
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e154:	4b15      	ldr	r3, [pc, #84]	; (800e1ac <vPortValidateInterruptPriority+0x74>)
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	7afa      	ldrb	r2, [r7, #11]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d20a      	bcs.n	800e174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e162:	f383 8811 	msr	BASEPRI, r3
 800e166:	f3bf 8f6f 	isb	sy
 800e16a:	f3bf 8f4f 	dsb	sy
 800e16e:	607b      	str	r3, [r7, #4]
}
 800e170:	bf00      	nop
 800e172:	e7fe      	b.n	800e172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e174:	4b0e      	ldr	r3, [pc, #56]	; (800e1b0 <vPortValidateInterruptPriority+0x78>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e17c:	4b0d      	ldr	r3, [pc, #52]	; (800e1b4 <vPortValidateInterruptPriority+0x7c>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	429a      	cmp	r2, r3
 800e182:	d90a      	bls.n	800e19a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	603b      	str	r3, [r7, #0]
}
 800e196:	bf00      	nop
 800e198:	e7fe      	b.n	800e198 <vPortValidateInterruptPriority+0x60>
	}
 800e19a:	bf00      	nop
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	e000e3f0 	.word	0xe000e3f0
 800e1ac:	2400047c 	.word	0x2400047c
 800e1b0:	e000ed0c 	.word	0xe000ed0c
 800e1b4:	24000480 	.word	0x24000480

0800e1b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b08a      	sub	sp, #40	; 0x28
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e1c4:	f7fe ffe8 	bl	800d198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e1c8:	4b5b      	ldr	r3, [pc, #364]	; (800e338 <pvPortMalloc+0x180>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e1d0:	f000 f920 	bl	800e414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e1d4:	4b59      	ldr	r3, [pc, #356]	; (800e33c <pvPortMalloc+0x184>)
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4013      	ands	r3, r2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f040 8093 	bne.w	800e308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d01d      	beq.n	800e224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e1e8:	2208      	movs	r2, #8
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f003 0307 	and.w	r3, r3, #7
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d014      	beq.n	800e224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f023 0307 	bic.w	r3, r3, #7
 800e200:	3308      	adds	r3, #8
 800e202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f003 0307 	and.w	r3, r3, #7
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00a      	beq.n	800e224 <pvPortMalloc+0x6c>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	617b      	str	r3, [r7, #20]
}
 800e220:	bf00      	nop
 800e222:	e7fe      	b.n	800e222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d06e      	beq.n	800e308 <pvPortMalloc+0x150>
 800e22a:	4b45      	ldr	r3, [pc, #276]	; (800e340 <pvPortMalloc+0x188>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	429a      	cmp	r2, r3
 800e232:	d869      	bhi.n	800e308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e234:	4b43      	ldr	r3, [pc, #268]	; (800e344 <pvPortMalloc+0x18c>)
 800e236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e238:	4b42      	ldr	r3, [pc, #264]	; (800e344 <pvPortMalloc+0x18c>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e23e:	e004      	b.n	800e24a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	429a      	cmp	r2, r3
 800e252:	d903      	bls.n	800e25c <pvPortMalloc+0xa4>
 800e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1f1      	bne.n	800e240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e25c:	4b36      	ldr	r3, [pc, #216]	; (800e338 <pvPortMalloc+0x180>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e262:	429a      	cmp	r2, r3
 800e264:	d050      	beq.n	800e308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e266:	6a3b      	ldr	r3, [r7, #32]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2208      	movs	r2, #8
 800e26c:	4413      	add	r3, r2
 800e26e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	6a3b      	ldr	r3, [r7, #32]
 800e276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	1ad2      	subs	r2, r2, r3
 800e280:	2308      	movs	r3, #8
 800e282:	005b      	lsls	r3, r3, #1
 800e284:	429a      	cmp	r2, r3
 800e286:	d91f      	bls.n	800e2c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4413      	add	r3, r2
 800e28e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	f003 0307 	and.w	r3, r3, #7
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00a      	beq.n	800e2b0 <pvPortMalloc+0xf8>
	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	613b      	str	r3, [r7, #16]
}
 800e2ac:	bf00      	nop
 800e2ae:	e7fe      	b.n	800e2ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b2:	685a      	ldr	r2, [r3, #4]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	1ad2      	subs	r2, r2, r3
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e2c2:	69b8      	ldr	r0, [r7, #24]
 800e2c4:	f000 f908 	bl	800e4d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2c8:	4b1d      	ldr	r3, [pc, #116]	; (800e340 <pvPortMalloc+0x188>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	4a1b      	ldr	r2, [pc, #108]	; (800e340 <pvPortMalloc+0x188>)
 800e2d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2d6:	4b1a      	ldr	r3, [pc, #104]	; (800e340 <pvPortMalloc+0x188>)
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	4b1b      	ldr	r3, [pc, #108]	; (800e348 <pvPortMalloc+0x190>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d203      	bcs.n	800e2ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2e2:	4b17      	ldr	r3, [pc, #92]	; (800e340 <pvPortMalloc+0x188>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a18      	ldr	r2, [pc, #96]	; (800e348 <pvPortMalloc+0x190>)
 800e2e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	685a      	ldr	r2, [r3, #4]
 800e2ee:	4b13      	ldr	r3, [pc, #76]	; (800e33c <pvPortMalloc+0x184>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	431a      	orrs	r2, r3
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e2fe:	4b13      	ldr	r3, [pc, #76]	; (800e34c <pvPortMalloc+0x194>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	3301      	adds	r3, #1
 800e304:	4a11      	ldr	r2, [pc, #68]	; (800e34c <pvPortMalloc+0x194>)
 800e306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e308:	f7fe ff54 	bl	800d1b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	f003 0307 	and.w	r3, r3, #7
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00a      	beq.n	800e32c <pvPortMalloc+0x174>
	__asm volatile
 800e316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31a:	f383 8811 	msr	BASEPRI, r3
 800e31e:	f3bf 8f6f 	isb	sy
 800e322:	f3bf 8f4f 	dsb	sy
 800e326:	60fb      	str	r3, [r7, #12]
}
 800e328:	bf00      	nop
 800e32a:	e7fe      	b.n	800e32a <pvPortMalloc+0x172>
	return pvReturn;
 800e32c:	69fb      	ldr	r3, [r7, #28]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3728      	adds	r7, #40	; 0x28
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	2400408c 	.word	0x2400408c
 800e33c:	240040a0 	.word	0x240040a0
 800e340:	24004090 	.word	0x24004090
 800e344:	24004084 	.word	0x24004084
 800e348:	24004094 	.word	0x24004094
 800e34c:	24004098 	.word	0x24004098

0800e350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b086      	sub	sp, #24
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d04d      	beq.n	800e3fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e362:	2308      	movs	r3, #8
 800e364:	425b      	negs	r3, r3
 800e366:	697a      	ldr	r2, [r7, #20]
 800e368:	4413      	add	r3, r2
 800e36a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	685a      	ldr	r2, [r3, #4]
 800e374:	4b24      	ldr	r3, [pc, #144]	; (800e408 <vPortFree+0xb8>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4013      	ands	r3, r2
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d10a      	bne.n	800e394 <vPortFree+0x44>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	60fb      	str	r3, [r7, #12]
}
 800e390:	bf00      	nop
 800e392:	e7fe      	b.n	800e392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00a      	beq.n	800e3b2 <vPortFree+0x62>
	__asm volatile
 800e39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a0:	f383 8811 	msr	BASEPRI, r3
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	f3bf 8f4f 	dsb	sy
 800e3ac:	60bb      	str	r3, [r7, #8]
}
 800e3ae:	bf00      	nop
 800e3b0:	e7fe      	b.n	800e3b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	4b14      	ldr	r3, [pc, #80]	; (800e408 <vPortFree+0xb8>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4013      	ands	r3, r2
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d01e      	beq.n	800e3fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d11a      	bne.n	800e3fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	685a      	ldr	r2, [r3, #4]
 800e3cc:	4b0e      	ldr	r3, [pc, #56]	; (800e408 <vPortFree+0xb8>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	43db      	mvns	r3, r3
 800e3d2:	401a      	ands	r2, r3
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e3d8:	f7fe fede 	bl	800d198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	685a      	ldr	r2, [r3, #4]
 800e3e0:	4b0a      	ldr	r3, [pc, #40]	; (800e40c <vPortFree+0xbc>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	4a09      	ldr	r2, [pc, #36]	; (800e40c <vPortFree+0xbc>)
 800e3e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3ea:	6938      	ldr	r0, [r7, #16]
 800e3ec:	f000 f874 	bl	800e4d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e3f0:	4b07      	ldr	r3, [pc, #28]	; (800e410 <vPortFree+0xc0>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	4a06      	ldr	r2, [pc, #24]	; (800e410 <vPortFree+0xc0>)
 800e3f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e3fa:	f7fe fedb 	bl	800d1b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e3fe:	bf00      	nop
 800e400:	3718      	adds	r7, #24
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	240040a0 	.word	0x240040a0
 800e40c:	24004090 	.word	0x24004090
 800e410:	2400409c 	.word	0x2400409c

0800e414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e41a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e41e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e420:	4b27      	ldr	r3, [pc, #156]	; (800e4c0 <prvHeapInit+0xac>)
 800e422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f003 0307 	and.w	r3, r3, #7
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00c      	beq.n	800e448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	3307      	adds	r3, #7
 800e432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f023 0307 	bic.w	r3, r3, #7
 800e43a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e43c:	68ba      	ldr	r2, [r7, #8]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	4a1f      	ldr	r2, [pc, #124]	; (800e4c0 <prvHeapInit+0xac>)
 800e444:	4413      	add	r3, r2
 800e446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e44c:	4a1d      	ldr	r2, [pc, #116]	; (800e4c4 <prvHeapInit+0xb0>)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e452:	4b1c      	ldr	r3, [pc, #112]	; (800e4c4 <prvHeapInit+0xb0>)
 800e454:	2200      	movs	r2, #0
 800e456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	68ba      	ldr	r2, [r7, #8]
 800e45c:	4413      	add	r3, r2
 800e45e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e460:	2208      	movs	r2, #8
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	1a9b      	subs	r3, r3, r2
 800e466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f023 0307 	bic.w	r3, r3, #7
 800e46e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	4a15      	ldr	r2, [pc, #84]	; (800e4c8 <prvHeapInit+0xb4>)
 800e474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e476:	4b14      	ldr	r3, [pc, #80]	; (800e4c8 <prvHeapInit+0xb4>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2200      	movs	r2, #0
 800e47c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e47e:	4b12      	ldr	r3, [pc, #72]	; (800e4c8 <prvHeapInit+0xb4>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2200      	movs	r2, #0
 800e484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	1ad2      	subs	r2, r2, r3
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e494:	4b0c      	ldr	r3, [pc, #48]	; (800e4c8 <prvHeapInit+0xb4>)
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	4a0a      	ldr	r2, [pc, #40]	; (800e4cc <prvHeapInit+0xb8>)
 800e4a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	4a09      	ldr	r2, [pc, #36]	; (800e4d0 <prvHeapInit+0xbc>)
 800e4aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e4ac:	4b09      	ldr	r3, [pc, #36]	; (800e4d4 <prvHeapInit+0xc0>)
 800e4ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e4b2:	601a      	str	r2, [r3, #0]
}
 800e4b4:	bf00      	nop
 800e4b6:	3714      	adds	r7, #20
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	24000484 	.word	0x24000484
 800e4c4:	24004084 	.word	0x24004084
 800e4c8:	2400408c 	.word	0x2400408c
 800e4cc:	24004094 	.word	0x24004094
 800e4d0:	24004090 	.word	0x24004090
 800e4d4:	240040a0 	.word	0x240040a0

0800e4d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4e0:	4b28      	ldr	r3, [pc, #160]	; (800e584 <prvInsertBlockIntoFreeList+0xac>)
 800e4e2:	60fb      	str	r3, [r7, #12]
 800e4e4:	e002      	b.n	800e4ec <prvInsertBlockIntoFreeList+0x14>
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	60fb      	str	r3, [r7, #12]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d8f7      	bhi.n	800e4e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	68ba      	ldr	r2, [r7, #8]
 800e500:	4413      	add	r3, r2
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	429a      	cmp	r2, r3
 800e506:	d108      	bne.n	800e51a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	685a      	ldr	r2, [r3, #4]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	441a      	add	r2, r3
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	441a      	add	r2, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d118      	bne.n	800e560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681a      	ldr	r2, [r3, #0]
 800e532:	4b15      	ldr	r3, [pc, #84]	; (800e588 <prvInsertBlockIntoFreeList+0xb0>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	429a      	cmp	r2, r3
 800e538:	d00d      	beq.n	800e556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	685a      	ldr	r2, [r3, #4]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	441a      	add	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	601a      	str	r2, [r3, #0]
 800e554:	e008      	b.n	800e568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e556:	4b0c      	ldr	r3, [pc, #48]	; (800e588 <prvInsertBlockIntoFreeList+0xb0>)
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	601a      	str	r2, [r3, #0]
 800e55e:	e003      	b.n	800e568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e568:	68fa      	ldr	r2, [r7, #12]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d002      	beq.n	800e576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e576:	bf00      	nop
 800e578:	3714      	adds	r7, #20
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	24004084 	.word	0x24004084
 800e588:	2400408c 	.word	0x2400408c

0800e58c <__libc_init_array>:
 800e58c:	b570      	push	{r4, r5, r6, lr}
 800e58e:	4d0d      	ldr	r5, [pc, #52]	; (800e5c4 <__libc_init_array+0x38>)
 800e590:	4c0d      	ldr	r4, [pc, #52]	; (800e5c8 <__libc_init_array+0x3c>)
 800e592:	1b64      	subs	r4, r4, r5
 800e594:	10a4      	asrs	r4, r4, #2
 800e596:	2600      	movs	r6, #0
 800e598:	42a6      	cmp	r6, r4
 800e59a:	d109      	bne.n	800e5b0 <__libc_init_array+0x24>
 800e59c:	4d0b      	ldr	r5, [pc, #44]	; (800e5cc <__libc_init_array+0x40>)
 800e59e:	4c0c      	ldr	r4, [pc, #48]	; (800e5d0 <__libc_init_array+0x44>)
 800e5a0:	f000 f82e 	bl	800e600 <_init>
 800e5a4:	1b64      	subs	r4, r4, r5
 800e5a6:	10a4      	asrs	r4, r4, #2
 800e5a8:	2600      	movs	r6, #0
 800e5aa:	42a6      	cmp	r6, r4
 800e5ac:	d105      	bne.n	800e5ba <__libc_init_array+0x2e>
 800e5ae:	bd70      	pop	{r4, r5, r6, pc}
 800e5b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5b4:	4798      	blx	r3
 800e5b6:	3601      	adds	r6, #1
 800e5b8:	e7ee      	b.n	800e598 <__libc_init_array+0xc>
 800e5ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5be:	4798      	blx	r3
 800e5c0:	3601      	adds	r6, #1
 800e5c2:	e7f2      	b.n	800e5aa <__libc_init_array+0x1e>
 800e5c4:	0800e888 	.word	0x0800e888
 800e5c8:	0800e888 	.word	0x0800e888
 800e5cc:	0800e888 	.word	0x0800e888
 800e5d0:	0800e88c 	.word	0x0800e88c

0800e5d4 <memcpy>:
 800e5d4:	440a      	add	r2, r1
 800e5d6:	4291      	cmp	r1, r2
 800e5d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5dc:	d100      	bne.n	800e5e0 <memcpy+0xc>
 800e5de:	4770      	bx	lr
 800e5e0:	b510      	push	{r4, lr}
 800e5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5ea:	4291      	cmp	r1, r2
 800e5ec:	d1f9      	bne.n	800e5e2 <memcpy+0xe>
 800e5ee:	bd10      	pop	{r4, pc}

0800e5f0 <memset>:
 800e5f0:	4402      	add	r2, r0
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d100      	bne.n	800e5fa <memset+0xa>
 800e5f8:	4770      	bx	lr
 800e5fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e5fe:	e7f9      	b.n	800e5f4 <memset+0x4>

0800e600 <_init>:
 800e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e602:	bf00      	nop
 800e604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e606:	bc08      	pop	{r3}
 800e608:	469e      	mov	lr, r3
 800e60a:	4770      	bx	lr

0800e60c <_fini>:
 800e60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60e:	bf00      	nop
 800e610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e612:	bc08      	pop	{r3}
 800e614:	469e      	mov	lr, r3
 800e616:	4770      	bx	lr
