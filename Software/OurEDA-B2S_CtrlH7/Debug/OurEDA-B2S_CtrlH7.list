
OurEDA-B2S_CtrlH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8d8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800eb78  0800eb78  0001eb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ee00  0800ee00  0001ee00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ee08  0800ee08  0001ee08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ee0c  0800ee0c  0001ee0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  24000000  0800ee10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009960  24000034  0800ee44  00020034  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24009994  0800ee44  00029994  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031977  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050cc  00000000  00000000  000519d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001830  00000000  00000000  00056aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001688  00000000  00000000  000582d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a89a  00000000  00000000  00059960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000217c3  00000000  00000000  000941fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016fb1b  00000000  00000000  000b59bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002254d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000644c  00000000  00000000  0022552c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000034 	.word	0x24000034
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800eb60 	.word	0x0800eb60

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000038 	.word	0x24000038
 80002dc:	0800eb60 	.word	0x0800eb60

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005de:	4b39      	ldr	r3, [pc, #228]	; (80006c4 <MX_DMA_Init+0xec>)
 80005e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005e4:	4a37      	ldr	r2, [pc, #220]	; (80006c4 <MX_DMA_Init+0xec>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80005ee:	4b35      	ldr	r3, [pc, #212]	; (80006c4 <MX_DMA_Init+0xec>)
 80005f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005fc:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <MX_DMA_Init+0xec>)
 80005fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000602:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <MX_DMA_Init+0xec>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MX_DMA_Init+0xec>)
 800060e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	200b      	movs	r0, #11
 8000620:	f002 fd02 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000624:	200b      	movs	r0, #11
 8000626:	f002 fd19 	bl	800305c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2105      	movs	r1, #5
 800062e:	200c      	movs	r0, #12
 8000630:	f002 fcfa 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000634:	200c      	movs	r0, #12
 8000636:	f002 fd11 	bl	800305c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2105      	movs	r1, #5
 800063e:	200d      	movs	r0, #13
 8000640:	f002 fcf2 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000644:	200d      	movs	r0, #13
 8000646:	f002 fd09 	bl	800305c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2105      	movs	r1, #5
 800064e:	200e      	movs	r0, #14
 8000650:	f002 fcea 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000654:	200e      	movs	r0, #14
 8000656:	f002 fd01 	bl	800305c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2105      	movs	r1, #5
 800065e:	200f      	movs	r0, #15
 8000660:	f002 fce2 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000664:	200f      	movs	r0, #15
 8000666:	f002 fcf9 	bl	800305c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2105      	movs	r1, #5
 800066e:	2010      	movs	r0, #16
 8000670:	f002 fcda 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000674:	2010      	movs	r0, #16
 8000676:	f002 fcf1 	bl	800305c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2105      	movs	r1, #5
 800067e:	202f      	movs	r0, #47	; 0x2f
 8000680:	f002 fcd2 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000684:	202f      	movs	r0, #47	; 0x2f
 8000686:	f002 fce9 	bl	800305c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2105      	movs	r1, #5
 800068e:	2038      	movs	r0, #56	; 0x38
 8000690:	f002 fcca 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000694:	2038      	movs	r0, #56	; 0x38
 8000696:	f002 fce1 	bl	800305c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2105      	movs	r1, #5
 800069e:	2039      	movs	r0, #57	; 0x39
 80006a0:	f002 fcc2 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80006a4:	2039      	movs	r0, #57	; 0x39
 80006a6:	f002 fcd9 	bl	800305c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	203a      	movs	r0, #58	; 0x3a
 80006b0:	f002 fcba 	bl	8003028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006b4:	203a      	movs	r0, #58	; 0x3a
 80006b6:	f002 fcd1 	bl	800305c <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	58024400 	.word	0x58024400

080006c8 <OpenWrt_Delay>:

void Thread_CatchRptEntry(void const *argument);
void Thread_CatchCmdEntry(void const *argument);

static void OpenWrt_Delay(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 60; i++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	e00f      	b.n	80006f4 <OpenWrt_Delay+0x2c>
	{
		for (int j = 0; j < 1000; j++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	e005      	b.n	80006e6 <OpenWrt_Delay+0x1e>
		{
			osDelay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f00b fee5 	bl	800c4aa <osDelay>
		for (int j = 0; j < 1000; j++)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006ec:	dbf5      	blt.n	80006da <OpenWrt_Delay+0x12>
	for (int i = 0; i < 60; i++)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3301      	adds	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b3b      	cmp	r3, #59	; 0x3b
 80006f8:	ddec      	ble.n	80006d4 <OpenWrt_Delay+0xc>
		}
	}
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4a07      	ldr	r2, [pc, #28]	; (8000730 <vApplicationGetIdleTaskMemory+0x2c>)
 8000714:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <vApplicationGetIdleTaskMemory+0x30>)
 800071a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	24000050 	.word	0x24000050
 8000734:	240000a4 	.word	0x240000a4

08000738 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b0ec      	sub	sp, #432	; 0x1b0
 800073c:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of WT931_DONE_sem */
	osSemaphoreStaticDef(WT931_DONE_sem, &WT931_DONE_semControlBlock);
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000744:	4bc1      	ldr	r3, [pc, #772]	; (8000a4c <MX_FREERTOS_Init+0x314>)
 8000746:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	WT931_DONE_semHandle = osSemaphoreCreate(osSemaphore(WT931_DONE_sem), 1);
 800074a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800074e:	2101      	movs	r1, #1
 8000750:	4618      	mov	r0, r3
 8000752:	f00b febe 	bl	800c4d2 <osSemaphoreCreate>
 8000756:	4603      	mov	r3, r0
 8000758:	4abd      	ldr	r2, [pc, #756]	; (8000a50 <MX_FREERTOS_Init+0x318>)
 800075a:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39_DONE_sem */
	osSemaphoreStaticDef(GY39_DONE_sem, &GY39_DONE_semControlBlock);
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000762:	4bbc      	ldr	r3, [pc, #752]	; (8000a54 <MX_FREERTOS_Init+0x31c>)
 8000764:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	GY39_DONE_semHandle = osSemaphoreCreate(osSemaphore(GY39_DONE_sem), 1);
 8000768:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800076c:	2101      	movs	r1, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f00b feaf 	bl	800c4d2 <osSemaphoreCreate>
 8000774:	4603      	mov	r3, r0
 8000776:	4ab8      	ldr	r2, [pc, #736]	; (8000a58 <MX_FREERTOS_Init+0x320>)
 8000778:	6013      	str	r3, [r2, #0]

	/* definition and creation of WD_DONE_sem */
	osSemaphoreStaticDef(WD_DONE_sem, &WD_DONE_semControlBlock);
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8000780:	4bb6      	ldr	r3, [pc, #728]	; (8000a5c <MX_FREERTOS_Init+0x324>)
 8000782:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	WD_DONE_semHandle = osSemaphoreCreate(osSemaphore(WD_DONE_sem), 1);
 8000786:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800078a:	2101      	movs	r1, #1
 800078c:	4618      	mov	r0, r3
 800078e:	f00b fea0 	bl	800c4d2 <osSemaphoreCreate>
 8000792:	4603      	mov	r3, r0
 8000794:	4ab2      	ldr	r2, [pc, #712]	; (8000a60 <MX_FREERTOS_Init+0x328>)
 8000796:	6013      	str	r3, [r2, #0]

	/* definition and creation of P30_DONE_sem */
	osSemaphoreStaticDef(P30_DONE_sem, &P30_DONE_semControlBlock);
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800079e:	4bb1      	ldr	r3, [pc, #708]	; (8000a64 <MX_FREERTOS_Init+0x32c>)
 80007a0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	P30_DONE_semHandle = osSemaphoreCreate(osSemaphore(P30_DONE_sem), 1);
 80007a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00b fe91 	bl	800c4d2 <osSemaphoreCreate>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4aad      	ldr	r2, [pc, #692]	; (8000a68 <MX_FREERTOS_Init+0x330>)
 80007b4:	6013      	str	r3, [r2, #0]

	/* definition and creation of CMD_DONE_sem */
	osSemaphoreStaticDef(CMD_DONE_sem, &CMD_DONE_semControlBlock);
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80007bc:	4bab      	ldr	r3, [pc, #684]	; (8000a6c <MX_FREERTOS_Init+0x334>)
 80007be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	CMD_DONE_semHandle = osSemaphoreCreate(osSemaphore(CMD_DONE_sem), 1);
 80007c2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80007c6:	2101      	movs	r1, #1
 80007c8:	4618      	mov	r0, r3
 80007ca:	f00b fe82 	bl	800c4d2 <osSemaphoreCreate>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4aa7      	ldr	r2, [pc, #668]	; (8000a70 <MX_FREERTOS_Init+0x338>)
 80007d2:	6013      	str	r3, [r2, #0]

	/* definition and creation of RPT_DONE_sem */
	osSemaphoreStaticDef(RPT_DONE_sem, &RPT_DONE_semControlBlock);
 80007d4:	2300      	movs	r3, #0
 80007d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80007da:	4ba6      	ldr	r3, [pc, #664]	; (8000a74 <MX_FREERTOS_Init+0x33c>)
 80007dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	RPT_DONE_semHandle = osSemaphoreCreate(osSemaphore(RPT_DONE_sem), 1);
 80007e0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80007e4:	2101      	movs	r1, #1
 80007e6:	4618      	mov	r0, r3
 80007e8:	f00b fe73 	bl	800c4d2 <osSemaphoreCreate>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4aa2      	ldr	r2, [pc, #648]	; (8000a78 <MX_FREERTOS_Init+0x340>)
 80007f0:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of GY39_Queue */
	osMessageQStaticDef(GY39_Queue, 2, CarbinData_t, GY39_QueueBuffer,
 80007f2:	4ba2      	ldr	r3, [pc, #648]	; (8000a7c <MX_FREERTOS_Init+0x344>)
 80007f4:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 80007f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&GY39_QueueControlBlock);
	GY39_QueueHandle = osMessageCreate(osMessageQ(GY39_Queue), NULL);
 80007fe:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f00b fe96 	bl	800c536 <osMessageCreate>
 800080a:	4603      	mov	r3, r0
 800080c:	4a9c      	ldr	r2, [pc, #624]	; (8000a80 <MX_FREERTOS_Init+0x348>)
 800080e:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931_Queue */
	osMessageQStaticDef(WT931_Queue, 2, IMUData_t, WT931_QueueBuffer,
 8000810:	4b9c      	ldr	r3, [pc, #624]	; (8000a84 <MX_FREERTOS_Init+0x34c>)
 8000812:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 8000816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&WT931_QueueControlBlock);
	WT931_QueueHandle = osMessageCreate(osMessageQ(WT931_Queue), NULL);
 800081c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f00b fe87 	bl	800c536 <osMessageCreate>
 8000828:	4603      	mov	r3, r0
 800082a:	4a97      	ldr	r2, [pc, #604]	; (8000a88 <MX_FREERTOS_Init+0x350>)
 800082c:	6013      	str	r3, [r2, #0]

	/* definition and creation of WD_Queue */
	osMessageQStaticDef(WD_Queue, 2, DepthData_t, WD_QueueBuffer,
 800082e:	4b97      	ldr	r3, [pc, #604]	; (8000a8c <MX_FREERTOS_Init+0x354>)
 8000830:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 8000834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&WD_QueueControlBlock);
	WD_QueueHandle = osMessageCreate(osMessageQ(WD_Queue), NULL);
 800083a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f00b fe78 	bl	800c536 <osMessageCreate>
 8000846:	4603      	mov	r3, r0
 8000848:	4a91      	ldr	r2, [pc, #580]	; (8000a90 <MX_FREERTOS_Init+0x358>)
 800084a:	6013      	str	r3, [r2, #0]

	/* definition and creation of P30_Queue */
	osMessageQStaticDef(P30_Queue, 2, SonarData_t, P30_QueueBuffer,
 800084c:	4b91      	ldr	r3, [pc, #580]	; (8000a94 <MX_FREERTOS_Init+0x35c>)
 800084e:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8000852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&P30_QueueControlBlock);
	P30_QueueHandle = osMessageCreate(osMessageQ(P30_Queue), NULL);
 8000858:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f00b fe69 	bl	800c536 <osMessageCreate>
 8000864:	4603      	mov	r3, r0
 8000866:	4a8c      	ldr	r2, [pc, #560]	; (8000a98 <MX_FREERTOS_Init+0x360>)
 8000868:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osMessageQStaticDef(Rpt_Queue, 1, ReportData_t, Rpt_QueueBuffer,
 800086a:	4b8c      	ldr	r3, [pc, #560]	; (8000a9c <MX_FREERTOS_Init+0x364>)
 800086c:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8000870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&Rpt_QueueControlBlock);
	Rpt_QueueHandle = osMessageCreate(osMessageQ(Rpt_Queue), NULL);
 8000876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f00b fe5a 	bl	800c536 <osMessageCreate>
 8000882:	4603      	mov	r3, r0
 8000884:	4a86      	ldr	r2, [pc, #536]	; (8000aa0 <MX_FREERTOS_Init+0x368>)
 8000886:	6013      	str	r3, [r2, #0]

	osMessageQStaticDef(Cmd_Queue, 1, ControlData_t, Cmd_QueueBuffer,
 8000888:	4b86      	ldr	r3, [pc, #536]	; (8000aa4 <MX_FREERTOS_Init+0x36c>)
 800088a:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800088e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&Cmd_QueueControlBlock);
	Cmd_QueueHandle = osMessageCreate(osMessageQ(Cmd_Queue), NULL);
 8000894:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f00b fe4b 	bl	800c536 <osMessageCreate>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a81      	ldr	r2, [pc, #516]	; (8000aa8 <MX_FREERTOS_Init+0x370>)
 80008a4:	6013      	str	r3, [r2, #0]

	osMessageQStaticDef(WdHover_Queue, 2, DepthData_t, WdHover_QueueBuffer,
 80008a6:	4b81      	ldr	r3, [pc, #516]	; (8000aac <MX_FREERTOS_Init+0x374>)
 80008a8:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80008ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&WdHover_QueueControlBlock);
	WdHover_QueueHandle = osMessageCreate(osMessageQ(WdHover_Queue), NULL);
 80008b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00b fe3c 	bl	800c536 <osMessageCreate>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a7b      	ldr	r2, [pc, #492]	; (8000ab0 <MX_FREERTOS_Init+0x378>)
 80008c2:	6013      	str	r3, [r2, #0]

	osMessageQStaticDef(ImuOrbit_Queue, 2, IMUData_t, ImuOrbit_QueueBuffer,
 80008c4:	4b7b      	ldr	r3, [pc, #492]	; (8000ab4 <MX_FREERTOS_Init+0x37c>)
 80008c6:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80008ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			&ImuOrbit_QueueControlBlock);
	ImuOrbit_QueueHandle = osMessageCreate(osMessageQ(ImuOrbit_Queue), NULL);
 80008d0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00b fe2d 	bl	800c536 <osMessageCreate>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a76      	ldr	r2, [pc, #472]	; (8000ab8 <MX_FREERTOS_Init+0x380>)
 80008e0:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Thread_Idle */
	osThreadStaticDef(Thread_Idle, Thread_IdleEntry, osPriorityLow, 0, 512,
 80008e2:	4b76      	ldr	r3, [pc, #472]	; (8000abc <MX_FREERTOS_Init+0x384>)
 80008e4:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80008e8:	461d      	mov	r5, r3
 80008ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			Thread_IdleBuffer, &Thread_IdleControlBlock);
	Thread_IdleHandle = osThreadCreate(osThread(Thread_Idle), NULL);
 80008f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00b fd88 	bl	800c412 <osThreadCreate>
 8000902:	4603      	mov	r3, r0
 8000904:	4a6e      	ldr	r2, [pc, #440]	; (8000ac0 <MX_FREERTOS_Init+0x388>)
 8000906:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_GY39 */
	osThreadStaticDef(Thread_GY39, Thread_GY39Entry, osPriorityBelowNormal, 0,
 8000908:	4b6e      	ldr	r3, [pc, #440]	; (8000ac4 <MX_FREERTOS_Init+0x38c>)
 800090a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800090e:	461d      	mov	r5, r3
 8000910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_GY39Buffer, &Thread_GY39ControlBlock);
	Thread_GY39Handle = osThreadCreate(osThread(Thread_GY39), NULL);
 800091c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f00b fd75 	bl	800c412 <osThreadCreate>
 8000928:	4603      	mov	r3, r0
 800092a:	4a67      	ldr	r2, [pc, #412]	; (8000ac8 <MX_FREERTOS_Init+0x390>)
 800092c:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_WT931 */
	osThreadStaticDef(Thread_WT931, Thread_WT931Entry, osPriorityBelowNormal, 0,
 800092e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000932:	4a66      	ldr	r2, [pc, #408]	; (8000acc <MX_FREERTOS_Init+0x394>)
 8000934:	461c      	mov	r4, r3
 8000936:	4615      	mov	r5, r2
 8000938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_WT931Buffer, &Thread_WT931ControlBlock);
	Thread_WT931Handle = osThreadCreate(osThread(Thread_WT931), NULL);
 8000944:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f00b fd61 	bl	800c412 <osThreadCreate>
 8000950:	4603      	mov	r3, r0
 8000952:	4a5f      	ldr	r2, [pc, #380]	; (8000ad0 <MX_FREERTOS_Init+0x398>)
 8000954:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_WD */
	osThreadStaticDef(Thread_WD, Thread_WDEntry, osPriorityBelowNormal, 0, 512,
 8000956:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800095a:	4a5e      	ldr	r2, [pc, #376]	; (8000ad4 <MX_FREERTOS_Init+0x39c>)
 800095c:	461c      	mov	r4, r3
 800095e:	4615      	mov	r5, r2
 8000960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000964:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000968:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			Thread_WDBuffer, &Thread_WDControlBlock);
	Thread_WDHandle = osThreadCreate(osThread(Thread_WD), NULL);
 800096c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f00b fd4d 	bl	800c412 <osThreadCreate>
 8000978:	4603      	mov	r3, r0
 800097a:	4a57      	ldr	r2, [pc, #348]	; (8000ad8 <MX_FREERTOS_Init+0x3a0>)
 800097c:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_P30 */
	osThreadStaticDef(Thread_P30, Thread_P30Entry, osPriorityBelowNormal, 0,
 800097e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000982:	4a56      	ldr	r2, [pc, #344]	; (8000adc <MX_FREERTOS_Init+0x3a4>)
 8000984:	461c      	mov	r4, r3
 8000986:	4615      	mov	r5, r2
 8000988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_P30Buffer, &Thread_P30ControlBlock);
	Thread_P30Handle = osThreadCreate(osThread(Thread_P30), NULL);
 8000994:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f00b fd39 	bl	800c412 <osThreadCreate>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a4f      	ldr	r2, [pc, #316]	; (8000ae0 <MX_FREERTOS_Init+0x3a8>)
 80009a4:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_Control */
	osThreadStaticDef(Thread_Control, Thread_ControlEntry, osPriorityNormal, 0,
 80009a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009aa:	4a4e      	ldr	r2, [pc, #312]	; (8000ae4 <MX_FREERTOS_Init+0x3ac>)
 80009ac:	461c      	mov	r4, r3
 80009ae:	4615      	mov	r5, r2
 80009b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_ControlBuffer, &Thread_ControlControlBlock);
	Thread_ControlHandle = osThreadCreate(osThread(Thread_Control), NULL);
 80009bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00b fd25 	bl	800c412 <osThreadCreate>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a47      	ldr	r2, [pc, #284]	; (8000ae8 <MX_FREERTOS_Init+0x3b0>)
 80009cc:	6013      	str	r3, [r2, #0]

	/* definition and creation of Thread_Report */
	osThreadStaticDef(Thread_Report, Thread_ReportEntry, osPriorityNormal, 0,
 80009ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009d2:	4a46      	ldr	r2, [pc, #280]	; (8000aec <MX_FREERTOS_Init+0x3b4>)
 80009d4:	461c      	mov	r4, r3
 80009d6:	4615      	mov	r5, r2
 80009d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, Thread_ReportBuffer, &Thread_ReportControlBlock);
	Thread_ReportHandle = osThreadCreate(osThread(Thread_Report), NULL);
 80009e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f00b fd11 	bl	800c412 <osThreadCreate>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a3f      	ldr	r2, [pc, #252]	; (8000af0 <MX_FREERTOS_Init+0x3b8>)
 80009f4:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	osThreadStaticDef(Thread_CatchRpt, Thread_CatchRptEntry, osPriorityNormal,
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	4a3e      	ldr	r2, [pc, #248]	; (8000af4 <MX_FREERTOS_Init+0x3bc>)
 80009fc:	461c      	mov	r4, r3
 80009fe:	4615      	mov	r5, r2
 8000a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			0, 512, Thread_CatchRptBuffer, &Thread_CatchRptControlBlock);
	Thread_CatchRptHandle = osThreadCreate(osThread(Thread_CatchRpt), NULL);
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f00b fcfd 	bl	800c412 <osThreadCreate>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a37      	ldr	r2, [pc, #220]	; (8000af8 <MX_FREERTOS_Init+0x3c0>)
 8000a1c:	6013      	str	r3, [r2, #0]

	osThreadStaticDef(Thread_CatchCmd, Thread_CatchCmdEntry, osPriorityNormal,
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4a36      	ldr	r2, [pc, #216]	; (8000afc <MX_FREERTOS_Init+0x3c4>)
 8000a22:	461c      	mov	r4, r3
 8000a24:	4615      	mov	r5, r2
 8000a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			0, 512, Thread_CatchCmdBuffer, &Thread_CatchCmdControlBlock);
	Thread_CatchCmdHandle = osThreadCreate(osThread(Thread_CatchCmd), NULL);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00b fceb 	bl	800c412 <osThreadCreate>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a30      	ldr	r2, [pc, #192]	; (8000b00 <MX_FREERTOS_Init+0x3c8>)
 8000a40:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_THREADS */

}
 8000a42:	bf00      	nop
 8000a44:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	24005b90 	.word	0x24005b90
 8000a50:	240041e4 	.word	0x240041e4
 8000a54:	240052b4 	.word	0x240052b4
 8000a58:	24005b0c 	.word	0x24005b0c
 8000a5c:	24005b10 	.word	0x24005b10
 8000a60:	24006e3c 	.word	0x24006e3c
 8000a64:	240040f4 	.word	0x240040f4
 8000a68:	2400912c 	.word	0x2400912c
 8000a6c:	240087bc 	.word	0x240087bc
 8000a70:	24006508 	.word	0x24006508
 8000a74:	2400426c 	.word	0x2400426c
 8000a78:	24005bd8 	.word	0x24005bd8
 8000a7c:	0800ebf8 	.word	0x0800ebf8
 8000a80:	24005b08 	.word	0x24005b08
 8000a84:	0800ec08 	.word	0x0800ec08
 8000a88:	24005b04 	.word	0x24005b04
 8000a8c:	0800ec18 	.word	0x0800ec18
 8000a90:	24004208 	.word	0x24004208
 8000a94:	0800ec28 	.word	0x0800ec28
 8000a98:	24006e90 	.word	0x24006e90
 8000a9c:	0800ec38 	.word	0x0800ec38
 8000aa0:	24006d9c 	.word	0x24006d9c
 8000aa4:	0800ec48 	.word	0x0800ec48
 8000aa8:	24006e40 	.word	0x24006e40
 8000aac:	0800ec58 	.word	0x0800ec58
 8000ab0:	24005afc 	.word	0x24005afc
 8000ab4:	0800ec68 	.word	0x0800ec68
 8000ab8:	24006e8c 	.word	0x24006e8c
 8000abc:	0800ec78 	.word	0x0800ec78
 8000ac0:	24008858 	.word	0x24008858
 8000ac4:	0800ec94 	.word	0x0800ec94
 8000ac8:	240090a4 	.word	0x240090a4
 8000acc:	0800ecb0 	.word	0x0800ecb0
 8000ad0:	24005c0c 	.word	0x24005c0c
 8000ad4:	0800eccc 	.word	0x0800eccc
 8000ad8:	24005b00 	.word	0x24005b00
 8000adc:	0800ece8 	.word	0x0800ece8
 8000ae0:	24006464 	.word	0x24006464
 8000ae4:	0800ed04 	.word	0x0800ed04
 8000ae8:	24009130 	.word	0x24009130
 8000aec:	0800ed20 	.word	0x0800ed20
 8000af0:	24007f64 	.word	0x24007f64
 8000af4:	0800ed3c 	.word	0x0800ed3c
 8000af8:	24006504 	.word	0x24006504
 8000afc:	0800ed58 	.word	0x0800ed58
 8000b00:	24006edc 	.word	0x24006edc

08000b04 <Thread_IdleEntry>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_IdleEntry */
void Thread_IdleEntry(void const *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Thread_IdleEntry */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //not work: extinguish
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <Thread_IdleEntry+0x2c>)
 8000b14:	f005 facc 	bl	80060b0 <HAL_GPIO_WritePin>
	OpenWrt_Delay();
 8000b18:	f7ff fdd6 	bl	80006c8 <OpenWrt_Delay>

	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //working: flash every 0.5s
 8000b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <Thread_IdleEntry+0x2c>)
 8000b22:	f005 fade 	bl	80060e2 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000b26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2a:	f00b fcbe 	bl	800c4aa <osDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //working: flash every 0.5s
 8000b2e:	e7f5      	b.n	8000b1c <Thread_IdleEntry+0x18>
 8000b30:	58020800 	.word	0x58020800

08000b34 <Thread_GY39Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_GY39Entry */
void Thread_GY39Entry(void const *argument)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN Thread_GY39Entry */
	uint8_t GY39_TxBuffer[TEMPER_UART_TXLen] =
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <Thread_GY39Entry+0xcc>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	{ 0 };
	uint8_t GY39_RxBuffer[TEMPER_UART_RXLen] =
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	f8c3 2007 	str.w	r2, [r3, #7]
	{ 0 };
	CarbinData_t gy39_data;

	InitGY39(GY39_TxBuffer);
 8000b5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00b faa0 	bl	800c0a4 <InitGY39>
	HAL_UART_Transmit_DMA(&TEMPER_UART, GY39_TxBuffer, sizeof(GY39_TxBuffer));
 8000b64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b68:	2203      	movs	r2, #3
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4825      	ldr	r0, [pc, #148]	; (8000c04 <Thread_GY39Entry+0xd0>)
 8000b6e:	f008 f993 	bl	8008e98 <HAL_UART_Transmit_DMA>

	__HAL_UART_ENABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 8000b72:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <Thread_GY39Entry+0xd0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <Thread_GY39Entry+0xd0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f042 0210 	orr.w	r2, r2, #16
 8000b80:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&TEMPER_UART, GY39_RxBuffer, sizeof(GY39_RxBuffer));
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	220f      	movs	r2, #15
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481e      	ldr	r0, [pc, #120]	; (8000c04 <Thread_GY39Entry+0xd0>)
 8000b8c:	f008 fa16 	bl	8008fbc <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(GY39_DONE_semHandle, 0) == pdTRUE)
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <Thread_GY39Entry+0xd4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f00c f950 	bl	800ce3c <xQueueSemaphoreTake>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d12a      	bne.n	8000bf8 <Thread_GY39Entry+0xc4>
		{
			gy39_data = ReceiveGY39(GY39_RxBuffer);
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00b fa8f 	bl	800c0ce <ReceiveGY39>
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	463a      	mov	r2, r7
 8000bb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

//			printf("t:%d, %d, %d\r\n", gy39_data.CarbinBarometric,
//					gy39_data.CarbinHumidity, gy39_data.CarbinTemperature);
			xQueueSendToFront(GY39_QueueHandle, (void* )&gy39_data, 0);
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <Thread_GY39Entry+0xd8>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	f107 0118 	add.w	r1, r7, #24
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f00b fecc 	bl	800c964 <xQueueGenericSend>

			memset(&GY39_RxBuffer, 0, sizeof(GY39_RxBuffer));
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00d ffbb 	bl	800eb50 <memset>
			__HAL_UART_ENABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <Thread_GY39Entry+0xd0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <Thread_GY39Entry+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f042 0210 	orr.w	r2, r2, #16
 8000be8:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&TEMPER_UART, GY39_RxBuffer,
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	220f      	movs	r2, #15
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <Thread_GY39Entry+0xd0>)
 8000bf4:	f008 f9e2 	bl	8008fbc <HAL_UART_Receive_DMA>
					sizeof(GY39_RxBuffer));
		}

		osDelay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f00b fc56 	bl	800c4aa <osDelay>
		if (xSemaphoreTake(GY39_DONE_semHandle, 0) == pdTRUE)
 8000bfe:	e7c7      	b.n	8000b90 <Thread_GY39Entry+0x5c>
 8000c00:	0800ed74 	.word	0x0800ed74
 8000c04:	24009810 	.word	0x24009810
 8000c08:	24005b0c 	.word	0x24005b0c
 8000c0c:	24005b08 	.word	0x24005b08

08000c10 <Thread_WT931Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_WT931Entry */
void Thread_WT931Entry(void const *argument)
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b09a      	sub	sp, #104	; 0x68
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	61f8      	str	r0, [r7, #28]
	/* USER CODE BEGIN Thread_WT931Entry */
	uint8_t WT931_RxBuffer[AXIS_UART_RXLen] =
 8000c18:	2300      	movs	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c20:	2228      	movs	r2, #40	; 0x28
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f00d ff93 	bl	800eb50 <memset>
	{ 0 };
	IMUData_t wt931_data;

	__HAL_UART_ENABLE_IT(&AXIS_UART, UART_IT_IDLE);
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <Thread_WT931Entry+0xc4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <Thread_WT931Entry+0xc4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f042 0210 	orr.w	r2, r2, #16
 8000c38:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&AXIS_UART, WT931_RxBuffer, sizeof(WT931_RxBuffer));
 8000c3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c3e:	222c      	movs	r2, #44	; 0x2c
 8000c40:	4619      	mov	r1, r3
 8000c42:	4824      	ldr	r0, [pc, #144]	; (8000cd4 <Thread_WT931Entry+0xc4>)
 8000c44:	f008 f9ba 	bl	8008fbc <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(WT931_DONE_semHandle, 0) == pdTRUE)
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <Thread_WT931Entry+0xc8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f00c f8f4 	bl	800ce3c <xQueueSemaphoreTake>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d137      	bne.n	8000cca <Thread_WT931Entry+0xba>
		{
			wt931_data = ReceiveWT931(WT931_RxBuffer);
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f00b fa82 	bl	800c16c <ReceiveWT931>
 8000c68:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000c6c:	463d      	mov	r5, r7
 8000c6e:	6828      	ldr	r0, [r5, #0]
 8000c70:	6869      	ldr	r1, [r5, #4]
 8000c72:	68aa      	ldr	r2, [r5, #8]
 8000c74:	68eb      	ldr	r3, [r5, #12]
 8000c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c78:	6928      	ldr	r0, [r5, #16]
 8000c7a:	6969      	ldr	r1, [r5, #20]
 8000c7c:	c403      	stmia	r4!, {r0, r1}

//			printf("wt931:%d,%d,%d\r\n", wt931_data.EulerAngle[0], wt931_data.EulerAngle[1], wt931_data.EulerAngle[2]);
			xQueueSendToFront(WT931_QueueHandle, (void* )&wt931_data, 0);
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <Thread_WT931Entry+0xcc>)
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c86:	2301      	movs	r3, #1
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f00b fe6b 	bl	800c964 <xQueueGenericSend>
			xQueueSendToFront(ImuOrbit_QueueHandle, (void* )&wt931_data, 0);
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <Thread_WT931Entry+0xd0>)
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c96:	2301      	movs	r3, #1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f00b fe63 	bl	800c964 <xQueueGenericSend>

			memset(&WT931_RxBuffer, 0, sizeof(WT931_RxBuffer));
 8000c9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ca2:	222c      	movs	r2, #44	; 0x2c
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00d ff52 	bl	800eb50 <memset>
			__HAL_UART_ENABLE_IT(&AXIS_UART, UART_IT_IDLE);
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <Thread_WT931Entry+0xc4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <Thread_WT931Entry+0xc4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f042 0210 	orr.w	r2, r2, #16
 8000cba:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&AXIS_UART, WT931_RxBuffer,
 8000cbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cc0:	222c      	movs	r2, #44	; 0x2c
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <Thread_WT931Entry+0xc4>)
 8000cc6:	f008 f979 	bl	8008fbc <HAL_UART_Receive_DMA>
					sizeof(WT931_RxBuffer));
		}
		osDelay(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f00b fbed 	bl	800c4aa <osDelay>
		if (xSemaphoreTake(WT931_DONE_semHandle, 0) == pdTRUE)
 8000cd0:	e7ba      	b.n	8000c48 <Thread_WT931Entry+0x38>
 8000cd2:	bf00      	nop
 8000cd4:	240092e8 	.word	0x240092e8
 8000cd8:	240041e4 	.word	0x240041e4
 8000cdc:	24005b04 	.word	0x24005b04
 8000ce0:	24006e8c 	.word	0x24006e8c

08000ce4 <Thread_WDEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_WDEntry */
void Thread_WDEntry(void const *argument)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN Thread_WDEntry */
	uint8_t WD_RxBuffer[Deep_UART_RXLen] =
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	f8c3 2007 	str.w	r2, [r3, #7]
	{ 0 };
	DepthData_t wd_data;

	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <Thread_WDEntry+0xb8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <Thread_WDEntry+0xb8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f042 0210 	orr.w	r2, r2, #16
 8000d0c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Deep_UART, WD_RxBuffer, sizeof(WD_RxBuffer));
 8000d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d12:	220f      	movs	r2, #15
 8000d14:	4619      	mov	r1, r3
 8000d16:	4821      	ldr	r0, [pc, #132]	; (8000d9c <Thread_WDEntry+0xb8>)
 8000d18:	f008 f950 	bl	8008fbc <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(WD_DONE_semHandle, 0) == pdTRUE)
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <Thread_WDEntry+0xbc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f00c f88a 	bl	800ce3c <xQueueSemaphoreTake>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d132      	bne.n	8000d94 <Thread_WDEntry+0xb0>
		{
			wd_data = ReceiveDeep(WD_RxBuffer);
 8000d2e:	463b      	mov	r3, r7
 8000d30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f00b f892 	bl	800be60 <ReceiveDeep>
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	463a      	mov	r2, r7
 8000d42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d44:	e883 0007 	stmia.w	r3, {r0, r1, r2}

			xQueueSendToFront(WD_QueueHandle, (void* )&wd_data, 0);
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <Thread_WDEntry+0xc0>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	f107 011c 	add.w	r1, r7, #28
 8000d50:	2301      	movs	r3, #1
 8000d52:	2200      	movs	r2, #0
 8000d54:	f00b fe06 	bl	800c964 <xQueueGenericSend>
			xQueueSendToFront(WdHover_QueueHandle, (void* )&wd_data, 0);
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <Thread_WDEntry+0xc4>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	f107 011c 	add.w	r1, r7, #28
 8000d60:	2301      	movs	r3, #1
 8000d62:	2200      	movs	r2, #0
 8000d64:	f00b fdfe 	bl	800c964 <xQueueGenericSend>

			memset(&WD_RxBuffer, 0, sizeof(WD_RxBuffer));
 8000d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f00d feed 	bl	800eb50 <memset>
			__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <Thread_WDEntry+0xb8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <Thread_WDEntry+0xb8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f042 0210 	orr.w	r2, r2, #16
 8000d84:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&Deep_UART, WD_RxBuffer, sizeof(WD_RxBuffer));
 8000d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <Thread_WDEntry+0xb8>)
 8000d90:	f008 f914 	bl	8008fbc <HAL_UART_Receive_DMA>
		}
//		osDelay(10);
		osDelay(10);
 8000d94:	200a      	movs	r0, #10
 8000d96:	f00b fb88 	bl	800c4aa <osDelay>
		if (xSemaphoreTake(WD_DONE_semHandle, 0) == pdTRUE)
 8000d9a:	e7bf      	b.n	8000d1c <Thread_WDEntry+0x38>
 8000d9c:	24009780 	.word	0x24009780
 8000da0:	24006e3c 	.word	0x24006e3c
 8000da4:	24004208 	.word	0x24004208
 8000da8:	24005afc 	.word	0x24005afc

08000dac <Thread_P30Entry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_P30Entry */
void Thread_P30Entry(void const *argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b096      	sub	sp, #88	; 0x58
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN Thread_P30Entry */
	uint8_t P30_TxBuffer[SONAR_HEIGHT_UART_TXLen] =
 8000db4:	2300      	movs	r3, #0
 8000db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000db8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
	{ 0 };
	uint8_t P30_RxBuffer[SONAR_HEIGHT_UART_RXLen] =
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dca:	221d      	movs	r2, #29
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00d febe 	bl	800eb50 <memset>
	{ 0 };
	SonarData_t p30_data;

	InitP30(P30_TxBuffer);
 8000dd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f00a ff55 	bl	800bc88 <InitP30>
	HAL_UART_Transmit_DMA(&SONAR_HEIGHT_UART, P30_TxBuffer,
 8000dde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000de2:	220c      	movs	r2, #12
 8000de4:	4619      	mov	r1, r3
 8000de6:	4825      	ldr	r0, [pc, #148]	; (8000e7c <Thread_P30Entry+0xd0>)
 8000de8:	f008 f856 	bl	8008e98 <HAL_UART_Transmit_DMA>
			sizeof(P30_TxBuffer));

	__HAL_UART_ENABLE_IT(&SONAR_HEIGHT_UART, UART_IT_IDLE);
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <Thread_P30Entry+0xd0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <Thread_P30Entry+0xd0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f042 0210 	orr.w	r2, r2, #16
 8000dfa:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&SONAR_HEIGHT_UART, P30_RxBuffer,
 8000dfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e00:	2221      	movs	r2, #33	; 0x21
 8000e02:	4619      	mov	r1, r3
 8000e04:	481d      	ldr	r0, [pc, #116]	; (8000e7c <Thread_P30Entry+0xd0>)
 8000e06:	f008 f8d9 	bl	8008fbc <HAL_UART_Receive_DMA>
			sizeof(P30_RxBuffer));

	/* Infinite loop */
	for (;;)
	{
		if (xSemaphoreTake(P30_DONE_semHandle, 0) == pdTRUE)
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <Thread_P30Entry+0xd4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00c f813 	bl	800ce3c <xQueueSemaphoreTake>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d12a      	bne.n	8000e72 <Thread_P30Entry+0xc6>
		{
			p30_data = ReceiveP30(P30_RxBuffer);
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00a ff69 	bl	800bcfc <ReceiveP30>
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	463a      	mov	r2, r7
 8000e30:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e32:	e883 0007 	stmia.w	r3, {r0, r1, r2}

			xQueueSendToFront(P30_QueueHandle, (void* )&p30_data, 0);
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <Thread_P30Entry+0xd8>)
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	f107 011c 	add.w	r1, r7, #28
 8000e3e:	2301      	movs	r3, #1
 8000e40:	2200      	movs	r2, #0
 8000e42:	f00b fd8f 	bl	800c964 <xQueueGenericSend>

			memset(&P30_RxBuffer, 0, sizeof(P30_RxBuffer));
 8000e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4a:	2221      	movs	r2, #33	; 0x21
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f00d fe7e 	bl	800eb50 <memset>
			__HAL_UART_ENABLE_IT(&SONAR_HEIGHT_UART, UART_IT_IDLE);
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <Thread_P30Entry+0xd0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <Thread_P30Entry+0xd0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 0210 	orr.w	r2, r2, #16
 8000e62:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&SONAR_HEIGHT_UART, P30_RxBuffer,
 8000e64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e68:	2221      	movs	r2, #33	; 0x21
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <Thread_P30Entry+0xd0>)
 8000e6e:	f008 f8a5 	bl	8008fbc <HAL_UART_Receive_DMA>
					sizeof(P30_RxBuffer));
		}
//		osDelay(10);
		osDelay(100);
 8000e72:	2064      	movs	r0, #100	; 0x64
 8000e74:	f00b fb19 	bl	800c4aa <osDelay>
		if (xSemaphoreTake(P30_DONE_semHandle, 0) == pdTRUE)
 8000e78:	e7c7      	b.n	8000e0a <Thread_P30Entry+0x5e>
 8000e7a:	bf00      	nop
 8000e7c:	240093f0 	.word	0x240093f0
 8000e80:	2400912c 	.word	0x2400912c
 8000e84:	24006e90 	.word	0x24006e90

08000e88 <Thread_ControlEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_ControlEntry */
void Thread_ControlEntry(void const *argument)
{
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b0b8      	sub	sp, #224	; 0xe0
 8000e8c:	af06      	add	r7, sp, #24
 8000e8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Thread_ControlEntry */
	BaseType_t ret = pdPASS;
 8000e90:	2301      	movs	r3, #1
 8000e92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	static uint8_t IS_FIRST_ORBIT = ROV_FALSE;

	struct Algorithm_PID hover_pid;
	struct Algorithm_PID orbit_pid;

	initPID(&hover_pid, PID_POSITION_MODE, 0.2);
 8000e96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e9a:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80010c0 <Thread_ControlEntry+0x238>
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00a f875 	bl	800af90 <initPID>
	initPID(&orbit_pid, PID_POSITION_MODE, 0.2);
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80010c0 <Thread_ControlEntry+0x238>
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f00a f86d 	bl	800af90 <initPID>

	OpenWrt_Delay();
 8000eb6:	f7ff fc07 	bl	80006c8 <OpenWrt_Delay>

	/* Infinite loop */
	for (;;)
	{
		ret = xQueueReceive(Cmd_QueueHandle, &control_data_origin, 0);
 8000eba:	4b82      	ldr	r3, [pc, #520]	; (80010c4 <Thread_ControlEntry+0x23c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4981      	ldr	r1, [pc, #516]	; (80010c8 <Thread_ControlEntry+0x240>)
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00b feda 	bl	800cc7c <xQueueReceive>
 8000ec8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

		if (ret == pdPASS) //analysis data after successful recv
 8000ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d141      	bne.n	8000f58 <Thread_ControlEntry+0xd0>
		{
			//check hover
			if (control_data_origin.Mode & DEEP_CODE)
 8000ed4:	4b7c      	ldr	r3, [pc, #496]	; (80010c8 <Thread_ControlEntry+0x240>)
 8000ed6:	7f1b      	ldrb	r3, [r3, #28]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d011      	beq.n	8000f04 <Thread_ControlEntry+0x7c>
			{
				if (IS_HOVER == ROV_FALSE) //first get hover command
 8000ee0:	4b7a      	ldr	r3, [pc, #488]	; (80010cc <Thread_ControlEntry+0x244>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d106      	bne.n	8000ef6 <Thread_ControlEntry+0x6e>
				{
					IS_FIRST_HOVER = ROV_TRUE;
 8000ee8:	4b79      	ldr	r3, [pc, #484]	; (80010d0 <Thread_ControlEntry+0x248>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
					IS_HOVER = ROV_TRUE;
 8000eee:	4b77      	ldr	r3, [pc, #476]	; (80010cc <Thread_ControlEntry+0x244>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e00f      	b.n	8000f16 <Thread_ControlEntry+0x8e>
				}
				else //have got hover commands
				{
					IS_FIRST_HOVER = ROV_FALSE;
 8000ef6:	4b76      	ldr	r3, [pc, #472]	; (80010d0 <Thread_ControlEntry+0x248>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
					IS_HOVER = ROV_TRUE;
 8000efc:	4b73      	ldr	r3, [pc, #460]	; (80010cc <Thread_ControlEntry+0x244>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	e008      	b.n	8000f16 <Thread_ControlEntry+0x8e>
				}
			}
			else
			{
				hover_pid_result = 0;
 8000f04:	4b73      	ldr	r3, [pc, #460]	; (80010d4 <Thread_ControlEntry+0x24c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
				IS_FIRST_HOVER = ROV_FALSE;
 8000f0a:	4b71      	ldr	r3, [pc, #452]	; (80010d0 <Thread_ControlEntry+0x248>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
				IS_HOVER = ROV_FALSE;
 8000f10:	4b6e      	ldr	r3, [pc, #440]	; (80010cc <Thread_ControlEntry+0x244>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
			}

			//check orbit
			if (control_data_origin.Mode & DIR_CODE)
 8000f16:	4b6c      	ldr	r3, [pc, #432]	; (80010c8 <Thread_ControlEntry+0x240>)
 8000f18:	7f1b      	ldrb	r3, [r3, #28]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d011      	beq.n	8000f46 <Thread_ControlEntry+0xbe>
			{
				if (IS_ORBIT == ROV_FALSE) //first get orbit command
 8000f22:	4b6d      	ldr	r3, [pc, #436]	; (80010d8 <Thread_ControlEntry+0x250>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d106      	bne.n	8000f38 <Thread_ControlEntry+0xb0>
				{
					IS_FIRST_ORBIT = ROV_TRUE;
 8000f2a:	4b6c      	ldr	r3, [pc, #432]	; (80010dc <Thread_ControlEntry+0x254>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
					IS_ORBIT = ROV_TRUE;
 8000f30:	4b69      	ldr	r3, [pc, #420]	; (80010d8 <Thread_ControlEntry+0x250>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e00f      	b.n	8000f58 <Thread_ControlEntry+0xd0>
				}
				else //have got orbit commands
				{
					IS_FIRST_ORBIT = ROV_FALSE;
 8000f38:	4b68      	ldr	r3, [pc, #416]	; (80010dc <Thread_ControlEntry+0x254>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
					IS_ORBIT = ROV_TRUE;
 8000f3e:	4b66      	ldr	r3, [pc, #408]	; (80010d8 <Thread_ControlEntry+0x250>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e008      	b.n	8000f58 <Thread_ControlEntry+0xd0>
				}
			}
			else
			{
				orbit_pid_result = 0;
 8000f46:	4b66      	ldr	r3, [pc, #408]	; (80010e0 <Thread_ControlEntry+0x258>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
				IS_FIRST_ORBIT = ROV_FALSE;
 8000f4c:	4b63      	ldr	r3, [pc, #396]	; (80010dc <Thread_ControlEntry+0x254>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
				IS_ORBIT = ROV_FALSE;
 8000f52:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <Thread_ControlEntry+0x250>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
			}
		}

		//calculate PID as routine
		if (IS_HOVER == ROV_TRUE)
 8000f58:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <Thread_ControlEntry+0x244>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d135      	bne.n	8000fcc <Thread_ControlEntry+0x144>
		{
			if (IS_FIRST_HOVER == ROV_TRUE) //first recv hover command
 8000f60:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <Thread_ControlEntry+0x248>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d10c      	bne.n	8000f82 <Thread_ControlEntry+0xfa>
			{
				xQueueReceive(WdHover_QueueHandle, &current_water_depth, 0);
 8000f68:	4b5e      	ldr	r3, [pc, #376]	; (80010e4 <Thread_ControlEntry+0x25c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8000f70:	2200      	movs	r2, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00b fe82 	bl	800cc7c <xQueueReceive>
//				xQueueReceive(SonarHover_QueueHandle, &current_height, 0);
				hover_target = current_water_depth.WaterDepth;
 8000f78:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8000f7c:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <Thread_ControlEntry+0x260>)
 8000f7e:	801a      	strh	r2, [r3, #0]
 8000f80:	e024      	b.n	8000fcc <Thread_ControlEntry+0x144>
			}
			else //routine hover calculation
			{
				xQueueReceive(WdHover_QueueHandle, &current_water_depth, 0);
 8000f82:	4b58      	ldr	r3, [pc, #352]	; (80010e4 <Thread_ControlEntry+0x25c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f00b fe75 	bl	800cc7c <xQueueReceive>
				hover_pid_result = (int32_t) calculatePID_position(&hover_pid,
 8000f92:	4b55      	ldr	r3, [pc, #340]	; (80010e8 <Thread_ControlEntry+0x260>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
						hover_target, current_water_depth.WaterDepth);
 8000f9e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
				hover_pid_result = (int32_t) calculatePID_position(&hover_pid,
 8000fa2:	ee07 3a10 	vmov	s14, r3
 8000fa6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000faa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fae:	eef0 0a47 	vmov.f32	s1, s14
 8000fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f00a f83a 	bl	800b030 <calculatePID_position>
 8000fbc:	eef0 7a40 	vmov.f32	s15, s0
 8000fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <Thread_ControlEntry+0x24c>)
 8000fca:	601a      	str	r2, [r3, #0]
			}
		}

		if (IS_ORBIT == ROV_TRUE)
 8000fcc:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <Thread_ControlEntry+0x250>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d135      	bne.n	8001040 <Thread_ControlEntry+0x1b8>
		{
			if (IS_FIRST_ORBIT == ROV_TRUE) //first recv orbit command
 8000fd4:	4b41      	ldr	r3, [pc, #260]	; (80010dc <Thread_ControlEntry+0x254>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10c      	bne.n	8000ff6 <Thread_ControlEntry+0x16e>
			{
				xQueueReceive(ImuOrbit_QueueHandle, &current_direction, 0);
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <Thread_ControlEntry+0x264>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00b fe48 	bl	800cc7c <xQueueReceive>
				orbit_target = current_direction.EulerAngle[0];
 8000fec:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <Thread_ControlEntry+0x268>)
 8000ff2:	801a      	strh	r2, [r3, #0]
 8000ff4:	e024      	b.n	8001040 <Thread_ControlEntry+0x1b8>
			}
			else //routine orbit calculation
			{
				xQueueReceive(ImuOrbit_QueueHandle, &current_direction, 0);
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <Thread_ControlEntry+0x264>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000ffe:	2200      	movs	r2, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f00b fe3b 	bl	800cc7c <xQueueReceive>
				orbit_pid_result = (int32_t) calculatePID_position(&orbit_pid,
 8001006:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <Thread_ControlEntry+0x268>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7a67 	vcvt.f32.u32	s15, s15
						orbit_target, current_direction.EulerAngle[0]);
 8001012:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
				orbit_pid_result = (int32_t) calculatePID_position(&orbit_pid,
 8001016:	ee07 3a10 	vmov	s14, r3
 800101a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	eef0 0a47 	vmov.f32	s1, s14
 8001026:	eeb0 0a67 	vmov.f32	s0, s15
 800102a:	4618      	mov	r0, r3
 800102c:	f00a f800 	bl	800b030 <calculatePID_position>
 8001030:	eef0 7a40 	vmov.f32	s15, s0
 8001034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001038:	ee17 2a90 	vmov	r2, s15
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <Thread_ControlEntry+0x258>)
 800103e:	601a      	str	r2, [r3, #0]
			}
		}

		if (ret == pdPASS) //send data to power carbin after successful recv
 8001040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001044:	2b01      	cmp	r3, #1
 8001046:	d136      	bne.n	80010b6 <Thread_ControlEntry+0x22e>
		{
			control_data_origin.VerticalNum += hover_pid_result;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <Thread_ControlEntry+0x240>)
 800104a:	88da      	ldrh	r2, [r3, #6]
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <Thread_ControlEntry+0x24c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	b29b      	uxth	r3, r3
 8001052:	4413      	add	r3, r2
 8001054:	b29a      	uxth	r2, r3
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <Thread_ControlEntry+0x240>)
 8001058:	80da      	strh	r2, [r3, #6]
			control_data_origin.RotateNum += orbit_pid_result;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <Thread_ControlEntry+0x240>)
 800105c:	889a      	ldrh	r2, [r3, #4]
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <Thread_ControlEntry+0x258>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	4413      	add	r3, r2
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <Thread_ControlEntry+0x240>)
 800106a:	809a      	strh	r2, [r3, #4]
			ControlDataGenerate(control_data_origin, Cmd_TxBuffer); //integrate data
 800106c:	4c16      	ldr	r4, [pc, #88]	; (80010c8 <Thread_ControlEntry+0x240>)
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <Thread_ControlEntry+0x26c>)
 8001070:	9304      	str	r3, [sp, #16]
 8001072:	466d      	mov	r5, sp
 8001074:	f104 0310 	add.w	r3, r4, #16
 8001078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800107a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800107e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001082:	f00a fd47 	bl	800bb14 <ControlDataGenerate>

			if (HAL_UART_GetState(&Slave_UART) != HAL_UART_STATE_BUSY_TX) //UART no busy
 8001086:	481c      	ldr	r0, [pc, #112]	; (80010f8 <Thread_ControlEntry+0x270>)
 8001088:	f008 fc5e 	bl	8009948 <HAL_UART_GetState>
 800108c:	4603      	mov	r3, r0
 800108e:	2b21      	cmp	r3, #33	; 0x21
 8001090:	d011      	beq.n	80010b6 <Thread_ControlEntry+0x22e>
			{
				if (HAL_DMA_GetState(&Slave_UART.hdmatx) != HAL_DMA_STATE_BUSY) //wait for DMA tx
 8001092:	481a      	ldr	r0, [pc, #104]	; (80010fc <Thread_ControlEntry+0x274>)
 8001094:	f004 fa42 	bl	800551c <HAL_DMA_GetState>
 8001098:	4603      	mov	r3, r0
 800109a:	2b02      	cmp	r3, #2
 800109c:	d00b      	beq.n	80010b6 <Thread_ControlEntry+0x22e>
				{
					if (__HAL_UART_GET_FLAG(&Slave_UART, UART_FLAG_TC) == SET) //wait for UART tx
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <Thread_ControlEntry+0x270>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a8:	2b40      	cmp	r3, #64	; 0x40
 80010aa:	d104      	bne.n	80010b6 <Thread_ControlEntry+0x22e>
					{
						HAL_UART_Transmit_DMA(&Slave_UART, Cmd_TxBuffer,
 80010ac:	221e      	movs	r2, #30
 80010ae:	4911      	ldr	r1, [pc, #68]	; (80010f4 <Thread_ControlEntry+0x26c>)
 80010b0:	4811      	ldr	r0, [pc, #68]	; (80010f8 <Thread_ControlEntry+0x270>)
 80010b2:	f007 fef1 	bl	8008e98 <HAL_UART_Transmit_DMA>
//						HAL_UART_Transmit_DMA(&Slave_UART, Cmd_TxBuffer,
//								sizeof(Cmd_TxBuffer));
//		}

//		osDelay(50);
		osDelay(100);
 80010b6:	2064      	movs	r0, #100	; 0x64
 80010b8:	f00b f9f7 	bl	800c4aa <osDelay>
		ret = xQueueReceive(Cmd_QueueHandle, &control_data_origin, 0);
 80010bc:	e6fd      	b.n	8000eba <Thread_ControlEntry+0x32>
 80010be:	bf00      	nop
 80010c0:	3e4ccccd 	.word	0x3e4ccccd
 80010c4:	24006e40 	.word	0x24006e40
 80010c8:	240002a4 	.word	0x240002a4
 80010cc:	240002c4 	.word	0x240002c4
 80010d0:	240002c5 	.word	0x240002c5
 80010d4:	240002c8 	.word	0x240002c8
 80010d8:	240002cc 	.word	0x240002cc
 80010dc:	240002cd 	.word	0x240002cd
 80010e0:	240002d0 	.word	0x240002d0
 80010e4:	24005afc 	.word	0x24005afc
 80010e8:	240002d4 	.word	0x240002d4
 80010ec:	24006e8c 	.word	0x24006e8c
 80010f0:	240002d6 	.word	0x240002d6
 80010f4:	24000000 	.word	0x24000000
 80010f8:	240096f0 	.word	0x240096f0
 80010fc:	24009768 	.word	0x24009768

08001100 <Thread_ReportEntry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Thread_ReportEntry */
void Thread_ReportEntry(void const *argument)
{
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	b09b      	sub	sp, #108	; 0x6c
 8001104:	af0c      	add	r7, sp, #48	; 0x30
 8001106:	6078      	str	r0, [r7, #4]
	static ReportData_t rpt_data_powcarbin;

//	static uint8_t Report_RxBuffer[Slave_UART_RXLen] =
//	{ 0 };

	uint8_t Report_TxBuffer[Master_UART_TXLen] =
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	222b      	movs	r2, #43	; 0x2b
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f00d fd1b 	bl	800eb50 <memset>
	{ 0 };

	static ReportData_t report_data;
	report_data.FrameHead = 0x25;
 800111a:	4b6a      	ldr	r3, [pc, #424]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 800111c:	2225      	movs	r2, #37	; 0x25
 800111e:	701a      	strb	r2, [r3, #0]
	report_data.CabinFunction = 0x01;
 8001120:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 8001122:	2201      	movs	r2, #1
 8001124:	705a      	strb	r2, [r3, #1]
	report_data.FrameEnd = 0xFFFF;
 8001126:	4b67      	ldr	r3, [pc, #412]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	869a      	strh	r2, [r3, #52]	; 0x34
	report_data.IdTest = 0x00;
 800112e:	4b65      	ldr	r3, [pc, #404]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	OpenWrt_Delay();
 8001136:	f7ff fac7 	bl	80006c8 <OpenWrt_Delay>

	/* Infinite loop */
	for (;;)
	{
		xQueueReceive(GY39_QueueHandle, &gy39_data, 0);
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <Thread_ReportEntry+0x1c8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	4962      	ldr	r1, [pc, #392]	; (80012cc <Thread_ReportEntry+0x1cc>)
 8001142:	4618      	mov	r0, r3
 8001144:	f00b fd9a 	bl	800cc7c <xQueueReceive>
		xQueueReceive(WT931_QueueHandle, &wt931_data, 0);
 8001148:	4b61      	ldr	r3, [pc, #388]	; (80012d0 <Thread_ReportEntry+0x1d0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	4961      	ldr	r1, [pc, #388]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 8001150:	4618      	mov	r0, r3
 8001152:	f00b fd93 	bl	800cc7c <xQueueReceive>
		xQueueReceive(WD_QueueHandle, &wd_data, 0);
 8001156:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <Thread_ReportEntry+0x1d8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	495f      	ldr	r1, [pc, #380]	; (80012dc <Thread_ReportEntry+0x1dc>)
 800115e:	4618      	mov	r0, r3
 8001160:	f00b fd8c 	bl	800cc7c <xQueueReceive>
		xQueueReceive(P30_QueueHandle, &p30_data, 0);
 8001164:	4b5e      	ldr	r3, [pc, #376]	; (80012e0 <Thread_ReportEntry+0x1e0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2200      	movs	r2, #0
 800116a:	495e      	ldr	r1, [pc, #376]	; (80012e4 <Thread_ReportEntry+0x1e4>)
 800116c:	4618      	mov	r0, r3
 800116e:	f00b fd85 	bl	800cc7c <xQueueReceive>
		xQueueReceive(Rpt_QueueHandle, &rpt_data_powcarbin, 0);
 8001172:	4b5d      	ldr	r3, [pc, #372]	; (80012e8 <Thread_ReportEntry+0x1e8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	495c      	ldr	r1, [pc, #368]	; (80012ec <Thread_ReportEntry+0x1ec>)
 800117a:	4618      	mov	r0, r3
 800117c:	f00b fd7e 	bl	800cc7c <xQueueReceive>

		report_data.WaterDetect = HAL_GPIO_ReadPin(WATER_DET_GPIO_Port,
 8001180:	2140      	movs	r1, #64	; 0x40
 8001182:	485b      	ldr	r0, [pc, #364]	; (80012f0 <Thread_ReportEntry+0x1f0>)
 8001184:	f004 ff7c 	bl	8006080 <HAL_GPIO_ReadPin>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 800118e:	709a      	strb	r2, [r3, #2]
		WATER_DET_Pin);

		report_data.CabinTemperature = gy39_data.CarbinTemperature;
 8001190:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <Thread_ReportEntry+0x1cc>)
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 8001196:	809a      	strh	r2, [r3, #4]
		report_data.CabinBarometric = gy39_data.CarbinBarometric;
 8001198:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <Thread_ReportEntry+0x1cc>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 800119e:	6093      	str	r3, [r2, #8]
		report_data.CabinHumidity = gy39_data.CarbinHumidity;
 80011a0:	4b4a      	ldr	r3, [pc, #296]	; (80012cc <Thread_ReportEntry+0x1cc>)
 80011a2:	885a      	ldrh	r2, [r3, #2]
 80011a4:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011a6:	819a      	strh	r2, [r3, #12]

		report_data.AccNum[0] = wt931_data.Acceleration[0];
 80011a8:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011aa:	881a      	ldrh	r2, [r3, #0]
 80011ac:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011ae:	81da      	strh	r2, [r3, #14]
		report_data.AccNum[1] = wt931_data.Acceleration[1];
 80011b0:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011b2:	885a      	ldrh	r2, [r3, #2]
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011b6:	821a      	strh	r2, [r3, #16]
		report_data.AccNum[2] = wt931_data.Acceleration[2];
 80011b8:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011ba:	889a      	ldrh	r2, [r3, #4]
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011be:	825a      	strh	r2, [r3, #18]
		report_data.RotNum[0] = wt931_data.AngularSpeed[0];
 80011c0:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011c2:	88da      	ldrh	r2, [r3, #6]
 80011c4:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011c6:	829a      	strh	r2, [r3, #20]
		report_data.RotNum[1] = wt931_data.AngularSpeed[1];
 80011c8:	4b42      	ldr	r3, [pc, #264]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011ca:	891a      	ldrh	r2, [r3, #8]
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011ce:	82da      	strh	r2, [r3, #22]
		report_data.RotNum[2] = wt931_data.AngularSpeed[2];
 80011d0:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011d2:	895a      	ldrh	r2, [r3, #10]
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011d6:	831a      	strh	r2, [r3, #24]
		report_data.EulNum[0] = wt931_data.EulerAngle[0];
 80011d8:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011da:	899a      	ldrh	r2, [r3, #12]
 80011dc:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011de:	835a      	strh	r2, [r3, #26]
		report_data.EulNum[1] = wt931_data.EulerAngle[1];
 80011e0:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011e2:	89da      	ldrh	r2, [r3, #14]
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011e6:	839a      	strh	r2, [r3, #28]
		report_data.EulNum[2] = wt931_data.EulerAngle[2];
 80011e8:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011ea:	8a1a      	ldrh	r2, [r3, #16]
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011ee:	83da      	strh	r2, [r3, #30]
		report_data.MagNum[0] = wt931_data.MagneticValue[0];
 80011f0:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011f2:	8a5a      	ldrh	r2, [r3, #18]
 80011f4:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011f6:	841a      	strh	r2, [r3, #32]
		report_data.MagNum[1] = wt931_data.MagneticValue[1];
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 80011fa:	8a9a      	ldrh	r2, [r3, #20]
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 80011fe:	845a      	strh	r2, [r3, #34]	; 0x22
		report_data.MagNum[2] = wt931_data.MagneticValue[2];
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <Thread_ReportEntry+0x1d4>)
 8001202:	8ada      	ldrh	r2, [r3, #22]
 8001204:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 8001206:	849a      	strh	r2, [r3, #36]	; 0x24

		report_data.SonarHeight = p30_data.SonarHeight;
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <Thread_ReportEntry+0x1e4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a2d      	ldr	r2, [pc, #180]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 800120e:	6293      	str	r3, [r2, #40]	; 0x28
		report_data.SonarConfidence = p30_data.Confidence;
 8001210:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <Thread_ReportEntry+0x1e4>)
 8001212:	891a      	ldrh	r2, [r3, #8]
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 8001216:	859a      	strh	r2, [r3, #44]	; 0x2c

		report_data.WaterTemperature = wd_data.WaterTemperature;
 8001218:	4b30      	ldr	r3, [pc, #192]	; (80012dc <Thread_ReportEntry+0x1dc>)
 800121a:	881a      	ldrh	r2, [r3, #0]
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 800121e:	85da      	strh	r2, [r3, #46]	; 0x2e
		if (wd_data.is_signed == 0x00) //negative
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <Thread_ReportEntry+0x1dc>)
 8001222:	7a1b      	ldrb	r3, [r3, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <Thread_ReportEntry+0x130>
		{
			report_data.WaterDepth = (uint16_t) 0;
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 800122a:	2200      	movs	r2, #0
 800122c:	861a      	strh	r2, [r3, #48]	; 0x30
 800122e:	e003      	b.n	8001238 <Thread_ReportEntry+0x138>
		}
		else //positive or zero
		{
			report_data.WaterDepth = wd_data.WaterDepth; //positive numbers are correct
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <Thread_ReportEntry+0x1dc>)
 8001232:	895a      	ldrh	r2, [r3, #10]
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 8001236:	861a      	strh	r2, [r3, #48]	; 0x30
		}

		//send data to tx_buffer
		if (CARBIN_REPORT_SEL == 0) //send control carbin
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <Thread_ReportEntry+0x1f4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d120      	bne.n	8001282 <Thread_ReportEntry+0x182>
		{
			report_data.CabinFunction = 0x01;
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 8001242:	2201      	movs	r2, #1
 8001244:	705a      	strb	r2, [r3, #1]

			CaptureReportData(report_data, Report_TxBuffer);
 8001246:	4e1f      	ldr	r6, [pc, #124]	; (80012c4 <Thread_ReportEntry+0x1c4>)
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	930a      	str	r3, [sp, #40]	; 0x28
 800124e:	466d      	mov	r5, sp
 8001250:	f106 0410 	add.w	r4, r6, #16
 8001254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800125a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800125c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001260:	e885 0003 	stmia.w	r5, {r0, r1}
 8001264:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001268:	f009 fffc 	bl	800b264 <CaptureReportData>

			HAL_UART_Transmit_DMA(&Master_UART, Report_TxBuffer,
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	222f      	movs	r2, #47	; 0x2f
 8001272:	4619      	mov	r1, r3
 8001274:	4820      	ldr	r0, [pc, #128]	; (80012f8 <Thread_ReportEntry+0x1f8>)
 8001276:	f007 fe0f 	bl	8008e98 <HAL_UART_Transmit_DMA>
					sizeof(Report_TxBuffer));
			CARBIN_REPORT_SEL = 1;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <Thread_ReportEntry+0x1f4>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e01c      	b.n	80012bc <Thread_ReportEntry+0x1bc>
		}
		else //send power carbin
		{
			CaptureReportData(rpt_data_powcarbin, Report_TxBuffer);
 8001282:	4e1a      	ldr	r6, [pc, #104]	; (80012ec <Thread_ReportEntry+0x1ec>)
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	930a      	str	r3, [sp, #40]	; 0x28
 800128a:	466d      	mov	r5, sp
 800128c:	f106 0410 	add.w	r4, r6, #16
 8001290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001298:	e894 0003 	ldmia.w	r4, {r0, r1}
 800129c:	e885 0003 	stmia.w	r5, {r0, r1}
 80012a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012a4:	f009 ffde 	bl	800b264 <CaptureReportData>

			HAL_UART_Transmit_DMA(&Master_UART, Report_TxBuffer,
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	222f      	movs	r2, #47	; 0x2f
 80012ae:	4619      	mov	r1, r3
 80012b0:	4811      	ldr	r0, [pc, #68]	; (80012f8 <Thread_ReportEntry+0x1f8>)
 80012b2:	f007 fdf1 	bl	8008e98 <HAL_UART_Transmit_DMA>
					sizeof(Report_TxBuffer));
			CARBIN_REPORT_SEL = 0;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <Thread_ReportEntry+0x1f4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
//		printf("conc:%d,%d\r\n",report_data.EulNum[0],report_data.CabinTemperature);
//		CaptureReportData(report_data, Report_TxBuffer);
//		HAL_UART_Transmit_DMA(&Master_UART, Report_TxBuffer, sizeof(Report_TxBuffer));

//		osDelay(100);
		osDelay(200); //wonderful delay
 80012bc:	20c8      	movs	r0, #200	; 0xc8
 80012be:	f00b f8f4 	bl	800c4aa <osDelay>
		xQueueReceive(GY39_QueueHandle, &gy39_data, 0);
 80012c2:	e73a      	b.n	800113a <Thread_ReportEntry+0x3a>
 80012c4:	240002d8 	.word	0x240002d8
 80012c8:	24005b08 	.word	0x24005b08
 80012cc:	24000310 	.word	0x24000310
 80012d0:	24005b04 	.word	0x24005b04
 80012d4:	2400031c 	.word	0x2400031c
 80012d8:	24004208 	.word	0x24004208
 80012dc:	24000334 	.word	0x24000334
 80012e0:	24006e90 	.word	0x24006e90
 80012e4:	24000340 	.word	0x24000340
 80012e8:	24006d9c 	.word	0x24006d9c
 80012ec:	2400034c 	.word	0x2400034c
 80012f0:	58021000 	.word	0x58021000
 80012f4:	24000384 	.word	0x24000384
 80012f8:	240095e8 	.word	0x240095e8

080012fc <Thread_CatchRptEntry>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Thread_CatchRptEntry(void const *argument)
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b0b6      	sub	sp, #216	; 0xd8
 8001300:	af00      	add	r7, sp, #0
 8001302:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Report_RxBuffer[2 * Slave_UART_RXLen] =
 8001304:	2300      	movs	r3, #0
 8001306:	67bb      	str	r3, [r7, #120]	; 0x78
 8001308:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800130c:	225a      	movs	r2, #90	; 0x5a
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f00d fc1d 	bl	800eb50 <memset>
	{ 0 };
	ReportData_t rpt_data;

	__HAL_UART_ENABLE_IT(&Slave_UART, UART_IT_IDLE);
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <Thread_CatchRptEntry+0xb8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <Thread_CatchRptEntry+0xb8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0210 	orr.w	r2, r2, #16
 8001324:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Slave_UART, Report_RxBuffer, sizeof(Report_RxBuffer));
 8001326:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800132a:	225e      	movs	r2, #94	; 0x5e
 800132c:	4619      	mov	r1, r3
 800132e:	4821      	ldr	r0, [pc, #132]	; (80013b4 <Thread_CatchRptEntry+0xb8>)
 8001330:	f007 fe44 	bl	8008fbc <HAL_UART_Receive_DMA>
	for (;;)
	{
		if (xSemaphoreTake(RPT_DONE_semHandle, 0) == pdTRUE)
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <Thread_CatchRptEntry+0xbc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00b fd7e 	bl	800ce3c <xQueueSemaphoreTake>
 8001340:	4603      	mov	r3, r0
 8001342:	2b01      	cmp	r3, #1
 8001344:	d131      	bne.n	80013aa <Thread_CatchRptEntry+0xae>
		{
			rpt_data = ReportDataAnalysis(Report_RxBuffer);
 8001346:	463b      	mov	r3, r7
 8001348:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f00a f8ac 	bl	800b4ac <ReportDataAnalysis>
 8001354:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001358:	463d      	mov	r5, r7
 800135a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001366:	e895 0003 	ldmia.w	r5, {r0, r1}
 800136a:	e884 0003 	stmia.w	r4, {r0, r1}

			xQueueSendToFront(Rpt_QueueHandle, (void* )&rpt_data, 0);
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <Thread_CatchRptEntry+0xc0>)
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001376:	2301      	movs	r3, #1
 8001378:	2200      	movs	r2, #0
 800137a:	f00b faf3 	bl	800c964 <xQueueGenericSend>

			memset(&Report_RxBuffer, 0, sizeof(Report_RxBuffer));
 800137e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001382:	225e      	movs	r2, #94	; 0x5e
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f00d fbe2 	bl	800eb50 <memset>
			__HAL_UART_ENABLE_IT(&Slave_UART, UART_IT_IDLE);
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <Thread_CatchRptEntry+0xb8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <Thread_CatchRptEntry+0xb8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0210 	orr.w	r2, r2, #16
 800139a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&Slave_UART, Report_RxBuffer,
 800139c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013a0:	225e      	movs	r2, #94	; 0x5e
 80013a2:	4619      	mov	r1, r3
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <Thread_CatchRptEntry+0xb8>)
 80013a6:	f007 fe09 	bl	8008fbc <HAL_UART_Receive_DMA>
					sizeof(Report_RxBuffer));
		}
		osDelay(50);
 80013aa:	2032      	movs	r0, #50	; 0x32
 80013ac:	f00b f87d 	bl	800c4aa <osDelay>
		if (xSemaphoreTake(RPT_DONE_semHandle, 0) == pdTRUE)
 80013b0:	e7c0      	b.n	8001334 <Thread_CatchRptEntry+0x38>
 80013b2:	bf00      	nop
 80013b4:	240096f0 	.word	0x240096f0
 80013b8:	24005bd8 	.word	0x24005bd8
 80013bc:	24006d9c 	.word	0x24006d9c

080013c0 <Thread_CatchCmdEntry>:
	}
}

void Thread_CatchCmdEntry(void const *argument)
{
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b09a      	sub	sp, #104	; 0x68
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint8_t Command_RxBuffer[2 * Master_UART_RXLen] =
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <Thread_CatchCmdEntry+0xa8>)
 80013ca:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80013ce:	461d      	mov	r5, r3
 80013d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			0x05, 0xDC, 0x05, 0xDC, 0x05, 0xDC, 0x05, 0xDC, 0x05, 0xDC, 0x05,
			0xDC, 0x00, 0x00, 0x21 };

	ControlData_t control_data;

	__HAL_UART_ENABLE_IT(&Master_UART, UART_IT_IDLE);
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <Thread_CatchCmdEntry+0xac>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <Thread_CatchCmdEntry+0xac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0210 	orr.w	r2, r2, #16
 80013f2:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Master_UART, Command_RxBuffer,
 80013f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f8:	223c      	movs	r2, #60	; 0x3c
 80013fa:	4619      	mov	r1, r3
 80013fc:	481b      	ldr	r0, [pc, #108]	; (800146c <Thread_CatchCmdEntry+0xac>)
 80013fe:	f007 fddd 	bl	8008fbc <HAL_UART_Receive_DMA>
			sizeof(Command_RxBuffer));
	for (;;)
	{
		if (xSemaphoreTake(CMD_DONE_semHandle, 0) == pdTRUE)
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <Thread_CatchCmdEntry+0xb0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00b fd17 	bl	800ce3c <xQueueSemaphoreTake>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d125      	bne.n	8001460 <Thread_CatchCmdEntry+0xa0>
		{
			CaptureControlData(&control_data, Command_RxBuffer);
 8001414:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f00a fa44 	bl	800b8ac <CaptureControlData>

			xQueueSendToFront(Cmd_QueueHandle, (void* )&control_data, 0);
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <Thread_CatchCmdEntry+0xb4>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	f107 010c 	add.w	r1, r7, #12
 800142c:	2301      	movs	r3, #1
 800142e:	2200      	movs	r2, #0
 8001430:	f00b fa98 	bl	800c964 <xQueueGenericSend>

			memset(&Command_RxBuffer, 0, sizeof(Command_RxBuffer));
 8001434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001438:	223c      	movs	r2, #60	; 0x3c
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f00d fb87 	bl	800eb50 <memset>
			__HAL_UART_ENABLE_IT(&Master_UART, UART_IT_IDLE);
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <Thread_CatchCmdEntry+0xac>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <Thread_CatchCmdEntry+0xac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0210 	orr.w	r2, r2, #16
 8001450:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&Master_UART, Command_RxBuffer,
 8001452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001456:	223c      	movs	r2, #60	; 0x3c
 8001458:	4619      	mov	r1, r3
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <Thread_CatchCmdEntry+0xac>)
 800145c:	f007 fdae 	bl	8008fbc <HAL_UART_Receive_DMA>
					sizeof(Command_RxBuffer));
		}
		osDelay(10);
 8001460:	200a      	movs	r0, #10
 8001462:	f00b f822 	bl	800c4aa <osDelay>
		if (xSemaphoreTake(CMD_DONE_semHandle, 0) == pdTRUE)
 8001466:	e7cc      	b.n	8001402 <Thread_CatchCmdEntry+0x42>
 8001468:	0800ed78 	.word	0x0800ed78
 800146c:	240095e8 	.word	0x240095e8
 8001470:	24006508 	.word	0x24006508
 8001474:	24006e40 	.word	0x24006e40

08001478 <MX_GPIO_Init>:
     PA8   ------> S_TIM1_CH1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <MX_GPIO_Init+0x140>)
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001494:	4a48      	ldr	r2, [pc, #288]	; (80015b8 <MX_GPIO_Init+0x140>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <MX_GPIO_Init+0x140>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ac:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <MX_GPIO_Init+0x140>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b2:	4a41      	ldr	r2, [pc, #260]	; (80015b8 <MX_GPIO_Init+0x140>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014bc:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <MX_GPIO_Init+0x140>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <MX_GPIO_Init+0x140>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d0:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <MX_GPIO_Init+0x140>)
 80014d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014da:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <MX_GPIO_Init+0x140>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <MX_GPIO_Init+0x140>)
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ee:	4a32      	ldr	r2, [pc, #200]	; (80015b8 <MX_GPIO_Init+0x140>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <MX_GPIO_Init+0x140>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <MX_GPIO_Init+0x140>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150c:	4a2a      	ldr	r2, [pc, #168]	; (80015b8 <MX_GPIO_Init+0x140>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <MX_GPIO_Init+0x140>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2110      	movs	r1, #16
 8001528:	4824      	ldr	r0, [pc, #144]	; (80015bc <MX_GPIO_Init+0x144>)
 800152a:	f004 fdc1 	bl	80060b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001534:	4822      	ldr	r0, [pc, #136]	; (80015c0 <MX_GPIO_Init+0x148>)
 8001536:	f004 fdbb 	bl	80060b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800153a:	2310      	movs	r3, #16
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	481a      	ldr	r0, [pc, #104]	; (80015bc <MX_GPIO_Init+0x144>)
 8001552:	f004 fbe5 	bl	8005d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001556:	2340      	movs	r3, #64	; 0x40
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4814      	ldr	r0, [pc, #80]	; (80015bc <MX_GPIO_Init+0x144>)
 800156a:	f004 fbd9 	bl	8005d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800156e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001578:	2301      	movs	r3, #1
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <MX_GPIO_Init+0x148>)
 8001588:	f004 fbca 	bl	8005d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800158c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159a:	2302      	movs	r3, #2
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800159e:	2301      	movs	r3, #1
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <MX_GPIO_Init+0x14c>)
 80015aa:	f004 fbb9 	bl	8005d20 <HAL_GPIO_Init>

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58021000 	.word	0x58021000
 80015c0:	58020800 	.word	0x58020800
 80015c4:	58020000 	.word	0x58020000

080015c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015cc:	f001 fc0c 	bl	8002de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d0:	f000 f820 	bl	8001614 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015d4:	f000 f8a2 	bl	800171c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d8:	f7ff ff4e 	bl	8001478 <MX_GPIO_Init>
  MX_DMA_Init();
 80015dc:	f7fe fffc 	bl	80005d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80015e0:	f000 ff6c 	bl	80024bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015e4:	f000 ffb6 	bl	8002554 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80015e8:	f001 f800 	bl	80025ec <MX_USART3_UART_Init>
  MX_UART4_Init();
 80015ec:	f000 fe82 	bl	80022f4 <MX_UART4_Init>
  MX_UART8_Init();
 80015f0:	f000 ff18 	bl	8002424 <MX_UART8_Init>
  MX_UART5_Init();
 80015f4:	f000 feca 	bl	800238c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <main+0x48>)
 8001600:	f004 fd56 	bl	80060b0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001604:	f7ff f898 	bl	8000738 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001608:	f00a fefc 	bl	800c404 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800160c:	e7fe      	b.n	800160c <main+0x44>
 800160e:	bf00      	nop
 8001610:	58020800 	.word	0x58020800

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b09c      	sub	sp, #112	; 0x70
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	224c      	movs	r2, #76	; 0x4c
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f00d fa94 	bl	800eb50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2220      	movs	r2, #32
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f00d fa8e 	bl	800eb50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001634:	2002      	movs	r0, #2
 8001636:	f004 fd6f 	bl	8006118 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b34      	ldr	r3, [pc, #208]	; (8001710 <SystemClock_Config+0xfc>)
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	4a33      	ldr	r2, [pc, #204]	; (8001710 <SystemClock_Config+0xfc>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	62d3      	str	r3, [r2, #44]	; 0x2c
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <SystemClock_Config+0xfc>)
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <SystemClock_Config+0x100>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a2e      	ldr	r2, [pc, #184]	; (8001714 <SystemClock_Config+0x100>)
 800165a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <SystemClock_Config+0x100>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800166c:	bf00      	nop
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <SystemClock_Config+0x100>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800167a:	d1f8      	bne.n	800166e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <SystemClock_Config+0x104>)
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	f023 0303 	bic.w	r3, r3, #3
 8001684:	4a24      	ldr	r2, [pc, #144]	; (8001718 <SystemClock_Config+0x104>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800168c:	2301      	movs	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001696:	2302      	movs	r3, #2
 8001698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169a:	2302      	movs	r3, #2
 800169c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800169e:	2305      	movs	r3, #5
 80016a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80016a2:	23a0      	movs	r3, #160	; 0xa0
 80016a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016b2:	2308      	movs	r3, #8
 80016b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fd62 	bl	800618c <HAL_RCC_OscConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80016ce:	f000 f863 	bl	8001798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d2:	233f      	movs	r3, #63	; 0x3f
 80016d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d6:	2303      	movs	r3, #3
 80016d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016de:	2308      	movs	r3, #8
 80016e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016e2:	2340      	movs	r3, #64	; 0x40
 80016e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016e6:	2340      	movs	r3, #64	; 0x40
 80016e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016f0:	2340      	movs	r3, #64	; 0x40
 80016f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2102      	movs	r1, #2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f005 f973 	bl	80069e4 <HAL_RCC_ClockConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001704:	f000 f848 	bl	8001798 <Error_Handler>
  }
}
 8001708:	bf00      	nop
 800170a:	3770      	adds	r7, #112	; 0x70
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	58000400 	.word	0x58000400
 8001714:	58024800 	.word	0x58024800
 8001718:	58024400 	.word	0x58024400

0800171c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0b0      	sub	sp, #192	; 0xc0
 8001720:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	22bc      	movs	r2, #188	; 0xbc
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f00d fa11 	bl	800eb50 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART8
 800172e:	2303      	movs	r3, #3
 8001730:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001732:	2319      	movs	r3, #25
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001736:	23c0      	movs	r3, #192	; 0xc0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800173a:	2302      	movs	r3, #2
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800173e:	2302      	movs	r3, #2
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001742:	2302      	movs	r3, #2
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001746:	2300      	movs	r3, #0
 8001748:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800174a:	2300      	movs	r3, #0
 800174c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8001752:	2302      	movs	r3, #2
 8001754:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8001756:	2310      	movs	r3, #16
 8001758:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4618      	mov	r0, r3
 800175e:	f005 fd0f 	bl	8007180 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8001768:	f000 f816 	bl	8001798 <Error_Handler>
  }
}
 800176c:	bf00      	nop
 800176e:	37c0      	adds	r7, #192	; 0xc0
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001786:	f001 fb6b 	bl	8002e60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40001000 	.word	0x40001000

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>
	...

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_MspInit+0x38>)
 80017ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_MspInit+0x38>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_MspInit+0x38>)
 80017bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	210f      	movs	r1, #15
 80017cc:	f06f 0001 	mvn.w	r0, #1
 80017d0:	f001 fc2a 	bl	8003028 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	58024400 	.word	0x58024400

080017e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b090      	sub	sp, #64	; 0x40
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	d827      	bhi.n	800183e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80017ee:	2200      	movs	r2, #0
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	2036      	movs	r0, #54	; 0x36
 80017f4:	f001 fc18 	bl	8003028 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017f8:	2036      	movs	r0, #54	; 0x36
 80017fa:	f001 fc2f 	bl	800305c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80017fe:	4a29      	ldr	r2, [pc, #164]	; (80018a4 <HAL_InitTick+0xc4>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_InitTick+0xc8>)
 8001806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800180a:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <HAL_InitTick+0xc8>)
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_InitTick+0xc8>)
 8001816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001822:	f107 0210 	add.w	r2, r7, #16
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f005 fc65 	bl	80070fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <HAL_InitTick+0x6a>
 800183c:	e001      	b.n	8001842 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e02b      	b.n	800189a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001842:	f005 fc2f 	bl	80070a4 <HAL_RCC_GetPCLK1Freq>
 8001846:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001848:	e004      	b.n	8001854 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800184a:	f005 fc2b 	bl	80070a4 <HAL_RCC_GetPCLK1Freq>
 800184e:	4603      	mov	r3, r0
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <HAL_InitTick+0xcc>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	0c9b      	lsrs	r3, r3, #18
 800185e:	3b01      	subs	r3, #1
 8001860:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_InitTick+0xd0>)
 8001864:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <HAL_InitTick+0xd4>)
 8001866:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_InitTick+0xd0>)
 800186a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800186e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001870:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_InitTick+0xd0>)
 8001872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001874:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_InitTick+0xd0>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_InitTick+0xd0>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001882:	480b      	ldr	r0, [pc, #44]	; (80018b0 <HAL_InitTick+0xd0>)
 8001884:	f006 ffde 	bl	8008844 <HAL_TIM_Base_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d104      	bne.n	8001898 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800188e:	4808      	ldr	r0, [pc, #32]	; (80018b0 <HAL_InitTick+0xd0>)
 8001890:	f007 f83a 	bl	8008908 <HAL_TIM_Base_Start_IT>
 8001894:	4603      	mov	r3, r0
 8001896:	e000      	b.n	800189a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	3740      	adds	r7, #64	; 0x40
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	24000028 	.word	0x24000028
 80018a8:	58024400 	.word	0x58024400
 80018ac:	431bde83 	.word	0x431bde83
 80018b0:	24009134 	.word	0x24009134
 80018b4:	40001000 	.word	0x40001000

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler+0x4>
	...

080018c0 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
	{
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //error: light up
 80018c4:	2201      	movs	r2, #1
 80018c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ca:	4802      	ldr	r0, [pc, #8]	; (80018d4 <HardFault_Handler+0x14>)
 80018cc:	f004 fbf0 	bl	80060b0 <HAL_GPIO_WritePin>
 80018d0:	e7f8      	b.n	80018c4 <HardFault_Handler+0x4>
 80018d2:	bf00      	nop
 80018d4:	58020800 	.word	0x58020800

080018d8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler+0x4>

080018de <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80018e8:	e7fe      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ea <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <DMA1_Stream0_IRQHandler+0x10>)
 80018fe:	f002 fee3 	bl	80046c8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	24009480 	.word	0x24009480

0800190c <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <DMA1_Stream1_IRQHandler+0x10>)
 8001912:	f002 fed9 	bl	80046c8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	24009378 	.word	0x24009378

08001920 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA1_Stream2_IRQHandler+0x10>)
 8001926:	f002 fecf 	bl	80046c8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	240091f8 	.word	0x240091f8

08001934 <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <DMA1_Stream3_IRQHandler+0x10>)
 800193a:	f002 fec5 	bl	80046c8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	24009270 	.word	0x24009270

08001948 <DMA1_Stream4_IRQHandler>:

/**
 * @brief This function handles DMA1 stream4 global interrupt.
 */
void DMA1_Stream4_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

	/* USER CODE END DMA1_Stream4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA1_Stream4_IRQHandler+0x10>)
 800194e:	f002 febb 	bl	80046c8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

	/* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	240098a0 	.word	0x240098a0

0800195c <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <DMA1_Stream5_IRQHandler+0x10>)
 8001962:	f002 feb1 	bl	80046c8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	24009180 	.word	0x24009180

08001970 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&Master_UART, UART_FLAG_IDLE);
 800197a:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <USART1_IRQHandler+0x10c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	2b10      	cmp	r3, #16
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d06b      	beq.n	8001a6e <USART1_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&Master_UART);
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <USART1_IRQHandler+0x10c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2210      	movs	r2, #16
 800199c:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <USART1_IRQHandler+0x110>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a38      	ldr	r2, [pc, #224]	; (8001a84 <USART1_IRQHandler+0x114>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d04a      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 80019a8:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <USART1_IRQHandler+0x110>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a36      	ldr	r2, [pc, #216]	; (8001a88 <USART1_IRQHandler+0x118>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d045      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 80019b2:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <USART1_IRQHandler+0x110>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a35      	ldr	r2, [pc, #212]	; (8001a8c <USART1_IRQHandler+0x11c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d040      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 80019bc:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <USART1_IRQHandler+0x110>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a33      	ldr	r2, [pc, #204]	; (8001a90 <USART1_IRQHandler+0x120>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d03b      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <USART1_IRQHandler+0x110>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a32      	ldr	r2, [pc, #200]	; (8001a94 <USART1_IRQHandler+0x124>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d036      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 80019d0:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <USART1_IRQHandler+0x110>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a30      	ldr	r2, [pc, #192]	; (8001a98 <USART1_IRQHandler+0x128>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d031      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <USART1_IRQHandler+0x110>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <USART1_IRQHandler+0x12c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d02c      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <USART1_IRQHandler+0x110>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <USART1_IRQHandler+0x130>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d027      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <USART1_IRQHandler+0x110>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2c      	ldr	r2, [pc, #176]	; (8001aa4 <USART1_IRQHandler+0x134>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <USART1_IRQHandler+0x110>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <USART1_IRQHandler+0x138>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01d      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <USART1_IRQHandler+0x110>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a29      	ldr	r2, [pc, #164]	; (8001aac <USART1_IRQHandler+0x13c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d018      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <USART1_IRQHandler+0x110>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <USART1_IRQHandler+0x140>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <USART1_IRQHandler+0x110>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <USART1_IRQHandler+0x144>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00e      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <USART1_IRQHandler+0x110>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <USART1_IRQHandler+0x148>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d009      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <USART1_IRQHandler+0x110>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a23      	ldr	r2, [pc, #140]	; (8001abc <USART1_IRQHandler+0x14c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d004      	beq.n	8001a3e <USART1_IRQHandler+0xce>
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <USART1_IRQHandler+0x110>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a21      	ldr	r2, [pc, #132]	; (8001ac0 <USART1_IRQHandler+0x150>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d103      	bne.n	8001a46 <USART1_IRQHandler+0xd6>
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <USART1_IRQHandler+0x110>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	e002      	b.n	8001a4c <USART1_IRQHandler+0xdc>
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <USART1_IRQHandler+0x110>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&Master_UART);
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <USART1_IRQHandler+0x10c>)
 8001a4e:	f007 fb0b 	bl	8009068 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&Master_UART, UART_IT_IDLE);
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <USART1_IRQHandler+0x10c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <USART1_IRQHandler+0x10c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0210 	bic.w	r2, r2, #16
 8001a60:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(CMD_DONE_semHandle, pdFALSE);
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <USART1_IRQHandler+0x154>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00b f879 	bl	800cb60 <xQueueGiveFromISR>
	}

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <USART1_IRQHandler+0x10c>)
 8001a70:	f007 fb8e 	bl	8009190 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	240095e8 	.word	0x240095e8
 8001a80:	24009480 	.word	0x24009480
 8001a84:	40020010 	.word	0x40020010
 8001a88:	40020028 	.word	0x40020028
 8001a8c:	40020040 	.word	0x40020040
 8001a90:	40020058 	.word	0x40020058
 8001a94:	40020070 	.word	0x40020070
 8001a98:	40020088 	.word	0x40020088
 8001a9c:	400200a0 	.word	0x400200a0
 8001aa0:	400200b8 	.word	0x400200b8
 8001aa4:	40020410 	.word	0x40020410
 8001aa8:	40020428 	.word	0x40020428
 8001aac:	40020440 	.word	0x40020440
 8001ab0:	40020458 	.word	0x40020458
 8001ab4:	40020470 	.word	0x40020470
 8001ab8:	40020488 	.word	0x40020488
 8001abc:	400204a0 	.word	0x400204a0
 8001ac0:	400204b8 	.word	0x400204b8
 8001ac4:	24006508 	.word	0x24006508

08001ac8 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&TEMPER_UART, UART_FLAG_IDLE);
 8001ad2:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <USART2_IRQHandler+0x10c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d06b      	beq.n	8001bc6 <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&TEMPER_UART);
 8001aee:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <USART2_IRQHandler+0x10c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2210      	movs	r2, #16
 8001af4:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a38      	ldr	r2, [pc, #224]	; (8001bdc <USART2_IRQHandler+0x114>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d04a      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b00:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a36      	ldr	r2, [pc, #216]	; (8001be0 <USART2_IRQHandler+0x118>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d045      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a35      	ldr	r2, [pc, #212]	; (8001be4 <USART2_IRQHandler+0x11c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d040      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a33      	ldr	r2, [pc, #204]	; (8001be8 <USART2_IRQHandler+0x120>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d03b      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a32      	ldr	r2, [pc, #200]	; (8001bec <USART2_IRQHandler+0x124>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d036      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a30      	ldr	r2, [pc, #192]	; (8001bf0 <USART2_IRQHandler+0x128>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d031      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a2f      	ldr	r2, [pc, #188]	; (8001bf4 <USART2_IRQHandler+0x12c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d02c      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <USART2_IRQHandler+0x130>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d027      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2c      	ldr	r2, [pc, #176]	; (8001bfc <USART2_IRQHandler+0x134>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d022      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2a      	ldr	r2, [pc, #168]	; (8001c00 <USART2_IRQHandler+0x138>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01d      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a29      	ldr	r2, [pc, #164]	; (8001c04 <USART2_IRQHandler+0x13c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d018      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a27      	ldr	r2, [pc, #156]	; (8001c08 <USART2_IRQHandler+0x140>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <USART2_IRQHandler+0x144>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d00e      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a24      	ldr	r2, [pc, #144]	; (8001c10 <USART2_IRQHandler+0x148>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d009      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <USART2_IRQHandler+0x14c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d004      	beq.n	8001b96 <USART2_IRQHandler+0xce>
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <USART2_IRQHandler+0x150>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d103      	bne.n	8001b9e <USART2_IRQHandler+0xd6>
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	e002      	b.n	8001ba4 <USART2_IRQHandler+0xdc>
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <USART2_IRQHandler+0x110>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&TEMPER_UART);
 8001ba4:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <USART2_IRQHandler+0x10c>)
 8001ba6:	f007 fa5f 	bl	8009068 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&TEMPER_UART, UART_IT_IDLE);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <USART2_IRQHandler+0x10c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <USART2_IRQHandler+0x10c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0210 	bic.w	r2, r2, #16
 8001bb8:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39_DONE_semHandle, pdFALSE);
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <USART2_IRQHandler+0x154>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f00a ffcd 	bl	800cb60 <xQueueGiveFromISR>
	}

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <USART2_IRQHandler+0x10c>)
 8001bc8:	f007 fae2 	bl	8009190 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	24009810 	.word	0x24009810
 8001bd8:	240091f8 	.word	0x240091f8
 8001bdc:	40020010 	.word	0x40020010
 8001be0:	40020028 	.word	0x40020028
 8001be4:	40020040 	.word	0x40020040
 8001be8:	40020058 	.word	0x40020058
 8001bec:	40020070 	.word	0x40020070
 8001bf0:	40020088 	.word	0x40020088
 8001bf4:	400200a0 	.word	0x400200a0
 8001bf8:	400200b8 	.word	0x400200b8
 8001bfc:	40020410 	.word	0x40020410
 8001c00:	40020428 	.word	0x40020428
 8001c04:	40020440 	.word	0x40020440
 8001c08:	40020458 	.word	0x40020458
 8001c0c:	40020470 	.word	0x40020470
 8001c10:	40020488 	.word	0x40020488
 8001c14:	400204a0 	.word	0x400204a0
 8001c18:	400204b8 	.word	0x400204b8
 8001c1c:	24005b0c 	.word	0x24005b0c

08001c20 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&AXIS_UART, UART_FLAG_IDLE);
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <USART3_IRQHandler+0x10c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b10      	cmp	r3, #16
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d06b      	beq.n	8001d1e <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&AXIS_UART);
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <USART3_IRQHandler+0x10c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8001c4e:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a38      	ldr	r2, [pc, #224]	; (8001d34 <USART3_IRQHandler+0x114>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d04a      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001c58:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a36      	ldr	r2, [pc, #216]	; (8001d38 <USART3_IRQHandler+0x118>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d045      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a35      	ldr	r2, [pc, #212]	; (8001d3c <USART3_IRQHandler+0x11c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d040      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001c6c:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a33      	ldr	r2, [pc, #204]	; (8001d40 <USART3_IRQHandler+0x120>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d03b      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001c76:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <USART3_IRQHandler+0x124>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d036      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a30      	ldr	r2, [pc, #192]	; (8001d48 <USART3_IRQHandler+0x128>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d031      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <USART3_IRQHandler+0x12c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d02c      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2d      	ldr	r2, [pc, #180]	; (8001d50 <USART3_IRQHandler+0x130>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d027      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2c      	ldr	r2, [pc, #176]	; (8001d54 <USART3_IRQHandler+0x134>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d022      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2a      	ldr	r2, [pc, #168]	; (8001d58 <USART3_IRQHandler+0x138>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01d      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a29      	ldr	r2, [pc, #164]	; (8001d5c <USART3_IRQHandler+0x13c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d018      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <USART3_IRQHandler+0x140>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <USART3_IRQHandler+0x144>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00e      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <USART3_IRQHandler+0x148>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d009      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <USART3_IRQHandler+0x14c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d004      	beq.n	8001cee <USART3_IRQHandler+0xce>
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <USART3_IRQHandler+0x150>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d103      	bne.n	8001cf6 <USART3_IRQHandler+0xd6>
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	e002      	b.n	8001cfc <USART3_IRQHandler+0xdc>
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <USART3_IRQHandler+0x110>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&AXIS_UART);
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <USART3_IRQHandler+0x10c>)
 8001cfe:	f007 f9b3 	bl	8009068 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&AXIS_UART, UART_IT_IDLE);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <USART3_IRQHandler+0x10c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <USART3_IRQHandler+0x10c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0210 	bic.w	r2, r2, #16
 8001d10:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931_DONE_semHandle, pdFALSE);
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <USART3_IRQHandler+0x154>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f00a ff21 	bl	800cb60 <xQueueGiveFromISR>
	}

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8001d1e:	4803      	ldr	r0, [pc, #12]	; (8001d2c <USART3_IRQHandler+0x10c>)
 8001d20:	f007 fa36 	bl	8009190 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	240092e8 	.word	0x240092e8
 8001d30:	24009270 	.word	0x24009270
 8001d34:	40020010 	.word	0x40020010
 8001d38:	40020028 	.word	0x40020028
 8001d3c:	40020040 	.word	0x40020040
 8001d40:	40020058 	.word	0x40020058
 8001d44:	40020070 	.word	0x40020070
 8001d48:	40020088 	.word	0x40020088
 8001d4c:	400200a0 	.word	0x400200a0
 8001d50:	400200b8 	.word	0x400200b8
 8001d54:	40020410 	.word	0x40020410
 8001d58:	40020428 	.word	0x40020428
 8001d5c:	40020440 	.word	0x40020440
 8001d60:	40020458 	.word	0x40020458
 8001d64:	40020470 	.word	0x40020470
 8001d68:	40020488 	.word	0x40020488
 8001d6c:	400204a0 	.word	0x400204a0
 8001d70:	400204b8 	.word	0x400204b8
 8001d74:	240041e4 	.word	0x240041e4

08001d78 <DMA1_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA1 stream7 global interrupt.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <DMA1_Stream7_IRQHandler+0x10>)
 8001d7e:	f002 fca3 	bl	80046c8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

	/* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	24009570 	.word	0x24009570

08001d8c <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&Deep_UART, UART_FLAG_IDLE);
 8001d96:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <UART4_IRQHandler+0x10c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d06b      	beq.n	8001e8a <UART4_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&Deep_UART);
 8001db2:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <UART4_IRQHandler+0x10c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2210      	movs	r2, #16
 8001db8:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a38      	ldr	r2, [pc, #224]	; (8001ea0 <UART4_IRQHandler+0x114>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d04a      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001dc4:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a36      	ldr	r2, [pc, #216]	; (8001ea4 <UART4_IRQHandler+0x118>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d045      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001dce:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <UART4_IRQHandler+0x11c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d040      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001dd8:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a33      	ldr	r2, [pc, #204]	; (8001eac <UART4_IRQHandler+0x120>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d03b      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <UART4_IRQHandler+0x124>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d036      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a30      	ldr	r2, [pc, #192]	; (8001eb4 <UART4_IRQHandler+0x128>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d031      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <UART4_IRQHandler+0x12c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d02c      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <UART4_IRQHandler+0x130>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d027      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a2c      	ldr	r2, [pc, #176]	; (8001ec0 <UART4_IRQHandler+0x134>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d022      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001e14:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <UART4_IRQHandler+0x138>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01d      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <UART4_IRQHandler+0x13c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d018      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <UART4_IRQHandler+0x140>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <UART4_IRQHandler+0x144>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00e      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a24      	ldr	r2, [pc, #144]	; (8001ed4 <UART4_IRQHandler+0x148>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d009      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <UART4_IRQHandler+0x14c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d004      	beq.n	8001e5a <UART4_IRQHandler+0xce>
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a21      	ldr	r2, [pc, #132]	; (8001edc <UART4_IRQHandler+0x150>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d103      	bne.n	8001e62 <UART4_IRQHandler+0xd6>
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	e002      	b.n	8001e68 <UART4_IRQHandler+0xdc>
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <UART4_IRQHandler+0x110>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&Deep_UART);
 8001e68:	480b      	ldr	r0, [pc, #44]	; (8001e98 <UART4_IRQHandler+0x10c>)
 8001e6a:	f007 f8fd 	bl	8009068 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&Deep_UART, UART_IT_IDLE);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <UART4_IRQHandler+0x10c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <UART4_IRQHandler+0x10c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0210 	bic.w	r2, r2, #16
 8001e7c:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WD_DONE_semHandle, pdFALSE);
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <UART4_IRQHandler+0x154>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00a fe6b 	bl	800cb60 <xQueueGiveFromISR>
	}

	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8001e8a:	4803      	ldr	r0, [pc, #12]	; (8001e98 <UART4_IRQHandler+0x10c>)
 8001e8c:	f007 f980 	bl	8009190 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	24009780 	.word	0x24009780
 8001e9c:	24009180 	.word	0x24009180
 8001ea0:	40020010 	.word	0x40020010
 8001ea4:	40020028 	.word	0x40020028
 8001ea8:	40020040 	.word	0x40020040
 8001eac:	40020058 	.word	0x40020058
 8001eb0:	40020070 	.word	0x40020070
 8001eb4:	40020088 	.word	0x40020088
 8001eb8:	400200a0 	.word	0x400200a0
 8001ebc:	400200b8 	.word	0x400200b8
 8001ec0:	40020410 	.word	0x40020410
 8001ec4:	40020428 	.word	0x40020428
 8001ec8:	40020440 	.word	0x40020440
 8001ecc:	40020458 	.word	0x40020458
 8001ed0:	40020470 	.word	0x40020470
 8001ed4:	40020488 	.word	0x40020488
 8001ed8:	400204a0 	.word	0x400204a0
 8001edc:	400204b8 	.word	0x400204b8
 8001ee0:	24006e3c 	.word	0x24006e3c

08001ee4 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&SONAR_HEIGHT_UART, UART_FLAG_IDLE);
 8001eee:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <UART5_IRQHandler+0x10c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06b      	beq.n	8001fe2 <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&SONAR_HEIGHT_UART);
 8001f0a:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <UART5_IRQHandler+0x10c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2210      	movs	r2, #16
 8001f10:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a38      	ldr	r2, [pc, #224]	; (8001ff8 <UART5_IRQHandler+0x114>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d04a      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f1c:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a36      	ldr	r2, [pc, #216]	; (8001ffc <UART5_IRQHandler+0x118>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d045      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f26:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a35      	ldr	r2, [pc, #212]	; (8002000 <UART5_IRQHandler+0x11c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d040      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f30:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a33      	ldr	r2, [pc, #204]	; (8002004 <UART5_IRQHandler+0x120>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d03b      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a32      	ldr	r2, [pc, #200]	; (8002008 <UART5_IRQHandler+0x124>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d036      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a30      	ldr	r2, [pc, #192]	; (800200c <UART5_IRQHandler+0x128>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f4e:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <UART5_IRQHandler+0x12c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d02c      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f58:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <UART5_IRQHandler+0x130>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d027      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f62:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <UART5_IRQHandler+0x134>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2a      	ldr	r2, [pc, #168]	; (800201c <UART5_IRQHandler+0x138>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01d      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f76:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a29      	ldr	r2, [pc, #164]	; (8002020 <UART5_IRQHandler+0x13c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d018      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a27      	ldr	r2, [pc, #156]	; (8002024 <UART5_IRQHandler+0x140>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a26      	ldr	r2, [pc, #152]	; (8002028 <UART5_IRQHandler+0x144>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00e      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <UART5_IRQHandler+0x148>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <UART5_IRQHandler+0x14c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d004      	beq.n	8001fb2 <UART5_IRQHandler+0xce>
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a21      	ldr	r2, [pc, #132]	; (8002034 <UART5_IRQHandler+0x150>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d103      	bne.n	8001fba <UART5_IRQHandler+0xd6>
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	e002      	b.n	8001fc0 <UART5_IRQHandler+0xdc>
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <UART5_IRQHandler+0x110>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&SONAR_HEIGHT_UART);
 8001fc0:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <UART5_IRQHandler+0x10c>)
 8001fc2:	f007 f851 	bl	8009068 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&SONAR_HEIGHT_UART, UART_IT_IDLE);
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <UART5_IRQHandler+0x10c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <UART5_IRQHandler+0x10c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0210 	bic.w	r2, r2, #16
 8001fd4:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(P30_DONE_semHandle, pdFALSE);
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <UART5_IRQHandler+0x154>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00a fdbf 	bl	800cb60 <xQueueGiveFromISR>
	}

	/* USER CODE END UART5_IRQn 0 */
	HAL_UART_IRQHandler(&huart5);
 8001fe2:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <UART5_IRQHandler+0x10c>)
 8001fe4:	f007 f8d4 	bl	8009190 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART5_IRQn 1 */

	/* USER CODE END UART5_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	240093f0 	.word	0x240093f0
 8001ff4:	240098a0 	.word	0x240098a0
 8001ff8:	40020010 	.word	0x40020010
 8001ffc:	40020028 	.word	0x40020028
 8002000:	40020040 	.word	0x40020040
 8002004:	40020058 	.word	0x40020058
 8002008:	40020070 	.word	0x40020070
 800200c:	40020088 	.word	0x40020088
 8002010:	400200a0 	.word	0x400200a0
 8002014:	400200b8 	.word	0x400200b8
 8002018:	40020410 	.word	0x40020410
 800201c:	40020428 	.word	0x40020428
 8002020:	40020440 	.word	0x40020440
 8002024:	40020458 	.word	0x40020458
 8002028:	40020470 	.word	0x40020470
 800202c:	40020488 	.word	0x40020488
 8002030:	400204a0 	.word	0x400204a0
 8002034:	400204b8 	.word	0x400204b8
 8002038:	2400912c 	.word	0x2400912c

0800203c <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <TIM6_DAC_IRQHandler+0x10>)
 8002042:	f006 fcd9 	bl	80089f8 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	24009134 	.word	0x24009134

08002050 <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <DMA2_Stream0_IRQHandler+0x10>)
 8002056:	f002 fb37 	bl	80046c8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	24009678 	.word	0x24009678

08002064 <DMA2_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA2 stream1 global interrupt.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	/* USER CODE END DMA2_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <DMA2_Stream1_IRQHandler+0x10>)
 800206a:	f002 fb2d 	bl	80046c8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

	/* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	240094f8 	.word	0x240094f8

08002078 <DMA2_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA2 stream2 global interrupt.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

	/* USER CODE END DMA2_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <DMA2_Stream2_IRQHandler+0x10>)
 800207e:	f002 fb23 	bl	80046c8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

	/* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	24009918 	.word	0x24009918

0800208c <UART8_IRQHandler>:

/**
 * @brief This function handles UART8 global interrupt.
 */
void UART8_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&Slave_UART, UART_FLAG_IDLE);
 8002096:	4b40      	ldr	r3, [pc, #256]	; (8002198 <UART8_IRQHandler+0x10c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d06b      	beq.n	800218a <UART8_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&Slave_UART);
 80020b2:	4b39      	ldr	r3, [pc, #228]	; (8002198 <UART8_IRQHandler+0x10c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2210      	movs	r2, #16
 80020b8:	621a      	str	r2, [r3, #32]
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 80020ba:	4b38      	ldr	r3, [pc, #224]	; (800219c <UART8_IRQHandler+0x110>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a38      	ldr	r2, [pc, #224]	; (80021a0 <UART8_IRQHandler+0x114>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d04a      	beq.n	800215a <UART8_IRQHandler+0xce>
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <UART8_IRQHandler+0x110>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a36      	ldr	r2, [pc, #216]	; (80021a4 <UART8_IRQHandler+0x118>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d045      	beq.n	800215a <UART8_IRQHandler+0xce>
 80020ce:	4b33      	ldr	r3, [pc, #204]	; (800219c <UART8_IRQHandler+0x110>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a35      	ldr	r2, [pc, #212]	; (80021a8 <UART8_IRQHandler+0x11c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d040      	beq.n	800215a <UART8_IRQHandler+0xce>
 80020d8:	4b30      	ldr	r3, [pc, #192]	; (800219c <UART8_IRQHandler+0x110>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a33      	ldr	r2, [pc, #204]	; (80021ac <UART8_IRQHandler+0x120>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d03b      	beq.n	800215a <UART8_IRQHandler+0xce>
 80020e2:	4b2e      	ldr	r3, [pc, #184]	; (800219c <UART8_IRQHandler+0x110>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a32      	ldr	r2, [pc, #200]	; (80021b0 <UART8_IRQHandler+0x124>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d036      	beq.n	800215a <UART8_IRQHandler+0xce>
 80020ec:	4b2b      	ldr	r3, [pc, #172]	; (800219c <UART8_IRQHandler+0x110>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <UART8_IRQHandler+0x128>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d031      	beq.n	800215a <UART8_IRQHandler+0xce>
 80020f6:	4b29      	ldr	r3, [pc, #164]	; (800219c <UART8_IRQHandler+0x110>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <UART8_IRQHandler+0x12c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d02c      	beq.n	800215a <UART8_IRQHandler+0xce>
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <UART8_IRQHandler+0x110>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <UART8_IRQHandler+0x130>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d027      	beq.n	800215a <UART8_IRQHandler+0xce>
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <UART8_IRQHandler+0x110>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <UART8_IRQHandler+0x134>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d022      	beq.n	800215a <UART8_IRQHandler+0xce>
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <UART8_IRQHandler+0x110>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <UART8_IRQHandler+0x138>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01d      	beq.n	800215a <UART8_IRQHandler+0xce>
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <UART8_IRQHandler+0x110>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <UART8_IRQHandler+0x13c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d018      	beq.n	800215a <UART8_IRQHandler+0xce>
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <UART8_IRQHandler+0x110>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a27      	ldr	r2, [pc, #156]	; (80021cc <UART8_IRQHandler+0x140>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <UART8_IRQHandler+0xce>
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <UART8_IRQHandler+0x110>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <UART8_IRQHandler+0x144>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00e      	beq.n	800215a <UART8_IRQHandler+0xce>
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <UART8_IRQHandler+0x110>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <UART8_IRQHandler+0x148>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d009      	beq.n	800215a <UART8_IRQHandler+0xce>
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <UART8_IRQHandler+0x110>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <UART8_IRQHandler+0x14c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d004      	beq.n	800215a <UART8_IRQHandler+0xce>
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <UART8_IRQHandler+0x110>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a21      	ldr	r2, [pc, #132]	; (80021dc <UART8_IRQHandler+0x150>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d103      	bne.n	8002162 <UART8_IRQHandler+0xd6>
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <UART8_IRQHandler+0x110>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	e002      	b.n	8002168 <UART8_IRQHandler+0xdc>
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <UART8_IRQHandler+0x110>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
		HAL_UART_DMAStop(&Slave_UART);
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <UART8_IRQHandler+0x10c>)
 800216a:	f006 ff7d 	bl	8009068 <HAL_UART_DMAStop>
		__HAL_UART_DISABLE_IT(&Slave_UART, UART_IT_IDLE);
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <UART8_IRQHandler+0x10c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <UART8_IRQHandler+0x10c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0210 	bic.w	r2, r2, #16
 800217c:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(RPT_DONE_semHandle, pdFALSE);
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <UART8_IRQHandler+0x154>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f00a fceb 	bl	800cb60 <xQueueGiveFromISR>
	}

	/* USER CODE END UART8_IRQn 0 */
	HAL_UART_IRQHandler(&huart8);
 800218a:	4803      	ldr	r0, [pc, #12]	; (8002198 <UART8_IRQHandler+0x10c>)
 800218c:	f007 f800 	bl	8009190 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART8_IRQn 1 */

	/* USER CODE END UART8_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	240096f0 	.word	0x240096f0
 800219c:	24009570 	.word	0x24009570
 80021a0:	40020010 	.word	0x40020010
 80021a4:	40020028 	.word	0x40020028
 80021a8:	40020040 	.word	0x40020040
 80021ac:	40020058 	.word	0x40020058
 80021b0:	40020070 	.word	0x40020070
 80021b4:	40020088 	.word	0x40020088
 80021b8:	400200a0 	.word	0x400200a0
 80021bc:	400200b8 	.word	0x400200b8
 80021c0:	40020410 	.word	0x40020410
 80021c4:	40020428 	.word	0x40020428
 80021c8:	40020440 	.word	0x40020440
 80021cc:	40020458 	.word	0x40020458
 80021d0:	40020470 	.word	0x40020470
 80021d4:	40020488 	.word	0x40020488
 80021d8:	400204a0 	.word	0x400204a0
 80021dc:	400204b8 	.word	0x400204b8
 80021e0:	24005bd8 	.word	0x24005bd8

080021e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021e8:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <SystemInit+0xe4>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <SystemInit+0xe4>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <SystemInit+0xe8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	2b06      	cmp	r3, #6
 8002202:	d807      	bhi.n	8002214 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <SystemInit+0xe8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 030f 	bic.w	r3, r3, #15
 800220c:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <SystemInit+0xe8>)
 800220e:	f043 0307 	orr.w	r3, r3, #7
 8002212:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <SystemInit+0xec>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a2d      	ldr	r2, [pc, #180]	; (80022d0 <SystemInit+0xec>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <SystemInit+0xec>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <SystemInit+0xec>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4929      	ldr	r1, [pc, #164]	; (80022d0 <SystemInit+0xec>)
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <SystemInit+0xf0>)
 800222e:	4013      	ands	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <SystemInit+0xe8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800223e:	4b23      	ldr	r3, [pc, #140]	; (80022cc <SystemInit+0xe8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 030f 	bic.w	r3, r3, #15
 8002246:	4a21      	ldr	r2, [pc, #132]	; (80022cc <SystemInit+0xe8>)
 8002248:	f043 0307 	orr.w	r3, r3, #7
 800224c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <SystemInit+0xec>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <SystemInit+0xec>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <SystemInit+0xec>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <SystemInit+0xec>)
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <SystemInit+0xf4>)
 8002264:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <SystemInit+0xec>)
 8002268:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <SystemInit+0xf8>)
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <SystemInit+0xec>)
 800226e:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <SystemInit+0xfc>)
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <SystemInit+0xec>)
 8002274:	2200      	movs	r2, #0
 8002276:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <SystemInit+0xec>)
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <SystemInit+0xfc>)
 800227c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <SystemInit+0xec>)
 8002280:	2200      	movs	r2, #0
 8002282:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <SystemInit+0xec>)
 8002286:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <SystemInit+0xfc>)
 8002288:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <SystemInit+0xec>)
 800228c:	2200      	movs	r2, #0
 800228e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <SystemInit+0xec>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <SystemInit+0xec>)
 8002296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <SystemInit+0xec>)
 800229e:	2200      	movs	r2, #0
 80022a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <SystemInit+0x100>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <SystemInit+0x104>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ae:	d202      	bcs.n	80022b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <SystemInit+0x108>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <SystemInit+0x10c>)
 80022b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022bc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00
 80022cc:	52002000 	.word	0x52002000
 80022d0:	58024400 	.word	0x58024400
 80022d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80022d8:	02020200 	.word	0x02020200
 80022dc:	01ff0000 	.word	0x01ff0000
 80022e0:	01010280 	.word	0x01010280
 80022e4:	5c001000 	.word	0x5c001000
 80022e8:	ffff0000 	.word	0xffff0000
 80022ec:	51008108 	.word	0x51008108
 80022f0:	52004000 	.word	0x52004000

080022f4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_tx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <MX_UART4_Init+0x90>)
 80022fa:	4a23      	ldr	r2, [pc, #140]	; (8002388 <MX_UART4_Init+0x94>)
 80022fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80022fe:	4b21      	ldr	r3, [pc, #132]	; (8002384 <MX_UART4_Init+0x90>)
 8002300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002304:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <MX_UART4_Init+0x90>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800230c:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <MX_UART4_Init+0x90>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <MX_UART4_Init+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <MX_UART4_Init+0x90>)
 800231a:	220c      	movs	r2, #12
 800231c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <MX_UART4_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <MX_UART4_Init+0x90>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <MX_UART4_Init+0x90>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <MX_UART4_Init+0x90>)
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <MX_UART4_Init+0x90>)
 8002338:	2200      	movs	r2, #0
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800233c:	4811      	ldr	r0, [pc, #68]	; (8002384 <MX_UART4_Init+0x90>)
 800233e:	f006 fd5b 	bl	8008df8 <HAL_UART_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002348:	f7ff fa26 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800234c:	2100      	movs	r1, #0
 800234e:	480d      	ldr	r0, [pc, #52]	; (8002384 <MX_UART4_Init+0x90>)
 8002350:	f008 fd54 	bl	800adfc <HAL_UARTEx_SetTxFifoThreshold>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800235a:	f7ff fa1d 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800235e:	2100      	movs	r1, #0
 8002360:	4808      	ldr	r0, [pc, #32]	; (8002384 <MX_UART4_Init+0x90>)
 8002362:	f008 fd89 	bl	800ae78 <HAL_UARTEx_SetRxFifoThreshold>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800236c:	f7ff fa14 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002370:	4804      	ldr	r0, [pc, #16]	; (8002384 <MX_UART4_Init+0x90>)
 8002372:	f008 fd0a 	bl	800ad8a <HAL_UARTEx_DisableFifoMode>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800237c:	f7ff fa0c 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	24009780 	.word	0x24009780
 8002388:	40004c00 	.word	0x40004c00

0800238c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <MX_UART5_Init+0x90>)
 8002392:	4a23      	ldr	r2, [pc, #140]	; (8002420 <MX_UART5_Init+0x94>)
 8002394:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <MX_UART5_Init+0x90>)
 8002398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800239c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <MX_UART5_Init+0x90>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_UART5_Init+0x90>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <MX_UART5_Init+0x90>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_UART5_Init+0x90>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <MX_UART5_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <MX_UART5_Init+0x90>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <MX_UART5_Init+0x90>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <MX_UART5_Init+0x90>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <MX_UART5_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80023d4:	4811      	ldr	r0, [pc, #68]	; (800241c <MX_UART5_Init+0x90>)
 80023d6:	f006 fd0f 	bl	8008df8 <HAL_UART_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80023e0:	f7ff f9da 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023e4:	2100      	movs	r1, #0
 80023e6:	480d      	ldr	r0, [pc, #52]	; (800241c <MX_UART5_Init+0x90>)
 80023e8:	f008 fd08 	bl	800adfc <HAL_UARTEx_SetTxFifoThreshold>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80023f2:	f7ff f9d1 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023f6:	2100      	movs	r1, #0
 80023f8:	4808      	ldr	r0, [pc, #32]	; (800241c <MX_UART5_Init+0x90>)
 80023fa:	f008 fd3d 	bl	800ae78 <HAL_UARTEx_SetRxFifoThreshold>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002404:	f7ff f9c8 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	; (800241c <MX_UART5_Init+0x90>)
 800240a:	f008 fcbe 	bl	800ad8a <HAL_UARTEx_DisableFifoMode>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002414:	f7ff f9c0 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	240093f0 	.word	0x240093f0
 8002420:	40005000 	.word	0x40005000

08002424 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <MX_UART8_Init+0x90>)
 800242a:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <MX_UART8_Init+0x94>)
 800242c:	601a      	str	r2, [r3, #0]
//  huart8.Init.BaudRate = 9600;
  huart8.Init.BaudRate = 115200;
 800242e:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <MX_UART8_Init+0x90>)
 8002430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002434:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002436:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <MX_UART8_Init+0x90>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <MX_UART8_Init+0x90>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <MX_UART8_Init+0x90>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_UART8_Init+0x90>)
 800244a:	220c      	movs	r2, #12
 800244c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <MX_UART8_Init+0x90>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <MX_UART8_Init+0x90>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <MX_UART8_Init+0x90>)
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_UART8_Init+0x90>)
 8002462:	2200      	movs	r2, #0
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <MX_UART8_Init+0x90>)
 8002468:	2200      	movs	r2, #0
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800246c:	4811      	ldr	r0, [pc, #68]	; (80024b4 <MX_UART8_Init+0x90>)
 800246e:	f006 fcc3 	bl	8008df8 <HAL_UART_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002478:	f7ff f98e 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800247c:	2100      	movs	r1, #0
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <MX_UART8_Init+0x90>)
 8002480:	f008 fcbc 	bl	800adfc <HAL_UARTEx_SetTxFifoThreshold>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800248a:	f7ff f985 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800248e:	2100      	movs	r1, #0
 8002490:	4808      	ldr	r0, [pc, #32]	; (80024b4 <MX_UART8_Init+0x90>)
 8002492:	f008 fcf1 	bl	800ae78 <HAL_UARTEx_SetRxFifoThreshold>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800249c:	f7ff f97c 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <MX_UART8_Init+0x90>)
 80024a2:	f008 fc72 	bl	800ad8a <HAL_UARTEx_DisableFifoMode>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80024ac:	f7ff f974 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	240096f0 	.word	0x240096f0
 80024b8:	40007c00 	.word	0x40007c00

080024bc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <MX_USART1_UART_Init+0x90>)
 80024c2:	4a23      	ldr	r2, [pc, #140]	; (8002550 <MX_USART1_UART_Init+0x94>)
 80024c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024c6:	4b21      	ldr	r3, [pc, #132]	; (800254c <MX_USART1_UART_Init+0x90>)
 80024c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ce:	4b1f      	ldr	r3, [pc, #124]	; (800254c <MX_USART1_UART_Init+0x90>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <MX_USART1_UART_Init+0x90>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <MX_USART1_UART_Init+0x90>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <MX_USART1_UART_Init+0x90>)
 80024e2:	220c      	movs	r2, #12
 80024e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <MX_USART1_UART_Init+0x90>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ec:	4b17      	ldr	r3, [pc, #92]	; (800254c <MX_USART1_UART_Init+0x90>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <MX_USART1_UART_Init+0x90>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <MX_USART1_UART_Init+0x90>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <MX_USART1_UART_Init+0x90>)
 8002500:	2200      	movs	r2, #0
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002504:	4811      	ldr	r0, [pc, #68]	; (800254c <MX_USART1_UART_Init+0x90>)
 8002506:	f006 fc77 	bl	8008df8 <HAL_UART_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002510:	f7ff f942 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002514:	2100      	movs	r1, #0
 8002516:	480d      	ldr	r0, [pc, #52]	; (800254c <MX_USART1_UART_Init+0x90>)
 8002518:	f008 fc70 	bl	800adfc <HAL_UARTEx_SetTxFifoThreshold>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002522:	f7ff f939 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002526:	2100      	movs	r1, #0
 8002528:	4808      	ldr	r0, [pc, #32]	; (800254c <MX_USART1_UART_Init+0x90>)
 800252a:	f008 fca5 	bl	800ae78 <HAL_UARTEx_SetRxFifoThreshold>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002534:	f7ff f930 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <MX_USART1_UART_Init+0x90>)
 800253a:	f008 fc26 	bl	800ad8a <HAL_UARTEx_DisableFifoMode>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002544:	f7ff f928 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	240095e8 	.word	0x240095e8
 8002550:	40011000 	.word	0x40011000

08002554 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 800255a:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <MX_USART2_UART_Init+0x94>)
 800255c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 8002560:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 800257a:	220c      	movs	r2, #12
 800257c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 8002592:	2200      	movs	r2, #0
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800259c:	4811      	ldr	r0, [pc, #68]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 800259e:	f006 fc2b 	bl	8008df8 <HAL_UART_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80025a8:	f7ff f8f6 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ac:	2100      	movs	r1, #0
 80025ae:	480d      	ldr	r0, [pc, #52]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 80025b0:	f008 fc24 	bl	800adfc <HAL_UARTEx_SetTxFifoThreshold>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80025ba:	f7ff f8ed 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025be:	2100      	movs	r1, #0
 80025c0:	4808      	ldr	r0, [pc, #32]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 80025c2:	f008 fc59 	bl	800ae78 <HAL_UARTEx_SetRxFifoThreshold>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80025cc:	f7ff f8e4 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80025d0:	4804      	ldr	r0, [pc, #16]	; (80025e4 <MX_USART2_UART_Init+0x90>)
 80025d2:	f008 fbda 	bl	800ad8a <HAL_UARTEx_DisableFifoMode>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80025dc:	f7ff f8dc 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	24009810 	.word	0x24009810
 80025e8:	40004400 	.word	0x40004400

080025ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <MX_USART3_UART_Init+0x90>)
 80025f2:	4a23      	ldr	r2, [pc, #140]	; (8002680 <MX_USART3_UART_Init+0x94>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <MX_USART3_UART_Init+0x90>)
 80025f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <MX_USART3_UART_Init+0x90>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <MX_USART3_UART_Init+0x90>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <MX_USART3_UART_Init+0x90>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <MX_USART3_UART_Init+0x90>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <MX_USART3_UART_Init+0x90>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <MX_USART3_UART_Init+0x90>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <MX_USART3_UART_Init+0x90>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <MX_USART3_UART_Init+0x90>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <MX_USART3_UART_Init+0x90>)
 8002630:	2200      	movs	r2, #0
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002634:	4811      	ldr	r0, [pc, #68]	; (800267c <MX_USART3_UART_Init+0x90>)
 8002636:	f006 fbdf 	bl	8008df8 <HAL_UART_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002640:	f7ff f8aa 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002644:	2100      	movs	r1, #0
 8002646:	480d      	ldr	r0, [pc, #52]	; (800267c <MX_USART3_UART_Init+0x90>)
 8002648:	f008 fbd8 	bl	800adfc <HAL_UARTEx_SetTxFifoThreshold>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002652:	f7ff f8a1 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002656:	2100      	movs	r1, #0
 8002658:	4808      	ldr	r0, [pc, #32]	; (800267c <MX_USART3_UART_Init+0x90>)
 800265a:	f008 fc0d 	bl	800ae78 <HAL_UARTEx_SetRxFifoThreshold>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002664:	f7ff f898 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002668:	4804      	ldr	r0, [pc, #16]	; (800267c <MX_USART3_UART_Init+0x90>)
 800266a:	f008 fb8e 	bl	800ad8a <HAL_UARTEx_DisableFifoMode>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002674:	f7ff f890 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	240092e8 	.word	0x240092e8
 8002680:	40004800 	.word	0x40004800

08002684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b094      	sub	sp, #80	; 0x50
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7f      	ldr	r2, [pc, #508]	; (80028a0 <HAL_UART_MspInit+0x21c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d163      	bne.n	800276e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80026a6:	4b7f      	ldr	r3, [pc, #508]	; (80028a4 <HAL_UART_MspInit+0x220>)
 80026a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026ac:	4a7d      	ldr	r2, [pc, #500]	; (80028a4 <HAL_UART_MspInit+0x220>)
 80026ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026b6:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <HAL_UART_MspInit+0x220>)
 80026b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4b77      	ldr	r3, [pc, #476]	; (80028a4 <HAL_UART_MspInit+0x220>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ca:	4a76      	ldr	r2, [pc, #472]	; (80028a4 <HAL_UART_MspInit+0x220>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d4:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_UART_MspInit+0x220>)
 80026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026e2:	2303      	movs	r3, #3
 80026e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026f2:	2308      	movs	r3, #8
 80026f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026fa:	4619      	mov	r1, r3
 80026fc:	486a      	ldr	r0, [pc, #424]	; (80028a8 <HAL_UART_MspInit+0x224>)
 80026fe:	f003 fb0f 	bl	8005d20 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 8002702:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <HAL_UART_MspInit+0x228>)
 8002704:	4a6a      	ldr	r2, [pc, #424]	; (80028b0 <HAL_UART_MspInit+0x22c>)
 8002706:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002708:	4b68      	ldr	r3, [pc, #416]	; (80028ac <HAL_UART_MspInit+0x228>)
 800270a:	223f      	movs	r2, #63	; 0x3f
 800270c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800270e:	4b67      	ldr	r3, [pc, #412]	; (80028ac <HAL_UART_MspInit+0x228>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002714:	4b65      	ldr	r3, [pc, #404]	; (80028ac <HAL_UART_MspInit+0x228>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800271a:	4b64      	ldr	r3, [pc, #400]	; (80028ac <HAL_UART_MspInit+0x228>)
 800271c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002720:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002722:	4b62      	ldr	r3, [pc, #392]	; (80028ac <HAL_UART_MspInit+0x228>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002728:	4b60      	ldr	r3, [pc, #384]	; (80028ac <HAL_UART_MspInit+0x228>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800272e:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <HAL_UART_MspInit+0x228>)
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002734:	4b5d      	ldr	r3, [pc, #372]	; (80028ac <HAL_UART_MspInit+0x228>)
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273a:	4b5c      	ldr	r3, [pc, #368]	; (80028ac <HAL_UART_MspInit+0x228>)
 800273c:	2200      	movs	r2, #0
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002740:	485a      	ldr	r0, [pc, #360]	; (80028ac <HAL_UART_MspInit+0x228>)
 8002742:	f000 fc99 	bl	8003078 <HAL_DMA_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800274c:	f7ff f824 	bl	8001798 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a56      	ldr	r2, [pc, #344]	; (80028ac <HAL_UART_MspInit+0x228>)
 8002754:	67da      	str	r2, [r3, #124]	; 0x7c
 8002756:	4a55      	ldr	r2, [pc, #340]	; (80028ac <HAL_UART_MspInit+0x228>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2105      	movs	r1, #5
 8002760:	2034      	movs	r0, #52	; 0x34
 8002762:	f000 fc61 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002766:	2034      	movs	r0, #52	; 0x34
 8002768:	f000 fc78 	bl	800305c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800276c:	e2f8      	b.n	8002d60 <HAL_UART_MspInit+0x6dc>
  else if(uartHandle->Instance==UART5)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a50      	ldr	r2, [pc, #320]	; (80028b4 <HAL_UART_MspInit+0x230>)
 8002774:	4293      	cmp	r3, r2
 8002776:	f040 80a9 	bne.w	80028cc <HAL_UART_MspInit+0x248>
    __HAL_RCC_UART5_CLK_ENABLE();
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_UART_MspInit+0x220>)
 800277c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002780:	4a48      	ldr	r2, [pc, #288]	; (80028a4 <HAL_UART_MspInit+0x220>)
 8002782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002786:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800278a:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_UART_MspInit+0x220>)
 800278c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002798:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <HAL_UART_MspInit+0x220>)
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279e:	4a41      	ldr	r2, [pc, #260]	; (80028a4 <HAL_UART_MspInit+0x220>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a8:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_UART_MspInit+0x220>)
 80027aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80027b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80027ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80027c8:	230e      	movs	r3, #14
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027d0:	4619      	mov	r1, r3
 80027d2:	4839      	ldr	r0, [pc, #228]	; (80028b8 <HAL_UART_MspInit+0x234>)
 80027d4:	f003 faa4 	bl	8005d20 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream4;
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_UART_MspInit+0x238>)
 80027da:	4a39      	ldr	r2, [pc, #228]	; (80028c0 <HAL_UART_MspInit+0x23c>)
 80027dc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80027de:	4b37      	ldr	r3, [pc, #220]	; (80028bc <HAL_UART_MspInit+0x238>)
 80027e0:	2241      	movs	r2, #65	; 0x41
 80027e2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e4:	4b35      	ldr	r3, [pc, #212]	; (80028bc <HAL_UART_MspInit+0x238>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ea:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_UART_MspInit+0x238>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027f0:	4b32      	ldr	r3, [pc, #200]	; (80028bc <HAL_UART_MspInit+0x238>)
 80027f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027f8:	4b30      	ldr	r3, [pc, #192]	; (80028bc <HAL_UART_MspInit+0x238>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <HAL_UART_MspInit+0x238>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002804:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <HAL_UART_MspInit+0x238>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_UART_MspInit+0x238>)
 800280c:	2200      	movs	r2, #0
 800280e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002810:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <HAL_UART_MspInit+0x238>)
 8002812:	2200      	movs	r2, #0
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002816:	4829      	ldr	r0, [pc, #164]	; (80028bc <HAL_UART_MspInit+0x238>)
 8002818:	f000 fc2e 	bl	8003078 <HAL_DMA_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8002822:	f7fe ffb9 	bl	8001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a24      	ldr	r2, [pc, #144]	; (80028bc <HAL_UART_MspInit+0x238>)
 800282a:	67da      	str	r2, [r3, #124]	; 0x7c
 800282c:	4a23      	ldr	r2, [pc, #140]	; (80028bc <HAL_UART_MspInit+0x238>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA2_Stream2;
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_UART_MspInit+0x240>)
 8002834:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <HAL_UART_MspInit+0x244>)
 8002836:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8002838:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_UART_MspInit+0x240>)
 800283a:	2242      	movs	r2, #66	; 0x42
 800283c:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800283e:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <HAL_UART_MspInit+0x240>)
 8002840:	2240      	movs	r2, #64	; 0x40
 8002842:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_UART_MspInit+0x240>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800284a:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HAL_UART_MspInit+0x240>)
 800284c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002850:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <HAL_UART_MspInit+0x240>)
 8002854:	2200      	movs	r2, #0
 8002856:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <HAL_UART_MspInit+0x240>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_UART_MspInit+0x240>)
 8002860:	2200      	movs	r2, #0
 8002862:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_UART_MspInit+0x240>)
 8002866:	2200      	movs	r2, #0
 8002868:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800286a:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <HAL_UART_MspInit+0x240>)
 800286c:	2200      	movs	r2, #0
 800286e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002870:	4814      	ldr	r0, [pc, #80]	; (80028c4 <HAL_UART_MspInit+0x240>)
 8002872:	f000 fc01 	bl	8003078 <HAL_DMA_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800287c:	f7fe ff8c 	bl	8001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_UART_MspInit+0x240>)
 8002884:	679a      	str	r2, [r3, #120]	; 0x78
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_UART_MspInit+0x240>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2105      	movs	r1, #5
 8002890:	2035      	movs	r0, #53	; 0x35
 8002892:	f000 fbc9 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002896:	2035      	movs	r0, #53	; 0x35
 8002898:	f000 fbe0 	bl	800305c <HAL_NVIC_EnableIRQ>
}
 800289c:	e260      	b.n	8002d60 <HAL_UART_MspInit+0x6dc>
 800289e:	bf00      	nop
 80028a0:	40004c00 	.word	0x40004c00
 80028a4:	58024400 	.word	0x58024400
 80028a8:	58020000 	.word	0x58020000
 80028ac:	24009180 	.word	0x24009180
 80028b0:	40020088 	.word	0x40020088
 80028b4:	40005000 	.word	0x40005000
 80028b8:	58020400 	.word	0x58020400
 80028bc:	240098a0 	.word	0x240098a0
 80028c0:	40020070 	.word	0x40020070
 80028c4:	24009918 	.word	0x24009918
 80028c8:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==UART8)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a96      	ldr	r2, [pc, #600]	; (8002b2c <HAL_UART_MspInit+0x4a8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	f040 8091 	bne.w	80029fa <HAL_UART_MspInit+0x376>
    __HAL_RCC_UART8_CLK_ENABLE();
 80028d8:	4b95      	ldr	r3, [pc, #596]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 80028da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028de:	4a94      	ldr	r2, [pc, #592]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 80028e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028e8:	4b91      	ldr	r3, [pc, #580]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 80028ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028f6:	4b8e      	ldr	r3, [pc, #568]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 80028f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028fc:	4a8c      	ldr	r2, [pc, #560]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 80028fe:	f043 0310 	orr.w	r3, r3, #16
 8002902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002906:	4b8a      	ldr	r3, [pc, #552]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 8002908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002914:	2303      	movs	r3, #3
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002924:	2308      	movs	r3, #8
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002928:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800292c:	4619      	mov	r1, r3
 800292e:	4881      	ldr	r0, [pc, #516]	; (8002b34 <HAL_UART_MspInit+0x4b0>)
 8002930:	f003 f9f6 	bl	8005d20 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream7;
 8002934:	4b80      	ldr	r3, [pc, #512]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 8002936:	4a81      	ldr	r2, [pc, #516]	; (8002b3c <HAL_UART_MspInit+0x4b8>)
 8002938:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800293a:	4b7f      	ldr	r3, [pc, #508]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 800293c:	2251      	movs	r2, #81	; 0x51
 800293e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002940:	4b7d      	ldr	r3, [pc, #500]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002946:	4b7c      	ldr	r3, [pc, #496]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 8002948:	2200      	movs	r2, #0
 800294a:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800294c:	4b7a      	ldr	r3, [pc, #488]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 800294e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002952:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002954:	4b78      	ldr	r3, [pc, #480]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 8002956:	2200      	movs	r2, #0
 8002958:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800295a:	4b77      	ldr	r3, [pc, #476]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8002960:	4b75      	ldr	r3, [pc, #468]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002966:	4b74      	ldr	r3, [pc, #464]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800296c:	4b72      	ldr	r3, [pc, #456]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 800296e:	2200      	movs	r2, #0
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002972:	4871      	ldr	r0, [pc, #452]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 8002974:	f000 fb80 	bl	8003078 <HAL_DMA_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 800297e:	f7fe ff0b 	bl	8001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a6c      	ldr	r2, [pc, #432]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 8002986:	67da      	str	r2, [r3, #124]	; 0x7c
 8002988:	4a6b      	ldr	r2, [pc, #428]	; (8002b38 <HAL_UART_MspInit+0x4b4>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA2_Stream0;
 800298e:	4b6c      	ldr	r3, [pc, #432]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 8002990:	4a6c      	ldr	r2, [pc, #432]	; (8002b44 <HAL_UART_MspInit+0x4c0>)
 8002992:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002994:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 8002996:	2252      	movs	r2, #82	; 0x52
 8002998:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800299a:	4b69      	ldr	r3, [pc, #420]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a0:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029a6:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 80029a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ac:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ae:	4b64      	ldr	r3, [pc, #400]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b4:	4b62      	ldr	r3, [pc, #392]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80029ba:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029c0:	4b5f      	ldr	r3, [pc, #380]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029c6:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 80029cc:	485c      	ldr	r0, [pc, #368]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 80029ce:	f000 fb53 	bl	8003078 <HAL_DMA_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_UART_MspInit+0x358>
      Error_Handler();
 80029d8:	f7fe fede 	bl	8001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart8_tx);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 80029e0:	679a      	str	r2, [r3, #120]	; 0x78
 80029e2:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_UART_MspInit+0x4bc>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2105      	movs	r1, #5
 80029ec:	2053      	movs	r0, #83	; 0x53
 80029ee:	f000 fb1b 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80029f2:	2053      	movs	r0, #83	; 0x53
 80029f4:	f000 fb32 	bl	800305c <HAL_NVIC_EnableIRQ>
}
 80029f8:	e1b2      	b.n	8002d60 <HAL_UART_MspInit+0x6dc>
  else if(uartHandle->Instance==USART1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <HAL_UART_MspInit+0x4c4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	f040 80ad 	bne.w	8002b60 <HAL_UART_MspInit+0x4dc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a06:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 8002a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a0c:	4a48      	ldr	r2, [pc, #288]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 8002a0e:	f043 0310 	orr.w	r3, r3, #16
 8002a12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a16:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 8002a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a24:	4b42      	ldr	r3, [pc, #264]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 8002a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2a:	4a41      	ldr	r2, [pc, #260]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a34:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <HAL_UART_MspInit+0x4ac>)
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002a42:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a46:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002a54:	2304      	movs	r3, #4
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	483b      	ldr	r0, [pc, #236]	; (8002b4c <HAL_UART_MspInit+0x4c8>)
 8002a60:	f003 f95e 	bl	8005d20 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002a64:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002a66:	4a3b      	ldr	r2, [pc, #236]	; (8002b54 <HAL_UART_MspInit+0x4d0>)
 8002a68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002a6a:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002a6c:	2229      	movs	r2, #41	; 0x29
 8002a6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a70:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a76:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7c:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a82:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a84:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a8a:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002aa2:	482b      	ldr	r0, [pc, #172]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002aa4:	f000 fae8 	bl	8003078 <HAL_DMA_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8002aae:	f7fe fe73 	bl	8001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002ab6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ab8:	4a25      	ldr	r2, [pc, #148]	; (8002b50 <HAL_UART_MspInit+0x4cc>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8002abe:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002ac0:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <HAL_UART_MspInit+0x4d8>)
 8002ac2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002ac6:	222a      	movs	r2, #42	; 0x2a
 8002ac8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002acc:	2240      	movs	r2, #64	; 0x40
 8002ace:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002adc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002afc:	4816      	ldr	r0, [pc, #88]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002afe:	f000 fabb 	bl	8003078 <HAL_DMA_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_UART_MspInit+0x488>
      Error_Handler();
 8002b08:	f7fe fe46 	bl	8001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002b10:	679a      	str	r2, [r3, #120]	; 0x78
 8002b12:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_UART_MspInit+0x4d4>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2105      	movs	r1, #5
 8002b1c:	2025      	movs	r0, #37	; 0x25
 8002b1e:	f000 fa83 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b22:	2025      	movs	r0, #37	; 0x25
 8002b24:	f000 fa9a 	bl	800305c <HAL_NVIC_EnableIRQ>
}
 8002b28:	e11a      	b.n	8002d60 <HAL_UART_MspInit+0x6dc>
 8002b2a:	bf00      	nop
 8002b2c:	40007c00 	.word	0x40007c00
 8002b30:	58024400 	.word	0x58024400
 8002b34:	58021000 	.word	0x58021000
 8002b38:	24009570 	.word	0x24009570
 8002b3c:	400200b8 	.word	0x400200b8
 8002b40:	24009678 	.word	0x24009678
 8002b44:	40020410 	.word	0x40020410
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	58020400 	.word	0x58020400
 8002b50:	24009480 	.word	0x24009480
 8002b54:	40020010 	.word	0x40020010
 8002b58:	24009378 	.word	0x24009378
 8002b5c:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a80      	ldr	r2, [pc, #512]	; (8002d68 <HAL_UART_MspInit+0x6e4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	f040 8091 	bne.w	8002c8e <HAL_UART_MspInit+0x60a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b6c:	4b7f      	ldr	r3, [pc, #508]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b72:	4a7e      	ldr	r2, [pc, #504]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b7c:	4b7b      	ldr	r3, [pc, #492]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	4b78      	ldr	r3, [pc, #480]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b90:	4a76      	ldr	r2, [pc, #472]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b9a:	4b74      	ldr	r3, [pc, #464]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ba8:	230c      	movs	r3, #12
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bb8:	2307      	movs	r3, #7
 8002bba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	486b      	ldr	r0, [pc, #428]	; (8002d70 <HAL_UART_MspInit+0x6ec>)
 8002bc4:	f003 f8ac 	bl	8005d20 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8002bc8:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002bca:	4a6b      	ldr	r2, [pc, #428]	; (8002d78 <HAL_UART_MspInit+0x6f4>)
 8002bcc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002bce:	4b69      	ldr	r3, [pc, #420]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002bd0:	222b      	movs	r2, #43	; 0x2b
 8002bd2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bd4:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bda:	4b66      	ldr	r3, [pc, #408]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002be0:	4b64      	ldr	r3, [pc, #400]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002be8:	4b62      	ldr	r3, [pc, #392]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bee:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002bf4:	4b5f      	ldr	r3, [pc, #380]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bfa:	4b5e      	ldr	r3, [pc, #376]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c00:	4b5c      	ldr	r3, [pc, #368]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c06:	485b      	ldr	r0, [pc, #364]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002c08:	f000 fa36 	bl	8003078 <HAL_DMA_Init>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_UART_MspInit+0x592>
      Error_Handler();
 8002c12:	f7fe fdc1 	bl	8001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a56      	ldr	r2, [pc, #344]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002c1a:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c1c:	4a55      	ldr	r2, [pc, #340]	; (8002d74 <HAL_UART_MspInit+0x6f0>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream1;
 8002c22:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c24:	4a56      	ldr	r2, [pc, #344]	; (8002d80 <HAL_UART_MspInit+0x6fc>)
 8002c26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002c28:	4b54      	ldr	r3, [pc, #336]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c2a:	222c      	movs	r2, #44	; 0x2c
 8002c2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c2e:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c30:	2240      	movs	r2, #64	; 0x40
 8002c32:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c34:	4b51      	ldr	r3, [pc, #324]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c3a:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c40:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c42:	4b4e      	ldr	r3, [pc, #312]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002c4e:	4b4b      	ldr	r3, [pc, #300]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c54:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c5a:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002c60:	4846      	ldr	r0, [pc, #280]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c62:	f000 fa09 	bl	8003078 <HAL_DMA_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_UART_MspInit+0x5ec>
      Error_Handler();
 8002c6c:	f7fe fd94 	bl	8001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a42      	ldr	r2, [pc, #264]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c74:	679a      	str	r2, [r3, #120]	; 0x78
 8002c76:	4a41      	ldr	r2, [pc, #260]	; (8002d7c <HAL_UART_MspInit+0x6f8>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2105      	movs	r1, #5
 8002c80:	2026      	movs	r0, #38	; 0x26
 8002c82:	f000 f9d1 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c86:	2026      	movs	r0, #38	; 0x26
 8002c88:	f000 f9e8 	bl	800305c <HAL_NVIC_EnableIRQ>
}
 8002c8c:	e068      	b.n	8002d60 <HAL_UART_MspInit+0x6dc>
  else if(uartHandle->Instance==USART3)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a3c      	ldr	r2, [pc, #240]	; (8002d84 <HAL_UART_MspInit+0x700>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d163      	bne.n	8002d60 <HAL_UART_MspInit+0x6dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c98:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002c9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c9e:	4a33      	ldr	r2, [pc, #204]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ca8:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbc:	4a2b      	ldr	r2, [pc, #172]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <HAL_UART_MspInit+0x6e8>)
 8002cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4825      	ldr	r0, [pc, #148]	; (8002d88 <HAL_UART_MspInit+0x704>)
 8002cf2:	f003 f815 	bl	8005d20 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002cf8:	4a25      	ldr	r2, [pc, #148]	; (8002d90 <HAL_UART_MspInit+0x70c>)
 8002cfa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002cfe:	222d      	movs	r2, #45	; 0x2d
 8002d00:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d08:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d14:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002d22:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d28:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002d34:	4815      	ldr	r0, [pc, #84]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d36:	f000 f99f 	bl	8003078 <HAL_DMA_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_UART_MspInit+0x6c0>
      Error_Handler();
 8002d40:	f7fe fd2a 	bl	8001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d48:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d4a:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <HAL_UART_MspInit+0x708>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2105      	movs	r1, #5
 8002d54:	2027      	movs	r0, #39	; 0x27
 8002d56:	f000 f967 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d5a:	2027      	movs	r0, #39	; 0x27
 8002d5c:	f000 f97e 	bl	800305c <HAL_NVIC_EnableIRQ>
}
 8002d60:	bf00      	nop
 8002d62:	3750      	adds	r7, #80	; 0x50
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40004400 	.word	0x40004400
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	58020000 	.word	0x58020000
 8002d74:	240091f8 	.word	0x240091f8
 8002d78:	40020040 	.word	0x40020040
 8002d7c:	240094f8 	.word	0x240094f8
 8002d80:	40020428 	.word	0x40020428
 8002d84:	40004800 	.word	0x40004800
 8002d88:	58020400 	.word	0x58020400
 8002d8c:	24009270 	.word	0x24009270
 8002d90:	40020058 	.word	0x40020058

08002d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d98:	f7ff fa24 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d9c:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d9e:	490d      	ldr	r1, [pc, #52]	; (8002dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002db4:	4c0a      	ldr	r4, [pc, #40]	; (8002de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f00b fe93 	bl	800eaec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc6:	f7fe fbff 	bl	80015c8 <main>
  bx  lr
 8002dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002dd4:	24000034 	.word	0x24000034
  ldr r2, =_sidata
 8002dd8:	0800ee10 	.word	0x0800ee10
  ldr r2, =_sbss
 8002ddc:	24000034 	.word	0x24000034
  ldr r4, =_ebss
 8002de0:	24009994 	.word	0x24009994

08002de4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <ADC3_IRQHandler>
	...

08002de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dee:	2003      	movs	r0, #3
 8002df0:	f000 f90f 	bl	8003012 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002df4:	f003 ffac 	bl	8006d50 <HAL_RCC_GetSysClockFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <HAL_Init+0x68>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	4913      	ldr	r1, [pc, #76]	; (8002e54 <HAL_Init+0x6c>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_Init+0x68>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <HAL_Init+0x6c>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <HAL_Init+0x70>)
 8002e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <HAL_Init+0x74>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fe fcd4 	bl	80017e0 <HAL_InitTick>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e002      	b.n	8002e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e42:	f7fe fcaf 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	58024400 	.word	0x58024400
 8002e54:	0800edc0 	.word	0x0800edc0
 8002e58:	24000024 	.word	0x24000024
 8002e5c:	24000020 	.word	0x24000020

08002e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_IncTick+0x20>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_IncTick+0x24>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4413      	add	r3, r2
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <HAL_IncTick+0x24>)
 8002e72:	6013      	str	r3, [r2, #0]
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	2400002c 	.word	0x2400002c
 8002e84:	24009990 	.word	0x24009990

08002e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <HAL_GetTick+0x14>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	24009990 	.word	0x24009990

08002ea0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_GetREVID+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	5c001000 	.word	0x5c001000

08002eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee6:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	60d3      	str	r3, [r2, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00
 8002efc:	05fa0000 	.word	0x05fa0000

08002f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <__NVIC_GetPriorityGrouping+0x18>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 0307 	and.w	r3, r3, #7
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db0b      	blt.n	8002f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4907      	ldr	r1, [pc, #28]	; (8002f54 <__NVIC_EnableIRQ+0x38>)
 8002f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	db0a      	blt.n	8002f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	490c      	ldr	r1, [pc, #48]	; (8002fa4 <__NVIC_SetPriority+0x4c>)
 8002f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f76:	0112      	lsls	r2, r2, #4
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f80:	e00a      	b.n	8002f98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4908      	ldr	r1, [pc, #32]	; (8002fa8 <__NVIC_SetPriority+0x50>)
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	3b04      	subs	r3, #4
 8002f90:	0112      	lsls	r2, r2, #4
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	440b      	add	r3, r1
 8002f96:	761a      	strb	r2, [r3, #24]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000e100 	.word	0xe000e100
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	; 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f1c3 0307 	rsb	r3, r3, #7
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	bf28      	it	cs
 8002fca:	2304      	movcs	r3, #4
 8002fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d902      	bls.n	8002fdc <NVIC_EncodePriority+0x30>
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3b03      	subs	r3, #3
 8002fda:	e000      	b.n	8002fde <NVIC_EncodePriority+0x32>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	401a      	ands	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	43d9      	mvns	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	4313      	orrs	r3, r2
         );
}
 8003006:	4618      	mov	r0, r3
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff4c 	bl	8002eb8 <__NVIC_SetPriorityGrouping>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003036:	f7ff ff63 	bl	8002f00 <__NVIC_GetPriorityGrouping>
 800303a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	6978      	ldr	r0, [r7, #20]
 8003042:	f7ff ffb3 	bl	8002fac <NVIC_EncodePriority>
 8003046:	4602      	mov	r2, r0
 8003048:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ff82 	bl	8002f58 <__NVIC_SetPriority>
}
 8003054:	bf00      	nop
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ff56 	bl	8002f1c <__NVIC_EnableIRQ>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003080:	f7ff ff02 	bl	8002e88 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e316      	b.n	80036be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a66      	ldr	r2, [pc, #408]	; (8003230 <HAL_DMA_Init+0x1b8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d04a      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a65      	ldr	r2, [pc, #404]	; (8003234 <HAL_DMA_Init+0x1bc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d045      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a63      	ldr	r2, [pc, #396]	; (8003238 <HAL_DMA_Init+0x1c0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d040      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a62      	ldr	r2, [pc, #392]	; (800323c <HAL_DMA_Init+0x1c4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d03b      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a60      	ldr	r2, [pc, #384]	; (8003240 <HAL_DMA_Init+0x1c8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d036      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5f      	ldr	r2, [pc, #380]	; (8003244 <HAL_DMA_Init+0x1cc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d031      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5d      	ldr	r2, [pc, #372]	; (8003248 <HAL_DMA_Init+0x1d0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02c      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a5c      	ldr	r2, [pc, #368]	; (800324c <HAL_DMA_Init+0x1d4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d027      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a5a      	ldr	r2, [pc, #360]	; (8003250 <HAL_DMA_Init+0x1d8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d022      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a59      	ldr	r2, [pc, #356]	; (8003254 <HAL_DMA_Init+0x1dc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d01d      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a57      	ldr	r2, [pc, #348]	; (8003258 <HAL_DMA_Init+0x1e0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d018      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a56      	ldr	r2, [pc, #344]	; (800325c <HAL_DMA_Init+0x1e4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a54      	ldr	r2, [pc, #336]	; (8003260 <HAL_DMA_Init+0x1e8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00e      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a53      	ldr	r2, [pc, #332]	; (8003264 <HAL_DMA_Init+0x1ec>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d009      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a51      	ldr	r2, [pc, #324]	; (8003268 <HAL_DMA_Init+0x1f0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_DMA_Init+0xb8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a50      	ldr	r2, [pc, #320]	; (800326c <HAL_DMA_Init+0x1f4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_DMA_Init+0xbc>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <HAL_DMA_Init+0xbe>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 813b 	beq.w	80033b2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a37      	ldr	r2, [pc, #220]	; (8003230 <HAL_DMA_Init+0x1b8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d04a      	beq.n	80031ec <HAL_DMA_Init+0x174>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a36      	ldr	r2, [pc, #216]	; (8003234 <HAL_DMA_Init+0x1bc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d045      	beq.n	80031ec <HAL_DMA_Init+0x174>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a34      	ldr	r2, [pc, #208]	; (8003238 <HAL_DMA_Init+0x1c0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d040      	beq.n	80031ec <HAL_DMA_Init+0x174>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a33      	ldr	r2, [pc, #204]	; (800323c <HAL_DMA_Init+0x1c4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d03b      	beq.n	80031ec <HAL_DMA_Init+0x174>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a31      	ldr	r2, [pc, #196]	; (8003240 <HAL_DMA_Init+0x1c8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d036      	beq.n	80031ec <HAL_DMA_Init+0x174>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a30      	ldr	r2, [pc, #192]	; (8003244 <HAL_DMA_Init+0x1cc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d031      	beq.n	80031ec <HAL_DMA_Init+0x174>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2e      	ldr	r2, [pc, #184]	; (8003248 <HAL_DMA_Init+0x1d0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02c      	beq.n	80031ec <HAL_DMA_Init+0x174>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a2d      	ldr	r2, [pc, #180]	; (800324c <HAL_DMA_Init+0x1d4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d027      	beq.n	80031ec <HAL_DMA_Init+0x174>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <HAL_DMA_Init+0x1d8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d022      	beq.n	80031ec <HAL_DMA_Init+0x174>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2a      	ldr	r2, [pc, #168]	; (8003254 <HAL_DMA_Init+0x1dc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d01d      	beq.n	80031ec <HAL_DMA_Init+0x174>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a28      	ldr	r2, [pc, #160]	; (8003258 <HAL_DMA_Init+0x1e0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d018      	beq.n	80031ec <HAL_DMA_Init+0x174>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a27      	ldr	r2, [pc, #156]	; (800325c <HAL_DMA_Init+0x1e4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <HAL_DMA_Init+0x174>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a25      	ldr	r2, [pc, #148]	; (8003260 <HAL_DMA_Init+0x1e8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00e      	beq.n	80031ec <HAL_DMA_Init+0x174>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a24      	ldr	r2, [pc, #144]	; (8003264 <HAL_DMA_Init+0x1ec>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_DMA_Init+0x174>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a22      	ldr	r2, [pc, #136]	; (8003268 <HAL_DMA_Init+0x1f0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_DMA_Init+0x174>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a21      	ldr	r2, [pc, #132]	; (800326c <HAL_DMA_Init+0x1f4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d108      	bne.n	80031fe <HAL_DMA_Init+0x186>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e007      	b.n	800320e <HAL_DMA_Init+0x196>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800320e:	e02f      	b.n	8003270 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003210:	f7ff fe3a 	bl	8002e88 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b05      	cmp	r3, #5
 800321c:	d928      	bls.n	8003270 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2203      	movs	r2, #3
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e246      	b.n	80036be <HAL_DMA_Init+0x646>
 8003230:	40020010 	.word	0x40020010
 8003234:	40020028 	.word	0x40020028
 8003238:	40020040 	.word	0x40020040
 800323c:	40020058 	.word	0x40020058
 8003240:	40020070 	.word	0x40020070
 8003244:	40020088 	.word	0x40020088
 8003248:	400200a0 	.word	0x400200a0
 800324c:	400200b8 	.word	0x400200b8
 8003250:	40020410 	.word	0x40020410
 8003254:	40020428 	.word	0x40020428
 8003258:	40020440 	.word	0x40020440
 800325c:	40020458 	.word	0x40020458
 8003260:	40020470 	.word	0x40020470
 8003264:	40020488 	.word	0x40020488
 8003268:	400204a0 	.word	0x400204a0
 800326c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1c8      	bne.n	8003210 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4b83      	ldr	r3, [pc, #524]	; (8003498 <HAL_DMA_Init+0x420>)
 800328a:	4013      	ands	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003296:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d107      	bne.n	80032d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	4313      	orrs	r3, r2
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80032d4:	4b71      	ldr	r3, [pc, #452]	; (800349c <HAL_DMA_Init+0x424>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b71      	ldr	r3, [pc, #452]	; (80034a0 <HAL_DMA_Init+0x428>)
 80032da:	4013      	ands	r3, r2
 80032dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e0:	d328      	bcc.n	8003334 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b28      	cmp	r3, #40	; 0x28
 80032e8:	d903      	bls.n	80032f2 <HAL_DMA_Init+0x27a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b2e      	cmp	r3, #46	; 0x2e
 80032f0:	d917      	bls.n	8003322 <HAL_DMA_Init+0x2aa>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b3e      	cmp	r3, #62	; 0x3e
 80032f8:	d903      	bls.n	8003302 <HAL_DMA_Init+0x28a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b42      	cmp	r3, #66	; 0x42
 8003300:	d90f      	bls.n	8003322 <HAL_DMA_Init+0x2aa>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b46      	cmp	r3, #70	; 0x46
 8003308:	d903      	bls.n	8003312 <HAL_DMA_Init+0x29a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b48      	cmp	r3, #72	; 0x48
 8003310:	d907      	bls.n	8003322 <HAL_DMA_Init+0x2aa>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b4e      	cmp	r3, #78	; 0x4e
 8003318:	d905      	bls.n	8003326 <HAL_DMA_Init+0x2ae>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b52      	cmp	r3, #82	; 0x52
 8003320:	d801      	bhi.n	8003326 <HAL_DMA_Init+0x2ae>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_DMA_Init+0x2b0>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003332:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0307 	bic.w	r3, r3, #7
 800334a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2b04      	cmp	r3, #4
 800335c:	d117      	bne.n	800338e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00e      	beq.n	800338e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f002 fb4b 	bl	8005a0c <DMA_CheckFifoParam>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2240      	movs	r2, #64	; 0x40
 8003380:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e197      	b.n	80036be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f002 fa86 	bl	80058a8 <DMA_CalcBaseAndBitshift>
 800339c:	4603      	mov	r3, r0
 800339e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	223f      	movs	r2, #63	; 0x3f
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	e0cd      	b.n	800354e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a3b      	ldr	r2, [pc, #236]	; (80034a4 <HAL_DMA_Init+0x42c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_DMA_Init+0x38a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a39      	ldr	r2, [pc, #228]	; (80034a8 <HAL_DMA_Init+0x430>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01d      	beq.n	8003402 <HAL_DMA_Init+0x38a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a38      	ldr	r2, [pc, #224]	; (80034ac <HAL_DMA_Init+0x434>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d018      	beq.n	8003402 <HAL_DMA_Init+0x38a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a36      	ldr	r2, [pc, #216]	; (80034b0 <HAL_DMA_Init+0x438>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_DMA_Init+0x38a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <HAL_DMA_Init+0x43c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_DMA_Init+0x38a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a33      	ldr	r2, [pc, #204]	; (80034b8 <HAL_DMA_Init+0x440>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_DMA_Init+0x38a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a32      	ldr	r2, [pc, #200]	; (80034bc <HAL_DMA_Init+0x444>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_DMA_Init+0x38a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a30      	ldr	r2, [pc, #192]	; (80034c0 <HAL_DMA_Init+0x448>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_DMA_Init+0x38e>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_DMA_Init+0x390>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8097 	beq.w	800353c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <HAL_DMA_Init+0x42c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d021      	beq.n	800345c <HAL_DMA_Init+0x3e4>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <HAL_DMA_Init+0x430>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01c      	beq.n	800345c <HAL_DMA_Init+0x3e4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a21      	ldr	r2, [pc, #132]	; (80034ac <HAL_DMA_Init+0x434>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d017      	beq.n	800345c <HAL_DMA_Init+0x3e4>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <HAL_DMA_Init+0x438>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d012      	beq.n	800345c <HAL_DMA_Init+0x3e4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1e      	ldr	r2, [pc, #120]	; (80034b4 <HAL_DMA_Init+0x43c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00d      	beq.n	800345c <HAL_DMA_Init+0x3e4>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <HAL_DMA_Init+0x440>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d008      	beq.n	800345c <HAL_DMA_Init+0x3e4>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <HAL_DMA_Init+0x444>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <HAL_DMA_Init+0x3e4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <HAL_DMA_Init+0x448>)
 800345a:	4293      	cmp	r3, r2
 800345c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_DMA_Init+0x44c>)
 800347a:	4013      	ands	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d020      	beq.n	80034c8 <HAL_DMA_Init+0x450>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d102      	bne.n	8003494 <HAL_DMA_Init+0x41c>
 800348e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003492:	e01a      	b.n	80034ca <HAL_DMA_Init+0x452>
 8003494:	2300      	movs	r3, #0
 8003496:	e018      	b.n	80034ca <HAL_DMA_Init+0x452>
 8003498:	fe10803f 	.word	0xfe10803f
 800349c:	5c001000 	.word	0x5c001000
 80034a0:	ffff0000 	.word	0xffff0000
 80034a4:	58025408 	.word	0x58025408
 80034a8:	5802541c 	.word	0x5802541c
 80034ac:	58025430 	.word	0x58025430
 80034b0:	58025444 	.word	0x58025444
 80034b4:	58025458 	.word	0x58025458
 80034b8:	5802546c 	.word	0x5802546c
 80034bc:	58025480 	.word	0x58025480
 80034c0:	58025494 	.word	0x58025494
 80034c4:	fffe000f 	.word	0xfffe000f
 80034c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68d2      	ldr	r2, [r2, #12]
 80034ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80034f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80034f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	4b6e      	ldr	r3, [pc, #440]	; (80036c8 <HAL_DMA_Init+0x650>)
 8003510:	4413      	add	r3, r2
 8003512:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_DMA_Init+0x654>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	009a      	lsls	r2, r3, #2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f002 f9c1 	bl	80058a8 <DMA_CalcBaseAndBitshift>
 8003526:	4603      	mov	r3, r0
 8003528:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2201      	movs	r2, #1
 8003534:	409a      	lsls	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	e008      	b.n	800354e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2240      	movs	r2, #64	; 0x40
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2203      	movs	r2, #3
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0b7      	b.n	80036be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5f      	ldr	r2, [pc, #380]	; (80036d0 <HAL_DMA_Init+0x658>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d072      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a5d      	ldr	r2, [pc, #372]	; (80036d4 <HAL_DMA_Init+0x65c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d06d      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a5c      	ldr	r2, [pc, #368]	; (80036d8 <HAL_DMA_Init+0x660>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d068      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5a      	ldr	r2, [pc, #360]	; (80036dc <HAL_DMA_Init+0x664>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d063      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a59      	ldr	r2, [pc, #356]	; (80036e0 <HAL_DMA_Init+0x668>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d05e      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a57      	ldr	r2, [pc, #348]	; (80036e4 <HAL_DMA_Init+0x66c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d059      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a56      	ldr	r2, [pc, #344]	; (80036e8 <HAL_DMA_Init+0x670>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d054      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a54      	ldr	r2, [pc, #336]	; (80036ec <HAL_DMA_Init+0x674>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d04f      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a53      	ldr	r2, [pc, #332]	; (80036f0 <HAL_DMA_Init+0x678>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04a      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a51      	ldr	r2, [pc, #324]	; (80036f4 <HAL_DMA_Init+0x67c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d045      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a50      	ldr	r2, [pc, #320]	; (80036f8 <HAL_DMA_Init+0x680>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d040      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a4e      	ldr	r2, [pc, #312]	; (80036fc <HAL_DMA_Init+0x684>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d03b      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a4d      	ldr	r2, [pc, #308]	; (8003700 <HAL_DMA_Init+0x688>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d036      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a4b      	ldr	r2, [pc, #300]	; (8003704 <HAL_DMA_Init+0x68c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d031      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4a      	ldr	r2, [pc, #296]	; (8003708 <HAL_DMA_Init+0x690>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02c      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_DMA_Init+0x694>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d027      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a47      	ldr	r2, [pc, #284]	; (8003710 <HAL_DMA_Init+0x698>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a45      	ldr	r2, [pc, #276]	; (8003714 <HAL_DMA_Init+0x69c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01d      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a44      	ldr	r2, [pc, #272]	; (8003718 <HAL_DMA_Init+0x6a0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a42      	ldr	r2, [pc, #264]	; (800371c <HAL_DMA_Init+0x6a4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a41      	ldr	r2, [pc, #260]	; (8003720 <HAL_DMA_Init+0x6a8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a3f      	ldr	r2, [pc, #252]	; (8003724 <HAL_DMA_Init+0x6ac>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a3e      	ldr	r2, [pc, #248]	; (8003728 <HAL_DMA_Init+0x6b0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_DMA_Init+0x5c6>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3c      	ldr	r2, [pc, #240]	; (800372c <HAL_DMA_Init+0x6b4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_DMA_Init+0x5ca>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_DMA_Init+0x5cc>
 8003642:	2300      	movs	r3, #0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d032      	beq.n	80036ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f002 fa5b 	bl	8005b04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d102      	bne.n	800365c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003670:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d010      	beq.n	800369c <HAL_DMA_Init+0x624>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b08      	cmp	r3, #8
 8003680:	d80c      	bhi.n	800369c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f002 fad8 	bl	8005c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	e008      	b.n	80036ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	a7fdabf8 	.word	0xa7fdabf8
 80036cc:	cccccccd 	.word	0xcccccccd
 80036d0:	40020010 	.word	0x40020010
 80036d4:	40020028 	.word	0x40020028
 80036d8:	40020040 	.word	0x40020040
 80036dc:	40020058 	.word	0x40020058
 80036e0:	40020070 	.word	0x40020070
 80036e4:	40020088 	.word	0x40020088
 80036e8:	400200a0 	.word	0x400200a0
 80036ec:	400200b8 	.word	0x400200b8
 80036f0:	40020410 	.word	0x40020410
 80036f4:	40020428 	.word	0x40020428
 80036f8:	40020440 	.word	0x40020440
 80036fc:	40020458 	.word	0x40020458
 8003700:	40020470 	.word	0x40020470
 8003704:	40020488 	.word	0x40020488
 8003708:	400204a0 	.word	0x400204a0
 800370c:	400204b8 	.word	0x400204b8
 8003710:	58025408 	.word	0x58025408
 8003714:	5802541c 	.word	0x5802541c
 8003718:	58025430 	.word	0x58025430
 800371c:	58025444 	.word	0x58025444
 8003720:	58025458 	.word	0x58025458
 8003724:	5802546c 	.word	0x5802546c
 8003728:	58025480 	.word	0x58025480
 800372c:	58025494 	.word	0x58025494

08003730 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e226      	b.n	8003b9a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_DMA_Start_IT+0x2a>
 8003756:	2302      	movs	r3, #2
 8003758:	e21f      	b.n	8003b9a <HAL_DMA_Start_IT+0x46a>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	f040 820a 	bne.w	8003b84 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a68      	ldr	r2, [pc, #416]	; (8003924 <HAL_DMA_Start_IT+0x1f4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a66      	ldr	r2, [pc, #408]	; (8003928 <HAL_DMA_Start_IT+0x1f8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a65      	ldr	r2, [pc, #404]	; (800392c <HAL_DMA_Start_IT+0x1fc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a63      	ldr	r2, [pc, #396]	; (8003930 <HAL_DMA_Start_IT+0x200>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a62      	ldr	r2, [pc, #392]	; (8003934 <HAL_DMA_Start_IT+0x204>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a60      	ldr	r2, [pc, #384]	; (8003938 <HAL_DMA_Start_IT+0x208>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5f      	ldr	r2, [pc, #380]	; (800393c <HAL_DMA_Start_IT+0x20c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5d      	ldr	r2, [pc, #372]	; (8003940 <HAL_DMA_Start_IT+0x210>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5c      	ldr	r2, [pc, #368]	; (8003944 <HAL_DMA_Start_IT+0x214>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a5a      	ldr	r2, [pc, #360]	; (8003948 <HAL_DMA_Start_IT+0x218>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a59      	ldr	r2, [pc, #356]	; (800394c <HAL_DMA_Start_IT+0x21c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a57      	ldr	r2, [pc, #348]	; (8003950 <HAL_DMA_Start_IT+0x220>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a56      	ldr	r2, [pc, #344]	; (8003954 <HAL_DMA_Start_IT+0x224>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a54      	ldr	r2, [pc, #336]	; (8003958 <HAL_DMA_Start_IT+0x228>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a53      	ldr	r2, [pc, #332]	; (800395c <HAL_DMA_Start_IT+0x22c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_DMA_Start_IT+0xee>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a51      	ldr	r2, [pc, #324]	; (8003960 <HAL_DMA_Start_IT+0x230>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d108      	bne.n	8003830 <HAL_DMA_Start_IT+0x100>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e007      	b.n	8003840 <HAL_DMA_Start_IT+0x110>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f001 fe82 	bl	8005550 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a34      	ldr	r2, [pc, #208]	; (8003924 <HAL_DMA_Start_IT+0x1f4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d04a      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a33      	ldr	r2, [pc, #204]	; (8003928 <HAL_DMA_Start_IT+0x1f8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d045      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a31      	ldr	r2, [pc, #196]	; (800392c <HAL_DMA_Start_IT+0x1fc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d040      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a30      	ldr	r2, [pc, #192]	; (8003930 <HAL_DMA_Start_IT+0x200>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d03b      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a2e      	ldr	r2, [pc, #184]	; (8003934 <HAL_DMA_Start_IT+0x204>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d036      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2d      	ldr	r2, [pc, #180]	; (8003938 <HAL_DMA_Start_IT+0x208>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d031      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2b      	ldr	r2, [pc, #172]	; (800393c <HAL_DMA_Start_IT+0x20c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d02c      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <HAL_DMA_Start_IT+0x210>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d027      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a28      	ldr	r2, [pc, #160]	; (8003944 <HAL_DMA_Start_IT+0x214>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d022      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a27      	ldr	r2, [pc, #156]	; (8003948 <HAL_DMA_Start_IT+0x218>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d01d      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a25      	ldr	r2, [pc, #148]	; (800394c <HAL_DMA_Start_IT+0x21c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d018      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a24      	ldr	r2, [pc, #144]	; (8003950 <HAL_DMA_Start_IT+0x220>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a22      	ldr	r2, [pc, #136]	; (8003954 <HAL_DMA_Start_IT+0x224>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00e      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a21      	ldr	r2, [pc, #132]	; (8003958 <HAL_DMA_Start_IT+0x228>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1f      	ldr	r2, [pc, #124]	; (800395c <HAL_DMA_Start_IT+0x22c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <HAL_DMA_Start_IT+0x1bc>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <HAL_DMA_Start_IT+0x230>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d101      	bne.n	80038f0 <HAL_DMA_Start_IT+0x1c0>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_DMA_Start_IT+0x1c2>
 80038f0:	2300      	movs	r3, #0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d036      	beq.n	8003964 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 021e 	bic.w	r2, r3, #30
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0216 	orr.w	r2, r2, #22
 8003908:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d03e      	beq.n	8003990 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0208 	orr.w	r2, r2, #8
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e035      	b.n	8003990 <HAL_DMA_Start_IT+0x260>
 8003924:	40020010 	.word	0x40020010
 8003928:	40020028 	.word	0x40020028
 800392c:	40020040 	.word	0x40020040
 8003930:	40020058 	.word	0x40020058
 8003934:	40020070 	.word	0x40020070
 8003938:	40020088 	.word	0x40020088
 800393c:	400200a0 	.word	0x400200a0
 8003940:	400200b8 	.word	0x400200b8
 8003944:	40020410 	.word	0x40020410
 8003948:	40020428 	.word	0x40020428
 800394c:	40020440 	.word	0x40020440
 8003950:	40020458 	.word	0x40020458
 8003954:	40020470 	.word	0x40020470
 8003958:	40020488 	.word	0x40020488
 800395c:	400204a0 	.word	0x400204a0
 8003960:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 020e 	bic.w	r2, r3, #14
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 020a 	orr.w	r2, r2, #10
 8003976:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0204 	orr.w	r2, r2, #4
 800398e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a83      	ldr	r2, [pc, #524]	; (8003ba4 <HAL_DMA_Start_IT+0x474>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d072      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a82      	ldr	r2, [pc, #520]	; (8003ba8 <HAL_DMA_Start_IT+0x478>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d06d      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a80      	ldr	r2, [pc, #512]	; (8003bac <HAL_DMA_Start_IT+0x47c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d068      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7f      	ldr	r2, [pc, #508]	; (8003bb0 <HAL_DMA_Start_IT+0x480>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d063      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a7d      	ldr	r2, [pc, #500]	; (8003bb4 <HAL_DMA_Start_IT+0x484>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d05e      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7c      	ldr	r2, [pc, #496]	; (8003bb8 <HAL_DMA_Start_IT+0x488>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d059      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7a      	ldr	r2, [pc, #488]	; (8003bbc <HAL_DMA_Start_IT+0x48c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d054      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a79      	ldr	r2, [pc, #484]	; (8003bc0 <HAL_DMA_Start_IT+0x490>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d04f      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a77      	ldr	r2, [pc, #476]	; (8003bc4 <HAL_DMA_Start_IT+0x494>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d04a      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a76      	ldr	r2, [pc, #472]	; (8003bc8 <HAL_DMA_Start_IT+0x498>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d045      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a74      	ldr	r2, [pc, #464]	; (8003bcc <HAL_DMA_Start_IT+0x49c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d040      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a73      	ldr	r2, [pc, #460]	; (8003bd0 <HAL_DMA_Start_IT+0x4a0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d03b      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a71      	ldr	r2, [pc, #452]	; (8003bd4 <HAL_DMA_Start_IT+0x4a4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d036      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a70      	ldr	r2, [pc, #448]	; (8003bd8 <HAL_DMA_Start_IT+0x4a8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d031      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a6e      	ldr	r2, [pc, #440]	; (8003bdc <HAL_DMA_Start_IT+0x4ac>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d02c      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6d      	ldr	r2, [pc, #436]	; (8003be0 <HAL_DMA_Start_IT+0x4b0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d027      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6b      	ldr	r2, [pc, #428]	; (8003be4 <HAL_DMA_Start_IT+0x4b4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d022      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6a      	ldr	r2, [pc, #424]	; (8003be8 <HAL_DMA_Start_IT+0x4b8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d01d      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a68      	ldr	r2, [pc, #416]	; (8003bec <HAL_DMA_Start_IT+0x4bc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d018      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a67      	ldr	r2, [pc, #412]	; (8003bf0 <HAL_DMA_Start_IT+0x4c0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a65      	ldr	r2, [pc, #404]	; (8003bf4 <HAL_DMA_Start_IT+0x4c4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00e      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a64      	ldr	r2, [pc, #400]	; (8003bf8 <HAL_DMA_Start_IT+0x4c8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a62      	ldr	r2, [pc, #392]	; (8003bfc <HAL_DMA_Start_IT+0x4cc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_DMA_Start_IT+0x350>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a61      	ldr	r2, [pc, #388]	; (8003c00 <HAL_DMA_Start_IT+0x4d0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_DMA_Start_IT+0x354>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <HAL_DMA_Start_IT+0x356>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01a      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003abe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a37      	ldr	r2, [pc, #220]	; (8003ba4 <HAL_DMA_Start_IT+0x474>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d04a      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a36      	ldr	r2, [pc, #216]	; (8003ba8 <HAL_DMA_Start_IT+0x478>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d045      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a34      	ldr	r2, [pc, #208]	; (8003bac <HAL_DMA_Start_IT+0x47c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d040      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a33      	ldr	r2, [pc, #204]	; (8003bb0 <HAL_DMA_Start_IT+0x480>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d03b      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a31      	ldr	r2, [pc, #196]	; (8003bb4 <HAL_DMA_Start_IT+0x484>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d036      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a30      	ldr	r2, [pc, #192]	; (8003bb8 <HAL_DMA_Start_IT+0x488>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d031      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a2e      	ldr	r2, [pc, #184]	; (8003bbc <HAL_DMA_Start_IT+0x48c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d02c      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a2d      	ldr	r2, [pc, #180]	; (8003bc0 <HAL_DMA_Start_IT+0x490>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d027      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2b      	ldr	r2, [pc, #172]	; (8003bc4 <HAL_DMA_Start_IT+0x494>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d022      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2a      	ldr	r2, [pc, #168]	; (8003bc8 <HAL_DMA_Start_IT+0x498>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d01d      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <HAL_DMA_Start_IT+0x49c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d018      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a27      	ldr	r2, [pc, #156]	; (8003bd0 <HAL_DMA_Start_IT+0x4a0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d013      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <HAL_DMA_Start_IT+0x4a4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00e      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a24      	ldr	r2, [pc, #144]	; (8003bd8 <HAL_DMA_Start_IT+0x4a8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d009      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a22      	ldr	r2, [pc, #136]	; (8003bdc <HAL_DMA_Start_IT+0x4ac>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <HAL_DMA_Start_IT+0x430>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a21      	ldr	r2, [pc, #132]	; (8003be0 <HAL_DMA_Start_IT+0x4b0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d108      	bne.n	8003b72 <HAL_DMA_Start_IT+0x442>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e012      	b.n	8003b98 <HAL_DMA_Start_IT+0x468>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0201 	orr.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e009      	b.n	8003b98 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40020010 	.word	0x40020010
 8003ba8:	40020028 	.word	0x40020028
 8003bac:	40020040 	.word	0x40020040
 8003bb0:	40020058 	.word	0x40020058
 8003bb4:	40020070 	.word	0x40020070
 8003bb8:	40020088 	.word	0x40020088
 8003bbc:	400200a0 	.word	0x400200a0
 8003bc0:	400200b8 	.word	0x400200b8
 8003bc4:	40020410 	.word	0x40020410
 8003bc8:	40020428 	.word	0x40020428
 8003bcc:	40020440 	.word	0x40020440
 8003bd0:	40020458 	.word	0x40020458
 8003bd4:	40020470 	.word	0x40020470
 8003bd8:	40020488 	.word	0x40020488
 8003bdc:	400204a0 	.word	0x400204a0
 8003be0:	400204b8 	.word	0x400204b8
 8003be4:	58025408 	.word	0x58025408
 8003be8:	5802541c 	.word	0x5802541c
 8003bec:	58025430 	.word	0x58025430
 8003bf0:	58025444 	.word	0x58025444
 8003bf4:	58025458 	.word	0x58025458
 8003bf8:	5802546c 	.word	0x5802546c
 8003bfc:	58025480 	.word	0x58025480
 8003c00:	58025494 	.word	0x58025494

08003c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003c0c:	f7ff f93c 	bl	8002e88 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e2dc      	b.n	80041d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d008      	beq.n	8003c3a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2280      	movs	r2, #128	; 0x80
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e2cd      	b.n	80041d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a76      	ldr	r2, [pc, #472]	; (8003e18 <HAL_DMA_Abort+0x214>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d04a      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a74      	ldr	r2, [pc, #464]	; (8003e1c <HAL_DMA_Abort+0x218>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d045      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a73      	ldr	r2, [pc, #460]	; (8003e20 <HAL_DMA_Abort+0x21c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d040      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a71      	ldr	r2, [pc, #452]	; (8003e24 <HAL_DMA_Abort+0x220>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d03b      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a70      	ldr	r2, [pc, #448]	; (8003e28 <HAL_DMA_Abort+0x224>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d036      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a6e      	ldr	r2, [pc, #440]	; (8003e2c <HAL_DMA_Abort+0x228>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d031      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6d      	ldr	r2, [pc, #436]	; (8003e30 <HAL_DMA_Abort+0x22c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d02c      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6b      	ldr	r2, [pc, #428]	; (8003e34 <HAL_DMA_Abort+0x230>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d027      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6a      	ldr	r2, [pc, #424]	; (8003e38 <HAL_DMA_Abort+0x234>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a68      	ldr	r2, [pc, #416]	; (8003e3c <HAL_DMA_Abort+0x238>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01d      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a67      	ldr	r2, [pc, #412]	; (8003e40 <HAL_DMA_Abort+0x23c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d018      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a65      	ldr	r2, [pc, #404]	; (8003e44 <HAL_DMA_Abort+0x240>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a64      	ldr	r2, [pc, #400]	; (8003e48 <HAL_DMA_Abort+0x244>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a62      	ldr	r2, [pc, #392]	; (8003e4c <HAL_DMA_Abort+0x248>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a61      	ldr	r2, [pc, #388]	; (8003e50 <HAL_DMA_Abort+0x24c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_DMA_Abort+0xd6>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a5f      	ldr	r2, [pc, #380]	; (8003e54 <HAL_DMA_Abort+0x250>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_DMA_Abort+0xda>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_DMA_Abort+0xdc>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 021e 	bic.w	r2, r2, #30
 8003cf2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d02:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e00a      	b.n	8003d22 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 020e 	bic.w	r2, r2, #14
 8003d1a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <HAL_DMA_Abort+0x214>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d072      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3a      	ldr	r2, [pc, #232]	; (8003e1c <HAL_DMA_Abort+0x218>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d06d      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a39      	ldr	r2, [pc, #228]	; (8003e20 <HAL_DMA_Abort+0x21c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d068      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a37      	ldr	r2, [pc, #220]	; (8003e24 <HAL_DMA_Abort+0x220>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d063      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a36      	ldr	r2, [pc, #216]	; (8003e28 <HAL_DMA_Abort+0x224>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d05e      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a34      	ldr	r2, [pc, #208]	; (8003e2c <HAL_DMA_Abort+0x228>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d059      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a33      	ldr	r2, [pc, #204]	; (8003e30 <HAL_DMA_Abort+0x22c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d054      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a31      	ldr	r2, [pc, #196]	; (8003e34 <HAL_DMA_Abort+0x230>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d04f      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a30      	ldr	r2, [pc, #192]	; (8003e38 <HAL_DMA_Abort+0x234>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d04a      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a2e      	ldr	r2, [pc, #184]	; (8003e3c <HAL_DMA_Abort+0x238>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d045      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a2d      	ldr	r2, [pc, #180]	; (8003e40 <HAL_DMA_Abort+0x23c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d040      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2b      	ldr	r2, [pc, #172]	; (8003e44 <HAL_DMA_Abort+0x240>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d03b      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2a      	ldr	r2, [pc, #168]	; (8003e48 <HAL_DMA_Abort+0x244>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d036      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a28      	ldr	r2, [pc, #160]	; (8003e4c <HAL_DMA_Abort+0x248>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d031      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <HAL_DMA_Abort+0x24c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d02c      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <HAL_DMA_Abort+0x250>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d027      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <HAL_DMA_Abort+0x254>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <HAL_DMA_Abort+0x258>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a21      	ldr	r2, [pc, #132]	; (8003e60 <HAL_DMA_Abort+0x25c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <HAL_DMA_Abort+0x260>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <HAL_DMA_Abort+0x264>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <HAL_DMA_Abort+0x268>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <HAL_DMA_Abort+0x26c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_DMA_Abort+0x20e>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a19      	ldr	r2, [pc, #100]	; (8003e74 <HAL_DMA_Abort+0x270>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d132      	bne.n	8003e78 <HAL_DMA_Abort+0x274>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e031      	b.n	8003e7a <HAL_DMA_Abort+0x276>
 8003e16:	bf00      	nop
 8003e18:	40020010 	.word	0x40020010
 8003e1c:	40020028 	.word	0x40020028
 8003e20:	40020040 	.word	0x40020040
 8003e24:	40020058 	.word	0x40020058
 8003e28:	40020070 	.word	0x40020070
 8003e2c:	40020088 	.word	0x40020088
 8003e30:	400200a0 	.word	0x400200a0
 8003e34:	400200b8 	.word	0x400200b8
 8003e38:	40020410 	.word	0x40020410
 8003e3c:	40020428 	.word	0x40020428
 8003e40:	40020440 	.word	0x40020440
 8003e44:	40020458 	.word	0x40020458
 8003e48:	40020470 	.word	0x40020470
 8003e4c:	40020488 	.word	0x40020488
 8003e50:	400204a0 	.word	0x400204a0
 8003e54:	400204b8 	.word	0x400204b8
 8003e58:	58025408 	.word	0x58025408
 8003e5c:	5802541c 	.word	0x5802541c
 8003e60:	58025430 	.word	0x58025430
 8003e64:	58025444 	.word	0x58025444
 8003e68:	58025458 	.word	0x58025458
 8003e6c:	5802546c 	.word	0x5802546c
 8003e70:	58025480 	.word	0x58025480
 8003e74:	58025494 	.word	0x58025494
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a6d      	ldr	r2, [pc, #436]	; (8004048 <HAL_DMA_Abort+0x444>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d04a      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a6b      	ldr	r2, [pc, #428]	; (800404c <HAL_DMA_Abort+0x448>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d045      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6a      	ldr	r2, [pc, #424]	; (8004050 <HAL_DMA_Abort+0x44c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d040      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a68      	ldr	r2, [pc, #416]	; (8004054 <HAL_DMA_Abort+0x450>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d03b      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a67      	ldr	r2, [pc, #412]	; (8004058 <HAL_DMA_Abort+0x454>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d036      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a65      	ldr	r2, [pc, #404]	; (800405c <HAL_DMA_Abort+0x458>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d031      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a64      	ldr	r2, [pc, #400]	; (8004060 <HAL_DMA_Abort+0x45c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d02c      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a62      	ldr	r2, [pc, #392]	; (8004064 <HAL_DMA_Abort+0x460>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d027      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a61      	ldr	r2, [pc, #388]	; (8004068 <HAL_DMA_Abort+0x464>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a5f      	ldr	r2, [pc, #380]	; (800406c <HAL_DMA_Abort+0x468>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a5e      	ldr	r2, [pc, #376]	; (8004070 <HAL_DMA_Abort+0x46c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a5c      	ldr	r2, [pc, #368]	; (8004074 <HAL_DMA_Abort+0x470>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a5b      	ldr	r2, [pc, #364]	; (8004078 <HAL_DMA_Abort+0x474>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a59      	ldr	r2, [pc, #356]	; (800407c <HAL_DMA_Abort+0x478>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_DMA_Abort+0x47c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_DMA_Abort+0x32a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a56      	ldr	r2, [pc, #344]	; (8004084 <HAL_DMA_Abort+0x480>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <HAL_DMA_Abort+0x33c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e007      	b.n	8003f50 <HAL_DMA_Abort+0x34c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f50:	e013      	b.n	8003f7a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f52:	f7fe ff99 	bl	8002e88 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d90c      	bls.n	8003f7a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e12d      	b.n	80041d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e5      	bne.n	8003f52 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	; (8004048 <HAL_DMA_Abort+0x444>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d04a      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2d      	ldr	r2, [pc, #180]	; (800404c <HAL_DMA_Abort+0x448>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d045      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2c      	ldr	r2, [pc, #176]	; (8004050 <HAL_DMA_Abort+0x44c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d040      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2a      	ldr	r2, [pc, #168]	; (8004054 <HAL_DMA_Abort+0x450>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d03b      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a29      	ldr	r2, [pc, #164]	; (8004058 <HAL_DMA_Abort+0x454>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d036      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a27      	ldr	r2, [pc, #156]	; (800405c <HAL_DMA_Abort+0x458>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d031      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a26      	ldr	r2, [pc, #152]	; (8004060 <HAL_DMA_Abort+0x45c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d02c      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a24      	ldr	r2, [pc, #144]	; (8004064 <HAL_DMA_Abort+0x460>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d027      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a23      	ldr	r2, [pc, #140]	; (8004068 <HAL_DMA_Abort+0x464>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a21      	ldr	r2, [pc, #132]	; (800406c <HAL_DMA_Abort+0x468>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01d      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a20      	ldr	r2, [pc, #128]	; (8004070 <HAL_DMA_Abort+0x46c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <HAL_DMA_Abort+0x470>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_DMA_Abort+0x474>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1b      	ldr	r2, [pc, #108]	; (800407c <HAL_DMA_Abort+0x478>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1a      	ldr	r2, [pc, #104]	; (8004080 <HAL_DMA_Abort+0x47c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_DMA_Abort+0x422>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a18      	ldr	r2, [pc, #96]	; (8004084 <HAL_DMA_Abort+0x480>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <HAL_DMA_Abort+0x426>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_DMA_Abort+0x428>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d02b      	beq.n	8004088 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	223f      	movs	r2, #63	; 0x3f
 8004040:	409a      	lsls	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	609a      	str	r2, [r3, #8]
 8004046:	e02a      	b.n	800409e <HAL_DMA_Abort+0x49a>
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2201      	movs	r2, #1
 8004098:	409a      	lsls	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a4f      	ldr	r2, [pc, #316]	; (80041e0 <HAL_DMA_Abort+0x5dc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d072      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a4d      	ldr	r2, [pc, #308]	; (80041e4 <HAL_DMA_Abort+0x5e0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d06d      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a4c      	ldr	r2, [pc, #304]	; (80041e8 <HAL_DMA_Abort+0x5e4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d068      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a4a      	ldr	r2, [pc, #296]	; (80041ec <HAL_DMA_Abort+0x5e8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d063      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a49      	ldr	r2, [pc, #292]	; (80041f0 <HAL_DMA_Abort+0x5ec>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d05e      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a47      	ldr	r2, [pc, #284]	; (80041f4 <HAL_DMA_Abort+0x5f0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d059      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a46      	ldr	r2, [pc, #280]	; (80041f8 <HAL_DMA_Abort+0x5f4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d054      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a44      	ldr	r2, [pc, #272]	; (80041fc <HAL_DMA_Abort+0x5f8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d04f      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a43      	ldr	r2, [pc, #268]	; (8004200 <HAL_DMA_Abort+0x5fc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d04a      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a41      	ldr	r2, [pc, #260]	; (8004204 <HAL_DMA_Abort+0x600>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d045      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a40      	ldr	r2, [pc, #256]	; (8004208 <HAL_DMA_Abort+0x604>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d040      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a3e      	ldr	r2, [pc, #248]	; (800420c <HAL_DMA_Abort+0x608>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d03b      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a3d      	ldr	r2, [pc, #244]	; (8004210 <HAL_DMA_Abort+0x60c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d036      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a3b      	ldr	r2, [pc, #236]	; (8004214 <HAL_DMA_Abort+0x610>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d031      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a3a      	ldr	r2, [pc, #232]	; (8004218 <HAL_DMA_Abort+0x614>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d02c      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a38      	ldr	r2, [pc, #224]	; (800421c <HAL_DMA_Abort+0x618>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d027      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a37      	ldr	r2, [pc, #220]	; (8004220 <HAL_DMA_Abort+0x61c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d022      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a35      	ldr	r2, [pc, #212]	; (8004224 <HAL_DMA_Abort+0x620>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01d      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a34      	ldr	r2, [pc, #208]	; (8004228 <HAL_DMA_Abort+0x624>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d018      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a32      	ldr	r2, [pc, #200]	; (800422c <HAL_DMA_Abort+0x628>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d013      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a31      	ldr	r2, [pc, #196]	; (8004230 <HAL_DMA_Abort+0x62c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00e      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2f      	ldr	r2, [pc, #188]	; (8004234 <HAL_DMA_Abort+0x630>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d009      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2e      	ldr	r2, [pc, #184]	; (8004238 <HAL_DMA_Abort+0x634>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_DMA_Abort+0x58a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2c      	ldr	r2, [pc, #176]	; (800423c <HAL_DMA_Abort+0x638>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d101      	bne.n	8004192 <HAL_DMA_Abort+0x58e>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <HAL_DMA_Abort+0x590>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d015      	beq.n	80041c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00c      	beq.n	80041c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80041c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40020010 	.word	0x40020010
 80041e4:	40020028 	.word	0x40020028
 80041e8:	40020040 	.word	0x40020040
 80041ec:	40020058 	.word	0x40020058
 80041f0:	40020070 	.word	0x40020070
 80041f4:	40020088 	.word	0x40020088
 80041f8:	400200a0 	.word	0x400200a0
 80041fc:	400200b8 	.word	0x400200b8
 8004200:	40020410 	.word	0x40020410
 8004204:	40020428 	.word	0x40020428
 8004208:	40020440 	.word	0x40020440
 800420c:	40020458 	.word	0x40020458
 8004210:	40020470 	.word	0x40020470
 8004214:	40020488 	.word	0x40020488
 8004218:	400204a0 	.word	0x400204a0
 800421c:	400204b8 	.word	0x400204b8
 8004220:	58025408 	.word	0x58025408
 8004224:	5802541c 	.word	0x5802541c
 8004228:	58025430 	.word	0x58025430
 800422c:	58025444 	.word	0x58025444
 8004230:	58025458 	.word	0x58025458
 8004234:	5802546c 	.word	0x5802546c
 8004238:	58025480 	.word	0x58025480
 800423c:	58025494 	.word	0x58025494

08004240 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e205      	b.n	800465e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d004      	beq.n	8004268 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2280      	movs	r2, #128	; 0x80
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e1fa      	b.n	800465e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a8c      	ldr	r2, [pc, #560]	; (80044a0 <HAL_DMA_Abort_IT+0x260>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d04a      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a8b      	ldr	r2, [pc, #556]	; (80044a4 <HAL_DMA_Abort_IT+0x264>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d045      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a89      	ldr	r2, [pc, #548]	; (80044a8 <HAL_DMA_Abort_IT+0x268>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d040      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a88      	ldr	r2, [pc, #544]	; (80044ac <HAL_DMA_Abort_IT+0x26c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d03b      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a86      	ldr	r2, [pc, #536]	; (80044b0 <HAL_DMA_Abort_IT+0x270>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d036      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a85      	ldr	r2, [pc, #532]	; (80044b4 <HAL_DMA_Abort_IT+0x274>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d031      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a83      	ldr	r2, [pc, #524]	; (80044b8 <HAL_DMA_Abort_IT+0x278>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d02c      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a82      	ldr	r2, [pc, #520]	; (80044bc <HAL_DMA_Abort_IT+0x27c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d027      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a80      	ldr	r2, [pc, #512]	; (80044c0 <HAL_DMA_Abort_IT+0x280>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d022      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7f      	ldr	r2, [pc, #508]	; (80044c4 <HAL_DMA_Abort_IT+0x284>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d01d      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7d      	ldr	r2, [pc, #500]	; (80044c8 <HAL_DMA_Abort_IT+0x288>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d018      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7c      	ldr	r2, [pc, #496]	; (80044cc <HAL_DMA_Abort_IT+0x28c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7a      	ldr	r2, [pc, #488]	; (80044d0 <HAL_DMA_Abort_IT+0x290>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a79      	ldr	r2, [pc, #484]	; (80044d4 <HAL_DMA_Abort_IT+0x294>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d009      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a77      	ldr	r2, [pc, #476]	; (80044d8 <HAL_DMA_Abort_IT+0x298>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_DMA_Abort_IT+0xc8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a76      	ldr	r2, [pc, #472]	; (80044dc <HAL_DMA_Abort_IT+0x29c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <HAL_DMA_Abort_IT+0xcc>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <HAL_DMA_Abort_IT+0xce>
 800430c:	2300      	movs	r3, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d065      	beq.n	80043de <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2204      	movs	r2, #4
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a60      	ldr	r2, [pc, #384]	; (80044a0 <HAL_DMA_Abort_IT+0x260>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d04a      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a5e      	ldr	r2, [pc, #376]	; (80044a4 <HAL_DMA_Abort_IT+0x264>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d045      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a5d      	ldr	r2, [pc, #372]	; (80044a8 <HAL_DMA_Abort_IT+0x268>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d040      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a5b      	ldr	r2, [pc, #364]	; (80044ac <HAL_DMA_Abort_IT+0x26c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d03b      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5a      	ldr	r2, [pc, #360]	; (80044b0 <HAL_DMA_Abort_IT+0x270>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d036      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a58      	ldr	r2, [pc, #352]	; (80044b4 <HAL_DMA_Abort_IT+0x274>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d031      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a57      	ldr	r2, [pc, #348]	; (80044b8 <HAL_DMA_Abort_IT+0x278>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d02c      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a55      	ldr	r2, [pc, #340]	; (80044bc <HAL_DMA_Abort_IT+0x27c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d027      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a54      	ldr	r2, [pc, #336]	; (80044c0 <HAL_DMA_Abort_IT+0x280>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a52      	ldr	r2, [pc, #328]	; (80044c4 <HAL_DMA_Abort_IT+0x284>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01d      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a51      	ldr	r2, [pc, #324]	; (80044c8 <HAL_DMA_Abort_IT+0x288>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a4f      	ldr	r2, [pc, #316]	; (80044cc <HAL_DMA_Abort_IT+0x28c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a4e      	ldr	r2, [pc, #312]	; (80044d0 <HAL_DMA_Abort_IT+0x290>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a4c      	ldr	r2, [pc, #304]	; (80044d4 <HAL_DMA_Abort_IT+0x294>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a4b      	ldr	r2, [pc, #300]	; (80044d8 <HAL_DMA_Abort_IT+0x298>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_DMA_Abort_IT+0x17a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a49      	ldr	r2, [pc, #292]	; (80044dc <HAL_DMA_Abort_IT+0x29c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <HAL_DMA_Abort_IT+0x18c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e147      	b.n	800465c <HAL_DMA_Abort_IT+0x41c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e13e      	b.n	800465c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 020e 	bic.w	r2, r2, #14
 80043ec:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2b      	ldr	r2, [pc, #172]	; (80044a0 <HAL_DMA_Abort_IT+0x260>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d04a      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a29      	ldr	r2, [pc, #164]	; (80044a4 <HAL_DMA_Abort_IT+0x264>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d045      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a28      	ldr	r2, [pc, #160]	; (80044a8 <HAL_DMA_Abort_IT+0x268>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d040      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a26      	ldr	r2, [pc, #152]	; (80044ac <HAL_DMA_Abort_IT+0x26c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d03b      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <HAL_DMA_Abort_IT+0x270>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d036      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a23      	ldr	r2, [pc, #140]	; (80044b4 <HAL_DMA_Abort_IT+0x274>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d031      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a22      	ldr	r2, [pc, #136]	; (80044b8 <HAL_DMA_Abort_IT+0x278>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d02c      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a20      	ldr	r2, [pc, #128]	; (80044bc <HAL_DMA_Abort_IT+0x27c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d027      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <HAL_DMA_Abort_IT+0x280>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d022      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <HAL_DMA_Abort_IT+0x284>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01d      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <HAL_DMA_Abort_IT+0x288>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d018      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_DMA_Abort_IT+0x28c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <HAL_DMA_Abort_IT+0x290>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a17      	ldr	r2, [pc, #92]	; (80044d4 <HAL_DMA_Abort_IT+0x294>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a16      	ldr	r2, [pc, #88]	; (80044d8 <HAL_DMA_Abort_IT+0x298>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_DMA_Abort_IT+0x24e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <HAL_DMA_Abort_IT+0x29c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d128      	bne.n	80044e0 <HAL_DMA_Abort_IT+0x2a0>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e027      	b.n	80044f0 <HAL_DMA_Abort_IT+0x2b0>
 80044a0:	40020010 	.word	0x40020010
 80044a4:	40020028 	.word	0x40020028
 80044a8:	40020040 	.word	0x40020040
 80044ac:	40020058 	.word	0x40020058
 80044b0:	40020070 	.word	0x40020070
 80044b4:	40020088 	.word	0x40020088
 80044b8:	400200a0 	.word	0x400200a0
 80044bc:	400200b8 	.word	0x400200b8
 80044c0:	40020410 	.word	0x40020410
 80044c4:	40020428 	.word	0x40020428
 80044c8:	40020440 	.word	0x40020440
 80044cc:	40020458 	.word	0x40020458
 80044d0:	40020470 	.word	0x40020470
 80044d4:	40020488 	.word	0x40020488
 80044d8:	400204a0 	.word	0x400204a0
 80044dc:	400204b8 	.word	0x400204b8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a5c      	ldr	r2, [pc, #368]	; (8004668 <HAL_DMA_Abort_IT+0x428>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d072      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a5b      	ldr	r2, [pc, #364]	; (800466c <HAL_DMA_Abort_IT+0x42c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d06d      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a59      	ldr	r2, [pc, #356]	; (8004670 <HAL_DMA_Abort_IT+0x430>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d068      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a58      	ldr	r2, [pc, #352]	; (8004674 <HAL_DMA_Abort_IT+0x434>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d063      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a56      	ldr	r2, [pc, #344]	; (8004678 <HAL_DMA_Abort_IT+0x438>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d05e      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a55      	ldr	r2, [pc, #340]	; (800467c <HAL_DMA_Abort_IT+0x43c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d059      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a53      	ldr	r2, [pc, #332]	; (8004680 <HAL_DMA_Abort_IT+0x440>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d054      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a52      	ldr	r2, [pc, #328]	; (8004684 <HAL_DMA_Abort_IT+0x444>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d04f      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a50      	ldr	r2, [pc, #320]	; (8004688 <HAL_DMA_Abort_IT+0x448>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04a      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a4f      	ldr	r2, [pc, #316]	; (800468c <HAL_DMA_Abort_IT+0x44c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d045      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a4d      	ldr	r2, [pc, #308]	; (8004690 <HAL_DMA_Abort_IT+0x450>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d040      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a4c      	ldr	r2, [pc, #304]	; (8004694 <HAL_DMA_Abort_IT+0x454>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d03b      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a4a      	ldr	r2, [pc, #296]	; (8004698 <HAL_DMA_Abort_IT+0x458>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d036      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a49      	ldr	r2, [pc, #292]	; (800469c <HAL_DMA_Abort_IT+0x45c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d031      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a47      	ldr	r2, [pc, #284]	; (80046a0 <HAL_DMA_Abort_IT+0x460>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d02c      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a46      	ldr	r2, [pc, #280]	; (80046a4 <HAL_DMA_Abort_IT+0x464>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d027      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a44      	ldr	r2, [pc, #272]	; (80046a8 <HAL_DMA_Abort_IT+0x468>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d022      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a43      	ldr	r2, [pc, #268]	; (80046ac <HAL_DMA_Abort_IT+0x46c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d01d      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a41      	ldr	r2, [pc, #260]	; (80046b0 <HAL_DMA_Abort_IT+0x470>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a40      	ldr	r2, [pc, #256]	; (80046b4 <HAL_DMA_Abort_IT+0x474>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a3e      	ldr	r2, [pc, #248]	; (80046b8 <HAL_DMA_Abort_IT+0x478>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a3d      	ldr	r2, [pc, #244]	; (80046bc <HAL_DMA_Abort_IT+0x47c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a3b      	ldr	r2, [pc, #236]	; (80046c0 <HAL_DMA_Abort_IT+0x480>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x3a0>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3a      	ldr	r2, [pc, #232]	; (80046c4 <HAL_DMA_Abort_IT+0x484>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <HAL_DMA_Abort_IT+0x3a4>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_DMA_Abort_IT+0x3a6>
 80045e4:	2300      	movs	r3, #0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d028      	beq.n	800463c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2201      	movs	r2, #1
 800460a:	409a      	lsls	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004618:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00c      	beq.n	800463c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004630:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800463a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40020010 	.word	0x40020010
 800466c:	40020028 	.word	0x40020028
 8004670:	40020040 	.word	0x40020040
 8004674:	40020058 	.word	0x40020058
 8004678:	40020070 	.word	0x40020070
 800467c:	40020088 	.word	0x40020088
 8004680:	400200a0 	.word	0x400200a0
 8004684:	400200b8 	.word	0x400200b8
 8004688:	40020410 	.word	0x40020410
 800468c:	40020428 	.word	0x40020428
 8004690:	40020440 	.word	0x40020440
 8004694:	40020458 	.word	0x40020458
 8004698:	40020470 	.word	0x40020470
 800469c:	40020488 	.word	0x40020488
 80046a0:	400204a0 	.word	0x400204a0
 80046a4:	400204b8 	.word	0x400204b8
 80046a8:	58025408 	.word	0x58025408
 80046ac:	5802541c 	.word	0x5802541c
 80046b0:	58025430 	.word	0x58025430
 80046b4:	58025444 	.word	0x58025444
 80046b8:	58025458 	.word	0x58025458
 80046bc:	5802546c 	.word	0x5802546c
 80046c0:	58025480 	.word	0x58025480
 80046c4:	58025494 	.word	0x58025494

080046c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	; 0x28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046d4:	4b67      	ldr	r3, [pc, #412]	; (8004874 <HAL_DMA_IRQHandler+0x1ac>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a67      	ldr	r2, [pc, #412]	; (8004878 <HAL_DMA_IRQHandler+0x1b0>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	0a9b      	lsrs	r3, r3, #10
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5f      	ldr	r2, [pc, #380]	; (800487c <HAL_DMA_IRQHandler+0x1b4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d04a      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5d      	ldr	r2, [pc, #372]	; (8004880 <HAL_DMA_IRQHandler+0x1b8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d045      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5c      	ldr	r2, [pc, #368]	; (8004884 <HAL_DMA_IRQHandler+0x1bc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d040      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5a      	ldr	r2, [pc, #360]	; (8004888 <HAL_DMA_IRQHandler+0x1c0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d03b      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a59      	ldr	r2, [pc, #356]	; (800488c <HAL_DMA_IRQHandler+0x1c4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d036      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a57      	ldr	r2, [pc, #348]	; (8004890 <HAL_DMA_IRQHandler+0x1c8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d031      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a56      	ldr	r2, [pc, #344]	; (8004894 <HAL_DMA_IRQHandler+0x1cc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d02c      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a54      	ldr	r2, [pc, #336]	; (8004898 <HAL_DMA_IRQHandler+0x1d0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d027      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a53      	ldr	r2, [pc, #332]	; (800489c <HAL_DMA_IRQHandler+0x1d4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d022      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a51      	ldr	r2, [pc, #324]	; (80048a0 <HAL_DMA_IRQHandler+0x1d8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01d      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a50      	ldr	r2, [pc, #320]	; (80048a4 <HAL_DMA_IRQHandler+0x1dc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a4e      	ldr	r2, [pc, #312]	; (80048a8 <HAL_DMA_IRQHandler+0x1e0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a4d      	ldr	r2, [pc, #308]	; (80048ac <HAL_DMA_IRQHandler+0x1e4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a4b      	ldr	r2, [pc, #300]	; (80048b0 <HAL_DMA_IRQHandler+0x1e8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a4a      	ldr	r2, [pc, #296]	; (80048b4 <HAL_DMA_IRQHandler+0x1ec>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_DMA_IRQHandler+0xd2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a48      	ldr	r2, [pc, #288]	; (80048b8 <HAL_DMA_IRQHandler+0x1f0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d101      	bne.n	800479e <HAL_DMA_IRQHandler+0xd6>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <HAL_DMA_IRQHandler+0xd8>
 800479e:	2300      	movs	r3, #0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 842b 	beq.w	8004ffc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	2208      	movs	r2, #8
 80047b0:	409a      	lsls	r2, r3
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a2 	beq.w	8004900 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a2e      	ldr	r2, [pc, #184]	; (800487c <HAL_DMA_IRQHandler+0x1b4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d04a      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a2d      	ldr	r2, [pc, #180]	; (8004880 <HAL_DMA_IRQHandler+0x1b8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d045      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2b      	ldr	r2, [pc, #172]	; (8004884 <HAL_DMA_IRQHandler+0x1bc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d040      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <HAL_DMA_IRQHandler+0x1c0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d03b      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a28      	ldr	r2, [pc, #160]	; (800488c <HAL_DMA_IRQHandler+0x1c4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d036      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a27      	ldr	r2, [pc, #156]	; (8004890 <HAL_DMA_IRQHandler+0x1c8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d031      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a25      	ldr	r2, [pc, #148]	; (8004894 <HAL_DMA_IRQHandler+0x1cc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d02c      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a24      	ldr	r2, [pc, #144]	; (8004898 <HAL_DMA_IRQHandler+0x1d0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d027      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a22      	ldr	r2, [pc, #136]	; (800489c <HAL_DMA_IRQHandler+0x1d4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d022      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <HAL_DMA_IRQHandler+0x1d8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d01d      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <HAL_DMA_IRQHandler+0x1dc>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <HAL_DMA_IRQHandler+0x1e0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <HAL_DMA_IRQHandler+0x1e4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <HAL_DMA_IRQHandler+0x1e8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_DMA_IRQHandler+0x1ec>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_DMA_IRQHandler+0x194>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_DMA_IRQHandler+0x1f0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d12f      	bne.n	80048bc <HAL_DMA_IRQHandler+0x1f4>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e02e      	b.n	80048d0 <HAL_DMA_IRQHandler+0x208>
 8004872:	bf00      	nop
 8004874:	24000020 	.word	0x24000020
 8004878:	1b4e81b5 	.word	0x1b4e81b5
 800487c:	40020010 	.word	0x40020010
 8004880:	40020028 	.word	0x40020028
 8004884:	40020040 	.word	0x40020040
 8004888:	40020058 	.word	0x40020058
 800488c:	40020070 	.word	0x40020070
 8004890:	40020088 	.word	0x40020088
 8004894:	400200a0 	.word	0x400200a0
 8004898:	400200b8 	.word	0x400200b8
 800489c:	40020410 	.word	0x40020410
 80048a0:	40020428 	.word	0x40020428
 80048a4:	40020440 	.word	0x40020440
 80048a8:	40020458 	.word	0x40020458
 80048ac:	40020470 	.word	0x40020470
 80048b0:	40020488 	.word	0x40020488
 80048b4:	400204a0 	.word	0x400204a0
 80048b8:	400204b8 	.word	0x400204b8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf14      	ite	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	2300      	moveq	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d015      	beq.n	8004900 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0204 	bic.w	r2, r2, #4
 80048e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	2208      	movs	r2, #8
 80048ee:	409a      	lsls	r2, r3
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	f043 0201 	orr.w	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d06e      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a69      	ldr	r2, [pc, #420]	; (8004ac0 <HAL_DMA_IRQHandler+0x3f8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d04a      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a67      	ldr	r2, [pc, #412]	; (8004ac4 <HAL_DMA_IRQHandler+0x3fc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d045      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a66      	ldr	r2, [pc, #408]	; (8004ac8 <HAL_DMA_IRQHandler+0x400>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d040      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a64      	ldr	r2, [pc, #400]	; (8004acc <HAL_DMA_IRQHandler+0x404>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d03b      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a63      	ldr	r2, [pc, #396]	; (8004ad0 <HAL_DMA_IRQHandler+0x408>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d036      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a61      	ldr	r2, [pc, #388]	; (8004ad4 <HAL_DMA_IRQHandler+0x40c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d031      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a60      	ldr	r2, [pc, #384]	; (8004ad8 <HAL_DMA_IRQHandler+0x410>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d02c      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a5e      	ldr	r2, [pc, #376]	; (8004adc <HAL_DMA_IRQHandler+0x414>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d027      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a5d      	ldr	r2, [pc, #372]	; (8004ae0 <HAL_DMA_IRQHandler+0x418>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d022      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a5b      	ldr	r2, [pc, #364]	; (8004ae4 <HAL_DMA_IRQHandler+0x41c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01d      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a5a      	ldr	r2, [pc, #360]	; (8004ae8 <HAL_DMA_IRQHandler+0x420>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d018      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a58      	ldr	r2, [pc, #352]	; (8004aec <HAL_DMA_IRQHandler+0x424>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a57      	ldr	r2, [pc, #348]	; (8004af0 <HAL_DMA_IRQHandler+0x428>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a55      	ldr	r2, [pc, #340]	; (8004af4 <HAL_DMA_IRQHandler+0x42c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a54      	ldr	r2, [pc, #336]	; (8004af8 <HAL_DMA_IRQHandler+0x430>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x2ee>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a52      	ldr	r2, [pc, #328]	; (8004afc <HAL_DMA_IRQHandler+0x434>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d10a      	bne.n	80049cc <HAL_DMA_IRQHandler+0x304>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e003      	b.n	80049d4 <HAL_DMA_IRQHandler+0x30c>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	2201      	movs	r2, #1
 80049e2:	409a      	lsls	r2, r3
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	f043 0202 	orr.w	r2, r3, #2
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	2204      	movs	r2, #4
 80049fe:	409a      	lsls	r2, r3
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 808f 	beq.w	8004b28 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ac0 <HAL_DMA_IRQHandler+0x3f8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d04a      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2a      	ldr	r2, [pc, #168]	; (8004ac4 <HAL_DMA_IRQHandler+0x3fc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d045      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a29      	ldr	r2, [pc, #164]	; (8004ac8 <HAL_DMA_IRQHandler+0x400>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d040      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a27      	ldr	r2, [pc, #156]	; (8004acc <HAL_DMA_IRQHandler+0x404>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d03b      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a26      	ldr	r2, [pc, #152]	; (8004ad0 <HAL_DMA_IRQHandler+0x408>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d036      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <HAL_DMA_IRQHandler+0x40c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d031      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a23      	ldr	r2, [pc, #140]	; (8004ad8 <HAL_DMA_IRQHandler+0x410>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d02c      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a21      	ldr	r2, [pc, #132]	; (8004adc <HAL_DMA_IRQHandler+0x414>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d027      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <HAL_DMA_IRQHandler+0x418>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d022      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1e      	ldr	r2, [pc, #120]	; (8004ae4 <HAL_DMA_IRQHandler+0x41c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01d      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <HAL_DMA_IRQHandler+0x420>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d018      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <HAL_DMA_IRQHandler+0x424>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1a      	ldr	r2, [pc, #104]	; (8004af0 <HAL_DMA_IRQHandler+0x428>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00e      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <HAL_DMA_IRQHandler+0x42c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <HAL_DMA_IRQHandler+0x430>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x3e2>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a15      	ldr	r2, [pc, #84]	; (8004afc <HAL_DMA_IRQHandler+0x434>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d12a      	bne.n	8004b00 <HAL_DMA_IRQHandler+0x438>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e023      	b.n	8004b08 <HAL_DMA_IRQHandler+0x440>
 8004ac0:	40020010 	.word	0x40020010
 8004ac4:	40020028 	.word	0x40020028
 8004ac8:	40020040 	.word	0x40020040
 8004acc:	40020058 	.word	0x40020058
 8004ad0:	40020070 	.word	0x40020070
 8004ad4:	40020088 	.word	0x40020088
 8004ad8:	400200a0 	.word	0x400200a0
 8004adc:	400200b8 	.word	0x400200b8
 8004ae0:	40020410 	.word	0x40020410
 8004ae4:	40020428 	.word	0x40020428
 8004ae8:	40020440 	.word	0x40020440
 8004aec:	40020458 	.word	0x40020458
 8004af0:	40020470 	.word	0x40020470
 8004af4:	40020488 	.word	0x40020488
 8004af8:	400204a0 	.word	0x400204a0
 8004afc:	400204b8 	.word	0x400204b8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	2204      	movs	r2, #4
 8004b16:	409a      	lsls	r2, r3
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	f043 0204 	orr.w	r2, r3, #4
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	2210      	movs	r2, #16
 8004b32:	409a      	lsls	r2, r3
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80a6 	beq.w	8004c8a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a85      	ldr	r2, [pc, #532]	; (8004d58 <HAL_DMA_IRQHandler+0x690>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d04a      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a83      	ldr	r2, [pc, #524]	; (8004d5c <HAL_DMA_IRQHandler+0x694>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d045      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a82      	ldr	r2, [pc, #520]	; (8004d60 <HAL_DMA_IRQHandler+0x698>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d040      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a80      	ldr	r2, [pc, #512]	; (8004d64 <HAL_DMA_IRQHandler+0x69c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d03b      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a7f      	ldr	r2, [pc, #508]	; (8004d68 <HAL_DMA_IRQHandler+0x6a0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d036      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a7d      	ldr	r2, [pc, #500]	; (8004d6c <HAL_DMA_IRQHandler+0x6a4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d031      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a7c      	ldr	r2, [pc, #496]	; (8004d70 <HAL_DMA_IRQHandler+0x6a8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d02c      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a7a      	ldr	r2, [pc, #488]	; (8004d74 <HAL_DMA_IRQHandler+0x6ac>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d027      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a79      	ldr	r2, [pc, #484]	; (8004d78 <HAL_DMA_IRQHandler+0x6b0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d022      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a77      	ldr	r2, [pc, #476]	; (8004d7c <HAL_DMA_IRQHandler+0x6b4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01d      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a76      	ldr	r2, [pc, #472]	; (8004d80 <HAL_DMA_IRQHandler+0x6b8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d018      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a74      	ldr	r2, [pc, #464]	; (8004d84 <HAL_DMA_IRQHandler+0x6bc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a73      	ldr	r2, [pc, #460]	; (8004d88 <HAL_DMA_IRQHandler+0x6c0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a71      	ldr	r2, [pc, #452]	; (8004d8c <HAL_DMA_IRQHandler+0x6c4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a70      	ldr	r2, [pc, #448]	; (8004d90 <HAL_DMA_IRQHandler+0x6c8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_DMA_IRQHandler+0x516>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a6e      	ldr	r2, [pc, #440]	; (8004d94 <HAL_DMA_IRQHandler+0x6cc>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d10a      	bne.n	8004bf4 <HAL_DMA_IRQHandler+0x52c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	e009      	b.n	8004c08 <HAL_DMA_IRQHandler+0x540>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf14      	ite	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	2300      	moveq	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d03e      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	2210      	movs	r2, #16
 8004c16:	409a      	lsls	r2, r3
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d018      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d108      	bne.n	8004c4a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d024      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
 8004c48:	e01f      	b.n	8004c8a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01b      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
 8004c5a:	e016      	b.n	8004c8a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d107      	bne.n	8004c7a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0208 	bic.w	r2, r2, #8
 8004c78:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2220      	movs	r2, #32
 8004c94:	409a      	lsls	r2, r3
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8110 	beq.w	8004ec0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2c      	ldr	r2, [pc, #176]	; (8004d58 <HAL_DMA_IRQHandler+0x690>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d04a      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2b      	ldr	r2, [pc, #172]	; (8004d5c <HAL_DMA_IRQHandler+0x694>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d045      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a29      	ldr	r2, [pc, #164]	; (8004d60 <HAL_DMA_IRQHandler+0x698>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d040      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a28      	ldr	r2, [pc, #160]	; (8004d64 <HAL_DMA_IRQHandler+0x69c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d03b      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <HAL_DMA_IRQHandler+0x6a0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d036      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a25      	ldr	r2, [pc, #148]	; (8004d6c <HAL_DMA_IRQHandler+0x6a4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d031      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a23      	ldr	r2, [pc, #140]	; (8004d70 <HAL_DMA_IRQHandler+0x6a8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d02c      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <HAL_DMA_IRQHandler+0x6ac>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d027      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <HAL_DMA_IRQHandler+0x6b0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d022      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_DMA_IRQHandler+0x6b4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d01d      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1d      	ldr	r2, [pc, #116]	; (8004d80 <HAL_DMA_IRQHandler+0x6b8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d018      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1c      	ldr	r2, [pc, #112]	; (8004d84 <HAL_DMA_IRQHandler+0x6bc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1a      	ldr	r2, [pc, #104]	; (8004d88 <HAL_DMA_IRQHandler+0x6c0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00e      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <HAL_DMA_IRQHandler+0x6c4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d009      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <HAL_DMA_IRQHandler+0x6c8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x678>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <HAL_DMA_IRQHandler+0x6cc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d12b      	bne.n	8004d98 <HAL_DMA_IRQHandler+0x6d0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bf14      	ite	ne
 8004d4e:	2301      	movne	r3, #1
 8004d50:	2300      	moveq	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	e02a      	b.n	8004dac <HAL_DMA_IRQHandler+0x6e4>
 8004d56:	bf00      	nop
 8004d58:	40020010 	.word	0x40020010
 8004d5c:	40020028 	.word	0x40020028
 8004d60:	40020040 	.word	0x40020040
 8004d64:	40020058 	.word	0x40020058
 8004d68:	40020070 	.word	0x40020070
 8004d6c:	40020088 	.word	0x40020088
 8004d70:	400200a0 	.word	0x400200a0
 8004d74:	400200b8 	.word	0x400200b8
 8004d78:	40020410 	.word	0x40020410
 8004d7c:	40020428 	.word	0x40020428
 8004d80:	40020440 	.word	0x40020440
 8004d84:	40020458 	.word	0x40020458
 8004d88:	40020470 	.word	0x40020470
 8004d8c:	40020488 	.word	0x40020488
 8004d90:	400204a0 	.word	0x400204a0
 8004d94:	400204b8 	.word	0x400204b8
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 8087 	beq.w	8004ec0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	2220      	movs	r2, #32
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d139      	bne.n	8004e42 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0216 	bic.w	r2, r2, #22
 8004ddc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <HAL_DMA_IRQHandler+0x736>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0208 	bic.w	r2, r2, #8
 8004e0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	223f      	movs	r2, #63	; 0x3f
 8004e18:	409a      	lsls	r2, r3
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 834a 	beq.w	80054cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4798      	blx	r3
          }
          return;
 8004e40:	e344      	b.n	80054cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d018      	beq.n	8004e82 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d108      	bne.n	8004e70 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d02c      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
 8004e6e:	e027      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d023      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
 8004e80:	e01e      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10f      	bne.n	8004eb0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0210 	bic.w	r2, r2, #16
 8004e9e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8306 	beq.w	80054d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8088 	beq.w	8004fe8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2204      	movs	r2, #4
 8004edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a7a      	ldr	r2, [pc, #488]	; (80050d0 <HAL_DMA_IRQHandler+0xa08>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d04a      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a79      	ldr	r2, [pc, #484]	; (80050d4 <HAL_DMA_IRQHandler+0xa0c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d045      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a77      	ldr	r2, [pc, #476]	; (80050d8 <HAL_DMA_IRQHandler+0xa10>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d040      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a76      	ldr	r2, [pc, #472]	; (80050dc <HAL_DMA_IRQHandler+0xa14>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d03b      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a74      	ldr	r2, [pc, #464]	; (80050e0 <HAL_DMA_IRQHandler+0xa18>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d036      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a73      	ldr	r2, [pc, #460]	; (80050e4 <HAL_DMA_IRQHandler+0xa1c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d031      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a71      	ldr	r2, [pc, #452]	; (80050e8 <HAL_DMA_IRQHandler+0xa20>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d02c      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a70      	ldr	r2, [pc, #448]	; (80050ec <HAL_DMA_IRQHandler+0xa24>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d027      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a6e      	ldr	r2, [pc, #440]	; (80050f0 <HAL_DMA_IRQHandler+0xa28>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d022      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a6d      	ldr	r2, [pc, #436]	; (80050f4 <HAL_DMA_IRQHandler+0xa2c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d01d      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a6b      	ldr	r2, [pc, #428]	; (80050f8 <HAL_DMA_IRQHandler+0xa30>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d018      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a6a      	ldr	r2, [pc, #424]	; (80050fc <HAL_DMA_IRQHandler+0xa34>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a68      	ldr	r2, [pc, #416]	; (8005100 <HAL_DMA_IRQHandler+0xa38>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00e      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a67      	ldr	r2, [pc, #412]	; (8005104 <HAL_DMA_IRQHandler+0xa3c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d009      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a65      	ldr	r2, [pc, #404]	; (8005108 <HAL_DMA_IRQHandler+0xa40>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x8b8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a64      	ldr	r2, [pc, #400]	; (800510c <HAL_DMA_IRQHandler+0xa44>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d108      	bne.n	8004f92 <HAL_DMA_IRQHandler+0x8ca>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	e007      	b.n	8004fa2 <HAL_DMA_IRQHandler+0x8da>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0201 	bic.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d307      	bcc.n	8004fbe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f2      	bne.n	8004fa2 <HAL_DMA_IRQHandler+0x8da>
 8004fbc:	e000      	b.n	8004fc0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004fbe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004fd6:	e003      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 8272 	beq.w	80054d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
 8004ffa:	e26c      	b.n	80054d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a43      	ldr	r2, [pc, #268]	; (8005110 <HAL_DMA_IRQHandler+0xa48>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d022      	beq.n	800504c <HAL_DMA_IRQHandler+0x984>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a42      	ldr	r2, [pc, #264]	; (8005114 <HAL_DMA_IRQHandler+0xa4c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d01d      	beq.n	800504c <HAL_DMA_IRQHandler+0x984>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a40      	ldr	r2, [pc, #256]	; (8005118 <HAL_DMA_IRQHandler+0xa50>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d018      	beq.n	800504c <HAL_DMA_IRQHandler+0x984>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a3f      	ldr	r2, [pc, #252]	; (800511c <HAL_DMA_IRQHandler+0xa54>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <HAL_DMA_IRQHandler+0x984>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a3d      	ldr	r2, [pc, #244]	; (8005120 <HAL_DMA_IRQHandler+0xa58>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00e      	beq.n	800504c <HAL_DMA_IRQHandler+0x984>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3c      	ldr	r2, [pc, #240]	; (8005124 <HAL_DMA_IRQHandler+0xa5c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_DMA_IRQHandler+0x984>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a3a      	ldr	r2, [pc, #232]	; (8005128 <HAL_DMA_IRQHandler+0xa60>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_DMA_IRQHandler+0x984>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a39      	ldr	r2, [pc, #228]	; (800512c <HAL_DMA_IRQHandler+0xa64>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d101      	bne.n	8005050 <HAL_DMA_IRQHandler+0x988>
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <HAL_DMA_IRQHandler+0x98a>
 8005050:	2300      	movs	r3, #0
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 823f 	beq.w	80054d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	2204      	movs	r2, #4
 800506a:	409a      	lsls	r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80cd 	beq.w	8005210 <HAL_DMA_IRQHandler+0xb48>
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80c7 	beq.w	8005210 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	2204      	movs	r2, #4
 800508c:	409a      	lsls	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d049      	beq.n	8005130 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8210 	beq.w	80054d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050b8:	e20a      	b.n	80054d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 8206 	beq.w	80054d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050cc:	e200      	b.n	80054d0 <HAL_DMA_IRQHandler+0xe08>
 80050ce:	bf00      	nop
 80050d0:	40020010 	.word	0x40020010
 80050d4:	40020028 	.word	0x40020028
 80050d8:	40020040 	.word	0x40020040
 80050dc:	40020058 	.word	0x40020058
 80050e0:	40020070 	.word	0x40020070
 80050e4:	40020088 	.word	0x40020088
 80050e8:	400200a0 	.word	0x400200a0
 80050ec:	400200b8 	.word	0x400200b8
 80050f0:	40020410 	.word	0x40020410
 80050f4:	40020428 	.word	0x40020428
 80050f8:	40020440 	.word	0x40020440
 80050fc:	40020458 	.word	0x40020458
 8005100:	40020470 	.word	0x40020470
 8005104:	40020488 	.word	0x40020488
 8005108:	400204a0 	.word	0x400204a0
 800510c:	400204b8 	.word	0x400204b8
 8005110:	58025408 	.word	0x58025408
 8005114:	5802541c 	.word	0x5802541c
 8005118:	58025430 	.word	0x58025430
 800511c:	58025444 	.word	0x58025444
 8005120:	58025458 	.word	0x58025458
 8005124:	5802546c 	.word	0x5802546c
 8005128:	58025480 	.word	0x58025480
 800512c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	d160      	bne.n	80051fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a8c      	ldr	r2, [pc, #560]	; (8005370 <HAL_DMA_IRQHandler+0xca8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d04a      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a8a      	ldr	r2, [pc, #552]	; (8005374 <HAL_DMA_IRQHandler+0xcac>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d045      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a89      	ldr	r2, [pc, #548]	; (8005378 <HAL_DMA_IRQHandler+0xcb0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d040      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a87      	ldr	r2, [pc, #540]	; (800537c <HAL_DMA_IRQHandler+0xcb4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d03b      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a86      	ldr	r2, [pc, #536]	; (8005380 <HAL_DMA_IRQHandler+0xcb8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d036      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a84      	ldr	r2, [pc, #528]	; (8005384 <HAL_DMA_IRQHandler+0xcbc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d031      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a83      	ldr	r2, [pc, #524]	; (8005388 <HAL_DMA_IRQHandler+0xcc0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d02c      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a81      	ldr	r2, [pc, #516]	; (800538c <HAL_DMA_IRQHandler+0xcc4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d027      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a80      	ldr	r2, [pc, #512]	; (8005390 <HAL_DMA_IRQHandler+0xcc8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d022      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a7e      	ldr	r2, [pc, #504]	; (8005394 <HAL_DMA_IRQHandler+0xccc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d01d      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a7d      	ldr	r2, [pc, #500]	; (8005398 <HAL_DMA_IRQHandler+0xcd0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d018      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a7b      	ldr	r2, [pc, #492]	; (800539c <HAL_DMA_IRQHandler+0xcd4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d013      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7a      	ldr	r2, [pc, #488]	; (80053a0 <HAL_DMA_IRQHandler+0xcd8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00e      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a78      	ldr	r2, [pc, #480]	; (80053a4 <HAL_DMA_IRQHandler+0xcdc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d009      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a77      	ldr	r2, [pc, #476]	; (80053a8 <HAL_DMA_IRQHandler+0xce0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_DMA_IRQHandler+0xb12>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a75      	ldr	r2, [pc, #468]	; (80053ac <HAL_DMA_IRQHandler+0xce4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d108      	bne.n	80051ec <HAL_DMA_IRQHandler+0xb24>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0208 	bic.w	r2, r2, #8
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e007      	b.n	80051fc <HAL_DMA_IRQHandler+0xb34>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0204 	bic.w	r2, r2, #4
 80051fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8165 	beq.w	80054d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800520e:	e15f      	b.n	80054d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005214:	f003 031f 	and.w	r3, r3, #31
 8005218:	2202      	movs	r2, #2
 800521a:	409a      	lsls	r2, r3
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80c5 	beq.w	80053b0 <HAL_DMA_IRQHandler+0xce8>
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80bf 	beq.w	80053b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	2202      	movs	r2, #2
 800523c:	409a      	lsls	r2, r3
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d018      	beq.n	800527e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 813a 	beq.w	80054d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005268:	e134      	b.n	80054d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8130 	beq.w	80054d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800527c:	e12a      	b.n	80054d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d168      	bne.n	800535a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a38      	ldr	r2, [pc, #224]	; (8005370 <HAL_DMA_IRQHandler+0xca8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d04a      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a37      	ldr	r2, [pc, #220]	; (8005374 <HAL_DMA_IRQHandler+0xcac>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d045      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a35      	ldr	r2, [pc, #212]	; (8005378 <HAL_DMA_IRQHandler+0xcb0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d040      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a34      	ldr	r2, [pc, #208]	; (800537c <HAL_DMA_IRQHandler+0xcb4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d03b      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a32      	ldr	r2, [pc, #200]	; (8005380 <HAL_DMA_IRQHandler+0xcb8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d036      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a31      	ldr	r2, [pc, #196]	; (8005384 <HAL_DMA_IRQHandler+0xcbc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d031      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2f      	ldr	r2, [pc, #188]	; (8005388 <HAL_DMA_IRQHandler+0xcc0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d02c      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a2e      	ldr	r2, [pc, #184]	; (800538c <HAL_DMA_IRQHandler+0xcc4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d027      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a2c      	ldr	r2, [pc, #176]	; (8005390 <HAL_DMA_IRQHandler+0xcc8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d022      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2b      	ldr	r2, [pc, #172]	; (8005394 <HAL_DMA_IRQHandler+0xccc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d01d      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a29      	ldr	r2, [pc, #164]	; (8005398 <HAL_DMA_IRQHandler+0xcd0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d018      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a28      	ldr	r2, [pc, #160]	; (800539c <HAL_DMA_IRQHandler+0xcd4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d013      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <HAL_DMA_IRQHandler+0xcd8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00e      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a25      	ldr	r2, [pc, #148]	; (80053a4 <HAL_DMA_IRQHandler+0xcdc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d009      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a23      	ldr	r2, [pc, #140]	; (80053a8 <HAL_DMA_IRQHandler+0xce0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_DMA_IRQHandler+0xc60>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a22      	ldr	r2, [pc, #136]	; (80053ac <HAL_DMA_IRQHandler+0xce4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <HAL_DMA_IRQHandler+0xc72>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0214 	bic.w	r2, r2, #20
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e007      	b.n	800534a <HAL_DMA_IRQHandler+0xc82>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 020a 	bic.w	r2, r2, #10
 8005348:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80b8 	beq.w	80054d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800536c:	e0b2      	b.n	80054d4 <HAL_DMA_IRQHandler+0xe0c>
 800536e:	bf00      	nop
 8005370:	40020010 	.word	0x40020010
 8005374:	40020028 	.word	0x40020028
 8005378:	40020040 	.word	0x40020040
 800537c:	40020058 	.word	0x40020058
 8005380:	40020070 	.word	0x40020070
 8005384:	40020088 	.word	0x40020088
 8005388:	400200a0 	.word	0x400200a0
 800538c:	400200b8 	.word	0x400200b8
 8005390:	40020410 	.word	0x40020410
 8005394:	40020428 	.word	0x40020428
 8005398:	40020440 	.word	0x40020440
 800539c:	40020458 	.word	0x40020458
 80053a0:	40020470 	.word	0x40020470
 80053a4:	40020488 	.word	0x40020488
 80053a8:	400204a0 	.word	0x400204a0
 80053ac:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	2208      	movs	r2, #8
 80053ba:	409a      	lsls	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8088 	beq.w	80054d6 <HAL_DMA_IRQHandler+0xe0e>
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8082 	beq.w	80054d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a41      	ldr	r2, [pc, #260]	; (80054dc <HAL_DMA_IRQHandler+0xe14>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d04a      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a3f      	ldr	r2, [pc, #252]	; (80054e0 <HAL_DMA_IRQHandler+0xe18>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d045      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a3e      	ldr	r2, [pc, #248]	; (80054e4 <HAL_DMA_IRQHandler+0xe1c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d040      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a3c      	ldr	r2, [pc, #240]	; (80054e8 <HAL_DMA_IRQHandler+0xe20>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d03b      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a3b      	ldr	r2, [pc, #236]	; (80054ec <HAL_DMA_IRQHandler+0xe24>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d036      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a39      	ldr	r2, [pc, #228]	; (80054f0 <HAL_DMA_IRQHandler+0xe28>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d031      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a38      	ldr	r2, [pc, #224]	; (80054f4 <HAL_DMA_IRQHandler+0xe2c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d02c      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a36      	ldr	r2, [pc, #216]	; (80054f8 <HAL_DMA_IRQHandler+0xe30>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d027      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a35      	ldr	r2, [pc, #212]	; (80054fc <HAL_DMA_IRQHandler+0xe34>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d022      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a33      	ldr	r2, [pc, #204]	; (8005500 <HAL_DMA_IRQHandler+0xe38>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01d      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a32      	ldr	r2, [pc, #200]	; (8005504 <HAL_DMA_IRQHandler+0xe3c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d018      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a30      	ldr	r2, [pc, #192]	; (8005508 <HAL_DMA_IRQHandler+0xe40>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2f      	ldr	r2, [pc, #188]	; (800550c <HAL_DMA_IRQHandler+0xe44>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a2d      	ldr	r2, [pc, #180]	; (8005510 <HAL_DMA_IRQHandler+0xe48>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a2c      	ldr	r2, [pc, #176]	; (8005514 <HAL_DMA_IRQHandler+0xe4c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_DMA_IRQHandler+0xdaa>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a2a      	ldr	r2, [pc, #168]	; (8005518 <HAL_DMA_IRQHandler+0xe50>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d108      	bne.n	8005484 <HAL_DMA_IRQHandler+0xdbc>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 021c 	bic.w	r2, r2, #28
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e007      	b.n	8005494 <HAL_DMA_IRQHandler+0xdcc>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 020e 	bic.w	r2, r2, #14
 8005492:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	2201      	movs	r2, #1
 800549e:	409a      	lsls	r2, r3
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
 80054ca:	e004      	b.n	80054d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80054cc:	bf00      	nop
 80054ce:	e002      	b.n	80054d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054d6:	3728      	adds	r7, #40	; 0x28
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40020010 	.word	0x40020010
 80054e0:	40020028 	.word	0x40020028
 80054e4:	40020040 	.word	0x40020040
 80054e8:	40020058 	.word	0x40020058
 80054ec:	40020070 	.word	0x40020070
 80054f0:	40020088 	.word	0x40020088
 80054f4:	400200a0 	.word	0x400200a0
 80054f8:	400200b8 	.word	0x400200b8
 80054fc:	40020410 	.word	0x40020410
 8005500:	40020428 	.word	0x40020428
 8005504:	40020440 	.word	0x40020440
 8005508:	40020458 	.word	0x40020458
 800550c:	40020470 	.word	0x40020470
 8005510:	40020488 	.word	0x40020488
 8005514:	400204a0 	.word	0x400204a0
 8005518:	400204b8 	.word	0x400204b8

0800551c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800552a:	b2db      	uxtb	r3, r3
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a84      	ldr	r2, [pc, #528]	; (8005780 <DMA_SetConfig+0x230>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d072      	beq.n	800565a <DMA_SetConfig+0x10a>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a82      	ldr	r2, [pc, #520]	; (8005784 <DMA_SetConfig+0x234>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d06d      	beq.n	800565a <DMA_SetConfig+0x10a>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a81      	ldr	r2, [pc, #516]	; (8005788 <DMA_SetConfig+0x238>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d068      	beq.n	800565a <DMA_SetConfig+0x10a>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a7f      	ldr	r2, [pc, #508]	; (800578c <DMA_SetConfig+0x23c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d063      	beq.n	800565a <DMA_SetConfig+0x10a>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a7e      	ldr	r2, [pc, #504]	; (8005790 <DMA_SetConfig+0x240>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d05e      	beq.n	800565a <DMA_SetConfig+0x10a>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a7c      	ldr	r2, [pc, #496]	; (8005794 <DMA_SetConfig+0x244>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d059      	beq.n	800565a <DMA_SetConfig+0x10a>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a7b      	ldr	r2, [pc, #492]	; (8005798 <DMA_SetConfig+0x248>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d054      	beq.n	800565a <DMA_SetConfig+0x10a>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a79      	ldr	r2, [pc, #484]	; (800579c <DMA_SetConfig+0x24c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d04f      	beq.n	800565a <DMA_SetConfig+0x10a>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a78      	ldr	r2, [pc, #480]	; (80057a0 <DMA_SetConfig+0x250>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d04a      	beq.n	800565a <DMA_SetConfig+0x10a>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a76      	ldr	r2, [pc, #472]	; (80057a4 <DMA_SetConfig+0x254>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d045      	beq.n	800565a <DMA_SetConfig+0x10a>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a75      	ldr	r2, [pc, #468]	; (80057a8 <DMA_SetConfig+0x258>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d040      	beq.n	800565a <DMA_SetConfig+0x10a>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a73      	ldr	r2, [pc, #460]	; (80057ac <DMA_SetConfig+0x25c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d03b      	beq.n	800565a <DMA_SetConfig+0x10a>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a72      	ldr	r2, [pc, #456]	; (80057b0 <DMA_SetConfig+0x260>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d036      	beq.n	800565a <DMA_SetConfig+0x10a>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a70      	ldr	r2, [pc, #448]	; (80057b4 <DMA_SetConfig+0x264>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d031      	beq.n	800565a <DMA_SetConfig+0x10a>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a6f      	ldr	r2, [pc, #444]	; (80057b8 <DMA_SetConfig+0x268>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d02c      	beq.n	800565a <DMA_SetConfig+0x10a>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a6d      	ldr	r2, [pc, #436]	; (80057bc <DMA_SetConfig+0x26c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d027      	beq.n	800565a <DMA_SetConfig+0x10a>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a6c      	ldr	r2, [pc, #432]	; (80057c0 <DMA_SetConfig+0x270>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d022      	beq.n	800565a <DMA_SetConfig+0x10a>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a6a      	ldr	r2, [pc, #424]	; (80057c4 <DMA_SetConfig+0x274>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01d      	beq.n	800565a <DMA_SetConfig+0x10a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a69      	ldr	r2, [pc, #420]	; (80057c8 <DMA_SetConfig+0x278>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d018      	beq.n	800565a <DMA_SetConfig+0x10a>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a67      	ldr	r2, [pc, #412]	; (80057cc <DMA_SetConfig+0x27c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <DMA_SetConfig+0x10a>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a66      	ldr	r2, [pc, #408]	; (80057d0 <DMA_SetConfig+0x280>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00e      	beq.n	800565a <DMA_SetConfig+0x10a>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a64      	ldr	r2, [pc, #400]	; (80057d4 <DMA_SetConfig+0x284>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <DMA_SetConfig+0x10a>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a63      	ldr	r2, [pc, #396]	; (80057d8 <DMA_SetConfig+0x288>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <DMA_SetConfig+0x10a>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a61      	ldr	r2, [pc, #388]	; (80057dc <DMA_SetConfig+0x28c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d101      	bne.n	800565e <DMA_SetConfig+0x10e>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <DMA_SetConfig+0x110>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00d      	beq.n	8005680 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800566c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d004      	beq.n	8005680 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800567e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a3e      	ldr	r2, [pc, #248]	; (8005780 <DMA_SetConfig+0x230>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d04a      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a3d      	ldr	r2, [pc, #244]	; (8005784 <DMA_SetConfig+0x234>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d045      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a3b      	ldr	r2, [pc, #236]	; (8005788 <DMA_SetConfig+0x238>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d040      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a3a      	ldr	r2, [pc, #232]	; (800578c <DMA_SetConfig+0x23c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d03b      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a38      	ldr	r2, [pc, #224]	; (8005790 <DMA_SetConfig+0x240>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d036      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a37      	ldr	r2, [pc, #220]	; (8005794 <DMA_SetConfig+0x244>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d031      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a35      	ldr	r2, [pc, #212]	; (8005798 <DMA_SetConfig+0x248>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d02c      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a34      	ldr	r2, [pc, #208]	; (800579c <DMA_SetConfig+0x24c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d027      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a32      	ldr	r2, [pc, #200]	; (80057a0 <DMA_SetConfig+0x250>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d022      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a31      	ldr	r2, [pc, #196]	; (80057a4 <DMA_SetConfig+0x254>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d01d      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a2f      	ldr	r2, [pc, #188]	; (80057a8 <DMA_SetConfig+0x258>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d018      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a2e      	ldr	r2, [pc, #184]	; (80057ac <DMA_SetConfig+0x25c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d013      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a2c      	ldr	r2, [pc, #176]	; (80057b0 <DMA_SetConfig+0x260>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00e      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a2b      	ldr	r2, [pc, #172]	; (80057b4 <DMA_SetConfig+0x264>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d009      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a29      	ldr	r2, [pc, #164]	; (80057b8 <DMA_SetConfig+0x268>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <DMA_SetConfig+0x1d0>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a28      	ldr	r2, [pc, #160]	; (80057bc <DMA_SetConfig+0x26c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d101      	bne.n	8005724 <DMA_SetConfig+0x1d4>
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <DMA_SetConfig+0x1d6>
 8005724:	2300      	movs	r3, #0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d05a      	beq.n	80057e0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	223f      	movs	r2, #63	; 0x3f
 8005734:	409a      	lsls	r2, r3
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005748:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d108      	bne.n	800576c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800576a:	e087      	b.n	800587c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	60da      	str	r2, [r3, #12]
}
 800577c:	e07e      	b.n	800587c <DMA_SetConfig+0x32c>
 800577e:	bf00      	nop
 8005780:	40020010 	.word	0x40020010
 8005784:	40020028 	.word	0x40020028
 8005788:	40020040 	.word	0x40020040
 800578c:	40020058 	.word	0x40020058
 8005790:	40020070 	.word	0x40020070
 8005794:	40020088 	.word	0x40020088
 8005798:	400200a0 	.word	0x400200a0
 800579c:	400200b8 	.word	0x400200b8
 80057a0:	40020410 	.word	0x40020410
 80057a4:	40020428 	.word	0x40020428
 80057a8:	40020440 	.word	0x40020440
 80057ac:	40020458 	.word	0x40020458
 80057b0:	40020470 	.word	0x40020470
 80057b4:	40020488 	.word	0x40020488
 80057b8:	400204a0 	.word	0x400204a0
 80057bc:	400204b8 	.word	0x400204b8
 80057c0:	58025408 	.word	0x58025408
 80057c4:	5802541c 	.word	0x5802541c
 80057c8:	58025430 	.word	0x58025430
 80057cc:	58025444 	.word	0x58025444
 80057d0:	58025458 	.word	0x58025458
 80057d4:	5802546c 	.word	0x5802546c
 80057d8:	58025480 	.word	0x58025480
 80057dc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a28      	ldr	r2, [pc, #160]	; (8005888 <DMA_SetConfig+0x338>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d022      	beq.n	8005830 <DMA_SetConfig+0x2e0>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a27      	ldr	r2, [pc, #156]	; (800588c <DMA_SetConfig+0x33c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d01d      	beq.n	8005830 <DMA_SetConfig+0x2e0>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a25      	ldr	r2, [pc, #148]	; (8005890 <DMA_SetConfig+0x340>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d018      	beq.n	8005830 <DMA_SetConfig+0x2e0>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a24      	ldr	r2, [pc, #144]	; (8005894 <DMA_SetConfig+0x344>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d013      	beq.n	8005830 <DMA_SetConfig+0x2e0>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <DMA_SetConfig+0x348>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00e      	beq.n	8005830 <DMA_SetConfig+0x2e0>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a21      	ldr	r2, [pc, #132]	; (800589c <DMA_SetConfig+0x34c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d009      	beq.n	8005830 <DMA_SetConfig+0x2e0>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <DMA_SetConfig+0x350>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <DMA_SetConfig+0x2e0>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1e      	ldr	r2, [pc, #120]	; (80058a4 <DMA_SetConfig+0x354>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d101      	bne.n	8005834 <DMA_SetConfig+0x2e4>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <DMA_SetConfig+0x2e6>
 8005834:	2300      	movs	r3, #0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d020      	beq.n	800587c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2201      	movs	r2, #1
 8005844:	409a      	lsls	r2, r3
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d108      	bne.n	800586c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	60da      	str	r2, [r3, #12]
}
 800586a:	e007      	b.n	800587c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	60da      	str	r2, [r3, #12]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	58025408 	.word	0x58025408
 800588c:	5802541c 	.word	0x5802541c
 8005890:	58025430 	.word	0x58025430
 8005894:	58025444 	.word	0x58025444
 8005898:	58025458 	.word	0x58025458
 800589c:	5802546c 	.word	0x5802546c
 80058a0:	58025480 	.word	0x58025480
 80058a4:	58025494 	.word	0x58025494

080058a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a42      	ldr	r2, [pc, #264]	; (80059c0 <DMA_CalcBaseAndBitshift+0x118>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d04a      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a41      	ldr	r2, [pc, #260]	; (80059c4 <DMA_CalcBaseAndBitshift+0x11c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d045      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a3f      	ldr	r2, [pc, #252]	; (80059c8 <DMA_CalcBaseAndBitshift+0x120>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d040      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a3e      	ldr	r2, [pc, #248]	; (80059cc <DMA_CalcBaseAndBitshift+0x124>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d03b      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3c      	ldr	r2, [pc, #240]	; (80059d0 <DMA_CalcBaseAndBitshift+0x128>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d036      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a3b      	ldr	r2, [pc, #236]	; (80059d4 <DMA_CalcBaseAndBitshift+0x12c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d031      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a39      	ldr	r2, [pc, #228]	; (80059d8 <DMA_CalcBaseAndBitshift+0x130>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d02c      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a38      	ldr	r2, [pc, #224]	; (80059dc <DMA_CalcBaseAndBitshift+0x134>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d027      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a36      	ldr	r2, [pc, #216]	; (80059e0 <DMA_CalcBaseAndBitshift+0x138>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d022      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a35      	ldr	r2, [pc, #212]	; (80059e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d01d      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a33      	ldr	r2, [pc, #204]	; (80059e8 <DMA_CalcBaseAndBitshift+0x140>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d018      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a32      	ldr	r2, [pc, #200]	; (80059ec <DMA_CalcBaseAndBitshift+0x144>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d013      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a30      	ldr	r2, [pc, #192]	; (80059f0 <DMA_CalcBaseAndBitshift+0x148>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00e      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a2f      	ldr	r2, [pc, #188]	; (80059f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d009      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a2d      	ldr	r2, [pc, #180]	; (80059f8 <DMA_CalcBaseAndBitshift+0x150>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <DMA_CalcBaseAndBitshift+0xa8>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a2c      	ldr	r2, [pc, #176]	; (80059fc <DMA_CalcBaseAndBitshift+0x154>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d101      	bne.n	8005954 <DMA_CalcBaseAndBitshift+0xac>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <DMA_CalcBaseAndBitshift+0xae>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d024      	beq.n	80059a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	3b10      	subs	r3, #16
 8005962:	4a27      	ldr	r2, [pc, #156]	; (8005a00 <DMA_CalcBaseAndBitshift+0x158>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	091b      	lsrs	r3, r3, #4
 800596a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	4a24      	ldr	r2, [pc, #144]	; (8005a04 <DMA_CalcBaseAndBitshift+0x15c>)
 8005974:	5cd3      	ldrb	r3, [r2, r3]
 8005976:	461a      	mov	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b03      	cmp	r3, #3
 8005980:	d908      	bls.n	8005994 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	4b1f      	ldr	r3, [pc, #124]	; (8005a08 <DMA_CalcBaseAndBitshift+0x160>)
 800598a:	4013      	ands	r3, r2
 800598c:	1d1a      	adds	r2, r3, #4
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	659a      	str	r2, [r3, #88]	; 0x58
 8005992:	e00d      	b.n	80059b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <DMA_CalcBaseAndBitshift+0x160>)
 800599c:	4013      	ands	r3, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6593      	str	r3, [r2, #88]	; 0x58
 80059a2:	e005      	b.n	80059b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40020010 	.word	0x40020010
 80059c4:	40020028 	.word	0x40020028
 80059c8:	40020040 	.word	0x40020040
 80059cc:	40020058 	.word	0x40020058
 80059d0:	40020070 	.word	0x40020070
 80059d4:	40020088 	.word	0x40020088
 80059d8:	400200a0 	.word	0x400200a0
 80059dc:	400200b8 	.word	0x400200b8
 80059e0:	40020410 	.word	0x40020410
 80059e4:	40020428 	.word	0x40020428
 80059e8:	40020440 	.word	0x40020440
 80059ec:	40020458 	.word	0x40020458
 80059f0:	40020470 	.word	0x40020470
 80059f4:	40020488 	.word	0x40020488
 80059f8:	400204a0 	.word	0x400204a0
 80059fc:	400204b8 	.word	0x400204b8
 8005a00:	aaaaaaab 	.word	0xaaaaaaab
 8005a04:	0800edd0 	.word	0x0800edd0
 8005a08:	fffffc00 	.word	0xfffffc00

08005a0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d120      	bne.n	8005a62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d858      	bhi.n	8005ada <DMA_CheckFifoParam+0xce>
 8005a28:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <DMA_CheckFifoParam+0x24>)
 8005a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2e:	bf00      	nop
 8005a30:	08005a41 	.word	0x08005a41
 8005a34:	08005a53 	.word	0x08005a53
 8005a38:	08005a41 	.word	0x08005a41
 8005a3c:	08005adb 	.word	0x08005adb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d048      	beq.n	8005ade <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a50:	e045      	b.n	8005ade <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a5a:	d142      	bne.n	8005ae2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a60:	e03f      	b.n	8005ae2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6a:	d123      	bne.n	8005ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d838      	bhi.n	8005ae6 <DMA_CheckFifoParam+0xda>
 8005a74:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <DMA_CheckFifoParam+0x70>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005a8d 	.word	0x08005a8d
 8005a80:	08005a93 	.word	0x08005a93
 8005a84:	08005a8d 	.word	0x08005a8d
 8005a88:	08005aa5 	.word	0x08005aa5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
        break;
 8005a90:	e030      	b.n	8005af4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d025      	beq.n	8005aea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aa2:	e022      	b.n	8005aea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005aac:	d11f      	bne.n	8005aee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ab2:	e01c      	b.n	8005aee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d902      	bls.n	8005ac2 <DMA_CheckFifoParam+0xb6>
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d003      	beq.n	8005ac8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ac0:	e018      	b.n	8005af4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ac6:	e015      	b.n	8005af4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00e      	beq.n	8005af2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ad8:	e00b      	b.n	8005af2 <DMA_CheckFifoParam+0xe6>
        break;
 8005ada:	bf00      	nop
 8005adc:	e00a      	b.n	8005af4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ade:	bf00      	nop
 8005ae0:	e008      	b.n	8005af4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ae2:	bf00      	nop
 8005ae4:	e006      	b.n	8005af4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ae6:	bf00      	nop
 8005ae8:	e004      	b.n	8005af4 <DMA_CheckFifoParam+0xe8>
        break;
 8005aea:	bf00      	nop
 8005aec:	e002      	b.n	8005af4 <DMA_CheckFifoParam+0xe8>
        break;
 8005aee:	bf00      	nop
 8005af0:	e000      	b.n	8005af4 <DMA_CheckFifoParam+0xe8>
    break;
 8005af2:	bf00      	nop
    }
  }

  return status;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop

08005b04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a38      	ldr	r2, [pc, #224]	; (8005bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d022      	beq.n	8005b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a36      	ldr	r2, [pc, #216]	; (8005bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01d      	beq.n	8005b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a35      	ldr	r2, [pc, #212]	; (8005c00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d018      	beq.n	8005b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a33      	ldr	r2, [pc, #204]	; (8005c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d013      	beq.n	8005b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a32      	ldr	r2, [pc, #200]	; (8005c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a30      	ldr	r2, [pc, #192]	; (8005c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a2f      	ldr	r2, [pc, #188]	; (8005c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2d      	ldr	r2, [pc, #180]	; (8005c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d101      	bne.n	8005b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01a      	beq.n	8005ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	3b08      	subs	r3, #8
 8005b74:	4a28      	ldr	r2, [pc, #160]	; (8005c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	091b      	lsrs	r3, r3, #4
 8005b7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	461a      	mov	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a24      	ldr	r2, [pc, #144]	; (8005c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005b90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	2201      	movs	r2, #1
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ba0:	e024      	b.n	8005bec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	3b10      	subs	r3, #16
 8005baa:	4a1e      	ldr	r2, [pc, #120]	; (8005c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4a1c      	ldr	r2, [pc, #112]	; (8005c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d806      	bhi.n	8005bca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d902      	bls.n	8005bca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4b18      	ldr	r3, [pc, #96]	; (8005c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a16      	ldr	r2, [pc, #88]	; (8005c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005bdc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	2201      	movs	r2, #1
 8005be6:	409a      	lsls	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	58025408 	.word	0x58025408
 8005bfc:	5802541c 	.word	0x5802541c
 8005c00:	58025430 	.word	0x58025430
 8005c04:	58025444 	.word	0x58025444
 8005c08:	58025458 	.word	0x58025458
 8005c0c:	5802546c 	.word	0x5802546c
 8005c10:	58025480 	.word	0x58025480
 8005c14:	58025494 	.word	0x58025494
 8005c18:	cccccccd 	.word	0xcccccccd
 8005c1c:	16009600 	.word	0x16009600
 8005c20:	58025880 	.word	0x58025880
 8005c24:	aaaaaaab 	.word	0xaaaaaaab
 8005c28:	400204b8 	.word	0x400204b8
 8005c2c:	4002040f 	.word	0x4002040f
 8005c30:	10008200 	.word	0x10008200
 8005c34:	40020880 	.word	0x40020880

08005c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d04a      	beq.n	8005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d847      	bhi.n	8005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a25      	ldr	r2, [pc, #148]	; (8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d022      	beq.n	8005ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d01d      	beq.n	8005ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a22      	ldr	r2, [pc, #136]	; (8005cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1e      	ldr	r2, [pc, #120]	; (8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1b      	ldr	r2, [pc, #108]	; (8005d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a15      	ldr	r2, [pc, #84]	; (8005d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005cc0:	671a      	str	r2, [r3, #112]	; 0x70
 8005cc2:	e009      	b.n	8005cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	461a      	mov	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005cd6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	2201      	movs	r2, #1
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	58025408 	.word	0x58025408
 8005cf4:	5802541c 	.word	0x5802541c
 8005cf8:	58025430 	.word	0x58025430
 8005cfc:	58025444 	.word	0x58025444
 8005d00:	58025458 	.word	0x58025458
 8005d04:	5802546c 	.word	0x5802546c
 8005d08:	58025480 	.word	0x58025480
 8005d0c:	58025494 	.word	0x58025494
 8005d10:	1600963f 	.word	0x1600963f
 8005d14:	58025940 	.word	0x58025940
 8005d18:	1000823f 	.word	0x1000823f
 8005d1c:	40020940 	.word	0x40020940

08005d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b089      	sub	sp, #36	; 0x24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d2e:	4b89      	ldr	r3, [pc, #548]	; (8005f54 <HAL_GPIO_Init+0x234>)
 8005d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d32:	e194      	b.n	800605e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	2101      	movs	r1, #1
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d40:	4013      	ands	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 8186 	beq.w	8006058 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d005      	beq.n	8005d64 <HAL_GPIO_Init+0x44>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d130      	bne.n	8005dc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	2203      	movs	r2, #3
 8005d70:	fa02 f303 	lsl.w	r3, r2, r3
 8005d74:	43db      	mvns	r3, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43db      	mvns	r3, r3
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4013      	ands	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	091b      	lsrs	r3, r3, #4
 8005db0:	f003 0201 	and.w	r2, r3, #1
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d017      	beq.n	8005e02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	2203      	movs	r2, #3
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d123      	bne.n	8005e56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	08da      	lsrs	r2, r3, #3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3208      	adds	r2, #8
 8005e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	220f      	movs	r2, #15
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	43db      	mvns	r3, r3
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	08da      	lsrs	r2, r3, #3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3208      	adds	r2, #8
 8005e50:	69b9      	ldr	r1, [r7, #24]
 8005e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	2203      	movs	r2, #3
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f003 0203 	and.w	r2, r3, #3
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80e0 	beq.w	8006058 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e98:	4b2f      	ldr	r3, [pc, #188]	; (8005f58 <HAL_GPIO_Init+0x238>)
 8005e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e9e:	4a2e      	ldr	r2, [pc, #184]	; (8005f58 <HAL_GPIO_Init+0x238>)
 8005ea0:	f043 0302 	orr.w	r3, r3, #2
 8005ea4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ea8:	4b2b      	ldr	r3, [pc, #172]	; (8005f58 <HAL_GPIO_Init+0x238>)
 8005eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eb6:	4a29      	ldr	r2, [pc, #164]	; (8005f5c <HAL_GPIO_Init+0x23c>)
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	089b      	lsrs	r3, r3, #2
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	220f      	movs	r2, #15
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a20      	ldr	r2, [pc, #128]	; (8005f60 <HAL_GPIO_Init+0x240>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d052      	beq.n	8005f88 <HAL_GPIO_Init+0x268>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <HAL_GPIO_Init+0x244>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d031      	beq.n	8005f4e <HAL_GPIO_Init+0x22e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <HAL_GPIO_Init+0x248>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d02b      	beq.n	8005f4a <HAL_GPIO_Init+0x22a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a1d      	ldr	r2, [pc, #116]	; (8005f6c <HAL_GPIO_Init+0x24c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d025      	beq.n	8005f46 <HAL_GPIO_Init+0x226>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <HAL_GPIO_Init+0x250>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d01f      	beq.n	8005f42 <HAL_GPIO_Init+0x222>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <HAL_GPIO_Init+0x254>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d019      	beq.n	8005f3e <HAL_GPIO_Init+0x21e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a1a      	ldr	r2, [pc, #104]	; (8005f78 <HAL_GPIO_Init+0x258>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d013      	beq.n	8005f3a <HAL_GPIO_Init+0x21a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a19      	ldr	r2, [pc, #100]	; (8005f7c <HAL_GPIO_Init+0x25c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00d      	beq.n	8005f36 <HAL_GPIO_Init+0x216>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a18      	ldr	r2, [pc, #96]	; (8005f80 <HAL_GPIO_Init+0x260>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <HAL_GPIO_Init+0x212>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a17      	ldr	r2, [pc, #92]	; (8005f84 <HAL_GPIO_Init+0x264>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d101      	bne.n	8005f2e <HAL_GPIO_Init+0x20e>
 8005f2a:	2309      	movs	r3, #9
 8005f2c:	e02d      	b.n	8005f8a <HAL_GPIO_Init+0x26a>
 8005f2e:	230a      	movs	r3, #10
 8005f30:	e02b      	b.n	8005f8a <HAL_GPIO_Init+0x26a>
 8005f32:	2308      	movs	r3, #8
 8005f34:	e029      	b.n	8005f8a <HAL_GPIO_Init+0x26a>
 8005f36:	2307      	movs	r3, #7
 8005f38:	e027      	b.n	8005f8a <HAL_GPIO_Init+0x26a>
 8005f3a:	2306      	movs	r3, #6
 8005f3c:	e025      	b.n	8005f8a <HAL_GPIO_Init+0x26a>
 8005f3e:	2305      	movs	r3, #5
 8005f40:	e023      	b.n	8005f8a <HAL_GPIO_Init+0x26a>
 8005f42:	2304      	movs	r3, #4
 8005f44:	e021      	b.n	8005f8a <HAL_GPIO_Init+0x26a>
 8005f46:	2303      	movs	r3, #3
 8005f48:	e01f      	b.n	8005f8a <HAL_GPIO_Init+0x26a>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e01d      	b.n	8005f8a <HAL_GPIO_Init+0x26a>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e01b      	b.n	8005f8a <HAL_GPIO_Init+0x26a>
 8005f52:	bf00      	nop
 8005f54:	58000080 	.word	0x58000080
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	58000400 	.word	0x58000400
 8005f60:	58020000 	.word	0x58020000
 8005f64:	58020400 	.word	0x58020400
 8005f68:	58020800 	.word	0x58020800
 8005f6c:	58020c00 	.word	0x58020c00
 8005f70:	58021000 	.word	0x58021000
 8005f74:	58021400 	.word	0x58021400
 8005f78:	58021800 	.word	0x58021800
 8005f7c:	58021c00 	.word	0x58021c00
 8005f80:	58022000 	.word	0x58022000
 8005f84:	58022400 	.word	0x58022400
 8005f88:	2300      	movs	r3, #0
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	f002 0203 	and.w	r2, r2, #3
 8005f90:	0092      	lsls	r2, r2, #2
 8005f92:	4093      	lsls	r3, r2
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f9a:	4938      	ldr	r1, [pc, #224]	; (800607c <HAL_GPIO_Init+0x35c>)
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	089b      	lsrs	r3, r3, #2
 8005fa0:	3302      	adds	r3, #2
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	43db      	mvns	r3, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4013      	ands	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	43db      	mvns	r3, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4013      	ands	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	3301      	adds	r3, #1
 800605c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	f47f ae63 	bne.w	8005d34 <HAL_GPIO_Init+0x14>
  }
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	3724      	adds	r7, #36	; 0x24
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	58000400 	.word	0x58000400

08006080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	887b      	ldrh	r3, [r7, #2]
 8006092:	4013      	ands	r3, r2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006098:	2301      	movs	r3, #1
 800609a:	73fb      	strb	r3, [r7, #15]
 800609c:	e001      	b.n	80060a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	807b      	strh	r3, [r7, #2]
 80060bc:	4613      	mov	r3, r2
 80060be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060c0:	787b      	ldrb	r3, [r7, #1]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060c6:	887a      	ldrh	r2, [r7, #2]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80060cc:	e003      	b.n	80060d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060ce:	887b      	ldrh	r3, [r7, #2]
 80060d0:	041a      	lsls	r2, r3, #16
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	619a      	str	r2, [r3, #24]
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	460b      	mov	r3, r1
 80060ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060f4:	887a      	ldrh	r2, [r7, #2]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4013      	ands	r3, r2
 80060fa:	041a      	lsls	r2, r3, #16
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	43d9      	mvns	r1, r3
 8006100:	887b      	ldrh	r3, [r7, #2]
 8006102:	400b      	ands	r3, r1
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	619a      	str	r2, [r3, #24]
}
 800610a:	bf00      	nop
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006120:	4b19      	ldr	r3, [pc, #100]	; (8006188 <HAL_PWREx_ConfigSupply+0x70>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b04      	cmp	r3, #4
 800612a:	d00a      	beq.n	8006142 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800612c:	4b16      	ldr	r3, [pc, #88]	; (8006188 <HAL_PWREx_ConfigSupply+0x70>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d001      	beq.n	800613e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e01f      	b.n	800617e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e01d      	b.n	800617e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006142:	4b11      	ldr	r3, [pc, #68]	; (8006188 <HAL_PWREx_ConfigSupply+0x70>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f023 0207 	bic.w	r2, r3, #7
 800614a:	490f      	ldr	r1, [pc, #60]	; (8006188 <HAL_PWREx_ConfigSupply+0x70>)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4313      	orrs	r3, r2
 8006150:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006152:	f7fc fe99 	bl	8002e88 <HAL_GetTick>
 8006156:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006158:	e009      	b.n	800616e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800615a:	f7fc fe95 	bl	8002e88 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006168:	d901      	bls.n	800616e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e007      	b.n	800617e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <HAL_PWREx_ConfigSupply+0x70>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800617a:	d1ee      	bne.n	800615a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	58024800 	.word	0x58024800

0800618c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08c      	sub	sp, #48	; 0x30
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	f000 bc1c 	b.w	80069d8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8087 	beq.w	80062bc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061ae:	4b9e      	ldr	r3, [pc, #632]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061b8:	4b9b      	ldr	r3, [pc, #620]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	2b10      	cmp	r3, #16
 80061c2:	d007      	beq.n	80061d4 <HAL_RCC_OscConfig+0x48>
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	2b18      	cmp	r3, #24
 80061c8:	d110      	bne.n	80061ec <HAL_RCC_OscConfig+0x60>
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d10b      	bne.n	80061ec <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d4:	4b94      	ldr	r3, [pc, #592]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d06c      	beq.n	80062ba <HAL_RCC_OscConfig+0x12e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d168      	bne.n	80062ba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e3f5      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f4:	d106      	bne.n	8006204 <HAL_RCC_OscConfig+0x78>
 80061f6:	4b8c      	ldr	r3, [pc, #560]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a8b      	ldr	r2, [pc, #556]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80061fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	e02e      	b.n	8006262 <HAL_RCC_OscConfig+0xd6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10c      	bne.n	8006226 <HAL_RCC_OscConfig+0x9a>
 800620c:	4b86      	ldr	r3, [pc, #536]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a85      	ldr	r2, [pc, #532]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	4b83      	ldr	r3, [pc, #524]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a82      	ldr	r2, [pc, #520]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800621e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	e01d      	b.n	8006262 <HAL_RCC_OscConfig+0xd6>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800622e:	d10c      	bne.n	800624a <HAL_RCC_OscConfig+0xbe>
 8006230:	4b7d      	ldr	r3, [pc, #500]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a7c      	ldr	r2, [pc, #496]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	4b7a      	ldr	r3, [pc, #488]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a79      	ldr	r2, [pc, #484]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	e00b      	b.n	8006262 <HAL_RCC_OscConfig+0xd6>
 800624a:	4b77      	ldr	r3, [pc, #476]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a76      	ldr	r2, [pc, #472]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	4b74      	ldr	r3, [pc, #464]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a73      	ldr	r2, [pc, #460]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800625c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006260:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d013      	beq.n	8006292 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626a:	f7fc fe0d 	bl	8002e88 <HAL_GetTick>
 800626e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006272:	f7fc fe09 	bl	8002e88 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b64      	cmp	r3, #100	; 0x64
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e3a9      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006284:	4b68      	ldr	r3, [pc, #416]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f0      	beq.n	8006272 <HAL_RCC_OscConfig+0xe6>
 8006290:	e014      	b.n	80062bc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006292:	f7fc fdf9 	bl	8002e88 <HAL_GetTick>
 8006296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800629a:	f7fc fdf5 	bl	8002e88 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b64      	cmp	r3, #100	; 0x64
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e395      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062ac:	4b5e      	ldr	r3, [pc, #376]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1f0      	bne.n	800629a <HAL_RCC_OscConfig+0x10e>
 80062b8:	e000      	b.n	80062bc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80ca 	beq.w	800645e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ca:	4b57      	ldr	r3, [pc, #348]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062d4:	4b54      	ldr	r3, [pc, #336]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <HAL_RCC_OscConfig+0x164>
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	2b18      	cmp	r3, #24
 80062e4:	d156      	bne.n	8006394 <HAL_RCC_OscConfig+0x208>
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f003 0303 	and.w	r3, r3, #3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d151      	bne.n	8006394 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f0:	4b4d      	ldr	r3, [pc, #308]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_RCC_OscConfig+0x17c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e367      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006308:	4b47      	ldr	r3, [pc, #284]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f023 0219 	bic.w	r2, r3, #25
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	4944      	ldr	r1, [pc, #272]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006316:	4313      	orrs	r3, r2
 8006318:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800631a:	f7fc fdb5 	bl	8002e88 <HAL_GetTick>
 800631e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006322:	f7fc fdb1 	bl	8002e88 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e351      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006334:	4b3c      	ldr	r3, [pc, #240]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0f0      	beq.n	8006322 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006340:	f7fc fdae 	bl	8002ea0 <HAL_GetREVID>
 8006344:	4603      	mov	r3, r0
 8006346:	f241 0203 	movw	r2, #4099	; 0x1003
 800634a:	4293      	cmp	r3, r2
 800634c:	d817      	bhi.n	800637e <HAL_RCC_OscConfig+0x1f2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b40      	cmp	r3, #64	; 0x40
 8006354:	d108      	bne.n	8006368 <HAL_RCC_OscConfig+0x1dc>
 8006356:	4b34      	ldr	r3, [pc, #208]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800635e:	4a32      	ldr	r2, [pc, #200]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006364:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006366:	e07a      	b.n	800645e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006368:	4b2f      	ldr	r3, [pc, #188]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	492c      	ldr	r1, [pc, #176]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006378:	4313      	orrs	r3, r2
 800637a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800637c:	e06f      	b.n	800645e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800637e:	4b2a      	ldr	r3, [pc, #168]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	061b      	lsls	r3, r3, #24
 800638c:	4926      	ldr	r1, [pc, #152]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800638e:	4313      	orrs	r3, r2
 8006390:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006392:	e064      	b.n	800645e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d047      	beq.n	800642c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800639c:	4b22      	ldr	r3, [pc, #136]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f023 0219 	bic.w	r2, r3, #25
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	491f      	ldr	r1, [pc, #124]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ae:	f7fc fd6b 	bl	8002e88 <HAL_GetTick>
 80063b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063b4:	e008      	b.n	80063c8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063b6:	f7fc fd67 	bl	8002e88 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d901      	bls.n	80063c8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e307      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0f0      	beq.n	80063b6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d4:	f7fc fd64 	bl	8002ea0 <HAL_GetREVID>
 80063d8:	4603      	mov	r3, r0
 80063da:	f241 0203 	movw	r2, #4099	; 0x1003
 80063de:	4293      	cmp	r3, r2
 80063e0:	d817      	bhi.n	8006412 <HAL_RCC_OscConfig+0x286>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d108      	bne.n	80063fc <HAL_RCC_OscConfig+0x270>
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80063f2:	4a0d      	ldr	r2, [pc, #52]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80063f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f8:	6053      	str	r3, [r2, #4]
 80063fa:	e030      	b.n	800645e <HAL_RCC_OscConfig+0x2d2>
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	031b      	lsls	r3, r3, #12
 800640a:	4907      	ldr	r1, [pc, #28]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 800640c:	4313      	orrs	r3, r2
 800640e:	604b      	str	r3, [r1, #4]
 8006410:	e025      	b.n	800645e <HAL_RCC_OscConfig+0x2d2>
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	061b      	lsls	r3, r3, #24
 8006420:	4901      	ldr	r1, [pc, #4]	; (8006428 <HAL_RCC_OscConfig+0x29c>)
 8006422:	4313      	orrs	r3, r2
 8006424:	604b      	str	r3, [r1, #4]
 8006426:	e01a      	b.n	800645e <HAL_RCC_OscConfig+0x2d2>
 8006428:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800642c:	4b9e      	ldr	r3, [pc, #632]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a9d      	ldr	r2, [pc, #628]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fc fd26 	bl	8002e88 <HAL_GetTick>
 800643c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006440:	f7fc fd22 	bl	8002e88 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e2c2      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006452:	4b95      	ldr	r3, [pc, #596]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f0      	bne.n	8006440 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80a9 	beq.w	80065be <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800646c:	4b8e      	ldr	r3, [pc, #568]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006474:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006476:	4b8c      	ldr	r3, [pc, #560]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	2b08      	cmp	r3, #8
 8006480:	d007      	beq.n	8006492 <HAL_RCC_OscConfig+0x306>
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b18      	cmp	r3, #24
 8006486:	d13a      	bne.n	80064fe <HAL_RCC_OscConfig+0x372>
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	2b01      	cmp	r3, #1
 8006490:	d135      	bne.n	80064fe <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006492:	4b85      	ldr	r3, [pc, #532]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_RCC_OscConfig+0x31e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	2b80      	cmp	r3, #128	; 0x80
 80064a4:	d001      	beq.n	80064aa <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e296      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064aa:	f7fc fcf9 	bl	8002ea0 <HAL_GetREVID>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d817      	bhi.n	80064e8 <HAL_RCC_OscConfig+0x35c>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d108      	bne.n	80064d2 <HAL_RCC_OscConfig+0x346>
 80064c0:	4b79      	ldr	r3, [pc, #484]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80064c8:	4a77      	ldr	r2, [pc, #476]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 80064ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064d0:	e075      	b.n	80065be <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064d2:	4b75      	ldr	r3, [pc, #468]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	069b      	lsls	r3, r3, #26
 80064e0:	4971      	ldr	r1, [pc, #452]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064e6:	e06a      	b.n	80065be <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064e8:	4b6f      	ldr	r3, [pc, #444]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	061b      	lsls	r3, r3, #24
 80064f6:	496c      	ldr	r1, [pc, #432]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064fc:	e05f      	b.n	80065be <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d042      	beq.n	800658c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006506:	4b68      	ldr	r3, [pc, #416]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a67      	ldr	r2, [pc, #412]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 800650c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006512:	f7fc fcb9 	bl	8002e88 <HAL_GetTick>
 8006516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800651a:	f7fc fcb5 	bl	8002e88 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e255      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800652c:	4b5e      	ldr	r3, [pc, #376]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0f0      	beq.n	800651a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006538:	f7fc fcb2 	bl	8002ea0 <HAL_GetREVID>
 800653c:	4603      	mov	r3, r0
 800653e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006542:	4293      	cmp	r3, r2
 8006544:	d817      	bhi.n	8006576 <HAL_RCC_OscConfig+0x3ea>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	2b20      	cmp	r3, #32
 800654c:	d108      	bne.n	8006560 <HAL_RCC_OscConfig+0x3d4>
 800654e:	4b56      	ldr	r3, [pc, #344]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006556:	4a54      	ldr	r2, [pc, #336]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800655c:	6053      	str	r3, [r2, #4]
 800655e:	e02e      	b.n	80065be <HAL_RCC_OscConfig+0x432>
 8006560:	4b51      	ldr	r3, [pc, #324]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	069b      	lsls	r3, r3, #26
 800656e:	494e      	ldr	r1, [pc, #312]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006570:	4313      	orrs	r3, r2
 8006572:	604b      	str	r3, [r1, #4]
 8006574:	e023      	b.n	80065be <HAL_RCC_OscConfig+0x432>
 8006576:	4b4c      	ldr	r3, [pc, #304]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	061b      	lsls	r3, r3, #24
 8006584:	4948      	ldr	r1, [pc, #288]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006586:	4313      	orrs	r3, r2
 8006588:	60cb      	str	r3, [r1, #12]
 800658a:	e018      	b.n	80065be <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800658c:	4b46      	ldr	r3, [pc, #280]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a45      	ldr	r2, [pc, #276]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fc fc76 	bl	8002e88 <HAL_GetTick>
 800659c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80065a0:	f7fc fc72 	bl	8002e88 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e212      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065b2:	4b3d      	ldr	r3, [pc, #244]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d036      	beq.n	8006638 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d019      	beq.n	8006606 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065d2:	4b35      	ldr	r3, [pc, #212]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 80065d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d6:	4a34      	ldr	r2, [pc, #208]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 80065d8:	f043 0301 	orr.w	r3, r3, #1
 80065dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065de:	f7fc fc53 	bl	8002e88 <HAL_GetTick>
 80065e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e6:	f7fc fc4f 	bl	8002e88 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e1ef      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065f8:	4b2b      	ldr	r3, [pc, #172]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 80065fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f0      	beq.n	80065e6 <HAL_RCC_OscConfig+0x45a>
 8006604:	e018      	b.n	8006638 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006606:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660a:	4a27      	ldr	r2, [pc, #156]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006612:	f7fc fc39 	bl	8002e88 <HAL_GetTick>
 8006616:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006618:	e008      	b.n	800662c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800661a:	f7fc fc35 	bl	8002e88 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e1d5      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800662c:	4b1e      	ldr	r3, [pc, #120]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 800662e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1f0      	bne.n	800661a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d039      	beq.n	80066b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d019      	beq.n	8006680 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800664c:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006652:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006656:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006658:	f7fc fc16 	bl	8002e88 <HAL_GetTick>
 800665c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006660:	f7fc fc12 	bl	8002e88 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e1b2      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006672:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0f0      	beq.n	8006660 <HAL_RCC_OscConfig+0x4d4>
 800667e:	e01b      	b.n	80066b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006680:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <HAL_RCC_OscConfig+0x51c>)
 8006686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800668a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800668c:	f7fc fbfc 	bl	8002e88 <HAL_GetTick>
 8006690:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006694:	f7fc fbf8 	bl	8002e88 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d904      	bls.n	80066ac <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e198      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
 80066a6:	bf00      	nop
 80066a8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066ac:	4ba3      	ldr	r3, [pc, #652]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ed      	bne.n	8006694 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8081 	beq.w	80067c8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066c6:	4b9e      	ldr	r3, [pc, #632]	; (8006940 <HAL_RCC_OscConfig+0x7b4>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a9d      	ldr	r2, [pc, #628]	; (8006940 <HAL_RCC_OscConfig+0x7b4>)
 80066cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066d2:	f7fc fbd9 	bl	8002e88 <HAL_GetTick>
 80066d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80066da:	f7fc fbd5 	bl	8002e88 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b64      	cmp	r3, #100	; 0x64
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e175      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066ec:	4b94      	ldr	r3, [pc, #592]	; (8006940 <HAL_RCC_OscConfig+0x7b4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f0      	beq.n	80066da <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d106      	bne.n	800670e <HAL_RCC_OscConfig+0x582>
 8006700:	4b8e      	ldr	r3, [pc, #568]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006704:	4a8d      	ldr	r2, [pc, #564]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	6713      	str	r3, [r2, #112]	; 0x70
 800670c:	e02d      	b.n	800676a <HAL_RCC_OscConfig+0x5de>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10c      	bne.n	8006730 <HAL_RCC_OscConfig+0x5a4>
 8006716:	4b89      	ldr	r3, [pc, #548]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	4a88      	ldr	r2, [pc, #544]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	6713      	str	r3, [r2, #112]	; 0x70
 8006722:	4b86      	ldr	r3, [pc, #536]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	4a85      	ldr	r2, [pc, #532]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006728:	f023 0304 	bic.w	r3, r3, #4
 800672c:	6713      	str	r3, [r2, #112]	; 0x70
 800672e:	e01c      	b.n	800676a <HAL_RCC_OscConfig+0x5de>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b05      	cmp	r3, #5
 8006736:	d10c      	bne.n	8006752 <HAL_RCC_OscConfig+0x5c6>
 8006738:	4b80      	ldr	r3, [pc, #512]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	4a7f      	ldr	r2, [pc, #508]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 800673e:	f043 0304 	orr.w	r3, r3, #4
 8006742:	6713      	str	r3, [r2, #112]	; 0x70
 8006744:	4b7d      	ldr	r3, [pc, #500]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	4a7c      	ldr	r2, [pc, #496]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	6713      	str	r3, [r2, #112]	; 0x70
 8006750:	e00b      	b.n	800676a <HAL_RCC_OscConfig+0x5de>
 8006752:	4b7a      	ldr	r3, [pc, #488]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	4a79      	ldr	r2, [pc, #484]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	6713      	str	r3, [r2, #112]	; 0x70
 800675e:	4b77      	ldr	r3, [pc, #476]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	4a76      	ldr	r2, [pc, #472]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006764:	f023 0304 	bic.w	r3, r3, #4
 8006768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d015      	beq.n	800679e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006772:	f7fc fb89 	bl	8002e88 <HAL_GetTick>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006778:	e00a      	b.n	8006790 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800677a:	f7fc fb85 	bl	8002e88 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	f241 3288 	movw	r2, #5000	; 0x1388
 8006788:	4293      	cmp	r3, r2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e123      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006790:	4b6a      	ldr	r3, [pc, #424]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0ee      	beq.n	800677a <HAL_RCC_OscConfig+0x5ee>
 800679c:	e014      	b.n	80067c8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679e:	f7fc fb73 	bl	8002e88 <HAL_GetTick>
 80067a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067a4:	e00a      	b.n	80067bc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067a6:	f7fc fb6f 	bl	8002e88 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e10d      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067bc:	4b5f      	ldr	r3, [pc, #380]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1ee      	bne.n	80067a6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8102 	beq.w	80069d6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80067d2:	4b5a      	ldr	r3, [pc, #360]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067da:	2b18      	cmp	r3, #24
 80067dc:	f000 80bd 	beq.w	800695a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	f040 8095 	bne.w	8006914 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ea:	4b54      	ldr	r3, [pc, #336]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a53      	ldr	r2, [pc, #332]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80067f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f6:	f7fc fb47 	bl	8002e88 <HAL_GetTick>
 80067fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067fe:	f7fc fb43 	bl	8002e88 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e0e3      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006810:	4b4a      	ldr	r3, [pc, #296]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f0      	bne.n	80067fe <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800681c:	4b47      	ldr	r3, [pc, #284]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 800681e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006820:	4b48      	ldr	r3, [pc, #288]	; (8006944 <HAL_RCC_OscConfig+0x7b8>)
 8006822:	4013      	ands	r3, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800682c:	0112      	lsls	r2, r2, #4
 800682e:	430a      	orrs	r2, r1
 8006830:	4942      	ldr	r1, [pc, #264]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006832:	4313      	orrs	r3, r2
 8006834:	628b      	str	r3, [r1, #40]	; 0x28
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	3b01      	subs	r3, #1
 800683c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006844:	3b01      	subs	r3, #1
 8006846:	025b      	lsls	r3, r3, #9
 8006848:	b29b      	uxth	r3, r3
 800684a:	431a      	orrs	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	3b01      	subs	r3, #1
 8006852:	041b      	lsls	r3, r3, #16
 8006854:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	3b01      	subs	r3, #1
 8006860:	061b      	lsls	r3, r3, #24
 8006862:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006866:	4935      	ldr	r1, [pc, #212]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006868:	4313      	orrs	r3, r2
 800686a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800686c:	4b33      	ldr	r3, [pc, #204]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	4a32      	ldr	r2, [pc, #200]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006878:	4b30      	ldr	r3, [pc, #192]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 800687a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800687c:	4b32      	ldr	r3, [pc, #200]	; (8006948 <HAL_RCC_OscConfig+0x7bc>)
 800687e:	4013      	ands	r3, r2
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006884:	00d2      	lsls	r2, r2, #3
 8006886:	492d      	ldr	r1, [pc, #180]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006888:	4313      	orrs	r3, r2
 800688a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800688c:	4b2b      	ldr	r3, [pc, #172]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	f023 020c 	bic.w	r2, r3, #12
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	4928      	ldr	r1, [pc, #160]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 800689a:	4313      	orrs	r3, r2
 800689c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800689e:	4b27      	ldr	r3, [pc, #156]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	f023 0202 	bic.w	r2, r3, #2
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	4924      	ldr	r1, [pc, #144]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068b0:	4b22      	ldr	r3, [pc, #136]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	4a21      	ldr	r2, [pc, #132]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068bc:	4b1f      	ldr	r3, [pc, #124]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	4a1e      	ldr	r2, [pc, #120]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80068c8:	4b1c      	ldr	r3, [pc, #112]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	4a1b      	ldr	r2, [pc, #108]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80068d4:	4b19      	ldr	r3, [pc, #100]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	4a18      	ldr	r2, [pc, #96]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068e0:	4b16      	ldr	r3, [pc, #88]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a15      	ldr	r2, [pc, #84]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 80068e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ec:	f7fc facc 	bl	8002e88 <HAL_GetTick>
 80068f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068f4:	f7fc fac8 	bl	8002e88 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e068      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006906:	4b0d      	ldr	r3, [pc, #52]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0f0      	beq.n	80068f4 <HAL_RCC_OscConfig+0x768>
 8006912:	e060      	b.n	80069d6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006914:	4b09      	ldr	r3, [pc, #36]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a08      	ldr	r2, [pc, #32]	; (800693c <HAL_RCC_OscConfig+0x7b0>)
 800691a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800691e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006920:	f7fc fab2 	bl	8002e88 <HAL_GetTick>
 8006924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006926:	e011      	b.n	800694c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006928:	f7fc faae 	bl	8002e88 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d90a      	bls.n	800694c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e04e      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
 800693a:	bf00      	nop
 800693c:	58024400 	.word	0x58024400
 8006940:	58024800 	.word	0x58024800
 8006944:	fffffc0c 	.word	0xfffffc0c
 8006948:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800694c:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <HAL_RCC_OscConfig+0x854>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e7      	bne.n	8006928 <HAL_RCC_OscConfig+0x79c>
 8006958:	e03d      	b.n	80069d6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800695a:	4b21      	ldr	r3, [pc, #132]	; (80069e0 <HAL_RCC_OscConfig+0x854>)
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006960:	4b1f      	ldr	r3, [pc, #124]	; (80069e0 <HAL_RCC_OscConfig+0x854>)
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	2b01      	cmp	r3, #1
 800696c:	d031      	beq.n	80069d2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f003 0203 	and.w	r2, r3, #3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006978:	429a      	cmp	r2, r3
 800697a:	d12a      	bne.n	80069d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	091b      	lsrs	r3, r3, #4
 8006980:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006988:	429a      	cmp	r2, r3
 800698a:	d122      	bne.n	80069d2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d11a      	bne.n	80069d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	0a5b      	lsrs	r3, r3, #9
 80069a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d111      	bne.n	80069d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069bc:	429a      	cmp	r2, r3
 80069be:	d108      	bne.n	80069d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	0e1b      	lsrs	r3, r3, #24
 80069c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d001      	beq.n	80069d6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3730      	adds	r7, #48	; 0x30
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	58024400 	.word	0x58024400

080069e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e19c      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069f8:	4b8a      	ldr	r3, [pc, #552]	; (8006c24 <HAL_RCC_ClockConfig+0x240>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d910      	bls.n	8006a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a06:	4b87      	ldr	r3, [pc, #540]	; (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f023 020f 	bic.w	r2, r3, #15
 8006a0e:	4985      	ldr	r1, [pc, #532]	; (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a16:	4b83      	ldr	r3, [pc, #524]	; (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d001      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e184      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d010      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	4b7b      	ldr	r3, [pc, #492]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d908      	bls.n	8006a56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a44:	4b78      	ldr	r3, [pc, #480]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	4975      	ldr	r1, [pc, #468]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d010      	beq.n	8006a84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	4b70      	ldr	r3, [pc, #448]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d908      	bls.n	8006a84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a72:	4b6d      	ldr	r3, [pc, #436]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	496a      	ldr	r1, [pc, #424]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d010      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	699a      	ldr	r2, [r3, #24]
 8006a94:	4b64      	ldr	r3, [pc, #400]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d908      	bls.n	8006ab2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006aa0:	4b61      	ldr	r3, [pc, #388]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	495e      	ldr	r1, [pc, #376]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d010      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69da      	ldr	r2, [r3, #28]
 8006ac2:	4b59      	ldr	r3, [pc, #356]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d908      	bls.n	8006ae0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006ace:	4b56      	ldr	r3, [pc, #344]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	4953      	ldr	r1, [pc, #332]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d010      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	4b4d      	ldr	r3, [pc, #308]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d908      	bls.n	8006b0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006afc:	4b4a      	ldr	r3, [pc, #296]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f023 020f 	bic.w	r2, r3, #15
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4947      	ldr	r1, [pc, #284]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d055      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b1a:	4b43      	ldr	r3, [pc, #268]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	4940      	ldr	r1, [pc, #256]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d107      	bne.n	8006b44 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b34:	4b3c      	ldr	r3, [pc, #240]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d121      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e0f6      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d107      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b4c:	4b36      	ldr	r3, [pc, #216]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d115      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e0ea      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d107      	bne.n	8006b74 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b64:	4b30      	ldr	r3, [pc, #192]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0de      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b74:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e0d6      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b84:	4b28      	ldr	r3, [pc, #160]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f023 0207 	bic.w	r2, r3, #7
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	4925      	ldr	r1, [pc, #148]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b96:	f7fc f977 	bl	8002e88 <HAL_GetTick>
 8006b9a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9c:	e00a      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b9e:	f7fc f973 	bl	8002e88 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e0be      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb4:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d1eb      	bne.n	8006b9e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d010      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d208      	bcs.n	8006bf4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be2:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	f023 020f 	bic.w	r2, r3, #15
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	490e      	ldr	r1, [pc, #56]	; (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d214      	bcs.n	8006c2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c02:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f023 020f 	bic.w	r2, r3, #15
 8006c0a:	4906      	ldr	r1, [pc, #24]	; (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c12:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d005      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e086      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
 8006c24:	52002000 	.word	0x52002000
 8006c28:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d010      	beq.n	8006c5a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	4b3f      	ldr	r3, [pc, #252]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d208      	bcs.n	8006c5a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c48:	4b3c      	ldr	r3, [pc, #240]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	4939      	ldr	r1, [pc, #228]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d010      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695a      	ldr	r2, [r3, #20]
 8006c6a:	4b34      	ldr	r3, [pc, #208]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d208      	bcs.n	8006c88 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c76:	4b31      	ldr	r3, [pc, #196]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	492e      	ldr	r1, [pc, #184]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d010      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	699a      	ldr	r2, [r3, #24]
 8006c98:	4b28      	ldr	r3, [pc, #160]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d208      	bcs.n	8006cb6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ca4:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	4922      	ldr	r1, [pc, #136]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d010      	beq.n	8006ce4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69da      	ldr	r2, [r3, #28]
 8006cc6:	4b1d      	ldr	r3, [pc, #116]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d208      	bcs.n	8006ce4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006cd2:	4b1a      	ldr	r3, [pc, #104]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	4917      	ldr	r1, [pc, #92]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ce4:	f000 f834 	bl	8006d50 <HAL_RCC_GetSysClockFreq>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	4b14      	ldr	r3, [pc, #80]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	4912      	ldr	r1, [pc, #72]	; (8006d40 <HAL_RCC_ClockConfig+0x35c>)
 8006cf6:	5ccb      	ldrb	r3, [r1, r3]
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006d00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d02:	4b0e      	ldr	r3, [pc, #56]	; (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	4a0d      	ldr	r2, [pc, #52]	; (8006d40 <HAL_RCC_ClockConfig+0x35c>)
 8006d0c:	5cd3      	ldrb	r3, [r2, r3]
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
 8006d18:	4a0a      	ldr	r2, [pc, #40]	; (8006d44 <HAL_RCC_ClockConfig+0x360>)
 8006d1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d1c:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <HAL_RCC_ClockConfig+0x364>)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <HAL_RCC_ClockConfig+0x368>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fa fd5a 	bl	80017e0 <HAL_InitTick>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	58024400 	.word	0x58024400
 8006d40:	0800edc0 	.word	0x0800edc0
 8006d44:	24000024 	.word	0x24000024
 8006d48:	24000020 	.word	0x24000020
 8006d4c:	24000028 	.word	0x24000028

08006d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b089      	sub	sp, #36	; 0x24
 8006d54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d56:	4bb3      	ldr	r3, [pc, #716]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d5e:	2b18      	cmp	r3, #24
 8006d60:	f200 8155 	bhi.w	800700e <HAL_RCC_GetSysClockFreq+0x2be>
 8006d64:	a201      	add	r2, pc, #4	; (adr r2, 8006d6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	08006dd1 	.word	0x08006dd1
 8006d70:	0800700f 	.word	0x0800700f
 8006d74:	0800700f 	.word	0x0800700f
 8006d78:	0800700f 	.word	0x0800700f
 8006d7c:	0800700f 	.word	0x0800700f
 8006d80:	0800700f 	.word	0x0800700f
 8006d84:	0800700f 	.word	0x0800700f
 8006d88:	0800700f 	.word	0x0800700f
 8006d8c:	08006df7 	.word	0x08006df7
 8006d90:	0800700f 	.word	0x0800700f
 8006d94:	0800700f 	.word	0x0800700f
 8006d98:	0800700f 	.word	0x0800700f
 8006d9c:	0800700f 	.word	0x0800700f
 8006da0:	0800700f 	.word	0x0800700f
 8006da4:	0800700f 	.word	0x0800700f
 8006da8:	0800700f 	.word	0x0800700f
 8006dac:	08006dfd 	.word	0x08006dfd
 8006db0:	0800700f 	.word	0x0800700f
 8006db4:	0800700f 	.word	0x0800700f
 8006db8:	0800700f 	.word	0x0800700f
 8006dbc:	0800700f 	.word	0x0800700f
 8006dc0:	0800700f 	.word	0x0800700f
 8006dc4:	0800700f 	.word	0x0800700f
 8006dc8:	0800700f 	.word	0x0800700f
 8006dcc:	08006e03 	.word	0x08006e03
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dd0:	4b94      	ldr	r3, [pc, #592]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d009      	beq.n	8006df0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ddc:	4b91      	ldr	r3, [pc, #580]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	08db      	lsrs	r3, r3, #3
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	4a90      	ldr	r2, [pc, #576]	; (8007028 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006dee:	e111      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006df0:	4b8d      	ldr	r3, [pc, #564]	; (8007028 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006df2:	61bb      	str	r3, [r7, #24]
    break;
 8006df4:	e10e      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006df6:	4b8d      	ldr	r3, [pc, #564]	; (800702c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006df8:	61bb      	str	r3, [r7, #24]
    break;
 8006dfa:	e10b      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006dfc:	4b8c      	ldr	r3, [pc, #560]	; (8007030 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006dfe:	61bb      	str	r3, [r7, #24]
    break;
 8006e00:	e108      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e02:	4b88      	ldr	r3, [pc, #544]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006e0c:	4b85      	ldr	r3, [pc, #532]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e10:	091b      	lsrs	r3, r3, #4
 8006e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e16:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e18:	4b82      	ldr	r3, [pc, #520]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006e22:	4b80      	ldr	r3, [pc, #512]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	08db      	lsrs	r3, r3, #3
 8006e28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80e1 	beq.w	8007008 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	f000 8083 	beq.w	8006f54 <HAL_RCC_GetSysClockFreq+0x204>
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	f200 80a1 	bhi.w	8006f98 <HAL_RCC_GetSysClockFreq+0x248>
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_RCC_GetSysClockFreq+0x114>
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d056      	beq.n	8006f10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e62:	e099      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e64:	4b6f      	ldr	r3, [pc, #444]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d02d      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e70:	4b6c      	ldr	r3, [pc, #432]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	08db      	lsrs	r3, r3, #3
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	4a6b      	ldr	r2, [pc, #428]	; (8007028 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e80:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9a:	4b62      	ldr	r3, [pc, #392]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007034 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006eca:	e087      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007038 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ede:	4b51      	ldr	r3, [pc, #324]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ef2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007034 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f0e:	e065      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800703c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f22:	4b40      	ldr	r3, [pc, #256]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f36:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007034 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f52:	e043      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007040 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f66:	4b2f      	ldr	r3, [pc, #188]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007034 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f96:	e021      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800703c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006faa:	4b1e      	ldr	r3, [pc, #120]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fbe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007034 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fda:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006fdc:	4b11      	ldr	r3, [pc, #68]	; (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	0a5b      	lsrs	r3, r3, #9
 8006fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	ee07 3a90 	vmov	s15, r3
 8006ff0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007000:	ee17 3a90 	vmov	r3, s15
 8007004:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007006:	e005      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	61bb      	str	r3, [r7, #24]
    break;
 800700c:	e002      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800700e:	4b07      	ldr	r3, [pc, #28]	; (800702c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007010:	61bb      	str	r3, [r7, #24]
    break;
 8007012:	bf00      	nop
  }

  return sysclockfreq;
 8007014:	69bb      	ldr	r3, [r7, #24]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3724      	adds	r7, #36	; 0x24
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	58024400 	.word	0x58024400
 8007028:	03d09000 	.word	0x03d09000
 800702c:	003d0900 	.word	0x003d0900
 8007030:	017d7840 	.word	0x017d7840
 8007034:	46000000 	.word	0x46000000
 8007038:	4c742400 	.word	0x4c742400
 800703c:	4a742400 	.word	0x4a742400
 8007040:	4bbebc20 	.word	0x4bbebc20

08007044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800704a:	f7ff fe81 	bl	8006d50 <HAL_RCC_GetSysClockFreq>
 800704e:	4602      	mov	r2, r0
 8007050:	4b10      	ldr	r3, [pc, #64]	; (8007094 <HAL_RCC_GetHCLKFreq+0x50>)
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	0a1b      	lsrs	r3, r3, #8
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	490f      	ldr	r1, [pc, #60]	; (8007098 <HAL_RCC_GetHCLKFreq+0x54>)
 800705c:	5ccb      	ldrb	r3, [r1, r3]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	fa22 f303 	lsr.w	r3, r2, r3
 8007066:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007068:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <HAL_RCC_GetHCLKFreq+0x50>)
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	4a09      	ldr	r2, [pc, #36]	; (8007098 <HAL_RCC_GetHCLKFreq+0x54>)
 8007072:	5cd3      	ldrb	r3, [r2, r3]
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	fa22 f303 	lsr.w	r3, r2, r3
 800707e:	4a07      	ldr	r2, [pc, #28]	; (800709c <HAL_RCC_GetHCLKFreq+0x58>)
 8007080:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007082:	4a07      	ldr	r2, [pc, #28]	; (80070a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007088:	4b04      	ldr	r3, [pc, #16]	; (800709c <HAL_RCC_GetHCLKFreq+0x58>)
 800708a:	681b      	ldr	r3, [r3, #0]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	58024400 	.word	0x58024400
 8007098:	0800edc0 	.word	0x0800edc0
 800709c:	24000024 	.word	0x24000024
 80070a0:	24000020 	.word	0x24000020

080070a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80070a8:	f7ff ffcc 	bl	8007044 <HAL_RCC_GetHCLKFreq>
 80070ac:	4602      	mov	r2, r0
 80070ae:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	091b      	lsrs	r3, r3, #4
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	4904      	ldr	r1, [pc, #16]	; (80070cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80070ba:	5ccb      	ldrb	r3, [r1, r3]
 80070bc:	f003 031f 	and.w	r3, r3, #31
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	58024400 	.word	0x58024400
 80070cc:	0800edc0 	.word	0x0800edc0

080070d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80070d4:	f7ff ffb6 	bl	8007044 <HAL_RCC_GetHCLKFreq>
 80070d8:	4602      	mov	r2, r0
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	f003 0307 	and.w	r3, r3, #7
 80070e4:	4904      	ldr	r1, [pc, #16]	; (80070f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070e6:	5ccb      	ldrb	r3, [r1, r3]
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	58024400 	.word	0x58024400
 80070f8:	0800edc0 	.word	0x0800edc0

080070fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	223f      	movs	r2, #63	; 0x3f
 800710a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800710c:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <HAL_RCC_GetClockConfig+0x7c>)
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0207 	and.w	r2, r3, #7
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007118:	4b17      	ldr	r3, [pc, #92]	; (8007178 <HAL_RCC_GetClockConfig+0x7c>)
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007124:	4b14      	ldr	r3, [pc, #80]	; (8007178 <HAL_RCC_GetClockConfig+0x7c>)
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	f003 020f 	and.w	r2, r3, #15
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007130:	4b11      	ldr	r3, [pc, #68]	; (8007178 <HAL_RCC_GetClockConfig+0x7c>)
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <HAL_RCC_GetClockConfig+0x7c>)
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007148:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <HAL_RCC_GetClockConfig+0x7c>)
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007154:	4b08      	ldr	r3, [pc, #32]	; (8007178 <HAL_RCC_GetClockConfig+0x7c>)
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007160:	4b06      	ldr	r3, [pc, #24]	; (800717c <HAL_RCC_GetClockConfig+0x80>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 020f 	and.w	r2, r3, #15
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	601a      	str	r2, [r3, #0]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	58024400 	.word	0x58024400
 800717c:	52002000 	.word	0x52002000

08007180 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007188:	2300      	movs	r3, #0
 800718a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800718c:	2300      	movs	r3, #0
 800718e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d03f      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071a4:	d02a      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80071a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071aa:	d824      	bhi.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80071ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071b0:	d018      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80071b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071b6:	d81e      	bhi.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80071bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c0:	d007      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80071c2:	e018      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c4:	4bab      	ldr	r3, [pc, #684]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	4aaa      	ldr	r2, [pc, #680]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071d0:	e015      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3304      	adds	r3, #4
 80071d6:	2102      	movs	r1, #2
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 f9cf 	bl	800857c <RCCEx_PLL2_Config>
 80071de:	4603      	mov	r3, r0
 80071e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071e2:	e00c      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3324      	adds	r3, #36	; 0x24
 80071e8:	2102      	movs	r1, #2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 fa78 	bl	80086e0 <RCCEx_PLL3_Config>
 80071f0:	4603      	mov	r3, r0
 80071f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071f4:	e003      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	75fb      	strb	r3, [r7, #23]
      break;
 80071fa:	e000      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80071fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d109      	bne.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007204:	4b9b      	ldr	r3, [pc, #620]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007210:	4998      	ldr	r1, [pc, #608]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007212:	4313      	orrs	r3, r2
 8007214:	650b      	str	r3, [r1, #80]	; 0x50
 8007216:	e001      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007224:	2b00      	cmp	r3, #0
 8007226:	d03d      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722c:	2b04      	cmp	r3, #4
 800722e:	d826      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	0800724d 	.word	0x0800724d
 800723c:	0800725b 	.word	0x0800725b
 8007240:	0800726d 	.word	0x0800726d
 8007244:	08007285 	.word	0x08007285
 8007248:	08007285 	.word	0x08007285
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800724c:	4b89      	ldr	r3, [pc, #548]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	4a88      	ldr	r2, [pc, #544]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007258:	e015      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3304      	adds	r3, #4
 800725e:	2100      	movs	r1, #0
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f98b 	bl	800857c <RCCEx_PLL2_Config>
 8007266:	4603      	mov	r3, r0
 8007268:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800726a:	e00c      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3324      	adds	r3, #36	; 0x24
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f001 fa34 	bl	80086e0 <RCCEx_PLL3_Config>
 8007278:	4603      	mov	r3, r0
 800727a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800727c:	e003      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	75fb      	strb	r3, [r7, #23]
      break;
 8007282:	e000      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d109      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800728c:	4b79      	ldr	r3, [pc, #484]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800728e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007290:	f023 0207 	bic.w	r2, r3, #7
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007298:	4976      	ldr	r1, [pc, #472]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800729a:	4313      	orrs	r3, r2
 800729c:	650b      	str	r3, [r1, #80]	; 0x50
 800729e:	e001      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d042      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b8:	d02b      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80072ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072be:	d825      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80072c0:	2bc0      	cmp	r3, #192	; 0xc0
 80072c2:	d028      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80072c4:	2bc0      	cmp	r3, #192	; 0xc0
 80072c6:	d821      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80072c8:	2b80      	cmp	r3, #128	; 0x80
 80072ca:	d016      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80072cc:	2b80      	cmp	r3, #128	; 0x80
 80072ce:	d81d      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80072d4:	2b40      	cmp	r3, #64	; 0x40
 80072d6:	d007      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80072d8:	e018      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072da:	4b66      	ldr	r3, [pc, #408]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	4a65      	ldr	r2, [pc, #404]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072e6:	e017      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3304      	adds	r3, #4
 80072ec:	2100      	movs	r1, #0
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 f944 	bl	800857c <RCCEx_PLL2_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072f8:	e00e      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	3324      	adds	r3, #36	; 0x24
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f001 f9ed 	bl	80086e0 <RCCEx_PLL3_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800730a:	e005      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	75fb      	strb	r3, [r7, #23]
      break;
 8007310:	e002      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007312:	bf00      	nop
 8007314:	e000      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800731e:	4b55      	ldr	r3, [pc, #340]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007322:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732a:	4952      	ldr	r1, [pc, #328]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800732c:	4313      	orrs	r3, r2
 800732e:	650b      	str	r3, [r1, #80]	; 0x50
 8007330:	e001      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733e:	2b00      	cmp	r3, #0
 8007340:	d049      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800734c:	d030      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800734e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007352:	d82a      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007354:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007358:	d02c      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800735a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800735e:	d824      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007364:	d018      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800736a:	d81e      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007374:	d007      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007376:	e018      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007378:	4b3e      	ldr	r3, [pc, #248]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4a3d      	ldr	r2, [pc, #244]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800737e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007384:	e017      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3304      	adds	r3, #4
 800738a:	2100      	movs	r1, #0
 800738c:	4618      	mov	r0, r3
 800738e:	f001 f8f5 	bl	800857c <RCCEx_PLL2_Config>
 8007392:	4603      	mov	r3, r0
 8007394:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007396:	e00e      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3324      	adds	r3, #36	; 0x24
 800739c:	2100      	movs	r1, #0
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 f99e 	bl	80086e0 <RCCEx_PLL3_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073a8:	e005      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]
      break;
 80073ae:	e002      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80073b0:	bf00      	nop
 80073b2:	e000      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80073b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80073bc:	4b2d      	ldr	r3, [pc, #180]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073ca:	492a      	ldr	r1, [pc, #168]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	658b      	str	r3, [r1, #88]	; 0x58
 80073d0:	e001      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
 80073d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d04c      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ec:	d030      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80073ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073f2:	d82a      	bhi.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073f8:	d02c      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80073fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073fe:	d824      	bhi.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007404:	d018      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800740a:	d81e      	bhi.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007414:	d007      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007416:	e018      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007418:	4b16      	ldr	r3, [pc, #88]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	4a15      	ldr	r2, [pc, #84]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800741e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007422:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007424:	e017      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3304      	adds	r3, #4
 800742a:	2100      	movs	r1, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f001 f8a5 	bl	800857c <RCCEx_PLL2_Config>
 8007432:	4603      	mov	r3, r0
 8007434:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007436:	e00e      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3324      	adds	r3, #36	; 0x24
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f001 f94e 	bl	80086e0 <RCCEx_PLL3_Config>
 8007444:	4603      	mov	r3, r0
 8007446:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007448:	e005      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	75fb      	strb	r3, [r7, #23]
      break;
 800744e:	e002      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007450:	bf00      	nop
 8007452:	e000      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800745e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007460:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800746a:	4902      	ldr	r1, [pc, #8]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800746c:	4313      	orrs	r3, r2
 800746e:	658b      	str	r3, [r1, #88]	; 0x58
 8007470:	e004      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007472:	bf00      	nop
 8007474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d032      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800748c:	2b30      	cmp	r3, #48	; 0x30
 800748e:	d01c      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007490:	2b30      	cmp	r3, #48	; 0x30
 8007492:	d817      	bhi.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007494:	2b20      	cmp	r3, #32
 8007496:	d00c      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007498:	2b20      	cmp	r3, #32
 800749a:	d813      	bhi.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d016      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d10f      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a4:	4baf      	ldr	r3, [pc, #700]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	4aae      	ldr	r2, [pc, #696]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80074b0:	e00e      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3304      	adds	r3, #4
 80074b6:	2102      	movs	r1, #2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 f85f 	bl	800857c <RCCEx_PLL2_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80074c2:	e005      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
      break;
 80074c8:	e002      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80074ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80074d6:	4ba3      	ldr	r3, [pc, #652]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e2:	49a0      	ldr	r1, [pc, #640]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074e8:	e001      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d047      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007502:	d030      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007508:	d82a      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800750a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800750e:	d02c      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007514:	d824      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800751a:	d018      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800751c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007520:	d81e      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800752a:	d007      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800752c:	e018      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800752e:	4b8d      	ldr	r3, [pc, #564]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	4a8c      	ldr	r2, [pc, #560]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800753a:	e017      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3304      	adds	r3, #4
 8007540:	2100      	movs	r1, #0
 8007542:	4618      	mov	r0, r3
 8007544:	f001 f81a 	bl	800857c <RCCEx_PLL2_Config>
 8007548:	4603      	mov	r3, r0
 800754a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800754c:	e00e      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3324      	adds	r3, #36	; 0x24
 8007552:	2100      	movs	r1, #0
 8007554:	4618      	mov	r0, r3
 8007556:	f001 f8c3 	bl	80086e0 <RCCEx_PLL3_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800755e:	e005      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	75fb      	strb	r3, [r7, #23]
      break;
 8007564:	e002      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800756a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d109      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007572:	4b7c      	ldr	r3, [pc, #496]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007576:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800757e:	4979      	ldr	r1, [pc, #484]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007580:	4313      	orrs	r3, r2
 8007582:	650b      	str	r3, [r1, #80]	; 0x50
 8007584:	e001      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d049      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800759a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800759e:	d02e      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80075a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075a4:	d828      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80075a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075aa:	d02a      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80075ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075b0:	d822      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80075b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075b6:	d026      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80075b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075bc:	d81c      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80075be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075c2:	d010      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80075c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075c8:	d816      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d01d      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80075ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d2:	d111      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3304      	adds	r3, #4
 80075d8:	2101      	movs	r1, #1
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 ffce 	bl	800857c <RCCEx_PLL2_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075e4:	e012      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3324      	adds	r3, #36	; 0x24
 80075ea:	2101      	movs	r1, #1
 80075ec:	4618      	mov	r0, r3
 80075ee:	f001 f877 	bl	80086e0 <RCCEx_PLL3_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075f6:	e009      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
      break;
 80075fc:	e006      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80075fe:	bf00      	nop
 8007600:	e004      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007602:	bf00      	nop
 8007604:	e002      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007606:	bf00      	nop
 8007608:	e000      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800760a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d109      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007612:	4b54      	ldr	r3, [pc, #336]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007616:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800761e:	4951      	ldr	r1, [pc, #324]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007620:	4313      	orrs	r3, r2
 8007622:	650b      	str	r3, [r1, #80]	; 0x50
 8007624:	e001      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d04b      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800763c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007640:	d02e      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007646:	d828      	bhi.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764c:	d02a      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800764e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007652:	d822      	bhi.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007654:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007658:	d026      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800765a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800765e:	d81c      	bhi.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007664:	d010      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800766a:	d816      	bhi.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01d      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007674:	d111      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3304      	adds	r3, #4
 800767a:	2101      	movs	r1, #1
 800767c:	4618      	mov	r0, r3
 800767e:	f000 ff7d 	bl	800857c <RCCEx_PLL2_Config>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007686:	e012      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3324      	adds	r3, #36	; 0x24
 800768c:	2101      	movs	r1, #1
 800768e:	4618      	mov	r0, r3
 8007690:	f001 f826 	bl	80086e0 <RCCEx_PLL3_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007698:	e009      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	75fb      	strb	r3, [r7, #23]
      break;
 800769e:	e006      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80076a0:	bf00      	nop
 80076a2:	e004      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80076a4:	bf00      	nop
 80076a6:	e002      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80076a8:	bf00      	nop
 80076aa:	e000      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80076ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80076b4:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076c2:	4928      	ldr	r1, [pc, #160]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	658b      	str	r3, [r1, #88]	; 0x58
 80076c8:	e001      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d02f      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076e2:	d00e      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80076e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076e8:	d814      	bhi.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d015      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80076ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076f2:	d10f      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f4:	4b1b      	ldr	r3, [pc, #108]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	4a1a      	ldr	r2, [pc, #104]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007700:	e00c      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3304      	adds	r3, #4
 8007706:	2101      	movs	r1, #1
 8007708:	4618      	mov	r0, r3
 800770a:	f000 ff37 	bl	800857c <RCCEx_PLL2_Config>
 800770e:	4603      	mov	r3, r0
 8007710:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007712:	e003      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	75fb      	strb	r3, [r7, #23]
      break;
 8007718:	e000      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800771a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800771c:	7dfb      	ldrb	r3, [r7, #23]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d109      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007722:	4b10      	ldr	r3, [pc, #64]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007726:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800772e:	490d      	ldr	r1, [pc, #52]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007730:	4313      	orrs	r3, r2
 8007732:	650b      	str	r3, [r1, #80]	; 0x50
 8007734:	e001      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d033      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774a:	2b03      	cmp	r3, #3
 800774c:	d81c      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	0800778f 	.word	0x0800778f
 8007758:	08007769 	.word	0x08007769
 800775c:	08007777 	.word	0x08007777
 8007760:	0800778f 	.word	0x0800778f
 8007764:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007768:	4bb8      	ldr	r3, [pc, #736]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	4ab7      	ldr	r2, [pc, #732]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800776e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007774:	e00c      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3304      	adds	r3, #4
 800777a:	2102      	movs	r1, #2
 800777c:	4618      	mov	r0, r3
 800777e:	f000 fefd 	bl	800857c <RCCEx_PLL2_Config>
 8007782:	4603      	mov	r3, r0
 8007784:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007786:	e003      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	75fb      	strb	r3, [r7, #23]
      break;
 800778c:	e000      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800778e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d109      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007796:	4bad      	ldr	r3, [pc, #692]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800779a:	f023 0203 	bic.w	r2, r3, #3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a2:	49aa      	ldr	r1, [pc, #680]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077a8:	e001      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 8086 	beq.w	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077bc:	4ba4      	ldr	r3, [pc, #656]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4aa3      	ldr	r2, [pc, #652]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80077c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077c8:	f7fb fb5e 	bl	8002e88 <HAL_GetTick>
 80077cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077ce:	e009      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d0:	f7fb fb5a 	bl	8002e88 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b64      	cmp	r3, #100	; 0x64
 80077dc:	d902      	bls.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	75fb      	strb	r3, [r7, #23]
        break;
 80077e2:	e005      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077e4:	4b9a      	ldr	r3, [pc, #616]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0ef      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d166      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80077f6:	4b95      	ldr	r3, [pc, #596]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007800:	4053      	eors	r3, r2
 8007802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007806:	2b00      	cmp	r3, #0
 8007808:	d013      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800780a:	4b90      	ldr	r3, [pc, #576]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800780c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007812:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007814:	4b8d      	ldr	r3, [pc, #564]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007818:	4a8c      	ldr	r2, [pc, #560]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800781a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800781e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007820:	4b8a      	ldr	r3, [pc, #552]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007824:	4a89      	ldr	r2, [pc, #548]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800782a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800782c:	4a87      	ldr	r2, [pc, #540]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783c:	d115      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783e:	f7fb fb23 	bl	8002e88 <HAL_GetTick>
 8007842:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007844:	e00b      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007846:	f7fb fb1f 	bl	8002e88 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	f241 3288 	movw	r2, #5000	; 0x1388
 8007854:	4293      	cmp	r3, r2
 8007856:	d902      	bls.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	75fb      	strb	r3, [r7, #23]
            break;
 800785c:	e005      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800785e:	4b7b      	ldr	r3, [pc, #492]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0ed      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d126      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800787a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800787e:	d10d      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007880:	4b72      	ldr	r3, [pc, #456]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800788e:	0919      	lsrs	r1, r3, #4
 8007890:	4b70      	ldr	r3, [pc, #448]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007892:	400b      	ands	r3, r1
 8007894:	496d      	ldr	r1, [pc, #436]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007896:	4313      	orrs	r3, r2
 8007898:	610b      	str	r3, [r1, #16]
 800789a:	e005      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800789c:	4b6b      	ldr	r3, [pc, #428]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	4a6a      	ldr	r2, [pc, #424]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80078a6:	6113      	str	r3, [r2, #16]
 80078a8:	4b68      	ldr	r3, [pc, #416]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078b6:	4965      	ldr	r1, [pc, #404]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	670b      	str	r3, [r1, #112]	; 0x70
 80078bc:	e004      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	75bb      	strb	r3, [r7, #22]
 80078c2:	e001      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d07e      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078d8:	2b28      	cmp	r3, #40	; 0x28
 80078da:	d867      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80078dc:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80078de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	080079b3 	.word	0x080079b3
 80078e8:	080079ad 	.word	0x080079ad
 80078ec:	080079ad 	.word	0x080079ad
 80078f0:	080079ad 	.word	0x080079ad
 80078f4:	080079ad 	.word	0x080079ad
 80078f8:	080079ad 	.word	0x080079ad
 80078fc:	080079ad 	.word	0x080079ad
 8007900:	080079ad 	.word	0x080079ad
 8007904:	08007989 	.word	0x08007989
 8007908:	080079ad 	.word	0x080079ad
 800790c:	080079ad 	.word	0x080079ad
 8007910:	080079ad 	.word	0x080079ad
 8007914:	080079ad 	.word	0x080079ad
 8007918:	080079ad 	.word	0x080079ad
 800791c:	080079ad 	.word	0x080079ad
 8007920:	080079ad 	.word	0x080079ad
 8007924:	0800799b 	.word	0x0800799b
 8007928:	080079ad 	.word	0x080079ad
 800792c:	080079ad 	.word	0x080079ad
 8007930:	080079ad 	.word	0x080079ad
 8007934:	080079ad 	.word	0x080079ad
 8007938:	080079ad 	.word	0x080079ad
 800793c:	080079ad 	.word	0x080079ad
 8007940:	080079ad 	.word	0x080079ad
 8007944:	080079b3 	.word	0x080079b3
 8007948:	080079ad 	.word	0x080079ad
 800794c:	080079ad 	.word	0x080079ad
 8007950:	080079ad 	.word	0x080079ad
 8007954:	080079ad 	.word	0x080079ad
 8007958:	080079ad 	.word	0x080079ad
 800795c:	080079ad 	.word	0x080079ad
 8007960:	080079ad 	.word	0x080079ad
 8007964:	080079b3 	.word	0x080079b3
 8007968:	080079ad 	.word	0x080079ad
 800796c:	080079ad 	.word	0x080079ad
 8007970:	080079ad 	.word	0x080079ad
 8007974:	080079ad 	.word	0x080079ad
 8007978:	080079ad 	.word	0x080079ad
 800797c:	080079ad 	.word	0x080079ad
 8007980:	080079ad 	.word	0x080079ad
 8007984:	080079b3 	.word	0x080079b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3304      	adds	r3, #4
 800798c:	2101      	movs	r1, #1
 800798e:	4618      	mov	r0, r3
 8007990:	f000 fdf4 	bl	800857c <RCCEx_PLL2_Config>
 8007994:	4603      	mov	r3, r0
 8007996:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007998:	e00c      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3324      	adds	r3, #36	; 0x24
 800799e:	2101      	movs	r1, #1
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fe9d 	bl	80086e0 <RCCEx_PLL3_Config>
 80079a6:	4603      	mov	r3, r0
 80079a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80079aa:	e003      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	75fb      	strb	r3, [r7, #23]
      break;
 80079b0:	e000      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80079b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d109      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80079ba:	4b24      	ldr	r3, [pc, #144]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079c6:	4921      	ldr	r1, [pc, #132]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	654b      	str	r3, [r1, #84]	; 0x54
 80079cc:	e001      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d03e      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	d820      	bhi.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a2f 	.word	0x08007a2f
 80079f0:	08007a05 	.word	0x08007a05
 80079f4:	08007a17 	.word	0x08007a17
 80079f8:	08007a2f 	.word	0x08007a2f
 80079fc:	08007a2f 	.word	0x08007a2f
 8007a00:	08007a2f 	.word	0x08007a2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3304      	adds	r3, #4
 8007a08:	2101      	movs	r1, #1
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fdb6 	bl	800857c <RCCEx_PLL2_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a14:	e00c      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	3324      	adds	r3, #36	; 0x24
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fe5f 	bl	80086e0 <RCCEx_PLL3_Config>
 8007a22:	4603      	mov	r3, r0
 8007a24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a26:	e003      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a2c:	e000      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d110      	bne.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a36:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3a:	f023 0207 	bic.w	r2, r3, #7
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a42:	4902      	ldr	r1, [pc, #8]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	654b      	str	r3, [r1, #84]	; 0x54
 8007a48:	e008      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007a4a:	bf00      	nop
 8007a4c:	58024400 	.word	0x58024400
 8007a50:	58024800 	.word	0x58024800
 8007a54:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
 8007a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d039      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	d820      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007abb 	.word	0x08007abb
 8007a7c:	08007a91 	.word	0x08007a91
 8007a80:	08007aa3 	.word	0x08007aa3
 8007a84:	08007abb 	.word	0x08007abb
 8007a88:	08007abb 	.word	0x08007abb
 8007a8c:	08007abb 	.word	0x08007abb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3304      	adds	r3, #4
 8007a94:	2101      	movs	r1, #1
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fd70 	bl	800857c <RCCEx_PLL2_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007aa0:	e00c      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3324      	adds	r3, #36	; 0x24
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fe19 	bl	80086e0 <RCCEx_PLL3_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ab2:	e003      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab8:	e000      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ac2:	4bb7      	ldr	r3, [pc, #732]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac6:	f023 0207 	bic.w	r2, r3, #7
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad0:	49b3      	ldr	r1, [pc, #716]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	658b      	str	r3, [r1, #88]	; 0x58
 8007ad6:	e001      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d04b      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007af2:	d02e      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007af8:	d828      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afe:	d02a      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b04:	d822      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b0a:	d026      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b10:	d81c      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b16:	d010      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b1c:	d816      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d01d      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b26:	d111      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fd24 	bl	800857c <RCCEx_PLL2_Config>
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b38:	e012      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3324      	adds	r3, #36	; 0x24
 8007b3e:	2102      	movs	r1, #2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 fdcd 	bl	80086e0 <RCCEx_PLL3_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b4a:	e009      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b50:	e006      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b52:	bf00      	nop
 8007b54:	e004      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b56:	bf00      	nop
 8007b58:	e002      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b5a:	bf00      	nop
 8007b5c:	e000      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b66:	4b8e      	ldr	r3, [pc, #568]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b74:	498a      	ldr	r1, [pc, #552]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	654b      	str	r3, [r1, #84]	; 0x54
 8007b7a:	e001      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
 8007b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d04b      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b96:	d02e      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007b98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b9c:	d828      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba2:	d02a      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba8:	d822      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bae:	d026      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bb4:	d81c      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bba:	d010      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bc0:	d816      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d01d      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bca:	d111      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fcd2 	bl	800857c <RCCEx_PLL2_Config>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007bdc:	e012      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3324      	adds	r3, #36	; 0x24
 8007be2:	2102      	movs	r1, #2
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 fd7b 	bl	80086e0 <RCCEx_PLL3_Config>
 8007bea:	4603      	mov	r3, r0
 8007bec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007bee:	e009      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf4:	e006      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bf6:	bf00      	nop
 8007bf8:	e004      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bfa:	bf00      	nop
 8007bfc:	e002      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bfe:	bf00      	nop
 8007c00:	e000      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c0a:	4b65      	ldr	r3, [pc, #404]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c18:	4961      	ldr	r1, [pc, #388]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c1e:	e001      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d04b      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c3a:	d02e      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007c3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c40:	d828      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c46:	d02a      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c4c:	d822      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c52:	d026      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007c54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c58:	d81c      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c5e:	d010      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c64:	d816      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d01d      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c6e:	d111      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3304      	adds	r3, #4
 8007c74:	2100      	movs	r1, #0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fc80 	bl	800857c <RCCEx_PLL2_Config>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c80:	e012      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3324      	adds	r3, #36	; 0x24
 8007c86:	2102      	movs	r1, #2
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 fd29 	bl	80086e0 <RCCEx_PLL3_Config>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c92:	e009      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	75fb      	strb	r3, [r7, #23]
      break;
 8007c98:	e006      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c9a:	bf00      	nop
 8007c9c:	e004      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c9e:	bf00      	nop
 8007ca0:	e002      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007ca2:	bf00      	nop
 8007ca4:	e000      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10a      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007cae:	4b3c      	ldr	r3, [pc, #240]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cbc:	4938      	ldr	r1, [pc, #224]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	658b      	str	r3, [r1, #88]	; 0x58
 8007cc2:	e001      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01a      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cde:	d10a      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3324      	adds	r3, #36	; 0x24
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fcfa 	bl	80086e0 <RCCEx_PLL3_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007cf6:	4b2a      	ldr	r3, [pc, #168]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d04:	4926      	ldr	r1, [pc, #152]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d01a      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d20:	d10a      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3324      	adds	r3, #36	; 0x24
 8007d26:	2102      	movs	r1, #2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 fcd9 	bl	80086e0 <RCCEx_PLL3_Config>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d38:	4b19      	ldr	r3, [pc, #100]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d46:	4916      	ldr	r1, [pc, #88]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d036      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d62:	d01f      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d68:	d817      	bhi.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d72:	d009      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007d74:	e011      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fbfd 	bl	800857c <RCCEx_PLL2_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d86:	e00e      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3324      	adds	r3, #36	; 0x24
 8007d8c:	2102      	movs	r1, #2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fca6 	bl	80086e0 <RCCEx_PLL3_Config>
 8007d94:	4603      	mov	r3, r0
 8007d96:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d98:	e005      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d9e:	e002      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007da0:	58024400 	.word	0x58024400
      break;
 8007da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dac:	4b93      	ldr	r3, [pc, #588]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007dba:	4990      	ldr	r1, [pc, #576]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	658b      	str	r3, [r1, #88]	; 0x58
 8007dc0:	e001      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d033      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ddc:	d01c      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007dde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007de2:	d816      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de8:	d003      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dee:	d007      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007df0:	e00f      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df2:	4b82      	ldr	r3, [pc, #520]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	4a81      	ldr	r2, [pc, #516]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007dfe:	e00c      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3324      	adds	r3, #36	; 0x24
 8007e04:	2101      	movs	r1, #1
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fc6a 	bl	80086e0 <RCCEx_PLL3_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e10:	e003      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	75fb      	strb	r3, [r7, #23]
      break;
 8007e16:	e000      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e20:	4b76      	ldr	r3, [pc, #472]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e2e:	4973      	ldr	r1, [pc, #460]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	654b      	str	r3, [r1, #84]	; 0x54
 8007e34:	e001      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d029      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e52:	d007      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007e54:	e00f      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e56:	4b69      	ldr	r3, [pc, #420]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	4a68      	ldr	r2, [pc, #416]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e62:	e00b      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3304      	adds	r3, #4
 8007e68:	2102      	movs	r1, #2
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fb86 	bl	800857c <RCCEx_PLL2_Config>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e74:	e002      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	75fb      	strb	r3, [r7, #23]
      break;
 8007e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d109      	bne.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e82:	4b5e      	ldr	r3, [pc, #376]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8e:	495b      	ldr	r1, [pc, #364]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e94:	e001      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3324      	adds	r3, #36	; 0x24
 8007eaa:	2102      	movs	r1, #2
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fc17 	bl	80086e0 <RCCEx_PLL3_Config>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d030      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ed0:	d017      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ed6:	d811      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007edc:	d013      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee2:	d80b      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d010      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eec:	d106      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eee:	4b43      	ldr	r3, [pc, #268]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	4a42      	ldr	r2, [pc, #264]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007efa:	e007      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	75fb      	strb	r3, [r7, #23]
      break;
 8007f00:	e004      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007f02:	bf00      	nop
 8007f04:	e002      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007f06:	bf00      	nop
 8007f08:	e000      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f12:	4b3a      	ldr	r3, [pc, #232]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1e:	4937      	ldr	r1, [pc, #220]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	654b      	str	r3, [r1, #84]	; 0x54
 8007f24:	e001      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d008      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f36:	4b31      	ldr	r3, [pc, #196]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f42:	492e      	ldr	r1, [pc, #184]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d009      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f54:	4b29      	ldr	r3, [pc, #164]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f62:	4926      	ldr	r1, [pc, #152]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d008      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f74:	4b21      	ldr	r3, [pc, #132]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f80:	491e      	ldr	r1, [pc, #120]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00d      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f92:	4b1a      	ldr	r3, [pc, #104]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	4a19      	ldr	r2, [pc, #100]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f9c:	6113      	str	r3, [r2, #16]
 8007f9e:	4b17      	ldr	r3, [pc, #92]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fa0:	691a      	ldr	r2, [r3, #16]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007fa8:	4914      	ldr	r1, [pc, #80]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da08      	bge.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007fb6:	4b11      	ldr	r3, [pc, #68]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc2:	490e      	ldr	r1, [pc, #56]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d009      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fd4:	4b09      	ldr	r3, [pc, #36]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe2:	4906      	ldr	r1, [pc, #24]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007fe8:	7dbb      	ldrb	r3, [r7, #22]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e000      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	58024400 	.word	0x58024400

08008000 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008004:	f7ff f81e 	bl	8007044 <HAL_RCC_GetHCLKFreq>
 8008008:	4602      	mov	r2, r0
 800800a:	4b06      	ldr	r3, [pc, #24]	; (8008024 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	091b      	lsrs	r3, r3, #4
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	4904      	ldr	r1, [pc, #16]	; (8008028 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008016:	5ccb      	ldrb	r3, [r1, r3]
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008020:	4618      	mov	r0, r3
 8008022:	bd80      	pop	{r7, pc}
 8008024:	58024400 	.word	0x58024400
 8008028:	0800edc0 	.word	0x0800edc0

0800802c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800802c:	b480      	push	{r7}
 800802e:	b089      	sub	sp, #36	; 0x24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008034:	4ba1      	ldr	r3, [pc, #644]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	f003 0303 	and.w	r3, r3, #3
 800803c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800803e:	4b9f      	ldr	r3, [pc, #636]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	0b1b      	lsrs	r3, r3, #12
 8008044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008048:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800804a:	4b9c      	ldr	r3, [pc, #624]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800804c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804e:	091b      	lsrs	r3, r3, #4
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008056:	4b99      	ldr	r3, [pc, #612]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805a:	08db      	lsrs	r3, r3, #3
 800805c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	fb02 f303 	mul.w	r3, r2, r3
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8111 	beq.w	800829c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	2b02      	cmp	r3, #2
 800807e:	f000 8083 	beq.w	8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b02      	cmp	r3, #2
 8008086:	f200 80a1 	bhi.w	80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d056      	beq.n	8008144 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008096:	e099      	b.n	80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008098:	4b88      	ldr	r3, [pc, #544]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d02d      	beq.n	8008100 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080a4:	4b85      	ldr	r3, [pc, #532]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	08db      	lsrs	r3, r3, #3
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	4a84      	ldr	r2, [pc, #528]	; (80082c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
 80080b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	ee07 3a90 	vmov	s15, r3
 80080bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ce:	4b7b      	ldr	r3, [pc, #492]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080de:	ed97 6a03 	vldr	s12, [r7, #12]
 80080e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080fe:	e087      	b.n	8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800810e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008112:	4b6a      	ldr	r3, [pc, #424]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008122:	ed97 6a03 	vldr	s12, [r7, #12]
 8008126:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800812a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008142:	e065      	b.n	8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008156:	4b59      	ldr	r3, [pc, #356]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008166:	ed97 6a03 	vldr	s12, [r7, #12]
 800816a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800816e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008186:	e043      	b.n	8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008192:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819a:	4b48      	ldr	r3, [pc, #288]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081ca:	e021      	b.n	8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081de:	4b37      	ldr	r3, [pc, #220]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80081f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800820e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008210:	4b2a      	ldr	r3, [pc, #168]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008214:	0a5b      	lsrs	r3, r3, #9
 8008216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800822a:	edd7 6a07 	vldr	s13, [r7, #28]
 800822e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008236:	ee17 2a90 	vmov	r2, s15
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800823e:	4b1f      	ldr	r3, [pc, #124]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	0c1b      	lsrs	r3, r3, #16
 8008244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008248:	ee07 3a90 	vmov	s15, r3
 800824c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008254:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008258:	edd7 6a07 	vldr	s13, [r7, #28]
 800825c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008264:	ee17 2a90 	vmov	r2, s15
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800826c:	4b13      	ldr	r3, [pc, #76]	; (80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008270:	0e1b      	lsrs	r3, r3, #24
 8008272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008286:	edd7 6a07 	vldr	s13, [r7, #28]
 800828a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800828e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008292:	ee17 2a90 	vmov	r2, s15
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800829a:	e008      	b.n	80082ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	609a      	str	r2, [r3, #8]
}
 80082ae:	bf00      	nop
 80082b0:	3724      	adds	r7, #36	; 0x24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400
 80082c0:	03d09000 	.word	0x03d09000
 80082c4:	46000000 	.word	0x46000000
 80082c8:	4c742400 	.word	0x4c742400
 80082cc:	4a742400 	.word	0x4a742400
 80082d0:	4bbebc20 	.word	0x4bbebc20

080082d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b089      	sub	sp, #36	; 0x24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082dc:	4ba1      	ldr	r3, [pc, #644]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80082e6:	4b9f      	ldr	r3, [pc, #636]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	0d1b      	lsrs	r3, r3, #20
 80082ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082f2:	4b9c      	ldr	r3, [pc, #624]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	0a1b      	lsrs	r3, r3, #8
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80082fe:	4b99      	ldr	r3, [pc, #612]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008302:	08db      	lsrs	r3, r3, #3
 8008304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 8111 	beq.w	8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b02      	cmp	r3, #2
 8008326:	f000 8083 	beq.w	8008430 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b02      	cmp	r3, #2
 800832e:	f200 80a1 	bhi.w	8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d056      	beq.n	80083ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800833e:	e099      	b.n	8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008340:	4b88      	ldr	r3, [pc, #544]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d02d      	beq.n	80083a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800834c:	4b85      	ldr	r3, [pc, #532]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	08db      	lsrs	r3, r3, #3
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	4a84      	ldr	r2, [pc, #528]	; (8008568 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008358:	fa22 f303 	lsr.w	r3, r2, r3
 800835c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	ee07 3a90 	vmov	s15, r3
 8008364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008376:	4b7b      	ldr	r3, [pc, #492]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008386:	ed97 6a03 	vldr	s12, [r7, #12]
 800838a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800838e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800839a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80083a6:	e087      	b.n	80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008570 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80083b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ba:	4b6a      	ldr	r3, [pc, #424]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083ea:	e065      	b.n	80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083fe:	4b59      	ldr	r3, [pc, #356]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008412:	eddf 5a56 	vldr	s11, [pc, #344]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800841e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800842e:	e043      	b.n	80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800843e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008442:	4b48      	ldr	r3, [pc, #288]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008452:	ed97 6a03 	vldr	s12, [r7, #12]
 8008456:	eddf 5a45 	vldr	s11, [pc, #276]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800845a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800845e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800846e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008472:	e021      	b.n	80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008486:	4b37      	ldr	r3, [pc, #220]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008496:	ed97 6a03 	vldr	s12, [r7, #12]
 800849a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800856c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800849e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80084b8:	4b2a      	ldr	r3, [pc, #168]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	0a5b      	lsrs	r3, r3, #9
 80084be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084de:	ee17 2a90 	vmov	r2, s15
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80084e6:	4b1f      	ldr	r3, [pc, #124]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	0c1b      	lsrs	r3, r3, #16
 80084ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008500:	edd7 6a07 	vldr	s13, [r7, #28]
 8008504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800850c:	ee17 2a90 	vmov	r2, s15
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008514:	4b13      	ldr	r3, [pc, #76]	; (8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	0e1b      	lsrs	r3, r3, #24
 800851a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800852a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800852e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800853a:	ee17 2a90 	vmov	r2, s15
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008542:	e008      	b.n	8008556 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	609a      	str	r2, [r3, #8]
}
 8008556:	bf00      	nop
 8008558:	3724      	adds	r7, #36	; 0x24
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	58024400 	.word	0x58024400
 8008568:	03d09000 	.word	0x03d09000
 800856c:	46000000 	.word	0x46000000
 8008570:	4c742400 	.word	0x4c742400
 8008574:	4a742400 	.word	0x4a742400
 8008578:	4bbebc20 	.word	0x4bbebc20

0800857c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800858a:	4b53      	ldr	r3, [pc, #332]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 800858c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	2b03      	cmp	r3, #3
 8008594:	d101      	bne.n	800859a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e099      	b.n	80086ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800859a:	4b4f      	ldr	r3, [pc, #316]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a4e      	ldr	r2, [pc, #312]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 80085a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085a6:	f7fa fc6f 	bl	8002e88 <HAL_GetTick>
 80085aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085ac:	e008      	b.n	80085c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80085ae:	f7fa fc6b 	bl	8002e88 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d901      	bls.n	80085c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e086      	b.n	80086ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085c0:	4b45      	ldr	r3, [pc, #276]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1f0      	bne.n	80085ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80085cc:	4b42      	ldr	r3, [pc, #264]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	031b      	lsls	r3, r3, #12
 80085da:	493f      	ldr	r1, [pc, #252]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	628b      	str	r3, [r1, #40]	; 0x28
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	025b      	lsls	r3, r3, #9
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	431a      	orrs	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	041b      	lsls	r3, r3, #16
 80085fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008602:	431a      	orrs	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	3b01      	subs	r3, #1
 800860a:	061b      	lsls	r3, r3, #24
 800860c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008610:	4931      	ldr	r1, [pc, #196]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008612:	4313      	orrs	r3, r2
 8008614:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008616:	4b30      	ldr	r3, [pc, #192]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	492d      	ldr	r1, [pc, #180]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008624:	4313      	orrs	r3, r2
 8008626:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008628:	4b2b      	ldr	r3, [pc, #172]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 800862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862c:	f023 0220 	bic.w	r2, r3, #32
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	4928      	ldr	r1, [pc, #160]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008636:	4313      	orrs	r3, r2
 8008638:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800863a:	4b27      	ldr	r3, [pc, #156]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	4a26      	ldr	r2, [pc, #152]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008640:	f023 0310 	bic.w	r3, r3, #16
 8008644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008646:	4b24      	ldr	r3, [pc, #144]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800864a:	4b24      	ldr	r3, [pc, #144]	; (80086dc <RCCEx_PLL2_Config+0x160>)
 800864c:	4013      	ands	r3, r2
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	69d2      	ldr	r2, [r2, #28]
 8008652:	00d2      	lsls	r2, r2, #3
 8008654:	4920      	ldr	r1, [pc, #128]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008656:	4313      	orrs	r3, r2
 8008658:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800865a:	4b1f      	ldr	r3, [pc, #124]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 800865c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865e:	4a1e      	ldr	r2, [pc, #120]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008660:	f043 0310 	orr.w	r3, r3, #16
 8008664:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800866c:	4b1a      	ldr	r3, [pc, #104]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	4a19      	ldr	r2, [pc, #100]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008676:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008678:	e00f      	b.n	800869a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d106      	bne.n	800868e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008680:	4b15      	ldr	r3, [pc, #84]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	4a14      	ldr	r2, [pc, #80]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800868a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800868c:	e005      	b.n	800869a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800868e:	4b12      	ldr	r3, [pc, #72]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	4a11      	ldr	r2, [pc, #68]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 8008694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008698:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800869a:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a0e      	ldr	r2, [pc, #56]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 80086a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086a6:	f7fa fbef 	bl	8002e88 <HAL_GetTick>
 80086aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086ac:	e008      	b.n	80086c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80086ae:	f7fa fbeb 	bl	8002e88 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d901      	bls.n	80086c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e006      	b.n	80086ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086c0:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <RCCEx_PLL2_Config+0x15c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d0f0      	beq.n	80086ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	58024400 	.word	0x58024400
 80086dc:	ffff0007 	.word	0xffff0007

080086e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086ee:	4b53      	ldr	r3, [pc, #332]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d101      	bne.n	80086fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e099      	b.n	8008832 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80086fe:	4b4f      	ldr	r3, [pc, #316]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a4e      	ldr	r2, [pc, #312]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 8008704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800870a:	f7fa fbbd 	bl	8002e88 <HAL_GetTick>
 800870e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008710:	e008      	b.n	8008724 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008712:	f7fa fbb9 	bl	8002e88 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d901      	bls.n	8008724 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e086      	b.n	8008832 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008724:	4b45      	ldr	r3, [pc, #276]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f0      	bne.n	8008712 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008730:	4b42      	ldr	r3, [pc, #264]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 8008732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008734:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	051b      	lsls	r3, r3, #20
 800873e:	493f      	ldr	r1, [pc, #252]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 8008740:	4313      	orrs	r3, r2
 8008742:	628b      	str	r3, [r1, #40]	; 0x28
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	3b01      	subs	r3, #1
 800874a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	3b01      	subs	r3, #1
 8008754:	025b      	lsls	r3, r3, #9
 8008756:	b29b      	uxth	r3, r3
 8008758:	431a      	orrs	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	3b01      	subs	r3, #1
 8008760:	041b      	lsls	r3, r3, #16
 8008762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008766:	431a      	orrs	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	3b01      	subs	r3, #1
 800876e:	061b      	lsls	r3, r3, #24
 8008770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008774:	4931      	ldr	r1, [pc, #196]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 8008776:	4313      	orrs	r3, r2
 8008778:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800877a:	4b30      	ldr	r3, [pc, #192]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	492d      	ldr	r1, [pc, #180]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 8008788:	4313      	orrs	r3, r2
 800878a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800878c:	4b2b      	ldr	r3, [pc, #172]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	4928      	ldr	r1, [pc, #160]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 800879a:	4313      	orrs	r3, r2
 800879c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800879e:	4b27      	ldr	r3, [pc, #156]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	4a26      	ldr	r2, [pc, #152]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087aa:	4b24      	ldr	r3, [pc, #144]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ae:	4b24      	ldr	r3, [pc, #144]	; (8008840 <RCCEx_PLL3_Config+0x160>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	69d2      	ldr	r2, [r2, #28]
 80087b6:	00d2      	lsls	r2, r2, #3
 80087b8:	4920      	ldr	r1, [pc, #128]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80087be:	4b1f      	ldr	r3, [pc, #124]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	4a1e      	ldr	r2, [pc, #120]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d106      	bne.n	80087de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80087d0:	4b1a      	ldr	r3, [pc, #104]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	4a19      	ldr	r2, [pc, #100]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087dc:	e00f      	b.n	80087fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d106      	bne.n	80087f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80087e4:	4b15      	ldr	r3, [pc, #84]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	4a14      	ldr	r2, [pc, #80]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087f0:	e005      	b.n	80087fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80087f2:	4b12      	ldr	r3, [pc, #72]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	4a11      	ldr	r2, [pc, #68]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 80087f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80087fe:	4b0f      	ldr	r3, [pc, #60]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a0e      	ldr	r2, [pc, #56]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 8008804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800880a:	f7fa fb3d 	bl	8002e88 <HAL_GetTick>
 800880e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008810:	e008      	b.n	8008824 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008812:	f7fa fb39 	bl	8002e88 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e006      	b.n	8008832 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008824:	4b05      	ldr	r3, [pc, #20]	; (800883c <RCCEx_PLL3_Config+0x15c>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0f0      	beq.n	8008812 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	58024400 	.word	0x58024400
 8008840:	ffff0007 	.word	0xffff0007

08008844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e049      	b.n	80088ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d106      	bne.n	8008870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f841 	bl	80088f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	4619      	mov	r1, r3
 8008882:	4610      	mov	r0, r2
 8008884:	f000 fa00 	bl	8008c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
	...

08008908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b01      	cmp	r3, #1
 800891a:	d001      	beq.n	8008920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e054      	b.n	80089ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0201 	orr.w	r2, r2, #1
 8008936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a26      	ldr	r2, [pc, #152]	; (80089d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d022      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800894a:	d01d      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a22      	ldr	r2, [pc, #136]	; (80089dc <HAL_TIM_Base_Start_IT+0xd4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d018      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a21      	ldr	r2, [pc, #132]	; (80089e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d013      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a1f      	ldr	r2, [pc, #124]	; (80089e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d00e      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a1e      	ldr	r2, [pc, #120]	; (80089e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d009      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a1c      	ldr	r2, [pc, #112]	; (80089ec <HAL_TIM_Base_Start_IT+0xe4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d004      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a1b      	ldr	r2, [pc, #108]	; (80089f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d115      	bne.n	80089b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	4b19      	ldr	r3, [pc, #100]	; (80089f4 <HAL_TIM_Base_Start_IT+0xec>)
 8008990:	4013      	ands	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b06      	cmp	r3, #6
 8008998:	d015      	beq.n	80089c6 <HAL_TIM_Base_Start_IT+0xbe>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a0:	d011      	beq.n	80089c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f042 0201 	orr.w	r2, r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b2:	e008      	b.n	80089c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0201 	orr.w	r2, r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e000      	b.n	80089c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	40010000 	.word	0x40010000
 80089dc:	40000400 	.word	0x40000400
 80089e0:	40000800 	.word	0x40000800
 80089e4:	40000c00 	.word	0x40000c00
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40001800 	.word	0x40001800
 80089f0:	40014000 	.word	0x40014000
 80089f4:	00010007 	.word	0x00010007

080089f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d122      	bne.n	8008a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d11b      	bne.n	8008a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0202 	mvn.w	r2, #2
 8008a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f905 	bl	8008c4a <HAL_TIM_IC_CaptureCallback>
 8008a40:	e005      	b.n	8008a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f8f7 	bl	8008c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f908 	bl	8008c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d122      	bne.n	8008aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d11b      	bne.n	8008aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f06f 0204 	mvn.w	r2, #4
 8008a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f8db 	bl	8008c4a <HAL_TIM_IC_CaptureCallback>
 8008a94:	e005      	b.n	8008aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f8cd 	bl	8008c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f8de 	bl	8008c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	f003 0308 	and.w	r3, r3, #8
 8008ab2:	2b08      	cmp	r3, #8
 8008ab4:	d122      	bne.n	8008afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d11b      	bne.n	8008afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f06f 0208 	mvn.w	r2, #8
 8008acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2204      	movs	r2, #4
 8008ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f8b1 	bl	8008c4a <HAL_TIM_IC_CaptureCallback>
 8008ae8:	e005      	b.n	8008af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f8a3 	bl	8008c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f8b4 	bl	8008c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0310 	and.w	r3, r3, #16
 8008b06:	2b10      	cmp	r3, #16
 8008b08:	d122      	bne.n	8008b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b10      	cmp	r3, #16
 8008b16:	d11b      	bne.n	8008b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f06f 0210 	mvn.w	r2, #16
 8008b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2208      	movs	r2, #8
 8008b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f887 	bl	8008c4a <HAL_TIM_IC_CaptureCallback>
 8008b3c:	e005      	b.n	8008b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f879 	bl	8008c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f88a 	bl	8008c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d10e      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d107      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f06f 0201 	mvn.w	r2, #1
 8008b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7f8 fdfc 	bl	8001774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b86:	2b80      	cmp	r3, #128	; 0x80
 8008b88:	d10e      	bne.n	8008ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b94:	2b80      	cmp	r3, #128	; 0x80
 8008b96:	d107      	bne.n	8008ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f914 	bl	8008dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb6:	d10e      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d107      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f907 	bl	8008de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be0:	2b40      	cmp	r3, #64	; 0x40
 8008be2:	d10e      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bee:	2b40      	cmp	r3, #64	; 0x40
 8008bf0:	d107      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f838 	bl	8008c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d10e      	bne.n	8008c2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d107      	bne.n	8008c2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f06f 0220 	mvn.w	r2, #32
 8008c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f8c7 	bl	8008dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c3e:	bf00      	nop
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a40      	ldr	r2, [pc, #256]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d013      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca6:	d00f      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a3d      	ldr	r2, [pc, #244]	; (8008da0 <TIM_Base_SetConfig+0x118>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00b      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a3c      	ldr	r2, [pc, #240]	; (8008da4 <TIM_Base_SetConfig+0x11c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d007      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a3b      	ldr	r2, [pc, #236]	; (8008da8 <TIM_Base_SetConfig+0x120>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a3a      	ldr	r2, [pc, #232]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d108      	bne.n	8008cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a2f      	ldr	r2, [pc, #188]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d01f      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce8:	d01b      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a2c      	ldr	r2, [pc, #176]	; (8008da0 <TIM_Base_SetConfig+0x118>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d017      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a2b      	ldr	r2, [pc, #172]	; (8008da4 <TIM_Base_SetConfig+0x11c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d013      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a2a      	ldr	r2, [pc, #168]	; (8008da8 <TIM_Base_SetConfig+0x120>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00f      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a29      	ldr	r2, [pc, #164]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00b      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a28      	ldr	r2, [pc, #160]	; (8008db0 <TIM_Base_SetConfig+0x128>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d007      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a27      	ldr	r2, [pc, #156]	; (8008db4 <TIM_Base_SetConfig+0x12c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d003      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a26      	ldr	r2, [pc, #152]	; (8008db8 <TIM_Base_SetConfig+0x130>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d108      	bne.n	8008d34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a10      	ldr	r2, [pc, #64]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00f      	beq.n	8008d80 <TIM_Base_SetConfig+0xf8>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a12      	ldr	r2, [pc, #72]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d00b      	beq.n	8008d80 <TIM_Base_SetConfig+0xf8>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a11      	ldr	r2, [pc, #68]	; (8008db0 <TIM_Base_SetConfig+0x128>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d007      	beq.n	8008d80 <TIM_Base_SetConfig+0xf8>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a10      	ldr	r2, [pc, #64]	; (8008db4 <TIM_Base_SetConfig+0x12c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d003      	beq.n	8008d80 <TIM_Base_SetConfig+0xf8>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a0f      	ldr	r2, [pc, #60]	; (8008db8 <TIM_Base_SetConfig+0x130>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d103      	bne.n	8008d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	615a      	str	r2, [r3, #20]
}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	40000400 	.word	0x40000400
 8008da4:	40000800 	.word	0x40000800
 8008da8:	40000c00 	.word	0x40000c00
 8008dac:	40010400 	.word	0x40010400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40014400 	.word	0x40014400
 8008db8:	40014800 	.word	0x40014800

08008dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e042      	b.n	8008e90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d106      	bne.n	8008e22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7f9 fc31 	bl	8002684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2224      	movs	r2, #36	; 0x24
 8008e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0201 	bic.w	r2, r2, #1
 8008e38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fd9a 	bl	8009974 <UART_SetConfig>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e022      	b.n	8008e90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 faee 	bl	800a434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689a      	ldr	r2, [r3, #8]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f042 0201 	orr.w	r2, r2, #1
 8008e86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 fb75 	bl	800a578 <UART_CheckIdleState>
 8008e8e:	4603      	mov	r3, r0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08a      	sub	sp, #40	; 0x28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	d17a      	bne.n	8008fa6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <HAL_UART_Transmit_DMA+0x24>
 8008eb6:	88fb      	ldrh	r3, [r7, #6]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e073      	b.n	8008fa8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d101      	bne.n	8008ece <HAL_UART_Transmit_DMA+0x36>
 8008eca:	2302      	movs	r3, #2
 8008ecc:	e06c      	b.n	8008fa8 <HAL_UART_Transmit_DMA+0x110>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	88fa      	ldrh	r2, [r7, #6]
 8008ee0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	88fa      	ldrh	r2, [r7, #6]
 8008ee8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2221      	movs	r2, #33	; 0x21
 8008ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d02c      	beq.n	8008f5e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f08:	4a29      	ldr	r2, [pc, #164]	; (8008fb0 <HAL_UART_Transmit_DMA+0x118>)
 8008f0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f10:	4a28      	ldr	r2, [pc, #160]	; (8008fb4 <HAL_UART_Transmit_DMA+0x11c>)
 8008f12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f18:	4a27      	ldr	r2, [pc, #156]	; (8008fb8 <HAL_UART_Transmit_DMA+0x120>)
 8008f1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f20:	2200      	movs	r2, #0
 8008f22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3328      	adds	r3, #40	; 0x28
 8008f34:	461a      	mov	r2, r3
 8008f36:	88fb      	ldrh	r3, [r7, #6]
 8008f38:	f7fa fbfa 	bl	8003730 <HAL_DMA_Start_IT>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00d      	beq.n	8008f5e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2210      	movs	r2, #16
 8008f46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e024      	b.n	8008fa8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2240      	movs	r2, #64	; 0x40
 8008f64:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3308      	adds	r3, #8
 8008f74:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8e:	623a      	str	r2, [r7, #32]
 8008f90:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	69f9      	ldr	r1, [r7, #28]
 8008f94:	6a3a      	ldr	r2, [r7, #32]
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e5      	bne.n	8008f6e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e000      	b.n	8008fa8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008fa6:	2302      	movs	r3, #2
  }
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3728      	adds	r7, #40	; 0x28
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	0800aa41 	.word	0x0800aa41
 8008fb4:	0800aad7 	.word	0x0800aad7
 8008fb8:	0800ac4d 	.word	0x0800ac4d

08008fbc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08a      	sub	sp, #40	; 0x28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	d142      	bne.n	800905a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <HAL_UART_Receive_DMA+0x24>
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e03b      	b.n	800905c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <HAL_UART_Receive_DMA+0x36>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e034      	b.n	800905c <HAL_UART_Receive_DMA+0xa0>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a17      	ldr	r2, [pc, #92]	; (8009064 <HAL_UART_Receive_DMA+0xa8>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d01f      	beq.n	800904a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d018      	beq.n	800904a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	613b      	str	r3, [r7, #16]
   return(result);
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	623b      	str	r3, [r7, #32]
 8009038:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	69f9      	ldr	r1, [r7, #28]
 800903c:	6a3a      	ldr	r2, [r7, #32]
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	61bb      	str	r3, [r7, #24]
   return(result);
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e6      	bne.n	8009018 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800904a:	88fb      	ldrh	r3, [r7, #6]
 800904c:	461a      	mov	r2, r3
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f001 fba5 	bl	800a7a0 <UART_Start_Receive_DMA>
 8009056:	4603      	mov	r3, r0
 8009058:	e000      	b.n	800905c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800905a:	2302      	movs	r3, #2
  }
}
 800905c:	4618      	mov	r0, r3
 800905e:	3728      	adds	r7, #40	; 0x28
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	58000c00 	.word	0x58000c00

08009068 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b090      	sub	sp, #64	; 0x40
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800907e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800908a:	2b80      	cmp	r3, #128	; 0x80
 800908c:	d139      	bne.n	8009102 <HAL_UART_DMAStop+0x9a>
 800908e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009090:	2b21      	cmp	r3, #33	; 0x21
 8009092:	d136      	bne.n	8009102 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3308      	adds	r3, #8
 800909a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	e853 3f00 	ldrex	r3, [r3]
 80090a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090aa:	637b      	str	r3, [r7, #52]	; 0x34
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3308      	adds	r3, #8
 80090b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090bc:	e841 2300 	strex	r3, r2, [r1]
 80090c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1e5      	bne.n	8009094 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d015      	beq.n	80090fc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fa fd95 	bl	8003c04 <HAL_DMA_Abort>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00d      	beq.n	80090fc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fc fa27 	bl	8005538 <HAL_DMA_GetError>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	d105      	bne.n	80090fc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2210      	movs	r2, #16
 80090f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e044      	b.n	8009186 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 fbf7 	bl	800a8f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910c:	2b40      	cmp	r3, #64	; 0x40
 800910e:	d139      	bne.n	8009184 <HAL_UART_DMAStop+0x11c>
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	2b22      	cmp	r3, #34	; 0x22
 8009114:	d136      	bne.n	8009184 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3308      	adds	r3, #8
 800911c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	e853 3f00 	ldrex	r3, [r3]
 8009124:	60bb      	str	r3, [r7, #8]
   return(result);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800912c:	633b      	str	r3, [r7, #48]	; 0x30
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3308      	adds	r3, #8
 8009134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009136:	61ba      	str	r2, [r7, #24]
 8009138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913a:	6979      	ldr	r1, [r7, #20]
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	e841 2300 	strex	r3, r2, [r1]
 8009142:	613b      	str	r3, [r7, #16]
   return(result);
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1e5      	bne.n	8009116 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d015      	beq.n	800917e <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009156:	4618      	mov	r0, r3
 8009158:	f7fa fd54 	bl	8003c04 <HAL_DMA_Abort>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00d      	beq.n	800917e <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009166:	4618      	mov	r0, r3
 8009168:	f7fc f9e6 	bl	8005538 <HAL_DMA_GetError>
 800916c:	4603      	mov	r3, r0
 800916e:	2b20      	cmp	r3, #32
 8009170:	d105      	bne.n	800917e <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2210      	movs	r2, #16
 8009176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e003      	b.n	8009186 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 fbf8 	bl	800a974 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3740      	adds	r7, #64	; 0x40
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
	...

08009190 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b0ba      	sub	sp, #232	; 0xe8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80091ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80091be:	4013      	ands	r3, r2
 80091c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80091c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d11b      	bne.n	8009204 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d015      	beq.n	8009204 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80091d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091dc:	f003 0320 	and.w	r3, r3, #32
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d105      	bne.n	80091f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 835a 	beq.w	80098ae <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
      }
      return;
 8009202:	e354      	b.n	80098ae <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 811f 	beq.w	800944c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800920e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009212:	4b8b      	ldr	r3, [pc, #556]	; (8009440 <HAL_UART_IRQHandler+0x2b0>)
 8009214:	4013      	ands	r3, r2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d106      	bne.n	8009228 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800921a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800921e:	4b89      	ldr	r3, [pc, #548]	; (8009444 <HAL_UART_IRQHandler+0x2b4>)
 8009220:	4013      	ands	r3, r2
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 8112 	beq.w	800944c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d011      	beq.n	8009258 <HAL_UART_IRQHandler+0xc8>
 8009234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2201      	movs	r2, #1
 8009246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800924e:	f043 0201 	orr.w	r2, r3, #1
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d011      	beq.n	8009288 <HAL_UART_IRQHandler+0xf8>
 8009264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00b      	beq.n	8009288 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2202      	movs	r2, #2
 8009276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800927e:	f043 0204 	orr.w	r2, r3, #4
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b00      	cmp	r3, #0
 8009292:	d011      	beq.n	80092b8 <HAL_UART_IRQHandler+0x128>
 8009294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00b      	beq.n	80092b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2204      	movs	r2, #4
 80092a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ae:	f043 0202 	orr.w	r2, r3, #2
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092bc:	f003 0308 	and.w	r3, r3, #8
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d017      	beq.n	80092f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d105      	bne.n	80092dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80092d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80092d4:	4b5a      	ldr	r3, [pc, #360]	; (8009440 <HAL_UART_IRQHandler+0x2b0>)
 80092d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2208      	movs	r2, #8
 80092e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ea:	f043 0208 	orr.w	r2, r3, #8
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d012      	beq.n	8009326 <HAL_UART_IRQHandler+0x196>
 8009300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009304:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00c      	beq.n	8009326 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009314:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800931c:	f043 0220 	orr.w	r2, r3, #32
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 82c0 	beq.w	80098b2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d013      	beq.n	8009366 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800933e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009342:	f003 0320 	and.w	r3, r3, #32
 8009346:	2b00      	cmp	r3, #0
 8009348:	d105      	bne.n	8009356 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800934a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800934e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937a:	2b40      	cmp	r3, #64	; 0x40
 800937c:	d005      	beq.n	800938a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800937e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009382:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009386:	2b00      	cmp	r3, #0
 8009388:	d04f      	beq.n	800942a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 faf2 	bl	800a974 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939a:	2b40      	cmp	r3, #64	; 0x40
 800939c:	d141      	bne.n	8009422 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3308      	adds	r3, #8
 80093a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80093b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3308      	adds	r3, #8
 80093c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80093ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1d9      	bne.n	800939e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d013      	beq.n	800941a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093f6:	4a14      	ldr	r2, [pc, #80]	; (8009448 <HAL_UART_IRQHandler+0x2b8>)
 80093f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fa ff1e 	bl	8004240 <HAL_DMA_Abort_IT>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d017      	beq.n	800943a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800940e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009418:	e00f      	b.n	800943a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa7e 	bl	800991c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009420:	e00b      	b.n	800943a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa7a 	bl	800991c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009428:	e007      	b.n	800943a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fa76 	bl	800991c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009438:	e23b      	b.n	80098b2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800943a:	bf00      	nop
    return;
 800943c:	e239      	b.n	80098b2 <HAL_UART_IRQHandler+0x722>
 800943e:	bf00      	nop
 8009440:	10000001 	.word	0x10000001
 8009444:	04000120 	.word	0x04000120
 8009448:	0800accd 	.word	0x0800accd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009450:	2b01      	cmp	r3, #1
 8009452:	f040 81ce 	bne.w	80097f2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800945a:	f003 0310 	and.w	r3, r3, #16
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 81c7 	beq.w	80097f2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009468:	f003 0310 	and.w	r3, r3, #16
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 81c0 	beq.w	80097f2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2210      	movs	r2, #16
 8009478:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009484:	2b40      	cmp	r3, #64	; 0x40
 8009486:	f040 813b 	bne.w	8009700 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a8b      	ldr	r2, [pc, #556]	; (80096c0 <HAL_UART_IRQHandler+0x530>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d059      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a89      	ldr	r2, [pc, #548]	; (80096c4 <HAL_UART_IRQHandler+0x534>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d053      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a87      	ldr	r2, [pc, #540]	; (80096c8 <HAL_UART_IRQHandler+0x538>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d04d      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a85      	ldr	r2, [pc, #532]	; (80096cc <HAL_UART_IRQHandler+0x53c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d047      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a83      	ldr	r2, [pc, #524]	; (80096d0 <HAL_UART_IRQHandler+0x540>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d041      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a81      	ldr	r2, [pc, #516]	; (80096d4 <HAL_UART_IRQHandler+0x544>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d03b      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a7f      	ldr	r2, [pc, #508]	; (80096d8 <HAL_UART_IRQHandler+0x548>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d035      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a7d      	ldr	r2, [pc, #500]	; (80096dc <HAL_UART_IRQHandler+0x54c>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d02f      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a7b      	ldr	r2, [pc, #492]	; (80096e0 <HAL_UART_IRQHandler+0x550>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d029      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a79      	ldr	r2, [pc, #484]	; (80096e4 <HAL_UART_IRQHandler+0x554>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d023      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a77      	ldr	r2, [pc, #476]	; (80096e8 <HAL_UART_IRQHandler+0x558>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d01d      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a75      	ldr	r2, [pc, #468]	; (80096ec <HAL_UART_IRQHandler+0x55c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d017      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a73      	ldr	r2, [pc, #460]	; (80096f0 <HAL_UART_IRQHandler+0x560>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d011      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a71      	ldr	r2, [pc, #452]	; (80096f4 <HAL_UART_IRQHandler+0x564>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d00b      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a6f      	ldr	r2, [pc, #444]	; (80096f8 <HAL_UART_IRQHandler+0x568>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d005      	beq.n	800954a <HAL_UART_IRQHandler+0x3ba>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a6d      	ldr	r2, [pc, #436]	; (80096fc <HAL_UART_IRQHandler+0x56c>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d105      	bne.n	8009556 <HAL_UART_IRQHandler+0x3c6>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	b29b      	uxth	r3, r3
 8009554:	e004      	b.n	8009560 <HAL_UART_IRQHandler+0x3d0>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	b29b      	uxth	r3, r3
 8009560:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009564:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 81a4 	beq.w	80098b6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009574:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009578:	429a      	cmp	r2, r3
 800957a:	f080 819c 	bcs.w	80098b6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009584:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009592:	f000 8086 	beq.w	80096a2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80095aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095c4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80095cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1da      	bne.n	8009596 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3308      	adds	r3, #8
 80095e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095ea:	e853 3f00 	ldrex	r3, [r3]
 80095ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095f2:	f023 0301 	bic.w	r3, r3, #1
 80095f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3308      	adds	r3, #8
 8009600:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009604:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009608:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800960c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e1      	bne.n	80095e0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3308      	adds	r3, #8
 8009622:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800962c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800962e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009640:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009642:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009646:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800964e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e3      	bne.n	800961c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2220      	movs	r2, #32
 8009658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800966a:	e853 3f00 	ldrex	r3, [r3]
 800966e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009672:	f023 0310 	bic.w	r3, r3, #16
 8009676:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009684:	65bb      	str	r3, [r7, #88]	; 0x58
 8009686:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800968a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e4      	bne.n	8009662 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800969c:	4618      	mov	r0, r3
 800969e:	f7fa fab1 	bl	8003c04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f93a 	bl	8009930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096bc:	e0fb      	b.n	80098b6 <HAL_UART_IRQHandler+0x726>
 80096be:	bf00      	nop
 80096c0:	40020010 	.word	0x40020010
 80096c4:	40020028 	.word	0x40020028
 80096c8:	40020040 	.word	0x40020040
 80096cc:	40020058 	.word	0x40020058
 80096d0:	40020070 	.word	0x40020070
 80096d4:	40020088 	.word	0x40020088
 80096d8:	400200a0 	.word	0x400200a0
 80096dc:	400200b8 	.word	0x400200b8
 80096e0:	40020410 	.word	0x40020410
 80096e4:	40020428 	.word	0x40020428
 80096e8:	40020440 	.word	0x40020440
 80096ec:	40020458 	.word	0x40020458
 80096f0:	40020470 	.word	0x40020470
 80096f4:	40020488 	.word	0x40020488
 80096f8:	400204a0 	.word	0x400204a0
 80096fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800970c:	b29b      	uxth	r3, r3
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800971a:	b29b      	uxth	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 80cc 	beq.w	80098ba <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 80c7 	beq.w	80098ba <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800973a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	461a      	mov	r2, r3
 800974a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800974e:	647b      	str	r3, [r7, #68]	; 0x44
 8009750:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800975c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e4      	bne.n	800972c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	623b      	str	r3, [r7, #32]
   return(result);
 8009772:	6a3a      	ldr	r2, [r7, #32]
 8009774:	4b54      	ldr	r3, [pc, #336]	; (80098c8 <HAL_UART_IRQHandler+0x738>)
 8009776:	4013      	ands	r3, r2
 8009778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009786:	633a      	str	r2, [r7, #48]	; 0x30
 8009788:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800978c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800978e:	e841 2300 	strex	r3, r2, [r1]
 8009792:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1e3      	bne.n	8009762 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2220      	movs	r2, #32
 800979e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	e853 3f00 	ldrex	r3, [r3]
 80097ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 0310 	bic.w	r3, r3, #16
 80097c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097d0:	61fb      	str	r3, [r7, #28]
 80097d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	69b9      	ldr	r1, [r7, #24]
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	617b      	str	r3, [r7, #20]
   return(result);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e4      	bne.n	80097ae <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f8a0 	bl	8009930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097f0:	e063      	b.n	80098ba <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00e      	beq.n	800981c <HAL_UART_IRQHandler+0x68c>
 80097fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d008      	beq.n	800981c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f001 fa9a 	bl	800ad4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800981a:	e051      	b.n	80098c0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800981c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009824:	2b00      	cmp	r3, #0
 8009826:	d014      	beq.n	8009852 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800982c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009830:	2b00      	cmp	r3, #0
 8009832:	d105      	bne.n	8009840 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d008      	beq.n	8009852 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009844:	2b00      	cmp	r3, #0
 8009846:	d03a      	beq.n	80098be <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	4798      	blx	r3
    }
    return;
 8009850:	e035      	b.n	80098be <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	d009      	beq.n	8009872 <HAL_UART_IRQHandler+0x6e2>
 800985e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 fa44 	bl	800acf8 <UART_EndTransmit_IT>
    return;
 8009870:	e026      	b.n	80098c0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d009      	beq.n	8009892 <HAL_UART_IRQHandler+0x702>
 800987e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009882:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 fa73 	bl	800ad76 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009890:	e016      	b.n	80098c0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d010      	beq.n	80098c0 <HAL_UART_IRQHandler+0x730>
 800989e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	da0c      	bge.n	80098c0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 fa5b 	bl	800ad62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098ac:	e008      	b.n	80098c0 <HAL_UART_IRQHandler+0x730>
      return;
 80098ae:	bf00      	nop
 80098b0:	e006      	b.n	80098c0 <HAL_UART_IRQHandler+0x730>
    return;
 80098b2:	bf00      	nop
 80098b4:	e004      	b.n	80098c0 <HAL_UART_IRQHandler+0x730>
      return;
 80098b6:	bf00      	nop
 80098b8:	e002      	b.n	80098c0 <HAL_UART_IRQHandler+0x730>
      return;
 80098ba:	bf00      	nop
 80098bc:	e000      	b.n	80098c0 <HAL_UART_IRQHandler+0x730>
    return;
 80098be:	bf00      	nop
  }
}
 80098c0:	37e8      	adds	r7, #232	; 0xe8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	effffffe 	.word	0xeffffffe

080098cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009956:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	4313      	orrs	r3, r2
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
	...

08009974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009974:	b5b0      	push	{r4, r5, r7, lr}
 8009976:	b08e      	sub	sp, #56	; 0x38
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	689a      	ldr	r2, [r3, #8]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	431a      	orrs	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	695b      	ldr	r3, [r3, #20]
 8009990:	431a      	orrs	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	4313      	orrs	r3, r2
 8009998:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	4bbf      	ldr	r3, [pc, #764]	; (8009ca0 <UART_SetConfig+0x32c>)
 80099a2:	4013      	ands	r3, r2
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	6812      	ldr	r2, [r2, #0]
 80099a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099aa:	430b      	orrs	r3, r1
 80099ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68da      	ldr	r2, [r3, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4ab5      	ldr	r2, [pc, #724]	; (8009ca4 <UART_SetConfig+0x330>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d004      	beq.n	80099de <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a1b      	ldr	r3, [r3, #32]
 80099d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099da:	4313      	orrs	r3, r2
 80099dc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	4bb0      	ldr	r3, [pc, #704]	; (8009ca8 <UART_SetConfig+0x334>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6812      	ldr	r2, [r2, #0]
 80099ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099ee:	430b      	orrs	r3, r1
 80099f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f8:	f023 010f 	bic.w	r1, r3, #15
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	430a      	orrs	r2, r1
 8009a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4aa7      	ldr	r2, [pc, #668]	; (8009cac <UART_SetConfig+0x338>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d176      	bne.n	8009b00 <UART_SetConfig+0x18c>
 8009a12:	4ba7      	ldr	r3, [pc, #668]	; (8009cb0 <UART_SetConfig+0x33c>)
 8009a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a1a:	2b28      	cmp	r3, #40	; 0x28
 8009a1c:	d86c      	bhi.n	8009af8 <UART_SetConfig+0x184>
 8009a1e:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <UART_SetConfig+0xb0>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009ac9 	.word	0x08009ac9
 8009a28:	08009af9 	.word	0x08009af9
 8009a2c:	08009af9 	.word	0x08009af9
 8009a30:	08009af9 	.word	0x08009af9
 8009a34:	08009af9 	.word	0x08009af9
 8009a38:	08009af9 	.word	0x08009af9
 8009a3c:	08009af9 	.word	0x08009af9
 8009a40:	08009af9 	.word	0x08009af9
 8009a44:	08009ad1 	.word	0x08009ad1
 8009a48:	08009af9 	.word	0x08009af9
 8009a4c:	08009af9 	.word	0x08009af9
 8009a50:	08009af9 	.word	0x08009af9
 8009a54:	08009af9 	.word	0x08009af9
 8009a58:	08009af9 	.word	0x08009af9
 8009a5c:	08009af9 	.word	0x08009af9
 8009a60:	08009af9 	.word	0x08009af9
 8009a64:	08009ad9 	.word	0x08009ad9
 8009a68:	08009af9 	.word	0x08009af9
 8009a6c:	08009af9 	.word	0x08009af9
 8009a70:	08009af9 	.word	0x08009af9
 8009a74:	08009af9 	.word	0x08009af9
 8009a78:	08009af9 	.word	0x08009af9
 8009a7c:	08009af9 	.word	0x08009af9
 8009a80:	08009af9 	.word	0x08009af9
 8009a84:	08009ae1 	.word	0x08009ae1
 8009a88:	08009af9 	.word	0x08009af9
 8009a8c:	08009af9 	.word	0x08009af9
 8009a90:	08009af9 	.word	0x08009af9
 8009a94:	08009af9 	.word	0x08009af9
 8009a98:	08009af9 	.word	0x08009af9
 8009a9c:	08009af9 	.word	0x08009af9
 8009aa0:	08009af9 	.word	0x08009af9
 8009aa4:	08009ae9 	.word	0x08009ae9
 8009aa8:	08009af9 	.word	0x08009af9
 8009aac:	08009af9 	.word	0x08009af9
 8009ab0:	08009af9 	.word	0x08009af9
 8009ab4:	08009af9 	.word	0x08009af9
 8009ab8:	08009af9 	.word	0x08009af9
 8009abc:	08009af9 	.word	0x08009af9
 8009ac0:	08009af9 	.word	0x08009af9
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ace:	e222      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad6:	e21e      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ad8:	2308      	movs	r3, #8
 8009ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ade:	e21a      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ae0:	2310      	movs	r3, #16
 8009ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e216      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ae8:	2320      	movs	r3, #32
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	e212      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009af0:	2340      	movs	r3, #64	; 0x40
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af6:	e20e      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009af8:	2380      	movs	r3, #128	; 0x80
 8009afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afe:	e20a      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a6b      	ldr	r2, [pc, #428]	; (8009cb4 <UART_SetConfig+0x340>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d130      	bne.n	8009b6c <UART_SetConfig+0x1f8>
 8009b0a:	4b69      	ldr	r3, [pc, #420]	; (8009cb0 <UART_SetConfig+0x33c>)
 8009b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	2b05      	cmp	r3, #5
 8009b14:	d826      	bhi.n	8009b64 <UART_SetConfig+0x1f0>
 8009b16:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <UART_SetConfig+0x1a8>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b35 	.word	0x08009b35
 8009b20:	08009b3d 	.word	0x08009b3d
 8009b24:	08009b45 	.word	0x08009b45
 8009b28:	08009b4d 	.word	0x08009b4d
 8009b2c:	08009b55 	.word	0x08009b55
 8009b30:	08009b5d 	.word	0x08009b5d
 8009b34:	2300      	movs	r3, #0
 8009b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3a:	e1ec      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b42:	e1e8      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009b44:	2308      	movs	r3, #8
 8009b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4a:	e1e4      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b52:	e1e0      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009b54:	2320      	movs	r3, #32
 8009b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5a:	e1dc      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009b5c:	2340      	movs	r3, #64	; 0x40
 8009b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b62:	e1d8      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009b64:	2380      	movs	r3, #128	; 0x80
 8009b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6a:	e1d4      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a51      	ldr	r2, [pc, #324]	; (8009cb8 <UART_SetConfig+0x344>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d130      	bne.n	8009bd8 <UART_SetConfig+0x264>
 8009b76:	4b4e      	ldr	r3, [pc, #312]	; (8009cb0 <UART_SetConfig+0x33c>)
 8009b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7a:	f003 0307 	and.w	r3, r3, #7
 8009b7e:	2b05      	cmp	r3, #5
 8009b80:	d826      	bhi.n	8009bd0 <UART_SetConfig+0x25c>
 8009b82:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <UART_SetConfig+0x214>)
 8009b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b88:	08009ba1 	.word	0x08009ba1
 8009b8c:	08009ba9 	.word	0x08009ba9
 8009b90:	08009bb1 	.word	0x08009bb1
 8009b94:	08009bb9 	.word	0x08009bb9
 8009b98:	08009bc1 	.word	0x08009bc1
 8009b9c:	08009bc9 	.word	0x08009bc9
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e1b6      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ba8:	2304      	movs	r3, #4
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	e1b2      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009bb0:	2308      	movs	r3, #8
 8009bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb6:	e1ae      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009bb8:	2310      	movs	r3, #16
 8009bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bbe:	e1aa      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009bc0:	2320      	movs	r3, #32
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc6:	e1a6      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009bc8:	2340      	movs	r3, #64	; 0x40
 8009bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bce:	e1a2      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009bd0:	2380      	movs	r3, #128	; 0x80
 8009bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd6:	e19e      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a37      	ldr	r2, [pc, #220]	; (8009cbc <UART_SetConfig+0x348>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d130      	bne.n	8009c44 <UART_SetConfig+0x2d0>
 8009be2:	4b33      	ldr	r3, [pc, #204]	; (8009cb0 <UART_SetConfig+0x33c>)
 8009be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be6:	f003 0307 	and.w	r3, r3, #7
 8009bea:	2b05      	cmp	r3, #5
 8009bec:	d826      	bhi.n	8009c3c <UART_SetConfig+0x2c8>
 8009bee:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <UART_SetConfig+0x280>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c0d 	.word	0x08009c0d
 8009bf8:	08009c15 	.word	0x08009c15
 8009bfc:	08009c1d 	.word	0x08009c1d
 8009c00:	08009c25 	.word	0x08009c25
 8009c04:	08009c2d 	.word	0x08009c2d
 8009c08:	08009c35 	.word	0x08009c35
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c12:	e180      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c14:	2304      	movs	r3, #4
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1a:	e17c      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c1c:	2308      	movs	r3, #8
 8009c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c22:	e178      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c24:	2310      	movs	r3, #16
 8009c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2a:	e174      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c2c:	2320      	movs	r3, #32
 8009c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c32:	e170      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c34:	2340      	movs	r3, #64	; 0x40
 8009c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3a:	e16c      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c3c:	2380      	movs	r3, #128	; 0x80
 8009c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c42:	e168      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a1d      	ldr	r2, [pc, #116]	; (8009cc0 <UART_SetConfig+0x34c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d142      	bne.n	8009cd4 <UART_SetConfig+0x360>
 8009c4e:	4b18      	ldr	r3, [pc, #96]	; (8009cb0 <UART_SetConfig+0x33c>)
 8009c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b05      	cmp	r3, #5
 8009c58:	d838      	bhi.n	8009ccc <UART_SetConfig+0x358>
 8009c5a:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <UART_SetConfig+0x2ec>)
 8009c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c60:	08009c79 	.word	0x08009c79
 8009c64:	08009c81 	.word	0x08009c81
 8009c68:	08009c89 	.word	0x08009c89
 8009c6c:	08009c91 	.word	0x08009c91
 8009c70:	08009c99 	.word	0x08009c99
 8009c74:	08009cc5 	.word	0x08009cc5
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7e:	e14a      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c80:	2304      	movs	r3, #4
 8009c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c86:	e146      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c88:	2308      	movs	r3, #8
 8009c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8e:	e142      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c90:	2310      	movs	r3, #16
 8009c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c96:	e13e      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009c98:	2320      	movs	r3, #32
 8009c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9e:	e13a      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ca0:	cfff69f3 	.word	0xcfff69f3
 8009ca4:	58000c00 	.word	0x58000c00
 8009ca8:	11fff4ff 	.word	0x11fff4ff
 8009cac:	40011000 	.word	0x40011000
 8009cb0:	58024400 	.word	0x58024400
 8009cb4:	40004400 	.word	0x40004400
 8009cb8:	40004800 	.word	0x40004800
 8009cbc:	40004c00 	.word	0x40004c00
 8009cc0:	40005000 	.word	0x40005000
 8009cc4:	2340      	movs	r3, #64	; 0x40
 8009cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cca:	e124      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ccc:	2380      	movs	r3, #128	; 0x80
 8009cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd2:	e120      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4acc      	ldr	r2, [pc, #816]	; (800a00c <UART_SetConfig+0x698>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d176      	bne.n	8009dcc <UART_SetConfig+0x458>
 8009cde:	4bcc      	ldr	r3, [pc, #816]	; (800a010 <UART_SetConfig+0x69c>)
 8009ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce6:	2b28      	cmp	r3, #40	; 0x28
 8009ce8:	d86c      	bhi.n	8009dc4 <UART_SetConfig+0x450>
 8009cea:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <UART_SetConfig+0x37c>)
 8009cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf0:	08009d95 	.word	0x08009d95
 8009cf4:	08009dc5 	.word	0x08009dc5
 8009cf8:	08009dc5 	.word	0x08009dc5
 8009cfc:	08009dc5 	.word	0x08009dc5
 8009d00:	08009dc5 	.word	0x08009dc5
 8009d04:	08009dc5 	.word	0x08009dc5
 8009d08:	08009dc5 	.word	0x08009dc5
 8009d0c:	08009dc5 	.word	0x08009dc5
 8009d10:	08009d9d 	.word	0x08009d9d
 8009d14:	08009dc5 	.word	0x08009dc5
 8009d18:	08009dc5 	.word	0x08009dc5
 8009d1c:	08009dc5 	.word	0x08009dc5
 8009d20:	08009dc5 	.word	0x08009dc5
 8009d24:	08009dc5 	.word	0x08009dc5
 8009d28:	08009dc5 	.word	0x08009dc5
 8009d2c:	08009dc5 	.word	0x08009dc5
 8009d30:	08009da5 	.word	0x08009da5
 8009d34:	08009dc5 	.word	0x08009dc5
 8009d38:	08009dc5 	.word	0x08009dc5
 8009d3c:	08009dc5 	.word	0x08009dc5
 8009d40:	08009dc5 	.word	0x08009dc5
 8009d44:	08009dc5 	.word	0x08009dc5
 8009d48:	08009dc5 	.word	0x08009dc5
 8009d4c:	08009dc5 	.word	0x08009dc5
 8009d50:	08009dad 	.word	0x08009dad
 8009d54:	08009dc5 	.word	0x08009dc5
 8009d58:	08009dc5 	.word	0x08009dc5
 8009d5c:	08009dc5 	.word	0x08009dc5
 8009d60:	08009dc5 	.word	0x08009dc5
 8009d64:	08009dc5 	.word	0x08009dc5
 8009d68:	08009dc5 	.word	0x08009dc5
 8009d6c:	08009dc5 	.word	0x08009dc5
 8009d70:	08009db5 	.word	0x08009db5
 8009d74:	08009dc5 	.word	0x08009dc5
 8009d78:	08009dc5 	.word	0x08009dc5
 8009d7c:	08009dc5 	.word	0x08009dc5
 8009d80:	08009dc5 	.word	0x08009dc5
 8009d84:	08009dc5 	.word	0x08009dc5
 8009d88:	08009dc5 	.word	0x08009dc5
 8009d8c:	08009dc5 	.word	0x08009dc5
 8009d90:	08009dbd 	.word	0x08009dbd
 8009d94:	2301      	movs	r3, #1
 8009d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9a:	e0bc      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da2:	e0b8      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009da4:	2308      	movs	r3, #8
 8009da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009daa:	e0b4      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009dac:	2310      	movs	r3, #16
 8009dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db2:	e0b0      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009db4:	2320      	movs	r3, #32
 8009db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dba:	e0ac      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009dbc:	2340      	movs	r3, #64	; 0x40
 8009dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc2:	e0a8      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009dc4:	2380      	movs	r3, #128	; 0x80
 8009dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dca:	e0a4      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a90      	ldr	r2, [pc, #576]	; (800a014 <UART_SetConfig+0x6a0>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d130      	bne.n	8009e38 <UART_SetConfig+0x4c4>
 8009dd6:	4b8e      	ldr	r3, [pc, #568]	; (800a010 <UART_SetConfig+0x69c>)
 8009dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	d826      	bhi.n	8009e30 <UART_SetConfig+0x4bc>
 8009de2:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <UART_SetConfig+0x474>)
 8009de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de8:	08009e01 	.word	0x08009e01
 8009dec:	08009e09 	.word	0x08009e09
 8009df0:	08009e11 	.word	0x08009e11
 8009df4:	08009e19 	.word	0x08009e19
 8009df8:	08009e21 	.word	0x08009e21
 8009dfc:	08009e29 	.word	0x08009e29
 8009e00:	2300      	movs	r3, #0
 8009e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e06:	e086      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0e:	e082      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e10:	2308      	movs	r3, #8
 8009e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e16:	e07e      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1e:	e07a      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e20:	2320      	movs	r3, #32
 8009e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e26:	e076      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2e:	e072      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e30:	2380      	movs	r3, #128	; 0x80
 8009e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e36:	e06e      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a76      	ldr	r2, [pc, #472]	; (800a018 <UART_SetConfig+0x6a4>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d130      	bne.n	8009ea4 <UART_SetConfig+0x530>
 8009e42:	4b73      	ldr	r3, [pc, #460]	; (800a010 <UART_SetConfig+0x69c>)
 8009e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b05      	cmp	r3, #5
 8009e4c:	d826      	bhi.n	8009e9c <UART_SetConfig+0x528>
 8009e4e:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <UART_SetConfig+0x4e0>)
 8009e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e54:	08009e6d 	.word	0x08009e6d
 8009e58:	08009e75 	.word	0x08009e75
 8009e5c:	08009e7d 	.word	0x08009e7d
 8009e60:	08009e85 	.word	0x08009e85
 8009e64:	08009e8d 	.word	0x08009e8d
 8009e68:	08009e95 	.word	0x08009e95
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e72:	e050      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e74:	2304      	movs	r3, #4
 8009e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7a:	e04c      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e7c:	2308      	movs	r3, #8
 8009e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e82:	e048      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e84:	2310      	movs	r3, #16
 8009e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8a:	e044      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e8c:	2320      	movs	r3, #32
 8009e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e92:	e040      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e94:	2340      	movs	r3, #64	; 0x40
 8009e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9a:	e03c      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009e9c:	2380      	movs	r3, #128	; 0x80
 8009e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ea2:	e038      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a5c      	ldr	r2, [pc, #368]	; (800a01c <UART_SetConfig+0x6a8>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d130      	bne.n	8009f10 <UART_SetConfig+0x59c>
 8009eae:	4b58      	ldr	r3, [pc, #352]	; (800a010 <UART_SetConfig+0x69c>)
 8009eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	2b05      	cmp	r3, #5
 8009eb8:	d826      	bhi.n	8009f08 <UART_SetConfig+0x594>
 8009eba:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <UART_SetConfig+0x54c>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009ed9 	.word	0x08009ed9
 8009ec4:	08009ee1 	.word	0x08009ee1
 8009ec8:	08009ee9 	.word	0x08009ee9
 8009ecc:	08009ef1 	.word	0x08009ef1
 8009ed0:	08009ef9 	.word	0x08009ef9
 8009ed4:	08009f01 	.word	0x08009f01
 8009ed8:	2302      	movs	r3, #2
 8009eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ede:	e01a      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ee0:	2304      	movs	r3, #4
 8009ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee6:	e016      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ee8:	2308      	movs	r3, #8
 8009eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eee:	e012      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ef0:	2310      	movs	r3, #16
 8009ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef6:	e00e      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009ef8:	2320      	movs	r3, #32
 8009efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efe:	e00a      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009f00:	2340      	movs	r3, #64	; 0x40
 8009f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f06:	e006      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009f08:	2380      	movs	r3, #128	; 0x80
 8009f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f0e:	e002      	b.n	8009f16 <UART_SetConfig+0x5a2>
 8009f10:	2380      	movs	r3, #128	; 0x80
 8009f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a40      	ldr	r2, [pc, #256]	; (800a01c <UART_SetConfig+0x6a8>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	f040 80ef 	bne.w	800a100 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f26:	2b20      	cmp	r3, #32
 8009f28:	dc46      	bgt.n	8009fb8 <UART_SetConfig+0x644>
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	f2c0 8081 	blt.w	800a032 <UART_SetConfig+0x6be>
 8009f30:	3b02      	subs	r3, #2
 8009f32:	2b1e      	cmp	r3, #30
 8009f34:	d87d      	bhi.n	800a032 <UART_SetConfig+0x6be>
 8009f36:	a201      	add	r2, pc, #4	; (adr r2, 8009f3c <UART_SetConfig+0x5c8>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	08009fbf 	.word	0x08009fbf
 8009f40:	0800a033 	.word	0x0800a033
 8009f44:	08009fc7 	.word	0x08009fc7
 8009f48:	0800a033 	.word	0x0800a033
 8009f4c:	0800a033 	.word	0x0800a033
 8009f50:	0800a033 	.word	0x0800a033
 8009f54:	08009fd7 	.word	0x08009fd7
 8009f58:	0800a033 	.word	0x0800a033
 8009f5c:	0800a033 	.word	0x0800a033
 8009f60:	0800a033 	.word	0x0800a033
 8009f64:	0800a033 	.word	0x0800a033
 8009f68:	0800a033 	.word	0x0800a033
 8009f6c:	0800a033 	.word	0x0800a033
 8009f70:	0800a033 	.word	0x0800a033
 8009f74:	08009fe7 	.word	0x08009fe7
 8009f78:	0800a033 	.word	0x0800a033
 8009f7c:	0800a033 	.word	0x0800a033
 8009f80:	0800a033 	.word	0x0800a033
 8009f84:	0800a033 	.word	0x0800a033
 8009f88:	0800a033 	.word	0x0800a033
 8009f8c:	0800a033 	.word	0x0800a033
 8009f90:	0800a033 	.word	0x0800a033
 8009f94:	0800a033 	.word	0x0800a033
 8009f98:	0800a033 	.word	0x0800a033
 8009f9c:	0800a033 	.word	0x0800a033
 8009fa0:	0800a033 	.word	0x0800a033
 8009fa4:	0800a033 	.word	0x0800a033
 8009fa8:	0800a033 	.word	0x0800a033
 8009fac:	0800a033 	.word	0x0800a033
 8009fb0:	0800a033 	.word	0x0800a033
 8009fb4:	0800a025 	.word	0x0800a025
 8009fb8:	2b40      	cmp	r3, #64	; 0x40
 8009fba:	d036      	beq.n	800a02a <UART_SetConfig+0x6b6>
 8009fbc:	e039      	b.n	800a032 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009fbe:	f7fe f81f 	bl	8008000 <HAL_RCCEx_GetD3PCLK1Freq>
 8009fc2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009fc4:	e03b      	b.n	800a03e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fc6:	f107 0314 	add.w	r3, r7, #20
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe f82e 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fd4:	e033      	b.n	800a03e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fd6:	f107 0308 	add.w	r3, r7, #8
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe f97a 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fe4:	e02b      	b.n	800a03e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fe6:	4b0a      	ldr	r3, [pc, #40]	; (800a010 <UART_SetConfig+0x69c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0320 	and.w	r3, r3, #32
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d009      	beq.n	800a006 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ff2:	4b07      	ldr	r3, [pc, #28]	; (800a010 <UART_SetConfig+0x69c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	08db      	lsrs	r3, r3, #3
 8009ff8:	f003 0303 	and.w	r3, r3, #3
 8009ffc:	4a08      	ldr	r2, [pc, #32]	; (800a020 <UART_SetConfig+0x6ac>)
 8009ffe:	fa22 f303 	lsr.w	r3, r2, r3
 800a002:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a004:	e01b      	b.n	800a03e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a006:	4b06      	ldr	r3, [pc, #24]	; (800a020 <UART_SetConfig+0x6ac>)
 800a008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a00a:	e018      	b.n	800a03e <UART_SetConfig+0x6ca>
 800a00c:	40011400 	.word	0x40011400
 800a010:	58024400 	.word	0x58024400
 800a014:	40007800 	.word	0x40007800
 800a018:	40007c00 	.word	0x40007c00
 800a01c:	58000c00 	.word	0x58000c00
 800a020:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a024:	4bc4      	ldr	r3, [pc, #784]	; (800a338 <UART_SetConfig+0x9c4>)
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a028:	e009      	b.n	800a03e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a02a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a02e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a030:	e005      	b.n	800a03e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a03c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 81da 	beq.w	800a3fa <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04a:	4abc      	ldr	r2, [pc, #752]	; (800a33c <UART_SetConfig+0x9c8>)
 800a04c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a050:	461a      	mov	r2, r3
 800a052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a054:	fbb3 f3f2 	udiv	r3, r3, r2
 800a058:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	4613      	mov	r3, r2
 800a060:	005b      	lsls	r3, r3, #1
 800a062:	4413      	add	r3, r2
 800a064:	6a3a      	ldr	r2, [r7, #32]
 800a066:	429a      	cmp	r2, r3
 800a068:	d305      	bcc.n	800a076 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a070:	6a3a      	ldr	r2, [r7, #32]
 800a072:	429a      	cmp	r2, r3
 800a074:	d903      	bls.n	800a07e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a07c:	e1bd      	b.n	800a3fa <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	4618      	mov	r0, r3
 800a082:	f04f 0100 	mov.w	r1, #0
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08a:	4aac      	ldr	r2, [pc, #688]	; (800a33c <UART_SetConfig+0x9c8>)
 800a08c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a090:	b29a      	uxth	r2, r3
 800a092:	f04f 0300 	mov.w	r3, #0
 800a096:	f7f6 f923 	bl	80002e0 <__aeabi_uldivmod>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4610      	mov	r0, r2
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	f04f 0200 	mov.w	r2, #0
 800a0a6:	f04f 0300 	mov.w	r3, #0
 800a0aa:	020b      	lsls	r3, r1, #8
 800a0ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0b0:	0202      	lsls	r2, r0, #8
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	6849      	ldr	r1, [r1, #4]
 800a0b6:	0849      	lsrs	r1, r1, #1
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	f04f 0100 	mov.w	r1, #0
 800a0be:	1814      	adds	r4, r2, r0
 800a0c0:	eb43 0501 	adc.w	r5, r3, r1
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	f04f 0300 	mov.w	r3, #0
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7f6 f905 	bl	80002e0 <__aeabi_uldivmod>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4613      	mov	r3, r2
 800a0dc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0e4:	d308      	bcc.n	800a0f8 <UART_SetConfig+0x784>
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0ec:	d204      	bcs.n	800a0f8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0f4:	60da      	str	r2, [r3, #12]
 800a0f6:	e180      	b.n	800a3fa <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a0fe:	e17c      	b.n	800a3fa <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a108:	f040 80be 	bne.w	800a288 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800a10c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a110:	2b20      	cmp	r3, #32
 800a112:	dc49      	bgt.n	800a1a8 <UART_SetConfig+0x834>
 800a114:	2b00      	cmp	r3, #0
 800a116:	db7c      	blt.n	800a212 <UART_SetConfig+0x89e>
 800a118:	2b20      	cmp	r3, #32
 800a11a:	d87a      	bhi.n	800a212 <UART_SetConfig+0x89e>
 800a11c:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <UART_SetConfig+0x7b0>)
 800a11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a122:	bf00      	nop
 800a124:	0800a1af 	.word	0x0800a1af
 800a128:	0800a1b7 	.word	0x0800a1b7
 800a12c:	0800a213 	.word	0x0800a213
 800a130:	0800a213 	.word	0x0800a213
 800a134:	0800a1bf 	.word	0x0800a1bf
 800a138:	0800a213 	.word	0x0800a213
 800a13c:	0800a213 	.word	0x0800a213
 800a140:	0800a213 	.word	0x0800a213
 800a144:	0800a1cf 	.word	0x0800a1cf
 800a148:	0800a213 	.word	0x0800a213
 800a14c:	0800a213 	.word	0x0800a213
 800a150:	0800a213 	.word	0x0800a213
 800a154:	0800a213 	.word	0x0800a213
 800a158:	0800a213 	.word	0x0800a213
 800a15c:	0800a213 	.word	0x0800a213
 800a160:	0800a213 	.word	0x0800a213
 800a164:	0800a1df 	.word	0x0800a1df
 800a168:	0800a213 	.word	0x0800a213
 800a16c:	0800a213 	.word	0x0800a213
 800a170:	0800a213 	.word	0x0800a213
 800a174:	0800a213 	.word	0x0800a213
 800a178:	0800a213 	.word	0x0800a213
 800a17c:	0800a213 	.word	0x0800a213
 800a180:	0800a213 	.word	0x0800a213
 800a184:	0800a213 	.word	0x0800a213
 800a188:	0800a213 	.word	0x0800a213
 800a18c:	0800a213 	.word	0x0800a213
 800a190:	0800a213 	.word	0x0800a213
 800a194:	0800a213 	.word	0x0800a213
 800a198:	0800a213 	.word	0x0800a213
 800a19c:	0800a213 	.word	0x0800a213
 800a1a0:	0800a213 	.word	0x0800a213
 800a1a4:	0800a205 	.word	0x0800a205
 800a1a8:	2b40      	cmp	r3, #64	; 0x40
 800a1aa:	d02e      	beq.n	800a20a <UART_SetConfig+0x896>
 800a1ac:	e031      	b.n	800a212 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1ae:	f7fc ff79 	bl	80070a4 <HAL_RCC_GetPCLK1Freq>
 800a1b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a1b4:	e033      	b.n	800a21e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1b6:	f7fc ff8b 	bl	80070d0 <HAL_RCC_GetPCLK2Freq>
 800a1ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a1bc:	e02f      	b.n	800a21e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1be:	f107 0314 	add.w	r3, r7, #20
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fd ff32 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1cc:	e027      	b.n	800a21e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1ce:	f107 0308 	add.w	r3, r7, #8
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe f87e 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1dc:	e01f      	b.n	800a21e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1de:	4b58      	ldr	r3, [pc, #352]	; (800a340 <UART_SetConfig+0x9cc>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0320 	and.w	r3, r3, #32
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d009      	beq.n	800a1fe <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1ea:	4b55      	ldr	r3, [pc, #340]	; (800a340 <UART_SetConfig+0x9cc>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	08db      	lsrs	r3, r3, #3
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	4a53      	ldr	r2, [pc, #332]	; (800a344 <UART_SetConfig+0x9d0>)
 800a1f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1fc:	e00f      	b.n	800a21e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a1fe:	4b51      	ldr	r3, [pc, #324]	; (800a344 <UART_SetConfig+0x9d0>)
 800a200:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a202:	e00c      	b.n	800a21e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a204:	4b4c      	ldr	r3, [pc, #304]	; (800a338 <UART_SetConfig+0x9c4>)
 800a206:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a208:	e009      	b.n	800a21e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a20a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a20e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a210:	e005      	b.n	800a21e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a212:	2300      	movs	r3, #0
 800a214:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a21c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 80ea 	beq.w	800a3fa <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	4a44      	ldr	r2, [pc, #272]	; (800a33c <UART_SetConfig+0x9c8>)
 800a22c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a230:	461a      	mov	r2, r3
 800a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a234:	fbb3 f3f2 	udiv	r3, r3, r2
 800a238:	005a      	lsls	r2, r3, #1
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	085b      	lsrs	r3, r3, #1
 800a240:	441a      	add	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	fbb2 f3f3 	udiv	r3, r2, r3
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	2b0f      	cmp	r3, #15
 800a250:	d916      	bls.n	800a280 <UART_SetConfig+0x90c>
 800a252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a258:	d212      	bcs.n	800a280 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f023 030f 	bic.w	r3, r3, #15
 800a262:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	085b      	lsrs	r3, r3, #1
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f003 0307 	and.w	r3, r3, #7
 800a26e:	b29a      	uxth	r2, r3
 800a270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a272:	4313      	orrs	r3, r2
 800a274:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a27c:	60da      	str	r2, [r3, #12]
 800a27e:	e0bc      	b.n	800a3fa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a286:	e0b8      	b.n	800a3fa <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a288:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	dc4b      	bgt.n	800a328 <UART_SetConfig+0x9b4>
 800a290:	2b00      	cmp	r3, #0
 800a292:	f2c0 8087 	blt.w	800a3a4 <UART_SetConfig+0xa30>
 800a296:	2b20      	cmp	r3, #32
 800a298:	f200 8084 	bhi.w	800a3a4 <UART_SetConfig+0xa30>
 800a29c:	a201      	add	r2, pc, #4	; (adr r2, 800a2a4 <UART_SetConfig+0x930>)
 800a29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a2:	bf00      	nop
 800a2a4:	0800a32f 	.word	0x0800a32f
 800a2a8:	0800a349 	.word	0x0800a349
 800a2ac:	0800a3a5 	.word	0x0800a3a5
 800a2b0:	0800a3a5 	.word	0x0800a3a5
 800a2b4:	0800a351 	.word	0x0800a351
 800a2b8:	0800a3a5 	.word	0x0800a3a5
 800a2bc:	0800a3a5 	.word	0x0800a3a5
 800a2c0:	0800a3a5 	.word	0x0800a3a5
 800a2c4:	0800a361 	.word	0x0800a361
 800a2c8:	0800a3a5 	.word	0x0800a3a5
 800a2cc:	0800a3a5 	.word	0x0800a3a5
 800a2d0:	0800a3a5 	.word	0x0800a3a5
 800a2d4:	0800a3a5 	.word	0x0800a3a5
 800a2d8:	0800a3a5 	.word	0x0800a3a5
 800a2dc:	0800a3a5 	.word	0x0800a3a5
 800a2e0:	0800a3a5 	.word	0x0800a3a5
 800a2e4:	0800a371 	.word	0x0800a371
 800a2e8:	0800a3a5 	.word	0x0800a3a5
 800a2ec:	0800a3a5 	.word	0x0800a3a5
 800a2f0:	0800a3a5 	.word	0x0800a3a5
 800a2f4:	0800a3a5 	.word	0x0800a3a5
 800a2f8:	0800a3a5 	.word	0x0800a3a5
 800a2fc:	0800a3a5 	.word	0x0800a3a5
 800a300:	0800a3a5 	.word	0x0800a3a5
 800a304:	0800a3a5 	.word	0x0800a3a5
 800a308:	0800a3a5 	.word	0x0800a3a5
 800a30c:	0800a3a5 	.word	0x0800a3a5
 800a310:	0800a3a5 	.word	0x0800a3a5
 800a314:	0800a3a5 	.word	0x0800a3a5
 800a318:	0800a3a5 	.word	0x0800a3a5
 800a31c:	0800a3a5 	.word	0x0800a3a5
 800a320:	0800a3a5 	.word	0x0800a3a5
 800a324:	0800a397 	.word	0x0800a397
 800a328:	2b40      	cmp	r3, #64	; 0x40
 800a32a:	d037      	beq.n	800a39c <UART_SetConfig+0xa28>
 800a32c:	e03a      	b.n	800a3a4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a32e:	f7fc feb9 	bl	80070a4 <HAL_RCC_GetPCLK1Freq>
 800a332:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a334:	e03c      	b.n	800a3b0 <UART_SetConfig+0xa3c>
 800a336:	bf00      	nop
 800a338:	003d0900 	.word	0x003d0900
 800a33c:	0800edd8 	.word	0x0800edd8
 800a340:	58024400 	.word	0x58024400
 800a344:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a348:	f7fc fec2 	bl	80070d0 <HAL_RCC_GetPCLK2Freq>
 800a34c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a34e:	e02f      	b.n	800a3b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a350:	f107 0314 	add.w	r3, r7, #20
 800a354:	4618      	mov	r0, r3
 800a356:	f7fd fe69 	bl	800802c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a35e:	e027      	b.n	800a3b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a360:	f107 0308 	add.w	r3, r7, #8
 800a364:	4618      	mov	r0, r3
 800a366:	f7fd ffb5 	bl	80082d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a36e:	e01f      	b.n	800a3b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a370:	4b2c      	ldr	r3, [pc, #176]	; (800a424 <UART_SetConfig+0xab0>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0320 	and.w	r3, r3, #32
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d009      	beq.n	800a390 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a37c:	4b29      	ldr	r3, [pc, #164]	; (800a424 <UART_SetConfig+0xab0>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	08db      	lsrs	r3, r3, #3
 800a382:	f003 0303 	and.w	r3, r3, #3
 800a386:	4a28      	ldr	r2, [pc, #160]	; (800a428 <UART_SetConfig+0xab4>)
 800a388:	fa22 f303 	lsr.w	r3, r2, r3
 800a38c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a38e:	e00f      	b.n	800a3b0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a390:	4b25      	ldr	r3, [pc, #148]	; (800a428 <UART_SetConfig+0xab4>)
 800a392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a394:	e00c      	b.n	800a3b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a396:	4b25      	ldr	r3, [pc, #148]	; (800a42c <UART_SetConfig+0xab8>)
 800a398:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a39a:	e009      	b.n	800a3b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a39c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3a2:	e005      	b.n	800a3b0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a3ae:	bf00      	nop
    }

    if (pclk != 0U)
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d021      	beq.n	800a3fa <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ba:	4a1d      	ldr	r2, [pc, #116]	; (800a430 <UART_SetConfig+0xabc>)
 800a3bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	085b      	lsrs	r3, r3, #1
 800a3ce:	441a      	add	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	2b0f      	cmp	r3, #15
 800a3de:	d909      	bls.n	800a3f4 <UART_SetConfig+0xa80>
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3e6:	d205      	bcs.n	800a3f4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	60da      	str	r2, [r3, #12]
 800a3f2:	e002      	b.n	800a3fa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a416:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3738      	adds	r7, #56	; 0x38
 800a41e:	46bd      	mov	sp, r7
 800a420:	bdb0      	pop	{r4, r5, r7, pc}
 800a422:	bf00      	nop
 800a424:	58024400 	.word	0x58024400
 800a428:	03d09000 	.word	0x03d09000
 800a42c:	003d0900 	.word	0x003d0900
 800a430:	0800edd8 	.word	0x0800edd8

0800a434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a440:	f003 0301 	and.w	r3, r3, #1
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00a      	beq.n	800a45e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00a      	beq.n	800a4a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a6:	f003 0308 	and.w	r3, r3, #8
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c8:	f003 0310 	and.w	r3, r3, #16
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00a      	beq.n	800a4e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00a      	beq.n	800a508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	430a      	orrs	r2, r1
 800a506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a510:	2b00      	cmp	r3, #0
 800a512:	d01a      	beq.n	800a54a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	430a      	orrs	r2, r1
 800a528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a52e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a532:	d10a      	bne.n	800a54a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	605a      	str	r2, [r3, #4]
  }
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af02      	add	r7, sp, #8
 800a57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a588:	f7f8 fc7e 	bl	8002e88 <HAL_GetTick>
 800a58c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0308 	and.w	r3, r3, #8
 800a598:	2b08      	cmp	r3, #8
 800a59a:	d10e      	bne.n	800a5ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a59c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f82f 	bl	800a60e <UART_WaitOnFlagUntilTimeout>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e025      	b.n	800a606 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d10e      	bne.n	800a5e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f819 	bl	800a60e <UART_WaitOnFlagUntilTimeout>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e00f      	b.n	800a606 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2220      	movs	r2, #32
 800a5ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b09c      	sub	sp, #112	; 0x70
 800a612:	af00      	add	r7, sp, #0
 800a614:	60f8      	str	r0, [r7, #12]
 800a616:	60b9      	str	r1, [r7, #8]
 800a618:	603b      	str	r3, [r7, #0]
 800a61a:	4613      	mov	r3, r2
 800a61c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a61e:	e0a9      	b.n	800a774 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a626:	f000 80a5 	beq.w	800a774 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a62a:	f7f8 fc2d 	bl	8002e88 <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a636:	429a      	cmp	r2, r3
 800a638:	d302      	bcc.n	800a640 <UART_WaitOnFlagUntilTimeout+0x32>
 800a63a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d140      	bne.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a648:	e853 3f00 	ldrex	r3, [r3]
 800a64c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a654:	667b      	str	r3, [r7, #100]	; 0x64
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a65e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a660:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a662:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a666:	e841 2300 	strex	r3, r2, [r1]
 800a66a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a66c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1e6      	bne.n	800a640 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3308      	adds	r3, #8
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a684:	f023 0301 	bic.w	r3, r3, #1
 800a688:	663b      	str	r3, [r7, #96]	; 0x60
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3308      	adds	r3, #8
 800a690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a692:	64ba      	str	r2, [r7, #72]	; 0x48
 800a694:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e5      	bne.n	800a672 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e069      	b.n	800a796 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0304 	and.w	r3, r3, #4
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d051      	beq.n	800a774 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	69db      	ldr	r3, [r3, #28]
 800a6d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6de:	d149      	bne.n	800a774 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	e853 3f00 	ldrex	r3, [r3]
 800a6f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a708:	637b      	str	r3, [r7, #52]	; 0x34
 800a70a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a70e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a710:	e841 2300 	strex	r3, r2, [r1]
 800a714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1e6      	bne.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3308      	adds	r3, #8
 800a722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	e853 3f00 	ldrex	r3, [r3]
 800a72a:	613b      	str	r3, [r7, #16]
   return(result);
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	f023 0301 	bic.w	r3, r3, #1
 800a732:	66bb      	str	r3, [r7, #104]	; 0x68
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	3308      	adds	r3, #8
 800a73a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a73c:	623a      	str	r2, [r7, #32]
 800a73e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a740:	69f9      	ldr	r1, [r7, #28]
 800a742:	6a3a      	ldr	r2, [r7, #32]
 800a744:	e841 2300 	strex	r3, r2, [r1]
 800a748:	61bb      	str	r3, [r7, #24]
   return(result);
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1e5      	bne.n	800a71c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2220      	movs	r2, #32
 800a754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2220      	movs	r2, #32
 800a75c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2220      	movs	r2, #32
 800a764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e010      	b.n	800a796 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	69da      	ldr	r2, [r3, #28]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	4013      	ands	r3, r2
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	429a      	cmp	r2, r3
 800a782:	bf0c      	ite	eq
 800a784:	2301      	moveq	r3, #1
 800a786:	2300      	movne	r3, #0
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	79fb      	ldrb	r3, [r7, #7]
 800a78e:	429a      	cmp	r2, r3
 800a790:	f43f af46 	beq.w	800a620 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3770      	adds	r7, #112	; 0x70
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
	...

0800a7a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b096      	sub	sp, #88	; 0x58
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	88fa      	ldrh	r2, [r7, #6]
 800a7b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2222      	movs	r2, #34	; 0x22
 800a7c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d02c      	beq.n	800a82e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7d8:	4a42      	ldr	r2, [pc, #264]	; (800a8e4 <UART_Start_Receive_DMA+0x144>)
 800a7da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7e0:	4a41      	ldr	r2, [pc, #260]	; (800a8e8 <UART_Start_Receive_DMA+0x148>)
 800a7e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7e8:	4a40      	ldr	r2, [pc, #256]	; (800a8ec <UART_Start_Receive_DMA+0x14c>)
 800a7ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3324      	adds	r3, #36	; 0x24
 800a7fe:	4619      	mov	r1, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a804:	461a      	mov	r2, r3
 800a806:	88fb      	ldrh	r3, [r7, #6]
 800a808:	f7f8 ff92 	bl	8003730 <HAL_DMA_Start_IT>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00d      	beq.n	800a82e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2210      	movs	r2, #16
 800a816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2220      	movs	r2, #32
 800a826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	e055      	b.n	800a8da <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d018      	beq.n	800a870 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a852:	657b      	str	r3, [r7, #84]	; 0x54
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a85c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a85e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e6      	bne.n	800a83e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3308      	adds	r3, #8
 800a876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	e853 3f00 	ldrex	r3, [r3]
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	f043 0301 	orr.w	r3, r3, #1
 800a886:	653b      	str	r3, [r7, #80]	; 0x50
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	3308      	adds	r3, #8
 800a88e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a890:	637a      	str	r2, [r7, #52]	; 0x34
 800a892:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a898:	e841 2300 	strex	r3, r2, [r1]
 800a89c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1e5      	bne.n	800a870 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	e853 3f00 	ldrex	r3, [r3]
 800a8b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8c4:	623a      	str	r2, [r7, #32]
 800a8c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c8:	69f9      	ldr	r1, [r7, #28]
 800a8ca:	6a3a      	ldr	r2, [r7, #32]
 800a8cc:	e841 2300 	strex	r3, r2, [r1]
 800a8d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e5      	bne.n	800a8a4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3758      	adds	r7, #88	; 0x58
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	0800aaf3 	.word	0x0800aaf3
 800a8e8:	0800ac15 	.word	0x0800ac15
 800a8ec:	0800ac4d 	.word	0x0800ac4d

0800a8f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b08f      	sub	sp, #60	; 0x3c
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	61fb      	str	r3, [r7, #28]
   return(result);
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a90c:	637b      	str	r3, [r7, #52]	; 0x34
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a916:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a918:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a91c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a91e:	e841 2300 	strex	r3, r2, [r1]
 800a922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e6      	bne.n	800a8f8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3308      	adds	r3, #8
 800a930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	60bb      	str	r3, [r7, #8]
   return(result);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a940:	633b      	str	r3, [r7, #48]	; 0x30
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3308      	adds	r3, #8
 800a948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a94a:	61ba      	str	r2, [r7, #24]
 800a94c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	6979      	ldr	r1, [r7, #20]
 800a950:	69ba      	ldr	r2, [r7, #24]
 800a952:	e841 2300 	strex	r3, r2, [r1]
 800a956:	613b      	str	r3, [r7, #16]
   return(result);
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1e5      	bne.n	800a92a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2220      	movs	r2, #32
 800a962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a966:	bf00      	nop
 800a968:	373c      	adds	r7, #60	; 0x3c
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
	...

0800a974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a974:	b480      	push	{r7}
 800a976:	b095      	sub	sp, #84	; 0x54
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a984:	e853 3f00 	ldrex	r3, [r3]
 800a988:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a990:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a99a:	643b      	str	r3, [r7, #64]	; 0x40
 800a99c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9a2:	e841 2300 	strex	r3, r2, [r1]
 800a9a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1e6      	bne.n	800a97c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	e853 3f00 	ldrex	r3, [r3]
 800a9bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9be:	69fa      	ldr	r2, [r7, #28]
 800a9c0:	4b1e      	ldr	r3, [pc, #120]	; (800aa3c <UART_EndRxTransfer+0xc8>)
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3308      	adds	r3, #8
 800a9cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9d6:	e841 2300 	strex	r3, r2, [r1]
 800a9da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1e5      	bne.n	800a9ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d118      	bne.n	800aa1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	e853 3f00 	ldrex	r3, [r3]
 800a9f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f023 0310 	bic.w	r3, r3, #16
 800a9fe:	647b      	str	r3, [r7, #68]	; 0x44
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	461a      	mov	r2, r3
 800aa06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa08:	61bb      	str	r3, [r7, #24]
 800aa0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0c:	6979      	ldr	r1, [r7, #20]
 800aa0e:	69ba      	ldr	r2, [r7, #24]
 800aa10:	e841 2300 	strex	r3, r2, [r1]
 800aa14:	613b      	str	r3, [r7, #16]
   return(result);
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1e6      	bne.n	800a9ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2220      	movs	r2, #32
 800aa20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800aa30:	bf00      	nop
 800aa32:	3754      	adds	r7, #84	; 0x54
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	effffffe 	.word	0xeffffffe

0800aa40 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b090      	sub	sp, #64	; 0x40
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa56:	d037      	beq.n	800aac8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800aa58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3308      	adds	r3, #8
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6a:	e853 3f00 	ldrex	r3, [r3]
 800aa6e:	623b      	str	r3, [r7, #32]
   return(result);
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa76:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3308      	adds	r3, #8
 800aa7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa80:	633a      	str	r2, [r7, #48]	; 0x30
 800aa82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa88:	e841 2300 	strex	r3, r2, [r1]
 800aa8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e5      	bne.n	800aa60 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	e853 3f00 	ldrex	r3, [r3]
 800aaa0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa8:	637b      	str	r3, [r7, #52]	; 0x34
 800aaaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab2:	61fb      	str	r3, [r7, #28]
 800aab4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab6:	69b9      	ldr	r1, [r7, #24]
 800aab8:	69fa      	ldr	r2, [r7, #28]
 800aaba:	e841 2300 	strex	r3, r2, [r1]
 800aabe:	617b      	str	r3, [r7, #20]
   return(result);
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1e6      	bne.n	800aa94 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aac6:	e002      	b.n	800aace <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800aac8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aaca:	f7fe feff 	bl	80098cc <HAL_UART_TxCpltCallback>
}
 800aace:	bf00      	nop
 800aad0:	3740      	adds	r7, #64	; 0x40
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f7fe fefb 	bl	80098e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaea:	bf00      	nop
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b09c      	sub	sp, #112	; 0x70
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab08:	d071      	beq.n	800abee <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ab0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab1a:	e853 3f00 	ldrex	r3, [r3]
 800ab1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab30:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab38:	e841 2300 	strex	r3, r2, [r1]
 800ab3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e6      	bne.n	800ab12 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3308      	adds	r3, #8
 800ab4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4e:	e853 3f00 	ldrex	r3, [r3]
 800ab52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab56:	f023 0301 	bic.w	r3, r3, #1
 800ab5a:	667b      	str	r3, [r7, #100]	; 0x64
 800ab5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3308      	adds	r3, #8
 800ab62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab64:	647a      	str	r2, [r7, #68]	; 0x44
 800ab66:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab6c:	e841 2300 	strex	r3, r2, [r1]
 800ab70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1e5      	bne.n	800ab44 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab82:	e853 3f00 	ldrex	r3, [r3]
 800ab86:	623b      	str	r3, [r7, #32]
   return(result);
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab8e:	663b      	str	r3, [r7, #96]	; 0x60
 800ab90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	3308      	adds	r3, #8
 800ab96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab98:	633a      	str	r2, [r7, #48]	; 0x30
 800ab9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba0:	e841 2300 	strex	r3, r2, [r1]
 800aba4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e5      	bne.n	800ab78 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abae:	2220      	movs	r2, #32
 800abb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d118      	bne.n	800abee <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	e853 3f00 	ldrex	r3, [r3]
 800abc8:	60fb      	str	r3, [r7, #12]
   return(result);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f023 0310 	bic.w	r3, r3, #16
 800abd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abda:	61fb      	str	r3, [r7, #28]
 800abdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abde:	69b9      	ldr	r1, [r7, #24]
 800abe0:	69fa      	ldr	r2, [r7, #28]
 800abe2:	e841 2300 	strex	r3, r2, [r1]
 800abe6:	617b      	str	r3, [r7, #20]
   return(result);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1e6      	bne.n	800abbc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d107      	bne.n	800ac06 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800abfc:	4619      	mov	r1, r3
 800abfe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac00:	f7fe fe96 	bl	8009930 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac04:	e002      	b.n	800ac0c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ac06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac08:	f7fe fe74 	bl	80098f4 <HAL_UART_RxCpltCallback>
}
 800ac0c:	bf00      	nop
 800ac0e:	3770      	adds	r7, #112	; 0x70
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac20:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d109      	bne.n	800ac3e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac30:	085b      	lsrs	r3, r3, #1
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	4619      	mov	r1, r3
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f7fe fe7a 	bl	8009930 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac3c:	e002      	b.n	800ac44 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7fe fe62 	bl	8009908 <HAL_UART_RxHalfCpltCallback>
}
 800ac44:	bf00      	nop
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac74:	2b80      	cmp	r3, #128	; 0x80
 800ac76:	d109      	bne.n	800ac8c <UART_DMAError+0x40>
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	2b21      	cmp	r3, #33	; 0x21
 800ac7c:	d106      	bne.n	800ac8c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ac86:	6978      	ldr	r0, [r7, #20]
 800ac88:	f7ff fe32 	bl	800a8f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac96:	2b40      	cmp	r3, #64	; 0x40
 800ac98:	d109      	bne.n	800acae <UART_DMAError+0x62>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2b22      	cmp	r3, #34	; 0x22
 800ac9e:	d106      	bne.n	800acae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800aca8:	6978      	ldr	r0, [r7, #20]
 800acaa:	f7ff fe63 	bl	800a974 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acb4:	f043 0210 	orr.w	r2, r3, #16
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acbe:	6978      	ldr	r0, [r7, #20]
 800acc0:	f7fe fe2c 	bl	800991c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acc4:	bf00      	nop
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f7fe fe16 	bl	800991c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acf0:	bf00      	nop
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	e853 3f00 	ldrex	r3, [r3]
 800ad0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad14:	61fb      	str	r3, [r7, #28]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	61bb      	str	r3, [r7, #24]
 800ad20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad22:	6979      	ldr	r1, [r7, #20]
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	e841 2300 	strex	r3, r2, [r1]
 800ad2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e6      	bne.n	800ad00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2220      	movs	r2, #32
 800ad36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7fe fdc3 	bl	80098cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad46:	bf00      	nop
 800ad48:	3720      	adds	r7, #32
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad56:	bf00      	nop
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b083      	sub	sp, #12
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ad6a:	bf00      	nop
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad76:	b480      	push	{r7}
 800ad78:	b083      	sub	sp, #12
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad7e:	bf00      	nop
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b085      	sub	sp, #20
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d101      	bne.n	800ada0 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	e027      	b.n	800adf0 <HAL_UARTEx_DisableFifoMode+0x66>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2224      	movs	r2, #36	; 0x24
 800adac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f022 0201 	bic.w	r2, r2, #1
 800adc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800adce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d101      	bne.n	800ae14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae10:	2302      	movs	r3, #2
 800ae12:	e02d      	b.n	800ae70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2224      	movs	r2, #36	; 0x24
 800ae20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f022 0201 	bic.w	r2, r2, #1
 800ae3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	683a      	ldr	r2, [r7, #0]
 800ae4c:	430a      	orrs	r2, r1
 800ae4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f84f 	bl	800aef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2220      	movs	r2, #32
 800ae62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d101      	bne.n	800ae90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	e02d      	b.n	800aeec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2224      	movs	r2, #36	; 0x24
 800ae9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f022 0201 	bic.w	r2, r2, #1
 800aeb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	430a      	orrs	r2, r1
 800aeca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f811 	bl	800aef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2220      	movs	r2, #32
 800aede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af00:	2b00      	cmp	r3, #0
 800af02:	d108      	bne.n	800af16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af14:	e031      	b.n	800af7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af16:	2310      	movs	r3, #16
 800af18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af1a:	2310      	movs	r3, #16
 800af1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	0e5b      	lsrs	r3, r3, #25
 800af26:	b2db      	uxtb	r3, r3
 800af28:	f003 0307 	and.w	r3, r3, #7
 800af2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	0f5b      	lsrs	r3, r3, #29
 800af36:	b2db      	uxtb	r3, r3
 800af38:	f003 0307 	and.w	r3, r3, #7
 800af3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af3e:	7bbb      	ldrb	r3, [r7, #14]
 800af40:	7b3a      	ldrb	r2, [r7, #12]
 800af42:	4911      	ldr	r1, [pc, #68]	; (800af88 <UARTEx_SetNbDataToProcess+0x94>)
 800af44:	5c8a      	ldrb	r2, [r1, r2]
 800af46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af4a:	7b3a      	ldrb	r2, [r7, #12]
 800af4c:	490f      	ldr	r1, [pc, #60]	; (800af8c <UARTEx_SetNbDataToProcess+0x98>)
 800af4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af50:	fb93 f3f2 	sdiv	r3, r3, r2
 800af54:	b29a      	uxth	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	7b7a      	ldrb	r2, [r7, #13]
 800af60:	4909      	ldr	r1, [pc, #36]	; (800af88 <UARTEx_SetNbDataToProcess+0x94>)
 800af62:	5c8a      	ldrb	r2, [r1, r2]
 800af64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af68:	7b7a      	ldrb	r2, [r7, #13]
 800af6a:	4908      	ldr	r1, [pc, #32]	; (800af8c <UARTEx_SetNbDataToProcess+0x98>)
 800af6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800af72:	b29a      	uxth	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800af7a:	bf00      	nop
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	0800edf0 	.word	0x0800edf0
 800af8c:	0800edf8 	.word	0x0800edf8

0800af90 <initPID>:
		return ROV_FALSE; //false
	}
}

void initPID(Algorithm_PID_t Pid, uint8_t mode, float_t fb_gain)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	460b      	mov	r3, r1
 800af9a:	ed87 0a01 	vstr	s0, [r7, #4]
 800af9e:	72fb      	strb	r3, [r7, #11]
	Pid->mode = mode;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	7afa      	ldrb	r2, [r7, #11]
 800afa4:	701a      	strb	r2, [r3, #0]
	Pid->FeedBack_gain = fb_gain;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	60da      	str	r2, [r3, #12]
//    else
//    {
//
//    }
#else
	Pid->Kp = 0.5;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800afb2:	621a      	str	r2, [r3, #32]
	Pid->Ki = 0.3;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4a16      	ldr	r2, [pc, #88]	; (800b010 <initPID+0x80>)
 800afb8:	625a      	str	r2, [r3, #36]	; 0x24
	Pid->Kd = 0.7;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	4a15      	ldr	r2, [pc, #84]	; (800b014 <initPID+0x84>)
 800afbe:	629a      	str	r2, [r3, #40]	; 0x28
	Pid->IntDecay = 10;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4a15      	ldr	r2, [pc, #84]	; (800b018 <initPID+0x88>)
 800afc4:	635a      	str	r2, [r3, #52]	; 0x34
	Pid->IntMinValue = -30;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	4a14      	ldr	r2, [pc, #80]	; (800b01c <initPID+0x8c>)
 800afca:	62da      	str	r2, [r3, #44]	; 0x2c
	Pid->IntMaxValue = 30;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	4a14      	ldr	r2, [pc, #80]	; (800b020 <initPID+0x90>)
 800afd0:	631a      	str	r2, [r3, #48]	; 0x30
	Pid->DifMinValue = -50;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	4a13      	ldr	r2, [pc, #76]	; (800b024 <initPID+0x94>)
 800afd6:	639a      	str	r2, [r3, #56]	; 0x38
	Pid->DifMaxValue = 50;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4a13      	ldr	r2, [pc, #76]	; (800b028 <initPID+0x98>)
 800afdc:	63da      	str	r2, [r3, #60]	; 0x3c
	Pid->OutMinValue = -100;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	4a12      	ldr	r2, [pc, #72]	; (800b02c <initPID+0x9c>)
 800afe2:	641a      	str	r2, [r3, #64]	; 0x40
	Pid->OutMaxValue = -100;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4a11      	ldr	r2, [pc, #68]	; (800b02c <initPID+0x9c>)
 800afe8:	645a      	str	r2, [r3, #68]	; 0x44
	Pid->Error = 0.0;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f04f 0200 	mov.w	r2, #0
 800aff0:	611a      	str	r2, [r3, #16]
	Pid->LastError = 0.0;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f04f 0200 	mov.w	r2, #0
 800aff8:	615a      	str	r2, [r3, #20]
	Pid->Output = 0.0;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f04f 0200 	mov.w	r2, #0
 800b000:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 800b002:	bf00      	nop
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	3e99999a 	.word	0x3e99999a
 800b014:	3f333333 	.word	0x3f333333
 800b018:	41200000 	.word	0x41200000
 800b01c:	c1f00000 	.word	0xc1f00000
 800b020:	41f00000 	.word	0x41f00000
 800b024:	c2480000 	.word	0xc2480000
 800b028:	42480000 	.word	0x42480000
 800b02c:	c2c80000 	.word	0xc2c80000

0800b030 <calculatePID_position>:

float_t calculatePID_position(Algorithm_PID_t Pid, float_t target,
		float_t value)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	ed87 0a02 	vstr	s0, [r7, #8]
 800b03c:	edc7 0a01 	vstr	s1, [r7, #4]
	Pid->Target = target;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	605a      	str	r2, [r3, #4]
	Pid->Error = Pid->Target - value; //calculate err(t)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	ed93 7a01 	vldr	s14, [r3, #4]
 800b04c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b050:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	edc3 7a04 	vstr	s15, [r3, #16]

	//only for this work
	if (abs(Pid->Error) > 32768)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b064:	ee17 3a90 	vmov	r3, s15
 800b068:	2b00      	cmp	r3, #0
 800b06a:	bfb8      	it	lt
 800b06c:	425b      	neglt	r3, r3
 800b06e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b072:	dd1d      	ble.n	800b0b0 <calculatePID_position+0x80>
	{
		if (value > 32768)
 800b074:	edd7 7a01 	vldr	s15, [r7, #4]
 800b078:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800b260 <calculatePID_position+0x230>
 800b07c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b084:	dd0a      	ble.n	800b09c <calculatePID_position+0x6c>
		{
			Pid->Error += 32768;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	edd3 7a04 	vldr	s15, [r3, #16]
 800b08c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800b260 <calculatePID_position+0x230>
 800b090:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	edc3 7a04 	vstr	s15, [r3, #16]
 800b09a:	e009      	b.n	800b0b0 <calculatePID_position+0x80>
		}
		else
		{
			Pid->Error -= 32768;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b0a2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800b260 <calculatePID_position+0x230>
 800b0a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	edc3 7a04 	vstr	s15, [r3, #16]
		}
	}

	//calculate integrate
	Pid->DeltaIntegral += Pid->Error;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	ed93 7a06 	vldr	s14, [r3, #24]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	edd3 7a04 	vldr	s15, [r3, #16]
 800b0bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	edc3 7a06 	vstr	s15, [r3, #24]
	if ((Pid->Error < -5) || (Pid->Error > 5))
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	edd3 7a04 	vldr	s15, [r3, #16]
 800b0cc:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800b0d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d8:	d409      	bmi.n	800b0ee <calculatePID_position+0xbe>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	edd3 7a04 	vldr	s15, [r3, #16]
 800b0e0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800b0e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ec:	dd16      	ble.n	800b11c <calculatePID_position+0xec>
	{
		Pid->DeltaIntegral -= Pid->IntDecay;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	ed93 7a06 	vldr	s14, [r3, #24]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	edc3 7a06 	vstr	s15, [r3, #24]
		if (Pid->DeltaIntegral <= 0)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	edd3 7a06 	vldr	s15, [r3, #24]
 800b10a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b112:	d803      	bhi.n	800b11c <calculatePID_position+0xec>
		{
			Pid->DeltaIntegral = 0;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f04f 0200 	mov.w	r2, #0
 800b11a:	619a      	str	r2, [r3, #24]
		}
	}

	if (Pid->DeltaIntegral > Pid->IntMaxValue) //restrict integrate
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	ed93 7a06 	vldr	s14, [r3, #24]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b130:	dd04      	ble.n	800b13c <calculatePID_position+0x10c>
	{
		Pid->DeltaIntegral = Pid->IntMaxValue;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	619a      	str	r2, [r3, #24]
 800b13a:	e00e      	b.n	800b15a <calculatePID_position+0x12a>
	}
	else if (Pid->DeltaIntegral < Pid->IntMinValue)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	ed93 7a06 	vldr	s14, [r3, #24]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b150:	d503      	bpl.n	800b15a <calculatePID_position+0x12a>
	{
		Pid->DeltaIntegral = Pid->IntMinValue;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	619a      	str	r2, [r3, #24]
	}

	//calculate difference
	Pid->DeltaDifference = Pid->Error - Pid->LastError;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	ed93 7a04 	vldr	s14, [r3, #16]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	edd3 7a05 	vldr	s15, [r3, #20]
 800b166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	edc3 7a07 	vstr	s15, [r3, #28]
	if (Pid->DeltaDifference > Pid->DifMaxValue) //restrict difference
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	ed93 7a07 	vldr	s14, [r3, #28]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b17c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b184:	dd04      	ble.n	800b190 <calculatePID_position+0x160>
	{
		Pid->DeltaDifference = Pid->DifMaxValue;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	61da      	str	r2, [r3, #28]
 800b18e:	e00e      	b.n	800b1ae <calculatePID_position+0x17e>
	}
	else if (Pid->DeltaDifference < Pid->DifMinValue)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	ed93 7a07 	vldr	s14, [r3, #28]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b19c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a4:	d503      	bpl.n	800b1ae <calculatePID_position+0x17e>
	{
		Pid->DeltaDifference = Pid->DifMinValue;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	61da      	str	r2, [r3, #28]
	}

	Pid->Output = Pid->Kp * Pid->Error + Pid->Ki * Pid->DeltaIntegral
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	ed93 7a08 	vldr	s14, [r3, #32]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	edd3 7a04 	vldr	s15, [r3, #16]
 800b1ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	edd3 7a06 	vldr	s15, [r3, #24]
 800b1ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1ce:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ Pid->Kd * Pid->DeltaDifference; //PID
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	edd3 7a07 	vldr	s15, [r3, #28]
 800b1de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1e2:	ee77 7a27 	vadd.f32	s15, s14, s15
	Pid->Output = Pid->Kp * Pid->Error + Pid->Ki * Pid->DeltaIntegral
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	if (Pid->Output < Pid->OutMinValue) //restrict output
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b1f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b200:	d504      	bpl.n	800b20c <calculatePID_position+0x1dc>
	{
		Pid->Output = Pid->OutMinValue;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	649a      	str	r2, [r3, #72]	; 0x48
 800b20a:	e00e      	b.n	800b22a <calculatePID_position+0x1fa>
	}
	else if (Pid->Output > Pid->OutMaxValue)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b220:	dd03      	ble.n	800b22a <calculatePID_position+0x1fa>
	{
		Pid->Output = Pid->OutMaxValue;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	649a      	str	r2, [r3, #72]	; 0x48
	}

	Pid->LastError = Pid->Error; //load err_1(t)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	691a      	ldr	r2, [r3, #16]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	615a      	str	r2, [r3, #20]
	Pid->FeedBack = Pid->Output * Pid->FeedBack_gain; //load feedback
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	edd3 7a03 	vldr	s15, [r3, #12]
 800b23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	edc3 7a02 	vstr	s15, [r3, #8]

	return Pid->Output;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b24c:	ee07 3a90 	vmov	s15, r3
}
 800b250:	eeb0 0a67 	vmov.f32	s0, s15
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	47000000 	.word	0x47000000

0800b264 <CaptureReportData>:
    }
#endif
}

void CaptureReportData(ReportData_t SendData, uint8_t *ReportTransmit)
{
 800b264:	b084      	sub	sp, #16
 800b266:	b490      	push	{r4, r7}
 800b268:	af00      	add	r7, sp, #0
 800b26a:	f107 0408 	add.w	r4, r7, #8
 800b26e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ReportTransmit[0] = (uint8_t) (SendData.FrameHead);
 800b272:	7a3a      	ldrb	r2, [r7, #8]
 800b274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b276:	701a      	strb	r2, [r3, #0]
	ReportTransmit[1] = (uint8_t) ((SendData.CabinFunction)
 800b278:	7a7b      	ldrb	r3, [r7, #9]
 800b27a:	b25a      	sxtb	r2, r3
			| (SendData.WaterDetect << 1));
 800b27c:	7abb      	ldrb	r3, [r7, #10]
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	b25b      	sxtb	r3, r3
 800b282:	4313      	orrs	r3, r2
 800b284:	b25a      	sxtb	r2, r3
	ReportTransmit[1] = (uint8_t) ((SendData.CabinFunction)
 800b286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b288:	3301      	adds	r3, #1
 800b28a:	b2d2      	uxtb	r2, r2
 800b28c:	701a      	strb	r2, [r3, #0]
	ReportTransmit[2] = (uint8_t) ((SendData.CabinTemperature & 0xFF00) >> 8);
 800b28e:	89bb      	ldrh	r3, [r7, #12]
 800b290:	0a1b      	lsrs	r3, r3, #8
 800b292:	b29a      	uxth	r2, r3
 800b294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b296:	3302      	adds	r3, #2
 800b298:	b2d2      	uxtb	r2, r2
 800b29a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[3] = (uint8_t) (SendData.CabinTemperature & 0x00FF);
 800b29c:	89ba      	ldrh	r2, [r7, #12]
 800b29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2a0:	3303      	adds	r3, #3
 800b2a2:	b2d2      	uxtb	r2, r2
 800b2a4:	701a      	strb	r2, [r3, #0]
	ReportTransmit[4] =
			(uint8_t) ((SendData.CabinBarometric & 0xFF000000) >> 24);
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	0e1a      	lsrs	r2, r3, #24
	ReportTransmit[4] =
 800b2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ac:	3304      	adds	r3, #4
			(uint8_t) ((SendData.CabinBarometric & 0xFF000000) >> 24);
 800b2ae:	b2d2      	uxtb	r2, r2
	ReportTransmit[4] =
 800b2b0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[5] =
			(uint8_t) ((SendData.CabinBarometric & 0x00FF0000) >> 16);
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	0c1a      	lsrs	r2, r3, #16
	ReportTransmit[5] =
 800b2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b8:	3305      	adds	r3, #5
			(uint8_t) ((SendData.CabinBarometric & 0x00FF0000) >> 16);
 800b2ba:	b2d2      	uxtb	r2, r2
	ReportTransmit[5] =
 800b2bc:	701a      	strb	r2, [r3, #0]
	ReportTransmit[6] =
			(uint8_t) ((SendData.CabinBarometric & 0x0000FF00) >> 8);
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	0a1a      	lsrs	r2, r3, #8
	ReportTransmit[6] =
 800b2c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2c4:	3306      	adds	r3, #6
			(uint8_t) ((SendData.CabinBarometric & 0x0000FF00) >> 8);
 800b2c6:	b2d2      	uxtb	r2, r2
	ReportTransmit[6] =
 800b2c8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[7] = (uint8_t) (SendData.CabinBarometric & 0x000000FF);
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ce:	3307      	adds	r3, #7
 800b2d0:	b2d2      	uxtb	r2, r2
 800b2d2:	701a      	strb	r2, [r3, #0]
	ReportTransmit[8] = (uint8_t) ((SendData.CabinHumidity & 0xFF00) >> 8);
 800b2d4:	8abb      	ldrh	r3, [r7, #20]
 800b2d6:	0a1b      	lsrs	r3, r3, #8
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2dc:	3308      	adds	r3, #8
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[9] = (uint8_t) (SendData.CabinHumidity & 0x00FF);
 800b2e2:	8aba      	ldrh	r2, [r7, #20]
 800b2e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e6:	3309      	adds	r3, #9
 800b2e8:	b2d2      	uxtb	r2, r2
 800b2ea:	701a      	strb	r2, [r3, #0]
	ReportTransmit[10] = (uint8_t) ((SendData.AccNum[0] & 0xFF00) >> 8);
 800b2ec:	8afb      	ldrh	r3, [r7, #22]
 800b2ee:	0a1b      	lsrs	r3, r3, #8
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f4:	330a      	adds	r3, #10
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[11] = (uint8_t) (SendData.AccNum[0] & 0x00FF);
 800b2fa:	8afa      	ldrh	r2, [r7, #22]
 800b2fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2fe:	330b      	adds	r3, #11
 800b300:	b2d2      	uxtb	r2, r2
 800b302:	701a      	strb	r2, [r3, #0]
	ReportTransmit[12] = (uint8_t) ((SendData.AccNum[1] & 0xFF00) >> 8);
 800b304:	8b3b      	ldrh	r3, [r7, #24]
 800b306:	0a1b      	lsrs	r3, r3, #8
 800b308:	b29a      	uxth	r2, r3
 800b30a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b30c:	330c      	adds	r3, #12
 800b30e:	b2d2      	uxtb	r2, r2
 800b310:	701a      	strb	r2, [r3, #0]
	ReportTransmit[13] = (uint8_t) (SendData.AccNum[1] & 0x00FF);
 800b312:	8b3a      	ldrh	r2, [r7, #24]
 800b314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b316:	330d      	adds	r3, #13
 800b318:	b2d2      	uxtb	r2, r2
 800b31a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[14] = (uint8_t) ((SendData.AccNum[2] & 0xFF00) >> 8);
 800b31c:	8b7b      	ldrh	r3, [r7, #26]
 800b31e:	0a1b      	lsrs	r3, r3, #8
 800b320:	b29a      	uxth	r2, r3
 800b322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b324:	330e      	adds	r3, #14
 800b326:	b2d2      	uxtb	r2, r2
 800b328:	701a      	strb	r2, [r3, #0]
	ReportTransmit[15] = (uint8_t) (SendData.AccNum[2] & 0x00FF);
 800b32a:	8b7a      	ldrh	r2, [r7, #26]
 800b32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b32e:	330f      	adds	r3, #15
 800b330:	b2d2      	uxtb	r2, r2
 800b332:	701a      	strb	r2, [r3, #0]
	ReportTransmit[16] = (uint8_t) ((SendData.RotNum[0] & 0xFF00) >> 8);
 800b334:	8bbb      	ldrh	r3, [r7, #28]
 800b336:	0a1b      	lsrs	r3, r3, #8
 800b338:	b29a      	uxth	r2, r3
 800b33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b33c:	3310      	adds	r3, #16
 800b33e:	b2d2      	uxtb	r2, r2
 800b340:	701a      	strb	r2, [r3, #0]
	ReportTransmit[17] = (uint8_t) (SendData.RotNum[0] & 0x00FF);
 800b342:	8bba      	ldrh	r2, [r7, #28]
 800b344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b346:	3311      	adds	r3, #17
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[18] = (uint8_t) ((SendData.RotNum[1] & 0xFF00) >> 8);
 800b34c:	8bfb      	ldrh	r3, [r7, #30]
 800b34e:	0a1b      	lsrs	r3, r3, #8
 800b350:	b29a      	uxth	r2, r3
 800b352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b354:	3312      	adds	r3, #18
 800b356:	b2d2      	uxtb	r2, r2
 800b358:	701a      	strb	r2, [r3, #0]
	ReportTransmit[19] = (uint8_t) (SendData.RotNum[1] & 0x00FF);
 800b35a:	8bfa      	ldrh	r2, [r7, #30]
 800b35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b35e:	3313      	adds	r3, #19
 800b360:	b2d2      	uxtb	r2, r2
 800b362:	701a      	strb	r2, [r3, #0]
	ReportTransmit[20] = (uint8_t) ((SendData.RotNum[2] & 0xFF00) >> 8);
 800b364:	8c3b      	ldrh	r3, [r7, #32]
 800b366:	0a1b      	lsrs	r3, r3, #8
 800b368:	b29a      	uxth	r2, r3
 800b36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b36c:	3314      	adds	r3, #20
 800b36e:	b2d2      	uxtb	r2, r2
 800b370:	701a      	strb	r2, [r3, #0]
	ReportTransmit[21] = (uint8_t) (SendData.RotNum[2] & 0x00FF);
 800b372:	8c3a      	ldrh	r2, [r7, #32]
 800b374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b376:	3315      	adds	r3, #21
 800b378:	b2d2      	uxtb	r2, r2
 800b37a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[22] = (uint8_t) ((SendData.EulNum[0] & 0xFF00) >> 8);
 800b37c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b37e:	0a1b      	lsrs	r3, r3, #8
 800b380:	b29a      	uxth	r2, r3
 800b382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b384:	3316      	adds	r3, #22
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	701a      	strb	r2, [r3, #0]
	ReportTransmit[23] = (uint8_t) (SendData.EulNum[0] & 0x00FF);
 800b38a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b38c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b38e:	3317      	adds	r3, #23
 800b390:	b2d2      	uxtb	r2, r2
 800b392:	701a      	strb	r2, [r3, #0]
	ReportTransmit[24] = (uint8_t) ((SendData.EulNum[1] & 0xFF00) >> 8);
 800b394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b396:	0a1b      	lsrs	r3, r3, #8
 800b398:	b29a      	uxth	r2, r3
 800b39a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b39c:	3318      	adds	r3, #24
 800b39e:	b2d2      	uxtb	r2, r2
 800b3a0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[25] = (uint8_t) (SendData.EulNum[1] & 0x00FF);
 800b3a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a6:	3319      	adds	r3, #25
 800b3a8:	b2d2      	uxtb	r2, r2
 800b3aa:	701a      	strb	r2, [r3, #0]
	ReportTransmit[26] = (uint8_t) ((SendData.EulNum[2] & 0xFF00) >> 8);
 800b3ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3ae:	0a1b      	lsrs	r3, r3, #8
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3b4:	331a      	adds	r3, #26
 800b3b6:	b2d2      	uxtb	r2, r2
 800b3b8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[27] = (uint8_t) (SendData.EulNum[2] & 0x00FF);
 800b3ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3be:	331b      	adds	r3, #27
 800b3c0:	b2d2      	uxtb	r2, r2
 800b3c2:	701a      	strb	r2, [r3, #0]
	ReportTransmit[28] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 800b3c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3c6:	0a1b      	lsrs	r3, r3, #8
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3cc:	331c      	adds	r3, #28
 800b3ce:	b2d2      	uxtb	r2, r2
 800b3d0:	701a      	strb	r2, [r3, #0]
	ReportTransmit[29] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 800b3d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d6:	331d      	adds	r3, #29
 800b3d8:	b2d2      	uxtb	r2, r2
 800b3da:	701a      	strb	r2, [r3, #0]
	ReportTransmit[30] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 800b3dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3de:	0a1b      	lsrs	r3, r3, #8
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3e4:	331e      	adds	r3, #30
 800b3e6:	b2d2      	uxtb	r2, r2
 800b3e8:	701a      	strb	r2, [r3, #0]
	ReportTransmit[31] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 800b3ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b3ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3ee:	331f      	adds	r3, #31
 800b3f0:	b2d2      	uxtb	r2, r2
 800b3f2:	701a      	strb	r2, [r3, #0]
	ReportTransmit[32] = (uint8_t) ((SendData.MagNum[0] & 0xFF00) >> 8);
 800b3f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3f6:	0a1b      	lsrs	r3, r3, #8
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3fc:	3320      	adds	r3, #32
 800b3fe:	b2d2      	uxtb	r2, r2
 800b400:	701a      	strb	r2, [r3, #0]
	ReportTransmit[33] = (uint8_t) (SendData.MagNum[0] & 0x00FF);
 800b402:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b406:	3321      	adds	r3, #33	; 0x21
 800b408:	b2d2      	uxtb	r2, r2
 800b40a:	701a      	strb	r2, [r3, #0]
	ReportTransmit[34] = (uint8_t) ((SendData.SonarHeight & 0xFF000000) >> 24);
 800b40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40e:	0e1a      	lsrs	r2, r3, #24
 800b410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b412:	3322      	adds	r3, #34	; 0x22
 800b414:	b2d2      	uxtb	r2, r2
 800b416:	701a      	strb	r2, [r3, #0]
	ReportTransmit[35] = (uint8_t) ((SendData.SonarHeight & 0x00FF0000) >> 16);
 800b418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41a:	0c1a      	lsrs	r2, r3, #16
 800b41c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b41e:	3323      	adds	r3, #35	; 0x23
 800b420:	b2d2      	uxtb	r2, r2
 800b422:	701a      	strb	r2, [r3, #0]
	ReportTransmit[36] = (uint8_t) ((SendData.SonarHeight & 0x0000FF00) >> 8);
 800b424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b426:	0a1a      	lsrs	r2, r3, #8
 800b428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b42a:	3324      	adds	r3, #36	; 0x24
 800b42c:	b2d2      	uxtb	r2, r2
 800b42e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[37] = (uint8_t) (SendData.SonarHeight & 0x000000FF);
 800b430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b434:	3325      	adds	r3, #37	; 0x25
 800b436:	b2d2      	uxtb	r2, r2
 800b438:	701a      	strb	r2, [r3, #0]
	ReportTransmit[38] = (uint8_t) ((SendData.SonarConfidence & 0xFF00) >> 8);
 800b43a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b43c:	0a1b      	lsrs	r3, r3, #8
 800b43e:	b29a      	uxth	r2, r3
 800b440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b442:	3326      	adds	r3, #38	; 0x26
 800b444:	b2d2      	uxtb	r2, r2
 800b446:	701a      	strb	r2, [r3, #0]
	ReportTransmit[39] = (uint8_t) (SendData.SonarConfidence & 0x00FF);
 800b448:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b44a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b44c:	3327      	adds	r3, #39	; 0x27
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	701a      	strb	r2, [r3, #0]
	ReportTransmit[40] = (uint8_t) ((SendData.WaterTemperature & 0xFF00) >> 8);
 800b452:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b454:	0a1b      	lsrs	r3, r3, #8
 800b456:	b29a      	uxth	r2, r3
 800b458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b45a:	3328      	adds	r3, #40	; 0x28
 800b45c:	b2d2      	uxtb	r2, r2
 800b45e:	701a      	strb	r2, [r3, #0]
	ReportTransmit[41] = (uint8_t) (SendData.WaterTemperature & 0x00FF);
 800b460:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b464:	3329      	adds	r3, #41	; 0x29
 800b466:	b2d2      	uxtb	r2, r2
 800b468:	701a      	strb	r2, [r3, #0]
	ReportTransmit[42] = (uint8_t) ((SendData.WaterDepth & 0xFF00) >> 8);
 800b46a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b46c:	0a1b      	lsrs	r3, r3, #8
 800b46e:	b29a      	uxth	r2, r3
 800b470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b472:	332a      	adds	r3, #42	; 0x2a
 800b474:	b2d2      	uxtb	r2, r2
 800b476:	701a      	strb	r2, [r3, #0]
	ReportTransmit[43] = (uint8_t) (SendData.WaterDepth & 0x00FF);
 800b478:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b47c:	332b      	adds	r3, #43	; 0x2b
 800b47e:	b2d2      	uxtb	r2, r2
 800b480:	701a      	strb	r2, [r3, #0]
//	ReportTransmit[39] = 0x00;
//	ReportTransmit[40] = 0x00;
//	ReportTransmit[41] = 0x00;
//	ReportTransmit[42] = 0x00;
//	ReportTransmit[43] = 0x00;
	ReportTransmit[44] = (uint8_t) 0x00;
 800b482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b484:	332c      	adds	r3, #44	; 0x2c
 800b486:	2200      	movs	r2, #0
 800b488:	701a      	strb	r2, [r3, #0]
	ReportTransmit[45] = (uint8_t) ((SendData.FrameEnd & 0xFF00) >> 8);
 800b48a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b48c:	0a1b      	lsrs	r3, r3, #8
 800b48e:	b29a      	uxth	r2, r3
 800b490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b492:	332d      	adds	r3, #45	; 0x2d
 800b494:	b2d2      	uxtb	r2, r2
 800b496:	701a      	strb	r2, [r3, #0]
	ReportTransmit[46] = (uint8_t) (SendData.FrameEnd & 0x00FF);
 800b498:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b49c:	332e      	adds	r3, #46	; 0x2e
 800b49e:	b2d2      	uxtb	r2, r2
 800b4a0:	701a      	strb	r2, [r3, #0]
}
 800b4a2:	bf00      	nop
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bc90      	pop	{r4, r7}
 800b4a8:	b004      	add	sp, #16
 800b4aa:	4770      	bx	lr

0800b4ac <ReportDataAnalysis>:

ReportData_t ReportDataAnalysis(uint8_t *ReportReceive)
{
 800b4ac:	b4b0      	push	{r4, r5, r7}
 800b4ae:	b093      	sub	sp, #76	; 0x4c
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
	ReportData_t temp_report;

	for (uint8_t i = 0; i < Slave_UART_RXLen * 2; i++)
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b4bc:	e1de      	b.n	800b87c <ReportDataAnalysis+0x3d0>
	{
		if ((ReportReceive[i] == 0x25) && (ReportReceive[i + 45] == 0xFF)
 800b4be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b25      	cmp	r3, #37	; 0x25
 800b4ca:	f040 81d2 	bne.w	800b872 <ReportDataAnalysis+0x3c6>
 800b4ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b4d2:	332d      	adds	r3, #45	; 0x2d
 800b4d4:	683a      	ldr	r2, [r7, #0]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2bff      	cmp	r3, #255	; 0xff
 800b4dc:	f040 81c9 	bne.w	800b872 <ReportDataAnalysis+0x3c6>
				&& (ReportReceive[i + 46] == 0xFF)
 800b4e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b4e4:	332e      	adds	r3, #46	; 0x2e
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2bff      	cmp	r3, #255	; 0xff
 800b4ee:	f040 81c0 	bne.w	800b872 <ReportDataAnalysis+0x3c6>
				&& (ReportReceive[i + 44] == 0x00))
 800b4f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b4f6:	332c      	adds	r3, #44	; 0x2c
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f040 81b7 	bne.w	800b872 <ReportDataAnalysis+0x3c6>
		{
			temp_report.FrameHead = (uint8_t) ReportReceive[i];
 800b504:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	4413      	add	r3, r2
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	733b      	strb	r3, [r7, #12]
			temp_report.CabinFunction = (uint8_t) (ReportReceive[i + 1] & 0x01);
 800b510:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b514:	3301      	adds	r3, #1
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	4413      	add	r3, r2
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	b2db      	uxtb	r3, r3
 800b522:	737b      	strb	r3, [r7, #13]
			temp_report.WaterDetect = (uint8_t) (ReportReceive[i + 1] & 0x02);
 800b524:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b528:	3301      	adds	r3, #1
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	4413      	add	r3, r2
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	b2db      	uxtb	r3, r3
 800b536:	73bb      	strb	r3, [r7, #14]

			temp_report.CabinTemperature =
					((uint16_t) ReportReceive[i + 2] << 8)
 800b538:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b53c:	3302      	adds	r3, #2
 800b53e:	683a      	ldr	r2, [r7, #0]
 800b540:	4413      	add	r3, r2
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	021b      	lsls	r3, r3, #8
							| ((uint16_t) ReportReceive[i + 3]);
 800b546:	b21a      	sxth	r2, r3
 800b548:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b54c:	3303      	adds	r3, #3
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	440b      	add	r3, r1
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	b21b      	sxth	r3, r3
 800b556:	4313      	orrs	r3, r2
 800b558:	b21b      	sxth	r3, r3
 800b55a:	b29b      	uxth	r3, r3
			temp_report.CabinTemperature =
 800b55c:	823b      	strh	r3, [r7, #16]
			temp_report.CabinBarometric = (((uint32_t) ReportReceive[i + 4])
 800b55e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b562:	3304      	adds	r3, #4
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	4413      	add	r3, r2
 800b568:	781b      	ldrb	r3, [r3, #0]
					<< 24) | (((uint32_t) ReportReceive[i + 5]) << 16)
 800b56a:	061a      	lsls	r2, r3, #24
 800b56c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b570:	3305      	adds	r3, #5
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	440b      	add	r3, r1
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	041b      	lsls	r3, r3, #16
 800b57a:	431a      	orrs	r2, r3
					| (((uint32_t) ReportReceive[i + 6]) << 8)
 800b57c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b580:	3306      	adds	r3, #6
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	440b      	add	r3, r1
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	021b      	lsls	r3, r3, #8
 800b58a:	4313      	orrs	r3, r2
					| ((uint32_t) ReportReceive[i + 7]);
 800b58c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800b590:	3207      	adds	r2, #7
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	440a      	add	r2, r1
 800b596:	7812      	ldrb	r2, [r2, #0]
 800b598:	4313      	orrs	r3, r2
			temp_report.CabinBarometric = (((uint32_t) ReportReceive[i + 4])
 800b59a:	617b      	str	r3, [r7, #20]
			temp_report.CabinHumidity = ((uint16_t) ReportReceive[i + 8] << 8)
 800b59c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 9]);
 800b5aa:	b21a      	sxth	r2, r3
 800b5ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5b0:	3309      	adds	r3, #9
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	440b      	add	r3, r1
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	b21b      	sxth	r3, r3
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	b21b      	sxth	r3, r3
 800b5be:	b29b      	uxth	r3, r3
			temp_report.CabinHumidity = ((uint16_t) ReportReceive[i + 8] << 8)
 800b5c0:	833b      	strh	r3, [r7, #24]

			temp_report.AccNum[0] = ((uint16_t) ReportReceive[i + 10] << 8)
 800b5c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5c6:	330a      	adds	r3, #10
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 11]);
 800b5d0:	b21a      	sxth	r2, r3
 800b5d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5d6:	330b      	adds	r3, #11
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	440b      	add	r3, r1
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	b21b      	sxth	r3, r3
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	b21b      	sxth	r3, r3
 800b5e4:	b29b      	uxth	r3, r3
			temp_report.AccNum[0] = ((uint16_t) ReportReceive[i + 10] << 8)
 800b5e6:	837b      	strh	r3, [r7, #26]
			temp_report.AccNum[1] = ((uint16_t) ReportReceive[i + 12] << 8)
 800b5e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5ec:	330c      	adds	r3, #12
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 13]);
 800b5f6:	b21a      	sxth	r2, r3
 800b5f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5fc:	330d      	adds	r3, #13
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	440b      	add	r3, r1
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	b21b      	sxth	r3, r3
 800b606:	4313      	orrs	r3, r2
 800b608:	b21b      	sxth	r3, r3
 800b60a:	b29b      	uxth	r3, r3
			temp_report.AccNum[1] = ((uint16_t) ReportReceive[i + 12] << 8)
 800b60c:	83bb      	strh	r3, [r7, #28]
			temp_report.AccNum[2] = ((uint16_t) ReportReceive[i + 14] << 8)
 800b60e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b612:	330e      	adds	r3, #14
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	4413      	add	r3, r2
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 15]);
 800b61c:	b21a      	sxth	r2, r3
 800b61e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b622:	330f      	adds	r3, #15
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	440b      	add	r3, r1
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	b21b      	sxth	r3, r3
 800b62c:	4313      	orrs	r3, r2
 800b62e:	b21b      	sxth	r3, r3
 800b630:	b29b      	uxth	r3, r3
			temp_report.AccNum[2] = ((uint16_t) ReportReceive[i + 14] << 8)
 800b632:	83fb      	strh	r3, [r7, #30]
			temp_report.RotNum[0] = ((uint16_t) ReportReceive[i + 16] << 8)
 800b634:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b638:	3310      	adds	r3, #16
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	4413      	add	r3, r2
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 17]);
 800b642:	b21a      	sxth	r2, r3
 800b644:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b648:	3311      	adds	r3, #17
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	440b      	add	r3, r1
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	b21b      	sxth	r3, r3
 800b652:	4313      	orrs	r3, r2
 800b654:	b21b      	sxth	r3, r3
 800b656:	b29b      	uxth	r3, r3
			temp_report.RotNum[0] = ((uint16_t) ReportReceive[i + 16] << 8)
 800b658:	843b      	strh	r3, [r7, #32]
			temp_report.RotNum[1] = ((uint16_t) ReportReceive[i + 18] << 8)
 800b65a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b65e:	3312      	adds	r3, #18
 800b660:	683a      	ldr	r2, [r7, #0]
 800b662:	4413      	add	r3, r2
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 19]);
 800b668:	b21a      	sxth	r2, r3
 800b66a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b66e:	3313      	adds	r3, #19
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	440b      	add	r3, r1
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	b21b      	sxth	r3, r3
 800b678:	4313      	orrs	r3, r2
 800b67a:	b21b      	sxth	r3, r3
 800b67c:	b29b      	uxth	r3, r3
			temp_report.RotNum[1] = ((uint16_t) ReportReceive[i + 18] << 8)
 800b67e:	847b      	strh	r3, [r7, #34]	; 0x22
			temp_report.RotNum[2] = ((uint16_t) ReportReceive[i + 20] << 8)
 800b680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b684:	3314      	adds	r3, #20
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	4413      	add	r3, r2
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 21]);
 800b68e:	b21a      	sxth	r2, r3
 800b690:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b694:	3315      	adds	r3, #21
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	440b      	add	r3, r1
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	b21b      	sxth	r3, r3
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	b21b      	sxth	r3, r3
 800b6a2:	b29b      	uxth	r3, r3
			temp_report.RotNum[2] = ((uint16_t) ReportReceive[i + 20] << 8)
 800b6a4:	84bb      	strh	r3, [r7, #36]	; 0x24
			temp_report.EulNum[0] = ((uint16_t) ReportReceive[i + 22] << 8)
 800b6a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b6aa:	3316      	adds	r3, #22
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 23]);
 800b6b4:	b21a      	sxth	r2, r3
 800b6b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b6ba:	3317      	adds	r3, #23
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	440b      	add	r3, r1
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	b21b      	sxth	r3, r3
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	b21b      	sxth	r3, r3
 800b6c8:	b29b      	uxth	r3, r3
			temp_report.EulNum[0] = ((uint16_t) ReportReceive[i + 22] << 8)
 800b6ca:	84fb      	strh	r3, [r7, #38]	; 0x26
			temp_report.EulNum[1] = ((uint16_t) ReportReceive[i + 24] << 8)
 800b6cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b6d0:	3318      	adds	r3, #24
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 25]);
 800b6da:	b21a      	sxth	r2, r3
 800b6dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b6e0:	3319      	adds	r3, #25
 800b6e2:	6839      	ldr	r1, [r7, #0]
 800b6e4:	440b      	add	r3, r1
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	b21b      	sxth	r3, r3
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	b21b      	sxth	r3, r3
 800b6ee:	b29b      	uxth	r3, r3
			temp_report.EulNum[1] = ((uint16_t) ReportReceive[i + 24] << 8)
 800b6f0:	853b      	strh	r3, [r7, #40]	; 0x28
			temp_report.EulNum[2] = ((uint16_t) ReportReceive[i + 26] << 8)
 800b6f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b6f6:	331a      	adds	r3, #26
 800b6f8:	683a      	ldr	r2, [r7, #0]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 27]);
 800b700:	b21a      	sxth	r2, r3
 800b702:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b706:	331b      	adds	r3, #27
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	440b      	add	r3, r1
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	b21b      	sxth	r3, r3
 800b710:	4313      	orrs	r3, r2
 800b712:	b21b      	sxth	r3, r3
 800b714:	b29b      	uxth	r3, r3
			temp_report.EulNum[2] = ((uint16_t) ReportReceive[i + 26] << 8)
 800b716:	857b      	strh	r3, [r7, #42]	; 0x2a
			temp_report.MagNum[0] = ((uint16_t) ReportReceive[i + 28] << 8)
 800b718:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b71c:	331c      	adds	r3, #28
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	4413      	add	r3, r2
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 29]);
 800b726:	b21a      	sxth	r2, r3
 800b728:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b72c:	331d      	adds	r3, #29
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	440b      	add	r3, r1
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	b21b      	sxth	r3, r3
 800b736:	4313      	orrs	r3, r2
 800b738:	b21b      	sxth	r3, r3
 800b73a:	b29b      	uxth	r3, r3
			temp_report.MagNum[0] = ((uint16_t) ReportReceive[i + 28] << 8)
 800b73c:	85bb      	strh	r3, [r7, #44]	; 0x2c
			temp_report.MagNum[1] = ((uint16_t) ReportReceive[i + 30] << 8)
 800b73e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b742:	331e      	adds	r3, #30
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	4413      	add	r3, r2
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 31]);
 800b74c:	b21a      	sxth	r2, r3
 800b74e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b752:	331f      	adds	r3, #31
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	440b      	add	r3, r1
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	b21b      	sxth	r3, r3
 800b75c:	4313      	orrs	r3, r2
 800b75e:	b21b      	sxth	r3, r3
 800b760:	b29b      	uxth	r3, r3
			temp_report.MagNum[1] = ((uint16_t) ReportReceive[i + 30] << 8)
 800b762:	85fb      	strh	r3, [r7, #46]	; 0x2e
			temp_report.MagNum[2] = ((uint16_t) ReportReceive[i + 32] << 8)
 800b764:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b768:	3320      	adds	r3, #32
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	4413      	add	r3, r2
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 33]);
 800b772:	b21a      	sxth	r2, r3
 800b774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b778:	3321      	adds	r3, #33	; 0x21
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	440b      	add	r3, r1
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	b21b      	sxth	r3, r3
 800b782:	4313      	orrs	r3, r2
 800b784:	b21b      	sxth	r3, r3
 800b786:	b29b      	uxth	r3, r3
			temp_report.MagNum[2] = ((uint16_t) ReportReceive[i + 32] << 8)
 800b788:	863b      	strh	r3, [r7, #48]	; 0x30

			temp_report.SonarHeight = (((uint32_t) ReportReceive[i + 34]) << 24)
 800b78a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b78e:	3322      	adds	r3, #34	; 0x22
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	4413      	add	r3, r2
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	061a      	lsls	r2, r3, #24
					| (((uint32_t) ReportReceive[i + 35]) << 16)
 800b798:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b79c:	3323      	adds	r3, #35	; 0x23
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	440b      	add	r3, r1
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	041b      	lsls	r3, r3, #16
 800b7a6:	431a      	orrs	r2, r3
					| (((uint32_t) ReportReceive[i + 36]) << 8)
 800b7a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b7ac:	3324      	adds	r3, #36	; 0x24
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	440b      	add	r3, r1
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	021b      	lsls	r3, r3, #8
 800b7b6:	4313      	orrs	r3, r2
					| ((uint32_t) ReportReceive[i + 37]);
 800b7b8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800b7bc:	3225      	adds	r2, #37	; 0x25
 800b7be:	6839      	ldr	r1, [r7, #0]
 800b7c0:	440a      	add	r2, r1
 800b7c2:	7812      	ldrb	r2, [r2, #0]
 800b7c4:	4313      	orrs	r3, r2
			temp_report.SonarHeight = (((uint32_t) ReportReceive[i + 34]) << 24)
 800b7c6:	637b      	str	r3, [r7, #52]	; 0x34
			temp_report.SonarConfidence =
					((uint16_t) ReportReceive[i + 38] << 8)
 800b7c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b7cc:	3326      	adds	r3, #38	; 0x26
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	021b      	lsls	r3, r3, #8
							| ((uint16_t) ReportReceive[i + 39]);
 800b7d6:	b21a      	sxth	r2, r3
 800b7d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b7dc:	3327      	adds	r3, #39	; 0x27
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	440b      	add	r3, r1
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	b21b      	sxth	r3, r3
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	b21b      	sxth	r3, r3
 800b7ea:	b29b      	uxth	r3, r3
			temp_report.SonarConfidence =
 800b7ec:	873b      	strh	r3, [r7, #56]	; 0x38

			temp_report.WaterTemperature = ((uint16_t) ReportReceive[i + 40]
 800b7ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b7f2:	3328      	adds	r3, #40	; 0x28
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	781b      	ldrb	r3, [r3, #0]
					<< 8) | ((uint16_t) ReportReceive[i + 41]);
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	b21a      	sxth	r2, r3
 800b7fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b802:	3329      	adds	r3, #41	; 0x29
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	440b      	add	r3, r1
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	b21b      	sxth	r3, r3
 800b80c:	4313      	orrs	r3, r2
 800b80e:	b21b      	sxth	r3, r3
 800b810:	b29b      	uxth	r3, r3
			temp_report.WaterTemperature = ((uint16_t) ReportReceive[i + 40]
 800b812:	877b      	strh	r3, [r7, #58]	; 0x3a
			temp_report.WaterDepth = ((uint16_t) ReportReceive[i + 42] << 8)
 800b814:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b818:	332a      	adds	r3, #42	; 0x2a
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	4413      	add	r3, r2
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 43]);
 800b822:	b21a      	sxth	r2, r3
 800b824:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b828:	332b      	adds	r3, #43	; 0x2b
 800b82a:	6839      	ldr	r1, [r7, #0]
 800b82c:	440b      	add	r3, r1
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	b21b      	sxth	r3, r3
 800b832:	4313      	orrs	r3, r2
 800b834:	b21b      	sxth	r3, r3
 800b836:	b29b      	uxth	r3, r3
			temp_report.WaterDepth = ((uint16_t) ReportReceive[i + 42] << 8)
 800b838:	87bb      	strh	r3, [r7, #60]	; 0x3c

			temp_report.IdTest = (uint16_t) ReportReceive[i + 44];
 800b83a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b83e:	332c      	adds	r3, #44	; 0x2c
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	4413      	add	r3, r2
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			temp_report.FrameEnd = ((uint16_t) ReportReceive[i + 45] << 8)
 800b84a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b84e:	332d      	adds	r3, #45	; 0x2d
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	4413      	add	r3, r2
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	021b      	lsls	r3, r3, #8
					| ((uint16_t) ReportReceive[i + 46]);
 800b858:	b21a      	sxth	r2, r3
 800b85a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b85e:	332e      	adds	r3, #46	; 0x2e
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	440b      	add	r3, r1
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	b21b      	sxth	r3, r3
 800b868:	4313      	orrs	r3, r2
 800b86a:	b21b      	sxth	r3, r3
 800b86c:	b29b      	uxth	r3, r3
			temp_report.FrameEnd = ((uint16_t) ReportReceive[i + 45] << 8)
 800b86e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	for (uint8_t i = 0; i < Slave_UART_RXLen * 2; i++)
 800b872:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b876:	3301      	adds	r3, #1
 800b878:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b87c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b880:	2b5d      	cmp	r3, #93	; 0x5d
 800b882:	f67f ae1c 	bls.w	800b4be <ReportDataAnalysis+0x12>
		}
	}
	return temp_report;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	461d      	mov	r5, r3
 800b88a:	f107 040c 	add.w	r4, r7, #12
 800b88e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b89a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b89e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	374c      	adds	r7, #76	; 0x4c
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bcb0      	pop	{r4, r5, r7}
 800b8aa:	4770      	bx	lr

0800b8ac <CaptureControlData>:
//
//	return CaptureData;
//}

void CaptureControlData(ControlData_t* CaptureData, uint8_t *CommandReceive)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < Master_UART_RXLen; i++)
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]
 800b8ba:	e120      	b.n	800bafe <CaptureControlData+0x252>
	{
		if ((CommandReceive[i] == 0x25) && (CommandReceive[i + 29] == 0x21)
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	2b25      	cmp	r3, #37	; 0x25
 800b8c6:	f040 8116 	bne.w	800baf6 <CaptureControlData+0x24a>
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
 800b8cc:	331d      	adds	r3, #29
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	2b21      	cmp	r3, #33	; 0x21
 800b8d6:	f040 810e 	bne.w	800baf6 <CaptureControlData+0x24a>
				&& (CommandReceive[i + 28] == 0x00))
 800b8da:	7bfb      	ldrb	r3, [r7, #15]
 800b8dc:	331c      	adds	r3, #28
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f040 8106 	bne.w	800baf6 <CaptureControlData+0x24a>
		{
			CaptureData->FrameHead = (CommandReceive[i]);
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	781a      	ldrb	r2, [r3, #0]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	701a      	strb	r2, [r3, #0]
			CaptureData->StraightNum = ((CommandReceive[i + 1] << 8)
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 2]);
 800b902:	b21a      	sxth	r2, r3
 800b904:	7bfb      	ldrb	r3, [r7, #15]
 800b906:	3302      	adds	r3, #2
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	440b      	add	r3, r1
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	b21b      	sxth	r3, r3
 800b910:	4313      	orrs	r3, r2
 800b912:	b21b      	sxth	r3, r3
 800b914:	b29a      	uxth	r2, r3
			CaptureData->StraightNum = ((CommandReceive[i + 1] << 8)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	805a      	strh	r2, [r3, #2]
			CaptureData->RotateNum = ((CommandReceive[i + 3] << 8)
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	3303      	adds	r3, #3
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	4413      	add	r3, r2
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 4]);
 800b926:	b21a      	sxth	r2, r3
 800b928:	7bfb      	ldrb	r3, [r7, #15]
 800b92a:	3304      	adds	r3, #4
 800b92c:	6839      	ldr	r1, [r7, #0]
 800b92e:	440b      	add	r3, r1
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	b21b      	sxth	r3, r3
 800b934:	4313      	orrs	r3, r2
 800b936:	b21b      	sxth	r3, r3
 800b938:	b29a      	uxth	r2, r3
			CaptureData->RotateNum = ((CommandReceive[i + 3] << 8)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	809a      	strh	r2, [r3, #4]
			CaptureData->VerticalNum = ((CommandReceive[i + 5] << 8)
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
 800b940:	3305      	adds	r3, #5
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	4413      	add	r3, r2
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 6]);
 800b94a:	b21a      	sxth	r2, r3
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	3306      	adds	r3, #6
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	440b      	add	r3, r1
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	b21b      	sxth	r3, r3
 800b958:	4313      	orrs	r3, r2
 800b95a:	b21b      	sxth	r3, r3
 800b95c:	b29a      	uxth	r2, r3
			CaptureData->VerticalNum = ((CommandReceive[i + 5] << 8)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	80da      	strh	r2, [r3, #6]
			CaptureData->LightNum = ((CommandReceive[i + 7] << 8)
 800b962:	7bfb      	ldrb	r3, [r7, #15]
 800b964:	3307      	adds	r3, #7
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	4413      	add	r3, r2
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 8]);
 800b96e:	b21a      	sxth	r2, r3
 800b970:	7bfb      	ldrb	r3, [r7, #15]
 800b972:	3308      	adds	r3, #8
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	440b      	add	r3, r1
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	b21b      	sxth	r3, r3
 800b97c:	4313      	orrs	r3, r2
 800b97e:	b21b      	sxth	r3, r3
 800b980:	b29a      	uxth	r2, r3
			CaptureData->LightNum = ((CommandReceive[i + 7] << 8)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	811a      	strh	r2, [r3, #8]
			CaptureData->PanNum = ((CommandReceive[i + 9] << 8)
 800b986:	7bfb      	ldrb	r3, [r7, #15]
 800b988:	3309      	adds	r3, #9
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	4413      	add	r3, r2
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 10]);
 800b992:	b21a      	sxth	r2, r3
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	330a      	adds	r3, #10
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	440b      	add	r3, r1
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b21b      	sxth	r3, r3
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	b21b      	sxth	r3, r3
 800b9a4:	b29a      	uxth	r2, r3
			CaptureData->PanNum = ((CommandReceive[i + 9] << 8)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	815a      	strh	r2, [r3, #10]
			CaptureData->ConveyNum = ((CommandReceive[i + 11] << 8)
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	330b      	adds	r3, #11
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 12]);
 800b9b6:	b21a      	sxth	r2, r3
 800b9b8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ba:	330c      	adds	r3, #12
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	440b      	add	r3, r1
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	b21b      	sxth	r3, r3
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	b21b      	sxth	r3, r3
 800b9c8:	b29a      	uxth	r2, r3
			CaptureData->ConveyNum = ((CommandReceive[i + 11] << 8)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	819a      	strh	r2, [r3, #12]

			CaptureData->ArmNum[0] = ((CommandReceive[i + 13] << 8)
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
 800b9d0:	330d      	adds	r3, #13
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 14]);
 800b9da:	b21a      	sxth	r2, r3
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
 800b9de:	330e      	adds	r3, #14
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	440b      	add	r3, r1
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	b21b      	sxth	r3, r3
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	b21b      	sxth	r3, r3
 800b9ec:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[0] = ((CommandReceive[i + 13] << 8)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	81da      	strh	r2, [r3, #14]
			CaptureData->ArmNum[1] = ((CommandReceive[i + 15] << 8)
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
 800b9f4:	330f      	adds	r3, #15
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 16]);
 800b9fe:	b21a      	sxth	r2, r3
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
 800ba02:	3310      	adds	r3, #16
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	440b      	add	r3, r1
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	b21b      	sxth	r3, r3
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	b21b      	sxth	r3, r3
 800ba10:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[1] = ((CommandReceive[i + 15] << 8)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	821a      	strh	r2, [r3, #16]
			CaptureData->ArmNum[2] = ((CommandReceive[i + 17] << 8)
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	3311      	adds	r3, #17
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 18]);
 800ba22:	b21a      	sxth	r2, r3
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
 800ba26:	3312      	adds	r3, #18
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	440b      	add	r3, r1
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	b21b      	sxth	r3, r3
 800ba30:	4313      	orrs	r3, r2
 800ba32:	b21b      	sxth	r3, r3
 800ba34:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[2] = ((CommandReceive[i + 17] << 8)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	825a      	strh	r2, [r3, #18]
			CaptureData->ArmNum[3] = ((CommandReceive[i + 19] << 8)
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
 800ba3c:	3313      	adds	r3, #19
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	4413      	add	r3, r2
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 20]);
 800ba46:	b21a      	sxth	r2, r3
 800ba48:	7bfb      	ldrb	r3, [r7, #15]
 800ba4a:	3314      	adds	r3, #20
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	440b      	add	r3, r1
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	b21b      	sxth	r3, r3
 800ba54:	4313      	orrs	r3, r2
 800ba56:	b21b      	sxth	r3, r3
 800ba58:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[3] = ((CommandReceive[i + 19] << 8)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	829a      	strh	r2, [r3, #20]
			CaptureData->ArmNum[4] = ((CommandReceive[i + 21] << 8)
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
 800ba60:	3315      	adds	r3, #21
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	4413      	add	r3, r2
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 22]);
 800ba6a:	b21a      	sxth	r2, r3
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
 800ba6e:	3316      	adds	r3, #22
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	440b      	add	r3, r1
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	b21b      	sxth	r3, r3
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	b21b      	sxth	r3, r3
 800ba7c:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[4] = ((CommandReceive[i + 21] << 8)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	82da      	strh	r2, [r3, #22]
			CaptureData->ArmNum[5] = ((CommandReceive[i + 23] << 8)
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
 800ba84:	3317      	adds	r3, #23
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	4413      	add	r3, r2
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 24]);
 800ba8e:	b21a      	sxth	r2, r3
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	3318      	adds	r3, #24
 800ba94:	6839      	ldr	r1, [r7, #0]
 800ba96:	440b      	add	r3, r1
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	b21b      	sxth	r3, r3
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	b21b      	sxth	r3, r3
 800baa0:	b29a      	uxth	r2, r3
			CaptureData->ArmNum[5] = ((CommandReceive[i + 23] << 8)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	831a      	strh	r2, [r3, #24]
			CaptureData->RestNum = ((CommandReceive[i + 25] << 8)
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	3319      	adds	r3, #25
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	4413      	add	r3, r2
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	021b      	lsls	r3, r3, #8
					| CommandReceive[i + 26]);
 800bab2:	b21a      	sxth	r2, r3
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
 800bab6:	331a      	adds	r3, #26
 800bab8:	6839      	ldr	r1, [r7, #0]
 800baba:	440b      	add	r3, r1
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	b21b      	sxth	r3, r3
 800bac0:	4313      	orrs	r3, r2
 800bac2:	b21b      	sxth	r3, r3
 800bac4:	b29a      	uxth	r2, r3
			CaptureData->RestNum = ((CommandReceive[i + 25] << 8)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	835a      	strh	r2, [r3, #26]
			CaptureData->Mode = CommandReceive[i + 27];
 800baca:	7bfb      	ldrb	r3, [r7, #15]
 800bacc:	331b      	adds	r3, #27
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	4413      	add	r3, r2
 800bad2:	781a      	ldrb	r2, [r3, #0]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	771a      	strb	r2, [r3, #28]
			CaptureData->IdTest = CommandReceive[i + 28];
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
 800bada:	331c      	adds	r3, #28
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	4413      	add	r3, r2
 800bae0:	781a      	ldrb	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	775a      	strb	r2, [r3, #29]
			CaptureData->FrameEnd = (CommandReceive[i + 29]);
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
 800bae8:	331d      	adds	r3, #29
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	4413      	add	r3, r2
 800baee:	781a      	ldrb	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	779a      	strb	r2, [r3, #30]
 800baf4:	e000      	b.n	800baf8 <CaptureControlData+0x24c>
		}
		else
		{
			continue;
 800baf6:	bf00      	nop
	for (uint8_t i = 0; i < Master_UART_RXLen; i++)
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	3301      	adds	r3, #1
 800bafc:	73fb      	strb	r3, [r7, #15]
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	2b1d      	cmp	r3, #29
 800bb02:	f67f aedb 	bls.w	800b8bc <CaptureControlData+0x10>
		}
	}
}
 800bb06:	bf00      	nop
 800bb08:	bf00      	nop
 800bb0a:	3714      	adds	r7, #20
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <ControlDataGenerate>:
	temp_pwm->ArmServo[5] = controller.ArmNum[5]; //rest machine arm
	temp_pwm->RestServo = controller.RestNum; //rest pwm
}

void ControlDataGenerate(ControlData_t controller, uint8_t *CommandTransmit)
{
 800bb14:	b084      	sub	sp, #16
 800bb16:	b490      	push	{r4, r7}
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	f107 0408 	add.w	r4, r7, #8
 800bb1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CommandTransmit[0] = controller.FrameHead;
 800bb22:	7a3a      	ldrb	r2, [r7, #8]
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	701a      	strb	r2, [r3, #0]

	CommandTransmit[1] = (uint8_t) ((controller.StraightNum & 0xFF00) >> 8);
 800bb28:	897b      	ldrh	r3, [r7, #10]
 800bb2a:	0a1b      	lsrs	r3, r3, #8
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb30:	3301      	adds	r3, #1
 800bb32:	b2d2      	uxtb	r2, r2
 800bb34:	701a      	strb	r2, [r3, #0]
	CommandTransmit[2] = (uint8_t) (controller.StraightNum & 0x00FF);
 800bb36:	897a      	ldrh	r2, [r7, #10]
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	3302      	adds	r3, #2
 800bb3c:	b2d2      	uxtb	r2, r2
 800bb3e:	701a      	strb	r2, [r3, #0]
	CommandTransmit[3] = (uint8_t) ((controller.RotateNum & 0xFF00) >> 8);
 800bb40:	89bb      	ldrh	r3, [r7, #12]
 800bb42:	0a1b      	lsrs	r3, r3, #8
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	3303      	adds	r3, #3
 800bb4a:	b2d2      	uxtb	r2, r2
 800bb4c:	701a      	strb	r2, [r3, #0]
	CommandTransmit[4] = (uint8_t) (controller.RotateNum & 0x00FF);
 800bb4e:	89ba      	ldrh	r2, [r7, #12]
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	3304      	adds	r3, #4
 800bb54:	b2d2      	uxtb	r2, r2
 800bb56:	701a      	strb	r2, [r3, #0]
	CommandTransmit[5] = (uint8_t) ((controller.VerticalNum & 0xFF00) >> 8);
 800bb58:	89fb      	ldrh	r3, [r7, #14]
 800bb5a:	0a1b      	lsrs	r3, r3, #8
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb60:	3305      	adds	r3, #5
 800bb62:	b2d2      	uxtb	r2, r2
 800bb64:	701a      	strb	r2, [r3, #0]
	CommandTransmit[6] = (uint8_t) (controller.VerticalNum & 0x00FF);
 800bb66:	89fa      	ldrh	r2, [r7, #14]
 800bb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6a:	3306      	adds	r3, #6
 800bb6c:	b2d2      	uxtb	r2, r2
 800bb6e:	701a      	strb	r2, [r3, #0]

	CommandTransmit[7] = (uint8_t) ((controller.LightNum & 0xFF00) >> 8);
 800bb70:	8a3b      	ldrh	r3, [r7, #16]
 800bb72:	0a1b      	lsrs	r3, r3, #8
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb78:	3307      	adds	r3, #7
 800bb7a:	b2d2      	uxtb	r2, r2
 800bb7c:	701a      	strb	r2, [r3, #0]
	CommandTransmit[8] = (uint8_t) (controller.LightNum & 0x00FF);
 800bb7e:	8a3a      	ldrh	r2, [r7, #16]
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	3308      	adds	r3, #8
 800bb84:	b2d2      	uxtb	r2, r2
 800bb86:	701a      	strb	r2, [r3, #0]

	CommandTransmit[9] = (uint8_t) ((controller.PanNum & 0xFF00) >> 8);
 800bb88:	8a7b      	ldrh	r3, [r7, #18]
 800bb8a:	0a1b      	lsrs	r3, r3, #8
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	3309      	adds	r3, #9
 800bb92:	b2d2      	uxtb	r2, r2
 800bb94:	701a      	strb	r2, [r3, #0]
	CommandTransmit[10] = (uint8_t) (controller.PanNum & 0x00FF);
 800bb96:	8a7a      	ldrh	r2, [r7, #18]
 800bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9a:	330a      	adds	r3, #10
 800bb9c:	b2d2      	uxtb	r2, r2
 800bb9e:	701a      	strb	r2, [r3, #0]

	CommandTransmit[11] = (uint8_t) ((controller.ConveyNum & 0xFF00) >> 8);
 800bba0:	8abb      	ldrh	r3, [r7, #20]
 800bba2:	0a1b      	lsrs	r3, r3, #8
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba8:	330b      	adds	r3, #11
 800bbaa:	b2d2      	uxtb	r2, r2
 800bbac:	701a      	strb	r2, [r3, #0]
	CommandTransmit[12] = (uint8_t) (controller.ConveyNum & 0x00FF);
 800bbae:	8aba      	ldrh	r2, [r7, #20]
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	330c      	adds	r3, #12
 800bbb4:	b2d2      	uxtb	r2, r2
 800bbb6:	701a      	strb	r2, [r3, #0]

	CommandTransmit[13] = (uint8_t) ((controller.ArmNum[0] & 0xFF00) >> 8);
 800bbb8:	8afb      	ldrh	r3, [r7, #22]
 800bbba:	0a1b      	lsrs	r3, r3, #8
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc0:	330d      	adds	r3, #13
 800bbc2:	b2d2      	uxtb	r2, r2
 800bbc4:	701a      	strb	r2, [r3, #0]
	CommandTransmit[14] = (uint8_t) (controller.ArmNum[0] & 0x00FF);
 800bbc6:	8afa      	ldrh	r2, [r7, #22]
 800bbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbca:	330e      	adds	r3, #14
 800bbcc:	b2d2      	uxtb	r2, r2
 800bbce:	701a      	strb	r2, [r3, #0]
	CommandTransmit[15] = (uint8_t) ((controller.ArmNum[1] & 0xFF00) >> 8);
 800bbd0:	8b3b      	ldrh	r3, [r7, #24]
 800bbd2:	0a1b      	lsrs	r3, r3, #8
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd8:	330f      	adds	r3, #15
 800bbda:	b2d2      	uxtb	r2, r2
 800bbdc:	701a      	strb	r2, [r3, #0]
	CommandTransmit[16] = (uint8_t) (controller.ArmNum[1] & 0x00FF);
 800bbde:	8b3a      	ldrh	r2, [r7, #24]
 800bbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe2:	3310      	adds	r3, #16
 800bbe4:	b2d2      	uxtb	r2, r2
 800bbe6:	701a      	strb	r2, [r3, #0]
	CommandTransmit[17] = (uint8_t) ((controller.ArmNum[2] & 0xFF00) >> 8);
 800bbe8:	8b7b      	ldrh	r3, [r7, #26]
 800bbea:	0a1b      	lsrs	r3, r3, #8
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf0:	3311      	adds	r3, #17
 800bbf2:	b2d2      	uxtb	r2, r2
 800bbf4:	701a      	strb	r2, [r3, #0]
	CommandTransmit[18] = (uint8_t) (controller.ArmNum[2] & 0x00FF);
 800bbf6:	8b7a      	ldrh	r2, [r7, #26]
 800bbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfa:	3312      	adds	r3, #18
 800bbfc:	b2d2      	uxtb	r2, r2
 800bbfe:	701a      	strb	r2, [r3, #0]
	CommandTransmit[19] = (uint8_t) ((controller.ArmNum[3] & 0xFF00) >> 8);
 800bc00:	8bbb      	ldrh	r3, [r7, #28]
 800bc02:	0a1b      	lsrs	r3, r3, #8
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc08:	3313      	adds	r3, #19
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	701a      	strb	r2, [r3, #0]
	CommandTransmit[20] = (uint8_t) (controller.ArmNum[3] & 0x00FF);
 800bc0e:	8bba      	ldrh	r2, [r7, #28]
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	3314      	adds	r3, #20
 800bc14:	b2d2      	uxtb	r2, r2
 800bc16:	701a      	strb	r2, [r3, #0]
	CommandTransmit[21] = (uint8_t) ((controller.ArmNum[4] & 0xFF00) >> 8);
 800bc18:	8bfb      	ldrh	r3, [r7, #30]
 800bc1a:	0a1b      	lsrs	r3, r3, #8
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	3315      	adds	r3, #21
 800bc22:	b2d2      	uxtb	r2, r2
 800bc24:	701a      	strb	r2, [r3, #0]
	CommandTransmit[22] = (uint8_t) (controller.ArmNum[4] & 0x00FF);
 800bc26:	8bfa      	ldrh	r2, [r7, #30]
 800bc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2a:	3316      	adds	r3, #22
 800bc2c:	b2d2      	uxtb	r2, r2
 800bc2e:	701a      	strb	r2, [r3, #0]
	CommandTransmit[23] = (uint8_t) ((controller.ArmNum[5] & 0xFF00) >> 8);
 800bc30:	8c3b      	ldrh	r3, [r7, #32]
 800bc32:	0a1b      	lsrs	r3, r3, #8
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	3317      	adds	r3, #23
 800bc3a:	b2d2      	uxtb	r2, r2
 800bc3c:	701a      	strb	r2, [r3, #0]
	CommandTransmit[24] = (uint8_t) (controller.ArmNum[5] & 0x00FF);
 800bc3e:	8c3a      	ldrh	r2, [r7, #32]
 800bc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc42:	3318      	adds	r3, #24
 800bc44:	b2d2      	uxtb	r2, r2
 800bc46:	701a      	strb	r2, [r3, #0]

	CommandTransmit[25] = (uint8_t) ((controller.RestNum & 0xFF00) >> 8);
 800bc48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc4a:	0a1b      	lsrs	r3, r3, #8
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc50:	3319      	adds	r3, #25
 800bc52:	b2d2      	uxtb	r2, r2
 800bc54:	701a      	strb	r2, [r3, #0]
	CommandTransmit[26] = (uint8_t) (controller.RestNum & 0x00FF);
 800bc56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	331a      	adds	r3, #26
 800bc5c:	b2d2      	uxtb	r2, r2
 800bc5e:	701a      	strb	r2, [r3, #0]

	CommandTransmit[27] = controller.Mode;
 800bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc62:	331b      	adds	r3, #27
 800bc64:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800bc68:	701a      	strb	r2, [r3, #0]
	CommandTransmit[28] = controller.IdTest;
 800bc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6c:	331c      	adds	r3, #28
 800bc6e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800bc72:	701a      	strb	r2, [r3, #0]
	CommandTransmit[29] = controller.FrameEnd;
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	331d      	adds	r3, #29
 800bc78:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bc7c:	701a      	strb	r2, [r3, #0]
}
 800bc7e:	bf00      	nop
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bc90      	pop	{r4, r7}
 800bc84:	b004      	add	sp, #16
 800bc86:	4770      	bx	lr

0800bc88 <InitP30>:
#include "Sensor.h"

#if defined USING_GP30_SENSOR
void InitP30(uint8_t *P30Send)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
	//42 52 02 00 78 05 00 00 BB 04 D2 01
	*(P30Send + 0) = 0x42;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2242      	movs	r2, #66	; 0x42
 800bc94:	701a      	strb	r2, [r3, #0]
	*(P30Send + 1) = 0x52;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	2252      	movs	r2, #82	; 0x52
 800bc9c:	701a      	strb	r2, [r3, #0]
	*(P30Send + 2) = 0x02;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	3302      	adds	r3, #2
 800bca2:	2202      	movs	r2, #2
 800bca4:	701a      	strb	r2, [r3, #0]
	*(P30Send + 3) = 0x00;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3303      	adds	r3, #3
 800bcaa:	2200      	movs	r2, #0
 800bcac:	701a      	strb	r2, [r3, #0]
	*(P30Send + 4) = 0x05;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3304      	adds	r3, #4
 800bcb2:	2205      	movs	r2, #5
 800bcb4:	701a      	strb	r2, [r3, #0]
	*(P30Send + 5) = 0x00;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	3305      	adds	r3, #5
 800bcba:	2200      	movs	r2, #0
 800bcbc:	701a      	strb	r2, [r3, #0]
	*(P30Send + 6) = 0x00;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3306      	adds	r3, #6
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	701a      	strb	r2, [r3, #0]
	*(P30Send + 7) = 0x00;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3307      	adds	r3, #7
 800bcca:	2200      	movs	r2, #0
 800bccc:	701a      	strb	r2, [r3, #0]
	*(P30Send + 8) = 0xBB;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	22bb      	movs	r2, #187	; 0xbb
 800bcd4:	701a      	strb	r2, [r3, #0]
	*(P30Send + 9) = 0x04;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3309      	adds	r3, #9
 800bcda:	2204      	movs	r2, #4
 800bcdc:	701a      	strb	r2, [r3, #0]
	*(P30Send + 10) = 0xD2;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	330a      	adds	r3, #10
 800bce2:	22d2      	movs	r2, #210	; 0xd2
 800bce4:	701a      	strb	r2, [r3, #0]
	*(P30Send + 11) = 0x01;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	330b      	adds	r3, #11
 800bcea:	2201      	movs	r2, #1
 800bcec:	701a      	strb	r2, [r3, #0]
}
 800bcee:	bf00      	nop
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
	...

0800bcfc <ReceiveP30>:
/**
 * @brief 接收声呐传感器数据
 * @return P30Data 声呐传感器数据结构体
 */
SonarData_t ReceiveP30(uint8_t *P30Receive)
{
 800bcfc:	b490      	push	{r4, r7}
 800bcfe:	b08a      	sub	sp, #40	; 0x28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
	SonarData_t RecvP30;
	RecvP30.SonarDistance = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	61fb      	str	r3, [r7, #28]

	uint8_t FrameState = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Bytenum = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t CheckSum = 0;
 800bd16:	2300      	movs	r3, #0
 800bd18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t datahex[11];

	for (uint8_t i = 0; i < 33; i++)
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800bd22:	e089      	b.n	800be38 <ReceiveP30+0x13c>
	{
		if (FrameState == 0)
 800bd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d131      	bne.n	800bd90 <ReceiveP30+0x94>
		{
			if ((P30Receive[i] == 0x42) && (Bytenum == 0))
 800bd2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	4413      	add	r3, r2
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	2b42      	cmp	r3, #66	; 0x42
 800bd38:	d10e      	bne.n	800bd58 <ReceiveP30+0x5c>
 800bd3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10a      	bne.n	800bd58 <ReceiveP30+0x5c>
			{
				CheckSum = P30Receive[i];
 800bd42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	4413      	add	r3, r2
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Bytenum = 1;
 800bd50:	2301      	movs	r3, #1
 800bd52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				continue;
 800bd56:	e06a      	b.n	800be2e <ReceiveP30+0x132>
			}
			else if ((P30Receive[i] == 0x52) && (Bytenum == 1))
 800bd58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	4413      	add	r3, r2
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2b52      	cmp	r3, #82	; 0x52
 800bd64:	d163      	bne.n	800be2e <ReceiveP30+0x132>
 800bd66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d15f      	bne.n	800be2e <ReceiveP30+0x132>
			{
				CheckSum += P30Receive[i];
 800bd6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4413      	add	r3, r2
 800bd76:	781a      	ldrb	r2, [r3, #0]
 800bd78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Bytenum = 2;
 800bd82:	2302      	movs	r3, #2
 800bd84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				FrameState = 1;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				continue;
 800bd8e:	e04e      	b.n	800be2e <ReceiveP30+0x132>
			}
		}
		else if (FrameState == 1)
 800bd90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d14a      	bne.n	800be2e <ReceiveP30+0x132>
		{
			if (Bytenum < 13)
 800bd98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd9c:	2b0c      	cmp	r3, #12
 800bd9e:	d81c      	bhi.n	800bdda <ReceiveP30+0xde>
			{
				datahex[Bytenum - 2] = P30Receive[i];
 800bda0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	441a      	add	r2, r3
 800bda8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdac:	3b02      	subs	r3, #2
 800bdae:	7812      	ldrb	r2, [r2, #0]
 800bdb0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bdb4:	440b      	add	r3, r1
 800bdb6:	f803 2c1c 	strb.w	r2, [r3, #-28]
				CheckSum += P30Receive[i];
 800bdba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	781a      	ldrb	r2, [r3, #0]
 800bdc4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bdc8:	4413      	add	r3, r2
 800bdca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Bytenum++;
 800bdce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bdd8:	e029      	b.n	800be2e <ReceiveP30+0x132>
			}
			else
			{
				if (P30Receive[i] == (CheckSum & 0xFF))
 800bdda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	4413      	add	r3, r2
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d117      	bne.n	800be1c <ReceiveP30+0x120>
				{
					RecvP30.Confidence = (((uint16_t) datahex[10]) << 8)
 800bdec:	7dbb      	ldrb	r3, [r7, #22]
 800bdee:	021b      	lsls	r3, r3, #8
							| ((uint16_t) datahex[11]);
 800bdf0:	b21a      	sxth	r2, r3
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	b21b      	sxth	r3, r3
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	b21b      	sxth	r3, r3
 800bdfa:	b29b      	uxth	r3, r3
					RecvP30.Confidence = (((uint16_t) datahex[10]) << 8)
 800bdfc:	843b      	strh	r3, [r7, #32]
					RecvP30.SonarHeight = (((((uint32_t) datahex[6]) << 24)
 800bdfe:	7cbb      	ldrb	r3, [r7, #18]
 800be00:	061a      	lsls	r2, r3, #24
							| (((uint32_t) datahex[7]) << 16)
 800be02:	7cfb      	ldrb	r3, [r7, #19]
 800be04:	041b      	lsls	r3, r3, #16
 800be06:	431a      	orrs	r2, r3
							| (((uint32_t) datahex[8]) << 8)
 800be08:	7d3b      	ldrb	r3, [r7, #20]
 800be0a:	021b      	lsls	r3, r3, #8
 800be0c:	4313      	orrs	r3, r2
							| ((uint32_t) datahex[9])) / 1000);
 800be0e:	7d7a      	ldrb	r2, [r7, #21]
 800be10:	4313      	orrs	r3, r2
 800be12:	4a12      	ldr	r2, [pc, #72]	; (800be5c <ReceiveP30+0x160>)
 800be14:	fba2 2303 	umull	r2, r3, r2, r3
 800be18:	099b      	lsrs	r3, r3, #6
					RecvP30.SonarHeight = (((((uint32_t) datahex[6]) << 24)
 800be1a:	61bb      	str	r3, [r7, #24]
				}
				CheckSum = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Bytenum = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				FrameState = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 33; i++)
 800be2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be32:	3301      	adds	r3, #1
 800be34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800be38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be3c:	2b20      	cmp	r3, #32
 800be3e:	f67f af71 	bls.w	800bd24 <ReceiveP30+0x28>
			}
		}
	}

	return RecvP30;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	461c      	mov	r4, r3
 800be46:	f107 0318 	add.w	r3, r7, #24
 800be4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	3728      	adds	r7, #40	; 0x28
 800be56:	46bd      	mov	sp, r7
 800be58:	bc90      	pop	{r4, r7}
 800be5a:	4770      	bx	lr
 800be5c:	10624dd3 	.word	0x10624dd3

0800be60 <ReceiveDeep>:
	return RecvDeep;
}

#else
DepthData_t ReceiveDeep(uint8_t *DeepReceive)
{
 800be60:	b490      	push	{r4, r7}
 800be62:	b088      	sub	sp, #32
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
	DepthData_t RecvDeep;

	uint8_t temperature_origin_data[4] =
 800be6a:	2300      	movs	r3, #0
 800be6c:	60fb      	str	r3, [r7, #12]
	{ 0 };
	uint8_t depth_origin_data[3] =
 800be6e:	4b8c      	ldr	r3, [pc, #560]	; (800c0a0 <ReceiveDeep+0x240>)
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	813b      	strh	r3, [r7, #8]
 800be74:	2300      	movs	r3, #0
 800be76:	72bb      	strb	r3, [r7, #10]
	{ 0 };

	for (int i = 0; i < Deep_UART_RXLen; i++)
 800be78:	2300      	movs	r3, #0
 800be7a:	61fb      	str	r3, [r7, #28]
 800be7c:	e0bf      	b.n	800bffe <ReceiveDeep+0x19e>
	{
		if ((DeepReceive[i] == 'T') && (DeepReceive[i + 1] == '=')) //解析温度
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	4413      	add	r3, r2
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	2b54      	cmp	r3, #84	; 0x54
 800be88:	d15d      	bne.n	800bf46 <ReceiveDeep+0xe6>
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	3301      	adds	r3, #1
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	4413      	add	r3, r2
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b3d      	cmp	r3, #61	; 0x3d
 800be96:	d156      	bne.n	800bf46 <ReceiveDeep+0xe6>
		{
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9')) //温度为正
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	3302      	adds	r3, #2
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	4413      	add	r3, r2
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2b2f      	cmp	r3, #47	; 0x2f
 800bea4:	d927      	bls.n	800bef6 <ReceiveDeep+0x96>
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	3302      	adds	r3, #2
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	4413      	add	r3, r2
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b39      	cmp	r3, #57	; 0x39
 800beb2:	d820      	bhi.n	800bef6 <ReceiveDeep+0x96>
			{
				temperature_origin_data[0] = DeepReceive[i + 2] - '0';
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	3302      	adds	r3, #2
 800beb8:	683a      	ldr	r2, [r7, #0]
 800beba:	4413      	add	r3, r2
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	3b30      	subs	r3, #48	; 0x30
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	733b      	strb	r3, [r7, #12]
				temperature_origin_data[1] = DeepReceive[i + 3] - '0';
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	3303      	adds	r3, #3
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	4413      	add	r3, r2
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	3b30      	subs	r3, #48	; 0x30
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	737b      	strb	r3, [r7, #13]
				temperature_origin_data[2] = DeepReceive[i + 5] - '0';
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	3305      	adds	r3, #5
 800bed8:	683a      	ldr	r2, [r7, #0]
 800beda:	4413      	add	r3, r2
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	3b30      	subs	r3, #48	; 0x30
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	73bb      	strb	r3, [r7, #14]
				temperature_origin_data[3] = DeepReceive[i + 6] - '0';
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	3306      	adds	r3, #6
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	4413      	add	r3, r2
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	3b30      	subs	r3, #48	; 0x30
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	73fb      	strb	r3, [r7, #15]
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9')) //温度为正
 800bef4:	e07f      	b.n	800bff6 <ReceiveDeep+0x196>
			}
			else if (DeepReceive[i + 2] == '-') //温度为负
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	3302      	adds	r3, #2
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	4413      	add	r3, r2
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b2d      	cmp	r3, #45	; 0x2d
 800bf02:	d178      	bne.n	800bff6 <ReceiveDeep+0x196>
			{
				temperature_origin_data[0] = DeepReceive[i + 3] - '0';
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	3303      	adds	r3, #3
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	3b30      	subs	r3, #48	; 0x30
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	733b      	strb	r3, [r7, #12]
				temperature_origin_data[1] = DeepReceive[i + 4] - '0';
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	3304      	adds	r3, #4
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	3b30      	subs	r3, #48	; 0x30
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	737b      	strb	r3, [r7, #13]
				temperature_origin_data[2] = DeepReceive[i + 6] - '0';
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	3306      	adds	r3, #6
 800bf28:	683a      	ldr	r2, [r7, #0]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	3b30      	subs	r3, #48	; 0x30
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	73bb      	strb	r3, [r7, #14]
				temperature_origin_data[3] = DeepReceive[i + 7] - '0';
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	3307      	adds	r3, #7
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	3b30      	subs	r3, #48	; 0x30
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	73fb      	strb	r3, [r7, #15]
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9')) //温度为正
 800bf44:	e057      	b.n	800bff6 <ReceiveDeep+0x196>
			}
		}
		else if ((DeepReceive[i] == 'D') && (DeepReceive[i + 1] == '=')) //解析深度
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	683a      	ldr	r2, [r7, #0]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	2b44      	cmp	r3, #68	; 0x44
 800bf50:	d152      	bne.n	800bff8 <ReceiveDeep+0x198>
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	3301      	adds	r3, #1
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	4413      	add	r3, r2
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	2b3d      	cmp	r3, #61	; 0x3d
 800bf5e:	d14b      	bne.n	800bff8 <ReceiveDeep+0x198>
		{
			if (DeepReceive[i + 2] == '-') //深度为负
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	3302      	adds	r3, #2
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	4413      	add	r3, r2
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	2b2d      	cmp	r3, #45	; 0x2d
 800bf6c:	d11a      	bne.n	800bfa4 <ReceiveDeep+0x144>
			{
				RecvDeep.is_signed = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	763b      	strb	r3, [r7, #24]
				depth_origin_data[0] = DeepReceive[i + 3] - '0';
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	3303      	adds	r3, #3
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	4413      	add	r3, r2
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	3b30      	subs	r3, #48	; 0x30
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	723b      	strb	r3, [r7, #8]
				depth_origin_data[1] = DeepReceive[i + 5] - '0';
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	3305      	adds	r3, #5
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	4413      	add	r3, r2
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	3b30      	subs	r3, #48	; 0x30
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	727b      	strb	r3, [r7, #9]
				depth_origin_data[2] = DeepReceive[i + 6] - '0';
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	3306      	adds	r3, #6
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	4413      	add	r3, r2
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	3b30      	subs	r3, #48	; 0x30
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	72bb      	strb	r3, [r7, #10]
 800bfa2:	e029      	b.n	800bff8 <ReceiveDeep+0x198>
			}
			else if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9')) //深度为正
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	3302      	adds	r3, #2
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	4413      	add	r3, r2
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b2f      	cmp	r3, #47	; 0x2f
 800bfb0:	d922      	bls.n	800bff8 <ReceiveDeep+0x198>
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	3302      	adds	r3, #2
 800bfb6:	683a      	ldr	r2, [r7, #0]
 800bfb8:	4413      	add	r3, r2
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b39      	cmp	r3, #57	; 0x39
 800bfbe:	d81b      	bhi.n	800bff8 <ReceiveDeep+0x198>
			{
				RecvDeep.is_signed = 1;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	763b      	strb	r3, [r7, #24]
				depth_origin_data[0] = DeepReceive[i + 2] - '0';
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	3302      	adds	r3, #2
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	4413      	add	r3, r2
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	3b30      	subs	r3, #48	; 0x30
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	723b      	strb	r3, [r7, #8]
				depth_origin_data[1] = DeepReceive[i + 4] - '0';
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	4413      	add	r3, r2
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	3b30      	subs	r3, #48	; 0x30
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	727b      	strb	r3, [r7, #9]
				depth_origin_data[2] = DeepReceive[i + 5] - '0';
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	3305      	adds	r3, #5
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	4413      	add	r3, r2
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	3b30      	subs	r3, #48	; 0x30
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	72bb      	strb	r3, [r7, #10]
 800bff4:	e000      	b.n	800bff8 <ReceiveDeep+0x198>
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9')) //温度为正
 800bff6:	bf00      	nop
	for (int i = 0; i < Deep_UART_RXLen; i++)
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	3301      	adds	r3, #1
 800bffc:	61fb      	str	r3, [r7, #28]
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	2b0e      	cmp	r3, #14
 800c002:	f77f af3c 	ble.w	800be7e <ReceiveDeep+0x1e>
			}
		}
	}

	RecvDeep.WaterTemperature = (temperature_origin_data[0] * 1000)
 800c006:	7b3b      	ldrb	r3, [r7, #12]
			+ (temperature_origin_data[1] * 100)
 800c008:	b29b      	uxth	r3, r3
 800c00a:	461a      	mov	r2, r3
 800c00c:	0152      	lsls	r2, r2, #5
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	0092      	lsls	r2, r2, #2
 800c012:	4413      	add	r3, r2
 800c014:	00db      	lsls	r3, r3, #3
 800c016:	b29a      	uxth	r2, r3
 800c018:	7b7b      	ldrb	r3, [r7, #13]
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	4619      	mov	r1, r3
 800c01e:	0089      	lsls	r1, r1, #2
 800c020:	440b      	add	r3, r1
 800c022:	4619      	mov	r1, r3
 800c024:	0088      	lsls	r0, r1, #2
 800c026:	4619      	mov	r1, r3
 800c028:	4603      	mov	r3, r0
 800c02a:	440b      	add	r3, r1
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	b29b      	uxth	r3, r3
 800c030:	4413      	add	r3, r2
 800c032:	b29a      	uxth	r2, r3
			+ (temperature_origin_data[2] * 10) + (temperature_origin_data[3]);
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	b29b      	uxth	r3, r3
 800c038:	4619      	mov	r1, r3
 800c03a:	0089      	lsls	r1, r1, #2
 800c03c:	440b      	add	r3, r1
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	b29b      	uxth	r3, r3
 800c042:	4413      	add	r3, r2
 800c044:	b29a      	uxth	r2, r3
 800c046:	7bfb      	ldrb	r3, [r7, #15]
 800c048:	b29b      	uxth	r3, r3
 800c04a:	4413      	add	r3, r2
 800c04c:	b29b      	uxth	r3, r3
	RecvDeep.WaterTemperature = (temperature_origin_data[0] * 1000)
 800c04e:	823b      	strh	r3, [r7, #16]

	RecvDeep.WaterDepth = (depth_origin_data[0] * 100)
 800c050:	7a3b      	ldrb	r3, [r7, #8]
			+ (depth_origin_data[1] * 10) + (depth_origin_data[2]);
 800c052:	b29b      	uxth	r3, r3
 800c054:	461a      	mov	r2, r3
 800c056:	0092      	lsls	r2, r2, #2
 800c058:	4413      	add	r3, r2
 800c05a:	461a      	mov	r2, r3
 800c05c:	0091      	lsls	r1, r2, #2
 800c05e:	461a      	mov	r2, r3
 800c060:	460b      	mov	r3, r1
 800c062:	4413      	add	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	b29a      	uxth	r2, r3
 800c068:	7a7b      	ldrb	r3, [r7, #9]
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	4619      	mov	r1, r3
 800c06e:	0089      	lsls	r1, r1, #2
 800c070:	440b      	add	r3, r1
 800c072:	005b      	lsls	r3, r3, #1
 800c074:	b29b      	uxth	r3, r3
 800c076:	4413      	add	r3, r2
 800c078:	b29a      	uxth	r2, r3
 800c07a:	7abb      	ldrb	r3, [r7, #10]
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	4413      	add	r3, r2
 800c080:	b29b      	uxth	r3, r3
	RecvDeep.WaterDepth = (depth_origin_data[0] * 100)
 800c082:	837b      	strh	r3, [r7, #26]

	return RecvDeep;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	461c      	mov	r4, r3
 800c088:	f107 0310 	add.w	r3, r7, #16
 800c08c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c090:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	3720      	adds	r7, #32
 800c098:	46bd      	mov	sp, r7
 800c09a:	bc90      	pop	{r4, r7}
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	0800edb4 	.word	0x0800edb4

0800c0a4 <InitGY39>:

#endif

#ifdef USING_GY39_SENSOR
void InitGY39(uint8_t *GY39Send)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
	*(GY39Send + 0) = 0xA5;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	22a5      	movs	r2, #165	; 0xa5
 800c0b0:	701a      	strb	r2, [r3, #0]
	*(GY39Send + 1) = 0x82;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	2282      	movs	r2, #130	; 0x82
 800c0b8:	701a      	strb	r2, [r3, #0]
	*(GY39Send + 2) = 0x27;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	3302      	adds	r3, #2
 800c0be:	2227      	movs	r2, #39	; 0x27
 800c0c0:	701a      	strb	r2, [r3, #0]
}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <ReceiveGY39>:

CarbinData_t ReceiveGY39(uint8_t *GY39Receive)
{
 800c0ce:	b490      	push	{r4, r7}
 800c0d0:	b086      	sub	sp, #24
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
	CarbinData_t RecvGY39;

	if ((GY39Receive[0] == 0x5A) && (GY39Receive[1] == 0x5A)
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	2b5a      	cmp	r3, #90	; 0x5a
 800c0de:	d138      	bne.n	800c152 <ReceiveGY39+0x84>
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	2b5a      	cmp	r3, #90	; 0x5a
 800c0e8:	d133      	bne.n	800c152 <ReceiveGY39+0x84>
			&& (GY39Receive[2] == 0x45))
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	3302      	adds	r3, #2
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	2b45      	cmp	r3, #69	; 0x45
 800c0f2:	d12e      	bne.n	800c152 <ReceiveGY39+0x84>
	{
		RecvGY39.CarbinTemperature = (((uint16_t) (GY39Receive[4]) << 8)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	021b      	lsls	r3, r3, #8
				| ((uint16_t) GY39Receive[5]));
 800c0fc:	b21a      	sxth	r2, r3
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	3305      	adds	r3, #5
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	b21b      	sxth	r3, r3
 800c106:	4313      	orrs	r3, r2
 800c108:	b21b      	sxth	r3, r3
 800c10a:	b29b      	uxth	r3, r3
		RecvGY39.CarbinTemperature = (((uint16_t) (GY39Receive[4]) << 8)
 800c10c:	81bb      	strh	r3, [r7, #12]
		RecvGY39.CarbinBarometric = ((((uint32_t) GY39Receive[6]) << 24)
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	3306      	adds	r3, #6
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	061a      	lsls	r2, r3, #24
				| (((uint32_t) GY39Receive[7]) << 16)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	3307      	adds	r3, #7
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	041b      	lsls	r3, r3, #16
 800c11e:	431a      	orrs	r2, r3
				| (((uint32_t) GY39Receive[8]) << 8)
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	3308      	adds	r3, #8
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	021b      	lsls	r3, r3, #8
 800c128:	4313      	orrs	r3, r2
				| ((uint32_t) GY39Receive[9]));
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	3209      	adds	r2, #9
 800c12e:	7812      	ldrb	r2, [r2, #0]
 800c130:	4313      	orrs	r3, r2
		RecvGY39.CarbinBarometric = ((((uint32_t) GY39Receive[6]) << 24)
 800c132:	613b      	str	r3, [r7, #16]
		RecvGY39.CarbinHumidity = ((((uint16_t) GY39Receive[10]) << 8)
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	330a      	adds	r3, #10
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	021b      	lsls	r3, r3, #8
				| ((uint16_t) GY39Receive[11]));
 800c13c:	b21a      	sxth	r2, r3
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	330b      	adds	r3, #11
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	b21b      	sxth	r3, r3
 800c146:	4313      	orrs	r3, r2
 800c148:	b21b      	sxth	r3, r3
 800c14a:	b29b      	uxth	r3, r3
		RecvGY39.CarbinHumidity = ((((uint16_t) GY39Receive[10]) << 8)
 800c14c:	81fb      	strh	r3, [r7, #14]
		RecvGY39.CarbinIllumination = 0x0000;
 800c14e:	2300      	movs	r3, #0
 800c150:	82bb      	strh	r3, [r7, #20]
	}

	return RecvGY39;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	461c      	mov	r4, r3
 800c156:	f107 030c 	add.w	r3, r7, #12
 800c15a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c15e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bc90      	pop	{r4, r7}
 800c16a:	4770      	bx	lr

0800c16c <ReceiveWT931>:
#endif

#ifdef USING_WT931_SENSOR
IMUData_t ReceiveWT931(uint8_t *WT931Receive)
{
 800c16c:	b4b0      	push	{r4, r5, r7}
 800c16e:	b08b      	sub	sp, #44	; 0x2c
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
	IMUData_t RecvWT931;

	for (uint8_t i = 0; i < AXIS_UART_RXLen; i++)
 800c176:	2300      	movs	r3, #0
 800c178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c17c:	e112      	b.n	800c3a4 <ReceiveWT931+0x238>
	{
		if (i > AXIS_UART_RXLen - 11)
 800c17e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c182:	2b21      	cmp	r3, #33	; 0x21
 800c184:	f200 8114 	bhi.w	800c3b0 <ReceiveWT931+0x244>
		{
			break;
		}

		if (WT931Receive[i] == 0x55)
 800c188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c18c:	683a      	ldr	r2, [r7, #0]
 800c18e:	4413      	add	r3, r2
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	2b55      	cmp	r3, #85	; 0x55
 800c194:	f040 80fe 	bne.w	800c394 <ReceiveWT931+0x228>
		{
			switch (WT931Receive[i + 1])
 800c198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c19c:	3301      	adds	r3, #1
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	3b51      	subs	r3, #81	; 0x51
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	f200 80f6 	bhi.w	800c398 <ReceiveWT931+0x22c>
 800c1ac:	a201      	add	r2, pc, #4	; (adr r2, 800c1b4 <ReceiveWT931+0x48>)
 800c1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b2:	bf00      	nop
 800c1b4:	0800c1c5 	.word	0x0800c1c5
 800c1b8:	0800c239 	.word	0x0800c239
 800c1bc:	0800c2ad 	.word	0x0800c2ad
 800c1c0:	0800c321 	.word	0x0800c321
			{
			case 0x51:
				RecvWT931.Acceleration[0] = ((uint16_t) WT931Receive[i + 2]
 800c1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c8:	3302      	adds	r3, #2
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 3]) << 8));
 800c1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1d6:	3303      	adds	r3, #3
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	440b      	add	r3, r1
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	021b      	lsls	r3, r3, #8
 800c1e0:	b21b      	sxth	r3, r3
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	b21b      	sxth	r3, r3
 800c1e6:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[0] = ((uint16_t) WT931Receive[i + 2]
 800c1e8:	81bb      	strh	r3, [r7, #12]
				RecvWT931.Acceleration[1] = ((uint16_t) WT931Receive[i + 4]
 800c1ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	683a      	ldr	r2, [r7, #0]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 5]) << 8));
 800c1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1fc:	3305      	adds	r3, #5
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	440b      	add	r3, r1
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	021b      	lsls	r3, r3, #8
 800c206:	b21b      	sxth	r3, r3
 800c208:	4313      	orrs	r3, r2
 800c20a:	b21b      	sxth	r3, r3
 800c20c:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[1] = ((uint16_t) WT931Receive[i + 4]
 800c20e:	81fb      	strh	r3, [r7, #14]
				RecvWT931.Acceleration[2] = ((uint16_t) WT931Receive[i + 6]
 800c210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c214:	3306      	adds	r3, #6
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	4413      	add	r3, r2
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 7]) << 8));
 800c21e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c222:	3307      	adds	r3, #7
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	440b      	add	r3, r1
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	021b      	lsls	r3, r3, #8
 800c22c:	b21b      	sxth	r3, r3
 800c22e:	4313      	orrs	r3, r2
 800c230:	b21b      	sxth	r3, r3
 800c232:	b29b      	uxth	r3, r3
				RecvWT931.Acceleration[2] = ((uint16_t) WT931Receive[i + 6]
 800c234:	823b      	strh	r3, [r7, #16]
				break;
 800c236:	e0b0      	b.n	800c39a <ReceiveWT931+0x22e>
			case 0x52:
				RecvWT931.AngularSpeed[0] = ((uint16_t) WT931Receive[i + 2]
 800c238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c23c:	3302      	adds	r3, #2
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	4413      	add	r3, r2
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 3]) << 8));
 800c246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c24a:	3303      	adds	r3, #3
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	440b      	add	r3, r1
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	021b      	lsls	r3, r3, #8
 800c254:	b21b      	sxth	r3, r3
 800c256:	4313      	orrs	r3, r2
 800c258:	b21b      	sxth	r3, r3
 800c25a:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[0] = ((uint16_t) WT931Receive[i + 2]
 800c25c:	827b      	strh	r3, [r7, #18]
				RecvWT931.AngularSpeed[1] = ((uint16_t) WT931Receive[i + 4]
 800c25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c262:	3304      	adds	r3, #4
 800c264:	683a      	ldr	r2, [r7, #0]
 800c266:	4413      	add	r3, r2
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 5]) << 8));
 800c26c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c270:	3305      	adds	r3, #5
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	440b      	add	r3, r1
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	021b      	lsls	r3, r3, #8
 800c27a:	b21b      	sxth	r3, r3
 800c27c:	4313      	orrs	r3, r2
 800c27e:	b21b      	sxth	r3, r3
 800c280:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[1] = ((uint16_t) WT931Receive[i + 4]
 800c282:	82bb      	strh	r3, [r7, #20]
				RecvWT931.AngularSpeed[2] = ((uint16_t) WT931Receive[i + 6]
 800c284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c288:	3306      	adds	r3, #6
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	4413      	add	r3, r2
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 7]) << 8));
 800c292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c296:	3307      	adds	r3, #7
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	440b      	add	r3, r1
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	021b      	lsls	r3, r3, #8
 800c2a0:	b21b      	sxth	r3, r3
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	b21b      	sxth	r3, r3
 800c2a6:	b29b      	uxth	r3, r3
				RecvWT931.AngularSpeed[2] = ((uint16_t) WT931Receive[i + 6]
 800c2a8:	82fb      	strh	r3, [r7, #22]
				break;
 800c2aa:	e076      	b.n	800c39a <ReceiveWT931+0x22e>
			case 0x53:
				RecvWT931.EulerAngle[0] = ((uint16_t) WT931Receive[i + 2]
 800c2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2b0:	3302      	adds	r3, #2
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 3]) << 8));
 800c2ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2be:	3303      	adds	r3, #3
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	440b      	add	r3, r1
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	021b      	lsls	r3, r3, #8
 800c2c8:	b21b      	sxth	r3, r3
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	b21b      	sxth	r3, r3
 800c2ce:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[0] = ((uint16_t) WT931Receive[i + 2]
 800c2d0:	833b      	strh	r3, [r7, #24]
				RecvWT931.EulerAngle[1] = ((uint16_t) WT931Receive[i + 4]
 800c2d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	4413      	add	r3, r2
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 5]) << 8));
 800c2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2e4:	3305      	adds	r3, #5
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	440b      	add	r3, r1
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	021b      	lsls	r3, r3, #8
 800c2ee:	b21b      	sxth	r3, r3
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	b21b      	sxth	r3, r3
 800c2f4:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[1] = ((uint16_t) WT931Receive[i + 4]
 800c2f6:	837b      	strh	r3, [r7, #26]
				RecvWT931.EulerAngle[2] = ((uint16_t) WT931Receive[i + 6]
 800c2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2fc:	3306      	adds	r3, #6
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	4413      	add	r3, r2
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 7]) << 8));
 800c306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c30a:	3307      	adds	r3, #7
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	440b      	add	r3, r1
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	021b      	lsls	r3, r3, #8
 800c314:	b21b      	sxth	r3, r3
 800c316:	4313      	orrs	r3, r2
 800c318:	b21b      	sxth	r3, r3
 800c31a:	b29b      	uxth	r3, r3
				RecvWT931.EulerAngle[2] = ((uint16_t) WT931Receive[i + 6]
 800c31c:	83bb      	strh	r3, [r7, #28]
				break;
 800c31e:	e03c      	b.n	800c39a <ReceiveWT931+0x22e>
			case 0x54:
				RecvWT931.MagneticValue[0] = ((uint16_t) WT931Receive[i + 2]
 800c320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c324:	3302      	adds	r3, #2
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	4413      	add	r3, r2
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 3]) << 8));
 800c32e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c332:	3303      	adds	r3, #3
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	440b      	add	r3, r1
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	021b      	lsls	r3, r3, #8
 800c33c:	b21b      	sxth	r3, r3
 800c33e:	4313      	orrs	r3, r2
 800c340:	b21b      	sxth	r3, r3
 800c342:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[0] = ((uint16_t) WT931Receive[i + 2]
 800c344:	83fb      	strh	r3, [r7, #30]
				RecvWT931.MagneticValue[1] = ((uint16_t) WT931Receive[i + 4]
 800c346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c34a:	3304      	adds	r3, #4
 800c34c:	683a      	ldr	r2, [r7, #0]
 800c34e:	4413      	add	r3, r2
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 5]) << 8));
 800c354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c358:	3305      	adds	r3, #5
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	440b      	add	r3, r1
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	021b      	lsls	r3, r3, #8
 800c362:	b21b      	sxth	r3, r3
 800c364:	4313      	orrs	r3, r2
 800c366:	b21b      	sxth	r3, r3
 800c368:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[1] = ((uint16_t) WT931Receive[i + 4]
 800c36a:	843b      	strh	r3, [r7, #32]
				RecvWT931.MagneticValue[2] = ((uint16_t) WT931Receive[i + 6]
 800c36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c370:	3306      	adds	r3, #6
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	4413      	add	r3, r2
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	b21a      	sxth	r2, r3
						| (((uint16_t) WT931Receive[i + 7]) << 8));
 800c37a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c37e:	3307      	adds	r3, #7
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	440b      	add	r3, r1
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	021b      	lsls	r3, r3, #8
 800c388:	b21b      	sxth	r3, r3
 800c38a:	4313      	orrs	r3, r2
 800c38c:	b21b      	sxth	r3, r3
 800c38e:	b29b      	uxth	r3, r3
				RecvWT931.MagneticValue[2] = ((uint16_t) WT931Receive[i + 6]
 800c390:	847b      	strh	r3, [r7, #34]	; 0x22
				break;
 800c392:	e002      	b.n	800c39a <ReceiveWT931+0x22e>
				break;
			}
		}
		else
		{
			continue;
 800c394:	bf00      	nop
 800c396:	e000      	b.n	800c39a <ReceiveWT931+0x22e>
				continue;
 800c398:	bf00      	nop
	for (uint8_t i = 0; i < AXIS_UART_RXLen; i++)
 800c39a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c39e:	3301      	adds	r3, #1
 800c3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3a8:	2b2b      	cmp	r3, #43	; 0x2b
 800c3aa:	f67f aee8 	bls.w	800c17e <ReceiveWT931+0x12>
 800c3ae:	e000      	b.n	800c3b2 <ReceiveWT931+0x246>
			break;
 800c3b0:	bf00      	nop
		}
	}

	return RecvWT931;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	461d      	mov	r5, r3
 800c3b6:	f107 040c 	add.w	r4, r7, #12
 800c3ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c3bc:	6028      	str	r0, [r5, #0]
 800c3be:	6069      	str	r1, [r5, #4]
 800c3c0:	60aa      	str	r2, [r5, #8]
 800c3c2:	60eb      	str	r3, [r5, #12]
 800c3c4:	cc03      	ldmia	r4!, {r0, r1}
 800c3c6:	6128      	str	r0, [r5, #16]
 800c3c8:	6169      	str	r1, [r5, #20]
}
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	372c      	adds	r7, #44	; 0x2c
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bcb0      	pop	{r4, r5, r7}
 800c3d2:	4770      	bx	lr

0800c3d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c3e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3e6:	2b84      	cmp	r3, #132	; 0x84
 800c3e8:	d005      	beq.n	800c3f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c3ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	3303      	adds	r3, #3
 800c3f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c408:	f001 f914 	bl	800d634 <vTaskStartScheduler>
  
  return osOK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	bd80      	pop	{r7, pc}

0800c412 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c412:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c414:	b089      	sub	sp, #36	; 0x24
 800c416:	af04      	add	r7, sp, #16
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d020      	beq.n	800c466 <osThreadCreate+0x54>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01c      	beq.n	800c466 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685c      	ldr	r4, [r3, #4]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681d      	ldr	r5, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	691e      	ldr	r6, [r3, #16]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c43e:	4618      	mov	r0, r3
 800c440:	f7ff ffc8 	bl	800c3d4 <makeFreeRtosPriority>
 800c444:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c44e:	9202      	str	r2, [sp, #8]
 800c450:	9301      	str	r3, [sp, #4]
 800c452:	9100      	str	r1, [sp, #0]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	4632      	mov	r2, r6
 800c458:	4629      	mov	r1, r5
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 ff22 	bl	800d2a4 <xTaskCreateStatic>
 800c460:	4603      	mov	r3, r0
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	e01c      	b.n	800c4a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	685c      	ldr	r4, [r3, #4]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c472:	b29e      	uxth	r6, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7ff ffaa 	bl	800c3d4 <makeFreeRtosPriority>
 800c480:	4602      	mov	r2, r0
 800c482:	f107 030c 	add.w	r3, r7, #12
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	9200      	str	r2, [sp, #0]
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	4632      	mov	r2, r6
 800c48e:	4629      	mov	r1, r5
 800c490:	4620      	mov	r0, r4
 800c492:	f000 ff64 	bl	800d35e <xTaskCreate>
 800c496:	4603      	mov	r3, r0
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d001      	beq.n	800c4a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c49c:	2300      	movs	r3, #0
 800c49e:	e000      	b.n	800c4a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b084      	sub	sp, #16
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d001      	beq.n	800c4c0 <osDelay+0x16>
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	e000      	b.n	800c4c2 <osDelay+0x18>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f001 f882 	bl	800d5cc <vTaskDelay>
  
  return osOK;
 800c4c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b086      	sub	sp, #24
 800c4d6:	af02      	add	r7, sp, #8
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00f      	beq.n	800c504 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d10a      	bne.n	800c500 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	2203      	movs	r2, #3
 800c4f0:	9200      	str	r2, [sp, #0]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2100      	movs	r1, #0
 800c4f6:	2001      	movs	r0, #1
 800c4f8:	f000 f962 	bl	800c7c0 <xQueueGenericCreateStatic>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	e016      	b.n	800c52e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c500:	2300      	movs	r3, #0
 800c502:	e014      	b.n	800c52e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d110      	bne.n	800c52c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c50a:	2203      	movs	r2, #3
 800c50c:	2100      	movs	r1, #0
 800c50e:	2001      	movs	r0, #1
 800c510:	f000 f9ce 	bl	800c8b0 <xQueueGenericCreate>
 800c514:	60f8      	str	r0, [r7, #12]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d005      	beq.n	800c528 <osSemaphoreCreate+0x56>
 800c51c:	2300      	movs	r3, #0
 800c51e:	2200      	movs	r2, #0
 800c520:	2100      	movs	r1, #0
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	f000 fa1e 	bl	800c964 <xQueueGenericSend>
      return sema;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	e000      	b.n	800c52e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c52c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c536:	b590      	push	{r4, r7, lr}
 800c538:	b085      	sub	sp, #20
 800c53a:	af02      	add	r7, sp, #8
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d011      	beq.n	800c56c <osMessageCreate+0x36>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00d      	beq.n	800c56c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6818      	ldr	r0, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6859      	ldr	r1, [r3, #4]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	689a      	ldr	r2, [r3, #8]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	2400      	movs	r4, #0
 800c562:	9400      	str	r4, [sp, #0]
 800c564:	f000 f92c 	bl	800c7c0 <xQueueGenericCreateStatic>
 800c568:	4603      	mov	r3, r0
 800c56a:	e008      	b.n	800c57e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6818      	ldr	r0, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	4619      	mov	r1, r3
 800c578:	f000 f99a 	bl	800c8b0 <xQueueGenericCreate>
 800c57c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c57e:	4618      	mov	r0, r3
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	bd90      	pop	{r4, r7, pc}

0800c586 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c586:	b480      	push	{r7}
 800c588:	b083      	sub	sp, #12
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f103 0208 	add.w	r2, r3, #8
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f04f 32ff 	mov.w	r2, #4294967295
 800c59e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f103 0208 	add.w	r2, r3, #8
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f103 0208 	add.w	r2, r3, #8
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c5ba:	bf00      	nop
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	689a      	ldr	r2, [r3, #8]
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	1c5a      	adds	r2, r3, #1
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	601a      	str	r2, [r3, #0]
}
 800c61c:	bf00      	nop
 800c61e:	3714      	adds	r7, #20
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63e:	d103      	bne.n	800c648 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	60fb      	str	r3, [r7, #12]
 800c646:	e00c      	b.n	800c662 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3308      	adds	r3, #8
 800c64c:	60fb      	str	r3, [r7, #12]
 800c64e:	e002      	b.n	800c656 <vListInsert+0x2e>
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	60fb      	str	r3, [r7, #12]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d2f6      	bcs.n	800c650 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	685a      	ldr	r2, [r3, #4]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	683a      	ldr	r2, [r7, #0]
 800c67c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	1c5a      	adds	r2, r3, #1
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	601a      	str	r2, [r3, #0]
}
 800c68e:	bf00      	nop
 800c690:	3714      	adds	r7, #20
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c69a:	b480      	push	{r7}
 800c69c:	b085      	sub	sp, #20
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	6892      	ldr	r2, [r2, #8]
 800c6b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	6852      	ldr	r2, [r2, #4]
 800c6ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d103      	bne.n	800c6ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	689a      	ldr	r2, [r3, #8]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	1e5a      	subs	r2, r3, #1
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3714      	adds	r7, #20
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
	...

0800c6f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10a      	bne.n	800c71a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c708:	f383 8811 	msr	BASEPRI, r3
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c716:	bf00      	nop
 800c718:	e7fe      	b.n	800c718 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c71a:	f001 fedb 	bl	800e4d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c726:	68f9      	ldr	r1, [r7, #12]
 800c728:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c72a:	fb01 f303 	mul.w	r3, r1, r3
 800c72e:	441a      	add	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c74a:	3b01      	subs	r3, #1
 800c74c:	68f9      	ldr	r1, [r7, #12]
 800c74e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c750:	fb01 f303 	mul.w	r3, r1, r3
 800c754:	441a      	add	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	22ff      	movs	r2, #255	; 0xff
 800c75e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	22ff      	movs	r2, #255	; 0xff
 800c766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d114      	bne.n	800c79a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01a      	beq.n	800c7ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	3310      	adds	r3, #16
 800c77c:	4618      	mov	r0, r3
 800c77e:	f001 f99b 	bl	800dab8 <xTaskRemoveFromEventList>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d012      	beq.n	800c7ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c788:	4b0c      	ldr	r3, [pc, #48]	; (800c7bc <xQueueGenericReset+0xcc>)
 800c78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78e:	601a      	str	r2, [r3, #0]
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	e009      	b.n	800c7ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3310      	adds	r3, #16
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7ff fef1 	bl	800c586 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	3324      	adds	r3, #36	; 0x24
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7ff feec 	bl	800c586 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c7ae:	f001 fec1 	bl	800e534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c7b2:	2301      	movs	r3, #1
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	e000ed04 	.word	0xe000ed04

0800c7c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b08e      	sub	sp, #56	; 0x38
 800c7c4:	af02      	add	r7, sp, #8
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10a      	bne.n	800c7ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c7e6:	bf00      	nop
 800c7e8:	e7fe      	b.n	800c7e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10a      	bne.n	800c806 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c802:	bf00      	nop
 800c804:	e7fe      	b.n	800c804 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <xQueueGenericCreateStatic+0x52>
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d001      	beq.n	800c816 <xQueueGenericCreateStatic+0x56>
 800c812:	2301      	movs	r3, #1
 800c814:	e000      	b.n	800c818 <xQueueGenericCreateStatic+0x58>
 800c816:	2300      	movs	r3, #0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10a      	bne.n	800c832 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	623b      	str	r3, [r7, #32]
}
 800c82e:	bf00      	nop
 800c830:	e7fe      	b.n	800c830 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d102      	bne.n	800c83e <xQueueGenericCreateStatic+0x7e>
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <xQueueGenericCreateStatic+0x82>
 800c83e:	2301      	movs	r3, #1
 800c840:	e000      	b.n	800c844 <xQueueGenericCreateStatic+0x84>
 800c842:	2300      	movs	r3, #0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10a      	bne.n	800c85e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	61fb      	str	r3, [r7, #28]
}
 800c85a:	bf00      	nop
 800c85c:	e7fe      	b.n	800c85c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c85e:	2348      	movs	r3, #72	; 0x48
 800c860:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	2b48      	cmp	r3, #72	; 0x48
 800c866:	d00a      	beq.n	800c87e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	61bb      	str	r3, [r7, #24]
}
 800c87a:	bf00      	nop
 800c87c:	e7fe      	b.n	800c87c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c87e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00d      	beq.n	800c8a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c892:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	4613      	mov	r3, r2
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	68b9      	ldr	r1, [r7, #8]
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f000 f83f 	bl	800c924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3730      	adds	r7, #48	; 0x30
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08a      	sub	sp, #40	; 0x28
 800c8b4:	af02      	add	r7, sp, #8
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10a      	bne.n	800c8da <xQueueGenericCreate+0x2a>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	613b      	str	r3, [r7, #16]
}
 800c8d6:	bf00      	nop
 800c8d8:	e7fe      	b.n	800c8d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	fb02 f303 	mul.w	r3, r2, r3
 800c8e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	3348      	adds	r3, #72	; 0x48
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f001 ff15 	bl	800e718 <pvPortMalloc>
 800c8ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d011      	beq.n	800c91a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	3348      	adds	r3, #72	; 0x48
 800c8fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c908:	79fa      	ldrb	r2, [r7, #7]
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	4613      	mov	r3, r2
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	68b9      	ldr	r1, [r7, #8]
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f805 	bl	800c924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c91a:	69bb      	ldr	r3, [r7, #24]
	}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3720      	adds	r7, #32
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d103      	bne.n	800c940 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	69ba      	ldr	r2, [r7, #24]
 800c93c:	601a      	str	r2, [r3, #0]
 800c93e:	e002      	b.n	800c946 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c952:	2101      	movs	r1, #1
 800c954:	69b8      	ldr	r0, [r7, #24]
 800c956:	f7ff fecb 	bl	800c6f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c95a:	bf00      	nop
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
	...

0800c964 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08e      	sub	sp, #56	; 0x38
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c972:	2300      	movs	r3, #0
 800c974:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10a      	bne.n	800c996 <xQueueGenericSend+0x32>
	__asm volatile
 800c980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c984:	f383 8811 	msr	BASEPRI, r3
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c992:	bf00      	nop
 800c994:	e7fe      	b.n	800c994 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d103      	bne.n	800c9a4 <xQueueGenericSend+0x40>
 800c99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <xQueueGenericSend+0x44>
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e000      	b.n	800c9aa <xQueueGenericSend+0x46>
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10a      	bne.n	800c9c4 <xQueueGenericSend+0x60>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d103      	bne.n	800c9d2 <xQueueGenericSend+0x6e>
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d101      	bne.n	800c9d6 <xQueueGenericSend+0x72>
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e000      	b.n	800c9d8 <xQueueGenericSend+0x74>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10a      	bne.n	800c9f2 <xQueueGenericSend+0x8e>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	623b      	str	r3, [r7, #32]
}
 800c9ee:	bf00      	nop
 800c9f0:	e7fe      	b.n	800c9f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9f2:	f001 fa1d 	bl	800de30 <xTaskGetSchedulerState>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d102      	bne.n	800ca02 <xQueueGenericSend+0x9e>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d101      	bne.n	800ca06 <xQueueGenericSend+0xa2>
 800ca02:	2301      	movs	r3, #1
 800ca04:	e000      	b.n	800ca08 <xQueueGenericSend+0xa4>
 800ca06:	2300      	movs	r3, #0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10a      	bne.n	800ca22 <xQueueGenericSend+0xbe>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	61fb      	str	r3, [r7, #28]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca22:	f001 fd57 	bl	800e4d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d302      	bcc.n	800ca38 <xQueueGenericSend+0xd4>
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d129      	bne.n	800ca8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	68b9      	ldr	r1, [r7, #8]
 800ca3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca3e:	f000 fb21 	bl	800d084 <prvCopyDataToQueue>
 800ca42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d010      	beq.n	800ca6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4e:	3324      	adds	r3, #36	; 0x24
 800ca50:	4618      	mov	r0, r3
 800ca52:	f001 f831 	bl	800dab8 <xTaskRemoveFromEventList>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d013      	beq.n	800ca84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ca5c:	4b3f      	ldr	r3, [pc, #252]	; (800cb5c <xQueueGenericSend+0x1f8>)
 800ca5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	f3bf 8f4f 	dsb	sy
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	e00a      	b.n	800ca84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d007      	beq.n	800ca84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ca74:	4b39      	ldr	r3, [pc, #228]	; (800cb5c <xQueueGenericSend+0x1f8>)
 800ca76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ca84:	f001 fd56 	bl	800e534 <vPortExitCritical>
				return pdPASS;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e063      	b.n	800cb54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d103      	bne.n	800ca9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca92:	f001 fd4f 	bl	800e534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ca96:	2300      	movs	r3, #0
 800ca98:	e05c      	b.n	800cb54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d106      	bne.n	800caae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800caa0:	f107 0314 	add.w	r3, r7, #20
 800caa4:	4618      	mov	r0, r3
 800caa6:	f001 f869 	bl	800db7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800caaa:	2301      	movs	r3, #1
 800caac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800caae:	f001 fd41 	bl	800e534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cab2:	f000 fe1f 	bl	800d6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cab6:	f001 fd0d 	bl	800e4d4 <vPortEnterCritical>
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cac0:	b25b      	sxtb	r3, r3
 800cac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac6:	d103      	bne.n	800cad0 <xQueueGenericSend+0x16c>
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cad6:	b25b      	sxtb	r3, r3
 800cad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cadc:	d103      	bne.n	800cae6 <xQueueGenericSend+0x182>
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cae6:	f001 fd25 	bl	800e534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800caea:	1d3a      	adds	r2, r7, #4
 800caec:	f107 0314 	add.w	r3, r7, #20
 800caf0:	4611      	mov	r1, r2
 800caf2:	4618      	mov	r0, r3
 800caf4:	f001 f858 	bl	800dba8 <xTaskCheckForTimeOut>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d124      	bne.n	800cb48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cafe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb00:	f000 fbb8 	bl	800d274 <prvIsQueueFull>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d018      	beq.n	800cb3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0c:	3310      	adds	r3, #16
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	4611      	mov	r1, r2
 800cb12:	4618      	mov	r0, r3
 800cb14:	f000 ffac 	bl	800da70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb1a:	f000 fb43 	bl	800d1a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb1e:	f000 fdf7 	bl	800d710 <xTaskResumeAll>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f47f af7c 	bne.w	800ca22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb2a:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <xQueueGenericSend+0x1f8>)
 800cb2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb30:	601a      	str	r2, [r3, #0]
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	f3bf 8f6f 	isb	sy
 800cb3a:	e772      	b.n	800ca22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb3e:	f000 fb31 	bl	800d1a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb42:	f000 fde5 	bl	800d710 <xTaskResumeAll>
 800cb46:	e76c      	b.n	800ca22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb4a:	f000 fb2b 	bl	800d1a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb4e:	f000 fddf 	bl	800d710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cb52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3738      	adds	r7, #56	; 0x38
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b08e      	sub	sp, #56	; 0x38
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10a      	bne.n	800cb8a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	623b      	str	r3, [r7, #32]
}
 800cb86:	bf00      	nop
 800cb88:	e7fe      	b.n	800cb88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <xQueueGiveFromISR+0x48>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	61fb      	str	r3, [r7, #28]
}
 800cba4:	bf00      	nop
 800cba6:	e7fe      	b.n	800cba6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d103      	bne.n	800cbb8 <xQueueGiveFromISR+0x58>
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d101      	bne.n	800cbbc <xQueueGiveFromISR+0x5c>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e000      	b.n	800cbbe <xQueueGiveFromISR+0x5e>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10a      	bne.n	800cbd8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	61bb      	str	r3, [r7, #24]
}
 800cbd4:	bf00      	nop
 800cbd6:	e7fe      	b.n	800cbd6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbd8:	f001 fd5e 	bl	800e698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cbdc:	f3ef 8211 	mrs	r2, BASEPRI
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	617a      	str	r2, [r7, #20]
 800cbf2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cbf4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d22b      	bcs.n	800cc60 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc14:	1c5a      	adds	r2, r3, #1
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc18:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc22:	d112      	bne.n	800cc4a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d016      	beq.n	800cc5a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2e:	3324      	adds	r3, #36	; 0x24
 800cc30:	4618      	mov	r0, r3
 800cc32:	f000 ff41 	bl	800dab8 <xTaskRemoveFromEventList>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00e      	beq.n	800cc5a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d00b      	beq.n	800cc5a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2201      	movs	r2, #1
 800cc46:	601a      	str	r2, [r3, #0]
 800cc48:	e007      	b.n	800cc5a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc4e:	3301      	adds	r3, #1
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	b25a      	sxtb	r2, r3
 800cc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	637b      	str	r3, [r7, #52]	; 0x34
 800cc5e:	e001      	b.n	800cc64 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc60:	2300      	movs	r3, #0
 800cc62:	637b      	str	r3, [r7, #52]	; 0x34
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cc6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3738      	adds	r7, #56	; 0x38
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
	...

0800cc7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b08c      	sub	sp, #48	; 0x30
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10a      	bne.n	800ccac <xQueueReceive+0x30>
	__asm volatile
 800cc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	623b      	str	r3, [r7, #32]
}
 800cca8:	bf00      	nop
 800ccaa:	e7fe      	b.n	800ccaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d103      	bne.n	800ccba <xQueueReceive+0x3e>
 800ccb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d101      	bne.n	800ccbe <xQueueReceive+0x42>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e000      	b.n	800ccc0 <xQueueReceive+0x44>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <xQueueReceive+0x5e>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	61fb      	str	r3, [r7, #28]
}
 800ccd6:	bf00      	nop
 800ccd8:	e7fe      	b.n	800ccd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccda:	f001 f8a9 	bl	800de30 <xTaskGetSchedulerState>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d102      	bne.n	800ccea <xQueueReceive+0x6e>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d101      	bne.n	800ccee <xQueueReceive+0x72>
 800ccea:	2301      	movs	r3, #1
 800ccec:	e000      	b.n	800ccf0 <xQueueReceive+0x74>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10a      	bne.n	800cd0a <xQueueReceive+0x8e>
	__asm volatile
 800ccf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	61bb      	str	r3, [r7, #24]
}
 800cd06:	bf00      	nop
 800cd08:	e7fe      	b.n	800cd08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd0a:	f001 fbe3 	bl	800e4d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d01f      	beq.n	800cd5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd1a:	68b9      	ldr	r1, [r7, #8]
 800cd1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd1e:	f000 fa1b 	bl	800d158 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	1e5a      	subs	r2, r3, #1
 800cd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00f      	beq.n	800cd52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd34:	3310      	adds	r3, #16
 800cd36:	4618      	mov	r0, r3
 800cd38:	f000 febe 	bl	800dab8 <xTaskRemoveFromEventList>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d007      	beq.n	800cd52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd42:	4b3d      	ldr	r3, [pc, #244]	; (800ce38 <xQueueReceive+0x1bc>)
 800cd44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd52:	f001 fbef 	bl	800e534 <vPortExitCritical>
				return pdPASS;
 800cd56:	2301      	movs	r3, #1
 800cd58:	e069      	b.n	800ce2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d103      	bne.n	800cd68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd60:	f001 fbe8 	bl	800e534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd64:	2300      	movs	r3, #0
 800cd66:	e062      	b.n	800ce2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd6e:	f107 0310 	add.w	r3, r7, #16
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 ff02 	bl	800db7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd7c:	f001 fbda 	bl	800e534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd80:	f000 fcb8 	bl	800d6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd84:	f001 fba6 	bl	800e4d4 <vPortEnterCritical>
 800cd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd8e:	b25b      	sxtb	r3, r3
 800cd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd94:	d103      	bne.n	800cd9e <xQueueReceive+0x122>
 800cd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cda4:	b25b      	sxtb	r3, r3
 800cda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdaa:	d103      	bne.n	800cdb4 <xQueueReceive+0x138>
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdb4:	f001 fbbe 	bl	800e534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdb8:	1d3a      	adds	r2, r7, #4
 800cdba:	f107 0310 	add.w	r3, r7, #16
 800cdbe:	4611      	mov	r1, r2
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 fef1 	bl	800dba8 <xTaskCheckForTimeOut>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d123      	bne.n	800ce14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdce:	f000 fa3b 	bl	800d248 <prvIsQueueEmpty>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d017      	beq.n	800ce08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdda:	3324      	adds	r3, #36	; 0x24
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	4611      	mov	r1, r2
 800cde0:	4618      	mov	r0, r3
 800cde2:	f000 fe45 	bl	800da70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cde6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cde8:	f000 f9dc 	bl	800d1a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cdec:	f000 fc90 	bl	800d710 <xTaskResumeAll>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d189      	bne.n	800cd0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cdf6:	4b10      	ldr	r3, [pc, #64]	; (800ce38 <xQueueReceive+0x1bc>)
 800cdf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdfc:	601a      	str	r2, [r3, #0]
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	e780      	b.n	800cd0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce0a:	f000 f9cb 	bl	800d1a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce0e:	f000 fc7f 	bl	800d710 <xTaskResumeAll>
 800ce12:	e77a      	b.n	800cd0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce16:	f000 f9c5 	bl	800d1a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce1a:	f000 fc79 	bl	800d710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce20:	f000 fa12 	bl	800d248 <prvIsQueueEmpty>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f43f af6f 	beq.w	800cd0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3730      	adds	r7, #48	; 0x30
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	e000ed04 	.word	0xe000ed04

0800ce3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08e      	sub	sp, #56	; 0x38
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce46:	2300      	movs	r3, #0
 800ce48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10a      	bne.n	800ce6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	623b      	str	r3, [r7, #32]
}
 800ce6a:	bf00      	nop
 800ce6c:	e7fe      	b.n	800ce6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00a      	beq.n	800ce8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	61fb      	str	r3, [r7, #28]
}
 800ce88:	bf00      	nop
 800ce8a:	e7fe      	b.n	800ce8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce8c:	f000 ffd0 	bl	800de30 <xTaskGetSchedulerState>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d102      	bne.n	800ce9c <xQueueSemaphoreTake+0x60>
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <xQueueSemaphoreTake+0x64>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e000      	b.n	800cea2 <xQueueSemaphoreTake+0x66>
 800cea0:	2300      	movs	r3, #0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10a      	bne.n	800cebc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	61bb      	str	r3, [r7, #24]
}
 800ceb8:	bf00      	nop
 800ceba:	e7fe      	b.n	800ceba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cebc:	f001 fb0a 	bl	800e4d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d024      	beq.n	800cf16 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cece:	1e5a      	subs	r2, r3, #1
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d104      	bne.n	800cee6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cedc:	f001 f950 	bl	800e180 <pvTaskIncrementMutexHeldCount>
 800cee0:	4602      	mov	r2, r0
 800cee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00f      	beq.n	800cf0e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	3310      	adds	r3, #16
 800cef2:	4618      	mov	r0, r3
 800cef4:	f000 fde0 	bl	800dab8 <xTaskRemoveFromEventList>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d007      	beq.n	800cf0e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cefe:	4b54      	ldr	r3, [pc, #336]	; (800d050 <xQueueSemaphoreTake+0x214>)
 800cf00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf04:	601a      	str	r2, [r3, #0]
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf0e:	f001 fb11 	bl	800e534 <vPortExitCritical>
				return pdPASS;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e097      	b.n	800d046 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d111      	bne.n	800cf40 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00a      	beq.n	800cf38 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	617b      	str	r3, [r7, #20]
}
 800cf34:	bf00      	nop
 800cf36:	e7fe      	b.n	800cf36 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cf38:	f001 fafc 	bl	800e534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	e082      	b.n	800d046 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d106      	bne.n	800cf54 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf46:	f107 030c 	add.w	r3, r7, #12
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 fe16 	bl	800db7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf50:	2301      	movs	r3, #1
 800cf52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf54:	f001 faee 	bl	800e534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf58:	f000 fbcc 	bl	800d6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf5c:	f001 faba 	bl	800e4d4 <vPortEnterCritical>
 800cf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf66:	b25b      	sxtb	r3, r3
 800cf68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6c:	d103      	bne.n	800cf76 <xQueueSemaphoreTake+0x13a>
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf7c:	b25b      	sxtb	r3, r3
 800cf7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf82:	d103      	bne.n	800cf8c <xQueueSemaphoreTake+0x150>
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf8c:	f001 fad2 	bl	800e534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf90:	463a      	mov	r2, r7
 800cf92:	f107 030c 	add.w	r3, r7, #12
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 fe05 	bl	800dba8 <xTaskCheckForTimeOut>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d132      	bne.n	800d00a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfa6:	f000 f94f 	bl	800d248 <prvIsQueueEmpty>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d026      	beq.n	800cffe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d109      	bne.n	800cfcc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cfb8:	f001 fa8c 	bl	800e4d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f000 ff53 	bl	800de6c <xTaskPriorityInherit>
 800cfc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cfc8:	f001 fab4 	bl	800e534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfce:	3324      	adds	r3, #36	; 0x24
 800cfd0:	683a      	ldr	r2, [r7, #0]
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 fd4b 	bl	800da70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfdc:	f000 f8e2 	bl	800d1a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfe0:	f000 fb96 	bl	800d710 <xTaskResumeAll>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f47f af68 	bne.w	800cebc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cfec:	4b18      	ldr	r3, [pc, #96]	; (800d050 <xQueueSemaphoreTake+0x214>)
 800cfee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	e75e      	b.n	800cebc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d000:	f000 f8d0 	bl	800d1a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d004:	f000 fb84 	bl	800d710 <xTaskResumeAll>
 800d008:	e758      	b.n	800cebc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d00a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d00c:	f000 f8ca 	bl	800d1a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d010:	f000 fb7e 	bl	800d710 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d016:	f000 f917 	bl	800d248 <prvIsQueueEmpty>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f43f af4d 	beq.w	800cebc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00d      	beq.n	800d044 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d028:	f001 fa54 	bl	800e4d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d02e:	f000 f811 	bl	800d054 <prvGetDisinheritPriorityAfterTimeout>
 800d032:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d03a:	4618      	mov	r0, r3
 800d03c:	f001 f812 	bl	800e064 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d040:	f001 fa78 	bl	800e534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d044:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d046:	4618      	mov	r0, r3
 800d048:	3738      	adds	r7, #56	; 0x38
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	e000ed04 	.word	0xe000ed04

0800d054 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d060:	2b00      	cmp	r3, #0
 800d062:	d006      	beq.n	800d072 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f1c3 0307 	rsb	r3, r3, #7
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	e001      	b.n	800d076 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d072:	2300      	movs	r3, #0
 800d074:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d076:	68fb      	ldr	r3, [r7, #12]
	}
 800d078:	4618      	mov	r0, r3
 800d07a:	3714      	adds	r7, #20
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d090:	2300      	movs	r3, #0
 800d092:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d098:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10d      	bne.n	800d0be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d14d      	bne.n	800d146 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 ff52 	bl	800df58 <xTaskPriorityDisinherit>
 800d0b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	609a      	str	r2, [r3, #8]
 800d0bc:	e043      	b.n	800d146 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d119      	bne.n	800d0f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6858      	ldr	r0, [r3, #4]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	68b9      	ldr	r1, [r7, #8]
 800d0d0:	f001 fd30 	bl	800eb34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	685a      	ldr	r2, [r3, #4]
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0dc:	441a      	add	r2, r3
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	685a      	ldr	r2, [r3, #4]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d32b      	bcc.n	800d146 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	605a      	str	r2, [r3, #4]
 800d0f6:	e026      	b.n	800d146 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	68d8      	ldr	r0, [r3, #12]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d100:	461a      	mov	r2, r3
 800d102:	68b9      	ldr	r1, [r7, #8]
 800d104:	f001 fd16 	bl	800eb34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	68da      	ldr	r2, [r3, #12]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d110:	425b      	negs	r3, r3
 800d112:	441a      	add	r2, r3
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	68da      	ldr	r2, [r3, #12]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	429a      	cmp	r2, r3
 800d122:	d207      	bcs.n	800d134 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	689a      	ldr	r2, [r3, #8]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d12c:	425b      	negs	r3, r3
 800d12e:	441a      	add	r2, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b02      	cmp	r3, #2
 800d138:	d105      	bne.n	800d146 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	3b01      	subs	r3, #1
 800d144:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	1c5a      	adds	r2, r3, #1
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d14e:	697b      	ldr	r3, [r7, #20]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3718      	adds	r7, #24
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d166:	2b00      	cmp	r3, #0
 800d168:	d018      	beq.n	800d19c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	68da      	ldr	r2, [r3, #12]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d172:	441a      	add	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	68da      	ldr	r2, [r3, #12]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	429a      	cmp	r2, r3
 800d182:	d303      	bcc.n	800d18c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	68d9      	ldr	r1, [r3, #12]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d194:	461a      	mov	r2, r3
 800d196:	6838      	ldr	r0, [r7, #0]
 800d198:	f001 fccc 	bl	800eb34 <memcpy>
	}
}
 800d19c:	bf00      	nop
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d1ac:	f001 f992 	bl	800e4d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1b8:	e011      	b.n	800d1de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d012      	beq.n	800d1e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	3324      	adds	r3, #36	; 0x24
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 fc76 	bl	800dab8 <xTaskRemoveFromEventList>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d1d2:	f000 fd4b 	bl	800dc6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	dce9      	bgt.n	800d1ba <prvUnlockQueue+0x16>
 800d1e6:	e000      	b.n	800d1ea <prvUnlockQueue+0x46>
					break;
 800d1e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	22ff      	movs	r2, #255	; 0xff
 800d1ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d1f2:	f001 f99f 	bl	800e534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d1f6:	f001 f96d 	bl	800e4d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d200:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d202:	e011      	b.n	800d228 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	691b      	ldr	r3, [r3, #16]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d012      	beq.n	800d232 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	3310      	adds	r3, #16
 800d210:	4618      	mov	r0, r3
 800d212:	f000 fc51 	bl	800dab8 <xTaskRemoveFromEventList>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d001      	beq.n	800d220 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d21c:	f000 fd26 	bl	800dc6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d220:	7bbb      	ldrb	r3, [r7, #14]
 800d222:	3b01      	subs	r3, #1
 800d224:	b2db      	uxtb	r3, r3
 800d226:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	dce9      	bgt.n	800d204 <prvUnlockQueue+0x60>
 800d230:	e000      	b.n	800d234 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d232:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	22ff      	movs	r2, #255	; 0xff
 800d238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d23c:	f001 f97a 	bl	800e534 <vPortExitCritical>
}
 800d240:	bf00      	nop
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d250:	f001 f940 	bl	800e4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d102      	bne.n	800d262 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d25c:	2301      	movs	r3, #1
 800d25e:	60fb      	str	r3, [r7, #12]
 800d260:	e001      	b.n	800d266 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d262:	2300      	movs	r3, #0
 800d264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d266:	f001 f965 	bl	800e534 <vPortExitCritical>

	return xReturn;
 800d26a:	68fb      	ldr	r3, [r7, #12]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d27c:	f001 f92a 	bl	800e4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d288:	429a      	cmp	r2, r3
 800d28a:	d102      	bne.n	800d292 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d28c:	2301      	movs	r3, #1
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	e001      	b.n	800d296 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d292:	2300      	movs	r3, #0
 800d294:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d296:	f001 f94d 	bl	800e534 <vPortExitCritical>

	return xReturn;
 800d29a:	68fb      	ldr	r3, [r7, #12]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b08e      	sub	sp, #56	; 0x38
 800d2a8:	af04      	add	r7, sp, #16
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
 800d2b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10a      	bne.n	800d2ce <xTaskCreateStatic+0x2a>
	__asm volatile
 800d2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	623b      	str	r3, [r7, #32]
}
 800d2ca:	bf00      	nop
 800d2cc:	e7fe      	b.n	800d2cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10a      	bne.n	800d2ea <xTaskCreateStatic+0x46>
	__asm volatile
 800d2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d8:	f383 8811 	msr	BASEPRI, r3
 800d2dc:	f3bf 8f6f 	isb	sy
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	61fb      	str	r3, [r7, #28]
}
 800d2e6:	bf00      	nop
 800d2e8:	e7fe      	b.n	800d2e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d2ea:	2354      	movs	r3, #84	; 0x54
 800d2ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	2b54      	cmp	r3, #84	; 0x54
 800d2f2:	d00a      	beq.n	800d30a <xTaskCreateStatic+0x66>
	__asm volatile
 800d2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	61bb      	str	r3, [r7, #24]
}
 800d306:	bf00      	nop
 800d308:	e7fe      	b.n	800d308 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d30a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d01e      	beq.n	800d350 <xTaskCreateStatic+0xac>
 800d312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01b      	beq.n	800d350 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d320:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d324:	2202      	movs	r2, #2
 800d326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d32a:	2300      	movs	r3, #0
 800d32c:	9303      	str	r3, [sp, #12]
 800d32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d330:	9302      	str	r3, [sp, #8]
 800d332:	f107 0314 	add.w	r3, r7, #20
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	68b9      	ldr	r1, [r7, #8]
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f000 f850 	bl	800d3e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d34a:	f000 f8d5 	bl	800d4f8 <prvAddNewTaskToReadyList>
 800d34e:	e001      	b.n	800d354 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d350:	2300      	movs	r3, #0
 800d352:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d354:	697b      	ldr	r3, [r7, #20]
	}
 800d356:	4618      	mov	r0, r3
 800d358:	3728      	adds	r7, #40	; 0x28
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b08c      	sub	sp, #48	; 0x30
 800d362:	af04      	add	r7, sp, #16
 800d364:	60f8      	str	r0, [r7, #12]
 800d366:	60b9      	str	r1, [r7, #8]
 800d368:	603b      	str	r3, [r7, #0]
 800d36a:	4613      	mov	r3, r2
 800d36c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d36e:	88fb      	ldrh	r3, [r7, #6]
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	4618      	mov	r0, r3
 800d374:	f001 f9d0 	bl	800e718 <pvPortMalloc>
 800d378:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00e      	beq.n	800d39e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d380:	2054      	movs	r0, #84	; 0x54
 800d382:	f001 f9c9 	bl	800e718 <pvPortMalloc>
 800d386:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d003      	beq.n	800d396 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	697a      	ldr	r2, [r7, #20]
 800d392:	631a      	str	r2, [r3, #48]	; 0x30
 800d394:	e005      	b.n	800d3a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d396:	6978      	ldr	r0, [r7, #20]
 800d398:	f001 fa8a 	bl	800e8b0 <vPortFree>
 800d39c:	e001      	b.n	800d3a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d017      	beq.n	800d3d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d3b0:	88fa      	ldrh	r2, [r7, #6]
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9303      	str	r3, [sp, #12]
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	9302      	str	r3, [sp, #8]
 800d3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3bc:	9301      	str	r3, [sp, #4]
 800d3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	68b9      	ldr	r1, [r7, #8]
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f000 f80e 	bl	800d3e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3cc:	69f8      	ldr	r0, [r7, #28]
 800d3ce:	f000 f893 	bl	800d4f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	61bb      	str	r3, [r7, #24]
 800d3d6:	e002      	b.n	800d3de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d3de:	69bb      	ldr	r3, [r7, #24]
	}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3720      	adds	r7, #32
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3fa:	6879      	ldr	r1, [r7, #4]
 800d3fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d400:	440b      	add	r3, r1
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4413      	add	r3, r2
 800d406:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	f023 0307 	bic.w	r3, r3, #7
 800d40e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	f003 0307 	and.w	r3, r3, #7
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00a      	beq.n	800d430 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	617b      	str	r3, [r7, #20]
}
 800d42c:	bf00      	nop
 800d42e:	e7fe      	b.n	800d42e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d01f      	beq.n	800d476 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d436:	2300      	movs	r3, #0
 800d438:	61fb      	str	r3, [r7, #28]
 800d43a:	e012      	b.n	800d462 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	4413      	add	r3, r2
 800d442:	7819      	ldrb	r1, [r3, #0]
 800d444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	4413      	add	r3, r2
 800d44a:	3334      	adds	r3, #52	; 0x34
 800d44c:	460a      	mov	r2, r1
 800d44e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	4413      	add	r3, r2
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d006      	beq.n	800d46a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	3301      	adds	r3, #1
 800d460:	61fb      	str	r3, [r7, #28]
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	2b0f      	cmp	r3, #15
 800d466:	d9e9      	bls.n	800d43c <prvInitialiseNewTask+0x54>
 800d468:	e000      	b.n	800d46c <prvInitialiseNewTask+0x84>
			{
				break;
 800d46a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46e:	2200      	movs	r2, #0
 800d470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d474:	e003      	b.n	800d47e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d478:	2200      	movs	r2, #0
 800d47a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d480:	2b06      	cmp	r3, #6
 800d482:	d901      	bls.n	800d488 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d484:	2306      	movs	r3, #6
 800d486:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d48c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d492:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d496:	2200      	movs	r2, #0
 800d498:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	3304      	adds	r3, #4
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7ff f891 	bl	800c5c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a6:	3318      	adds	r3, #24
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7ff f88c 	bl	800c5c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	f1c3 0207 	rsb	r2, r3, #7
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	68f9      	ldr	r1, [r7, #12]
 800d4d6:	69b8      	ldr	r0, [r7, #24]
 800d4d8:	f000 fecc 	bl	800e274 <pxPortInitialiseStack>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4ee:	bf00      	nop
 800d4f0:	3720      	adds	r7, #32
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
	...

0800d4f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d500:	f000 ffe8 	bl	800e4d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d504:	4b2a      	ldr	r3, [pc, #168]	; (800d5b0 <prvAddNewTaskToReadyList+0xb8>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	3301      	adds	r3, #1
 800d50a:	4a29      	ldr	r2, [pc, #164]	; (800d5b0 <prvAddNewTaskToReadyList+0xb8>)
 800d50c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d50e:	4b29      	ldr	r3, [pc, #164]	; (800d5b4 <prvAddNewTaskToReadyList+0xbc>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d109      	bne.n	800d52a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d516:	4a27      	ldr	r2, [pc, #156]	; (800d5b4 <prvAddNewTaskToReadyList+0xbc>)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d51c:	4b24      	ldr	r3, [pc, #144]	; (800d5b0 <prvAddNewTaskToReadyList+0xb8>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b01      	cmp	r3, #1
 800d522:	d110      	bne.n	800d546 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d524:	f000 fbc6 	bl	800dcb4 <prvInitialiseTaskLists>
 800d528:	e00d      	b.n	800d546 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d52a:	4b23      	ldr	r3, [pc, #140]	; (800d5b8 <prvAddNewTaskToReadyList+0xc0>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d109      	bne.n	800d546 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d532:	4b20      	ldr	r3, [pc, #128]	; (800d5b4 <prvAddNewTaskToReadyList+0xbc>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d802      	bhi.n	800d546 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d540:	4a1c      	ldr	r2, [pc, #112]	; (800d5b4 <prvAddNewTaskToReadyList+0xbc>)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d546:	4b1d      	ldr	r3, [pc, #116]	; (800d5bc <prvAddNewTaskToReadyList+0xc4>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	3301      	adds	r3, #1
 800d54c:	4a1b      	ldr	r2, [pc, #108]	; (800d5bc <prvAddNewTaskToReadyList+0xc4>)
 800d54e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d554:	2201      	movs	r2, #1
 800d556:	409a      	lsls	r2, r3
 800d558:	4b19      	ldr	r3, [pc, #100]	; (800d5c0 <prvAddNewTaskToReadyList+0xc8>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	4a18      	ldr	r2, [pc, #96]	; (800d5c0 <prvAddNewTaskToReadyList+0xc8>)
 800d560:	6013      	str	r3, [r2, #0]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d566:	4613      	mov	r3, r2
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	4413      	add	r3, r2
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	4a15      	ldr	r2, [pc, #84]	; (800d5c4 <prvAddNewTaskToReadyList+0xcc>)
 800d570:	441a      	add	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3304      	adds	r3, #4
 800d576:	4619      	mov	r1, r3
 800d578:	4610      	mov	r0, r2
 800d57a:	f7ff f831 	bl	800c5e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d57e:	f000 ffd9 	bl	800e534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d582:	4b0d      	ldr	r3, [pc, #52]	; (800d5b8 <prvAddNewTaskToReadyList+0xc0>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00e      	beq.n	800d5a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d58a:	4b0a      	ldr	r3, [pc, #40]	; (800d5b4 <prvAddNewTaskToReadyList+0xbc>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	429a      	cmp	r2, r3
 800d596:	d207      	bcs.n	800d5a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d598:	4b0b      	ldr	r3, [pc, #44]	; (800d5c8 <prvAddNewTaskToReadyList+0xd0>)
 800d59a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d59e:	601a      	str	r2, [r3, #0]
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5a8:	bf00      	nop
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	24000488 	.word	0x24000488
 800d5b4:	24000388 	.word	0x24000388
 800d5b8:	24000494 	.word	0x24000494
 800d5bc:	240004a4 	.word	0x240004a4
 800d5c0:	24000490 	.word	0x24000490
 800d5c4:	2400038c 	.word	0x2400038c
 800d5c8:	e000ed04 	.word	0xe000ed04

0800d5cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d017      	beq.n	800d60e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d5de:	4b13      	ldr	r3, [pc, #76]	; (800d62c <vTaskDelay+0x60>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00a      	beq.n	800d5fc <vTaskDelay+0x30>
	__asm volatile
 800d5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	60bb      	str	r3, [r7, #8]
}
 800d5f8:	bf00      	nop
 800d5fa:	e7fe      	b.n	800d5fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d5fc:	f000 f87a 	bl	800d6f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d600:	2100      	movs	r1, #0
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fdd0 	bl	800e1a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d608:	f000 f882 	bl	800d710 <xTaskResumeAll>
 800d60c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d107      	bne.n	800d624 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d614:	4b06      	ldr	r3, [pc, #24]	; (800d630 <vTaskDelay+0x64>)
 800d616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d61a:	601a      	str	r2, [r3, #0]
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d624:	bf00      	nop
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	240004b0 	.word	0x240004b0
 800d630:	e000ed04 	.word	0xe000ed04

0800d634 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08a      	sub	sp, #40	; 0x28
 800d638:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d63a:	2300      	movs	r3, #0
 800d63c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d63e:	2300      	movs	r3, #0
 800d640:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d642:	463a      	mov	r2, r7
 800d644:	1d39      	adds	r1, r7, #4
 800d646:	f107 0308 	add.w	r3, r7, #8
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7f3 f85a 	bl	8000704 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d650:	6839      	ldr	r1, [r7, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	9202      	str	r2, [sp, #8]
 800d658:	9301      	str	r3, [sp, #4]
 800d65a:	2300      	movs	r3, #0
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	2300      	movs	r3, #0
 800d660:	460a      	mov	r2, r1
 800d662:	491e      	ldr	r1, [pc, #120]	; (800d6dc <vTaskStartScheduler+0xa8>)
 800d664:	481e      	ldr	r0, [pc, #120]	; (800d6e0 <vTaskStartScheduler+0xac>)
 800d666:	f7ff fe1d 	bl	800d2a4 <xTaskCreateStatic>
 800d66a:	4603      	mov	r3, r0
 800d66c:	4a1d      	ldr	r2, [pc, #116]	; (800d6e4 <vTaskStartScheduler+0xb0>)
 800d66e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d670:	4b1c      	ldr	r3, [pc, #112]	; (800d6e4 <vTaskStartScheduler+0xb0>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d002      	beq.n	800d67e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d678:	2301      	movs	r3, #1
 800d67a:	617b      	str	r3, [r7, #20]
 800d67c:	e001      	b.n	800d682 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d67e:	2300      	movs	r3, #0
 800d680:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b01      	cmp	r3, #1
 800d686:	d116      	bne.n	800d6b6 <vTaskStartScheduler+0x82>
	__asm volatile
 800d688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68c:	f383 8811 	msr	BASEPRI, r3
 800d690:	f3bf 8f6f 	isb	sy
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	613b      	str	r3, [r7, #16]
}
 800d69a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d69c:	4b12      	ldr	r3, [pc, #72]	; (800d6e8 <vTaskStartScheduler+0xb4>)
 800d69e:	f04f 32ff 	mov.w	r2, #4294967295
 800d6a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d6a4:	4b11      	ldr	r3, [pc, #68]	; (800d6ec <vTaskStartScheduler+0xb8>)
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d6aa:	4b11      	ldr	r3, [pc, #68]	; (800d6f0 <vTaskStartScheduler+0xbc>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d6b0:	f000 fe6e 	bl	800e390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d6b4:	e00e      	b.n	800d6d4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6bc:	d10a      	bne.n	800d6d4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	60fb      	str	r3, [r7, #12]
}
 800d6d0:	bf00      	nop
 800d6d2:	e7fe      	b.n	800d6d2 <vTaskStartScheduler+0x9e>
}
 800d6d4:	bf00      	nop
 800d6d6:	3718      	adds	r7, #24
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	0800edb8 	.word	0x0800edb8
 800d6e0:	0800dc85 	.word	0x0800dc85
 800d6e4:	240004ac 	.word	0x240004ac
 800d6e8:	240004a8 	.word	0x240004a8
 800d6ec:	24000494 	.word	0x24000494
 800d6f0:	2400048c 	.word	0x2400048c

0800d6f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d6f8:	4b04      	ldr	r3, [pc, #16]	; (800d70c <vTaskSuspendAll+0x18>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	4a03      	ldr	r2, [pc, #12]	; (800d70c <vTaskSuspendAll+0x18>)
 800d700:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d702:	bf00      	nop
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	240004b0 	.word	0x240004b0

0800d710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d716:	2300      	movs	r3, #0
 800d718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d71a:	2300      	movs	r3, #0
 800d71c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d71e:	4b41      	ldr	r3, [pc, #260]	; (800d824 <xTaskResumeAll+0x114>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10a      	bne.n	800d73c <xTaskResumeAll+0x2c>
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	603b      	str	r3, [r7, #0]
}
 800d738:	bf00      	nop
 800d73a:	e7fe      	b.n	800d73a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d73c:	f000 feca 	bl	800e4d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d740:	4b38      	ldr	r3, [pc, #224]	; (800d824 <xTaskResumeAll+0x114>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3b01      	subs	r3, #1
 800d746:	4a37      	ldr	r2, [pc, #220]	; (800d824 <xTaskResumeAll+0x114>)
 800d748:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d74a:	4b36      	ldr	r3, [pc, #216]	; (800d824 <xTaskResumeAll+0x114>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d161      	bne.n	800d816 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d752:	4b35      	ldr	r3, [pc, #212]	; (800d828 <xTaskResumeAll+0x118>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d05d      	beq.n	800d816 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d75a:	e02e      	b.n	800d7ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d75c:	4b33      	ldr	r3, [pc, #204]	; (800d82c <xTaskResumeAll+0x11c>)
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3318      	adds	r3, #24
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fe ff96 	bl	800c69a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3304      	adds	r3, #4
 800d772:	4618      	mov	r0, r3
 800d774:	f7fe ff91 	bl	800c69a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d77c:	2201      	movs	r2, #1
 800d77e:	409a      	lsls	r2, r3
 800d780:	4b2b      	ldr	r3, [pc, #172]	; (800d830 <xTaskResumeAll+0x120>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4313      	orrs	r3, r2
 800d786:	4a2a      	ldr	r2, [pc, #168]	; (800d830 <xTaskResumeAll+0x120>)
 800d788:	6013      	str	r3, [r2, #0]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d78e:	4613      	mov	r3, r2
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	4413      	add	r3, r2
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	4a27      	ldr	r2, [pc, #156]	; (800d834 <xTaskResumeAll+0x124>)
 800d798:	441a      	add	r2, r3
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	3304      	adds	r3, #4
 800d79e:	4619      	mov	r1, r3
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	f7fe ff1d 	bl	800c5e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7aa:	4b23      	ldr	r3, [pc, #140]	; (800d838 <xTaskResumeAll+0x128>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d302      	bcc.n	800d7ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d7b4:	4b21      	ldr	r3, [pc, #132]	; (800d83c <xTaskResumeAll+0x12c>)
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7ba:	4b1c      	ldr	r3, [pc, #112]	; (800d82c <xTaskResumeAll+0x11c>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1cc      	bne.n	800d75c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d001      	beq.n	800d7cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d7c8:	f000 fb12 	bl	800ddf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d7cc:	4b1c      	ldr	r3, [pc, #112]	; (800d840 <xTaskResumeAll+0x130>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d010      	beq.n	800d7fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d7d8:	f000 f836 	bl	800d848 <xTaskIncrementTick>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d7e2:	4b16      	ldr	r3, [pc, #88]	; (800d83c <xTaskResumeAll+0x12c>)
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1f1      	bne.n	800d7d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d7f4:	4b12      	ldr	r3, [pc, #72]	; (800d840 <xTaskResumeAll+0x130>)
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d7fa:	4b10      	ldr	r3, [pc, #64]	; (800d83c <xTaskResumeAll+0x12c>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d009      	beq.n	800d816 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d802:	2301      	movs	r3, #1
 800d804:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d806:	4b0f      	ldr	r3, [pc, #60]	; (800d844 <xTaskResumeAll+0x134>)
 800d808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d80c:	601a      	str	r2, [r3, #0]
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d816:	f000 fe8d 	bl	800e534 <vPortExitCritical>

	return xAlreadyYielded;
 800d81a:	68bb      	ldr	r3, [r7, #8]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	240004b0 	.word	0x240004b0
 800d828:	24000488 	.word	0x24000488
 800d82c:	24000448 	.word	0x24000448
 800d830:	24000490 	.word	0x24000490
 800d834:	2400038c 	.word	0x2400038c
 800d838:	24000388 	.word	0x24000388
 800d83c:	2400049c 	.word	0x2400049c
 800d840:	24000498 	.word	0x24000498
 800d844:	e000ed04 	.word	0xe000ed04

0800d848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d84e:	2300      	movs	r3, #0
 800d850:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d852:	4b4e      	ldr	r3, [pc, #312]	; (800d98c <xTaskIncrementTick+0x144>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	f040 808e 	bne.w	800d978 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d85c:	4b4c      	ldr	r3, [pc, #304]	; (800d990 <xTaskIncrementTick+0x148>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	3301      	adds	r3, #1
 800d862:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d864:	4a4a      	ldr	r2, [pc, #296]	; (800d990 <xTaskIncrementTick+0x148>)
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d120      	bne.n	800d8b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d870:	4b48      	ldr	r3, [pc, #288]	; (800d994 <xTaskIncrementTick+0x14c>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00a      	beq.n	800d890 <xTaskIncrementTick+0x48>
	__asm volatile
 800d87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87e:	f383 8811 	msr	BASEPRI, r3
 800d882:	f3bf 8f6f 	isb	sy
 800d886:	f3bf 8f4f 	dsb	sy
 800d88a:	603b      	str	r3, [r7, #0]
}
 800d88c:	bf00      	nop
 800d88e:	e7fe      	b.n	800d88e <xTaskIncrementTick+0x46>
 800d890:	4b40      	ldr	r3, [pc, #256]	; (800d994 <xTaskIncrementTick+0x14c>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	60fb      	str	r3, [r7, #12]
 800d896:	4b40      	ldr	r3, [pc, #256]	; (800d998 <xTaskIncrementTick+0x150>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a3e      	ldr	r2, [pc, #248]	; (800d994 <xTaskIncrementTick+0x14c>)
 800d89c:	6013      	str	r3, [r2, #0]
 800d89e:	4a3e      	ldr	r2, [pc, #248]	; (800d998 <xTaskIncrementTick+0x150>)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6013      	str	r3, [r2, #0]
 800d8a4:	4b3d      	ldr	r3, [pc, #244]	; (800d99c <xTaskIncrementTick+0x154>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	4a3c      	ldr	r2, [pc, #240]	; (800d99c <xTaskIncrementTick+0x154>)
 800d8ac:	6013      	str	r3, [r2, #0]
 800d8ae:	f000 fa9f 	bl	800ddf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d8b2:	4b3b      	ldr	r3, [pc, #236]	; (800d9a0 <xTaskIncrementTick+0x158>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	693a      	ldr	r2, [r7, #16]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d348      	bcc.n	800d94e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8bc:	4b35      	ldr	r3, [pc, #212]	; (800d994 <xTaskIncrementTick+0x14c>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d104      	bne.n	800d8d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8c6:	4b36      	ldr	r3, [pc, #216]	; (800d9a0 <xTaskIncrementTick+0x158>)
 800d8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8cc:	601a      	str	r2, [r3, #0]
					break;
 800d8ce:	e03e      	b.n	800d94e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8d0:	4b30      	ldr	r3, [pc, #192]	; (800d994 <xTaskIncrementTick+0x14c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d8e0:	693a      	ldr	r2, [r7, #16]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d203      	bcs.n	800d8f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d8e8:	4a2d      	ldr	r2, [pc, #180]	; (800d9a0 <xTaskIncrementTick+0x158>)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d8ee:	e02e      	b.n	800d94e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	3304      	adds	r3, #4
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7fe fed0 	bl	800c69a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d004      	beq.n	800d90c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	3318      	adds	r3, #24
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe fec7 	bl	800c69a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d910:	2201      	movs	r2, #1
 800d912:	409a      	lsls	r2, r3
 800d914:	4b23      	ldr	r3, [pc, #140]	; (800d9a4 <xTaskIncrementTick+0x15c>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4313      	orrs	r3, r2
 800d91a:	4a22      	ldr	r2, [pc, #136]	; (800d9a4 <xTaskIncrementTick+0x15c>)
 800d91c:	6013      	str	r3, [r2, #0]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d922:	4613      	mov	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	4413      	add	r3, r2
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	4a1f      	ldr	r2, [pc, #124]	; (800d9a8 <xTaskIncrementTick+0x160>)
 800d92c:	441a      	add	r2, r3
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	3304      	adds	r3, #4
 800d932:	4619      	mov	r1, r3
 800d934:	4610      	mov	r0, r2
 800d936:	f7fe fe53 	bl	800c5e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d93e:	4b1b      	ldr	r3, [pc, #108]	; (800d9ac <xTaskIncrementTick+0x164>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d944:	429a      	cmp	r2, r3
 800d946:	d3b9      	bcc.n	800d8bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d948:	2301      	movs	r3, #1
 800d94a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d94c:	e7b6      	b.n	800d8bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d94e:	4b17      	ldr	r3, [pc, #92]	; (800d9ac <xTaskIncrementTick+0x164>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d954:	4914      	ldr	r1, [pc, #80]	; (800d9a8 <xTaskIncrementTick+0x160>)
 800d956:	4613      	mov	r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4413      	add	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	440b      	add	r3, r1
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2b01      	cmp	r3, #1
 800d964:	d901      	bls.n	800d96a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d966:	2301      	movs	r3, #1
 800d968:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d96a:	4b11      	ldr	r3, [pc, #68]	; (800d9b0 <xTaskIncrementTick+0x168>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d007      	beq.n	800d982 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d972:	2301      	movs	r3, #1
 800d974:	617b      	str	r3, [r7, #20]
 800d976:	e004      	b.n	800d982 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d978:	4b0e      	ldr	r3, [pc, #56]	; (800d9b4 <xTaskIncrementTick+0x16c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3301      	adds	r3, #1
 800d97e:	4a0d      	ldr	r2, [pc, #52]	; (800d9b4 <xTaskIncrementTick+0x16c>)
 800d980:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d982:	697b      	ldr	r3, [r7, #20]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3718      	adds	r7, #24
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	240004b0 	.word	0x240004b0
 800d990:	2400048c 	.word	0x2400048c
 800d994:	24000440 	.word	0x24000440
 800d998:	24000444 	.word	0x24000444
 800d99c:	240004a0 	.word	0x240004a0
 800d9a0:	240004a8 	.word	0x240004a8
 800d9a4:	24000490 	.word	0x24000490
 800d9a8:	2400038c 	.word	0x2400038c
 800d9ac:	24000388 	.word	0x24000388
 800d9b0:	2400049c 	.word	0x2400049c
 800d9b4:	24000498 	.word	0x24000498

0800d9b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b087      	sub	sp, #28
 800d9bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d9be:	4b27      	ldr	r3, [pc, #156]	; (800da5c <vTaskSwitchContext+0xa4>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d003      	beq.n	800d9ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d9c6:	4b26      	ldr	r3, [pc, #152]	; (800da60 <vTaskSwitchContext+0xa8>)
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d9cc:	e03f      	b.n	800da4e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d9ce:	4b24      	ldr	r3, [pc, #144]	; (800da60 <vTaskSwitchContext+0xa8>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9d4:	4b23      	ldr	r3, [pc, #140]	; (800da64 <vTaskSwitchContext+0xac>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	fab3 f383 	clz	r3, r3
 800d9e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d9e2:	7afb      	ldrb	r3, [r7, #11]
 800d9e4:	f1c3 031f 	rsb	r3, r3, #31
 800d9e8:	617b      	str	r3, [r7, #20]
 800d9ea:	491f      	ldr	r1, [pc, #124]	; (800da68 <vTaskSwitchContext+0xb0>)
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	4413      	add	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	440b      	add	r3, r1
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d10a      	bne.n	800da14 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	607b      	str	r3, [r7, #4]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <vTaskSwitchContext+0x5a>
 800da14:	697a      	ldr	r2, [r7, #20]
 800da16:	4613      	mov	r3, r2
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	4413      	add	r3, r2
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	4a12      	ldr	r2, [pc, #72]	; (800da68 <vTaskSwitchContext+0xb0>)
 800da20:	4413      	add	r3, r2
 800da22:	613b      	str	r3, [r7, #16]
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	685a      	ldr	r2, [r3, #4]
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	605a      	str	r2, [r3, #4]
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	685a      	ldr	r2, [r3, #4]
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	3308      	adds	r3, #8
 800da36:	429a      	cmp	r2, r3
 800da38:	d104      	bne.n	800da44 <vTaskSwitchContext+0x8c>
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	685a      	ldr	r2, [r3, #4]
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	605a      	str	r2, [r3, #4]
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	4a08      	ldr	r2, [pc, #32]	; (800da6c <vTaskSwitchContext+0xb4>)
 800da4c:	6013      	str	r3, [r2, #0]
}
 800da4e:	bf00      	nop
 800da50:	371c      	adds	r7, #28
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	240004b0 	.word	0x240004b0
 800da60:	2400049c 	.word	0x2400049c
 800da64:	24000490 	.word	0x24000490
 800da68:	2400038c 	.word	0x2400038c
 800da6c:	24000388 	.word	0x24000388

0800da70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10a      	bne.n	800da96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	60fb      	str	r3, [r7, #12]
}
 800da92:	bf00      	nop
 800da94:	e7fe      	b.n	800da94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da96:	4b07      	ldr	r3, [pc, #28]	; (800dab4 <vTaskPlaceOnEventList+0x44>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	3318      	adds	r3, #24
 800da9c:	4619      	mov	r1, r3
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f7fe fdc2 	bl	800c628 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800daa4:	2101      	movs	r1, #1
 800daa6:	6838      	ldr	r0, [r7, #0]
 800daa8:	f000 fb7e 	bl	800e1a8 <prvAddCurrentTaskToDelayedList>
}
 800daac:	bf00      	nop
 800daae:	3710      	adds	r7, #16
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	24000388 	.word	0x24000388

0800dab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d10a      	bne.n	800dae4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	f3bf 8f4f 	dsb	sy
 800dade:	60fb      	str	r3, [r7, #12]
}
 800dae0:	bf00      	nop
 800dae2:	e7fe      	b.n	800dae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	3318      	adds	r3, #24
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fe fdd6 	bl	800c69a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daee:	4b1d      	ldr	r3, [pc, #116]	; (800db64 <xTaskRemoveFromEventList+0xac>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d11c      	bne.n	800db30 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	3304      	adds	r3, #4
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fe fdcd 	bl	800c69a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db04:	2201      	movs	r2, #1
 800db06:	409a      	lsls	r2, r3
 800db08:	4b17      	ldr	r3, [pc, #92]	; (800db68 <xTaskRemoveFromEventList+0xb0>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4313      	orrs	r3, r2
 800db0e:	4a16      	ldr	r2, [pc, #88]	; (800db68 <xTaskRemoveFromEventList+0xb0>)
 800db10:	6013      	str	r3, [r2, #0]
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db16:	4613      	mov	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4413      	add	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4a13      	ldr	r2, [pc, #76]	; (800db6c <xTaskRemoveFromEventList+0xb4>)
 800db20:	441a      	add	r2, r3
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	3304      	adds	r3, #4
 800db26:	4619      	mov	r1, r3
 800db28:	4610      	mov	r0, r2
 800db2a:	f7fe fd59 	bl	800c5e0 <vListInsertEnd>
 800db2e:	e005      	b.n	800db3c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	3318      	adds	r3, #24
 800db34:	4619      	mov	r1, r3
 800db36:	480e      	ldr	r0, [pc, #56]	; (800db70 <xTaskRemoveFromEventList+0xb8>)
 800db38:	f7fe fd52 	bl	800c5e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db40:	4b0c      	ldr	r3, [pc, #48]	; (800db74 <xTaskRemoveFromEventList+0xbc>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db46:	429a      	cmp	r2, r3
 800db48:	d905      	bls.n	800db56 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800db4a:	2301      	movs	r3, #1
 800db4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800db4e:	4b0a      	ldr	r3, [pc, #40]	; (800db78 <xTaskRemoveFromEventList+0xc0>)
 800db50:	2201      	movs	r2, #1
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	e001      	b.n	800db5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800db56:	2300      	movs	r3, #0
 800db58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800db5a:	697b      	ldr	r3, [r7, #20]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3718      	adds	r7, #24
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	240004b0 	.word	0x240004b0
 800db68:	24000490 	.word	0x24000490
 800db6c:	2400038c 	.word	0x2400038c
 800db70:	24000448 	.word	0x24000448
 800db74:	24000388 	.word	0x24000388
 800db78:	2400049c 	.word	0x2400049c

0800db7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db84:	4b06      	ldr	r3, [pc, #24]	; (800dba0 <vTaskInternalSetTimeOutState+0x24>)
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db8c:	4b05      	ldr	r3, [pc, #20]	; (800dba4 <vTaskInternalSetTimeOutState+0x28>)
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	605a      	str	r2, [r3, #4]
}
 800db94:	bf00      	nop
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	240004a0 	.word	0x240004a0
 800dba4:	2400048c 	.word	0x2400048c

0800dba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d10a      	bne.n	800dbce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbc:	f383 8811 	msr	BASEPRI, r3
 800dbc0:	f3bf 8f6f 	isb	sy
 800dbc4:	f3bf 8f4f 	dsb	sy
 800dbc8:	613b      	str	r3, [r7, #16]
}
 800dbca:	bf00      	nop
 800dbcc:	e7fe      	b.n	800dbcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10a      	bne.n	800dbea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	60fb      	str	r3, [r7, #12]
}
 800dbe6:	bf00      	nop
 800dbe8:	e7fe      	b.n	800dbe8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dbea:	f000 fc73 	bl	800e4d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dbee:	4b1d      	ldr	r3, [pc, #116]	; (800dc64 <xTaskCheckForTimeOut+0xbc>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	69ba      	ldr	r2, [r7, #24]
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc06:	d102      	bne.n	800dc0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	61fb      	str	r3, [r7, #28]
 800dc0c:	e023      	b.n	800dc56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	4b15      	ldr	r3, [pc, #84]	; (800dc68 <xTaskCheckForTimeOut+0xc0>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d007      	beq.n	800dc2a <xTaskCheckForTimeOut+0x82>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	69ba      	ldr	r2, [r7, #24]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d302      	bcc.n	800dc2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dc24:	2301      	movs	r3, #1
 800dc26:	61fb      	str	r3, [r7, #28]
 800dc28:	e015      	b.n	800dc56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	697a      	ldr	r2, [r7, #20]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d20b      	bcs.n	800dc4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	1ad2      	subs	r2, r2, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f7ff ff9b 	bl	800db7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc46:	2300      	movs	r3, #0
 800dc48:	61fb      	str	r3, [r7, #28]
 800dc4a:	e004      	b.n	800dc56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc52:	2301      	movs	r3, #1
 800dc54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc56:	f000 fc6d 	bl	800e534 <vPortExitCritical>

	return xReturn;
 800dc5a:	69fb      	ldr	r3, [r7, #28]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3720      	adds	r7, #32
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	2400048c 	.word	0x2400048c
 800dc68:	240004a0 	.word	0x240004a0

0800dc6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc70:	4b03      	ldr	r3, [pc, #12]	; (800dc80 <vTaskMissedYield+0x14>)
 800dc72:	2201      	movs	r2, #1
 800dc74:	601a      	str	r2, [r3, #0]
}
 800dc76:	bf00      	nop
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr
 800dc80:	2400049c 	.word	0x2400049c

0800dc84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc8c:	f000 f852 	bl	800dd34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc90:	4b06      	ldr	r3, [pc, #24]	; (800dcac <prvIdleTask+0x28>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d9f9      	bls.n	800dc8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc98:	4b05      	ldr	r3, [pc, #20]	; (800dcb0 <prvIdleTask+0x2c>)
 800dc9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc9e:	601a      	str	r2, [r3, #0]
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dca8:	e7f0      	b.n	800dc8c <prvIdleTask+0x8>
 800dcaa:	bf00      	nop
 800dcac:	2400038c 	.word	0x2400038c
 800dcb0:	e000ed04 	.word	0xe000ed04

0800dcb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcba:	2300      	movs	r3, #0
 800dcbc:	607b      	str	r3, [r7, #4]
 800dcbe:	e00c      	b.n	800dcda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	4413      	add	r3, r2
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4a12      	ldr	r2, [pc, #72]	; (800dd14 <prvInitialiseTaskLists+0x60>)
 800dccc:	4413      	add	r3, r2
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fe fc59 	bl	800c586 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	607b      	str	r3, [r7, #4]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b06      	cmp	r3, #6
 800dcde:	d9ef      	bls.n	800dcc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dce0:	480d      	ldr	r0, [pc, #52]	; (800dd18 <prvInitialiseTaskLists+0x64>)
 800dce2:	f7fe fc50 	bl	800c586 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dce6:	480d      	ldr	r0, [pc, #52]	; (800dd1c <prvInitialiseTaskLists+0x68>)
 800dce8:	f7fe fc4d 	bl	800c586 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dcec:	480c      	ldr	r0, [pc, #48]	; (800dd20 <prvInitialiseTaskLists+0x6c>)
 800dcee:	f7fe fc4a 	bl	800c586 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dcf2:	480c      	ldr	r0, [pc, #48]	; (800dd24 <prvInitialiseTaskLists+0x70>)
 800dcf4:	f7fe fc47 	bl	800c586 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dcf8:	480b      	ldr	r0, [pc, #44]	; (800dd28 <prvInitialiseTaskLists+0x74>)
 800dcfa:	f7fe fc44 	bl	800c586 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dcfe:	4b0b      	ldr	r3, [pc, #44]	; (800dd2c <prvInitialiseTaskLists+0x78>)
 800dd00:	4a05      	ldr	r2, [pc, #20]	; (800dd18 <prvInitialiseTaskLists+0x64>)
 800dd02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd04:	4b0a      	ldr	r3, [pc, #40]	; (800dd30 <prvInitialiseTaskLists+0x7c>)
 800dd06:	4a05      	ldr	r2, [pc, #20]	; (800dd1c <prvInitialiseTaskLists+0x68>)
 800dd08:	601a      	str	r2, [r3, #0]
}
 800dd0a:	bf00      	nop
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	2400038c 	.word	0x2400038c
 800dd18:	24000418 	.word	0x24000418
 800dd1c:	2400042c 	.word	0x2400042c
 800dd20:	24000448 	.word	0x24000448
 800dd24:	2400045c 	.word	0x2400045c
 800dd28:	24000474 	.word	0x24000474
 800dd2c:	24000440 	.word	0x24000440
 800dd30:	24000444 	.word	0x24000444

0800dd34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd3a:	e019      	b.n	800dd70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd3c:	f000 fbca 	bl	800e4d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd40:	4b10      	ldr	r3, [pc, #64]	; (800dd84 <prvCheckTasksWaitingTermination+0x50>)
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fe fca4 	bl	800c69a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd52:	4b0d      	ldr	r3, [pc, #52]	; (800dd88 <prvCheckTasksWaitingTermination+0x54>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	3b01      	subs	r3, #1
 800dd58:	4a0b      	ldr	r2, [pc, #44]	; (800dd88 <prvCheckTasksWaitingTermination+0x54>)
 800dd5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd5c:	4b0b      	ldr	r3, [pc, #44]	; (800dd8c <prvCheckTasksWaitingTermination+0x58>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	3b01      	subs	r3, #1
 800dd62:	4a0a      	ldr	r2, [pc, #40]	; (800dd8c <prvCheckTasksWaitingTermination+0x58>)
 800dd64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd66:	f000 fbe5 	bl	800e534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f810 	bl	800dd90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd70:	4b06      	ldr	r3, [pc, #24]	; (800dd8c <prvCheckTasksWaitingTermination+0x58>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1e1      	bne.n	800dd3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dd78:	bf00      	nop
 800dd7a:	bf00      	nop
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	2400045c 	.word	0x2400045c
 800dd88:	24000488 	.word	0x24000488
 800dd8c:	24000470 	.word	0x24000470

0800dd90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d108      	bne.n	800ddb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dda6:	4618      	mov	r0, r3
 800dda8:	f000 fd82 	bl	800e8b0 <vPortFree>
				vPortFree( pxTCB );
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 fd7f 	bl	800e8b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ddb2:	e018      	b.n	800dde6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d103      	bne.n	800ddc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 fd76 	bl	800e8b0 <vPortFree>
	}
 800ddc4:	e00f      	b.n	800dde6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	d00a      	beq.n	800dde6 <prvDeleteTCB+0x56>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	60fb      	str	r3, [r7, #12]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <prvDeleteTCB+0x54>
	}
 800dde6:	bf00      	nop
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
	...

0800ddf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddf6:	4b0c      	ldr	r3, [pc, #48]	; (800de28 <prvResetNextTaskUnblockTime+0x38>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d104      	bne.n	800de0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de00:	4b0a      	ldr	r3, [pc, #40]	; (800de2c <prvResetNextTaskUnblockTime+0x3c>)
 800de02:	f04f 32ff 	mov.w	r2, #4294967295
 800de06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de08:	e008      	b.n	800de1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de0a:	4b07      	ldr	r3, [pc, #28]	; (800de28 <prvResetNextTaskUnblockTime+0x38>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	4a04      	ldr	r2, [pc, #16]	; (800de2c <prvResetNextTaskUnblockTime+0x3c>)
 800de1a:	6013      	str	r3, [r2, #0]
}
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	24000440 	.word	0x24000440
 800de2c:	240004a8 	.word	0x240004a8

0800de30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de36:	4b0b      	ldr	r3, [pc, #44]	; (800de64 <xTaskGetSchedulerState+0x34>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d102      	bne.n	800de44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de3e:	2301      	movs	r3, #1
 800de40:	607b      	str	r3, [r7, #4]
 800de42:	e008      	b.n	800de56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de44:	4b08      	ldr	r3, [pc, #32]	; (800de68 <xTaskGetSchedulerState+0x38>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d102      	bne.n	800de52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de4c:	2302      	movs	r3, #2
 800de4e:	607b      	str	r3, [r7, #4]
 800de50:	e001      	b.n	800de56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de52:	2300      	movs	r3, #0
 800de54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de56:	687b      	ldr	r3, [r7, #4]
	}
 800de58:	4618      	mov	r0, r3
 800de5a:	370c      	adds	r7, #12
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	24000494 	.word	0x24000494
 800de68:	240004b0 	.word	0x240004b0

0800de6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800de78:	2300      	movs	r3, #0
 800de7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d05e      	beq.n	800df40 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de86:	4b31      	ldr	r3, [pc, #196]	; (800df4c <xTaskPriorityInherit+0xe0>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d24e      	bcs.n	800df2e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	699b      	ldr	r3, [r3, #24]
 800de94:	2b00      	cmp	r3, #0
 800de96:	db06      	blt.n	800dea6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de98:	4b2c      	ldr	r3, [pc, #176]	; (800df4c <xTaskPriorityInherit+0xe0>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9e:	f1c3 0207 	rsb	r2, r3, #7
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	6959      	ldr	r1, [r3, #20]
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deae:	4613      	mov	r3, r2
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4413      	add	r3, r2
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4a26      	ldr	r2, [pc, #152]	; (800df50 <xTaskPriorityInherit+0xe4>)
 800deb8:	4413      	add	r3, r2
 800deba:	4299      	cmp	r1, r3
 800debc:	d12f      	bne.n	800df1e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	3304      	adds	r3, #4
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fe fbe9 	bl	800c69a <uxListRemove>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10a      	bne.n	800dee4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded2:	2201      	movs	r2, #1
 800ded4:	fa02 f303 	lsl.w	r3, r2, r3
 800ded8:	43da      	mvns	r2, r3
 800deda:	4b1e      	ldr	r3, [pc, #120]	; (800df54 <xTaskPriorityInherit+0xe8>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4013      	ands	r3, r2
 800dee0:	4a1c      	ldr	r2, [pc, #112]	; (800df54 <xTaskPriorityInherit+0xe8>)
 800dee2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dee4:	4b19      	ldr	r3, [pc, #100]	; (800df4c <xTaskPriorityInherit+0xe0>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def2:	2201      	movs	r2, #1
 800def4:	409a      	lsls	r2, r3
 800def6:	4b17      	ldr	r3, [pc, #92]	; (800df54 <xTaskPriorityInherit+0xe8>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4313      	orrs	r3, r2
 800defc:	4a15      	ldr	r2, [pc, #84]	; (800df54 <xTaskPriorityInherit+0xe8>)
 800defe:	6013      	str	r3, [r2, #0]
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df04:	4613      	mov	r3, r2
 800df06:	009b      	lsls	r3, r3, #2
 800df08:	4413      	add	r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4a10      	ldr	r2, [pc, #64]	; (800df50 <xTaskPriorityInherit+0xe4>)
 800df0e:	441a      	add	r2, r3
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	3304      	adds	r3, #4
 800df14:	4619      	mov	r1, r3
 800df16:	4610      	mov	r0, r2
 800df18:	f7fe fb62 	bl	800c5e0 <vListInsertEnd>
 800df1c:	e004      	b.n	800df28 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df1e:	4b0b      	ldr	r3, [pc, #44]	; (800df4c <xTaskPriorityInherit+0xe0>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800df28:	2301      	movs	r3, #1
 800df2a:	60fb      	str	r3, [r7, #12]
 800df2c:	e008      	b.n	800df40 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df32:	4b06      	ldr	r3, [pc, #24]	; (800df4c <xTaskPriorityInherit+0xe0>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df38:	429a      	cmp	r2, r3
 800df3a:	d201      	bcs.n	800df40 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800df3c:	2301      	movs	r3, #1
 800df3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df40:	68fb      	ldr	r3, [r7, #12]
	}
 800df42:	4618      	mov	r0, r3
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	24000388 	.word	0x24000388
 800df50:	2400038c 	.word	0x2400038c
 800df54:	24000490 	.word	0x24000490

0800df58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800df64:	2300      	movs	r3, #0
 800df66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d06e      	beq.n	800e04c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800df6e:	4b3a      	ldr	r3, [pc, #232]	; (800e058 <xTaskPriorityDisinherit+0x100>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	693a      	ldr	r2, [r7, #16]
 800df74:	429a      	cmp	r2, r3
 800df76:	d00a      	beq.n	800df8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800df78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7c:	f383 8811 	msr	BASEPRI, r3
 800df80:	f3bf 8f6f 	isb	sy
 800df84:	f3bf 8f4f 	dsb	sy
 800df88:	60fb      	str	r3, [r7, #12]
}
 800df8a:	bf00      	nop
 800df8c:	e7fe      	b.n	800df8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df92:	2b00      	cmp	r3, #0
 800df94:	d10a      	bne.n	800dfac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800df96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	60bb      	str	r3, [r7, #8]
}
 800dfa8:	bf00      	nop
 800dfaa:	e7fe      	b.n	800dfaa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfb0:	1e5a      	subs	r2, r3, #1
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d044      	beq.n	800e04c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d140      	bne.n	800e04c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	3304      	adds	r3, #4
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fe fb63 	bl	800c69a <uxListRemove>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d115      	bne.n	800e006 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfde:	491f      	ldr	r1, [pc, #124]	; (800e05c <xTaskPriorityDisinherit+0x104>)
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4413      	add	r3, r2
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	440b      	add	r3, r1
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d10a      	bne.n	800e006 <xTaskPriorityDisinherit+0xae>
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff4:	2201      	movs	r2, #1
 800dff6:	fa02 f303 	lsl.w	r3, r2, r3
 800dffa:	43da      	mvns	r2, r3
 800dffc:	4b18      	ldr	r3, [pc, #96]	; (800e060 <xTaskPriorityDisinherit+0x108>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4013      	ands	r3, r2
 800e002:	4a17      	ldr	r2, [pc, #92]	; (800e060 <xTaskPriorityDisinherit+0x108>)
 800e004:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e012:	f1c3 0207 	rsb	r2, r3, #7
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01e:	2201      	movs	r2, #1
 800e020:	409a      	lsls	r2, r3
 800e022:	4b0f      	ldr	r3, [pc, #60]	; (800e060 <xTaskPriorityDisinherit+0x108>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4313      	orrs	r3, r2
 800e028:	4a0d      	ldr	r2, [pc, #52]	; (800e060 <xTaskPriorityDisinherit+0x108>)
 800e02a:	6013      	str	r3, [r2, #0]
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4a08      	ldr	r2, [pc, #32]	; (800e05c <xTaskPriorityDisinherit+0x104>)
 800e03a:	441a      	add	r2, r3
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	3304      	adds	r3, #4
 800e040:	4619      	mov	r1, r3
 800e042:	4610      	mov	r0, r2
 800e044:	f7fe facc 	bl	800c5e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e048:	2301      	movs	r3, #1
 800e04a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e04c:	697b      	ldr	r3, [r7, #20]
	}
 800e04e:	4618      	mov	r0, r3
 800e050:	3718      	adds	r7, #24
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	24000388 	.word	0x24000388
 800e05c:	2400038c 	.word	0x2400038c
 800e060:	24000490 	.word	0x24000490

0800e064 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e064:	b580      	push	{r7, lr}
 800e066:	b088      	sub	sp, #32
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e072:	2301      	movs	r3, #1
 800e074:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d077      	beq.n	800e16c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10a      	bne.n	800e09a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e088:	f383 8811 	msr	BASEPRI, r3
 800e08c:	f3bf 8f6f 	isb	sy
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	60fb      	str	r3, [r7, #12]
}
 800e096:	bf00      	nop
 800e098:	e7fe      	b.n	800e098 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d902      	bls.n	800e0aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	61fb      	str	r3, [r7, #28]
 800e0a8:	e002      	b.n	800e0b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e0b0:	69bb      	ldr	r3, [r7, #24]
 800e0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b4:	69fa      	ldr	r2, [r7, #28]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d058      	beq.n	800e16c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0be:	697a      	ldr	r2, [r7, #20]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d153      	bne.n	800e16c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e0c4:	4b2b      	ldr	r3, [pc, #172]	; (800e174 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	69ba      	ldr	r2, [r7, #24]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d10a      	bne.n	800e0e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d2:	f383 8811 	msr	BASEPRI, r3
 800e0d6:	f3bf 8f6f 	isb	sy
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	60bb      	str	r3, [r7, #8]
}
 800e0e0:	bf00      	nop
 800e0e2:	e7fe      	b.n	800e0e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e0e4:	69bb      	ldr	r3, [r7, #24]
 800e0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e0ea:	69bb      	ldr	r3, [r7, #24]
 800e0ec:	69fa      	ldr	r2, [r7, #28]
 800e0ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	699b      	ldr	r3, [r3, #24]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	db04      	blt.n	800e102 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	f1c3 0207 	rsb	r2, r3, #7
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	6959      	ldr	r1, [r3, #20]
 800e106:	693a      	ldr	r2, [r7, #16]
 800e108:	4613      	mov	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	4a19      	ldr	r2, [pc, #100]	; (800e178 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e112:	4413      	add	r3, r2
 800e114:	4299      	cmp	r1, r3
 800e116:	d129      	bne.n	800e16c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	3304      	adds	r3, #4
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe fabc 	bl	800c69a <uxListRemove>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10a      	bne.n	800e13e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12c:	2201      	movs	r2, #1
 800e12e:	fa02 f303 	lsl.w	r3, r2, r3
 800e132:	43da      	mvns	r2, r3
 800e134:	4b11      	ldr	r3, [pc, #68]	; (800e17c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4013      	ands	r3, r2
 800e13a:	4a10      	ldr	r2, [pc, #64]	; (800e17c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e13c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e142:	2201      	movs	r2, #1
 800e144:	409a      	lsls	r2, r3
 800e146:	4b0d      	ldr	r3, [pc, #52]	; (800e17c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4313      	orrs	r3, r2
 800e14c:	4a0b      	ldr	r2, [pc, #44]	; (800e17c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e14e:	6013      	str	r3, [r2, #0]
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e154:	4613      	mov	r3, r2
 800e156:	009b      	lsls	r3, r3, #2
 800e158:	4413      	add	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	4a06      	ldr	r2, [pc, #24]	; (800e178 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e15e:	441a      	add	r2, r3
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	3304      	adds	r3, #4
 800e164:	4619      	mov	r1, r3
 800e166:	4610      	mov	r0, r2
 800e168:	f7fe fa3a 	bl	800c5e0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e16c:	bf00      	nop
 800e16e:	3720      	adds	r7, #32
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	24000388 	.word	0x24000388
 800e178:	2400038c 	.word	0x2400038c
 800e17c:	24000490 	.word	0x24000490

0800e180 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e180:	b480      	push	{r7}
 800e182:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e184:	4b07      	ldr	r3, [pc, #28]	; (800e1a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d004      	beq.n	800e196 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e18c:	4b05      	ldr	r3, [pc, #20]	; (800e1a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e192:	3201      	adds	r2, #1
 800e194:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e196:	4b03      	ldr	r3, [pc, #12]	; (800e1a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e198:	681b      	ldr	r3, [r3, #0]
	}
 800e19a:	4618      	mov	r0, r3
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr
 800e1a4:	24000388 	.word	0x24000388

0800e1a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e1b2:	4b29      	ldr	r3, [pc, #164]	; (800e258 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1b8:	4b28      	ldr	r3, [pc, #160]	; (800e25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fe fa6b 	bl	800c69a <uxListRemove>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d10b      	bne.n	800e1e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e1ca:	4b24      	ldr	r3, [pc, #144]	; (800e25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1d6:	43da      	mvns	r2, r3
 800e1d8:	4b21      	ldr	r3, [pc, #132]	; (800e260 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4013      	ands	r3, r2
 800e1de:	4a20      	ldr	r2, [pc, #128]	; (800e260 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e1e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e8:	d10a      	bne.n	800e200 <prvAddCurrentTaskToDelayedList+0x58>
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d007      	beq.n	800e200 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1f0:	4b1a      	ldr	r3, [pc, #104]	; (800e25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	3304      	adds	r3, #4
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	481a      	ldr	r0, [pc, #104]	; (800e264 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e1fa:	f7fe f9f1 	bl	800c5e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e1fe:	e026      	b.n	800e24e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4413      	add	r3, r2
 800e206:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e208:	4b14      	ldr	r3, [pc, #80]	; (800e25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	68ba      	ldr	r2, [r7, #8]
 800e20e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e210:	68ba      	ldr	r2, [r7, #8]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	429a      	cmp	r2, r3
 800e216:	d209      	bcs.n	800e22c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e218:	4b13      	ldr	r3, [pc, #76]	; (800e268 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	4b0f      	ldr	r3, [pc, #60]	; (800e25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	3304      	adds	r3, #4
 800e222:	4619      	mov	r1, r3
 800e224:	4610      	mov	r0, r2
 800e226:	f7fe f9ff 	bl	800c628 <vListInsert>
}
 800e22a:	e010      	b.n	800e24e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e22c:	4b0f      	ldr	r3, [pc, #60]	; (800e26c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	4b0a      	ldr	r3, [pc, #40]	; (800e25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3304      	adds	r3, #4
 800e236:	4619      	mov	r1, r3
 800e238:	4610      	mov	r0, r2
 800e23a:	f7fe f9f5 	bl	800c628 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e23e:	4b0c      	ldr	r3, [pc, #48]	; (800e270 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	68ba      	ldr	r2, [r7, #8]
 800e244:	429a      	cmp	r2, r3
 800e246:	d202      	bcs.n	800e24e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e248:	4a09      	ldr	r2, [pc, #36]	; (800e270 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	6013      	str	r3, [r2, #0]
}
 800e24e:	bf00      	nop
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	2400048c 	.word	0x2400048c
 800e25c:	24000388 	.word	0x24000388
 800e260:	24000490 	.word	0x24000490
 800e264:	24000474 	.word	0x24000474
 800e268:	24000444 	.word	0x24000444
 800e26c:	24000440 	.word	0x24000440
 800e270:	240004a8 	.word	0x240004a8

0800e274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	3b04      	subs	r3, #4
 800e284:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e28c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	3b04      	subs	r3, #4
 800e292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	f023 0201 	bic.w	r2, r3, #1
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	3b04      	subs	r3, #4
 800e2a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e2a4:	4a0c      	ldr	r2, [pc, #48]	; (800e2d8 <pxPortInitialiseStack+0x64>)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	3b14      	subs	r3, #20
 800e2ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	3b04      	subs	r3, #4
 800e2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f06f 0202 	mvn.w	r2, #2
 800e2c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	3b20      	subs	r3, #32
 800e2c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3714      	adds	r7, #20
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	0800e2dd 	.word	0x0800e2dd

0800e2dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e2e6:	4b12      	ldr	r3, [pc, #72]	; (800e330 <prvTaskExitError+0x54>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ee:	d00a      	beq.n	800e306 <prvTaskExitError+0x2a>
	__asm volatile
 800e2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	60fb      	str	r3, [r7, #12]
}
 800e302:	bf00      	nop
 800e304:	e7fe      	b.n	800e304 <prvTaskExitError+0x28>
	__asm volatile
 800e306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	60bb      	str	r3, [r7, #8]
}
 800e318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e31a:	bf00      	nop
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d0fc      	beq.n	800e31c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	24000030 	.word	0x24000030
	...

0800e340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e340:	4b07      	ldr	r3, [pc, #28]	; (800e360 <pxCurrentTCBConst2>)
 800e342:	6819      	ldr	r1, [r3, #0]
 800e344:	6808      	ldr	r0, [r1, #0]
 800e346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34a:	f380 8809 	msr	PSP, r0
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	f04f 0000 	mov.w	r0, #0
 800e356:	f380 8811 	msr	BASEPRI, r0
 800e35a:	4770      	bx	lr
 800e35c:	f3af 8000 	nop.w

0800e360 <pxCurrentTCBConst2>:
 800e360:	24000388 	.word	0x24000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e364:	bf00      	nop
 800e366:	bf00      	nop

0800e368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e368:	4808      	ldr	r0, [pc, #32]	; (800e38c <prvPortStartFirstTask+0x24>)
 800e36a:	6800      	ldr	r0, [r0, #0]
 800e36c:	6800      	ldr	r0, [r0, #0]
 800e36e:	f380 8808 	msr	MSP, r0
 800e372:	f04f 0000 	mov.w	r0, #0
 800e376:	f380 8814 	msr	CONTROL, r0
 800e37a:	b662      	cpsie	i
 800e37c:	b661      	cpsie	f
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	df00      	svc	0
 800e388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e38a:	bf00      	nop
 800e38c:	e000ed08 	.word	0xe000ed08

0800e390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b086      	sub	sp, #24
 800e394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e396:	4b46      	ldr	r3, [pc, #280]	; (800e4b0 <xPortStartScheduler+0x120>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a46      	ldr	r2, [pc, #280]	; (800e4b4 <xPortStartScheduler+0x124>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d10a      	bne.n	800e3b6 <xPortStartScheduler+0x26>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	613b      	str	r3, [r7, #16]
}
 800e3b2:	bf00      	nop
 800e3b4:	e7fe      	b.n	800e3b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e3b6:	4b3e      	ldr	r3, [pc, #248]	; (800e4b0 <xPortStartScheduler+0x120>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a3f      	ldr	r2, [pc, #252]	; (800e4b8 <xPortStartScheduler+0x128>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d10a      	bne.n	800e3d6 <xPortStartScheduler+0x46>
	__asm volatile
 800e3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c4:	f383 8811 	msr	BASEPRI, r3
 800e3c8:	f3bf 8f6f 	isb	sy
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	60fb      	str	r3, [r7, #12]
}
 800e3d2:	bf00      	nop
 800e3d4:	e7fe      	b.n	800e3d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e3d6:	4b39      	ldr	r3, [pc, #228]	; (800e4bc <xPortStartScheduler+0x12c>)
 800e3d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	22ff      	movs	r2, #255	; 0xff
 800e3e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e3f0:	78fb      	ldrb	r3, [r7, #3]
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	4b31      	ldr	r3, [pc, #196]	; (800e4c0 <xPortStartScheduler+0x130>)
 800e3fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3fe:	4b31      	ldr	r3, [pc, #196]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e400:	2207      	movs	r2, #7
 800e402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e404:	e009      	b.n	800e41a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e406:	4b2f      	ldr	r3, [pc, #188]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	3b01      	subs	r3, #1
 800e40c:	4a2d      	ldr	r2, [pc, #180]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e40e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	b2db      	uxtb	r3, r3
 800e414:	005b      	lsls	r3, r3, #1
 800e416:	b2db      	uxtb	r3, r3
 800e418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e41a:	78fb      	ldrb	r3, [r7, #3]
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e422:	2b80      	cmp	r3, #128	; 0x80
 800e424:	d0ef      	beq.n	800e406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e426:	4b27      	ldr	r3, [pc, #156]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f1c3 0307 	rsb	r3, r3, #7
 800e42e:	2b04      	cmp	r3, #4
 800e430:	d00a      	beq.n	800e448 <xPortStartScheduler+0xb8>
	__asm volatile
 800e432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	60bb      	str	r3, [r7, #8]
}
 800e444:	bf00      	nop
 800e446:	e7fe      	b.n	800e446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e448:	4b1e      	ldr	r3, [pc, #120]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	021b      	lsls	r3, r3, #8
 800e44e:	4a1d      	ldr	r2, [pc, #116]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e452:	4b1c      	ldr	r3, [pc, #112]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e45a:	4a1a      	ldr	r2, [pc, #104]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e45c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	b2da      	uxtb	r2, r3
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e466:	4b18      	ldr	r3, [pc, #96]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4a17      	ldr	r2, [pc, #92]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e46c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e472:	4b15      	ldr	r3, [pc, #84]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a14      	ldr	r2, [pc, #80]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e47c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e47e:	f000 f8dd 	bl	800e63c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e482:	4b12      	ldr	r3, [pc, #72]	; (800e4cc <xPortStartScheduler+0x13c>)
 800e484:	2200      	movs	r2, #0
 800e486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e488:	f000 f8fc 	bl	800e684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e48c:	4b10      	ldr	r3, [pc, #64]	; (800e4d0 <xPortStartScheduler+0x140>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a0f      	ldr	r2, [pc, #60]	; (800e4d0 <xPortStartScheduler+0x140>)
 800e492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e498:	f7ff ff66 	bl	800e368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e49c:	f7ff fa8c 	bl	800d9b8 <vTaskSwitchContext>
	prvTaskExitError();
 800e4a0:	f7ff ff1c 	bl	800e2dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3718      	adds	r7, #24
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	e000ed00 	.word	0xe000ed00
 800e4b4:	410fc271 	.word	0x410fc271
 800e4b8:	410fc270 	.word	0x410fc270
 800e4bc:	e000e400 	.word	0xe000e400
 800e4c0:	240004b4 	.word	0x240004b4
 800e4c4:	240004b8 	.word	0x240004b8
 800e4c8:	e000ed20 	.word	0xe000ed20
 800e4cc:	24000030 	.word	0x24000030
 800e4d0:	e000ef34 	.word	0xe000ef34

0800e4d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	607b      	str	r3, [r7, #4]
}
 800e4ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e4ee:	4b0f      	ldr	r3, [pc, #60]	; (800e52c <vPortEnterCritical+0x58>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	4a0d      	ldr	r2, [pc, #52]	; (800e52c <vPortEnterCritical+0x58>)
 800e4f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e4f8:	4b0c      	ldr	r3, [pc, #48]	; (800e52c <vPortEnterCritical+0x58>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d10f      	bne.n	800e520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e500:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <vPortEnterCritical+0x5c>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	b2db      	uxtb	r3, r3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00a      	beq.n	800e520 <vPortEnterCritical+0x4c>
	__asm volatile
 800e50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50e:	f383 8811 	msr	BASEPRI, r3
 800e512:	f3bf 8f6f 	isb	sy
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	603b      	str	r3, [r7, #0]
}
 800e51c:	bf00      	nop
 800e51e:	e7fe      	b.n	800e51e <vPortEnterCritical+0x4a>
	}
}
 800e520:	bf00      	nop
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	24000030 	.word	0x24000030
 800e530:	e000ed04 	.word	0xe000ed04

0800e534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e53a:	4b12      	ldr	r3, [pc, #72]	; (800e584 <vPortExitCritical+0x50>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d10a      	bne.n	800e558 <vPortExitCritical+0x24>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e546:	f383 8811 	msr	BASEPRI, r3
 800e54a:	f3bf 8f6f 	isb	sy
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	607b      	str	r3, [r7, #4]
}
 800e554:	bf00      	nop
 800e556:	e7fe      	b.n	800e556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e558:	4b0a      	ldr	r3, [pc, #40]	; (800e584 <vPortExitCritical+0x50>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	4a09      	ldr	r2, [pc, #36]	; (800e584 <vPortExitCritical+0x50>)
 800e560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e562:	4b08      	ldr	r3, [pc, #32]	; (800e584 <vPortExitCritical+0x50>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d105      	bne.n	800e576 <vPortExitCritical+0x42>
 800e56a:	2300      	movs	r3, #0
 800e56c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	f383 8811 	msr	BASEPRI, r3
}
 800e574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e576:	bf00      	nop
 800e578:	370c      	adds	r7, #12
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	24000030 	.word	0x24000030
	...

0800e590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e590:	f3ef 8009 	mrs	r0, PSP
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	4b15      	ldr	r3, [pc, #84]	; (800e5f0 <pxCurrentTCBConst>)
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	f01e 0f10 	tst.w	lr, #16
 800e5a0:	bf08      	it	eq
 800e5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5aa:	6010      	str	r0, [r2, #0]
 800e5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e5b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e5b4:	f380 8811 	msr	BASEPRI, r0
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f7ff f9fa 	bl	800d9b8 <vTaskSwitchContext>
 800e5c4:	f04f 0000 	mov.w	r0, #0
 800e5c8:	f380 8811 	msr	BASEPRI, r0
 800e5cc:	bc09      	pop	{r0, r3}
 800e5ce:	6819      	ldr	r1, [r3, #0]
 800e5d0:	6808      	ldr	r0, [r1, #0]
 800e5d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d6:	f01e 0f10 	tst.w	lr, #16
 800e5da:	bf08      	it	eq
 800e5dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e5e0:	f380 8809 	msr	PSP, r0
 800e5e4:	f3bf 8f6f 	isb	sy
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop
 800e5ec:	f3af 8000 	nop.w

0800e5f0 <pxCurrentTCBConst>:
 800e5f0:	24000388 	.word	0x24000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop

0800e5f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	607b      	str	r3, [r7, #4]
}
 800e610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e612:	f7ff f919 	bl	800d848 <xTaskIncrementTick>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d003      	beq.n	800e624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e61c:	4b06      	ldr	r3, [pc, #24]	; (800e638 <SysTick_Handler+0x40>)
 800e61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	2300      	movs	r3, #0
 800e626:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	f383 8811 	msr	BASEPRI, r3
}
 800e62e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e630:	bf00      	nop
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	e000ed04 	.word	0xe000ed04

0800e63c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e63c:	b480      	push	{r7}
 800e63e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e640:	4b0b      	ldr	r3, [pc, #44]	; (800e670 <vPortSetupTimerInterrupt+0x34>)
 800e642:	2200      	movs	r2, #0
 800e644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e646:	4b0b      	ldr	r3, [pc, #44]	; (800e674 <vPortSetupTimerInterrupt+0x38>)
 800e648:	2200      	movs	r2, #0
 800e64a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e64c:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <vPortSetupTimerInterrupt+0x3c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a0a      	ldr	r2, [pc, #40]	; (800e67c <vPortSetupTimerInterrupt+0x40>)
 800e652:	fba2 2303 	umull	r2, r3, r2, r3
 800e656:	099b      	lsrs	r3, r3, #6
 800e658:	4a09      	ldr	r2, [pc, #36]	; (800e680 <vPortSetupTimerInterrupt+0x44>)
 800e65a:	3b01      	subs	r3, #1
 800e65c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e65e:	4b04      	ldr	r3, [pc, #16]	; (800e670 <vPortSetupTimerInterrupt+0x34>)
 800e660:	2207      	movs	r2, #7
 800e662:	601a      	str	r2, [r3, #0]
}
 800e664:	bf00      	nop
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	e000e010 	.word	0xe000e010
 800e674:	e000e018 	.word	0xe000e018
 800e678:	24000020 	.word	0x24000020
 800e67c:	10624dd3 	.word	0x10624dd3
 800e680:	e000e014 	.word	0xe000e014

0800e684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e694 <vPortEnableVFP+0x10>
 800e688:	6801      	ldr	r1, [r0, #0]
 800e68a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e68e:	6001      	str	r1, [r0, #0]
 800e690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e692:	bf00      	nop
 800e694:	e000ed88 	.word	0xe000ed88

0800e698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e698:	b480      	push	{r7}
 800e69a:	b085      	sub	sp, #20
 800e69c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e69e:	f3ef 8305 	mrs	r3, IPSR
 800e6a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2b0f      	cmp	r3, #15
 800e6a8:	d914      	bls.n	800e6d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e6aa:	4a17      	ldr	r2, [pc, #92]	; (800e708 <vPortValidateInterruptPriority+0x70>)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e6b4:	4b15      	ldr	r3, [pc, #84]	; (800e70c <vPortValidateInterruptPriority+0x74>)
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	7afa      	ldrb	r2, [r7, #11]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d20a      	bcs.n	800e6d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	607b      	str	r3, [r7, #4]
}
 800e6d0:	bf00      	nop
 800e6d2:	e7fe      	b.n	800e6d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e6d4:	4b0e      	ldr	r3, [pc, #56]	; (800e710 <vPortValidateInterruptPriority+0x78>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e6dc:	4b0d      	ldr	r3, [pc, #52]	; (800e714 <vPortValidateInterruptPriority+0x7c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d90a      	bls.n	800e6fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	603b      	str	r3, [r7, #0]
}
 800e6f6:	bf00      	nop
 800e6f8:	e7fe      	b.n	800e6f8 <vPortValidateInterruptPriority+0x60>
	}
 800e6fa:	bf00      	nop
 800e6fc:	3714      	adds	r7, #20
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop
 800e708:	e000e3f0 	.word	0xe000e3f0
 800e70c:	240004b4 	.word	0x240004b4
 800e710:	e000ed0c 	.word	0xe000ed0c
 800e714:	240004b8 	.word	0x240004b8

0800e718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b08a      	sub	sp, #40	; 0x28
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e720:	2300      	movs	r3, #0
 800e722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e724:	f7fe ffe6 	bl	800d6f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e728:	4b5b      	ldr	r3, [pc, #364]	; (800e898 <pvPortMalloc+0x180>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d101      	bne.n	800e734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e730:	f000 f920 	bl	800e974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e734:	4b59      	ldr	r3, [pc, #356]	; (800e89c <pvPortMalloc+0x184>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4013      	ands	r3, r2
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f040 8093 	bne.w	800e868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d01d      	beq.n	800e784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e748:	2208      	movs	r2, #8
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4413      	add	r3, r2
 800e74e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f003 0307 	and.w	r3, r3, #7
 800e756:	2b00      	cmp	r3, #0
 800e758:	d014      	beq.n	800e784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f023 0307 	bic.w	r3, r3, #7
 800e760:	3308      	adds	r3, #8
 800e762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f003 0307 	and.w	r3, r3, #7
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00a      	beq.n	800e784 <pvPortMalloc+0x6c>
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	617b      	str	r3, [r7, #20]
}
 800e780:	bf00      	nop
 800e782:	e7fe      	b.n	800e782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d06e      	beq.n	800e868 <pvPortMalloc+0x150>
 800e78a:	4b45      	ldr	r3, [pc, #276]	; (800e8a0 <pvPortMalloc+0x188>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	429a      	cmp	r2, r3
 800e792:	d869      	bhi.n	800e868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e794:	4b43      	ldr	r3, [pc, #268]	; (800e8a4 <pvPortMalloc+0x18c>)
 800e796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e798:	4b42      	ldr	r3, [pc, #264]	; (800e8a4 <pvPortMalloc+0x18c>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e79e:	e004      	b.n	800e7aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d903      	bls.n	800e7bc <pvPortMalloc+0xa4>
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d1f1      	bne.n	800e7a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e7bc:	4b36      	ldr	r3, [pc, #216]	; (800e898 <pvPortMalloc+0x180>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d050      	beq.n	800e868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e7c6:	6a3b      	ldr	r3, [r7, #32]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2208      	movs	r2, #8
 800e7cc:	4413      	add	r3, r2
 800e7ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	6a3b      	ldr	r3, [r7, #32]
 800e7d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	1ad2      	subs	r2, r2, r3
 800e7e0:	2308      	movs	r3, #8
 800e7e2:	005b      	lsls	r3, r3, #1
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d91f      	bls.n	800e828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	f003 0307 	and.w	r3, r3, #7
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00a      	beq.n	800e810 <pvPortMalloc+0xf8>
	__asm volatile
 800e7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fe:	f383 8811 	msr	BASEPRI, r3
 800e802:	f3bf 8f6f 	isb	sy
 800e806:	f3bf 8f4f 	dsb	sy
 800e80a:	613b      	str	r3, [r7, #16]
}
 800e80c:	bf00      	nop
 800e80e:	e7fe      	b.n	800e80e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e812:	685a      	ldr	r2, [r3, #4]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	1ad2      	subs	r2, r2, r3
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e822:	69b8      	ldr	r0, [r7, #24]
 800e824:	f000 f908 	bl	800ea38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e828:	4b1d      	ldr	r3, [pc, #116]	; (800e8a0 <pvPortMalloc+0x188>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	4a1b      	ldr	r2, [pc, #108]	; (800e8a0 <pvPortMalloc+0x188>)
 800e834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e836:	4b1a      	ldr	r3, [pc, #104]	; (800e8a0 <pvPortMalloc+0x188>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	4b1b      	ldr	r3, [pc, #108]	; (800e8a8 <pvPortMalloc+0x190>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d203      	bcs.n	800e84a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e842:	4b17      	ldr	r3, [pc, #92]	; (800e8a0 <pvPortMalloc+0x188>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a18      	ldr	r2, [pc, #96]	; (800e8a8 <pvPortMalloc+0x190>)
 800e848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	685a      	ldr	r2, [r3, #4]
 800e84e:	4b13      	ldr	r3, [pc, #76]	; (800e89c <pvPortMalloc+0x184>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	431a      	orrs	r2, r3
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85a:	2200      	movs	r2, #0
 800e85c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e85e:	4b13      	ldr	r3, [pc, #76]	; (800e8ac <pvPortMalloc+0x194>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3301      	adds	r3, #1
 800e864:	4a11      	ldr	r2, [pc, #68]	; (800e8ac <pvPortMalloc+0x194>)
 800e866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e868:	f7fe ff52 	bl	800d710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	f003 0307 	and.w	r3, r3, #7
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00a      	beq.n	800e88c <pvPortMalloc+0x174>
	__asm volatile
 800e876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87a:	f383 8811 	msr	BASEPRI, r3
 800e87e:	f3bf 8f6f 	isb	sy
 800e882:	f3bf 8f4f 	dsb	sy
 800e886:	60fb      	str	r3, [r7, #12]
}
 800e888:	bf00      	nop
 800e88a:	e7fe      	b.n	800e88a <pvPortMalloc+0x172>
	return pvReturn;
 800e88c:	69fb      	ldr	r3, [r7, #28]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3728      	adds	r7, #40	; 0x28
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	240040c4 	.word	0x240040c4
 800e89c:	240040d8 	.word	0x240040d8
 800e8a0:	240040c8 	.word	0x240040c8
 800e8a4:	240040bc 	.word	0x240040bc
 800e8a8:	240040cc 	.word	0x240040cc
 800e8ac:	240040d0 	.word	0x240040d0

0800e8b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d04d      	beq.n	800e95e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e8c2:	2308      	movs	r3, #8
 800e8c4:	425b      	negs	r3, r3
 800e8c6:	697a      	ldr	r2, [r7, #20]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	685a      	ldr	r2, [r3, #4]
 800e8d4:	4b24      	ldr	r3, [pc, #144]	; (800e968 <vPortFree+0xb8>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4013      	ands	r3, r2
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10a      	bne.n	800e8f4 <vPortFree+0x44>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	60fb      	str	r3, [r7, #12]
}
 800e8f0:	bf00      	nop
 800e8f2:	e7fe      	b.n	800e8f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00a      	beq.n	800e912 <vPortFree+0x62>
	__asm volatile
 800e8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e900:	f383 8811 	msr	BASEPRI, r3
 800e904:	f3bf 8f6f 	isb	sy
 800e908:	f3bf 8f4f 	dsb	sy
 800e90c:	60bb      	str	r3, [r7, #8]
}
 800e90e:	bf00      	nop
 800e910:	e7fe      	b.n	800e910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	685a      	ldr	r2, [r3, #4]
 800e916:	4b14      	ldr	r3, [pc, #80]	; (800e968 <vPortFree+0xb8>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4013      	ands	r3, r2
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d01e      	beq.n	800e95e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d11a      	bne.n	800e95e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	685a      	ldr	r2, [r3, #4]
 800e92c:	4b0e      	ldr	r3, [pc, #56]	; (800e968 <vPortFree+0xb8>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	43db      	mvns	r3, r3
 800e932:	401a      	ands	r2, r3
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e938:	f7fe fedc 	bl	800d6f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	685a      	ldr	r2, [r3, #4]
 800e940:	4b0a      	ldr	r3, [pc, #40]	; (800e96c <vPortFree+0xbc>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4413      	add	r3, r2
 800e946:	4a09      	ldr	r2, [pc, #36]	; (800e96c <vPortFree+0xbc>)
 800e948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e94a:	6938      	ldr	r0, [r7, #16]
 800e94c:	f000 f874 	bl	800ea38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e950:	4b07      	ldr	r3, [pc, #28]	; (800e970 <vPortFree+0xc0>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3301      	adds	r3, #1
 800e956:	4a06      	ldr	r2, [pc, #24]	; (800e970 <vPortFree+0xc0>)
 800e958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e95a:	f7fe fed9 	bl	800d710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e95e:	bf00      	nop
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	240040d8 	.word	0x240040d8
 800e96c:	240040c8 	.word	0x240040c8
 800e970:	240040d4 	.word	0x240040d4

0800e974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e974:	b480      	push	{r7}
 800e976:	b085      	sub	sp, #20
 800e978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e97a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e97e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e980:	4b27      	ldr	r3, [pc, #156]	; (800ea20 <prvHeapInit+0xac>)
 800e982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f003 0307 	and.w	r3, r3, #7
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00c      	beq.n	800e9a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	3307      	adds	r3, #7
 800e992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f023 0307 	bic.w	r3, r3, #7
 800e99a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	1ad3      	subs	r3, r2, r3
 800e9a2:	4a1f      	ldr	r2, [pc, #124]	; (800ea20 <prvHeapInit+0xac>)
 800e9a4:	4413      	add	r3, r2
 800e9a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e9ac:	4a1d      	ldr	r2, [pc, #116]	; (800ea24 <prvHeapInit+0xb0>)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ea24 <prvHeapInit+0xb0>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	68ba      	ldr	r2, [r7, #8]
 800e9bc:	4413      	add	r3, r2
 800e9be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	1a9b      	subs	r3, r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f023 0307 	bic.w	r3, r3, #7
 800e9ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	4a15      	ldr	r2, [pc, #84]	; (800ea28 <prvHeapInit+0xb4>)
 800e9d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e9d6:	4b14      	ldr	r3, [pc, #80]	; (800ea28 <prvHeapInit+0xb4>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e9de:	4b12      	ldr	r3, [pc, #72]	; (800ea28 <prvHeapInit+0xb4>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	1ad2      	subs	r2, r2, r3
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e9f4:	4b0c      	ldr	r3, [pc, #48]	; (800ea28 <prvHeapInit+0xb4>)
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	4a0a      	ldr	r2, [pc, #40]	; (800ea2c <prvHeapInit+0xb8>)
 800ea02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	4a09      	ldr	r2, [pc, #36]	; (800ea30 <prvHeapInit+0xbc>)
 800ea0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea0c:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <prvHeapInit+0xc0>)
 800ea0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ea12:	601a      	str	r2, [r3, #0]
}
 800ea14:	bf00      	nop
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr
 800ea20:	240004bc 	.word	0x240004bc
 800ea24:	240040bc 	.word	0x240040bc
 800ea28:	240040c4 	.word	0x240040c4
 800ea2c:	240040cc 	.word	0x240040cc
 800ea30:	240040c8 	.word	0x240040c8
 800ea34:	240040d8 	.word	0x240040d8

0800ea38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ea40:	4b28      	ldr	r3, [pc, #160]	; (800eae4 <prvInsertBlockIntoFreeList+0xac>)
 800ea42:	60fb      	str	r3, [r7, #12]
 800ea44:	e002      	b.n	800ea4c <prvInsertBlockIntoFreeList+0x14>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	60fb      	str	r3, [r7, #12]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d8f7      	bhi.n	800ea46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	4413      	add	r3, r2
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d108      	bne.n	800ea7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	441a      	add	r2, r3
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	441a      	add	r2, r3
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d118      	bne.n	800eac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	4b15      	ldr	r3, [pc, #84]	; (800eae8 <prvInsertBlockIntoFreeList+0xb0>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d00d      	beq.n	800eab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	685a      	ldr	r2, [r3, #4]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	441a      	add	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	e008      	b.n	800eac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eab6:	4b0c      	ldr	r3, [pc, #48]	; (800eae8 <prvInsertBlockIntoFreeList+0xb0>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	601a      	str	r2, [r3, #0]
 800eabe:	e003      	b.n	800eac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eac8:	68fa      	ldr	r2, [r7, #12]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d002      	beq.n	800ead6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ead6:	bf00      	nop
 800ead8:	3714      	adds	r7, #20
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	240040bc 	.word	0x240040bc
 800eae8:	240040c4 	.word	0x240040c4

0800eaec <__libc_init_array>:
 800eaec:	b570      	push	{r4, r5, r6, lr}
 800eaee:	4d0d      	ldr	r5, [pc, #52]	; (800eb24 <__libc_init_array+0x38>)
 800eaf0:	4c0d      	ldr	r4, [pc, #52]	; (800eb28 <__libc_init_array+0x3c>)
 800eaf2:	1b64      	subs	r4, r4, r5
 800eaf4:	10a4      	asrs	r4, r4, #2
 800eaf6:	2600      	movs	r6, #0
 800eaf8:	42a6      	cmp	r6, r4
 800eafa:	d109      	bne.n	800eb10 <__libc_init_array+0x24>
 800eafc:	4d0b      	ldr	r5, [pc, #44]	; (800eb2c <__libc_init_array+0x40>)
 800eafe:	4c0c      	ldr	r4, [pc, #48]	; (800eb30 <__libc_init_array+0x44>)
 800eb00:	f000 f82e 	bl	800eb60 <_init>
 800eb04:	1b64      	subs	r4, r4, r5
 800eb06:	10a4      	asrs	r4, r4, #2
 800eb08:	2600      	movs	r6, #0
 800eb0a:	42a6      	cmp	r6, r4
 800eb0c:	d105      	bne.n	800eb1a <__libc_init_array+0x2e>
 800eb0e:	bd70      	pop	{r4, r5, r6, pc}
 800eb10:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb14:	4798      	blx	r3
 800eb16:	3601      	adds	r6, #1
 800eb18:	e7ee      	b.n	800eaf8 <__libc_init_array+0xc>
 800eb1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb1e:	4798      	blx	r3
 800eb20:	3601      	adds	r6, #1
 800eb22:	e7f2      	b.n	800eb0a <__libc_init_array+0x1e>
 800eb24:	0800ee08 	.word	0x0800ee08
 800eb28:	0800ee08 	.word	0x0800ee08
 800eb2c:	0800ee08 	.word	0x0800ee08
 800eb30:	0800ee0c 	.word	0x0800ee0c

0800eb34 <memcpy>:
 800eb34:	440a      	add	r2, r1
 800eb36:	4291      	cmp	r1, r2
 800eb38:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb3c:	d100      	bne.n	800eb40 <memcpy+0xc>
 800eb3e:	4770      	bx	lr
 800eb40:	b510      	push	{r4, lr}
 800eb42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb4a:	4291      	cmp	r1, r2
 800eb4c:	d1f9      	bne.n	800eb42 <memcpy+0xe>
 800eb4e:	bd10      	pop	{r4, pc}

0800eb50 <memset>:
 800eb50:	4402      	add	r2, r0
 800eb52:	4603      	mov	r3, r0
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d100      	bne.n	800eb5a <memset+0xa>
 800eb58:	4770      	bx	lr
 800eb5a:	f803 1b01 	strb.w	r1, [r3], #1
 800eb5e:	e7f9      	b.n	800eb54 <memset+0x4>

0800eb60 <_init>:
 800eb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb62:	bf00      	nop
 800eb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb66:	bc08      	pop	{r3}
 800eb68:	469e      	mov	lr, r3
 800eb6a:	4770      	bx	lr

0800eb6c <_fini>:
 800eb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb6e:	bf00      	nop
 800eb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb72:	bc08      	pop	{r3}
 800eb74:	469e      	mov	lr, r3
 800eb76:	4770      	bx	lr
